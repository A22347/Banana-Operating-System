
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f7 6c 00 00       	call   c0006d17 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 95 b9 01 00       	call   c001b9ba <_init>
c0000025:	c3                   	ret    
c0000026:	bb 56 c4 01 c0       	mov    ebx,0xc001c456
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 c4 01 c0    	cmp    ebx,0xc001c460
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 ef 01 c0       	mov    eax,0xc001efd8
c0000049:	3d d8 ef 01 c0       	cmp    eax,0xc001efd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 ef 01 c0       	push   0xc001efd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 ef 01 c0       	mov    eax,0xc001efd8
c0000075:	2d d8 ef 01 c0       	sub    eax,0xc001efd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 ef 01 c0       	push   0xc001efd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 f1 01 c0 00 	cmp    BYTE PTR ds:0xc001f160,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 c4 01 c0       	mov    ebx,0xc001c468
c00000bb:	81 eb 64 c4 01 c0    	sub    ebx,0xc001c464
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 c4 01 c0       	mov    esi,0xc001c464
c00000ca:	a1 64 f1 01 c0       	mov    eax,ds:0xc001f164
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 f1 01 c0       	mov    ds:0xc001f164,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 f1 01 c0       	mov    eax,ds:0xc001f164
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 ef 01 c0       	push   0xc001efd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 f1 01 c0 01 	mov    BYTE PTR ds:0xc001f160,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 f1 01 c0       	push   0xc001f168
c000012c:	68 d8 ef 01 c0       	push   0xc001efd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 18 20 01 00       	call   c00122e8 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 2c 95 00 00       	call   c0009814 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 f6 1f 01 00       	call   c00122e8 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 c7 24 01 00       	call   c00127d8 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 16 2b 01 00       	call   c0012e30 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 f5 01 c0 	lgdtd  ds:0xc001f5b0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 4d 58 00 00       	jmp    c0005bef <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 80 f1 01 c0       	mov    ds:0xc001f180,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 80 f1 01 c0    	mov    DWORD PTR ds:0xc001f180,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 80 f1 01 c0    	mov    ebx,DWORD PTR ds:0xc001f180
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 80 c4 01 c0 02 	test   BYTE PTR [edx-0x3ffe3b80],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 80 c4 01 c0 01 	test   BYTE PTR [edx-0x3ffe3b80],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 80 c4 01 c0 08 	test   BYTE PTR [edx-0x3ffe3b80],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 80 c4 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3b80],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 80 c4 01 c0 01 	test   BYTE PTR [edx-0x3ffe3b80],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d a0 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1a0
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d a0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a0,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 a4 f1 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0e5c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 a4 f1 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0e5c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d a0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a0,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 cc f1 01 c0    	cmp    DWORD PTR ds:0xc001f1cc,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d dc f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1dc
c0000d5d:	c7 42 0c d4 f1 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f1d4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 dc f1 01 c0    	mov    DWORD PTR ds:0xc001f1dc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 cc f1 01 c0    	mov    DWORD PTR ds:0xc001f1cc,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 a0 f1 01 c0 02 	test   BYTE PTR ds:0xc001f1a0,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 ea 5c 00 00       	call   c0006b28 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 2c 5c 00 00       	call   c0006b28 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 16 5c 00 00       	call   c0006b28 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 f2 5b 00 00       	call   c0006b28 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d a0 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1a0
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 a4 f1 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0e5c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 a4 f1 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0e5c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 d4 f1 01 c0 	lea    edx,[eax*8-0x3ffe0e2c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d e0 f1 01 c0    	mov    ebx,DWORD PTR ds:0xc001f1e0
c00010df:	81 fb d4 f1 01 c0    	cmp    ebx,0xc001f1d4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d d4 f1 01 c0       	cmp    eax,0xc001f1d4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d d0 f1 01 c0    	cmp    DWORD PTR ds:0xc001f1d0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 dc f1 01 c0       	mov    ds:0xc001f1dc,eax
c000111b:	a3 e0 f1 01 c0       	mov    ds:0xc001f1e0,eax
c0001120:	a3 d0 f1 01 c0       	mov    ds:0xc001f1d0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 d4 f1 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f1d4
c000112e:	c7 40 0c d4 f1 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f1d4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 e0 f1 01 c0       	mov    ds:0xc001f1e0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 d4 f1 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f1d4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 98 f1 01 c0 	lea    ebp,[edx*4-0x3ffe0e68]
c000117f:	8b 14 95 a0 f1 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0e60]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 a0 f1 01 c0 	lea    ecx,[edx*4-0x3ffe0e60]
c000119a:	8b 14 95 a0 f1 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0e60]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd d4 f4 01 c0 	or     DWORD PTR [edi*4-0x3ffe0b2c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 d4 f1 01 c0 	lea    eax,[eax*8-0x3ffe0e2c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d dc f1 01 c0    	mov    DWORD PTR ds:0xc001f1dc,ecx
c0001254:	89 0d e0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e0,ecx
c000125a:	c7 41 08 d4 f1 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f1d4
c0001261:	c7 41 0c d4 f1 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f1d4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd cc f1 01 c0 	lea    edx,[ecx*8-0x3ffe0e34]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d d4 f4 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0b2c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d d4 f4 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0b2c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 cc f1 01 c0 	lea    edx,[eax*4-0x3ffe0e34]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d d4 f4 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0b2c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d dc f1 01 c0    	mov    DWORD PTR ds:0xc001f1dc,edi
c0001327:	89 3d e0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e0,edi
c000132d:	c7 47 08 d4 f1 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f1d4
c0001334:	c7 47 0c d4 f1 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f1d4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d d0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1d0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 cc f1 01 c0       	mov    eax,ds:0xc001f1cc
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d cc f1 01 c0    	mov    DWORD PTR ds:0xc001f1cc,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba a0 f1 01 c0       	mov    edx,0xc001f1a0
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d a0 f1 01 c0 00 	cmp    DWORD PTR ds:0xc001f1a0,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d f4 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f4f4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 f4 f4 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f4f4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d f4 f4 01 c0    	mov    DWORD PTR ds:0xc001f4f4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 cc f1 01 c0    	cmp    DWORD PTR ds:0xc001f1cc,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d cc f1 01 c0    	mov    DWORD PTR ds:0xc001f1cc,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d a0 f1 01 c0 00 	cmp    DWORD PTR ds:0xc001f1a0,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 fc f4 01 c0    	push   DWORD PTR ds:0xc001f4fc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d a0 f1 01 c0 00 	cmp    DWORD PTR ds:0xc001f1a0,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 fc f4 01 c0       	mov    eax,ds:0xc001f4fc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d cc f1 01 c0 00 	cmp    DWORD PTR ds:0xc001f1cc,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 cc f1 01 c0       	mov    eax,ds:0xc001f1cc
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 a4 f1 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0e5c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 d4 f1 01 c0       	mov    eax,0xc001f1d4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d cc f4 01 c0       	cmp    eax,0xc001f4cc
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 08 f5 01 c0       	mov    eax,ds:0xc001f508
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 f0 f4 01 c0    	mov    esi,DWORD PTR ds:0xc001f4f0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 04 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f504
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 14 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f514
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 84 c5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3a7c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 a0 f1 01 c0       	mov    eax,ds:0xc001f1a0
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 a0 f1 01 c0       	mov    ds:0xc001f1a0,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d e4 f4 01 c0    	mov    DWORD PTR ds:0xc001f4e4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d e8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4e8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d ec f4 01 c0    	mov    DWORD PTR ds:0xc001f4ec,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 f4 f4 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f4f4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    

c0001afb <disk_status>:
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	c3                   	ret    

c0001afe <disk_initialize>:
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	c3                   	ret    

c0001b01 <disk_read>:
c0001b01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b06:	0f b6 04 85 e0 2b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd420]
c0001b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b12:	e9 1d 45 01 00       	jmp    c0016034 <fatWrapperReadDisk>

c0001b17 <disk_write>:
c0001b17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b1c:	0f b6 04 85 e0 2b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd420]
c0001b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b28:	e9 4b 45 01 00       	jmp    c0016078 <fatWrapperWriteDisk>

c0001b2d <disk_ioctl>:
c0001b2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 e0 2b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd420]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 70 45 01 00       	jmp    c00160bc <fatWrapperIoctl>

c0001b4c <ld_word>:
c0001b4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b53:	c1 e2 08             	shl    edx,0x8
c0001b56:	09 d0                	or     eax,edx
c0001b58:	c3                   	ret    

c0001b59 <ld_dword>:
c0001b59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b5d:	89 d1                	mov    ecx,edx
c0001b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b63:	c1 e1 08             	shl    ecx,0x8
c0001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b69:	09 ca                	or     edx,ecx
c0001b6b:	c1 e2 08             	shl    edx,0x8
c0001b6e:	09 d0                	or     eax,edx
c0001b70:	c3                   	ret    

c0001b71 <st_word>:
c0001b71:	66 89 10             	mov    WORD PTR [eax],dx
c0001b74:	c3                   	ret    

c0001b75 <st_dword>:
c0001b75:	89 10                	mov    DWORD PTR [eax],edx
c0001b77:	c3                   	ret    

c0001b78 <mem_cpy>:
c0001b78:	85 c9                	test   ecx,ecx
c0001b7a:	74 10                	je     c0001b8c <mem_cpy+0x14>
c0001b7c:	57                   	push   edi
c0001b7d:	01 c1                	add    ecx,eax
c0001b7f:	56                   	push   esi
c0001b80:	89 c7                	mov    edi,eax
c0001b82:	89 d6                	mov    esi,edx
c0001b84:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001b85:	39 f9                	cmp    ecx,edi
c0001b87:	75 fb                	jne    c0001b84 <mem_cpy+0xc>
c0001b89:	5e                   	pop    esi
c0001b8a:	5f                   	pop    edi
c0001b8b:	c3                   	ret    
c0001b8c:	c3                   	ret    

c0001b8d <mem_set>:
c0001b8d:	01 c1                	add    ecx,eax
c0001b8f:	40                   	inc    eax
c0001b90:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b93:	39 c8                	cmp    eax,ecx
c0001b95:	75 f8                	jne    c0001b8f <mem_set+0x2>
c0001b97:	c3                   	ret    

c0001b98 <mem_cmp>:
c0001b98:	57                   	push   edi
c0001b99:	56                   	push   esi
c0001b9a:	89 c6                	mov    esi,eax
c0001b9c:	53                   	push   ebx
c0001b9d:	46                   	inc    esi
c0001b9e:	42                   	inc    edx
c0001b9f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ba3:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ba7:	29 fb                	sub    ebx,edi
c0001ba9:	89 cf                	mov    edi,ecx
c0001bab:	29 f7                	sub    edi,esi
c0001bad:	01 c7                	add    edi,eax
c0001baf:	74 04                	je     c0001bb5 <mem_cmp+0x1d>
c0001bb1:	85 db                	test   ebx,ebx
c0001bb3:	74 e8                	je     c0001b9d <mem_cmp+0x5>
c0001bb5:	89 d8                	mov    eax,ebx
c0001bb7:	5b                   	pop    ebx
c0001bb8:	5e                   	pop    esi
c0001bb9:	5f                   	pop    edi
c0001bba:	c3                   	ret    

c0001bbb <chk_chr>:
c0001bbb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001bbe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001bc1:	74 07                	je     c0001bca <chk_chr+0xf>
c0001bc3:	39 d1                	cmp    ecx,edx
c0001bc5:	74 03                	je     c0001bca <chk_chr+0xf>
c0001bc7:	40                   	inc    eax
c0001bc8:	eb f1                	jmp    c0001bbb <chk_chr>
c0001bca:	89 c8                	mov    eax,ecx
c0001bcc:	c3                   	ret    

c0001bcd <dbc_1st>:
c0001bcd:	31 c0                	xor    eax,eax
c0001bcf:	c3                   	ret    

c0001bd0 <dbc_2nd>:
c0001bd0:	31 c0                	xor    eax,eax
c0001bd2:	c3                   	ret    

c0001bd3 <tchar2uni>:
c0001bd3:	57                   	push   edi
c0001bd4:	89 c7                	mov    edi,eax
c0001bd6:	56                   	push   esi
c0001bd7:	53                   	push   ebx
c0001bd8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001bda:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001bdc:	8d 73 01             	lea    esi,[ebx+0x1]
c0001bdf:	84 c9                	test   cl,cl
c0001be1:	78 0a                	js     c0001bed <tchar2uni+0x1a>
c0001be3:	0f b6 d1             	movzx  edx,cl
c0001be6:	89 f3                	mov    ebx,esi
c0001be8:	e9 9f 00 00 00       	jmp    c0001c8c <tchar2uni+0xb9>
c0001bed:	88 ca                	mov    dl,cl
c0001bef:	83 e2 e0             	and    edx,0xffffffe0
c0001bf2:	80 fa c0             	cmp    dl,0xc0
c0001bf5:	75 0c                	jne    c0001c03 <tchar2uni+0x30>
c0001bf7:	89 ca                	mov    edx,ecx
c0001bf9:	b9 01 00 00 00       	mov    ecx,0x1
c0001bfe:	83 e2 1f             	and    edx,0x1f
c0001c01:	eb 2e                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c03:	88 ca                	mov    dl,cl
c0001c05:	83 e2 f0             	and    edx,0xfffffff0
c0001c08:	80 fa e0             	cmp    dl,0xe0
c0001c0b:	75 0c                	jne    c0001c19 <tchar2uni+0x46>
c0001c0d:	89 ca                	mov    edx,ecx
c0001c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0001c14:	83 e2 0f             	and    edx,0xf
c0001c17:	eb 18                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c19:	88 ca                	mov    dl,cl
c0001c1b:	83 e2 f8             	and    edx,0xfffffff8
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	83 ca ff             	or     edx,0xffffffff
c0001c23:	3c f0                	cmp    al,0xf0
c0001c25:	75 6c                	jne    c0001c93 <tchar2uni+0xc0>
c0001c27:	89 ca                	mov    edx,ecx
c0001c29:	b9 03 00 00 00       	mov    ecx,0x3
c0001c2e:	83 e2 07             	and    edx,0x7
c0001c31:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c35:	46                   	inc    esi
c0001c36:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c39:	88 c8                	mov    al,cl
c0001c3b:	83 e0 c0             	and    eax,0xffffffc0
c0001c3e:	3c 80                	cmp    al,0x80
c0001c40:	75 4e                	jne    c0001c90 <tchar2uni+0xbd>
c0001c42:	c1 e2 06             	shl    edx,0x6
c0001c45:	83 e1 3f             	and    ecx,0x3f
c0001c48:	09 ca                	or     edx,ecx
c0001c4a:	39 de                	cmp    esi,ebx
c0001c4c:	75 e7                	jne    c0001c35 <tchar2uni+0x62>
c0001c4e:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001c51:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001c57:	77 37                	ja     c0001c90 <tchar2uni+0xbd>
c0001c59:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001c5f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c65:	76 29                	jbe    c0001c90 <tchar2uni+0xbd>
c0001c67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001c6d:	76 1d                	jbe    c0001c8c <tchar2uni+0xb9>
c0001c6f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001c75:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001c7b:	c1 e1 06             	shl    ecx,0x6
c0001c7e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001c84:	09 ca                	or     edx,ecx
c0001c86:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c8c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c8e:	eb 03                	jmp    c0001c93 <tchar2uni+0xc0>
c0001c90:	83 ca ff             	or     edx,0xffffffff
c0001c93:	5b                   	pop    ebx
c0001c94:	89 d0                	mov    eax,edx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <put_utf>:
c0001c99:	53                   	push   ebx
c0001c9a:	83 f8 7f             	cmp    eax,0x7f
c0001c9d:	89 c3                	mov    ebx,eax
c0001c9f:	b0 00                	mov    al,0x0
c0001ca1:	77 11                	ja     c0001cb4 <put_utf+0x1b>
c0001ca3:	85 c9                	test   ecx,ecx
c0001ca5:	0f 84 e5 00 00 00    	je     c0001d90 <put_utf+0xf7>
c0001cab:	88 1a                	mov    BYTE PTR [edx],bl
c0001cad:	b0 01                	mov    al,0x1
c0001caf:	e9 dc 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cb4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001cba:	77 23                	ja     c0001cdf <put_utf+0x46>
c0001cbc:	83 f9 01             	cmp    ecx,0x1
c0001cbf:	0f 86 cb 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 c8 c0             	or     eax,0xffffffc0
c0001cd3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	b0 02                	mov    al,0x2
c0001cda:	e9 b1 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cdf:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ce5:	77 40                	ja     c0001d27 <put_utf+0x8e>
c0001ce7:	83 f9 02             	cmp    ecx,0x2
c0001cea:	0f 86 a0 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cf0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001cf6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cfc:	0f 86 8e 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001d02:	89 d8                	mov    eax,ebx
c0001d04:	c1 e8 0c             	shr    eax,0xc
c0001d07:	83 c8 e0             	or     eax,0xffffffe0
c0001d0a:	88 02                	mov    BYTE PTR [edx],al
c0001d0c:	89 d8                	mov    eax,ebx
c0001d0e:	83 e3 3f             	and    ebx,0x3f
c0001d11:	c1 e8 06             	shr    eax,0x6
c0001d14:	83 cb 80             	or     ebx,0xffffff80
c0001d17:	83 e0 3f             	and    eax,0x3f
c0001d1a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d1d:	83 c8 80             	or     eax,0xffffff80
c0001d20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d23:	b0 03                	mov    al,0x3
c0001d25:	eb 69                	jmp    c0001d90 <put_utf+0xf7>
c0001d27:	83 f9 03             	cmp    ecx,0x3
c0001d2a:	76 64                	jbe    c0001d90 <put_utf+0xf7>
c0001d2c:	89 d9                	mov    ecx,ebx
c0001d2e:	0f b7 c3             	movzx  eax,bx
c0001d31:	66 31 c9             	xor    cx,cx
c0001d34:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d3a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d40:	c1 e9 06             	shr    ecx,0x6
c0001d43:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001d49:	77 43                	ja     c0001d8e <put_utf+0xf5>
c0001d4b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001d51:	77 3b                	ja     c0001d8e <put_utf+0xf5>
c0001d53:	09 cb                	or     ebx,ecx
c0001d55:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001d5b:	89 d8                	mov    eax,ebx
c0001d5d:	c1 e8 12             	shr    eax,0x12
c0001d60:	83 c8 f0             	or     eax,0xfffffff0
c0001d63:	88 02                	mov    BYTE PTR [edx],al
c0001d65:	89 d8                	mov    eax,ebx
c0001d67:	c1 e8 0c             	shr    eax,0xc
c0001d6a:	83 e0 3f             	and    eax,0x3f
c0001d6d:	83 c8 80             	or     eax,0xffffff80
c0001d70:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d73:	89 d8                	mov    eax,ebx
c0001d75:	83 e3 3f             	and    ebx,0x3f
c0001d78:	c1 e8 06             	shr    eax,0x6
c0001d7b:	83 cb 80             	or     ebx,0xffffff80
c0001d7e:	83 e0 3f             	and    eax,0x3f
c0001d81:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001d84:	83 c8 80             	or     eax,0xffffff80
c0001d87:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d8a:	b0 04                	mov    al,0x4
c0001d8c:	eb 02                	jmp    c0001d90 <put_utf+0xf7>
c0001d8e:	31 c0                	xor    eax,eax
c0001d90:	5b                   	pop    ebx
c0001d91:	c3                   	ret    

c0001d92 <clst2sect>:
c0001d92:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001d98:	83 ea 02             	sub    edx,0x2
c0001d9b:	39 ca                	cmp    edx,ecx
c0001d9d:	76 0d                	jbe    c0001dac <clst2sect+0x1a>
c0001d9f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001da3:	0f af d1             	imul   edx,ecx
c0001da6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001da9:	89 d0                	mov    eax,edx
c0001dab:	c3                   	ret    
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <pick_lfn>:
c0001daf:	55                   	push   ebp
c0001db0:	57                   	push   edi
c0001db1:	56                   	push   esi
c0001db2:	89 d6                	mov    esi,edx
c0001db4:	53                   	push   ebx
c0001db5:	89 c3                	mov    ebx,eax
c0001db7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dba:	e8 8d fd ff ff       	call   c0001b4c <ld_word>
c0001dbf:	66 85 c0             	test   ax,ax
c0001dc2:	74 04                	je     c0001dc8 <pick_lfn+0x19>
c0001dc4:	31 c0                	xor    eax,eax
c0001dc6:	eb 5c                	jmp    c0001e24 <pick_lfn+0x75>
c0001dc8:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001dcb:	bd 01 00 00 00       	mov    ebp,0x1
c0001dd0:	83 e1 bf             	and    ecx,0xffffffbf
c0001dd3:	31 ff                	xor    edi,edi
c0001dd5:	49                   	dec    ecx
c0001dd6:	6b c9 0d             	imul   ecx,ecx,0xd
c0001dd9:	0f b6 87 e0 c6 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3920]
c0001de0:	01 f0                	add    eax,esi
c0001de2:	e8 65 fd ff ff       	call   c0001b4c <ld_word>
c0001de7:	66 85 ed             	test   bp,bp
c0001dea:	74 11                	je     c0001dfd <pick_lfn+0x4e>
c0001dec:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001df2:	77 d0                	ja     c0001dc4 <pick_lfn+0x15>
c0001df4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001df8:	89 c5                	mov    ebp,eax
c0001dfa:	41                   	inc    ecx
c0001dfb:	eb 04                	jmp    c0001e01 <pick_lfn+0x52>
c0001dfd:	66 40                	inc    ax
c0001dff:	75 c3                	jne    c0001dc4 <pick_lfn+0x15>
c0001e01:	47                   	inc    edi
c0001e02:	83 ff 0d             	cmp    edi,0xd
c0001e05:	75 d2                	jne    c0001dd9 <pick_lfn+0x2a>
c0001e07:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001e0a:	74 13                	je     c0001e1f <pick_lfn+0x70>
c0001e0c:	66 85 ed             	test   bp,bp
c0001e0f:	74 0e                	je     c0001e1f <pick_lfn+0x70>
c0001e11:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e17:	77 ab                	ja     c0001dc4 <pick_lfn+0x15>
c0001e19:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001e1f:	b8 01 00 00 00       	mov    eax,0x1
c0001e24:	5b                   	pop    ebx
c0001e25:	5e                   	pop    esi
c0001e26:	5f                   	pop    edi
c0001e27:	5d                   	pop    ebp
c0001e28:	c3                   	ret    

c0001e29 <put_lfn>:
c0001e29:	55                   	push   ebp
c0001e2a:	31 ed                	xor    ebp,ebp
c0001e2c:	57                   	push   edi
c0001e2d:	89 d7                	mov    edi,edx
c0001e2f:	56                   	push   esi
c0001e30:	31 f6                	xor    esi,esi
c0001e32:	53                   	push   ebx
c0001e33:	83 ec 08             	sub    esp,0x8
c0001e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e39:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e41:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e47:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e4d:	31 d2                	xor    edx,edx
c0001e4f:	e8 1d fd ff ff       	call   c0001b71 <st_word>
c0001e54:	0f b6 d9             	movzx  ebx,cl
c0001e57:	4b                   	dec    ebx
c0001e58:	6b db 0d             	imul   ebx,ebx,0xd
c0001e5b:	66 83 fe ff          	cmp    si,0xffff
c0001e5f:	74 08                	je     c0001e69 <put_lfn+0x40>
c0001e61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e64:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e68:	43                   	inc    ebx
c0001e69:	0f b6 85 e0 c6 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3920]
c0001e70:	0f b7 d6             	movzx  edx,si
c0001e73:	01 f8                	add    eax,edi
c0001e75:	e8 f7 fc ff ff       	call   c0001b71 <st_word>
c0001e7a:	66 85 f6             	test   si,si
c0001e7d:	75 03                	jne    c0001e82 <put_lfn+0x59>
c0001e7f:	83 ce ff             	or     esi,0xffffffff
c0001e82:	45                   	inc    ebp
c0001e83:	83 fd 0d             	cmp    ebp,0xd
c0001e86:	75 d3                	jne    c0001e5b <put_lfn+0x32>
c0001e88:	66 46                	inc    si
c0001e8a:	74 0a                	je     c0001e96 <put_lfn+0x6d>
c0001e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e94:	75 09                	jne    c0001e9f <put_lfn+0x76>
c0001e96:	88 c8                	mov    al,cl
c0001e98:	83 c8 40             	or     eax,0x40
c0001e9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001ea3:	88 07                	mov    BYTE PTR [edi],al
c0001ea5:	83 c4 08             	add    esp,0x8
c0001ea8:	5b                   	pop    ebx
c0001ea9:	5e                   	pop    esi
c0001eaa:	5f                   	pop    edi
c0001eab:	5d                   	pop    ebp
c0001eac:	c3                   	ret    

c0001ead <gen_numname>:
c0001ead:	57                   	push   edi
c0001eae:	89 cf                	mov    edi,ecx
c0001eb0:	56                   	push   esi
c0001eb1:	b9 0b 00 00 00       	mov    ecx,0xb
c0001eb6:	53                   	push   ebx
c0001eb7:	89 c6                	mov    esi,eax
c0001eb9:	83 ec 10             	sub    esp,0x10
c0001ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001ec0:	e8 b3 fc ff ff       	call   c0001b78 <mem_cpy>
c0001ec5:	83 fb 05             	cmp    ebx,0x5
c0001ec8:	76 2d                	jbe    c0001ef7 <gen_numname+0x4a>
c0001eca:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001ecd:	66 85 c0             	test   ax,ax
c0001ed0:	74 25                	je     c0001ef7 <gen_numname+0x4a>
c0001ed2:	83 c7 02             	add    edi,0x2
c0001ed5:	ba 10 00 00 00       	mov    edx,0x10
c0001eda:	01 db                	add    ebx,ebx
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	66 d1 e8             	shr    ax,1
c0001ee1:	83 e1 01             	and    ecx,0x1
c0001ee4:	01 cb                	add    ebx,ecx
c0001ee6:	0f ba e3 10          	bt     ebx,0x10
c0001eea:	73 06                	jae    c0001ef2 <gen_numname+0x45>
c0001eec:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ef2:	4a                   	dec    edx
c0001ef3:	75 e5                	jne    c0001eda <gen_numname+0x2d>
c0001ef5:	eb d3                	jmp    c0001eca <gen_numname+0x1d>
c0001ef7:	b8 07 00 00 00       	mov    eax,0x7
c0001efc:	88 d9                	mov    cl,bl
c0001efe:	83 e1 0f             	and    ecx,0xf
c0001f01:	8d 51 30             	lea    edx,[ecx+0x30]
c0001f04:	80 fa 39             	cmp    dl,0x39
c0001f07:	76 03                	jbe    c0001f0c <gen_numname+0x5f>
c0001f09:	8d 51 37             	lea    edx,[ecx+0x37]
c0001f0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001f0f:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001f13:	89 da                	mov    edx,ebx
c0001f15:	c1 ea 04             	shr    edx,0x4
c0001f18:	83 fb 0f             	cmp    ebx,0xf
c0001f1b:	76 06                	jbe    c0001f23 <gen_numname+0x76>
c0001f1d:	89 c8                	mov    eax,ecx
c0001f1f:	89 d3                	mov    ebx,edx
c0001f21:	eb d9                	jmp    c0001efc <gen_numname+0x4f>
c0001f23:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001f2d:	8d 04 16             	lea    eax,[esi+edx*1]
c0001f30:	39 ca                	cmp    edx,ecx
c0001f32:	73 18                	jae    c0001f4c <gen_numname+0x9f>
c0001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f37:	3c 20                	cmp    al,0x20
c0001f39:	74 11                	je     c0001f4c <gen_numname+0x9f>
c0001f3b:	e8 8d fc ff ff       	call   c0001bcd <dbc_1st>
c0001f40:	85 c0                	test   eax,eax
c0001f42:	74 05                	je     c0001f49 <gen_numname+0x9c>
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	74 04                	je     c0001f4c <gen_numname+0x9f>
c0001f48:	42                   	inc    edx
c0001f49:	42                   	inc    edx
c0001f4a:	eb e1                	jmp    c0001f2d <gen_numname+0x80>
c0001f4c:	b0 20                	mov    al,0x20
c0001f4e:	83 f9 07             	cmp    ecx,0x7
c0001f51:	77 05                	ja     c0001f58 <gen_numname+0xab>
c0001f53:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f57:	41                   	inc    ecx
c0001f58:	42                   	inc    edx
c0001f59:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f5d:	83 fa 07             	cmp    edx,0x7
c0001f60:	76 ea                	jbe    c0001f4c <gen_numname+0x9f>
c0001f62:	83 c4 10             	add    esp,0x10
c0001f65:	5b                   	pop    ebx
c0001f66:	5e                   	pop    esi
c0001f67:	5f                   	pop    edi
c0001f68:	c3                   	ret    

c0001f69 <sum_sfn>:
c0001f69:	31 c9                	xor    ecx,ecx
c0001f6b:	31 d2                	xor    edx,edx
c0001f6d:	d0 ca                	ror    dl,1
c0001f6f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f72:	41                   	inc    ecx
c0001f73:	83 f9 0b             	cmp    ecx,0xb
c0001f76:	75 f5                	jne    c0001f6d <sum_sfn+0x4>
c0001f78:	88 d0                	mov    al,dl
c0001f7a:	c3                   	ret    

c0001f7b <get_ldnumber>:
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 14                	je     c0001f95 <get_ldnumber+0x1a>
c0001f81:	56                   	push   esi
c0001f82:	53                   	push   ebx
c0001f83:	89 d3                	mov    ebx,edx
c0001f85:	43                   	inc    ebx
c0001f86:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f89:	80 f9 1f             	cmp    cl,0x1f
c0001f8c:	76 0d                	jbe    c0001f9b <get_ldnumber+0x20>
c0001f8e:	80 f9 3a             	cmp    cl,0x3a
c0001f91:	75 f2                	jne    c0001f85 <get_ldnumber+0xa>
c0001f93:	eb 0a                	jmp    c0001f9f <get_ldnumber+0x24>
c0001f95:	83 c9 ff             	or     ecx,0xffffffff
c0001f98:	89 c8                	mov    eax,ecx
c0001f9a:	c3                   	ret    
c0001f9b:	31 c9                	xor    ecx,ecx
c0001f9d:	eb 24                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001f9f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa2:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa5:	80 f9 09             	cmp    cl,0x9
c0001fa8:	77 16                	ja     c0001fc0 <get_ldnumber+0x45>
c0001faa:	83 c2 02             	add    edx,0x2
c0001fad:	83 c9 ff             	or     ecx,0xffffffff
c0001fb0:	39 d3                	cmp    ebx,edx
c0001fb2:	75 0f                	jne    c0001fc3 <get_ldnumber+0x48>
c0001fb4:	89 f2                	mov    edx,esi
c0001fb6:	89 18                	mov    DWORD PTR [eax],ebx
c0001fb8:	0f be ca             	movsx  ecx,dl
c0001fbb:	83 e9 30             	sub    ecx,0x30
c0001fbe:	eb 03                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001fc0:	83 c9 ff             	or     ecx,0xffffffff
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	5b                   	pop    ebx
c0001fc6:	5e                   	pop    esi
c0001fc7:	c3                   	ret    

c0001fc8 <validate>:
c0001fc8:	56                   	push   esi
c0001fc9:	53                   	push   ebx
c0001fca:	89 d6                	mov    esi,edx
c0001fcc:	51                   	push   ecx
c0001fcd:	85 c0                	test   eax,eax
c0001fcf:	75 09                	jne    c0001fda <validate+0x12>
c0001fd1:	b8 09 00 00 00       	mov    eax,0x9
c0001fd6:	31 c9                	xor    ecx,ecx
c0001fd8:	eb 2f                	jmp    c0002009 <validate+0x41>
c0001fda:	89 c3                	mov    ebx,eax
c0001fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001fde:	85 c0                	test   eax,eax
c0001fe0:	74 ef                	je     c0001fd1 <validate+0x9>
c0001fe2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001fe5:	74 ea                	je     c0001fd1 <validate+0x9>
c0001fe7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001feb:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001fef:	75 e0                	jne    c0001fd1 <validate+0x9>
c0001ff1:	83 ec 0c             	sub    esp,0xc
c0001ff4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ff8:	50                   	push   eax
c0001ff9:	e8 fd fa ff ff       	call   c0001afb <disk_status>
c0001ffe:	83 c4 10             	add    esp,0x10
c0002001:	a8 01                	test   al,0x1
c0002003:	75 cc                	jne    c0001fd1 <validate+0x9>
c0002005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002007:	31 c0                	xor    eax,eax
c0002009:	89 0e                	mov    DWORD PTR [esi],ecx
c000200b:	5a                   	pop    edx
c000200c:	5b                   	pop    ebx
c000200d:	5e                   	pop    esi
c000200e:	c3                   	ret    

c000200f <sync_window>:
c000200f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002013:	74 58                	je     c000206d <sync_window+0x5e>
c0002015:	56                   	push   esi
c0002016:	53                   	push   ebx
c0002017:	8d 70 34             	lea    esi,[eax+0x34]
c000201a:	51                   	push   ecx
c000201b:	89 c3                	mov    ebx,eax
c000201d:	6a 01                	push   0x1
c000201f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002022:	56                   	push   esi
c0002023:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002027:	50                   	push   eax
c0002028:	e8 ea fa ff ff       	call   c0001b17 <disk_write>
c000202d:	83 c4 10             	add    esp,0x10
c0002030:	ba 01 00 00 00       	mov    edx,0x1
c0002035:	85 c0                	test   eax,eax
c0002037:	75 2e                	jne    c0002067 <sync_window+0x58>
c0002039:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000203c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000203f:	89 c1                	mov    ecx,eax
c0002041:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002045:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002048:	39 d1                	cmp    ecx,edx
c000204a:	73 19                	jae    c0002065 <sync_window+0x56>
c000204c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002050:	75 13                	jne    c0002065 <sync_window+0x56>
c0002052:	6a 01                	push   0x1
c0002054:	01 d0                	add    eax,edx
c0002056:	50                   	push   eax
c0002057:	56                   	push   esi
c0002058:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000205c:	50                   	push   eax
c000205d:	e8 b5 fa ff ff       	call   c0001b17 <disk_write>
c0002062:	83 c4 10             	add    esp,0x10
c0002065:	31 d2                	xor    edx,edx
c0002067:	89 d0                	mov    eax,edx
c0002069:	5a                   	pop    edx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    
c000206d:	31 d2                	xor    edx,edx
c000206f:	89 d0                	mov    eax,edx
c0002071:	c3                   	ret    

c0002072 <move_window>:
c0002072:	57                   	push   edi
c0002073:	56                   	push   esi
c0002074:	31 f6                	xor    esi,esi
c0002076:	53                   	push   ebx
c0002077:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000207a:	74 32                	je     c00020ae <move_window+0x3c>
c000207c:	89 c3                	mov    ebx,eax
c000207e:	89 d7                	mov    edi,edx
c0002080:	e8 8a ff ff ff       	call   c000200f <sync_window>
c0002085:	89 c6                	mov    esi,eax
c0002087:	85 c0                	test   eax,eax
c0002089:	75 23                	jne    c00020ae <move_window+0x3c>
c000208b:	6a 01                	push   0x1
c000208d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002090:	57                   	push   edi
c0002091:	50                   	push   eax
c0002092:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002096:	50                   	push   eax
c0002097:	e8 65 fa ff ff       	call   c0001b01 <disk_read>
c000209c:	83 c4 10             	add    esp,0x10
c000209f:	85 c0                	test   eax,eax
c00020a1:	74 08                	je     c00020ab <move_window+0x39>
c00020a3:	be 01 00 00 00       	mov    esi,0x1
c00020a8:	83 cf ff             	or     edi,0xffffffff
c00020ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00020ae:	89 f0                	mov    eax,esi
c00020b0:	5b                   	pop    ebx
c00020b1:	5e                   	pop    esi
c00020b2:	5f                   	pop    edi
c00020b3:	c3                   	ret    

c00020b4 <check_fs>:
c00020b4:	53                   	push   ebx
c00020b5:	89 c3                	mov    ebx,eax
c00020b7:	83 ec 08             	sub    esp,0x8
c00020ba:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00020be:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00020c5:	e8 a8 ff ff ff       	call   c0002072 <move_window>
c00020ca:	ba 04 00 00 00       	mov    edx,0x4
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 68                	jne    c000213b <check_fs+0x87>
c00020d3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00020d9:	e8 6e fa ff ff       	call   c0001b4c <ld_word>
c00020de:	ba 03 00 00 00       	mov    edx,0x3
c00020e3:	66 3d 55 aa          	cmp    ax,0xaa55
c00020e7:	75 52                	jne    c000213b <check_fs+0x87>
c00020e9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00020ec:	8d 50 18             	lea    edx,[eax+0x18]
c00020ef:	80 fa 01             	cmp    dl,0x1
c00020f2:	76 09                	jbe    c00020fd <check_fs+0x49>
c00020f4:	ba 02 00 00 00       	mov    edx,0x2
c00020f9:	3c eb                	cmp    al,0xeb
c00020fb:	75 3e                	jne    c000213b <check_fs+0x87>
c00020fd:	ba 24 e6 01 c0       	mov    edx,0xc001e624
c0002102:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002105:	b9 03 00 00 00       	mov    ecx,0x3
c000210a:	e8 89 fa ff ff       	call   c0001b98 <mem_cmp>
c000210f:	31 d2                	xor    edx,edx
c0002111:	85 c0                	test   eax,eax
c0002113:	74 26                	je     c000213b <check_fs+0x87>
c0002115:	ba 9c c5 01 c0       	mov    edx,0xc001c59c
c000211a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002120:	b9 05 00 00 00       	mov    ecx,0x5
c0002125:	e8 6e fa ff ff       	call   c0001b98 <mem_cmp>
c000212a:	31 d2                	xor    edx,edx
c000212c:	85 c0                	test   eax,eax
c000212e:	74 0b                	je     c000213b <check_fs+0x87>
c0002130:	31 d2                	xor    edx,edx
c0002132:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002136:	0f 95 c2             	setne  dl
c0002139:	01 d2                	add    edx,edx
c000213b:	89 d0                	mov    eax,edx
c000213d:	83 c4 08             	add    esp,0x8
c0002140:	5b                   	pop    ebx
c0002141:	c3                   	ret    

c0002142 <find_volume>:
c0002142:	55                   	push   ebp
c0002143:	57                   	push   edi
c0002144:	56                   	push   esi
c0002145:	89 c6                	mov    esi,eax
c0002147:	53                   	push   ebx
c0002148:	89 d3                	mov    ebx,edx
c000214a:	83 ec 2c             	sub    esp,0x2c
c000214d:	31 d2                	xor    edx,edx
c000214f:	e8 60 ff ff ff       	call   c00020b4 <check_fs>
c0002154:	83 f8 02             	cmp    eax,0x2
c0002157:	74 06                	je     c000215f <find_volume+0x1d>
c0002159:	77 62                	ja     c00021bd <find_volume+0x7b>
c000215b:	85 db                	test   ebx,ebx
c000215d:	74 5e                	je     c00021bd <find_volume+0x7b>
c000215f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002163:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002169:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000216f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002173:	89 cf                	mov    edi,ecx
c0002175:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002179:	89 e8                	mov    eax,ebp
c000217b:	83 c5 10             	add    ebp,0x10
c000217e:	e8 d6 f9 ff ff       	call   c0001b59 <ld_dword>
c0002183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002187:	89 01                	mov    DWORD PTR [ecx],eax
c0002189:	83 c1 04             	add    ecx,0x4
c000218c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002190:	75 e3                	jne    c0002175 <find_volume+0x33>
c0002192:	31 ed                	xor    ebp,ebp
c0002194:	85 db                	test   ebx,ebx
c0002196:	74 03                	je     c000219b <find_volume+0x59>
c0002198:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000219b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000219e:	b8 03 00 00 00       	mov    eax,0x3
c00021a3:	85 d2                	test   edx,edx
c00021a5:	74 0c                	je     c00021b3 <find_volume+0x71>
c00021a7:	89 f0                	mov    eax,esi
c00021a9:	e8 06 ff ff ff       	call   c00020b4 <check_fs>
c00021ae:	83 f8 01             	cmp    eax,0x1
c00021b1:	76 0a                	jbe    c00021bd <find_volume+0x7b>
c00021b3:	85 db                	test   ebx,ebx
c00021b5:	75 06                	jne    c00021bd <find_volume+0x7b>
c00021b7:	45                   	inc    ebp
c00021b8:	83 fd 03             	cmp    ebp,0x3
c00021bb:	76 de                	jbe    c000219b <find_volume+0x59>
c00021bd:	83 c4 2c             	add    esp,0x2c
c00021c0:	5b                   	pop    ebx
c00021c1:	5e                   	pop    esi
c00021c2:	5f                   	pop    edi
c00021c3:	5d                   	pop    ebp
c00021c4:	c3                   	ret    

c00021c5 <mount_volume>:
c00021c5:	55                   	push   ebp
c00021c6:	89 d5                	mov    ebp,edx
c00021c8:	57                   	push   edi
c00021c9:	89 cf                	mov    edi,ecx
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00021d2:	83 ec 2c             	sub    esp,0x2c
c00021d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00021db:	e8 9b fd ff ff       	call   c0001f7b <get_ldnumber>
c00021e0:	85 c0                	test   eax,eax
c00021e2:	0f 88 d6 02 00 00    	js     c00024be <mount_volume+0x2f9>
c00021e8:	8b 34 85 40 f5 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0ac0]
c00021ef:	89 c2                	mov    edx,eax
c00021f1:	bb 0c 00 00 00       	mov    ebx,0xc
c00021f6:	85 f6                	test   esi,esi
c00021f8:	0f 84 c0 02 00 00    	je     c00024be <mount_volume+0x2f9>
c00021fe:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002201:	83 e7 fe             	and    edi,0xfffffffe
c0002204:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002207:	74 3a                	je     c0002243 <mount_volume+0x7e>
c0002209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000220d:	83 ec 0c             	sub    esp,0xc
c0002210:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002214:	50                   	push   eax
c0002215:	e8 e1 f8 ff ff       	call   c0001afb <disk_status>
c000221a:	83 c4 10             	add    esp,0x10
c000221d:	a8 01                	test   al,0x1
c000221f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002223:	75 1e                	jne    c0002243 <mount_volume+0x7e>
c0002225:	31 db                	xor    ebx,ebx
c0002227:	89 f9                	mov    ecx,edi
c0002229:	84 c9                	test   cl,cl
c000222b:	0f 84 8d 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002231:	a8 04                	test   al,0x4
c0002233:	0f 84 85 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002239:	bb 0a 00 00 00       	mov    ebx,0xa
c000223e:	e9 7b 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002243:	83 ec 0c             	sub    esp,0xc
c0002246:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002249:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000224c:	0f b6 c2             	movzx  eax,dl
c000224f:	bb 03 00 00 00       	mov    ebx,0x3
c0002254:	50                   	push   eax
c0002255:	e8 a4 f8 ff ff       	call   c0001afe <disk_initialize>
c000225a:	83 c4 10             	add    esp,0x10
c000225d:	a8 01                	test   al,0x1
c000225f:	0f 85 59 02 00 00    	jne    c00024be <mount_volume+0x2f9>
c0002265:	89 f9                	mov    ecx,edi
c0002267:	84 c9                	test   cl,cl
c0002269:	74 04                	je     c000226f <mount_volume+0xaa>
c000226b:	a8 04                	test   al,0x4
c000226d:	75 ca                	jne    c0002239 <mount_volume+0x74>
c000226f:	31 d2                	xor    edx,edx
c0002271:	89 f0                	mov    eax,esi
c0002273:	bb 01 00 00 00       	mov    ebx,0x1
c0002278:	e8 c5 fe ff ff       	call   c0002142 <find_volume>
c000227d:	83 f8 04             	cmp    eax,0x4
c0002280:	0f 84 38 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002286:	83 f8 01             	cmp    eax,0x1
c0002289:	76 0a                	jbe    c0002295 <mount_volume+0xd0>
c000228b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002290:	e9 29 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002295:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002298:	e8 af f8 ff ff       	call   c0001b4c <ld_word>
c000229d:	66 3d 00 02          	cmp    ax,0x200
c00022a1:	75 e8                	jne    c000228b <mount_volume+0xc6>
c00022a3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00022a6:	e8 a1 f8 ff ff       	call   c0001b4c <ld_word>
c00022ab:	0f b7 c0             	movzx  eax,ax
c00022ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 0c                	jne    c00022c2 <mount_volume+0xfd>
c00022b6:	8d 46 58             	lea    eax,[esi+0x58]
c00022b9:	e8 9b f8 ff ff       	call   c0001b59 <ld_dword>
c00022be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022c2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00022c5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00022c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00022cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00022d0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00022d3:	89 e8                	mov    eax,ebp
c00022d5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00022d8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00022db:	3c 01                	cmp    al,0x1
c00022dd:	77 ac                	ja     c000228b <mount_volume+0xc6>
c00022df:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00022e3:	89 c3                	mov    ebx,eax
c00022e5:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00022e9:	66 85 c0             	test   ax,ax
c00022ec:	74 9d                	je     c000228b <mount_volume+0xc6>
c00022ee:	8d 40 ff             	lea    eax,[eax-0x1]
c00022f1:	85 d8                	test   eax,ebx
c00022f3:	75 96                	jne    c000228b <mount_volume+0xc6>
c00022f5:	8d 46 45             	lea    eax,[esi+0x45]
c00022f8:	e8 4f f8 ff ff       	call   c0001b4c <ld_word>
c00022fd:	89 c7                	mov    edi,eax
c00022ff:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002303:	a8 0f                	test   al,0xf
c0002305:	75 84                	jne    c000228b <mount_volume+0xc6>
c0002307:	8d 46 47             	lea    eax,[esi+0x47]
c000230a:	e8 3d f8 ff ff       	call   c0001b4c <ld_word>
c000230f:	0f b7 d0             	movzx  edx,ax
c0002312:	85 d2                	test   edx,edx
c0002314:	75 0a                	jne    c0002320 <mount_volume+0x15b>
c0002316:	8d 46 54             	lea    eax,[esi+0x54]
c0002319:	e8 3b f8 ff ff       	call   c0001b59 <ld_dword>
c000231e:	89 c2                	mov    edx,eax
c0002320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002324:	8d 46 42             	lea    eax,[esi+0x42]
c0002327:	e8 20 f8 ff ff       	call   c0001b4c <ld_word>
c000232c:	66 85 c0             	test   ax,ax
c000232f:	0f 84 56 ff ff ff    	je     c000228b <mount_volume+0xc6>
c0002335:	89 e9                	mov    ecx,ebp
c0002337:	0f b7 c0             	movzx  eax,ax
c000233a:	0f b6 e9             	movzx  ebp,cl
c000233d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002345:	89 f8                	mov    eax,edi
c0002347:	0f af cd             	imul   ecx,ebp
c000234a:	66 c1 e8 04          	shr    ax,0x4
c000234e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002352:	0f b7 c0             	movzx  eax,ax
c0002355:	01 c8                	add    eax,ecx
c0002357:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000235b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000235f:	39 c2                	cmp    edx,eax
c0002361:	0f 82 24 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002367:	29 c2                	sub    edx,eax
c0002369:	89 d5                	mov    ebp,edx
c000236b:	89 d0                	mov    eax,edx
c000236d:	31 d2                	xor    edx,edx
c000236f:	f7 f3                	div    ebx
c0002371:	39 dd                	cmp    ebp,ebx
c0002373:	0f 82 12 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002379:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000237e:	0f 87 07 ff ff ff    	ja     c000228b <mount_volume+0xc6>
c0002384:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002389:	0f 86 1f 01 00 00    	jbe    c00024ae <mount_volume+0x2e9>
c000238f:	bb 03 00 00 00       	mov    ebx,0x3
c0002394:	8d 68 02             	lea    ebp,[eax+0x2]
c0002397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000239f:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00023a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00023a6:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00023a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00023ad:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00023b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00023b4:	83 fb 03             	cmp    ebx,0x3
c00023b7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00023ba:	75 21                	jne    c00023dd <mount_volume+0x218>
c00023bc:	8d 46 5e             	lea    eax,[esi+0x5e]
c00023bf:	e8 88 f7 ff ff       	call   c0001b4c <ld_word>
c00023c4:	66 09 c7             	or     di,ax
c00023c7:	0f 85 be fe ff ff    	jne    c000228b <mount_volume+0xc6>
c00023cd:	8d 46 60             	lea    eax,[esi+0x60]
c00023d0:	c1 e5 02             	shl    ebp,0x2
c00023d3:	e8 81 f7 ff ff       	call   c0001b59 <ld_dword>
c00023d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023db:	eb 22                	jmp    c00023ff <mount_volume+0x23a>
c00023dd:	66 85 ff             	test   di,di
c00023e0:	0f 84 a5 fe ff ff    	je     c000228b <mount_volume+0xc6>
c00023e6:	01 c8                	add    eax,ecx
c00023e8:	83 fb 02             	cmp    ebx,0x2
c00023eb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023ee:	75 04                	jne    c00023f4 <mount_volume+0x22f>
c00023f0:	01 ed                	add    ebp,ebp
c00023f2:	eb 0b                	jmp    c00023ff <mount_volume+0x23a>
c00023f4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00023f8:	83 e5 01             	and    ebp,0x1
c00023fb:	d1 e8                	shr    eax,1
c00023fd:	01 c5                	add    ebp,eax
c00023ff:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002405:	c1 ed 09             	shr    ebp,0x9
c0002408:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000240c:	0f 87 79 fe ff ff    	ja     c000228b <mount_volume+0xc6>
c0002412:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002419:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002420:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002424:	83 fb 03             	cmp    ebx,0x3
c0002427:	75 6e                	jne    c0002497 <mount_volume+0x2d2>
c0002429:	8d 46 64             	lea    eax,[esi+0x64]
c000242c:	e8 1b f7 ff ff       	call   c0001b4c <ld_word>
c0002431:	66 48                	dec    ax
c0002433:	75 62                	jne    c0002497 <mount_volume+0x2d2>
c0002435:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002439:	89 f0                	mov    eax,esi
c000243b:	42                   	inc    edx
c000243c:	e8 31 fc ff ff       	call   c0002072 <move_window>
c0002441:	85 c0                	test   eax,eax
c0002443:	75 52                	jne    c0002497 <mount_volume+0x2d2>
c0002445:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002449:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000244f:	e8 f8 f6 ff ff       	call   c0001b4c <ld_word>
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 3d                	jne    c0002497 <mount_volume+0x2d2>
c000245a:	8d 46 34             	lea    eax,[esi+0x34]
c000245d:	e8 f7 f6 ff ff       	call   c0001b59 <ld_dword>
c0002462:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002467:	75 2e                	jne    c0002497 <mount_volume+0x2d2>
c0002469:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000246f:	e8 e5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002474:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002479:	75 1c                	jne    c0002497 <mount_volume+0x2d2>
c000247b:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002481:	e8 d3 f6 ff ff       	call   c0001b59 <ld_dword>
c0002486:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002489:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000248f:	e8 c5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002494:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002497:	66 a1 20 f5 01 c0    	mov    ax,ds:0xc001f520
c000249d:	88 1e                	mov    BYTE PTR [esi],bl
c000249f:	40                   	inc    eax
c00024a0:	31 db                	xor    ebx,ebx
c00024a2:	66 a3 20 f5 01 c0    	mov    ds:0xc001f520,ax
c00024a8:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00024ac:	eb 10                	jmp    c00024be <mount_volume+0x2f9>
c00024ae:	31 db                	xor    ebx,ebx
c00024b0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00024b5:	0f 97 c3             	seta   bl
c00024b8:	43                   	inc    ebx
c00024b9:	e9 d6 fe ff ff       	jmp    c0002394 <mount_volume+0x1cf>
c00024be:	83 c4 2c             	add    esp,0x2c
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	5b                   	pop    ebx
c00024c4:	5e                   	pop    esi
c00024c5:	5f                   	pop    edi
c00024c6:	5d                   	pop    ebp
c00024c7:	c3                   	ret    

c00024c8 <put_fat>:
c00024c8:	55                   	push   ebp
c00024c9:	bd 02 00 00 00       	mov    ebp,0x2
c00024ce:	57                   	push   edi
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	83 ec 1c             	sub    esp,0x1c
c00024d4:	83 fa 01             	cmp    edx,0x1
c00024d7:	0f 86 31 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024dd:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00024e0:	0f 86 28 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024e6:	89 c6                	mov    esi,eax
c00024e8:	89 cf                	mov    edi,ecx
c00024ea:	8a 00                	mov    al,BYTE PTR [eax]
c00024ec:	89 d3                	mov    ebx,edx
c00024ee:	3c 02                	cmp    al,0x2
c00024f0:	0f 84 ac 00 00 00    	je     c00025a2 <put_fat+0xda>
c00024f6:	3c 03                	cmp    al,0x3
c00024f8:	0f 84 d1 00 00 00    	je     c00025cf <put_fat+0x107>
c00024fe:	fe c8                	dec    al
c0002500:	0f 85 08 01 00 00    	jne    c000260e <put_fat+0x146>
c0002506:	89 d1                	mov    ecx,edx
c0002508:	89 f0                	mov    eax,esi
c000250a:	d1 e9                	shr    ecx,1
c000250c:	01 d1                	add    ecx,edx
c000250e:	89 ca                	mov    edx,ecx
c0002510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002514:	c1 ea 09             	shr    edx,0x9
c0002517:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000251a:	e8 53 fb ff ff       	call   c0002072 <move_window>
c000251f:	89 c5                	mov    ebp,eax
c0002521:	85 c0                	test   eax,eax
c0002523:	0f 85 e5 00 00 00    	jne    c000260e <put_fat+0x146>
c0002529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000252d:	8d 46 34             	lea    eax,[esi+0x34]
c0002530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002534:	8d 41 01             	lea    eax,[ecx+0x1]
c0002537:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000253d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002541:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002545:	89 f8                	mov    eax,edi
c0002547:	83 e3 01             	and    ebx,0x1
c000254a:	74 0c                	je     c0002558 <put_fat+0x90>
c000254c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000254e:	89 f8                	mov    eax,edi
c0002550:	83 e2 0f             	and    edx,0xf
c0002553:	c1 e0 04             	shl    eax,0x4
c0002556:	09 d0                	or     eax,edx
c0002558:	88 01                	mov    BYTE PTR [ecx],al
c000255a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000255e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002562:	c1 ea 09             	shr    edx,0x9
c0002565:	89 f0                	mov    eax,esi
c0002567:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000256a:	e8 03 fb ff ff       	call   c0002072 <move_window>
c000256f:	89 c5                	mov    ebp,eax
c0002571:	85 c0                	test   eax,eax
c0002573:	0f 85 95 00 00 00    	jne    c000260e <put_fat+0x146>
c0002579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000257d:	25 ff 01 00 00       	and    eax,0x1ff
c0002582:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002586:	85 db                	test   ebx,ebx
c0002588:	74 07                	je     c0002591 <put_fat+0xc9>
c000258a:	c1 ef 04             	shr    edi,0x4
c000258d:	89 f9                	mov    ecx,edi
c000258f:	eb 0d                	jmp    c000259e <put_fat+0xd6>
c0002591:	8a 08                	mov    cl,BYTE PTR [eax]
c0002593:	c1 ef 08             	shr    edi,0x8
c0002596:	83 e1 f0             	and    ecx,0xfffffff0
c0002599:	83 e7 0f             	and    edi,0xf
c000259c:	09 f9                	or     ecx,edi
c000259e:	88 08                	mov    BYTE PTR [eax],cl
c00025a0:	eb 27                	jmp    c00025c9 <put_fat+0x101>
c00025a2:	c1 ea 08             	shr    edx,0x8
c00025a5:	89 f0                	mov    eax,esi
c00025a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025aa:	e8 c3 fa ff ff       	call   c0002072 <move_window>
c00025af:	89 c5                	mov    ebp,eax
c00025b1:	85 c0                	test   eax,eax
c00025b3:	75 59                	jne    c000260e <put_fat+0x146>
c00025b5:	01 db                	add    ebx,ebx
c00025b7:	0f b7 d7             	movzx  edx,di
c00025ba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00025c0:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00025c4:	e8 a8 f5 ff ff       	call   c0001b71 <st_word>
c00025c9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00025cd:	eb 3f                	jmp    c000260e <put_fat+0x146>
c00025cf:	c1 ea 07             	shr    edx,0x7
c00025d2:	89 f0                	mov    eax,esi
c00025d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025d7:	e8 96 fa ff ff       	call   c0002072 <move_window>
c00025dc:	89 c5                	mov    ebp,eax
c00025de:	85 c0                	test   eax,eax
c00025e0:	75 2c                	jne    c000260e <put_fat+0x146>
c00025e2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00025e8:	c1 e3 02             	shl    ebx,0x2
c00025eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00025f1:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00025f5:	89 d8                	mov    eax,ebx
c00025f7:	e8 5d f5 ff ff       	call   c0001b59 <ld_dword>
c00025fc:	25 00 00 00 f0       	and    eax,0xf0000000
c0002601:	09 f8                	or     eax,edi
c0002603:	89 c2                	mov    edx,eax
c0002605:	89 d8                	mov    eax,ebx
c0002607:	e8 69 f5 ff ff       	call   c0001b75 <st_dword>
c000260c:	eb bb                	jmp    c00025c9 <put_fat+0x101>
c000260e:	83 c4 1c             	add    esp,0x1c
c0002611:	89 e8                	mov    eax,ebp
c0002613:	5b                   	pop    ebx
c0002614:	5e                   	pop    esi
c0002615:	5f                   	pop    edi
c0002616:	5d                   	pop    ebp
c0002617:	c3                   	ret    

c0002618 <dir_clear>:
c0002618:	55                   	push   ebp
c0002619:	57                   	push   edi
c000261a:	56                   	push   esi
c000261b:	89 c6                	mov    esi,eax
c000261d:	53                   	push   ebx
c000261e:	83 ec 1c             	sub    esp,0x1c
c0002621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002625:	e8 e5 f9 ff ff       	call   c000200f <sync_window>
c000262a:	85 c0                	test   eax,eax
c000262c:	0f 85 c0 00 00 00    	jne    c00026f2 <dir_clear+0xda>
c0002632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002636:	89 f0                	mov    eax,esi
c0002638:	e8 55 f7 ff ff       	call   c0001d92 <clst2sect>
c000263d:	31 d2                	xor    edx,edx
c000263f:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002642:	89 c5                	mov    ebp,eax
c0002644:	b9 00 02 00 00       	mov    ecx,0x200
c0002649:	8d 46 34             	lea    eax,[esi+0x34]
c000264c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002650:	e8 38 f5 ff ff       	call   c0001b8d <mem_set>
c0002655:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002659:	c1 e3 09             	shl    ebx,0x9
c000265c:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002662:	76 1b                	jbe    c000267f <dir_clear+0x67>
c0002664:	bb 00 80 00 00       	mov    ebx,0x8000
c0002669:	eb 14                	jmp    c000267f <dir_clear+0x67>
c000266b:	83 ec 0c             	sub    esp,0xc
c000266e:	53                   	push   ebx
c000266f:	e8 24 32 00 00       	call   c0005898 <ff_memalloc>
c0002674:	83 c4 10             	add    esp,0x10
c0002677:	89 c7                	mov    edi,eax
c0002679:	85 c0                	test   eax,eax
c000267b:	75 7c                	jne    c00026f9 <dir_clear+0xe1>
c000267d:	d1 eb                	shr    ebx,1
c000267f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002685:	77 e4                	ja     c000266b <dir_clear+0x53>
c0002687:	31 db                	xor    ebx,ebx
c0002689:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000268d:	39 d8                	cmp    eax,ebx
c000268f:	76 53                	jbe    c00026e4 <dir_clear+0xcc>
c0002691:	6a 01                	push   0x1
c0002693:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002696:	50                   	push   eax
c0002697:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000269b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000269f:	50                   	push   eax
c00026a0:	e8 72 f4 ff ff       	call   c0001b17 <disk_write>
c00026a5:	83 c4 10             	add    esp,0x10
c00026a8:	85 c0                	test   eax,eax
c00026aa:	75 38                	jne    c00026e4 <dir_clear+0xcc>
c00026ac:	43                   	inc    ebx
c00026ad:	eb da                	jmp    c0002689 <dir_clear+0x71>
c00026af:	52                   	push   edx
c00026b0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00026b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00026b7:	50                   	push   eax
c00026b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026bc:	57                   	push   edi
c00026bd:	50                   	push   eax
c00026be:	e8 54 f4 ff ff       	call   c0001b17 <disk_write>
c00026c3:	83 c4 10             	add    esp,0x10
c00026c6:	85 c0                	test   eax,eax
c00026c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cc:	75 0a                	jne    c00026d8 <dir_clear+0xc0>
c00026ce:	01 d3                	add    ebx,edx
c00026d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026d4:	39 d8                	cmp    eax,ebx
c00026d6:	77 d7                	ja     c00026af <dir_clear+0x97>
c00026d8:	83 ec 0c             	sub    esp,0xc
c00026db:	57                   	push   edi
c00026dc:	e8 cf 31 00 00       	call   c00058b0 <ff_memfree>
c00026e1:	83 c4 10             	add    esp,0x10
c00026e4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026e8:	39 d8                	cmp    eax,ebx
c00026ea:	0f 95 c0             	setne  al
c00026ed:	0f b6 c0             	movzx  eax,al
c00026f0:	eb 19                	jmp    c000270b <dir_clear+0xf3>
c00026f2:	b8 01 00 00 00       	mov    eax,0x1
c00026f7:	eb 12                	jmp    c000270b <dir_clear+0xf3>
c00026f9:	89 d9                	mov    ecx,ebx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	e8 8b f4 ff ff       	call   c0001b8d <mem_set>
c0002702:	89 da                	mov    edx,ebx
c0002704:	31 db                	xor    ebx,ebx
c0002706:	c1 ea 09             	shr    edx,0x9
c0002709:	eb c5                	jmp    c00026d0 <dir_clear+0xb8>
c000270b:	83 c4 1c             	add    esp,0x1c
c000270e:	5b                   	pop    ebx
c000270f:	5e                   	pop    esi
c0002710:	5f                   	pop    edi
c0002711:	5d                   	pop    ebp
c0002712:	c3                   	ret    

c0002713 <create_name>:
c0002713:	55                   	push   ebp
c0002714:	89 d5                	mov    ebp,edx
c0002716:	57                   	push   edi
c0002717:	89 c7                	mov    edi,eax
c0002719:	56                   	push   esi
c000271a:	31 f6                	xor    esi,esi
c000271c:	53                   	push   ebx
c000271d:	83 ec 3c             	sub    esp,0x3c
c0002720:	8b 02                	mov    eax,DWORD PTR [edx]
c0002722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002726:	8b 07                	mov    eax,DWORD PTR [edi]
c0002728:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000272b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000272f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002733:	e8 9b f4 ff ff       	call   c0001bd3 <tchar2uni>
c0002738:	89 c3                	mov    ebx,eax
c000273a:	83 f8 ff             	cmp    eax,0xffffffff
c000273d:	75 0a                	jne    c0002749 <create_name+0x36>
c000273f:	b8 06 00 00 00       	mov    eax,0x6
c0002744:	e9 9e 02 00 00       	jmp    c00029e7 <create_name+0x2d4>
c0002749:	3d ff ff 00 00       	cmp    eax,0xffff
c000274e:	76 0c                	jbe    c000275c <create_name+0x49>
c0002750:	c1 e8 10             	shr    eax,0x10
c0002753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002757:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000275b:	46                   	inc    esi
c000275c:	66 83 fb 1f          	cmp    bx,0x1f
c0002760:	76 4f                	jbe    c00027b1 <create_name+0x9e>
c0002762:	66 83 fb 5c          	cmp    bx,0x5c
c0002766:	74 35                	je     c000279d <create_name+0x8a>
c0002768:	66 83 fb 2f          	cmp    bx,0x2f
c000276c:	74 2f                	je     c000279d <create_name+0x8a>
c000276e:	66 83 fb 7f          	cmp    bx,0x7f
c0002772:	77 11                	ja     c0002785 <create_name+0x72>
c0002774:	0f b7 d3             	movzx  edx,bx
c0002777:	b8 a2 c5 01 c0       	mov    eax,0xc001c5a2
c000277c:	e8 3a f4 ff ff       	call   c0001bbb <chk_chr>
c0002781:	85 c0                	test   eax,eax
c0002783:	75 ba                	jne    c000273f <create_name+0x2c>
c0002785:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000278b:	77 b2                	ja     c000273f <create_name+0x2c>
c000278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002791:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002795:	46                   	inc    esi
c0002796:	eb 97                	jmp    c000272f <create_name+0x1c>
c0002798:	40                   	inc    eax
c0002799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000279d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027a1:	8a 10                	mov    dl,BYTE PTR [eax]
c00027a3:	80 fa 2f             	cmp    dl,0x2f
c00027a6:	74 f0                	je     c0002798 <create_name+0x85>
c00027a8:	80 fa 5c             	cmp    dl,0x5c
c00027ab:	74 eb                	je     c0002798 <create_name+0x85>
c00027ad:	31 db                	xor    ebx,ebx
c00027af:	eb 02                	jmp    c00027b3 <create_name+0xa0>
c00027b1:	b3 04                	mov    bl,0x4
c00027b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00027ba:	85 f6                	test   esi,esi
c00027bc:	74 18                	je     c00027d6 <create_name+0xc3>
c00027be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027c2:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00027c7:	66 83 f8 20          	cmp    ax,0x20
c00027cb:	74 06                	je     c00027d3 <create_name+0xc0>
c00027cd:	66 83 f8 2e          	cmp    ax,0x2e
c00027d1:	75 03                	jne    c00027d6 <create_name+0xc3>
c00027d3:	4e                   	dec    esi
c00027d4:	eb e4                	jmp    c00027ba <create_name+0xa7>
c00027d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027da:	31 ed                	xor    ebp,ebp
c00027dc:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00027e2:	85 f6                	test   esi,esi
c00027e4:	0f 84 55 ff ff ff    	je     c000273f <create_name+0x2c>
c00027ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ee:	8d 55 01             	lea    edx,[ebp+0x1]
c00027f1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00027f5:	66 83 f8 20          	cmp    ax,0x20
c00027f9:	75 04                	jne    c00027ff <create_name+0xec>
c00027fb:	89 d5                	mov    ebp,edx
c00027fd:	eb eb                	jmp    c00027ea <create_name+0xd7>
c00027ff:	85 ed                	test   ebp,ebp
c0002801:	75 06                	jne    c0002809 <create_name+0xf6>
c0002803:	66 83 f8 2e          	cmp    ax,0x2e
c0002807:	75 08                	jne    c0002811 <create_name+0xfe>
c0002809:	83 cb 03             	or     ebx,0x3
c000280c:	eb 03                	jmp    c0002811 <create_name+0xfe>
c000280e:	4e                   	dec    esi
c000280f:	74 0c                	je     c000281d <create_name+0x10a>
c0002811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002815:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000281b:	75 f1                	jne    c000280e <create_name+0xfb>
c000281d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002822:	8d 47 20             	lea    eax,[edi+0x20]
c0002825:	ba 20 00 00 00       	mov    edx,0x20
c000282a:	e8 5e f3 ff ff       	call   c0001b8d <mem_set>
c000282f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002837:	31 c9                	xor    ecx,ecx
c0002839:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000283e:	8d 45 01             	lea    eax,[ebp+0x1]
c0002841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002849:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000284d:	66 85 ed             	test   bp,bp
c0002850:	0f 84 30 01 00 00    	je     c0002986 <create_name+0x273>
c0002856:	66 83 fd 20          	cmp    bp,0x20
c000285a:	74 10                	je     c000286c <create_name+0x159>
c000285c:	66 83 fd 2e          	cmp    bp,0x2e
c0002860:	75 13                	jne    c0002875 <create_name+0x162>
c0002862:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002866:	0f 84 6b 01 00 00    	je     c00029d7 <create_name+0x2c4>
c000286c:	83 cb 03             	or     ebx,0x3
c000286f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002873:	eb c9                	jmp    c000283e <create_name+0x12b>
c0002875:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002879:	73 0b                	jae    c0002886 <create_name+0x173>
c000287b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000287f:	75 47                	jne    c00028c8 <create_name+0x1b5>
c0002881:	e9 51 01 00 00       	jmp    c00029d7 <create_name+0x2c4>
c0002886:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000288b:	75 10                	jne    c000289d <create_name+0x18a>
c000288d:	83 cb 03             	or     ebx,0x3
c0002890:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002898:	e9 e9 00 00 00       	jmp    c0002986 <create_name+0x273>
c000289d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028a1:	74 0d                	je     c00028b0 <create_name+0x19d>
c00028a3:	83 cb 03             	or     ebx,0x3
c00028a6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028aa:	0f 87 d6 00 00 00    	ja     c0002986 <create_name+0x273>
c00028b0:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00028b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00028b9:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00028c1:	b9 08 00 00 00       	mov    ecx,0x8
c00028c6:	eb a7                	jmp    c000286f <create_name+0x15c>
c00028c8:	66 83 fd 7f          	cmp    bp,0x7f
c00028cc:	76 68                	jbe    c0002936 <create_name+0x223>
c00028ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00028d2:	88 da                	mov    dl,bl
c00028d4:	83 ca 02             	or     edx,0x2
c00028d7:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00028db:	50                   	push   eax
c00028dc:	50                   	push   eax
c00028dd:	68 b5 01 00 00       	push   0x1b5
c00028e2:	55                   	push   ebp
c00028e3:	e8 e0 2f 00 00       	call   c00058c8 <ff_uni2oem>
c00028e8:	83 c4 10             	add    esp,0x10
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	a8 80                	test   al,0x80
c00028ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00028f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00028f7:	74 0c                	je     c0002905 <create_name+0x1f2>
c00028f9:	83 e5 7f             	and    ebp,0x7f
c00028fc:	0f b6 ad 60 c6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe39a0]
c0002903:	eb 2a                	jmp    c000292f <create_name+0x21c>
c0002905:	66 3d ff 00          	cmp    ax,0xff
c0002909:	76 24                	jbe    c000292f <create_name+0x21c>
c000290b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290f:	48                   	dec    eax
c0002910:	39 c8                	cmp    eax,ecx
c0002912:	77 0c                	ja     c0002920 <create_name+0x20d>
c0002914:	83 cb 03             	or     ebx,0x3
c0002917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000291b:	e9 4f ff ff ff       	jmp    c000286f <create_name+0x15c>
c0002920:	89 e8                	mov    eax,ebp
c0002922:	88 d3                	mov    bl,dl
c0002924:	66 c1 e8 08          	shr    ax,0x8
c0002928:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000292c:	41                   	inc    ecx
c000292d:	eb 4b                	jmp    c000297a <create_name+0x267>
c000292f:	88 d3                	mov    bl,dl
c0002931:	66 85 ed             	test   bp,bp
c0002934:	74 19                	je     c000294f <create_name+0x23c>
c0002936:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000293a:	0f b7 d5             	movzx  edx,bp
c000293d:	b8 ab c5 01 c0       	mov    eax,0xc001c5ab
c0002942:	e8 74 f2 ff ff       	call   c0001bbb <chk_chr>
c0002947:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000294b:	85 c0                	test   eax,eax
c000294d:	74 0a                	je     c0002959 <create_name+0x246>
c000294f:	83 cb 03             	or     ebx,0x3
c0002952:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002957:	eb 21                	jmp    c000297a <create_name+0x267>
c0002959:	8d 45 bf             	lea    eax,[ebp-0x41]
c000295c:	66 83 f8 19          	cmp    ax,0x19
c0002960:	77 07                	ja     c0002969 <create_name+0x256>
c0002962:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002967:	eb 11                	jmp    c000297a <create_name+0x267>
c0002969:	8d 45 9f             	lea    eax,[ebp-0x61]
c000296c:	66 83 f8 19          	cmp    ax,0x19
c0002970:	77 08                	ja     c000297a <create_name+0x267>
c0002972:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002977:	83 ed 20             	sub    ebp,0x20
c000297a:	89 e8                	mov    eax,ebp
c000297c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002980:	41                   	inc    ecx
c0002981:	e9 e9 fe ff ff       	jmp    c000286f <create_name+0x15c>
c0002986:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c000298a:	75 04                	jne    c0002990 <create_name+0x27d>
c000298c:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002990:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002995:	75 05                	jne    c000299c <create_name+0x289>
c0002997:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c000299c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029a0:	83 e0 0c             	and    eax,0xc
c00029a3:	3c 0c                	cmp    al,0xc
c00029a5:	74 0b                	je     c00029b2 <create_name+0x29f>
c00029a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029ab:	83 e0 03             	and    eax,0x3
c00029ae:	3c 03                	cmp    al,0x3
c00029b0:	75 05                	jne    c00029b7 <create_name+0x2a4>
c00029b2:	83 cb 02             	or     ebx,0x2
c00029b5:	eb 19                	jmp    c00029d0 <create_name+0x2bd>
c00029b7:	f6 c3 02             	test   bl,0x2
c00029ba:	75 14                	jne    c00029d0 <create_name+0x2bd>
c00029bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00029c1:	74 03                	je     c00029c6 <create_name+0x2b3>
c00029c3:	83 cb 10             	or     ebx,0x10
c00029c6:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00029cb:	74 03                	je     c00029d0 <create_name+0x2bd>
c00029cd:	83 cb 08             	or     ebx,0x8
c00029d0:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00029d3:	31 c0                	xor    eax,eax
c00029d5:	eb 10                	jmp    c00029e7 <create_name+0x2d4>
c00029d7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00029dc:	0f 85 ce fe ff ff    	jne    c00028b0 <create_name+0x19d>
c00029e2:	e9 a6 fe ff ff       	jmp    c000288d <create_name+0x17a>
c00029e7:	83 c4 3c             	add    esp,0x3c
c00029ea:	5b                   	pop    ebx
c00029eb:	5e                   	pop    esi
c00029ec:	5f                   	pop    edi
c00029ed:	5d                   	pop    ebp
c00029ee:	c3                   	ret    

c00029ef <cmp_lfn>:
c00029ef:	55                   	push   ebp
c00029f0:	57                   	push   edi
c00029f1:	89 d7                	mov    edi,edx
c00029f3:	56                   	push   esi
c00029f4:	53                   	push   ebx
c00029f5:	83 ec 1c             	sub    esp,0x1c
c00029f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029fc:	8d 42 1a             	lea    eax,[edx+0x1a]
c00029ff:	e8 48 f1 ff ff       	call   c0001b4c <ld_word>
c0002a04:	66 85 c0             	test   ax,ax
c0002a07:	74 07                	je     c0002a10 <cmp_lfn+0x21>
c0002a09:	31 c0                	xor    eax,eax
c0002a0b:	e9 9a 00 00 00       	jmp    c0002aaa <cmp_lfn+0xbb>
c0002a10:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002a12:	bd 01 00 00 00       	mov    ebp,0x1
c0002a17:	83 e3 3f             	and    ebx,0x3f
c0002a1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002a22:	4b                   	dec    ebx
c0002a23:	6b db 0d             	imul   ebx,ebx,0xd
c0002a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a2a:	0f b6 80 e0 c6 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3920]
c0002a31:	01 f8                	add    eax,edi
c0002a33:	e8 14 f1 ff ff       	call   c0001b4c <ld_word>
c0002a38:	66 85 ed             	test   bp,bp
c0002a3b:	89 c6                	mov    esi,eax
c0002a3d:	74 3c                	je     c0002a7b <cmp_lfn+0x8c>
c0002a3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002a45:	77 c2                	ja     c0002a09 <cmp_lfn+0x1a>
c0002a47:	83 ec 0c             	sub    esp,0xc
c0002a4a:	0f b7 c0             	movzx  eax,ax
c0002a4d:	50                   	push   eax
c0002a4e:	e8 8d 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a53:	89 c5                	mov    ebp,eax
c0002a55:	8d 43 01             	lea    eax,[ebx+0x1]
c0002a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002a60:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0002a67:	e8 74 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a6c:	83 c4 10             	add    esp,0x10
c0002a6f:	39 c5                	cmp    ebp,eax
c0002a71:	75 96                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a73:	89 f5                	mov    ebp,esi
c0002a75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002a79:	eb 04                	jmp    c0002a7f <cmp_lfn+0x90>
c0002a7b:	66 46                	inc    si
c0002a7d:	75 8a                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002a83:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002a88:	75 9c                	jne    c0002a26 <cmp_lfn+0x37>
c0002a8a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002a8d:	74 16                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a8f:	66 85 ed             	test   bp,bp
c0002a92:	74 11                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a98:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002a9d:	0f 94 c0             	sete   al
c0002aa0:	0f b6 c0             	movzx  eax,al
c0002aa3:	eb 05                	jmp    c0002aaa <cmp_lfn+0xbb>
c0002aa5:	b8 01 00 00 00       	mov    eax,0x1
c0002aaa:	83 c4 1c             	add    esp,0x1c
c0002aad:	5b                   	pop    ebx
c0002aae:	5e                   	pop    esi
c0002aaf:	5f                   	pop    edi
c0002ab0:	5d                   	pop    ebp
c0002ab1:	c3                   	ret    

c0002ab2 <sync_fs>:
c0002ab2:	56                   	push   esi
c0002ab3:	53                   	push   ebx
c0002ab4:	53                   	push   ebx
c0002ab5:	89 c3                	mov    ebx,eax
c0002ab7:	e8 53 f5 ff ff       	call   c000200f <sync_window>
c0002abc:	85 c0                	test   eax,eax
c0002abe:	0f 85 9a 00 00 00    	jne    c0002b5e <sync_fs+0xac>
c0002ac4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ac7:	75 7b                	jne    c0002b44 <sync_fs+0x92>
c0002ac9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002acd:	75 75                	jne    c0002b44 <sync_fs+0x92>
c0002acf:	b9 00 02 00 00       	mov    ecx,0x200
c0002ad4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ad7:	31 d2                	xor    edx,edx
c0002ad9:	89 f0                	mov    eax,esi
c0002adb:	e8 ad f0 ff ff       	call   c0001b8d <mem_set>
c0002ae0:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ae6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002aeb:	e8 81 f0 ff ff       	call   c0001b71 <st_word>
c0002af0:	ba 52 52 61 41       	mov    edx,0x41615252
c0002af5:	89 f0                	mov    eax,esi
c0002af7:	e8 79 f0 ff ff       	call   c0001b75 <st_dword>
c0002afc:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002b02:	ba 72 72 41 61       	mov    edx,0x61417272
c0002b07:	e8 69 f0 ff ff       	call   c0001b75 <st_dword>
c0002b0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002b0f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002b15:	e8 5b f0 ff ff       	call   c0001b75 <st_dword>
c0002b1a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002b1d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002b23:	e8 4d f0 ff ff       	call   c0001b75 <st_dword>
c0002b28:	6a 01                	push   0x1
c0002b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002b2d:	40                   	inc    eax
c0002b2e:	50                   	push   eax
c0002b2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b32:	56                   	push   esi
c0002b33:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b37:	50                   	push   eax
c0002b38:	e8 da ef ff ff       	call   c0001b17 <disk_write>
c0002b3d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002b41:	83 c4 10             	add    esp,0x10
c0002b44:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b48:	51                   	push   ecx
c0002b49:	6a 00                	push   0x0
c0002b4b:	6a 00                	push   0x0
c0002b4d:	50                   	push   eax
c0002b4e:	e8 da ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b53:	83 c4 10             	add    esp,0x10
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 95 c0             	setne  al
c0002b5b:	0f b6 c0             	movzx  eax,al
c0002b5e:	5a                   	pop    edx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	c3                   	ret    

c0002b62 <create_partition>:
c0002b62:	55                   	push   ebp
c0002b63:	0f b6 c0             	movzx  eax,al
c0002b66:	57                   	push   edi
c0002b67:	56                   	push   esi
c0002b68:	53                   	push   ebx
c0002b69:	83 ec 40             	sub    esp,0x40
c0002b6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002b74:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b78:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002b7c:	50                   	push   eax
c0002b7d:	6a 01                	push   0x1
c0002b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002b83:	e8 a5 ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b88:	83 c4 10             	add    esp,0x10
c0002b8b:	85 c0                	test   eax,eax
c0002b8d:	0f 85 69 01 00 00    	jne    c0002cfc <create_partition+0x19a>
c0002b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b97:	b9 05 00 00 00       	mov    ecx,0x5
c0002b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ba0:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bb0:	f7 f3                	div    ebx
c0002bb2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002bb7:	76 0c                	jbe    c0002bc5 <create_partition+0x63>
c0002bb9:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002bbd:	49                   	dec    ecx
c0002bbe:	75 e5                	jne    c0002ba5 <create_partition+0x43>
c0002bc0:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002bc5:	b9 00 02 00 00       	mov    ecx,0x200
c0002bca:	31 d2                	xor    edx,edx
c0002bcc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bd0:	e8 b8 ef ff ff       	call   c0001b8d <mem_set>
c0002bd5:	b9 64 00 00 00       	mov    ecx,0x64
c0002bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bde:	31 d2                	xor    edx,edx
c0002be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002be8:	f7 f1                	div    ecx
c0002bea:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002bf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bf7:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002bfd:	85 c9                	test   ecx,ecx
c0002bff:	75 34                	jne    c0002c35 <create_partition+0xd3>
c0002c01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002c05:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002c0a:	05 fe 01 00 00       	add    eax,0x1fe
c0002c0f:	e8 5d ef ff ff       	call   c0001b71 <st_word>
c0002c14:	6a 01                	push   0x1
c0002c16:	6a 00                	push   0x0
c0002c18:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002c20:	e8 f2 ee ff ff       	call   c0001b17 <disk_write>
c0002c25:	83 c4 10             	add    esp,0x10
c0002c28:	85 c0                	test   eax,eax
c0002c2a:	0f 95 c0             	setne  al
c0002c2d:	0f b6 c0             	movzx  eax,al
c0002c30:	e9 cc 00 00 00       	jmp    c0002d01 <create_partition+0x19f>
c0002c35:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002c39:	76 c6                	jbe    c0002c01 <create_partition+0x9f>
c0002c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002c3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002c43:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002c46:	83 fe 64             	cmp    esi,0x64
c0002c49:	77 0d                	ja     c0002c58 <create_partition+0xf6>
c0002c4b:	74 07                	je     c0002c54 <create_partition+0xf2>
c0002c4d:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002c52:	eb 04                	jmp    c0002c58 <create_partition+0xf6>
c0002c54:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c58:	31 c0                	xor    eax,eax
c0002c5a:	89 f2                	mov    edx,esi
c0002c5c:	01 ca                	add    edx,ecx
c0002c5e:	0f 92 c0             	setb   al
c0002c61:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002c65:	77 04                	ja     c0002c6b <create_partition+0x109>
c0002c67:	85 c0                	test   eax,eax
c0002c69:	74 08                	je     c0002c73 <create_partition+0x111>
c0002c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c6f:	29 ce                	sub    esi,ecx
c0002c71:	eb 04                	jmp    c0002c77 <create_partition+0x115>
c0002c73:	85 f6                	test   esi,esi
c0002c75:	74 8a                	je     c0002c01 <create_partition+0x9f>
c0002c77:	89 ca                	mov    edx,ecx
c0002c79:	89 d8                	mov    eax,ebx
c0002c7b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002c80:	e8 f0 ee ff ff       	call   c0001b75 <st_dword>
c0002c85:	8d 43 04             	lea    eax,[ebx+0x4]
c0002c88:	89 f2                	mov    edx,esi
c0002c8a:	83 c3 10             	add    ebx,0x10
c0002c8d:	e8 e3 ee ff ff       	call   c0001b75 <st_dword>
c0002c92:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002c97:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002c9b:	31 d2                	xor    edx,edx
c0002c9d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002ca4:	89 c8                	mov    eax,ecx
c0002ca6:	01 f1                	add    ecx,esi
c0002ca8:	f7 f5                	div    ebp
c0002caa:	89 d5                	mov    ebp,edx
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	45                   	inc    ebp
c0002caf:	f7 f7                	div    edi
c0002cb1:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002cb4:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002cb7:	89 c2                	mov    edx,eax
c0002cb9:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002cbc:	c1 ea 02             	shr    edx,0x2
c0002cbf:	83 e2 c0             	and    edx,0xffffffc0
c0002cc2:	09 ea                	or     edx,ebp
c0002cc4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002cc9:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ccc:	31 d2                	xor    edx,edx
c0002cce:	f7 f5                	div    ebp
c0002cd0:	89 d6                	mov    esi,edx
c0002cd2:	31 d2                	xor    edx,edx
c0002cd4:	46                   	inc    esi
c0002cd5:	f7 f7                	div    edi
c0002cd7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002cda:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002cdd:	89 c7                	mov    edi,eax
c0002cdf:	c1 ef 02             	shr    edi,0x2
c0002ce2:	83 e7 c0             	and    edi,0xffffffc0
c0002ce5:	09 fe                	or     esi,edi
c0002ce7:	89 f2                	mov    edx,esi
c0002ce9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002cec:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002cf1:	0f 85 06 ff ff ff    	jne    c0002bfd <create_partition+0x9b>
c0002cf7:	e9 05 ff ff ff       	jmp    c0002c01 <create_partition+0x9f>
c0002cfc:	b8 01 00 00 00       	mov    eax,0x1
c0002d01:	83 c4 3c             	add    esp,0x3c
c0002d04:	5b                   	pop    ebx
c0002d05:	5e                   	pop    esi
c0002d06:	5f                   	pop    edi
c0002d07:	5d                   	pop    ebp
c0002d08:	c3                   	ret    

c0002d09 <get_fileinfo>:
c0002d09:	55                   	push   ebp
c0002d0a:	57                   	push   edi
c0002d0b:	56                   	push   esi
c0002d0c:	53                   	push   ebx
c0002d0d:	83 ec 1c             	sub    esp,0x1c
c0002d10:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d12:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002d16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002d1a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002d1e:	0f 84 c1 01 00 00    	je     c0002ee5 <get_fileinfo+0x1dc>
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	89 c6                	mov    esi,eax
c0002d28:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002d2c:	74 6a                	je     c0002d98 <get_fileinfo+0x8f>
c0002d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002d36:	31 ed                	xor    ebp,ebp
c0002d38:	31 ff                	xor    edi,edi
c0002d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d45:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002d49:	66 85 d2             	test   dx,dx
c0002d4c:	74 3e                	je     c0002d8c <get_fileinfo+0x83>
c0002d4e:	66 85 ed             	test   bp,bp
c0002d51:	75 0c                	jne    c0002d5f <get_fileinfo+0x56>
c0002d53:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002d59:	66 3d ff 07          	cmp    ax,0x7ff
c0002d5d:	76 22                	jbe    c0002d81 <get_fileinfo+0x78>
c0002d5f:	b9 ff 00 00 00       	mov    ecx,0xff
c0002d64:	89 e8                	mov    eax,ebp
c0002d66:	29 f9                	sub    ecx,edi
c0002d68:	c1 e0 10             	shl    eax,0x10
c0002d6b:	09 d0                	or     eax,edx
c0002d6d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002d71:	e8 23 ef ff ff       	call   c0001c99 <put_utf>
c0002d76:	84 c0                	test   al,al
c0002d78:	74 10                	je     c0002d8a <get_fileinfo+0x81>
c0002d7a:	0f b6 c0             	movzx  eax,al
c0002d7d:	31 d2                	xor    edx,edx
c0002d7f:	01 c7                	add    edi,eax
c0002d81:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002d86:	89 d5                	mov    ebp,edx
c0002d88:	eb b0                	jmp    c0002d3a <get_fileinfo+0x31>
c0002d8a:	31 ff                	xor    edi,edi
c0002d8c:	66 85 ed             	test   bp,bp
c0002d8f:	74 02                	je     c0002d93 <get_fileinfo+0x8a>
c0002d91:	31 ff                	xor    edi,edi
c0002d93:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002d98:	31 ff                	xor    edi,edi
c0002d9a:	31 c9                	xor    ecx,ecx
c0002d9c:	83 f9 0a             	cmp    ecx,0xa
c0002d9f:	0f 87 ad 00 00 00    	ja     c0002e52 <get_fileinfo+0x149>
c0002da5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002da8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002dab:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002daf:	66 83 fa 20          	cmp    dx,0x20
c0002db3:	0f 84 92 00 00 00    	je     c0002e4b <get_fileinfo+0x142>
c0002db9:	66 83 fa 05          	cmp    dx,0x5
c0002dbd:	75 05                	jne    c0002dc4 <get_fileinfo+0xbb>
c0002dbf:	ba e5 00 00 00       	mov    edx,0xe5
c0002dc4:	83 ff 0b             	cmp    edi,0xb
c0002dc7:	77 0b                	ja     c0002dd4 <get_fileinfo+0xcb>
c0002dc9:	83 fd 09             	cmp    ebp,0x9
c0002dcc:	75 06                	jne    c0002dd4 <get_fileinfo+0xcb>
c0002dce:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002dd3:	47                   	inc    edi
c0002dd4:	0f b7 c2             	movzx  eax,dx
c0002dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ddb:	e8 ed ed ff ff       	call   c0001bcd <dbc_1st>
c0002de0:	85 c0                	test   eax,eax
c0002de2:	74 2f                	je     c0002e13 <get_fileinfo+0x10a>
c0002de4:	83 fd 08             	cmp    ebp,0x8
c0002de7:	74 2a                	je     c0002e13 <get_fileinfo+0x10a>
c0002de9:	83 fd 0b             	cmp    ebp,0xb
c0002dec:	74 25                	je     c0002e13 <get_fileinfo+0x10a>
c0002dee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002df1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002df5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002df9:	e8 d2 ed ff ff       	call   c0001bd0 <dbc_2nd>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	74 11                	je     c0002e13 <get_fileinfo+0x10a>
c0002e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002e0b:	c1 e2 08             	shl    edx,0x8
c0002e0e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002e11:	09 c2                	or     edx,eax
c0002e13:	0f b7 d2             	movzx  edx,dx
c0002e16:	50                   	push   eax
c0002e17:	50                   	push   eax
c0002e18:	68 b5 01 00 00       	push   0x1b5
c0002e1d:	52                   	push   edx
c0002e1e:	e8 45 2b 00 00       	call   c0005968 <ff_oem2uni>
c0002e23:	83 c4 10             	add    esp,0x10
c0002e26:	66 85 c0             	test   ax,ax
c0002e29:	75 04                	jne    c0002e2f <get_fileinfo+0x126>
c0002e2b:	31 ff                	xor    edi,edi
c0002e2d:	eb 23                	jmp    c0002e52 <get_fileinfo+0x149>
c0002e2f:	b9 0c 00 00 00       	mov    ecx,0xc
c0002e34:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002e38:	29 f9                	sub    ecx,edi
c0002e3a:	0f b7 c0             	movzx  eax,ax
c0002e3d:	e8 57 ee ff ff       	call   c0001c99 <put_utf>
c0002e42:	84 c0                	test   al,al
c0002e44:	74 e5                	je     c0002e2b <get_fileinfo+0x122>
c0002e46:	0f b6 c0             	movzx  eax,al
c0002e49:	01 c7                	add    edi,eax
c0002e4b:	89 e9                	mov    ecx,ebp
c0002e4d:	e9 4a ff ff ff       	jmp    c0002d9c <get_fileinfo+0x93>
c0002e52:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002e57:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002e5b:	75 54                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002e5d:	85 ff                	test   edi,edi
c0002e5f:	75 0b                	jne    c0002e6c <get_fileinfo+0x163>
c0002e61:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002e65:	ba 01 00 00 00       	mov    edx,0x1
c0002e6a:	eb 33                	jmp    c0002e9f <get_fileinfo+0x196>
c0002e6c:	b1 08                	mov    cl,0x8
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002e76:	84 c0                	test   al,al
c0002e78:	74 25                	je     c0002e9f <get_fileinfo+0x196>
c0002e7a:	66 83 f8 2e          	cmp    ax,0x2e
c0002e7e:	74 16                	je     c0002e96 <get_fileinfo+0x18d>
c0002e80:	8d 78 bf             	lea    edi,[eax-0x41]
c0002e83:	66 83 ff 19          	cmp    di,0x19
c0002e87:	77 0f                	ja     c0002e98 <get_fileinfo+0x18f>
c0002e89:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002e8c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002e8f:	74 07                	je     c0002e98 <get_fileinfo+0x18f>
c0002e91:	83 c0 20             	add    eax,0x20
c0002e94:	eb 02                	jmp    c0002e98 <get_fileinfo+0x18f>
c0002e96:	b1 10                	mov    cl,0x10
c0002e98:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002e9c:	42                   	inc    edx
c0002e9d:	eb d1                	jmp    c0002e70 <get_fileinfo+0x167>
c0002e9f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002ea4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ea7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002eab:	75 04                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002ead:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002eb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eb4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002eb7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002eba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ebd:	83 c0 1c             	add    eax,0x1c
c0002ec0:	e8 94 ec ff ff       	call   c0001b59 <ld_dword>
c0002ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0002ec7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eca:	83 c0 16             	add    eax,0x16
c0002ecd:	e8 7a ec ff ff       	call   c0001b4c <ld_word>
c0002ed2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002ed6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ed9:	83 c0 18             	add    eax,0x18
c0002edc:	e8 6b ec ff ff       	call   c0001b4c <ld_word>
c0002ee1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002ee5:	83 c4 1c             	add    esp,0x1c
c0002ee8:	5b                   	pop    ebx
c0002ee9:	5e                   	pop    esi
c0002eea:	5f                   	pop    edi
c0002eeb:	5d                   	pop    ebp
c0002eec:	c3                   	ret    

c0002eed <ld_clust.isra.0>:
c0002eed:	56                   	push   esi
c0002eee:	89 c6                	mov    esi,eax
c0002ef0:	53                   	push   ebx
c0002ef1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ef4:	89 d3                	mov    ebx,edx
c0002ef6:	e8 51 ec ff ff       	call   c0001b4c <ld_word>
c0002efb:	0f b7 c8             	movzx  ecx,ax
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	3c 03                	cmp    al,0x3
c0002f02:	75 0d                	jne    c0002f11 <ld_clust.isra.0+0x24>
c0002f04:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f07:	e8 40 ec ff ff       	call   c0001b4c <ld_word>
c0002f0c:	c1 e0 10             	shl    eax,0x10
c0002f0f:	09 c1                	or     ecx,eax
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	5b                   	pop    ebx
c0002f14:	5e                   	pop    esi
c0002f15:	c3                   	ret    

c0002f16 <st_clust.isra.1>:
c0002f16:	56                   	push   esi
c0002f17:	89 c6                	mov    esi,eax
c0002f19:	53                   	push   ebx
c0002f1a:	89 d3                	mov    ebx,edx
c0002f1c:	0f b7 d1             	movzx  edx,cx
c0002f1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002f22:	e8 4a ec ff ff       	call   c0001b71 <st_word>
c0002f27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002f2a:	75 0f                	jne    c0002f3b <st_clust.isra.1+0x25>
c0002f2c:	c1 e9 10             	shr    ecx,0x10
c0002f2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f32:	89 ca                	mov    edx,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	e9 36 ec ff ff       	jmp    c0001b71 <st_word>
c0002f3b:	5b                   	pop    ebx
c0002f3c:	5e                   	pop    esi
c0002f3d:	c3                   	ret    

c0002f3e <get_fat.isra.2>:
c0002f3e:	b9 01 00 00 00       	mov    ecx,0x1
c0002f43:	83 fa 01             	cmp    edx,0x1
c0002f46:	0f 86 f1 00 00 00    	jbe    c000303d <get_fat.isra.2+0xff>
c0002f4c:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002f4f:	0f 83 e8 00 00 00    	jae    c000303d <get_fat.isra.2+0xff>
c0002f55:	55                   	push   ebp
c0002f56:	57                   	push   edi
c0002f57:	89 c7                	mov    edi,eax
c0002f59:	56                   	push   esi
c0002f5a:	89 d6                	mov    esi,edx
c0002f5c:	53                   	push   ebx
c0002f5d:	83 ec 0c             	sub    esp,0xc
c0002f60:	8a 00                	mov    al,BYTE PTR [eax]
c0002f62:	3c 02                	cmp    al,0x2
c0002f64:	74 78                	je     c0002fde <get_fat.isra.2+0xa0>
c0002f66:	3c 03                	cmp    al,0x3
c0002f68:	0f 84 97 00 00 00    	je     c0003005 <get_fat.isra.2+0xc7>
c0002f6e:	fe c8                	dec    al
c0002f70:	0f 85 bd 00 00 00    	jne    c0003033 <get_fat.isra.2+0xf5>
c0002f76:	89 d3                	mov    ebx,edx
c0002f78:	89 f8                	mov    eax,edi
c0002f7a:	d1 eb                	shr    ebx,1
c0002f7c:	01 d3                	add    ebx,edx
c0002f7e:	89 da                	mov    edx,ebx
c0002f80:	c1 ea 09             	shr    edx,0x9
c0002f83:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002f86:	e8 e7 f0 ff ff       	call   c0002072 <move_window>
c0002f8b:	85 c0                	test   eax,eax
c0002f8d:	74 08                	je     c0002f97 <get_fat.isra.2+0x59>
c0002f8f:	83 c9 ff             	or     ecx,0xffffffff
c0002f92:	e9 9c 00 00 00       	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002f97:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f9a:	89 f8                	mov    eax,edi
c0002f9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002fa2:	89 ea                	mov    edx,ebp
c0002fa4:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002fa8:	c1 ea 09             	shr    edx,0x9
c0002fab:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fae:	e8 bf f0 ff ff       	call   c0002072 <move_window>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	75 d8                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fb7:	0f b6 c3             	movzx  eax,bl
c0002fba:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fc0:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002fc5:	c1 e3 08             	shl    ebx,0x8
c0002fc8:	09 c3                	or     ebx,eax
c0002fca:	89 d9                	mov    ecx,ebx
c0002fcc:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fd2:	83 e6 01             	and    esi,0x1
c0002fd5:	74 5c                	je     c0003033 <get_fat.isra.2+0xf5>
c0002fd7:	89 d9                	mov    ecx,ebx
c0002fd9:	c1 e9 04             	shr    ecx,0x4
c0002fdc:	eb 55                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002fde:	c1 ea 08             	shr    edx,0x8
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fe6:	e8 87 f0 ff ff       	call   c0002072 <move_window>
c0002feb:	85 c0                	test   eax,eax
c0002fed:	75 a0                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fef:	01 f6                	add    esi,esi
c0002ff1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002ffb:	e8 4c eb ff ff       	call   c0001b4c <ld_word>
c0003000:	0f b7 c8             	movzx  ecx,ax
c0003003:	eb 2e                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0003005:	c1 ea 07             	shr    edx,0x7
c0003008:	89 f8                	mov    eax,edi
c000300a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000300d:	e8 60 f0 ff ff       	call   c0002072 <move_window>
c0003012:	85 c0                	test   eax,eax
c0003014:	0f 85 75 ff ff ff    	jne    c0002f8f <get_fat.isra.2+0x51>
c000301a:	c1 e6 02             	shl    esi,0x2
c000301d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003023:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003027:	e8 2d eb ff ff       	call   c0001b59 <ld_dword>
c000302c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003031:	89 c1                	mov    ecx,eax
c0003033:	83 c4 0c             	add    esp,0xc
c0003036:	89 c8                	mov    eax,ecx
c0003038:	5b                   	pop    ebx
c0003039:	5e                   	pop    esi
c000303a:	5f                   	pop    edi
c000303b:	5d                   	pop    ebp
c000303c:	c3                   	ret    
c000303d:	89 c8                	mov    eax,ecx
c000303f:	c3                   	ret    

c0003040 <dir_sdi>:
c0003040:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003046:	0f 87 b6 00 00 00    	ja     c0003102 <dir_sdi+0xc2>
c000304c:	55                   	push   ebp
c000304d:	57                   	push   edi
c000304e:	56                   	push   esi
c000304f:	53                   	push   ebx
c0003050:	89 d3                	mov    ebx,edx
c0003052:	83 ec 1c             	sub    esp,0x1c
c0003055:	f6 c2 1f             	test   dl,0x1f
c0003058:	74 0a                	je     c0003064 <dir_sdi+0x24>
c000305a:	b8 02 00 00 00       	mov    eax,0x2
c000305f:	e9 96 00 00 00       	jmp    c00030fa <dir_sdi+0xba>
c0003064:	89 c6                	mov    esi,eax
c0003066:	8b 38                	mov    edi,DWORD PTR [eax]
c0003068:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000306b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000306e:	85 c9                	test   ecx,ecx
c0003070:	75 23                	jne    c0003095 <dir_sdi+0x55>
c0003072:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003075:	76 07                	jbe    c000307e <dir_sdi+0x3e>
c0003077:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000307a:	85 c0                	test   eax,eax
c000307c:	75 15                	jne    c0003093 <dir_sdi+0x53>
c000307e:	89 da                	mov    edx,ebx
c0003080:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003084:	c1 ea 05             	shr    edx,0x5
c0003087:	39 c2                	cmp    edx,eax
c0003089:	73 cf                	jae    c000305a <dir_sdi+0x1a>
c000308b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000308e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003091:	eb 3d                	jmp    c00030d0 <dir_sdi+0x90>
c0003093:	89 c1                	mov    ecx,eax
c0003095:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003099:	c1 e5 09             	shl    ebp,0x9
c000309c:	89 ca                	mov    edx,ecx
c000309e:	39 eb                	cmp    ebx,ebp
c00030a0:	72 1c                	jb     c00030be <dir_sdi+0x7e>
c00030a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00030a4:	e8 95 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c00030a9:	89 c1                	mov    ecx,eax
c00030ab:	83 f8 ff             	cmp    eax,0xffffffff
c00030ae:	74 45                	je     c00030f5 <dir_sdi+0xb5>
c00030b0:	83 f8 01             	cmp    eax,0x1
c00030b3:	76 a5                	jbe    c000305a <dir_sdi+0x1a>
c00030b5:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00030b8:	76 a0                	jbe    c000305a <dir_sdi+0x1a>
c00030ba:	29 eb                	sub    ebx,ebp
c00030bc:	eb de                	jmp    c000309c <dir_sdi+0x5c>
c00030be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	e8 c9 ec ff ff       	call   c0001d92 <clst2sect>
c00030c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030cd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030d0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00030d3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00030d6:	85 d2                	test   edx,edx
c00030d8:	74 80                	je     c000305a <dir_sdi+0x1a>
c00030da:	89 d8                	mov    eax,ebx
c00030dc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00030e2:	c1 e8 09             	shr    eax,0x9
c00030e5:	01 d0                	add    eax,edx
c00030e7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030ea:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00030ee:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00030f1:	31 c0                	xor    eax,eax
c00030f3:	eb 05                	jmp    c00030fa <dir_sdi+0xba>
c00030f5:	b8 01 00 00 00       	mov    eax,0x1
c00030fa:	83 c4 1c             	add    esp,0x1c
c00030fd:	5b                   	pop    ebx
c00030fe:	5e                   	pop    esi
c00030ff:	5f                   	pop    edi
c0003100:	5d                   	pop    ebp
c0003101:	c3                   	ret    
c0003102:	b8 02 00 00 00       	mov    eax,0x2
c0003107:	c3                   	ret    

c0003108 <create_chain>:
c0003108:	55                   	push   ebp
c0003109:	89 c5                	mov    ebp,eax
c000310b:	57                   	push   edi
c000310c:	89 d7                	mov    edi,edx
c000310e:	56                   	push   esi
c000310f:	53                   	push   ebx
c0003110:	83 ec 1c             	sub    esp,0x1c
c0003113:	85 d2                	test   edx,edx
c0003115:	8b 30                	mov    esi,DWORD PTR [eax]
c0003117:	75 0e                	jne    c0003127 <create_chain+0x1f>
c0003119:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000311c:	85 c9                	test   ecx,ecx
c000311e:	74 34                	je     c0003154 <create_chain+0x4c>
c0003120:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003123:	77 34                	ja     c0003159 <create_chain+0x51>
c0003125:	eb 2d                	jmp    c0003154 <create_chain+0x4c>
c0003127:	89 f0                	mov    eax,esi
c0003129:	e8 10 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c000312e:	89 c3                	mov    ebx,eax
c0003130:	83 f8 01             	cmp    eax,0x1
c0003133:	77 0a                	ja     c000313f <create_chain+0x37>
c0003135:	bb 01 00 00 00       	mov    ebx,0x1
c000313a:	e9 f9 00 00 00       	jmp    c0003238 <create_chain+0x130>
c000313f:	83 f8 ff             	cmp    eax,0xffffffff
c0003142:	0f 84 ed 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003148:	89 f9                	mov    ecx,edi
c000314a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000314d:	76 0a                	jbe    c0003159 <create_chain+0x51>
c000314f:	e9 e4 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000315d:	75 07                	jne    c0003166 <create_chain+0x5e>
c000315f:	31 db                	xor    ebx,ebx
c0003161:	e9 d2 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003166:	39 f9                	cmp    ecx,edi
c0003168:	75 46                	jne    c00031b0 <create_chain+0xa8>
c000316a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000316d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003170:	77 05                	ja     c0003177 <create_chain+0x6f>
c0003172:	bb 02 00 00 00       	mov    ebx,0x2
c0003177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000317b:	89 da                	mov    edx,ebx
c000317d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003180:	e8 b9 fd ff ff       	call   c0002f3e <get_fat.isra.2>
c0003185:	83 f8 01             	cmp    eax,0x1
c0003188:	74 ab                	je     c0003135 <create_chain+0x2d>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 a2 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003193:	85 c0                	test   eax,eax
c0003195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003199:	74 11                	je     c00031ac <create_chain+0xa4>
c000319b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	76 0d                	jbe    c00031b0 <create_chain+0xa8>
c00031a3:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00031a6:	73 08                	jae    c00031b0 <create_chain+0xa8>
c00031a8:	89 c1                	mov    ecx,eax
c00031aa:	eb 04                	jmp    c00031b0 <create_chain+0xa8>
c00031ac:	85 db                	test   ebx,ebx
c00031ae:	75 3d                	jne    c00031ed <create_chain+0xe5>
c00031b0:	89 cb                	mov    ebx,ecx
c00031b2:	43                   	inc    ebx
c00031b3:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00031b6:	77 0a                	ja     c00031c2 <create_chain+0xba>
c00031b8:	83 f9 01             	cmp    ecx,0x1
c00031bb:	76 a2                	jbe    c000315f <create_chain+0x57>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031c6:	89 da                	mov    edx,ebx
c00031c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00031cb:	e8 6e fd ff ff       	call   c0002f3e <get_fat.isra.2>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 19                	je     c00031ed <create_chain+0xe5>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	0f 84 58 ff ff ff    	je     c0003135 <create_chain+0x2d>
c00031dd:	40                   	inc    eax
c00031de:	74 55                	je     c0003235 <create_chain+0x12d>
c00031e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031e4:	39 cb                	cmp    ebx,ecx
c00031e6:	75 ca                	jne    c00031b2 <create_chain+0xaa>
c00031e8:	e9 72 ff ff ff       	jmp    c000315f <create_chain+0x57>
c00031ed:	83 c9 ff             	or     ecx,0xffffffff
c00031f0:	89 da                	mov    edx,ebx
c00031f2:	89 f0                	mov    eax,esi
c00031f4:	e8 cf f2 ff ff       	call   c00024c8 <put_fat>
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 31                	jne    c000322e <create_chain+0x126>
c00031fd:	85 ff                	test   edi,edi
c00031ff:	75 16                	jne    c0003217 <create_chain+0x10f>
c0003201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003204:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003207:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000320a:	8d 57 fe             	lea    edx,[edi-0x2]
c000320d:	39 d0                	cmp    eax,edx
c000320f:	77 17                	ja     c0003228 <create_chain+0x120>
c0003211:	48                   	dec    eax
c0003212:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003215:	eb 11                	jmp    c0003228 <create_chain+0x120>
c0003217:	89 d9                	mov    ecx,ebx
c0003219:	89 fa                	mov    edx,edi
c000321b:	89 f0                	mov    eax,esi
c000321d:	e8 a6 f2 ff ff       	call   c00024c8 <put_fat>
c0003222:	85 c0                	test   eax,eax
c0003224:	74 db                	je     c0003201 <create_chain+0xf9>
c0003226:	eb 06                	jmp    c000322e <create_chain+0x126>
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 0a                	jmp    c0003238 <create_chain+0x130>
c000322e:	48                   	dec    eax
c000322f:	0f 85 00 ff ff ff    	jne    c0003135 <create_chain+0x2d>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	83 c4 1c             	add    esp,0x1c
c000323b:	89 d8                	mov    eax,ebx
c000323d:	5b                   	pop    ebx
c000323e:	5e                   	pop    esi
c000323f:	5f                   	pop    edi
c0003240:	5d                   	pop    ebp
c0003241:	c3                   	ret    

c0003242 <remove_chain>:
c0003242:	55                   	push   ebp
c0003243:	57                   	push   edi
c0003244:	56                   	push   esi
c0003245:	89 d6                	mov    esi,edx
c0003247:	53                   	push   ebx
c0003248:	83 ec 0c             	sub    esp,0xc
c000324b:	83 fa 01             	cmp    edx,0x1
c000324e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003250:	76 65                	jbe    c00032b7 <remove_chain+0x75>
c0003252:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003255:	76 60                	jbe    c00032b7 <remove_chain+0x75>
c0003257:	89 c5                	mov    ebp,eax
c0003259:	89 ca                	mov    edx,ecx
c000325b:	85 c9                	test   ecx,ecx
c000325d:	74 0e                	je     c000326d <remove_chain+0x2b>
c000325f:	83 c9 ff             	or     ecx,0xffffffff
c0003262:	89 d8                	mov    eax,ebx
c0003264:	e8 5f f2 ff ff       	call   c00024c8 <put_fat>
c0003269:	85 c0                	test   eax,eax
c000326b:	75 56                	jne    c00032c3 <remove_chain+0x81>
c000326d:	89 f2                	mov    edx,esi
c000326f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003272:	e8 c7 fc ff ff       	call   c0002f3e <get_fat.isra.2>
c0003277:	89 c7                	mov    edi,eax
c0003279:	85 c0                	test   eax,eax
c000327b:	75 04                	jne    c0003281 <remove_chain+0x3f>
c000327d:	31 c0                	xor    eax,eax
c000327f:	eb 42                	jmp    c00032c3 <remove_chain+0x81>
c0003281:	83 f8 01             	cmp    eax,0x1
c0003284:	74 31                	je     c00032b7 <remove_chain+0x75>
c0003286:	83 f8 ff             	cmp    eax,0xffffffff
c0003289:	74 33                	je     c00032be <remove_chain+0x7c>
c000328b:	31 c9                	xor    ecx,ecx
c000328d:	89 f2                	mov    edx,esi
c000328f:	89 d8                	mov    eax,ebx
c0003291:	e8 32 f2 ff ff       	call   c00024c8 <put_fat>
c0003296:	85 c0                	test   eax,eax
c0003298:	75 29                	jne    c00032c3 <remove_chain+0x81>
c000329a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000329d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032a0:	8d 4a fe             	lea    ecx,[edx-0x2]
c00032a3:	39 c8                	cmp    eax,ecx
c00032a5:	73 08                	jae    c00032af <remove_chain+0x6d>
c00032a7:	40                   	inc    eax
c00032a8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00032af:	89 fe                	mov    esi,edi
c00032b1:	39 fa                	cmp    edx,edi
c00032b3:	77 b8                	ja     c000326d <remove_chain+0x2b>
c00032b5:	eb c6                	jmp    c000327d <remove_chain+0x3b>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	eb 05                	jmp    c00032c3 <remove_chain+0x81>
c00032be:	b8 01 00 00 00       	mov    eax,0x1
c00032c3:	83 c4 0c             	add    esp,0xc
c00032c6:	5b                   	pop    ebx
c00032c7:	5e                   	pop    esi
c00032c8:	5f                   	pop    edi
c00032c9:	5d                   	pop    ebp
c00032ca:	c3                   	ret    

c00032cb <dir_next>:
c00032cb:	55                   	push   ebp
c00032cc:	57                   	push   edi
c00032cd:	56                   	push   esi
c00032ce:	53                   	push   ebx
c00032cf:	83 ec 1c             	sub    esp,0x1c
c00032d2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00032d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032d7:	83 c7 20             	add    edi,0x20
c00032da:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00032e0:	76 07                	jbe    c00032e9 <dir_next+0x1e>
c00032e2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00032e9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00032ec:	b9 04 00 00 00       	mov    ecx,0x4
c00032f1:	85 f6                	test   esi,esi
c00032f3:	0f 84 cd 00 00 00    	je     c00033c6 <dir_next+0xfb>
c00032f9:	89 c3                	mov    ebx,eax
c00032fb:	89 d1                	mov    ecx,edx
c00032fd:	89 f8                	mov    eax,edi
c00032ff:	25 ff 01 00 00       	and    eax,0x1ff
c0003304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003308:	0f 85 a8 00 00 00    	jne    c00033b6 <dir_next+0xeb>
c000330e:	46                   	inc    esi
c000330f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003312:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003315:	85 d2                	test   edx,edx
c0003317:	75 22                	jne    c000333b <dir_next+0x70>
c0003319:	89 fa                	mov    edx,edi
c000331b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000331f:	c1 ea 05             	shr    edx,0x5
c0003322:	39 c2                	cmp    edx,eax
c0003324:	0f 82 8c 00 00 00    	jb     c00033b6 <dir_next+0xeb>
c000332a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003331:	b9 04 00 00 00       	mov    ecx,0x4
c0003336:	e9 8b 00 00 00       	jmp    c00033c6 <dir_next+0xfb>
c000333b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000333f:	89 fe                	mov    esi,edi
c0003341:	48                   	dec    eax
c0003342:	c1 ee 09             	shr    esi,0x9
c0003345:	85 f0                	test   eax,esi
c0003347:	75 6d                	jne    c00033b6 <dir_next+0xeb>
c0003349:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334d:	89 e8                	mov    eax,ebp
c000334f:	e8 ea fb ff ff       	call   c0002f3e <get_fat.isra.2>
c0003354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003358:	89 c6                	mov    esi,eax
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	77 07                	ja     c0003366 <dir_next+0x9b>
c000335f:	b9 02 00 00 00       	mov    ecx,0x2
c0003364:	eb 60                	jmp    c00033c6 <dir_next+0xfb>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 07                	jne    c0003372 <dir_next+0xa7>
c000336b:	b9 01 00 00 00       	mov    ecx,0x1
c0003370:	eb 54                	jmp    c00033c6 <dir_next+0xfb>
c0003372:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003375:	77 30                	ja     c00033a7 <dir_next+0xdc>
c0003377:	85 c9                	test   ecx,ecx
c0003379:	74 af                	je     c000332a <dir_next+0x5f>
c000337b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000337e:	89 d8                	mov    eax,ebx
c0003380:	e8 83 fd ff ff       	call   c0003108 <create_chain>
c0003385:	b9 07 00 00 00       	mov    ecx,0x7
c000338a:	89 c6                	mov    esi,eax
c000338c:	85 c0                	test   eax,eax
c000338e:	74 36                	je     c00033c6 <dir_next+0xfb>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	74 ca                	je     c000335f <dir_next+0x94>
c0003395:	83 f8 ff             	cmp    eax,0xffffffff
c0003398:	74 d1                	je     c000336b <dir_next+0xa0>
c000339a:	89 c2                	mov    edx,eax
c000339c:	89 e8                	mov    eax,ebp
c000339e:	e8 75 f2 ff ff       	call   c0002618 <dir_clear>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	75 c4                	jne    c000336b <dir_next+0xa0>
c00033a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00033aa:	89 f2                	mov    edx,esi
c00033ac:	89 e8                	mov    eax,ebp
c00033ae:	e8 df e9 ff ff       	call   c0001d92 <clst2sect>
c00033b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00033b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00033ba:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00033bd:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00033c1:	31 c9                	xor    ecx,ecx
c00033c3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00033c6:	83 c4 1c             	add    esp,0x1c
c00033c9:	89 c8                	mov    eax,ecx
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_alloc>:
c00033d0:	55                   	push   ebp
c00033d1:	89 c5                	mov    ebp,eax
c00033d3:	57                   	push   edi
c00033d4:	89 d7                	mov    edi,edx
c00033d6:	56                   	push   esi
c00033d7:	31 d2                	xor    edx,edx
c00033d9:	53                   	push   ebx
c00033da:	83 ec 0c             	sub    esp,0xc
c00033dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00033df:	e8 5c fc ff ff       	call   c0003040 <dir_sdi>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 37                	jne    c000341f <dir_alloc+0x4f>
c00033e8:	31 db                	xor    ebx,ebx
c00033ea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033ed:	89 f0                	mov    eax,esi
c00033ef:	e8 7e ec ff ff       	call   c0002072 <move_window>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	75 27                	jne    c000341f <dir_alloc+0x4f>
c00033f8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00033fb:	8a 12                	mov    dl,BYTE PTR [edx]
c00033fd:	84 d2                	test   dl,dl
c00033ff:	74 05                	je     c0003406 <dir_alloc+0x36>
c0003401:	80 fa e5             	cmp    dl,0xe5
c0003404:	75 07                	jne    c000340d <dir_alloc+0x3d>
c0003406:	43                   	inc    ebx
c0003407:	39 fb                	cmp    ebx,edi
c0003409:	75 04                	jne    c000340f <dir_alloc+0x3f>
c000340b:	eb 1c                	jmp    c0003429 <dir_alloc+0x59>
c000340d:	31 db                	xor    ebx,ebx
c000340f:	ba 01 00 00 00       	mov    edx,0x1
c0003414:	89 e8                	mov    eax,ebp
c0003416:	e8 b0 fe ff ff       	call   c00032cb <dir_next>
c000341b:	85 c0                	test   eax,eax
c000341d:	74 cb                	je     c00033ea <dir_alloc+0x1a>
c000341f:	83 f8 04             	cmp    eax,0x4
c0003422:	75 05                	jne    c0003429 <dir_alloc+0x59>
c0003424:	b8 07 00 00 00       	mov    eax,0x7
c0003429:	83 c4 0c             	add    esp,0xc
c000342c:	5b                   	pop    ebx
c000342d:	5e                   	pop    esi
c000342e:	5f                   	pop    edi
c000342f:	5d                   	pop    ebp
c0003430:	c3                   	ret    

c0003431 <dir_read>:
c0003431:	55                   	push   ebp
c0003432:	57                   	push   edi
c0003433:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003438:	56                   	push   esi
c0003439:	be 04 00 00 00       	mov    esi,0x4
c000343e:	53                   	push   ebx
c000343f:	89 c3                	mov    ebx,eax
c0003441:	83 ec 1c             	sub    esp,0x1c
c0003444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003448:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000344f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003452:	85 d2                	test   edx,edx
c0003454:	0f 84 d8 00 00 00    	je     c0003532 <dir_read+0x101>
c000345a:	89 e8                	mov    eax,ebp
c000345c:	e8 11 ec ff ff       	call   c0002072 <move_window>
c0003461:	89 c6                	mov    esi,eax
c0003463:	85 c0                	test   eax,eax
c0003465:	0f 85 d2 00 00 00    	jne    c000353d <dir_read+0x10c>
c000346b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000346e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003470:	84 c9                	test   cl,cl
c0003472:	0f 84 c0 00 00 00    	je     c0003538 <dir_read+0x107>
c0003478:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000347b:	83 e0 3f             	and    eax,0x3f
c000347e:	80 f9 2e             	cmp    cl,0x2e
c0003481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003485:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003488:	0f 84 8a 00 00 00    	je     c0003518 <dir_read+0xe7>
c000348e:	80 f9 e5             	cmp    cl,0xe5
c0003491:	0f 84 81 00 00 00    	je     c0003518 <dir_read+0xe7>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	83 e0 1f             	and    eax,0x1f
c000349e:	83 f8 08             	cmp    eax,0x8
c00034a1:	0f 94 c0             	sete   al
c00034a4:	0f b6 c0             	movzx  eax,al
c00034a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00034ab:	75 6b                	jne    c0003518 <dir_read+0xe7>
c00034ad:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00034b2:	75 44                	jne    c00034f8 <dir_read+0xc7>
c00034b4:	f6 c1 40             	test   cl,0x40
c00034b7:	74 12                	je     c00034cb <dir_read+0x9a>
c00034b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00034bc:	83 e1 bf             	and    ecx,0xffffffbf
c00034bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00034c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034c9:	eb 06                	jmp    c00034d1 <dir_read+0xa0>
c00034cb:	89 f8                	mov    eax,edi
c00034cd:	38 c8                	cmp    al,cl
c00034cf:	75 47                	jne    c0003518 <dir_read+0xe7>
c00034d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00034d5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034da:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00034dd:	75 3e                	jne    c000351d <dir_read+0xec>
c00034df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00034e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00034e6:	e8 c4 e8 ff ff       	call   c0001daf <pick_lfn>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	74 2e                	je     c000351d <dir_read+0xec>
c00034ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00034f3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034f6:	eb 25                	jmp    c000351d <dir_read+0xec>
c00034f8:	89 f8                	mov    eax,edi
c00034fa:	84 c0                	test   al,al
c00034fc:	75 11                	jne    c000350f <dir_read+0xde>
c00034fe:	89 d0                	mov    eax,edx
c0003500:	e8 64 ea ff ff       	call   c0001f69 <sum_sfn>
c0003505:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003509:	75 04                	jne    c000350f <dir_read+0xde>
c000350b:	31 f6                	xor    esi,esi
c000350d:	eb 35                	jmp    c0003544 <dir_read+0x113>
c000350f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003516:	eb 2c                	jmp    c0003544 <dir_read+0x113>
c0003518:	bf ff ff ff ff       	mov    edi,0xffffffff
c000351d:	31 d2                	xor    edx,edx
c000351f:	89 d8                	mov    eax,ebx
c0003521:	e8 a5 fd ff ff       	call   c00032cb <dir_next>
c0003526:	89 c6                	mov    esi,eax
c0003528:	85 c0                	test   eax,eax
c000352a:	0f 84 1f ff ff ff    	je     c000344f <dir_read+0x1e>
c0003530:	eb 0b                	jmp    c000353d <dir_read+0x10c>
c0003532:	85 f6                	test   esi,esi
c0003534:	74 d5                	je     c000350b <dir_read+0xda>
c0003536:	eb 05                	jmp    c000353d <dir_read+0x10c>
c0003538:	be 04 00 00 00       	mov    esi,0x4
c000353d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003544:	83 c4 1c             	add    esp,0x1c
c0003547:	89 f0                	mov    eax,esi
c0003549:	5b                   	pop    ebx
c000354a:	5e                   	pop    esi
c000354b:	5f                   	pop    edi
c000354c:	5d                   	pop    ebp
c000354d:	c3                   	ret    

c000354e <dir_remove>:
c000354e:	57                   	push   edi
c000354f:	56                   	push   esi
c0003550:	53                   	push   ebx
c0003551:	89 c3                	mov    ebx,eax
c0003553:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003556:	8b 30                	mov    esi,DWORD PTR [eax]
c0003558:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000355b:	83 fa ff             	cmp    edx,0xffffffff
c000355e:	74 09                	je     c0003569 <dir_remove+0x1b>
c0003560:	e8 db fa ff ff       	call   c0003040 <dir_sdi>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 34                	jne    c000359d <dir_remove+0x4f>
c0003569:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356c:	89 f0                	mov    eax,esi
c000356e:	e8 ff ea ff ff       	call   c0002072 <move_window>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 1c                	jne    c0003593 <dir_remove+0x45>
c0003577:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000357a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000357d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003581:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003584:	73 17                	jae    c000359d <dir_remove+0x4f>
c0003586:	31 d2                	xor    edx,edx
c0003588:	89 d8                	mov    eax,ebx
c000358a:	e8 3c fd ff ff       	call   c00032cb <dir_next>
c000358f:	85 c0                	test   eax,eax
c0003591:	74 d6                	je     c0003569 <dir_remove+0x1b>
c0003593:	83 f8 04             	cmp    eax,0x4
c0003596:	75 05                	jne    c000359d <dir_remove+0x4f>
c0003598:	b8 02 00 00 00       	mov    eax,0x2
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	c3                   	ret    

c00035a1 <dir_find>:
c00035a1:	55                   	push   ebp
c00035a2:	31 d2                	xor    edx,edx
c00035a4:	57                   	push   edi
c00035a5:	56                   	push   esi
c00035a6:	53                   	push   ebx
c00035a7:	89 c3                	mov    ebx,eax
c00035a9:	83 ec 1c             	sub    esp,0x1c
c00035ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00035ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035b2:	89 d8                	mov    eax,ebx
c00035b4:	e8 87 fa ff ff       	call   c0003040 <dir_sdi>
c00035b9:	89 c6                	mov    esi,eax
c00035bb:	85 c0                	test   eax,eax
c00035bd:	0f 85 02 01 00 00    	jne    c00036c5 <dir_find+0x124>
c00035c3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00035ca:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00035cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035db:	e8 92 ea ff ff       	call   c0002072 <move_window>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	85 c0                	test   eax,eax
c00035e4:	0f 85 db 00 00 00    	jne    c00036c5 <dir_find+0x124>
c00035ea:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00035ed:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00035f0:	84 c9                	test   cl,cl
c00035f2:	0f 84 c8 00 00 00    	je     c00036c0 <dir_find+0x11f>
c00035f8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00035fb:	88 d0                	mov    al,dl
c00035fd:	83 e0 3f             	and    eax,0x3f
c0003600:	80 f9 e5             	cmp    cl,0xe5
c0003603:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003606:	0f 84 93 00 00 00    	je     c000369f <dir_find+0xfe>
c000360c:	80 e2 08             	and    dl,0x8
c000360f:	74 0a                	je     c000361b <dir_find+0x7a>
c0003611:	3c 0f                	cmp    al,0xf
c0003613:	0f 85 86 00 00 00    	jne    c000369f <dir_find+0xfe>
c0003619:	eb 04                	jmp    c000361f <dir_find+0x7e>
c000361b:	3c 0f                	cmp    al,0xf
c000361d:	75 54                	jne    c0003673 <dir_find+0xd2>
c000361f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003623:	0f 85 82 00 00 00    	jne    c00036ab <dir_find+0x10a>
c0003629:	f6 c1 40             	test   cl,0x40
c000362c:	74 12                	je     c0003640 <dir_find+0x9f>
c000362e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003631:	83 e1 bf             	and    ecx,0xffffffbf
c0003634:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000363b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000363e:	eb 06                	jmp    c0003646 <dir_find+0xa5>
c0003640:	89 f8                	mov    eax,edi
c0003642:	38 c8                	cmp    al,cl
c0003644:	75 60                	jne    c00036a6 <dir_find+0x105>
c0003646:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000364a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003652:	75 57                	jne    c00036ab <dir_find+0x10a>
c0003654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000365c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000365f:	89 ea                	mov    edx,ebp
c0003661:	e8 89 f3 ff ff       	call   c00029ef <cmp_lfn>
c0003666:	85 c0                	test   eax,eax
c0003668:	74 41                	je     c00036ab <dir_find+0x10a>
c000366a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000366e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003671:	eb 38                	jmp    c00036ab <dir_find+0x10a>
c0003673:	89 f8                	mov    eax,edi
c0003675:	84 c0                	test   al,al
c0003677:	75 0d                	jne    c0003686 <dir_find+0xe5>
c0003679:	89 e8                	mov    eax,ebp
c000367b:	e8 e9 e8 ff ff       	call   c0001f69 <sum_sfn>
c0003680:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003684:	74 3f                	je     c00036c5 <dir_find+0x124>
c0003686:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000368a:	75 13                	jne    c000369f <dir_find+0xfe>
c000368c:	8d 53 20             	lea    edx,[ebx+0x20]
c000368f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003694:	89 e8                	mov    eax,ebp
c0003696:	e8 fd e4 ff ff       	call   c0001b98 <mem_cmp>
c000369b:	85 c0                	test   eax,eax
c000369d:	74 26                	je     c00036c5 <dir_find+0x124>
c000369f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ab:	31 d2                	xor    edx,edx
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 17 fc ff ff       	call   c00032cb <dir_next>
c00036b4:	89 c6                	mov    esi,eax
c00036b6:	85 c0                	test   eax,eax
c00036b8:	0f 84 16 ff ff ff    	je     c00035d4 <dir_find+0x33>
c00036be:	eb 05                	jmp    c00036c5 <dir_find+0x124>
c00036c0:	be 04 00 00 00       	mov    esi,0x4
c00036c5:	83 c4 1c             	add    esp,0x1c
c00036c8:	89 f0                	mov    eax,esi
c00036ca:	5b                   	pop    ebx
c00036cb:	5e                   	pop    esi
c00036cc:	5f                   	pop    edi
c00036cd:	5d                   	pop    ebp
c00036ce:	c3                   	ret    

c00036cf <follow_path>:
c00036cf:	56                   	push   esi
c00036d0:	53                   	push   ebx
c00036d1:	89 c3                	mov    ebx,eax
c00036d3:	83 ec 14             	sub    esp,0x14
c00036d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036da:	8b 30                	mov    esi,DWORD PTR [eax]
c00036dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00036e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00036e2:	80 fa 5c             	cmp    dl,0x5c
c00036e5:	75 07                	jne    c00036ee <follow_path+0x1f>
c00036e7:	40                   	inc    eax
c00036e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036ec:	eb ee                	jmp    c00036dc <follow_path+0xd>
c00036ee:	80 fa 2f             	cmp    dl,0x2f
c00036f1:	74 f4                	je     c00036e7 <follow_path+0x18>
c00036f3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00036fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00036fd:	77 3e                	ja     c000373d <follow_path+0x6e>
c00036ff:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003703:	31 d2                	xor    edx,edx
c0003705:	89 d8                	mov    eax,ebx
c0003707:	e8 34 f9 ff ff       	call   c0003040 <dir_sdi>
c000370c:	eb 4f                	jmp    c000375d <follow_path+0x8e>
c000370e:	89 d8                	mov    eax,ebx
c0003710:	e8 8c fe ff ff       	call   c00035a1 <dir_find>
c0003715:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003718:	85 c0                	test   eax,eax
c000371a:	75 32                	jne    c000374e <follow_path+0x7f>
c000371c:	80 e2 04             	and    dl,0x4
c000371f:	75 3c                	jne    c000375d <follow_path+0x8e>
c0003721:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003725:	74 31                	je     c0003758 <follow_path+0x89>
c0003727:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000372a:	25 ff 01 00 00       	and    eax,0x1ff
c000372f:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003733:	8a 06                	mov    al,BYTE PTR [esi]
c0003735:	e8 b3 f7 ff ff       	call   c0002eed <ld_clust.isra.0>
c000373a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000373d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003741:	89 d8                	mov    eax,ebx
c0003743:	e8 cb ef ff ff       	call   c0002713 <create_name>
c0003748:	85 c0                	test   eax,eax
c000374a:	74 c2                	je     c000370e <follow_path+0x3f>
c000374c:	eb 0f                	jmp    c000375d <follow_path+0x8e>
c000374e:	83 f8 04             	cmp    eax,0x4
c0003751:	75 0a                	jne    c000375d <follow_path+0x8e>
c0003753:	80 e2 04             	and    dl,0x4
c0003756:	75 05                	jne    c000375d <follow_path+0x8e>
c0003758:	b8 05 00 00 00       	mov    eax,0x5
c000375d:	83 c4 14             	add    esp,0x14
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	c3                   	ret    

c0003763 <dir_register>:
c0003763:	55                   	push   ebp
c0003764:	57                   	push   edi
c0003765:	56                   	push   esi
c0003766:	be 06 00 00 00       	mov    esi,0x6
c000376b:	53                   	push   ebx
c000376c:	83 ec 2c             	sub    esp,0x2c
c000376f:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003773:	0f 85 65 01 00 00    	jne    c00038de <dir_register+0x17b>
c0003779:	8b 38                	mov    edi,DWORD PTR [eax]
c000377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003783:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000378a:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c000378f:	74 06                	je     c0003797 <dir_register+0x34>
c0003791:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003795:	eb ef                	jmp    c0003786 <dir_register+0x23>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	b9 0c 00 00 00       	mov    ecx,0xc
c000379e:	8d 40 20             	lea    eax,[eax+0x20]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 c2                	mov    edx,eax
c00037a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00037ab:	e8 c8 e3 ff ff       	call   c0001b78 <mem_cpy>
c00037b0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00037b5:	74 48                	je     c00037ff <dir_register+0x9c>
c00037b7:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00037bb:	bd 01 00 00 00       	mov    ebp,0x1
c00037c0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00037c3:	55                   	push   ebp
c00037c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00037c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00037cc:	e8 dc e6 ff ff       	call   c0001ead <gen_numname>
c00037d1:	58                   	pop    eax
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 c8 fd ff ff       	call   c00035a1 <dir_find>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 10                	jne    c00037ef <dir_register+0x8c>
c00037df:	45                   	inc    ebp
c00037e0:	83 fd 64             	cmp    ebp,0x64
c00037e3:	75 db                	jne    c00037c0 <dir_register+0x5d>
c00037e5:	be 07 00 00 00       	mov    esi,0x7
c00037ea:	e9 ef 00 00 00       	jmp    c00038de <dir_register+0x17b>
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 85 e6 00 00 00    	jne    c00038de <dir_register+0x17b>
c00037f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00037fc:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00037ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003804:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003809:	74 13                	je     c000381e <dir_register+0xbb>
c000380b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000380f:	b9 0d 00 00 00       	mov    ecx,0xd
c0003814:	83 c0 0c             	add    eax,0xc
c0003817:	31 d2                	xor    edx,edx
c0003819:	f7 f1                	div    ecx
c000381b:	8d 68 01             	lea    ebp,[eax+0x1]
c000381e:	89 ea                	mov    edx,ebp
c0003820:	89 d8                	mov    eax,ebx
c0003822:	e8 a9 fb ff ff       	call   c00033d0 <dir_alloc>
c0003827:	89 c6                	mov    esi,eax
c0003829:	85 c0                	test   eax,eax
c000382b:	0f 85 ad 00 00 00    	jne    c00038de <dir_register+0x17b>
c0003831:	4d                   	dec    ebp
c0003832:	74 6a                	je     c000389e <dir_register+0x13b>
c0003834:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003837:	89 e8                	mov    eax,ebp
c0003839:	c1 e0 05             	shl    eax,0x5
c000383c:	29 c2                	sub    edx,eax
c000383e:	89 d8                	mov    eax,ebx
c0003840:	e8 fb f7 ff ff       	call   c0003040 <dir_sdi>
c0003845:	89 c6                	mov    esi,eax
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 85 8f 00 00 00    	jne    c00038de <dir_register+0x17b>
c000384f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003853:	e8 11 e7 ff ff       	call   c0001f69 <sum_sfn>
c0003858:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000385c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385f:	89 f8                	mov    eax,edi
c0003861:	e8 0c e8 ff ff       	call   c0002072 <move_window>
c0003866:	89 c6                	mov    esi,eax
c0003868:	85 c0                	test   eax,eax
c000386a:	75 72                	jne    c00038de <dir_register+0x17b>
c000386c:	83 ec 0c             	sub    esp,0xc
c000386f:	89 e8                	mov    eax,ebp
c0003871:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003876:	0f b6 c8             	movzx  ecx,al
c0003879:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000387c:	52                   	push   edx
c000387d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003880:	e8 a4 e5 ff ff       	call   c0001e29 <put_lfn>
c0003885:	31 d2                	xor    edx,edx
c0003887:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 39 fa ff ff       	call   c00032cb <dir_next>
c0003892:	83 c4 10             	add    esp,0x10
c0003895:	89 c6                	mov    esi,eax
c0003897:	85 c0                	test   eax,eax
c0003899:	75 43                	jne    c00038de <dir_register+0x17b>
c000389b:	4d                   	dec    ebp
c000389c:	75 be                	jne    c000385c <dir_register+0xf9>
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 ca e7 ff ff       	call   c0002072 <move_window>
c00038a8:	89 c6                	mov    esi,eax
c00038aa:	85 c0                	test   eax,eax
c00038ac:	75 30                	jne    c00038de <dir_register+0x17b>
c00038ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038b1:	b9 20 00 00 00       	mov    ecx,0x20
c00038b6:	31 d2                	xor    edx,edx
c00038b8:	e8 d0 e2 ff ff       	call   c0001b8d <mem_set>
c00038bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00038c4:	b9 0b 00 00 00       	mov    ecx,0xb
c00038c9:	e8 aa e2 ff ff       	call   c0001b78 <mem_cpy>
c00038ce:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c00038d1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038d4:	83 e0 18             	and    eax,0x18
c00038d7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00038da:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00038de:	83 c4 2c             	add    esp,0x2c
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <f_mount>:
c00038e8:	53                   	push   ebx
c00038e9:	83 ec 18             	sub    esp,0x18
c00038ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00038f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00038f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00038fc:	e8 7a e6 ff ff       	call   c0001f7b <get_ldnumber>
c0003901:	89 c2                	mov    edx,eax
c0003903:	b8 0b 00 00 00       	mov    eax,0xb
c0003908:	85 d2                	test   edx,edx
c000390a:	78 39                	js     c0003945 <f_mount+0x5d>
c000390c:	8b 04 95 40 f5 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0ac0]
c0003913:	85 c0                	test   eax,eax
c0003915:	74 03                	je     c000391a <f_mount+0x32>
c0003917:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000391e:	85 c0                	test   eax,eax
c0003920:	74 03                	je     c0003925 <f_mount+0x3d>
c0003922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003929:	89 04 95 40 f5 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0ac0],eax
c0003930:	31 c0                	xor    eax,eax
c0003932:	84 db                	test   bl,bl
c0003934:	74 0f                	je     c0003945 <f_mount+0x5d>
c0003936:	31 c9                	xor    ecx,ecx
c0003938:	8d 54 24 20          	lea    edx,[esp+0x20]
c000393c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003940:	e8 80 e8 ff ff       	call   c00021c5 <mount_volume>
c0003945:	83 c4 18             	add    esp,0x18
c0003948:	5b                   	pop    ebx
c0003949:	c3                   	ret    

c000394a <f_open>:
c000394a:	55                   	push   ebp
c000394b:	b8 09 00 00 00       	mov    eax,0x9
c0003950:	57                   	push   edi
c0003951:	56                   	push   esi
c0003952:	53                   	push   ebx
c0003953:	83 ec 5c             	sub    esp,0x5c
c0003956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000395a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000395e:	85 db                	test   ebx,ebx
c0003960:	0f 84 a7 02 00 00    	je     c0003c0d <f_open+0x2c3>
c0003966:	89 fe                	mov    esi,edi
c0003968:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000396c:	83 e6 3f             	and    esi,0x3f
c000396f:	89 f0                	mov    eax,esi
c0003971:	0f b6 c8             	movzx  ecx,al
c0003974:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003978:	e8 48 e8 ff ff       	call   c00021c5 <mount_volume>
c000397d:	85 c0                	test   eax,eax
c000397f:	0f 85 82 02 00 00    	jne    c0003c07 <f_open+0x2bd>
c0003985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003989:	83 ec 0c             	sub    esp,0xc
c000398c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003990:	68 00 02 00 00       	push   0x200
c0003995:	e8 fe 1e 00 00       	call   c0005898 <ff_memalloc>
c000399a:	83 c4 10             	add    esp,0x10
c000399d:	89 c5                	mov    ebp,eax
c000399f:	b8 11 00 00 00       	mov    eax,0x11
c00039a4:	85 ed                	test   ebp,ebp
c00039a6:	0f 84 61 02 00 00    	je     c0003c0d <f_open+0x2c3>
c00039ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039b0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00039b4:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00039b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039bb:	e8 0f fd ff ff       	call   c00036cf <follow_path>
c00039c0:	85 c0                	test   eax,eax
c00039c2:	75 0c                	jne    c00039d0 <f_open+0x86>
c00039c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00039c9:	79 05                	jns    c00039d0 <f_open+0x86>
c00039cb:	b8 06 00 00 00       	mov    eax,0x6
c00039d0:	f7 c7 1c 00 00 00    	test   edi,0x1c
c00039d6:	0f 84 de 00 00 00    	je     c0003aba <f_open+0x170>
c00039dc:	85 c0                	test   eax,eax
c00039de:	74 1e                	je     c00039fe <f_open+0xb4>
c00039e0:	83 f8 04             	cmp    eax,0x4
c00039e3:	0f 85 06 02 00 00    	jne    c0003bef <f_open+0x2a5>
c00039e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039ed:	83 ce 08             	or     esi,0x8
c00039f0:	e8 6e fd ff ff       	call   c0003763 <dir_register>
c00039f5:	85 c0                	test   eax,eax
c00039f7:	74 2f                	je     c0003a28 <f_open+0xde>
c00039f9:	e9 f1 01 00 00       	jmp    c0003bef <f_open+0x2a5>
c00039fe:	b8 07 00 00 00       	mov    eax,0x7
c0003a03:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003a08:	0f 85 e1 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a0e:	b8 08 00 00 00       	mov    eax,0x8
c0003a13:	f7 c7 04 00 00 00    	test   edi,0x4
c0003a19:	0f 85 d0 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a1f:	83 e7 08             	and    edi,0x8
c0003a22:	0f 84 bf 00 00 00    	je     c0003ae7 <f_open+0x19d>
c0003a28:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a30:	89 ca                	mov    edx,ecx
c0003a32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a36:	8a 00                	mov    al,BYTE PTR [eax]
c0003a38:	e8 b0 f4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a41:	89 c7                	mov    edi,eax
c0003a43:	ba 00 00 21 50       	mov    edx,0x50210000
c0003a48:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003a4b:	e8 25 e1 ff ff       	call   c0001b75 <st_dword>
c0003a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a54:	31 c9                	xor    ecx,ecx
c0003a56:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003a62:	e8 af f4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0003a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	83 c0 1c             	add    eax,0x1c
c0003a70:	e8 00 e1 ff ff       	call   c0001b75 <st_dword>
c0003a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a79:	85 ff                	test   edi,edi
c0003a7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a7f:	74 66                	je     c0003ae7 <f_open+0x19d>
c0003a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a85:	31 c9                	xor    ecx,ecx
c0003a87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003a8a:	89 fa                	mov    edx,edi
c0003a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003a94:	e8 a9 f7 ff ff       	call   c0003242 <remove_chain>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	0f 85 4e 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003aa5:	4f                   	dec    edi
c0003aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003aaa:	e8 c3 e5 ff ff       	call   c0002072 <move_window>
c0003aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ab8:	eb 27                	jmp    c0003ae1 <f_open+0x197>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 85 2d 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ac2:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ac6:	b8 04 00 00 00       	mov    eax,0x4
c0003acb:	f6 c2 10             	test   dl,0x10
c0003ace:	0f 85 1b 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ad4:	83 e7 02             	and    edi,0x2
c0003ad7:	74 0e                	je     c0003ae7 <f_open+0x19d>
c0003ad9:	b8 07 00 00 00       	mov    eax,0x7
c0003ade:	80 e2 01             	and    dl,0x1
c0003ae1:	0f 85 08 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0003aed:	74 03                	je     c0003af2 <f_open+0x1a8>
c0003aef:	83 ce 40             	or     esi,0x40
c0003af2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003af6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003afd:	89 fa                	mov    edx,edi
c0003aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003b06:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003b09:	8a 01                	mov    al,BYTE PTR [ecx]
c0003b0b:	e8 dd f3 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003b10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b13:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003b16:	e8 3e e0 ff ff       	call   c0001b59 <ld_dword>
c0003b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003b24:	31 d2                	xor    edx,edx
c0003b26:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003b2a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003b2e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003b32:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003b39:	89 f0                	mov    eax,esi
c0003b3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003b42:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003b45:	b9 00 02 00 00       	mov    ecx,0x200
c0003b4a:	8d 43 28             	lea    eax,[ebx+0x28]
c0003b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b51:	e8 37 e0 ff ff       	call   c0001b8d <mem_set>
c0003b56:	83 e6 20             	and    esi,0x20
c0003b59:	75 07                	jne    c0003b62 <f_open+0x218>
c0003b5b:	31 c0                	xor    eax,eax
c0003b5d:	e9 8d 00 00 00       	jmp    c0003bef <f_open+0x2a5>
c0003b62:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003b65:	85 ff                	test   edi,edi
c0003b67:	74 f2                	je     c0003b5b <f_open+0x211>
c0003b69:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b70:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003b73:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003b77:	c1 e6 09             	shl    esi,0x9
c0003b7a:	39 fe                	cmp    esi,edi
c0003b7c:	73 1c                	jae    c0003b9a <f_open+0x250>
c0003b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b80:	29 f7                	sub    edi,esi
c0003b82:	e8 b7 f3 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003b87:	89 c2                	mov    edx,eax
c0003b89:	83 f8 01             	cmp    eax,0x1
c0003b8c:	76 10                	jbe    c0003b9e <f_open+0x254>
c0003b8e:	83 f8 ff             	cmp    eax,0xffffffff
c0003b91:	75 e7                	jne    c0003b7a <f_open+0x230>
c0003b93:	b8 01 00 00 00       	mov    eax,0x1
c0003b98:	eb 09                	jmp    c0003ba3 <f_open+0x259>
c0003b9a:	31 c0                	xor    eax,eax
c0003b9c:	eb 05                	jmp    c0003ba3 <f_open+0x259>
c0003b9e:	b8 02 00 00 00       	mov    eax,0x2
c0003ba3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ba6:	85 c0                	test   eax,eax
c0003ba8:	75 45                	jne    c0003bef <f_open+0x2a5>
c0003baa:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003bb0:	74 a9                	je     c0003b5b <f_open+0x211>
c0003bb2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003bb6:	89 f0                	mov    eax,esi
c0003bb8:	e8 d5 e1 ff ff       	call   c0001d92 <clst2sect>
c0003bbd:	89 c2                	mov    edx,eax
c0003bbf:	b8 02 00 00 00       	mov    eax,0x2
c0003bc4:	85 d2                	test   edx,edx
c0003bc6:	74 27                	je     c0003bef <f_open+0x2a5>
c0003bc8:	89 f9                	mov    ecx,edi
c0003bca:	c1 e9 09             	shr    ecx,0x9
c0003bcd:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003bd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003bd3:	6a 01                	push   0x1
c0003bd5:	50                   	push   eax
c0003bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003bda:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003bde:	50                   	push   eax
c0003bdf:	e8 1d df ff ff       	call   c0001b01 <disk_read>
c0003be4:	83 c4 10             	add    esp,0x10
c0003be7:	85 c0                	test   eax,eax
c0003be9:	0f 95 c0             	setne  al
c0003bec:	0f b6 c0             	movzx  eax,al
c0003bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bf3:	83 ec 0c             	sub    esp,0xc
c0003bf6:	55                   	push   ebp
c0003bf7:	e8 b4 1c 00 00       	call   c00058b0 <ff_memfree>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c03:	85 c0                	test   eax,eax
c0003c05:	74 06                	je     c0003c0d <f_open+0x2c3>
c0003c07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003c0d:	83 c4 5c             	add    esp,0x5c
c0003c10:	5b                   	pop    ebx
c0003c11:	5e                   	pop    esi
c0003c12:	5f                   	pop    edi
c0003c13:	5d                   	pop    ebp
c0003c14:	c3                   	ret    

c0003c15 <f_read>:
c0003c15:	55                   	push   ebp
c0003c16:	57                   	push   edi
c0003c17:	56                   	push   esi
c0003c18:	53                   	push   ebx
c0003c19:	83 ec 2c             	sub    esp,0x2c
c0003c1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c2a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c32:	89 d8                	mov    eax,ebx
c0003c34:	e8 8f e3 ff ff       	call   c0001fc8 <validate>
c0003c39:	89 c5                	mov    ebp,eax
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	0f 85 c7 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c43:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c47:	85 ed                	test   ebp,ebp
c0003c49:	0f 85 bb 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c4f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003c53:	0f 84 ac 01 00 00    	je     c0003e05 <f_read+0x1f0>
c0003c59:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003c5c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003c5f:	89 c7                	mov    edi,eax
c0003c61:	39 f0                	cmp    eax,esi
c0003c63:	0f 86 ad 00 00 00    	jbe    c0003d16 <f_read+0x101>
c0003c69:	89 f7                	mov    edi,esi
c0003c6b:	e9 a6 00 00 00       	jmp    c0003d16 <f_read+0x101>
c0003c70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003c73:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003c79:	0f 85 5b 01 00 00    	jne    c0003dda <f_read+0x1c5>
c0003c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c83:	89 d1                	mov    ecx,edx
c0003c85:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003c89:	c1 e9 09             	shr    ecx,0x9
c0003c8c:	48                   	dec    eax
c0003c8d:	21 c8                	and    eax,ecx
c0003c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c93:	0f 84 8a 00 00 00    	je     c0003d23 <f_read+0x10e>
c0003c99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c9d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca0:	89 c8                	mov    eax,ecx
c0003ca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ca6:	e8 e7 e0 ff ff       	call   c0001d92 <clst2sect>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 84 88 00 00 00    	je     c0003d3b <f_read+0x126>
c0003cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003cbf:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003cc5:	0f 86 bd 00 00 00    	jbe    c0003d88 <f_read+0x173>
c0003ccb:	89 fe                	mov    esi,edi
c0003ccd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003cd1:	c1 ee 09             	shr    esi,0x9
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	01 f2                	add    edx,esi
c0003cda:	39 c2                	cmp    edx,eax
c0003cdc:	76 06                	jbe    c0003ce4 <f_read+0xcf>
c0003cde:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ce2:	89 c6                	mov    esi,eax
c0003ce4:	56                   	push   esi
c0003ce5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ced:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003cf1:	50                   	push   eax
c0003cf2:	e8 0a de ff ff       	call   c0001b01 <disk_read>
c0003cf7:	83 c4 10             	add    esp,0x10
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 50                	jne    c0003d4e <f_read+0x139>
c0003cfe:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d02:	78 60                	js     c0003d64 <f_read+0x14f>
c0003d04:	c1 e6 09             	shl    esi,0x9
c0003d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d0b:	29 f7                	sub    edi,esi
c0003d0d:	01 30                	add    DWORD PTR [eax],esi
c0003d0f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d13:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003d16:	85 ff                	test   edi,edi
c0003d18:	0f 85 52 ff ff ff    	jne    c0003c70 <f_read+0x5b>
c0003d1e:	e9 e7 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d23:	85 d2                	test   edx,edx
c0003d25:	75 05                	jne    c0003d2c <f_read+0x117>
c0003d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d2a:	eb 0a                	jmp    c0003d36 <f_read+0x121>
c0003d2c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d31:	e8 08 f2 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003d36:	83 f8 01             	cmp    eax,0x1
c0003d39:	77 0e                	ja     c0003d49 <f_read+0x134>
c0003d3b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003d3f:	bd 02 00 00 00       	mov    ebp,0x2
c0003d44:	e9 c1 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d49:	83 f8 ff             	cmp    eax,0xffffffff
c0003d4c:	75 0e                	jne    c0003d5c <f_read+0x147>
c0003d4e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003d52:	bd 01 00 00 00       	mov    ebp,0x1
c0003d57:	e9 ae 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d5c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003d5f:	e9 35 ff ff ff       	jmp    c0003c99 <f_read+0x84>
c0003d64:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003d6b:	39 f0                	cmp    eax,esi
c0003d6d:	73 95                	jae    c0003d04 <f_read+0xef>
c0003d6f:	c1 e0 09             	shl    eax,0x9
c0003d72:	8d 53 28             	lea    edx,[ebx+0x28]
c0003d75:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003d79:	b9 00 02 00 00       	mov    ecx,0x200
c0003d7e:	e8 f5 dd ff ff       	call   c0001b78 <mem_cpy>
c0003d83:	e9 7c ff ff ff       	jmp    c0003d04 <f_read+0xef>
c0003d88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d8b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003d8f:	74 42                	je     c0003dd3 <f_read+0x1be>
c0003d91:	8d 73 28             	lea    esi,[ebx+0x28]
c0003d94:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d98:	79 19                	jns    c0003db3 <f_read+0x19e>
c0003d9a:	6a 01                	push   0x1
c0003d9c:	50                   	push   eax
c0003d9d:	56                   	push   esi
c0003d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003da2:	50                   	push   eax
c0003da3:	e8 6f dd ff ff       	call   c0001b17 <disk_write>
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	85 c0                	test   eax,eax
c0003dad:	75 9f                	jne    c0003d4e <f_read+0x139>
c0003daf:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003db3:	6a 01                	push   0x1
c0003db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003db9:	56                   	push   esi
c0003dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dc2:	50                   	push   eax
c0003dc3:	e8 39 dd ff ff       	call   c0001b01 <disk_read>
c0003dc8:	83 c4 10             	add    esp,0x10
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	0f 85 7b ff ff ff    	jne    c0003d4e <f_read+0x139>
c0003dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003ddd:	ba 00 02 00 00       	mov    edx,0x200
c0003de2:	25 ff 01 00 00       	and    eax,0x1ff
c0003de7:	89 fe                	mov    esi,edi
c0003de9:	29 c2                	sub    edx,eax
c0003deb:	39 d7                	cmp    edi,edx
c0003ded:	76 02                	jbe    c0003df1 <f_read+0x1dc>
c0003def:	89 d6                	mov    esi,edx
c0003df1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003df5:	89 f1                	mov    ecx,esi
c0003df7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003dfb:	e8 78 dd ff ff       	call   c0001b78 <mem_cpy>
c0003e00:	e9 02 ff ff ff       	jmp    c0003d07 <f_read+0xf2>
c0003e05:	bd 07 00 00 00       	mov    ebp,0x7
c0003e0a:	83 c4 2c             	add    esp,0x2c
c0003e0d:	89 e8                	mov    eax,ebp
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	c3                   	ret    

c0003e14 <f_write>:
c0003e14:	55                   	push   ebp
c0003e15:	57                   	push   edi
c0003e16:	56                   	push   esi
c0003e17:	53                   	push   ebx
c0003e18:	83 ec 2c             	sub    esp,0x2c
c0003e1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 94 e1 ff ff       	call   c0001fc8 <validate>
c0003e34:	89 c5                	mov    ebp,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	0f 85 00 02 00 00    	jne    c000403e <f_write+0x22a>
c0003e3e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e42:	85 ed                	test   ebp,ebp
c0003e44:	0f 85 f4 01 00 00    	jne    c000403e <f_write+0x22a>
c0003e4a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003e4e:	0f 84 e5 01 00 00    	je     c0004039 <f_write+0x225>
c0003e54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e57:	89 c7                	mov    edi,eax
c0003e59:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003e5d:	0f 83 ea 00 00 00    	jae    c0003f4d <f_write+0x139>
c0003e63:	f7 d0                	not    eax
c0003e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003e69:	e9 df 00 00 00       	jmp    c0003f4d <f_write+0x139>
c0003e6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e71:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e77:	0f 85 8b 01 00 00    	jne    c0004008 <f_write+0x1f4>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 d1                	mov    ecx,edx
c0003e83:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e87:	c1 e9 09             	shr    ecx,0x9
c0003e8a:	48                   	dec    eax
c0003e8b:	21 c8                	and    eax,ecx
c0003e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e91:	0f 84 c3 00 00 00    	je     c0003f5a <f_write+0x146>
c0003e97:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003e9b:	0f 88 18 01 00 00    	js     c0003fb9 <f_write+0x1a5>
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ea8:	89 c8                	mov    eax,ecx
c0003eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003eae:	e8 df de ff ff       	call   c0001d92 <clst2sect>
c0003eb3:	85 c0                	test   eax,eax
c0003eb5:	0f 84 c8 00 00 00    	je     c0003f83 <f_write+0x16f>
c0003ebb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ec3:	01 c7                	add    edi,eax
c0003ec5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003ecd:	0f 86 0d 01 00 00    	jbe    c0003fe0 <f_write+0x1cc>
c0003ed3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ed7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003edb:	c1 ee 09             	shr    esi,0x9
c0003ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ee2:	01 f2                	add    edx,esi
c0003ee4:	39 c2                	cmp    edx,eax
c0003ee6:	76 06                	jbe    c0003eee <f_write+0xda>
c0003ee8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eec:	89 c6                	mov    esi,eax
c0003eee:	56                   	push   esi
c0003eef:	57                   	push   edi
c0003ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ef4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ef8:	50                   	push   eax
c0003ef9:	e8 19 dc ff ff       	call   c0001b17 <disk_write>
c0003efe:	83 c4 10             	add    esp,0x10
c0003f01:	85 c0                	test   eax,eax
c0003f03:	0f 85 8d 00 00 00    	jne    c0003f96 <f_write+0x182>
c0003f09:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f0c:	29 fa                	sub    edx,edi
c0003f0e:	39 f2                	cmp    edx,esi
c0003f10:	73 18                	jae    c0003f2a <f_write+0x116>
c0003f12:	c1 e2 09             	shl    edx,0x9
c0003f15:	8d 43 28             	lea    eax,[ebx+0x28]
c0003f18:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003f1c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f21:	e8 52 dc ff ff       	call   c0001b78 <mem_cpy>
c0003f26:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f2a:	c1 e6 09             	shl    esi,0x9
c0003f2d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003f31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f35:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f39:	01 30                	add    DWORD PTR [eax],esi
c0003f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003f3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f41:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f44:	39 f0                	cmp    eax,esi
c0003f46:	73 02                	jae    c0003f4a <f_write+0x136>
c0003f48:	89 f0                	mov    eax,esi
c0003f4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003f52:	0f 85 16 ff ff ff    	jne    c0003e6e <f_write+0x5a>
c0003f58:	eb 1b                	jmp    c0003f75 <f_write+0x161>
c0003f5a:	85 d2                	test   edx,edx
c0003f5c:	75 09                	jne    c0003f67 <f_write+0x153>
c0003f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f61:	85 c0                	test   eax,eax
c0003f63:	75 19                	jne    c0003f7e <f_write+0x16a>
c0003f65:	eb 03                	jmp    c0003f6a <f_write+0x156>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	89 d8                	mov    eax,ebx
c0003f6c:	e8 97 f1 ff ff       	call   c0003108 <create_chain>
c0003f71:	85 c0                	test   eax,eax
c0003f73:	75 09                	jne    c0003f7e <f_write+0x16a>
c0003f75:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003f79:	e9 c0 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f7e:	83 f8 01             	cmp    eax,0x1
c0003f81:	75 0e                	jne    c0003f91 <f_write+0x17d>
c0003f83:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f87:	bd 02 00 00 00       	mov    ebp,0x2
c0003f8c:	e9 ad 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 0e                	jne    c0003fa4 <f_write+0x190>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	bd 01 00 00 00       	mov    ebp,0x1
c0003f9f:	e9 9a 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fa7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003fab:	0f 85 e6 fe ff ff    	jne    c0003e97 <f_write+0x83>
c0003fb1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fb4:	e9 de fe ff ff       	jmp    c0003e97 <f_write+0x83>
c0003fb9:	6a 01                	push   0x1
c0003fbb:	8d 43 28             	lea    eax,[ebx+0x28]
c0003fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003fc1:	50                   	push   eax
c0003fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fc6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fca:	50                   	push   eax
c0003fcb:	e8 47 db ff ff       	call   c0001b17 <disk_write>
c0003fd0:	83 c4 10             	add    esp,0x10
c0003fd3:	85 c0                	test   eax,eax
c0003fd5:	75 bf                	jne    c0003f96 <f_write+0x182>
c0003fd7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fdb:	e9 c1 fe ff ff       	jmp    c0003ea1 <f_write+0x8d>
c0003fe0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003fe3:	74 20                	je     c0004005 <f_write+0x1f1>
c0003fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fe8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003feb:	76 18                	jbe    c0004005 <f_write+0x1f1>
c0003fed:	6a 01                	push   0x1
c0003fef:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ff2:	57                   	push   edi
c0003ff3:	50                   	push   eax
c0003ff4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff8:	50                   	push   eax
c0003ff9:	e8 03 db ff ff       	call   c0001b01 <disk_read>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	85 c0                	test   eax,eax
c0004003:	75 91                	jne    c0003f96 <f_write+0x182>
c0004005:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004008:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000400b:	ba 00 02 00 00       	mov    edx,0x200
c0004010:	25 ff 01 00 00       	and    eax,0x1ff
c0004015:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004019:	29 c2                	sub    edx,eax
c000401b:	39 d6                	cmp    esi,edx
c000401d:	76 02                	jbe    c0004021 <f_write+0x20d>
c000401f:	89 d6                	mov    esi,edx
c0004021:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004025:	89 f1                	mov    ecx,esi
c0004027:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000402b:	e8 48 db ff ff       	call   c0001b78 <mem_cpy>
c0004030:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004034:	e9 f4 fe ff ff       	jmp    c0003f2d <f_write+0x119>
c0004039:	bd 07 00 00 00       	mov    ebp,0x7
c000403e:	83 c4 2c             	add    esp,0x2c
c0004041:	89 e8                	mov    eax,ebp
c0004043:	5b                   	pop    ebx
c0004044:	5e                   	pop    esi
c0004045:	5f                   	pop    edi
c0004046:	5d                   	pop    ebp
c0004047:	c3                   	ret    

c0004048 <f_sync>:
c0004048:	56                   	push   esi
c0004049:	53                   	push   ebx
c000404a:	83 ec 14             	sub    esp,0x14
c000404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004051:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004055:	89 d8                	mov    eax,ebx
c0004057:	e8 6c df ff ff       	call   c0001fc8 <validate>
c000405c:	85 c0                	test   eax,eax
c000405e:	0f 85 93 00 00 00    	jne    c00040f7 <f_sync+0xaf>
c0004064:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004067:	f6 c2 40             	test   dl,0x40
c000406a:	0f 84 87 00 00 00    	je     c00040f7 <f_sync+0xaf>
c0004070:	84 d2                	test   dl,dl
c0004072:	79 29                	jns    c000409d <f_sync+0x55>
c0004074:	6a 01                	push   0x1
c0004076:	8d 43 28             	lea    eax,[ebx+0x28]
c0004079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000407c:	50                   	push   eax
c000407d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004081:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004085:	50                   	push   eax
c0004086:	e8 8c da ff ff       	call   c0001b17 <disk_write>
c000408b:	83 c4 10             	add    esp,0x10
c000408e:	89 c2                	mov    edx,eax
c0004090:	b8 01 00 00 00       	mov    eax,0x1
c0004095:	85 d2                	test   edx,edx
c0004097:	75 5e                	jne    c00040f7 <f_sync+0xaf>
c0004099:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000409d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00040a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040a4:	e8 c9 df ff ff       	call   c0002072 <move_window>
c00040a9:	85 c0                	test   eax,eax
c00040ab:	75 4a                	jne    c00040f7 <f_sync+0xaf>
c00040ad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00040b0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00040b4:	89 f2                	mov    edx,esi
c00040b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00040b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040bb:	e8 56 ee ff ff       	call   c0002f16 <st_clust.isra.1>
c00040c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00040c6:	e8 aa da ff ff       	call   c0001b75 <st_dword>
c00040cb:	8d 46 16             	lea    eax,[esi+0x16]
c00040ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00040d3:	e8 9d da ff ff       	call   c0001b75 <st_dword>
c00040d8:	8d 46 12             	lea    eax,[esi+0x12]
c00040db:	31 d2                	xor    edx,edx
c00040dd:	e8 8f da ff ff       	call   c0001b71 <st_word>
c00040e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040ee:	e8 bf e9 ff ff       	call   c0002ab2 <sync_fs>
c00040f3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00040f7:	83 c4 14             	add    esp,0x14
c00040fa:	5b                   	pop    ebx
c00040fb:	5e                   	pop    esi
c00040fc:	c3                   	ret    

c00040fd <f_close>:
c00040fd:	53                   	push   ebx
c00040fe:	83 ec 24             	sub    esp,0x24
c0004101:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004105:	53                   	push   ebx
c0004106:	e8 3d ff ff ff       	call   c0004048 <f_sync>
c000410b:	83 c4 10             	add    esp,0x10
c000410e:	85 c0                	test   eax,eax
c0004110:	75 15                	jne    c0004127 <f_close+0x2a>
c0004112:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 ab de ff ff       	call   c0001fc8 <validate>
c000411d:	85 c0                	test   eax,eax
c000411f:	75 06                	jne    c0004127 <f_close+0x2a>
c0004121:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004127:	83 c4 18             	add    esp,0x18
c000412a:	5b                   	pop    ebx
c000412b:	c3                   	ret    

c000412c <f_lseek>:
c000412c:	55                   	push   ebp
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	83 ec 2c             	sub    esp,0x2c
c0004133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004137:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000413b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 82 de ff ff       	call   c0001fc8 <validate>
c0004146:	89 c5                	mov    ebp,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 79 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c0004150:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004154:	85 ed                	test   ebp,ebp
c0004156:	0f 85 6d 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c000415c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000415f:	39 f0                	cmp    eax,esi
c0004161:	73 08                	jae    c000416b <f_lseek+0x3f>
c0004163:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004167:	75 02                	jne    c000416b <f_lseek+0x3f>
c0004169:	89 c6                	mov    esi,eax
c000416b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000416e:	85 f6                	test   esi,esi
c0004170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004177:	75 07                	jne    c0004180 <f_lseek+0x54>
c0004179:	31 f6                	xor    esi,esi
c000417b:	e9 e2 00 00 00       	jmp    c0004262 <f_lseek+0x136>
c0004180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004184:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004188:	c1 e7 09             	shl    edi,0x9
c000418b:	85 c9                	test   ecx,ecx
c000418d:	74 28                	je     c00041b7 <f_lseek+0x8b>
c000418f:	49                   	dec    ecx
c0004190:	31 d2                	xor    edx,edx
c0004192:	8d 46 ff             	lea    eax,[esi-0x1]
c0004195:	f7 f7                	div    edi
c0004197:	31 d2                	xor    edx,edx
c0004199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000419d:	89 c8                	mov    eax,ecx
c000419f:	f7 f7                	div    edi
c00041a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00041a5:	72 10                	jb     c00041b7 <f_lseek+0x8b>
c00041a7:	89 f8                	mov    eax,edi
c00041a9:	f7 d8                	neg    eax
c00041ab:	21 c1                	and    ecx,eax
c00041ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00041b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00041b3:	29 ce                	sub    esi,ecx
c00041b5:	eb 3c                	jmp    c00041f3 <f_lseek+0xc7>
c00041b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ba:	85 c0                	test   eax,eax
c00041bc:	75 32                	jne    c00041f0 <f_lseek+0xc4>
c00041be:	31 d2                	xor    edx,edx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 41 ef ff ff       	call   c0003108 <create_chain>
c00041c7:	83 f8 01             	cmp    eax,0x1
c00041ca:	75 0e                	jne    c00041da <f_lseek+0xae>
c00041cc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041d0:	bd 02 00 00 00       	mov    ebp,0x2
c00041d5:	e9 ef 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041da:	83 f8 ff             	cmp    eax,0xffffffff
c00041dd:	75 0e                	jne    c00041ed <f_lseek+0xc1>
c00041df:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041e3:	bd 01 00 00 00       	mov    ebp,0x1
c00041e8:	e9 dc 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041f3:	85 c0                	test   eax,eax
c00041f5:	74 82                	je     c0004179 <f_lseek+0x4d>
c00041f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041fa:	39 fe                	cmp    esi,edi
c00041fc:	76 3d                	jbe    c000423b <f_lseek+0x10f>
c00041fe:	01 fa                	add    edx,edi
c0004200:	29 fe                	sub    esi,edi
c0004202:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004205:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004209:	89 c2                	mov    edx,eax
c000420b:	74 0d                	je     c000421a <f_lseek+0xee>
c000420d:	89 d8                	mov    eax,ebx
c000420f:	e8 f4 ee ff ff       	call   c0003108 <create_chain>
c0004214:	85 c0                	test   eax,eax
c0004216:	75 09                	jne    c0004221 <f_lseek+0xf5>
c0004218:	eb 1f                	jmp    c0004239 <f_lseek+0x10d>
c000421a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421c:	e8 1d ed ff ff       	call   c0002f3e <get_fat.isra.2>
c0004221:	83 f8 ff             	cmp    eax,0xffffffff
c0004224:	74 b9                	je     c00041df <f_lseek+0xb3>
c0004226:	83 f8 01             	cmp    eax,0x1
c0004229:	76 a1                	jbe    c00041cc <f_lseek+0xa0>
c000422b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000422f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004232:	76 98                	jbe    c00041cc <f_lseek+0xa0>
c0004234:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004237:	eb be                	jmp    c00041f7 <f_lseek+0xcb>
c0004239:	31 f6                	xor    esi,esi
c000423b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	0f 84 2f ff ff ff    	je     c0004179 <f_lseek+0x4d>
c000424a:	89 c2                	mov    edx,eax
c000424c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004250:	e8 3d db ff ff       	call   c0001d92 <clst2sect>
c0004255:	85 c0                	test   eax,eax
c0004257:	0f 84 6f ff ff ff    	je     c00041cc <f_lseek+0xa0>
c000425d:	c1 ee 09             	shr    esi,0x9
c0004260:	01 c6                	add    esi,eax
c0004262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004265:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004268:	76 07                	jbe    c0004271 <f_lseek+0x145>
c000426a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000426d:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004271:	a9 ff 01 00 00       	test   eax,0x1ff
c0004276:	74 51                	je     c00042c9 <f_lseek+0x19d>
c0004278:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000427b:	39 f0                	cmp    eax,esi
c000427d:	74 4a                	je     c00042c9 <f_lseek+0x19d>
c000427f:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004282:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004286:	79 21                	jns    c00042a9 <f_lseek+0x17d>
c0004288:	6a 01                	push   0x1
c000428a:	50                   	push   eax
c000428b:	57                   	push   edi
c000428c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004290:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004294:	50                   	push   eax
c0004295:	e8 7d d8 ff ff       	call   c0001b17 <disk_write>
c000429a:	83 c4 10             	add    esp,0x10
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 3a ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042a5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a9:	6a 01                	push   0x1
c00042ab:	56                   	push   esi
c00042ac:	57                   	push   edi
c00042ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b5:	50                   	push   eax
c00042b6:	e8 46 d8 ff ff       	call   c0001b01 <disk_read>
c00042bb:	83 c4 10             	add    esp,0x10
c00042be:	85 c0                	test   eax,eax
c00042c0:	0f 85 19 ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00042c9:	83 c4 2c             	add    esp,0x2c
c00042cc:	89 e8                	mov    eax,ebp
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <f_opendir>:
c00042d3:	56                   	push   esi
c00042d4:	b8 09 00 00 00       	mov    eax,0x9
c00042d9:	53                   	push   ebx
c00042da:	83 ec 24             	sub    esp,0x24
c00042dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042e1:	85 db                	test   ebx,ebx
c00042e3:	0f 84 af 00 00 00    	je     c0004398 <f_opendir+0xc5>
c00042e9:	31 c9                	xor    ecx,ecx
c00042eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042f3:	e8 cd de ff ff       	call   c00021c5 <mount_volume>
c00042f8:	85 c0                	test   eax,eax
c00042fa:	0f 85 92 00 00 00    	jne    c0004392 <f_opendir+0xbf>
c0004300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004304:	83 ec 0c             	sub    esp,0xc
c0004307:	89 03                	mov    DWORD PTR [ebx],eax
c0004309:	68 00 02 00 00       	push   0x200
c000430e:	e8 85 15 00 00       	call   c0005898 <ff_memalloc>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	89 c6                	mov    esi,eax
c0004318:	b8 11 00 00 00       	mov    eax,0x11
c000431d:	85 f6                	test   esi,esi
c000431f:	74 77                	je     c0004398 <f_opendir+0xc5>
c0004321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004329:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000432c:	89 d8                	mov    eax,ebx
c000432e:	e8 9c f3 ff ff       	call   c00036cf <follow_path>
c0004333:	85 c0                	test   eax,eax
c0004335:	75 37                	jne    c000436e <f_opendir+0x9b>
c0004337:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000433b:	78 1c                	js     c0004359 <f_opendir+0x86>
c000433d:	b8 05 00 00 00       	mov    eax,0x5
c0004342:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004346:	74 26                	je     c000436e <f_opendir+0x9b>
c0004348:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000434b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000434f:	8a 00                	mov    al,BYTE PTR [eax]
c0004351:	e8 97 eb ff ff       	call   c0002eed <ld_clust.isra.0>
c0004356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000435d:	31 d2                	xor    edx,edx
c000435f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004363:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004367:	89 d8                	mov    eax,ebx
c0004369:	e8 d2 ec ff ff       	call   c0003040 <dir_sdi>
c000436e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004372:	83 ec 0c             	sub    esp,0xc
c0004375:	56                   	push   esi
c0004376:	e8 35 15 00 00       	call   c00058b0 <ff_memfree>
c000437b:	83 c4 10             	add    esp,0x10
c000437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004382:	83 f8 04             	cmp    eax,0x4
c0004385:	74 06                	je     c000438d <f_opendir+0xba>
c0004387:	85 c0                	test   eax,eax
c0004389:	74 0d                	je     c0004398 <f_opendir+0xc5>
c000438b:	eb 05                	jmp    c0004392 <f_opendir+0xbf>
c000438d:	b8 05 00 00 00       	mov    eax,0x5
c0004392:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004398:	83 c4 24             	add    esp,0x24
c000439b:	5b                   	pop    ebx
c000439c:	5e                   	pop    esi
c000439d:	c3                   	ret    

c000439e <f_closedir>:
c000439e:	53                   	push   ebx
c000439f:	83 ec 18             	sub    esp,0x18
c00043a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00043a6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043aa:	89 d8                	mov    eax,ebx
c00043ac:	e8 17 dc ff ff       	call   c0001fc8 <validate>
c00043b1:	85 c0                	test   eax,eax
c00043b3:	75 06                	jne    c00043bb <f_closedir+0x1d>
c00043b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043bb:	83 c4 18             	add    esp,0x18
c00043be:	5b                   	pop    ebx
c00043bf:	c3                   	ret    

c00043c0 <f_readdir>:
c00043c0:	57                   	push   edi
c00043c1:	56                   	push   esi
c00043c2:	53                   	push   ebx
c00043c3:	83 ec 20             	sub    esp,0x20
c00043c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00043ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00043ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043d2:	89 d8                	mov    eax,ebx
c00043d4:	e8 ef db ff ff       	call   c0001fc8 <validate>
c00043d9:	85 c0                	test   eax,eax
c00043db:	75 6e                	jne    c000444b <f_readdir+0x8b>
c00043dd:	85 ff                	test   edi,edi
c00043df:	75 0b                	jne    c00043ec <f_readdir+0x2c>
c00043e1:	31 d2                	xor    edx,edx
c00043e3:	89 d8                	mov    eax,ebx
c00043e5:	e8 56 ec ff ff       	call   c0003040 <dir_sdi>
c00043ea:	eb 5f                	jmp    c000444b <f_readdir+0x8b>
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	68 00 02 00 00       	push   0x200
c00043f4:	e8 9f 14 00 00       	call   c0005898 <ff_memalloc>
c00043f9:	83 c4 10             	add    esp,0x10
c00043fc:	89 c6                	mov    esi,eax
c00043fe:	b8 11 00 00 00       	mov    eax,0x11
c0004403:	85 f6                	test   esi,esi
c0004405:	74 44                	je     c000444b <f_readdir+0x8b>
c0004407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000440b:	31 d2                	xor    edx,edx
c000440d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004410:	89 d8                	mov    eax,ebx
c0004412:	e8 1a f0 ff ff       	call   c0003431 <dir_read>
c0004417:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000441c:	75 19                	jne    c0004437 <f_readdir+0x77>
c000441e:	89 fa                	mov    edx,edi
c0004420:	89 d8                	mov    eax,ebx
c0004422:	e8 e2 e8 ff ff       	call   c0002d09 <get_fileinfo>
c0004427:	31 d2                	xor    edx,edx
c0004429:	89 d8                	mov    eax,ebx
c000442b:	e8 9b ee ff ff       	call   c00032cb <dir_next>
c0004430:	83 f8 04             	cmp    eax,0x4
c0004433:	75 02                	jne    c0004437 <f_readdir+0x77>
c0004435:	31 c0                	xor    eax,eax
c0004437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000443b:	83 ec 0c             	sub    esp,0xc
c000443e:	56                   	push   esi
c000443f:	e8 6c 14 00 00       	call   c00058b0 <ff_memfree>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000444b:	83 c4 20             	add    esp,0x20
c000444e:	5b                   	pop    ebx
c000444f:	5e                   	pop    esi
c0004450:	5f                   	pop    edi
c0004451:	c3                   	ret    

c0004452 <f_stat>:
c0004452:	57                   	push   edi
c0004453:	31 c9                	xor    ecx,ecx
c0004455:	56                   	push   esi
c0004456:	53                   	push   ebx
c0004457:	83 ec 30             	sub    esp,0x30
c000445a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000445e:	89 e2                	mov    edx,esp
c0004460:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004464:	e8 5c dd ff ff       	call   c00021c5 <mount_volume>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 59                	jne    c00044c8 <f_stat+0x76>
c000446f:	83 ec 0c             	sub    esp,0xc
c0004472:	bb 11 00 00 00       	mov    ebx,0x11
c0004477:	68 00 02 00 00       	push   0x200
c000447c:	e8 17 14 00 00       	call   c0005898 <ff_memalloc>
c0004481:	83 c4 10             	add    esp,0x10
c0004484:	89 c6                	mov    esi,eax
c0004486:	85 c0                	test   eax,eax
c0004488:	74 3e                	je     c00044c8 <f_stat+0x76>
c000448a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000448d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004491:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004494:	89 e0                	mov    eax,esp
c0004496:	e8 34 f2 ff ff       	call   c00036cf <follow_path>
c000449b:	89 c3                	mov    ebx,eax
c000449d:	85 c0                	test   eax,eax
c000449f:	75 1b                	jne    c00044bc <f_stat+0x6a>
c00044a1:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00044a6:	78 0f                	js     c00044b7 <f_stat+0x65>
c00044a8:	85 ff                	test   edi,edi
c00044aa:	74 10                	je     c00044bc <f_stat+0x6a>
c00044ac:	89 fa                	mov    edx,edi
c00044ae:	89 e0                	mov    eax,esp
c00044b0:	e8 54 e8 ff ff       	call   c0002d09 <get_fileinfo>
c00044b5:	eb 05                	jmp    c00044bc <f_stat+0x6a>
c00044b7:	bb 06 00 00 00       	mov    ebx,0x6
c00044bc:	83 ec 0c             	sub    esp,0xc
c00044bf:	56                   	push   esi
c00044c0:	e8 eb 13 00 00       	call   c00058b0 <ff_memfree>
c00044c5:	83 c4 10             	add    esp,0x10
c00044c8:	83 c4 30             	add    esp,0x30
c00044cb:	89 d8                	mov    eax,ebx
c00044cd:	5b                   	pop    ebx
c00044ce:	5e                   	pop    esi
c00044cf:	5f                   	pop    edi
c00044d0:	c3                   	ret    

c00044d1 <f_getfree>:
c00044d1:	55                   	push   ebp
c00044d2:	31 c9                	xor    ecx,ecx
c00044d4:	57                   	push   edi
c00044d5:	56                   	push   esi
c00044d6:	53                   	push   ebx
c00044d7:	83 ec 2c             	sub    esp,0x2c
c00044da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044de:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044e2:	e8 de dc ff ff       	call   c00021c5 <mount_volume>
c00044e7:	89 c7                	mov    edi,eax
c00044e9:	85 c0                	test   eax,eax
c00044eb:	0f 85 d8 00 00 00    	jne    c00045c9 <f_getfree+0xf8>
c00044f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044f9:	89 30                	mov    DWORD PTR [eax],esi
c00044fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044fe:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004501:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004504:	39 d0                	cmp    eax,edx
c0004506:	77 0b                	ja     c0004513 <f_getfree+0x42>
c0004508:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000450c:	89 01                	mov    DWORD PTR [ecx],eax
c000450e:	e9 b6 00 00 00       	jmp    c00045c9 <f_getfree+0xf8>
c0004513:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004516:	75 29                	jne    c0004541 <f_getfree+0x70>
c0004518:	bd 02 00 00 00       	mov    ebp,0x2
c000451d:	31 db                	xor    ebx,ebx
c000451f:	89 ea                	mov    edx,ebp
c0004521:	89 f0                	mov    eax,esi
c0004523:	e8 16 ea ff ff       	call   c0002f3e <get_fat.isra.2>
c0004528:	83 f8 ff             	cmp    eax,0xffffffff
c000452b:	74 7b                	je     c00045a8 <f_getfree+0xd7>
c000452d:	83 f8 01             	cmp    eax,0x1
c0004530:	74 7d                	je     c00045af <f_getfree+0xde>
c0004532:	83 d3 00             	adc    ebx,0x0
c0004535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004539:	45                   	inc    ebp
c000453a:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000453d:	77 e0                	ja     c000451f <f_getfree+0x4e>
c000453f:	eb 77                	jmp    c00045b8 <f_getfree+0xe7>
c0004541:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004544:	31 db                	xor    ebx,ebx
c0004546:	31 f6                	xor    esi,esi
c0004548:	85 f6                	test   esi,esi
c000454a:	75 18                	jne    c0004564 <f_getfree+0x93>
c000454c:	8d 42 01             	lea    eax,[edx+0x1]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004557:	e8 16 db ff ff       	call   c0002072 <move_window>
c000455c:	85 c0                	test   eax,eax
c000455e:	75 56                	jne    c00045b6 <f_getfree+0xe5>
c0004560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000456c:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004570:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004573:	75 11                	jne    c0004586 <f_getfree+0xb5>
c0004575:	e8 d2 d5 ff ff       	call   c0001b4c <ld_word>
c000457a:	66 83 f8 01          	cmp    ax,0x1
c000457e:	83 d3 00             	adc    ebx,0x0
c0004581:	83 c6 02             	add    esi,0x2
c0004584:	eb 13                	jmp    c0004599 <f_getfree+0xc8>
c0004586:	e8 ce d5 ff ff       	call   c0001b59 <ld_dword>
c000458b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004590:	83 f8 01             	cmp    eax,0x1
c0004593:	83 d3 00             	adc    ebx,0x0
c0004596:	83 c6 04             	add    esi,0x4
c0004599:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000459f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00045a3:	4d                   	dec    ebp
c00045a4:	75 a2                	jne    c0004548 <f_getfree+0x77>
c00045a6:	eb 10                	jmp    c00045b8 <f_getfree+0xe7>
c00045a8:	bf 01 00 00 00       	mov    edi,0x1
c00045ad:	eb 09                	jmp    c00045b8 <f_getfree+0xe7>
c00045af:	bf 02 00 00 00       	mov    edi,0x2
c00045b4:	eb 02                	jmp    c00045b8 <f_getfree+0xe7>
c00045b6:	89 c7                	mov    edi,eax
c00045b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00045bc:	89 18                	mov    DWORD PTR [eax],ebx
c00045be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045c2:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00045c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00045c9:	83 c4 2c             	add    esp,0x2c
c00045cc:	89 f8                	mov    eax,edi
c00045ce:	5b                   	pop    ebx
c00045cf:	5e                   	pop    esi
c00045d0:	5f                   	pop    edi
c00045d1:	5d                   	pop    ebp
c00045d2:	c3                   	ret    

c00045d3 <f_truncate>:
c00045d3:	56                   	push   esi
c00045d4:	53                   	push   ebx
c00045d5:	83 ec 14             	sub    esp,0x14
c00045d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045e0:	89 d8                	mov    eax,ebx
c00045e2:	e8 e1 d9 ff ff       	call   c0001fc8 <validate>
c00045e7:	89 c6                	mov    esi,eax
c00045e9:	85 c0                	test   eax,eax
c00045eb:	0f 85 be 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045f1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045f5:	85 f6                	test   esi,esi
c00045f7:	0f 85 b2 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045fd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004601:	0f 84 a3 00 00 00    	je     c00046aa <f_truncate+0xd7>
c0004607:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000460a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000460d:	0f 83 9c 00 00 00    	jae    c00046af <f_truncate+0xdc>
c0004613:	85 c0                	test   eax,eax
c0004615:	75 15                	jne    c000462c <f_truncate+0x59>
c0004617:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 1f ec ff ff       	call   c0003242 <remove_chain>
c0004623:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000462a:	eb 35                	jmp    c0004661 <f_truncate+0x8e>
c000462c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004631:	e8 08 e9 ff ff       	call   c0002f3e <get_fat.isra.2>
c0004636:	89 c2                	mov    edx,eax
c0004638:	b8 01 00 00 00       	mov    eax,0x1
c000463d:	83 fa ff             	cmp    edx,0xffffffff
c0004640:	74 1f                	je     c0004661 <f_truncate+0x8e>
c0004642:	b8 02 00 00 00       	mov    eax,0x2
c0004647:	83 fa 01             	cmp    edx,0x1
c000464a:	74 15                	je     c0004661 <f_truncate+0x8e>
c000464c:	31 c0                	xor    eax,eax
c000464e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004652:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004655:	76 0a                	jbe    c0004661 <f_truncate+0x8e>
c0004657:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000465a:	89 d8                	mov    eax,ebx
c000465c:	e8 e1 eb ff ff       	call   c0003242 <remove_chain>
c0004661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004664:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004667:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000466a:	83 ca 40             	or     edx,0x40
c000466d:	85 c0                	test   eax,eax
c000466f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004672:	75 2f                	jne    c00046a3 <f_truncate+0xd0>
c0004674:	84 d2                	test   dl,dl
c0004676:	79 37                	jns    c00046af <f_truncate+0xdc>
c0004678:	6a 01                	push   0x1
c000467a:	8d 43 28             	lea    eax,[ebx+0x28]
c000467d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004680:	50                   	push   eax
c0004681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004685:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004689:	50                   	push   eax
c000468a:	e8 88 d4 ff ff       	call   c0001b17 <disk_write>
c000468f:	83 c4 10             	add    esp,0x10
c0004692:	85 c0                	test   eax,eax
c0004694:	75 08                	jne    c000469e <f_truncate+0xcb>
c0004696:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000469a:	31 f6                	xor    esi,esi
c000469c:	eb 11                	jmp    c00046af <f_truncate+0xdc>
c000469e:	b8 01 00 00 00       	mov    eax,0x1
c00046a3:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00046a6:	89 c6                	mov    esi,eax
c00046a8:	eb 05                	jmp    c00046af <f_truncate+0xdc>
c00046aa:	be 07 00 00 00       	mov    esi,0x7
c00046af:	89 f0                	mov    eax,esi
c00046b1:	83 c4 14             	add    esp,0x14
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	c3                   	ret    

c00046b7 <f_unlink>:
c00046b7:	55                   	push   ebp
c00046b8:	b9 02 00 00 00       	mov    ecx,0x2
c00046bd:	57                   	push   edi
c00046be:	56                   	push   esi
c00046bf:	53                   	push   ebx
c00046c0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00046c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ca:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00046d1:	e8 ef da ff ff       	call   c00021c5 <mount_volume>
c00046d6:	85 c0                	test   eax,eax
c00046d8:	0f 85 f0 00 00 00    	jne    c00047ce <f_unlink+0x117>
c00046de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046e9:	68 00 02 00 00       	push   0x200
c00046ee:	e8 a5 11 00 00       	call   c0005898 <ff_memalloc>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	89 c3                	mov    ebx,eax
c00046f8:	b8 11 00 00 00       	mov    eax,0x11
c00046fd:	85 db                	test   ebx,ebx
c00046ff:	0f 84 c9 00 00 00    	je     c00047ce <f_unlink+0x117>
c0004705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004709:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004710:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004717:	e8 b3 ef ff ff       	call   c00036cf <follow_path>
c000471c:	85 c0                	test   eax,eax
c000471e:	0f 85 96 00 00 00    	jne    c00047ba <f_unlink+0x103>
c0004724:	b8 06 00 00 00       	mov    eax,0x6
c0004729:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000472e:	0f 88 86 00 00 00    	js     c00047ba <f_unlink+0x103>
c0004734:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004739:	f7 c5 01 00 00 00    	test   ebp,0x1
c000473f:	74 07                	je     c0004748 <f_unlink+0x91>
c0004741:	b8 07 00 00 00       	mov    eax,0x7
c0004746:	eb 72                	jmp    c00047ba <f_unlink+0x103>
c0004748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000474c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004750:	8a 07                	mov    al,BYTE PTR [edi]
c0004752:	e8 96 e7 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004757:	83 e5 10             	and    ebp,0x10
c000475a:	89 c6                	mov    esi,eax
c000475c:	75 0f                	jne    c000476d <f_unlink+0xb6>
c000475e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004762:	e8 e7 ed ff ff       	call   c000354e <dir_remove>
c0004767:	85 c0                	test   eax,eax
c0004769:	74 2f                	je     c000479a <f_unlink+0xe3>
c000476b:	eb 4d                	jmp    c00047ba <f_unlink+0x103>
c000476d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004771:	31 d2                	xor    edx,edx
c0004773:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004777:	8d 44 24 50          	lea    eax,[esp+0x50]
c000477b:	e8 c0 e8 ff ff       	call   c0003040 <dir_sdi>
c0004780:	85 c0                	test   eax,eax
c0004782:	75 36                	jne    c00047ba <f_unlink+0x103>
c0004784:	31 d2                	xor    edx,edx
c0004786:	8d 44 24 50          	lea    eax,[esp+0x50]
c000478a:	e8 a2 ec ff ff       	call   c0003431 <dir_read>
c000478f:	85 c0                	test   eax,eax
c0004791:	74 ae                	je     c0004741 <f_unlink+0x8a>
c0004793:	83 f8 04             	cmp    eax,0x4
c0004796:	75 22                	jne    c00047ba <f_unlink+0x103>
c0004798:	eb c4                	jmp    c000475e <f_unlink+0xa7>
c000479a:	85 f6                	test   esi,esi
c000479c:	75 0b                	jne    c00047a9 <f_unlink+0xf2>
c000479e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a2:	e8 0b e3 ff ff       	call   c0002ab2 <sync_fs>
c00047a7:	eb 11                	jmp    c00047ba <f_unlink+0x103>
c00047a9:	31 c9                	xor    ecx,ecx
c00047ab:	89 f2                	mov    edx,esi
c00047ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047b1:	e8 8c ea ff ff       	call   c0003242 <remove_chain>
c00047b6:	85 c0                	test   eax,eax
c00047b8:	74 e4                	je     c000479e <f_unlink+0xe7>
c00047ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047be:	83 ec 0c             	sub    esp,0xc
c00047c1:	53                   	push   ebx
c00047c2:	e8 e9 10 00 00       	call   c00058b0 <ff_memfree>
c00047c7:	83 c4 10             	add    esp,0x10
c00047ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047d4:	5b                   	pop    ebx
c00047d5:	5e                   	pop    esi
c00047d6:	5f                   	pop    edi
c00047d7:	5d                   	pop    ebp
c00047d8:	c3                   	ret    

c00047d9 <f_mkdir>:
c00047d9:	57                   	push   edi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	56                   	push   esi
c00047e0:	53                   	push   ebx
c00047e1:	83 ec 50             	sub    esp,0x50
c00047e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ec:	e8 d4 d9 ff ff       	call   c00021c5 <mount_volume>
c00047f1:	89 c3                	mov    ebx,eax
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 70 01 00 00    	jne    c000496b <f_mkdir+0x192>
c00047fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ff:	bb 11 00 00 00       	mov    ebx,0x11
c0004804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004808:	83 ec 0c             	sub    esp,0xc
c000480b:	68 00 02 00 00       	push   0x200
c0004810:	e8 83 10 00 00       	call   c0005898 <ff_memalloc>
c0004815:	83 c4 10             	add    esp,0x10
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 84 49 01 00 00    	je     c000496b <f_mkdir+0x192>
c0004822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004826:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000482a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000482d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004831:	e8 99 ee ff ff       	call   c00036cf <follow_path>
c0004836:	89 c3                	mov    ebx,eax
c0004838:	85 c0                	test   eax,eax
c000483a:	74 3e                	je     c000487a <f_mkdir+0xa1>
c000483c:	83 f8 04             	cmp    eax,0x4
c000483f:	75 3e                	jne    c000487f <f_mkdir+0xa6>
c0004841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000484b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000484f:	e8 b4 e8 ff ff       	call   c0003108 <create_chain>
c0004854:	89 c6                	mov    esi,eax
c0004856:	85 c0                	test   eax,eax
c0004858:	74 0c                	je     c0004866 <f_mkdir+0x8d>
c000485a:	bb 02 00 00 00       	mov    ebx,0x2
c000485f:	83 f8 01             	cmp    eax,0x1
c0004862:	74 07                	je     c000486b <f_mkdir+0x92>
c0004864:	eb 2a                	jmp    c0004890 <f_mkdir+0xb7>
c0004866:	bb 07 00 00 00       	mov    ebx,0x7
c000486b:	31 c9                	xor    ecx,ecx
c000486d:	89 f2                	mov    edx,esi
c000486f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004873:	e8 ca e9 ff ff       	call   c0003242 <remove_chain>
c0004878:	eb 05                	jmp    c000487f <f_mkdir+0xa6>
c000487a:	bb 08 00 00 00       	mov    ebx,0x8
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	57                   	push   edi
c0004883:	e8 28 10 00 00       	call   c00058b0 <ff_memfree>
c0004888:	83 c4 10             	add    esp,0x10
c000488b:	e9 db 00 00 00       	jmp    c000496b <f_mkdir+0x192>
c0004890:	bb 01 00 00 00       	mov    ebx,0x1
c0004895:	83 f8 ff             	cmp    eax,0xffffffff
c0004898:	74 d1                	je     c000486b <f_mkdir+0x92>
c000489a:	89 f2                	mov    edx,esi
c000489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a0:	e8 73 dd ff ff       	call   c0002618 <dir_clear>
c00048a5:	89 c3                	mov    ebx,eax
c00048a7:	85 c0                	test   eax,eax
c00048a9:	75 c0                	jne    c000486b <f_mkdir+0x92>
c00048ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00048b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048b4:	ba 20 00 00 00       	mov    edx,0x20
c00048b9:	83 c0 34             	add    eax,0x34
c00048bc:	e8 cc d2 ff ff       	call   c0001b8d <mem_set>
c00048c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00048ca:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00048ce:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048d2:	83 c0 4a             	add    eax,0x4a
c00048d5:	e8 9b d2 ff ff       	call   c0001b75 <st_dword>
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	89 f1                	mov    ecx,esi
c00048e0:	8d 50 34             	lea    edx,[eax+0x34]
c00048e3:	e8 2e e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c00048e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ec:	b9 20 00 00 00       	mov    ecx,0x20
c00048f1:	8d 50 34             	lea    edx,[eax+0x34]
c00048f4:	83 c0 54             	add    eax,0x54
c00048f7:	e8 7c d2 ff ff       	call   c0001b78 <mem_cpy>
c00048fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004900:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004904:	8d 50 54             	lea    edx,[eax+0x54]
c0004907:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000490b:	e8 06 e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004918:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491c:	e8 42 ee ff ff       	call   c0003763 <dir_register>
c0004921:	89 c3                	mov    ebx,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 40 ff ff ff    	jne    c000486b <f_mkdir+0x92>
c000492b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000492f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004934:	83 c0 16             	add    eax,0x16
c0004937:	e8 39 d2 ff ff       	call   c0001b75 <st_dword>
c000493c:	89 f1                	mov    ecx,esi
c000493e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004946:	e8 cb e5 ff ff       	call   c0002f16 <st_clust.isra.1>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004957:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	e8 4e e1 ff ff       	call   c0002ab2 <sync_fs>
c0004964:	89 c3                	mov    ebx,eax
c0004966:	e9 14 ff ff ff       	jmp    c000487f <f_mkdir+0xa6>
c000496b:	83 c4 50             	add    esp,0x50
c000496e:	89 d8                	mov    eax,ebx
c0004970:	5b                   	pop    ebx
c0004971:	5e                   	pop    esi
c0004972:	5f                   	pop    edi
c0004973:	c3                   	ret    

c0004974 <f_rename>:
c0004974:	57                   	push   edi
c0004975:	56                   	push   esi
c0004976:	53                   	push   ebx
c0004977:	81 ec a0 00 00 00    	sub    esp,0xa0
c000497d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004984:	e8 f2 d5 ff ff       	call   c0001f7b <get_ldnumber>
c0004989:	b9 02 00 00 00       	mov    ecx,0x2
c000498e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004992:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004999:	e8 27 d8 ff ff       	call   c00021c5 <mount_volume>
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 7a 01 00 00    	jne    c0004b20 <f_rename+0x1ac>
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	83 ec 0c             	sub    esp,0xc
c00049ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00049b1:	68 00 02 00 00       	push   0x200
c00049b6:	e8 dd 0e 00 00       	call   c0005898 <ff_memalloc>
c00049bb:	83 c4 10             	add    esp,0x10
c00049be:	89 c6                	mov    esi,eax
c00049c0:	b8 11 00 00 00       	mov    eax,0x11
c00049c5:	85 f6                	test   esi,esi
c00049c7:	0f 84 53 01 00 00    	je     c0004b20 <f_rename+0x1ac>
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049db:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049df:	e8 eb ec ff ff       	call   c00036cf <follow_path>
c00049e4:	85 c0                	test   eax,eax
c00049e6:	0f 85 20 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049ec:	b8 06 00 00 00       	mov    eax,0x6
c00049f1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049f6:	0f 85 10 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049fc:	b9 20 00 00 00       	mov    ecx,0x20
c0004a01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a09:	e8 6a d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a0e:	b9 30 00 00 00       	mov    ecx,0x30
c0004a13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004a17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a1b:	e8 58 d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a20:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004a27:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2b:	e8 9f ec ff ff       	call   c00036cf <follow_path>
c0004a30:	85 c0                	test   eax,eax
c0004a32:	75 20                	jne    c0004a54 <f_rename+0xe0>
c0004a34:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a38:	b8 08 00 00 00       	mov    eax,0x8
c0004a3d:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a41:	0f 85 c5 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a4b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a52:	eb 03                	jmp    c0004a57 <f_rename+0xe3>
c0004a54:	83 f8 04             	cmp    eax,0x4
c0004a57:	0f 85 af 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a61:	e8 fd ec ff ff       	call   c0003763 <dir_register>
c0004a66:	85 c0                	test   eax,eax
c0004a68:	0f 85 9e 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a6e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a75:	b9 13 00 00 00       	mov    ecx,0x13
c0004a7a:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a7d:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a81:	e8 f2 d0 ff ff       	call   c0001b78 <mem_cpy>
c0004a86:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a8a:	a8 10                	test   al,0x10
c0004a8c:	75 03                	jne    c0004a91 <f_rename+0x11d>
c0004a8e:	83 c8 20             	or     eax,0x20
c0004a91:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a9c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004aa0:	74 54                	je     c0004af6 <f_rename+0x182>
c0004aa2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004aa6:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004aaa:	74 4a                	je     c0004af6 <f_rename+0x182>
c0004aac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab0:	89 da                	mov    edx,ebx
c0004ab2:	8a 07                	mov    al,BYTE PTR [edi]
c0004ab4:	e8 34 e4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004ab9:	89 c2                	mov    edx,eax
c0004abb:	89 f8                	mov    eax,edi
c0004abd:	e8 d0 d2 ff ff       	call   c0001d92 <clst2sect>
c0004ac2:	89 c2                	mov    edx,eax
c0004ac4:	b8 02 00 00 00       	mov    eax,0x2
c0004ac9:	85 d2                	test   edx,edx
c0004acb:	74 3f                	je     c0004b0c <f_rename+0x198>
c0004acd:	89 f8                	mov    eax,edi
c0004acf:	e8 9e d5 ff ff       	call   c0002072 <move_window>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 34                	jne    c0004b0c <f_rename+0x198>
c0004ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004adc:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ae0:	75 14                	jne    c0004af6 <f_rename+0x182>
c0004ae2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ae5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ae9:	e8 28 e4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004af6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afa:	e8 4f ea ff ff       	call   c000354e <dir_remove>
c0004aff:	85 c0                	test   eax,eax
c0004b01:	75 09                	jne    c0004b0c <f_rename+0x198>
c0004b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b07:	e8 a6 df ff ff       	call   c0002ab2 <sync_fs>
c0004b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b10:	83 ec 0c             	sub    esp,0xc
c0004b13:	56                   	push   esi
c0004b14:	e8 97 0d 00 00       	call   c00058b0 <ff_memfree>
c0004b19:	83 c4 10             	add    esp,0x10
c0004b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b20:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004b26:	5b                   	pop    ebx
c0004b27:	5e                   	pop    esi
c0004b28:	5f                   	pop    edi
c0004b29:	c3                   	ret    

c0004b2a <f_chmod>:
c0004b2a:	57                   	push   edi
c0004b2b:	b9 02 00 00 00       	mov    ecx,0x2
c0004b30:	56                   	push   esi
c0004b31:	53                   	push   ebx
c0004b32:	83 ec 50             	sub    esp,0x50
c0004b35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b39:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b45:	e8 7b d6 ff ff       	call   c00021c5 <mount_volume>
c0004b4a:	85 c0                	test   eax,eax
c0004b4c:	75 7e                	jne    c0004bcc <f_chmod+0xa2>
c0004b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b52:	83 ec 0c             	sub    esp,0xc
c0004b55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b59:	68 00 02 00 00       	push   0x200
c0004b5e:	e8 35 0d 00 00       	call   c0005898 <ff_memalloc>
c0004b63:	83 c4 10             	add    esp,0x10
c0004b66:	89 c6                	mov    esi,eax
c0004b68:	b8 11 00 00 00       	mov    eax,0x11
c0004b6d:	85 f6                	test   esi,esi
c0004b6f:	74 5b                	je     c0004bcc <f_chmod+0xa2>
c0004b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b75:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b79:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b80:	e8 4a eb ff ff       	call   c00036cf <follow_path>
c0004b85:	85 c0                	test   eax,eax
c0004b87:	75 2f                	jne    c0004bb8 <f_chmod+0x8e>
c0004b89:	b8 06 00 00 00       	mov    eax,0x6
c0004b8e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b93:	75 23                	jne    c0004bb8 <f_chmod+0x8e>
c0004b95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b99:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b9c:	21 fb                	and    ebx,edi
c0004b9e:	83 e3 27             	and    ebx,0x27
c0004ba1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004ba4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb3:	e8 fa de ff ff       	call   c0002ab2 <sync_fs>
c0004bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	56                   	push   esi
c0004bc0:	e8 eb 0c 00 00       	call   c00058b0 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcc:	83 c4 50             	add    esp,0x50
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	c3                   	ret    

c0004bd3 <f_utime>:
c0004bd3:	56                   	push   esi
c0004bd4:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd9:	53                   	push   ebx
c0004bda:	83 ec 54             	sub    esp,0x54
c0004bdd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004be1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004be5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004be9:	e8 d7 d5 ff ff       	call   c00021c5 <mount_volume>
c0004bee:	85 c0                	test   eax,eax
c0004bf0:	0f 85 85 00 00 00    	jne    c0004c7b <f_utime+0xa8>
c0004bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bfa:	83 ec 0c             	sub    esp,0xc
c0004bfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c01:	68 00 02 00 00       	push   0x200
c0004c06:	e8 8d 0c 00 00       	call   c0005898 <ff_memalloc>
c0004c0b:	83 c4 10             	add    esp,0x10
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	b8 11 00 00 00       	mov    eax,0x11
c0004c15:	85 db                	test   ebx,ebx
c0004c17:	74 62                	je     c0004c7b <f_utime+0xa8>
c0004c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c21:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c28:	e8 a2 ea ff ff       	call   c00036cf <follow_path>
c0004c2d:	85 c0                	test   eax,eax
c0004c2f:	75 36                	jne    c0004c67 <f_utime+0x94>
c0004c31:	b8 06 00 00 00       	mov    eax,0x6
c0004c36:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c3b:	75 2a                	jne    c0004c67 <f_utime+0x94>
c0004c3d:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c41:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c45:	c1 e2 10             	shl    edx,0x10
c0004c48:	09 c2                	or     edx,eax
c0004c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c4e:	83 c0 16             	add    eax,0x16
c0004c51:	e8 1f cf ff ff       	call   c0001b75 <st_dword>
c0004c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c62:	e8 4b de ff ff       	call   c0002ab2 <sync_fs>
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	83 ec 0c             	sub    esp,0xc
c0004c6e:	53                   	push   ebx
c0004c6f:	e8 3c 0c 00 00       	call   c00058b0 <ff_memfree>
c0004c74:	83 c4 10             	add    esp,0x10
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	83 c4 54             	add    esp,0x54
c0004c7e:	5b                   	pop    ebx
c0004c7f:	5e                   	pop    esi
c0004c80:	c3                   	ret    

c0004c81 <f_getlabel>:
c0004c81:	55                   	push   ebp
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	57                   	push   edi
c0004c85:	56                   	push   esi
c0004c86:	53                   	push   ebx
c0004c87:	83 ec 5c             	sub    esp,0x5c
c0004c8a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c8e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c92:	e8 2e d5 ff ff       	call   c00021c5 <mount_volume>
c0004c97:	89 c6                	mov    esi,eax
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	0f 85 27 01 00 00    	jne    c0004dc8 <f_getlabel+0x147>
c0004ca1:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ca6:	0f 84 d1 00 00 00    	je     c0004d7d <f_getlabel+0xfc>
c0004cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cb6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004cbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc2:	e8 79 e3 ff ff       	call   c0003040 <dir_sdi>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 a2 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ccf:	ba 01 00 00 00       	mov    edx,0x1
c0004cd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cd8:	e8 54 e7 ff ff       	call   c0003431 <dir_read>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	0f 85 8c 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ce5:	31 db                	xor    ebx,ebx
c0004ce7:	31 c9                	xor    ecx,ecx
c0004ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ced:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cf0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cf5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cfe:	e8 ca ce ff ff       	call   c0001bcd <dbc_1st>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 16                	je     c0004d1d <f_getlabel+0x9c>
c0004d07:	83 ff 0b             	cmp    edi,0xb
c0004d0a:	74 11                	je     c0004d1d <f_getlabel+0x9c>
c0004d0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d15:	8d 79 02             	lea    edi,[ecx+0x2]
c0004d18:	c1 e0 08             	shl    eax,0x8
c0004d1b:	09 c2                	or     edx,eax
c0004d1d:	0f b7 d2             	movzx  edx,dx
c0004d20:	50                   	push   eax
c0004d21:	50                   	push   eax
c0004d22:	68 b5 01 00 00       	push   0x1b5
c0004d27:	52                   	push   edx
c0004d28:	e8 3b 0c 00 00       	call   c0005968 <ff_oem2uni>
c0004d2d:	83 c4 10             	add    esp,0x10
c0004d30:	66 85 c0             	test   ax,ax
c0004d33:	74 25                	je     c0004d5a <f_getlabel+0xd9>
c0004d35:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d39:	0f b7 c0             	movzx  eax,ax
c0004d3c:	01 da                	add    edx,ebx
c0004d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0004d43:	e8 51 cf ff ff       	call   c0001c99 <put_utf>
c0004d48:	84 c0                	test   al,al
c0004d4a:	74 0e                	je     c0004d5a <f_getlabel+0xd9>
c0004d4c:	0f b6 c0             	movzx  eax,al
c0004d4f:	01 c3                	add    ebx,eax
c0004d51:	83 ff 0b             	cmp    edi,0xb
c0004d54:	74 06                	je     c0004d5c <f_getlabel+0xdb>
c0004d56:	89 f9                	mov    ecx,edi
c0004d58:	eb 8f                	jmp    c0004ce9 <f_getlabel+0x68>
c0004d5a:	31 db                	xor    ebx,ebx
c0004d5c:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d60:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d63:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d67:	74 14                	je     c0004d7d <f_getlabel+0xfc>
c0004d69:	4b                   	dec    ebx
c0004d6a:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d6d:	74 f1                	je     c0004d60 <f_getlabel+0xdf>
c0004d6f:	eb 0c                	jmp    c0004d7d <f_getlabel+0xfc>
c0004d71:	83 f8 04             	cmp    eax,0x4
c0004d74:	75 50                	jne    c0004dc6 <f_getlabel+0x145>
c0004d76:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d82:	74 44                	je     c0004dc8 <f_getlabel+0x147>
c0004d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d8b:	e8 e2 d2 ff ff       	call   c0002072 <move_window>
c0004d90:	89 c6                	mov    esi,eax
c0004d92:	85 c0                	test   eax,eax
c0004d94:	75 32                	jne    c0004dc8 <f_getlabel+0x147>
c0004d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d9a:	b8 43 00 00 00       	mov    eax,0x43
c0004d9f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004da1:	80 f9 03             	cmp    cl,0x3
c0004da4:	74 0f                	je     c0004db5 <f_getlabel+0x134>
c0004da6:	31 c0                	xor    eax,eax
c0004da8:	80 f9 04             	cmp    cl,0x4
c0004dab:	0f 94 c0             	sete   al
c0004dae:	48                   	dec    eax
c0004daf:	83 e0 c3             	and    eax,0xffffffc3
c0004db2:	83 c0 64             	add    eax,0x64
c0004db5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004db9:	e8 9b cd ff ff       	call   c0001b59 <ld_dword>
c0004dbe:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004dc2:	89 07                	mov    DWORD PTR [edi],eax
c0004dc4:	eb 02                	jmp    c0004dc8 <f_getlabel+0x147>
c0004dc6:	89 c6                	mov    esi,eax
c0004dc8:	83 c4 5c             	add    esp,0x5c
c0004dcb:	89 f0                	mov    eax,esi
c0004dcd:	5b                   	pop    ebx
c0004dce:	5e                   	pop    esi
c0004dcf:	5f                   	pop    edi
c0004dd0:	5d                   	pop    ebp
c0004dd1:	c3                   	ret    

c0004dd2 <f_setlabel>:
c0004dd2:	56                   	push   esi
c0004dd3:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd8:	53                   	push   ebx
c0004dd9:	83 ec 54             	sub    esp,0x54
c0004ddc:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004de0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de4:	e8 dc d3 ff ff       	call   c00021c5 <mount_volume>
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	85 c0                	test   eax,eax
c0004ded:	0f 85 67 01 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004df8:	ba 20 00 00 00       	mov    edx,0x20
c0004dfd:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004e01:	31 db                	xor    ebx,ebx
c0004e03:	e8 85 cd ff ff       	call   c0001b8d <mem_set>
c0004e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e0f:	76 5b                	jbe    c0004e6c <f_setlabel+0x9a>
c0004e11:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e15:	e8 b9 cd ff ff       	call   c0001bd3 <tchar2uni>
c0004e1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0004e1f:	76 0a                	jbe    c0004e2b <f_setlabel+0x59>
c0004e21:	be 06 00 00 00       	mov    esi,0x6
c0004e26:	e9 2f 01 00 00       	jmp    c0004f5a <f_setlabel+0x188>
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	50                   	push   eax
c0004e2f:	e8 ac 0b 00 00       	call   c00059e0 <ff_wtoupper>
c0004e34:	5a                   	pop    edx
c0004e35:	59                   	pop    ecx
c0004e36:	68 b5 01 00 00       	push   0x1b5
c0004e3b:	50                   	push   eax
c0004e3c:	e8 87 0a 00 00       	call   c00058c8 <ff_uni2oem>
c0004e41:	83 c4 10             	add    esp,0x10
c0004e44:	89 c6                	mov    esi,eax
c0004e46:	66 85 c0             	test   ax,ax
c0004e49:	74 d6                	je     c0004e21 <f_setlabel+0x4f>
c0004e4b:	0f b7 d0             	movzx  edx,ax
c0004e4e:	b8 30 c6 01 c0       	mov    eax,0xc001c630
c0004e53:	e8 63 cd ff ff       	call   c0001bbb <chk_chr>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 c5                	jne    c0004e21 <f_setlabel+0x4f>
c0004e5c:	66 81 fe ff 00       	cmp    si,0xff
c0004e61:	0f 87 c9 00 00 00    	ja     c0004f30 <f_setlabel+0x15e>
c0004e67:	e9 e4 00 00 00       	jmp    c0004f50 <f_setlabel+0x17e>
c0004e6c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e71:	74 ae                	je     c0004e21 <f_setlabel+0x4f>
c0004e73:	85 db                	test   ebx,ebx
c0004e75:	74 0e                	je     c0004e85 <f_setlabel+0xb3>
c0004e77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e7a:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e7f:	75 04                	jne    c0004e85 <f_setlabel+0xb3>
c0004e81:	89 c3                	mov    ebx,eax
c0004e83:	eb ee                	jmp    c0004e73 <f_setlabel+0xa1>
c0004e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 a0 e1 ff ff       	call   c0003040 <dir_sdi>
c0004ea0:	89 c6                	mov    esi,eax
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	0f 85 b0 00 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004eaa:	ba 01 00 00 00       	mov    edx,0x1
c0004eaf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb3:	e8 79 e5 ff ff       	call   c0003431 <dir_read>
c0004eb8:	85 c0                	test   eax,eax
c0004eba:	75 18                	jne    c0004ed4 <f_setlabel+0x102>
c0004ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ec0:	85 db                	test   ebx,ebx
c0004ec2:	74 0b                	je     c0004ecf <f_setlabel+0xfd>
c0004ec4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ec9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ecd:	eb 47                	jmp    c0004f16 <f_setlabel+0x144>
c0004ecf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ed2:	eb 47                	jmp    c0004f1b <f_setlabel+0x149>
c0004ed4:	83 f8 04             	cmp    eax,0x4
c0004ed7:	75 53                	jne    c0004f2c <f_setlabel+0x15a>
c0004ed9:	85 db                	test   ebx,ebx
c0004edb:	74 7d                	je     c0004f5a <f_setlabel+0x188>
c0004edd:	ba 01 00 00 00       	mov    edx,0x1
c0004ee2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee6:	e8 e5 e4 ff ff       	call   c00033d0 <dir_alloc>
c0004eeb:	89 c6                	mov    esi,eax
c0004eed:	85 c0                	test   eax,eax
c0004eef:	75 69                	jne    c0004f5a <f_setlabel+0x188>
c0004ef1:	b9 20 00 00 00       	mov    ecx,0x20
c0004ef6:	31 d2                	xor    edx,edx
c0004ef8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004efc:	e8 8c cc ff ff       	call   c0001b8d <mem_set>
c0004f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f05:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f0a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004f0e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004f12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f16:	e8 5d cc ff ff       	call   c0001b78 <mem_cpy>
c0004f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f27:	e8 86 db ff ff       	call   c0002ab2 <sync_fs>
c0004f2c:	89 c6                	mov    esi,eax
c0004f2e:	eb 2a                	jmp    c0004f5a <f_setlabel+0x188>
c0004f30:	83 fb 09             	cmp    ebx,0x9
c0004f33:	0f 87 e8 fe ff ff    	ja     c0004e21 <f_setlabel+0x4f>
c0004f39:	89 f0                	mov    eax,esi
c0004f3b:	66 c1 e8 08          	shr    ax,0x8
c0004f3f:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f43:	43                   	inc    ebx
c0004f44:	89 f0                	mov    eax,esi
c0004f46:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f4a:	43                   	inc    ebx
c0004f4b:	e9 b8 fe ff ff       	jmp    c0004e08 <f_setlabel+0x36>
c0004f50:	83 fb 0a             	cmp    ebx,0xa
c0004f53:	76 ef                	jbe    c0004f44 <f_setlabel+0x172>
c0004f55:	e9 c7 fe ff ff       	jmp    c0004e21 <f_setlabel+0x4f>
c0004f5a:	89 f0                	mov    eax,esi
c0004f5c:	83 c4 54             	add    esp,0x54
c0004f5f:	5b                   	pop    ebx
c0004f60:	5e                   	pop    esi
c0004f61:	c3                   	ret    

c0004f62 <f_expand>:
c0004f62:	55                   	push   ebp
c0004f63:	57                   	push   edi
c0004f64:	56                   	push   esi
c0004f65:	53                   	push   ebx
c0004f66:	83 ec 2c             	sub    esp,0x2c
c0004f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f75:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f79:	89 d8                	mov    eax,ebx
c0004f7b:	e8 48 d0 ff ff       	call   c0001fc8 <validate>
c0004f80:	89 c6                	mov    esi,eax
c0004f82:	85 c0                	test   eax,eax
c0004f84:	0f 85 2e 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f8a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	0f 85 22 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f96:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f9b:	75 0a                	jne    c0004fa7 <f_expand+0x45>
c0004f9d:	be 07 00 00 00       	mov    esi,0x7
c0004fa2:	e9 11 01 00 00       	jmp    c00050b8 <f_expand+0x156>
c0004fa7:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004fab:	75 f0                	jne    c0004f9d <f_expand+0x3b>
c0004fad:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004fb1:	74 ea                	je     c0004f9d <f_expand+0x3b>
c0004fb3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004fb7:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004fbb:	c1 e1 09             	shl    ecx,0x9
c0004fbe:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004fc1:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004fc5:	0f 95 c0             	setne  al
c0004fc8:	31 d2                	xor    edx,edx
c0004fca:	0f b6 c0             	movzx  eax,al
c0004fcd:	89 c7                	mov    edi,eax
c0004fcf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fd3:	f7 f1                	div    ecx
c0004fd5:	01 f8                	add    eax,edi
c0004fd7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fde:	83 ff 01             	cmp    edi,0x1
c0004fe1:	76 05                	jbe    c0004fe8 <f_expand+0x86>
c0004fe3:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fe6:	77 05                	ja     c0004fed <f_expand+0x8b>
c0004fe8:	bf 02 00 00 00       	mov    edi,0x2
c0004fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004ff0:	89 fd                	mov    ebp,edi
c0004ff2:	31 c9                	xor    ecx,ecx
c0004ff4:	89 ea                	mov    edx,ebp
c0004ff6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004ffc:	45                   	inc    ebp
c0004ffd:	e8 3c df ff ff       	call   c0002f3e <get_fat.isra.2>
c0005002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000500a:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000500d:	77 05                	ja     c0005014 <f_expand+0xb2>
c000500f:	bd 02 00 00 00       	mov    ebp,0x2
c0005014:	83 f8 01             	cmp    eax,0x1
c0005017:	74 20                	je     c0005039 <f_expand+0xd7>
c0005019:	83 f8 ff             	cmp    eax,0xffffffff
c000501c:	74 22                	je     c0005040 <f_expand+0xde>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 09                	jne    c000502b <f_expand+0xc9>
c0005022:	41                   	inc    ecx
c0005023:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005027:	75 07                	jne    c0005030 <f_expand+0xce>
c0005029:	eb 1c                	jmp    c0005047 <f_expand+0xe5>
c000502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000502e:	31 c9                	xor    ecx,ecx
c0005030:	39 fd                	cmp    ebp,edi
c0005032:	75 c0                	jne    c0004ff4 <f_expand+0x92>
c0005034:	e9 64 ff ff ff       	jmp    c0004f9d <f_expand+0x3b>
c0005039:	be 02 00 00 00       	mov    esi,0x2
c000503e:	eb 78                	jmp    c00050b8 <f_expand+0x156>
c0005040:	be 01 00 00 00       	mov    esi,0x1
c0005045:	eb 71                	jmp    c00050b8 <f_expand+0x156>
c0005047:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000504c:	74 2b                	je     c0005079 <f_expand+0x117>
c000504e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005051:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 24                	je     c000507d <f_expand+0x11b>
c0005059:	83 c9 ff             	or     ecx,0xffffffff
c000505c:	83 fd 01             	cmp    ebp,0x1
c000505f:	74 03                	je     c0005064 <f_expand+0x102>
c0005061:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005064:	89 fa                	mov    edx,edi
c0005066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506a:	e8 59 d4 ff ff       	call   c00024c8 <put_fat>
c000506f:	85 c0                	test   eax,eax
c0005071:	75 43                	jne    c00050b6 <f_expand+0x154>
c0005073:	89 f8                	mov    eax,edi
c0005075:	4d                   	dec    ebp
c0005076:	47                   	inc    edi
c0005077:	eb dc                	jmp    c0005055 <f_expand+0xf3>
c0005079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000507c:	48                   	dec    eax
c000507d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005081:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005086:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005089:	74 2d                	je     c00050b8 <f_expand+0x156>
c000508b:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000508f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005099:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000509c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000509f:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00050a2:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00050a5:	39 c8                	cmp    eax,ecx
c00050a7:	77 0f                	ja     c00050b8 <f_expand+0x156>
c00050a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00050ad:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00050b1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050b4:	eb 02                	jmp    c00050b8 <f_expand+0x156>
c00050b6:	89 c6                	mov    esi,eax
c00050b8:	83 c4 2c             	add    esp,0x2c
c00050bb:	89 f0                	mov    eax,esi
c00050bd:	5b                   	pop    ebx
c00050be:	5e                   	pop    esi
c00050bf:	5f                   	pop    edi
c00050c0:	5d                   	pop    ebp
c00050c1:	c3                   	ret    

c00050c2 <f_mkfs>:
c00050c2:	55                   	push   ebp
c00050c3:	57                   	push   edi
c00050c4:	bf 0b 00 00 00       	mov    edi,0xb
c00050c9:	56                   	push   esi
c00050ca:	53                   	push   ebx
c00050cb:	83 ec 4c             	sub    esp,0x4c
c00050ce:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00050d2:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00050d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050da:	e8 9c ce ff ff       	call   c0001f7b <get_ldnumber>
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 88 a6 07 00 00    	js     c000588d <f_mkfs+0x7cb>
c00050e7:	8b 14 85 40 f5 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0ac0]
c00050ee:	85 d2                	test   edx,edx
c00050f0:	74 03                	je     c00050f5 <f_mkfs+0x33>
c00050f2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00050f5:	85 db                	test   ebx,ebx
c00050f7:	75 05                	jne    c00050fe <f_mkfs+0x3c>
c00050f9:	bb 20 c6 01 c0       	mov    ebx,0xc001c620
c00050fe:	83 ec 0c             	sub    esp,0xc
c0005101:	0f b6 c0             	movzx  eax,al
c0005104:	bf 03 00 00 00       	mov    edi,0x3
c0005109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000510d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005111:	e8 e8 c9 ff ff       	call   c0001afe <disk_initialize>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	a8 01                	test   al,0x1
c000511b:	0f 85 6c 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c0005121:	bf 0a 00 00 00       	mov    edi,0xa
c0005126:	a8 04                	test   al,0x4
c0005128:	0f 85 5f 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c000512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005135:	85 c0                	test   eax,eax
c0005137:	75 20                	jne    c0005159 <f_mkfs+0x97>
c0005139:	51                   	push   ecx
c000513a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000513e:	50                   	push   eax
c000513f:	6a 03                	push   0x3
c0005141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005145:	e8 e3 c9 ff ff       	call   c0001b2d <disk_ioctl>
c000514a:	83 c4 10             	add    esp,0x10
c000514d:	85 c0                	test   eax,eax
c000514f:	74 08                	je     c0005159 <f_mkfs+0x97>
c0005151:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000515d:	8d 42 ff             	lea    eax,[edx-0x1]
c0005160:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005165:	77 04                	ja     c000516b <f_mkfs+0xa9>
c0005167:	85 c2                	test   edx,eax
c0005169:	74 08                	je     c0005173 <f_mkfs+0xb1>
c000516b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005173:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005176:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000517a:	48                   	dec    eax
c000517b:	3c 01                	cmp    al,0x1
c000517d:	76 05                	jbe    c0005184 <f_mkfs+0xc2>
c000517f:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518b:	48                   	dec    eax
c000518c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005191:	77 07                	ja     c000519a <f_mkfs+0xd8>
c0005193:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005198:	74 08                	je     c00051a2 <f_mkfs+0xe0>
c000519a:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00051a2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00051a5:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00051ab:	77 07                	ja     c00051b4 <f_mkfs+0xf2>
c00051ad:	8d 47 ff             	lea    eax,[edi-0x1]
c00051b0:	85 f8                	test   eax,edi
c00051b2:	74 02                	je     c00051b6 <f_mkfs+0xf4>
c00051b4:	31 ff                	xor    edi,edi
c00051b6:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00051be:	77 0a                	ja     c00051ca <f_mkfs+0x108>
c00051c0:	bf 11 00 00 00       	mov    edi,0x11
c00051c5:	e9 c3 06 00 00       	jmp    c000588d <f_mkfs+0x7cb>
c00051ca:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00051cc:	89 ee                	mov    esi,ebp
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	75 1b                	jne    c00051ed <f_mkfs+0x12b>
c00051d2:	83 ec 0c             	sub    esp,0xc
c00051d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00051d9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00051de:	50                   	push   eax
c00051df:	e8 b4 06 00 00       	call   c0005898 <ff_memalloc>
c00051e4:	83 c4 10             	add    esp,0x10
c00051e7:	89 c6                	mov    esi,eax
c00051e9:	85 c0                	test   eax,eax
c00051eb:	74 d3                	je     c00051c0 <f_mkfs+0xfe>
c00051ed:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00051f5:	52                   	push   edx
c00051f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00051fa:	50                   	push   eax
c00051fb:	6a 01                	push   0x1
c00051fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005201:	e8 27 c9 ff ff       	call   c0001b2d <disk_ioctl>
c0005206:	83 c4 10             	add    esp,0x10
c0005209:	85 c0                	test   eax,eax
c000520b:	0f 85 25 06 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005211:	88 d8                	mov    al,bl
c0005213:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000521b:	24 08                	and    al,0x8
c000521d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005221:	75 18                	jne    c000523b <f_mkfs+0x179>
c0005223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005227:	83 f8 3f             	cmp    eax,0x3f
c000522a:	76 0f                	jbe    c000523b <f_mkfs+0x179>
c000522c:	83 e8 3f             	sub    eax,0x3f
c000522f:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005237:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000523b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000523f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005243:	83 f8 7f             	cmp    eax,0x7f
c0005246:	0f 86 52 02 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c000524c:	b9 80 00 00 00       	mov    ecx,0x80
c0005251:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005257:	77 05                	ja     c000525e <f_mkfs+0x19c>
c0005259:	89 f9                	mov    ecx,edi
c000525b:	c1 e9 09             	shr    ecx,0x9
c000525e:	88 d8                	mov    al,bl
c0005260:	83 e0 01             	and    eax,0x1
c0005263:	80 e3 02             	and    bl,0x2
c0005266:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000526a:	74 0a                	je     c0005276 <f_mkfs+0x1b4>
c000526c:	84 c0                	test   al,al
c000526e:	0f 84 4c 01 00 00    	je     c00053c0 <f_mkfs+0x2fe>
c0005274:	eb 38                	jmp    c00052ae <f_mkfs+0x1ec>
c0005276:	bf 13 00 00 00       	mov    edi,0x13
c000527b:	84 c0                	test   al,al
c000527d:	75 2f                	jne    c00052ae <f_mkfs+0x1ec>
c000527f:	e9 c9 05 00 00       	jmp    c000584d <f_mkfs+0x78b>
c0005284:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005289:	0f 85 08 02 00 00    	jne    c0005497 <f_mkfs+0x3d5>
c000528f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005294:	0f 86 e1 01 00 00    	jbe    c000547b <f_mkfs+0x3b9>
c000529a:	85 c9                	test   ecx,ecx
c000529c:	0f 85 bd 05 00 00    	jne    c000585f <f_mkfs+0x79d>
c00052a2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052a5:	83 f9 40             	cmp    ecx,0x40
c00052a8:	0f 87 c1 05 00 00    	ja     c000586f <f_mkfs+0x7ad>
c00052ae:	89 cf                	mov    edi,ecx
c00052b0:	85 c9                	test   ecx,ecx
c00052b2:	75 1d                	jne    c00052d1 <f_mkfs+0x20f>
c00052b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00052b8:	ba 00 c6 01 c0       	mov    edx,0xc001c600
c00052bd:	c1 eb 0c             	shr    ebx,0xc
c00052c0:	bf 01 00 00 00       	mov    edi,0x1
c00052c5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00052c8:	66 85 c0             	test   ax,ax
c00052cb:	0f 85 5f 01 00 00    	jne    c0005430 <f_mkfs+0x36e>
c00052d1:	31 d2                	xor    edx,edx
c00052d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00052d7:	f7 f7                	div    edi
c00052d9:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052de:	0f 86 5e 01 00 00    	jbe    c0005442 <f_mkfs+0x380>
c00052e4:	83 c0 02             	add    eax,0x2
c00052e7:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00052ec:	01 c0                	add    eax,eax
c00052ee:	05 ff 01 00 00       	add    eax,0x1ff
c00052f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00052fb:	c1 e8 09             	shr    eax,0x9
c00052fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005306:	c1 e0 05             	shl    eax,0x5
c0005309:	c1 e8 09             	shr    eax,0x9
c000530c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005329:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000532e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005332:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000533a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000533e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005342:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005346:	f7 d8                	neg    eax
c0005348:	21 c3                	and    ebx,eax
c000534a:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c000534e:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005353:	0f 85 fc 00 00 00    	jne    c0005455 <f_mkfs+0x393>
c0005359:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c000535d:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005361:	89 f8                	mov    eax,edi
c0005363:	c1 e0 04             	shl    eax,0x4
c0005366:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000536a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000536e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005372:	0f 82 26 01 00 00    	jb     c000549e <f_mkfs+0x3dc>
c0005378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000537c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005380:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005384:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005389:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000538d:	29 d0                	sub    eax,edx
c000538f:	31 d2                	xor    edx,edx
c0005391:	f7 f7                	div    edi
c0005393:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 e4 fe ff ff    	jne    c0005284 <f_mkfs+0x1c2>
c00053a0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053a5:	0f 87 02 01 00 00    	ja     c00054ad <f_mkfs+0x3eb>
c00053ab:	85 c9                	test   ecx,ecx
c00053ad:	0f 85 eb 00 00 00    	jne    c000549e <f_mkfs+0x3dc>
c00053b3:	83 ff 01             	cmp    edi,0x1
c00053b6:	0f 86 e2 00 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c00053bc:	89 f9                	mov    ecx,edi
c00053be:	d1 e9                	shr    ecx,1
c00053c0:	89 cb                	mov    ebx,ecx
c00053c2:	85 c9                	test   ecx,ecx
c00053c4:	75 26                	jne    c00053ec <f_mkfs+0x32a>
c00053c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00053ca:	ba 10 c6 01 c0       	mov    edx,0xc001c610
c00053cf:	c1 eb 11             	shr    ebx,0x11
c00053d2:	b9 01 00 00 00       	mov    ecx,0x1
c00053d7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00053da:	66 85 c0             	test   ax,ax
c00053dd:	74 0b                	je     c00053ea <f_mkfs+0x328>
c00053df:	83 c2 02             	add    edx,0x2
c00053e2:	39 d8                	cmp    eax,ebx
c00053e4:	77 04                	ja     c00053ea <f_mkfs+0x328>
c00053e6:	01 c9                	add    ecx,ecx
c00053e8:	eb ed                	jmp    c00053d7 <f_mkfs+0x315>
c00053ea:	31 db                	xor    ebx,ebx
c00053ec:	31 d2                	xor    edx,edx
c00053ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00053f2:	f7 f1                	div    ecx
c00053f4:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00053fb:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005400:	c1 ea 09             	shr    edx,0x9
c0005403:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000540c:	0f 87 8c 00 00 00    	ja     c000549e <f_mkfs+0x3dc>
c0005412:	89 cf                	mov    edi,ecx
c0005414:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000541c:	89 d9                	mov    ecx,ebx
c000541e:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005426:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000542b:	e9 e0 fe ff ff       	jmp    c0005310 <f_mkfs+0x24e>
c0005430:	83 c2 02             	add    edx,0x2
c0005433:	39 d8                	cmp    eax,ebx
c0005435:	0f 87 96 fe ff ff    	ja     c00052d1 <f_mkfs+0x20f>
c000543b:	01 ff                	add    edi,edi
c000543d:	e9 83 fe ff ff       	jmp    c00052c5 <f_mkfs+0x203>
c0005442:	8d 04 40             	lea    eax,[eax+eax*2]
c0005445:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000544a:	40                   	inc    eax
c000544b:	d1 e8                	shr    eax,1
c000544d:	83 c0 03             	add    eax,0x3
c0005450:	e9 99 fe ff ff       	jmp    c00052ee <f_mkfs+0x22c>
c0005455:	31 d2                	xor    edx,edx
c0005457:	89 d8                	mov    eax,ebx
c0005459:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000545d:	85 d2                	test   edx,edx
c000545f:	74 09                	je     c000546a <f_mkfs+0x3a8>
c0005461:	4b                   	dec    ebx
c0005462:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005466:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000546a:	89 d8                	mov    eax,ebx
c000546c:	31 d2                	xor    edx,edx
c000546e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005472:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005476:	e9 e6 fe ff ff       	jmp    c0005361 <f_mkfs+0x29f>
c000547b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005480:	77 2b                	ja     c00054ad <f_mkfs+0x3eb>
c0005482:	85 c9                	test   ecx,ecx
c0005484:	75 18                	jne    c000549e <f_mkfs+0x3dc>
c0005486:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005489:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000548f:	0f 86 19 fe ff ff    	jbe    c00052ae <f_mkfs+0x1ec>
c0005495:	eb 07                	jmp    c000549e <f_mkfs+0x3dc>
c0005497:	3d f5 0f 00 00       	cmp    eax,0xff5
c000549c:	76 0a                	jbe    c00054a8 <f_mkfs+0x3e6>
c000549e:	bf 0e 00 00 00       	mov    edi,0xe
c00054a3:	e9 a5 03 00 00       	jmp    c000584d <f_mkfs+0x78b>
c00054a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054ad:	31 d2                	xor    edx,edx
c00054af:	b9 00 02 00 00       	mov    ecx,0x200
c00054b4:	89 f0                	mov    eax,esi
c00054b6:	e8 d2 c6 ff ff       	call   c0001b8d <mem_set>
c00054bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00054c0:	ba b2 c5 01 c0       	mov    edx,0xc001c5b2
c00054c5:	89 f0                	mov    eax,esi
c00054c7:	e8 ac c6 ff ff       	call   c0001b78 <mem_cpy>
c00054cc:	8d 46 0b             	lea    eax,[esi+0xb]
c00054cf:	ba 00 02 00 00       	mov    edx,0x200
c00054d4:	e8 98 c6 ff ff       	call   c0001b71 <st_word>
c00054d9:	89 f8                	mov    eax,edi
c00054db:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00054e0:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00054e3:	8d 46 0e             	lea    eax,[esi+0xe]
c00054e6:	e8 86 c6 ff ff       	call   c0001b71 <st_word>
c00054eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00054f7:	75 08                	jne    c0005501 <f_mkfs+0x43f>
c00054f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005505:	8d 46 11             	lea    eax,[esi+0x11]
c0005508:	e8 64 c6 ff ff       	call   c0001b71 <st_word>
c000550d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005511:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005517:	77 0a                	ja     c0005523 <f_mkfs+0x461>
c0005519:	8d 46 13             	lea    eax,[esi+0x13]
c000551c:	e8 50 c6 ff ff       	call   c0001b71 <st_word>
c0005521:	eb 08                	jmp    c000552b <f_mkfs+0x469>
c0005523:	8d 46 20             	lea    eax,[esi+0x20]
c0005526:	e8 4a c6 ff ff       	call   c0001b75 <st_dword>
c000552b:	8d 46 18             	lea    eax,[esi+0x18]
c000552e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005533:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005537:	e8 35 c6 ff ff       	call   c0001b71 <st_word>
c000553c:	8d 46 1a             	lea    eax,[esi+0x1a]
c000553f:	ba ff 00 00 00       	mov    edx,0xff
c0005544:	e8 28 c6 ff ff       	call   c0001b71 <st_word>
c0005549:	8d 46 1c             	lea    eax,[esi+0x1c]
c000554c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005550:	e8 20 c6 ff ff       	call   c0001b75 <st_dword>
c0005555:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555a:	75 57                	jne    c00055b3 <f_mkfs+0x4f1>
c000555c:	8d 46 43             	lea    eax,[esi+0x43]
c000555f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005564:	e8 0c c6 ff ff       	call   c0001b75 <st_dword>
c0005569:	8d 46 24             	lea    eax,[esi+0x24]
c000556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005570:	e8 00 c6 ff ff       	call   c0001b75 <st_dword>
c0005575:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005578:	ba 02 00 00 00       	mov    edx,0x2
c000557d:	e8 f3 c5 ff ff       	call   c0001b75 <st_dword>
c0005582:	8d 46 30             	lea    eax,[esi+0x30]
c0005585:	ba 01 00 00 00       	mov    edx,0x1
c000558a:	e8 e2 c5 ff ff       	call   c0001b71 <st_word>
c000558f:	8d 46 32             	lea    eax,[esi+0x32]
c0005592:	ba 06 00 00 00       	mov    edx,0x6
c0005597:	e8 d5 c5 ff ff       	call   c0001b71 <st_word>
c000559c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00055a0:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00055a4:	8d 46 47             	lea    eax,[esi+0x47]
c00055a7:	b9 13 00 00 00       	mov    ecx,0x13
c00055ac:	ba be c5 01 c0       	mov    edx,0xc001c5be
c00055b1:	eb 2f                	jmp    c00055e2 <f_mkfs+0x520>
c00055b3:	8d 46 27             	lea    eax,[esi+0x27]
c00055b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00055bb:	e8 b5 c5 ff ff       	call   c0001b75 <st_dword>
c00055c0:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00055c5:	8d 46 16             	lea    eax,[esi+0x16]
c00055c8:	e8 a4 c5 ff ff       	call   c0001b71 <st_word>
c00055cd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00055d1:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00055d5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00055d8:	b9 13 00 00 00       	mov    ecx,0x13
c00055dd:	ba d2 c5 01 c0       	mov    edx,0xc001c5d2
c00055e2:	e8 91 c5 ff ff       	call   c0001b78 <mem_cpy>
c00055e7:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00055ed:	ba 55 aa 00 00       	mov    edx,0xaa55
c00055f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055f6:	e8 76 c5 ff ff       	call   c0001b71 <st_word>
c00055fb:	6a 01                	push   0x1
c00055fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005601:	56                   	push   esi
c0005602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005606:	e8 0c c5 ff ff       	call   c0001b17 <disk_write>
c000560b:	83 c4 10             	add    esp,0x10
c000560e:	85 c0                	test   eax,eax
c0005610:	0f 85 20 02 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005616:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000561b:	0f 85 98 00 00 00    	jne    c00056b9 <f_mkfs+0x5f7>
c0005621:	6a 01                	push   0x1
c0005623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005627:	83 c0 06             	add    eax,0x6
c000562a:	50                   	push   eax
c000562b:	56                   	push   esi
c000562c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005630:	e8 e2 c4 ff ff       	call   c0001b17 <disk_write>
c0005635:	b9 00 02 00 00       	mov    ecx,0x200
c000563a:	31 d2                	xor    edx,edx
c000563c:	89 f0                	mov    eax,esi
c000563e:	e8 4a c5 ff ff       	call   c0001b8d <mem_set>
c0005643:	ba 52 52 61 41       	mov    edx,0x41615252
c0005648:	89 f0                	mov    eax,esi
c000564a:	e8 26 c5 ff ff       	call   c0001b75 <st_dword>
c000564f:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005655:	ba 72 72 41 61       	mov    edx,0x61417272
c000565a:	e8 16 c5 ff ff       	call   c0001b75 <st_dword>
c000565f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005662:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c0005668:	e8 08 c5 ff ff       	call   c0001b75 <st_dword>
c000566d:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005673:	ba 02 00 00 00       	mov    edx,0x2
c0005678:	e8 f8 c4 ff ff       	call   c0001b75 <st_dword>
c000567d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005682:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005688:	e8 e4 c4 ff ff       	call   c0001b71 <st_word>
c000568d:	6a 01                	push   0x1
c000568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005693:	83 c0 07             	add    eax,0x7
c0005696:	50                   	push   eax
c0005697:	56                   	push   esi
c0005698:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000569c:	e8 76 c4 ff ff       	call   c0001b17 <disk_write>
c00056a1:	83 c4 20             	add    esp,0x20
c00056a4:	6a 01                	push   0x1
c00056a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00056aa:	40                   	inc    eax
c00056ab:	50                   	push   eax
c00056ac:	56                   	push   esi
c00056ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00056b1:	e8 61 c4 ff ff       	call   c0001b17 <disk_write>
c00056b6:	83 c4 10             	add    esp,0x10
c00056b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00056bd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00056c1:	c1 e8 09             	shr    eax,0x9
c00056c4:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00056ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	31 db                	xor    ebx,ebx
c00056d2:	89 f0                	mov    eax,esi
c00056d4:	e8 b4 c4 ff ff       	call   c0001b8d <mem_set>
c00056d9:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00056de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00056e6:	0f 94 c3             	sete   bl
c00056e9:	4b                   	dec    ebx
c00056ea:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00056f0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00056f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056fb:	75 21                	jne    c000571e <f_mkfs+0x65c>
c00056fd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005702:	89 f0                	mov    eax,esi
c0005704:	e8 6c c4 ff ff       	call   c0001b75 <st_dword>
c0005709:	8d 46 04             	lea    eax,[esi+0x4]
c000570c:	83 ca ff             	or     edx,0xffffffff
c000570f:	e8 61 c4 ff ff       	call   c0001b75 <st_dword>
c0005714:	8d 46 08             	lea    eax,[esi+0x8]
c0005717:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000571c:	eb 04                	jmp    c0005722 <f_mkfs+0x660>
c000571e:	89 da                	mov    edx,ebx
c0005720:	89 f0                	mov    eax,esi
c0005722:	e8 4e c4 ff ff       	call   c0001b75 <st_dword>
c0005727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000572f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005737:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573b:	76 08                	jbe    c0005745 <f_mkfs+0x683>
c000573d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000574d:	56                   	push   esi
c000574e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005752:	e8 c0 c3 ff ff       	call   c0001b17 <disk_write>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 d4 00 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005762:	b9 00 02 00 00       	mov    ecx,0x200
c0005767:	31 d2                	xor    edx,edx
c0005769:	89 f0                	mov    eax,esi
c000576b:	e8 1d c4 ff ff       	call   c0001b8d <mem_set>
c0005770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005774:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c0005778:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000577c:	75 b1                	jne    c000572f <f_mkfs+0x66d>
c000577e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000578a:	40                   	inc    eax
c000578b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000578f:	0f 87 61 ff ff ff    	ja     c00056f6 <f_mkfs+0x634>
c0005795:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000579a:	74 04                	je     c00057a0 <f_mkfs+0x6de>
c000579c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00057a0:	89 fb                	mov    ebx,edi
c00057a2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00057a6:	76 04                	jbe    c00057ac <f_mkfs+0x6ea>
c00057a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00057ac:	53                   	push   ebx
c00057ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00057b1:	56                   	push   esi
c00057b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057b6:	e8 5c c3 ff ff       	call   c0001b17 <disk_write>
c00057bb:	83 c4 10             	add    esp,0x10
c00057be:	85 c0                	test   eax,eax
c00057c0:	75 74                	jne    c0005836 <f_mkfs+0x774>
c00057c2:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00057c6:	29 df                	sub    edi,ebx
c00057c8:	75 d6                	jne    c00057a0 <f_mkfs+0x6de>
c00057ca:	b1 0c                	mov    cl,0xc
c00057cc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d1:	74 18                	je     c00057eb <f_mkfs+0x729>
c00057d3:	b1 06                	mov    cl,0x6
c00057d5:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00057dd:	77 0c                	ja     c00057eb <f_mkfs+0x729>
c00057df:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00057e4:	0f 94 c1             	sete   cl
c00057e7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00057eb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00057f0:	75 2d                	jne    c000581f <f_mkfs+0x75d>
c00057f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00057f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00057fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005802:	0f b6 c9             	movzx  ecx,cl
c0005805:	83 ec 0c             	sub    esp,0xc
c0005808:	56                   	push   esi
c0005809:	8d 54 24 48          	lea    edx,[esp+0x48]
c000580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005811:	e8 4c d3 ff ff       	call   c0002b62 <create_partition>
c0005816:	83 c4 10             	add    esp,0x10
c0005819:	89 c7                	mov    edi,eax
c000581b:	85 c0                	test   eax,eax
c000581d:	75 2e                	jne    c000584d <f_mkfs+0x78b>
c000581f:	31 ff                	xor    edi,edi
c0005821:	50                   	push   eax
c0005822:	6a 00                	push   0x0
c0005824:	6a 00                	push   0x0
c0005826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000582a:	e8 fe c2 ff ff       	call   c0001b2d <disk_ioctl>
c000582f:	83 c4 10             	add    esp,0x10
c0005832:	85 c0                	test   eax,eax
c0005834:	74 17                	je     c000584d <f_mkfs+0x78b>
c0005836:	85 ed                	test   ebp,ebp
c0005838:	75 0c                	jne    c0005846 <f_mkfs+0x784>
c000583a:	83 ec 0c             	sub    esp,0xc
c000583d:	56                   	push   esi
c000583e:	e8 6d 00 00 00       	call   c00058b0 <ff_memfree>
c0005843:	83 c4 10             	add    esp,0x10
c0005846:	bf 01 00 00 00       	mov    edi,0x1
c000584b:	eb 40                	jmp    c000588d <f_mkfs+0x7cb>
c000584d:	85 ed                	test   ebp,ebp
c000584f:	75 3c                	jne    c000588d <f_mkfs+0x7cb>
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 56 00 00 00       	call   c00058b0 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	eb 2e                	jmp    c000588d <f_mkfs+0x7cb>
c000585f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005864:	0f 85 56 fb ff ff    	jne    c00053c0 <f_mkfs+0x2fe>
c000586a:	e9 2f fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000586f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005874:	0f 85 4c fb ff ff    	jne    c00053c6 <f_mkfs+0x304>
c000587a:	89 cf                	mov    edi,ecx
c000587c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005882:	0f 86 49 fa ff ff    	jbe    c00052d1 <f_mkfs+0x20f>
c0005888:	e9 11 fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000588d:	83 c4 4c             	add    esp,0x4c
c0005890:	89 f8                	mov    eax,edi
c0005892:	5b                   	pop    ebx
c0005893:	5e                   	pop    esi
c0005894:	5f                   	pop    edi
c0005895:	5d                   	pop    ebp
c0005896:	c3                   	ret    
c0005897:	90                   	nop

c0005898 <ff_memalloc>:
c0005898:	83 ec 0c             	sub    esp,0xc
c000589b:	83 ec 0c             	sub    esp,0xc
c000589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a2:	e8 aa 13 00 00       	call   c0006c51 <malloc>
c00058a7:	83 c4 10             	add    esp,0x10
c00058aa:	83 c4 0c             	add    esp,0xc
c00058ad:	c3                   	ret    
c00058ae:	66 90                	xchg   ax,ax

c00058b0 <ff_memfree>:
c00058b0:	83 ec 0c             	sub    esp,0xc
c00058b3:	83 ec 0c             	sub    esp,0xc
c00058b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058ba:	e8 a2 13 00 00       	call   c0006c61 <free>
c00058bf:	83 c4 10             	add    esp,0x10
c00058c2:	90                   	nop
c00058c3:	83 c4 0c             	add    esp,0xc
c00058c6:	c3                   	ret    
c00058c7:	90                   	nop

c00058c8 <ff_uni2oem>:
c00058c8:	83 ec 14             	sub    esp,0x14
c00058cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00058d3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00058da:	c7 44 24 0c 00 ca 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ca00
c00058e2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00058e7:	77 0b                	ja     c00058f4 <ff_uni2oem+0x2c>
c00058e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00058f2:	eb 68                	jmp    c000595c <ff_uni2oem+0x94>
c00058f4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00058fc:	77 5e                	ja     c000595c <ff_uni2oem+0x94>
c00058fe:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005904:	75 56                	jne    c000595c <ff_uni2oem+0x94>
c0005906:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000590d:	eb 0d                	jmp    c000591c <ff_uni2oem+0x54>
c000590f:	90                   	nop
c0005910:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005915:	40                   	inc    eax
c0005916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000591b:	90                   	nop
c000591c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005922:	77 24                	ja     c0005948 <ff_uni2oem+0x80>
c0005924:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005929:	25 ff ff 00 00       	and    eax,0xffff
c000592e:	01 c0                	add    eax,eax
c0005930:	89 c2                	mov    edx,eax
c0005932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005936:	01 d0                	add    eax,edx
c0005938:	66 8b 00             	mov    ax,WORD PTR [eax]
c000593b:	25 ff ff 00 00       	and    eax,0xffff
c0005940:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005944:	75 ca                	jne    c0005910 <ff_uni2oem+0x48>
c0005946:	66 90                	xchg   ax,ax
c0005948:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000594d:	83 e8 80             	sub    eax,0xffffff80
c0005950:	25 ff 00 00 00       	and    eax,0xff
c0005955:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000595a:	66 90                	xchg   ax,ax
c000595c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005961:	83 c4 14             	add    esp,0x14
c0005964:	c3                   	ret    
c0005965:	8d 76 00             	lea    esi,[esi+0x0]

c0005968 <ff_oem2uni>:
c0005968:	83 ec 18             	sub    esp,0x18
c000596b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000596f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005973:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005978:	66 89 04 24          	mov    WORD PTR [esp],ax
c000597c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005983:	c7 44 24 10 00 ca 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ca00
c000598b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005991:	77 0d                	ja     c00059a0 <ff_oem2uni+0x38>
c0005993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005997:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000599c:	eb 36                	jmp    c00059d4 <ff_oem2uni+0x6c>
c000599e:	66 90                	xchg   ax,ax
c00059a0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00059a6:	75 2c                	jne    c00059d4 <ff_oem2uni+0x6c>
c00059a8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00059af:	77 23                	ja     c00059d4 <ff_oem2uni+0x6c>
c00059b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059b5:	25 ff ff 00 00       	and    eax,0xffff
c00059ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00059bf:	01 c0                	add    eax,eax
c00059c1:	89 c2                	mov    edx,eax
c00059c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c7:	01 d0                	add    eax,edx
c00059c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00059cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00059d1:	8d 76 00             	lea    esi,[esi+0x0]
c00059d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00059d9:	83 c4 18             	add    esp,0x18
c00059dc:	c3                   	ret    
c00059dd:	8d 76 00             	lea    esi,[esi+0x0]

c00059e0 <ff_wtoupper>:
c00059e0:	83 ec 10             	sub    esp,0x10
c00059e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00059eb:	0f 87 77 01 00 00    	ja     c0005b68 <ff_wtoupper+0x188>
c00059f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00059fa:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005a01:	77 09                	ja     c0005a0c <ff_wtoupper+0x2c>
c0005a03:	b8 00 c8 01 c0       	mov    eax,0xc001c800
c0005a08:	eb 0a                	jmp    c0005a14 <ff_wtoupper+0x34>
c0005a0a:	66 90                	xchg   ax,ax
c0005a0c:	b8 40 c7 01 c0       	mov    eax,0xc001c740
c0005a11:	8d 76 00             	lea    esi,[esi+0x0]
c0005a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1c:	8d 50 02             	lea    edx,[eax+0x2]
c0005a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a26:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005a2b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005a31:	0f 84 21 01 00 00    	je     c0005b58 <ff_wtoupper+0x178>
c0005a37:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a3c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005a41:	0f 82 11 01 00 00    	jb     c0005b58 <ff_wtoupper+0x178>
c0005a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a4b:	8d 50 02             	lea    edx,[eax+0x2]
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a55:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005a5a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a5f:	66 c1 e8 08          	shr    ax,0x8
c0005a63:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005a68:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005a6f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a74:	31 d2                	xor    edx,edx
c0005a76:	66 89 c2             	mov    dx,ax
c0005a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7d:	31 c9                	xor    ecx,ecx
c0005a7f:	66 89 c1             	mov    cx,ax
c0005a82:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a87:	25 ff ff 00 00       	and    eax,0xffff
c0005a8c:	01 c8                	add    eax,ecx
c0005a8e:	39 c2                	cmp    edx,eax
c0005a90:	0f 8d 9a 00 00 00    	jge    c0005b30 <ff_wtoupper+0x150>
c0005a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a9a:	25 ff ff 00 00       	and    eax,0xffff
c0005a9f:	83 f8 08             	cmp    eax,0x8
c0005aa2:	0f 87 ac 00 00 00    	ja     c0005b54 <ff_wtoupper+0x174>
c0005aa8:	8b 04 85 00 c7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3900]
c0005aaf:	ff e0                	jmp    eax
c0005ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ab4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ab9:	31 d2                	xor    edx,edx
c0005abb:	66 89 c2             	mov    dx,ax
c0005abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ac2:	25 ff ff 00 00       	and    eax,0xffff
c0005ac7:	29 c2                	sub    edx,eax
c0005ac9:	89 d0                	mov    eax,edx
c0005acb:	01 c0                	add    eax,eax
c0005acd:	89 c2                	mov    edx,eax
c0005acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ad3:	01 d0                	add    eax,edx
c0005ad5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ad8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005add:	eb 4d                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005adf:	90                   	nop
c0005ae0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ae9:	83 e0 01             	and    eax,0x1
c0005aec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005af1:	eb 39                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005af3:	90                   	nop
c0005af4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005afa:	eb 30                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005afc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005b02:	eb 28                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b04:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005b0a:	eb 20                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b0c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005b12:	eb 18                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b14:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005b1a:	eb 10                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b1c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005b22:	eb 08                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b24:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005b2b:	90                   	nop
c0005b2c:	eb 26                	jmp    c0005b54 <ff_wtoupper+0x174>
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005b36:	0f 85 dc fe ff ff    	jne    c0005a18 <ff_wtoupper+0x38>
c0005b3c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005b41:	25 ff ff 00 00       	and    eax,0xffff
c0005b46:	01 c0                	add    eax,eax
c0005b48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005b4c:	e9 c7 fe ff ff       	jmp    c0005a18 <ff_wtoupper+0x38>
c0005b51:	8d 76 00             	lea    esi,[esi+0x0]
c0005b54:	90                   	nop
c0005b55:	8d 76 00             	lea    esi,[esi+0x0]
c0005b58:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b5d:	25 ff ff 00 00       	and    eax,0xffff
c0005b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	c3                   	ret    

c0005b70 <CPU::current()>:
c0005b70:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0005b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005b7b:	c3                   	ret    

c0005b7c <operator new(unsigned long)>:
c0005b7c:	e9 d0 10 00 00       	jmp    c0006c51 <malloc>

c0005b81 <operator delete(void*)>:
c0005b81:	e9 eb 10 00 00       	jmp    c0006c71 <rfree>

c0005b86 <disableIRQs()>:
c0005b86:	fa                   	cli    
c0005b87:	c3                   	ret    

c0005b88 <enableIRQs()>:
c0005b88:	fb                   	sti    
c0005b89:	c3                   	ret    

c0005b8a <lockScheduler()>:
c0005b8a:	fa                   	cli    
c0005b8b:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0005b91:	c3                   	ret    

c0005b92 <unlockScheduler()>:
c0005b92:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0005b97:	48                   	dec    eax
c0005b98:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0005b9d:	75 01                	jne    c0005ba0 <unlockScheduler()+0xe>
c0005b9f:	fb                   	sti    
c0005ba0:	c3                   	ret    

c0005ba1 <lockStuff()>:
c0005ba1:	fa                   	cli    
c0005ba2:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0005ba8:	ff 05 84 2a 02 c0    	inc    DWORD PTR ds:0xc0022a84
c0005bae:	c3                   	ret    

c0005baf <unlockStuff()>:
c0005baf:	83 ec 0c             	sub    esp,0xc
c0005bb2:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0005bb7:	48                   	dec    eax
c0005bb8:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c0005bbd:	75 18                	jne    c0005bd7 <unlockStuff()+0x28>
c0005bbf:	83 3d 80 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a80,0x0
c0005bc6:	74 0f                	je     c0005bd7 <unlockStuff()+0x28>
c0005bc8:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c0005bd2:	e8 71 ce 00 00       	call   c0012a48 <schedule()>
c0005bd7:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0005bdc:	48                   	dec    eax
c0005bdd:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0005be2:	75 01                	jne    c0005be5 <unlockStuff()+0x36>
c0005be4:	fb                   	sti    
c0005be5:	83 c4 0c             	add    esp,0xc
c0005be8:	c3                   	ret    

c0005be9 <Virt::getAKernelVAS()>:
c0005be9:	a1 94 f6 01 c0       	mov    eax,ds:0xc001f694
c0005bee:	c3                   	ret    

c0005bef <__not_memcpy>:
c0005bef:	57                   	push   edi
c0005bf0:	56                   	push   esi
c0005bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005bfd:	89 c7                	mov    edi,eax
c0005bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005c01:	5e                   	pop    esi
c0005c02:	5f                   	pop    edi
c0005c03:	c3                   	ret    

c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005c04:	83 ec 0c             	sub    esp,0xc
c0005c07:	83 ec 08             	sub    esp,0x8
c0005c0a:	68 00 cb 01 c0       	push   0xc001cb00
c0005c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c13:	e8 e8 aa ff ff       	call   c0000700 <strcmp>
c0005c18:	83 c4 10             	add    esp,0x10
c0005c1b:	85 c0                	test   eax,eax
c0005c1d:	0f 94 c0             	sete   al
c0005c20:	84 c0                	test   al,al
c0005c22:	74 0c                	je     c0005c30 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005c24:	b8 a8 f5 01 c0       	mov    eax,0xc001f5a8
c0005c29:	e9 ea 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c2e:	66 90                	xchg   ax,ax
c0005c30:	83 ec 08             	sub    esp,0x8
c0005c33:	68 09 cb 01 c0       	push   0xc001cb09
c0005c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c3c:	e8 bf aa ff ff       	call   c0000700 <strcmp>
c0005c41:	83 c4 10             	add    esp,0x10
c0005c44:	85 c0                	test   eax,eax
c0005c46:	0f 94 c0             	sete   al
c0005c49:	84 c0                	test   al,al
c0005c4b:	74 0b                	je     c0005c58 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005c4d:	b8 a0 b7 01 c0       	mov    eax,0xc001b7a0
c0005c52:	e9 c1 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c57:	90                   	nop
c0005c58:	83 ec 08             	sub    esp,0x8
c0005c5b:	68 13 cb 01 c0       	push   0xc001cb13
c0005c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c64:	e8 97 aa ff ff       	call   c0000700 <strcmp>
c0005c69:	83 c4 10             	add    esp,0x10
c0005c6c:	85 c0                	test   eax,eax
c0005c6e:	0f 94 c0             	sete   al
c0005c71:	84 c0                	test   al,al
c0005c73:	74 0b                	je     c0005c80 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005c75:	b8 d4 b4 01 c0       	mov    eax,0xc001b4d4
c0005c7a:	e9 99 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c7f:	90                   	nop
c0005c80:	83 ec 08             	sub    esp,0x8
c0005c83:	68 1c cb 01 c0       	push   0xc001cb1c
c0005c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c8c:	e8 6f aa ff ff       	call   c0000700 <strcmp>
c0005c91:	83 c4 10             	add    esp,0x10
c0005c94:	85 c0                	test   eax,eax
c0005c96:	0f 94 c0             	sete   al
c0005c99:	84 c0                	test   al,al
c0005c9b:	74 07                	je     c0005ca4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005c9d:	b8 a0 b8 01 c0       	mov    eax,0xc001b8a0
c0005ca2:	eb 74                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005ca4:	83 ec 08             	sub    esp,0x8
c0005ca7:	68 26 cb 01 c0       	push   0xc001cb26
c0005cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cb0:	e8 4b aa ff ff       	call   c0000700 <strcmp>
c0005cb5:	83 c4 10             	add    esp,0x10
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	0f 94 c0             	sete   al
c0005cbd:	84 c0                	test   al,al
c0005cbf:	74 07                	je     c0005cc8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005cc1:	b8 20 b6 01 c0       	mov    eax,0xc001b620
c0005cc6:	eb 50                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cc8:	83 ec 08             	sub    esp,0x8
c0005ccb:	68 2f cb 01 c0       	push   0xc001cb2f
c0005cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cd4:	e8 27 aa ff ff       	call   c0000700 <strcmp>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	85 c0                	test   eax,eax
c0005cde:	0f 94 c0             	sete   al
c0005ce1:	84 c0                	test   al,al
c0005ce3:	74 07                	je     c0005cec <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005ce5:	b8 ac f5 01 c0       	mov    eax,0xc001f5ac
c0005cea:	eb 2c                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cec:	83 ec 08             	sub    esp,0x8
c0005cef:	68 3c cb 01 c0       	push   0xc001cb3c
c0005cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cf8:	e8 03 aa ff ff       	call   c0000700 <strcmp>
c0005cfd:	83 c4 10             	add    esp,0x10
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 94 c0             	sete   al
c0005d05:	84 c0                	test   al,al
c0005d07:	74 07                	je     c0005d10 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005d09:	b8 ad f5 01 c0       	mov    eax,0xc001f5ad
c0005d0e:	eb 08                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d10:	b8 00 00 00 00       	mov    eax,0x0
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	83 c4 0c             	add    esp,0xc
c0005d1b:	c3                   	ret    

c0005d1c <Computer::close(int, int, void*)>:
c0005d1c:	57                   	push   edi
c0005d1d:	56                   	push   esi
c0005d1e:	53                   	push   ebx
c0005d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005d23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005d27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005d2b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005d31:	83 ec 0c             	sub    esp,0xc
c0005d34:	50                   	push   eax
c0005d35:	e8 38 52 00 00       	call   c000af72 <Device::closeAll()>
c0005d3a:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0005d45:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005d49:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005d51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d59:	5b                   	pop    ebx
c0005d5a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005d5d:	5e                   	pop    esi
c0005d5e:	5f                   	pop    edi
c0005d5f:	ff e0                	jmp    eax

c0005d61 <Krnl::firstTask()>:
c0005d61:	53                   	push   ebx
c0005d62:	83 ec 14             	sub    esp,0x14
c0005d65:	fb                   	sti    
c0005d66:	68 49 cb 01 c0       	push   0xc001cb49
c0005d6b:	e8 3b 0f 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0005d70:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005d77:	e8 d5 0e 00 00       	call   c0006c51 <malloc>
c0005d7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d83:	89 c3                	mov    ebx,eax
c0005d85:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0005d8a:	50                   	push   eax
c0005d8b:	68 62 cb 01 c0       	push   0xc001cb62
c0005d90:	6a 01                	push   0x1
c0005d92:	53                   	push   ebx
c0005d93:	e8 84 c8 00 00       	call   c001261c <Process::Process(bool, char const*, Process*, char**)>
c0005d98:	83 c4 20             	add    esp,0x20
c0005d9b:	68 ff 00 00 00       	push   0xff
c0005da0:	6a 00                	push   0x0
c0005da2:	68 a9 66 00 c0       	push   0xc00066a9
c0005da7:	53                   	push   ebx
c0005da8:	e8 7b ca 00 00       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c0005dad:	8b 15 b0 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022ab0
c0005db3:	6a 7a                	push   0x7a
c0005db5:	6a 00                	push   0x0
c0005db7:	68 7c 32 01 c0       	push   0xc001327c
c0005dbc:	52                   	push   edx
c0005dbd:	e8 66 ca 00 00       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c0005dc2:	83 c4 14             	add    esp,0x14
c0005dc5:	a3 68 2a 02 c0       	mov    ds:0xc0022a68,eax
c0005dca:	68 60 cc 01 c0       	push   0xc001cc60
c0005dcf:	c6 05 ad f5 01 c0 01 	mov    BYTE PTR ds:0xc001f5ad,0x1
c0005dd6:	e8 d0 0e 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0005ddb:	e8 7b d8 00 00       	call   c001365b <Vm::initialise8086()>
c0005de0:	e8 d1 3f 00 00       	call   c0009db6 <Fs::initVFS()>
c0005de5:	c7 04 24 6f cb 01 c0 	mov    DWORD PTR [esp],0xc001cb6f
c0005dec:	e8 ba 0e 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0005df1:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0005df6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0005dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0005dfe:	6a 00                	push   0x0
c0005e00:	6a 00                	push   0x0
c0005e02:	6a 00                	push   0x0
c0005e04:	50                   	push   eax
c0005e05:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005e08:	83 c4 14             	add    esp,0x14
c0005e0b:	68 60 cc 01 c0       	push   0xc001cc60
c0005e10:	e8 96 0e 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0005e15:	e8 92 b0 00 00       	call   c0010eac <Sys::loadSyscalls()>
c0005e1a:	e8 3f 96 00 00       	call   c000f45e <Krnl::loadSystemEnv()>
c0005e1f:	e8 8e 9a 00 00       	call   c000f8b2 <Krnl::setupPowerManager()>
c0005e24:	83 c4 0c             	add    esp,0xc
c0005e27:	6a 3a                	push   0x3a
c0005e29:	68 89 cb 01 c0       	push   0xc001cb89
c0005e2e:	68 92 cb 01 c0       	push   0xc001cb92
c0005e33:	e8 a4 9f 00 00       	call   c000fddc <Reg::readIntWithDefault(char*, char*, int)>
c0005e38:	89 04 24             	mov    DWORD PTR [esp],eax
c0005e3b:	e8 84 4a 00 00       	call   c000a8c4 <User::loadClockSettings(int)>
c0005e40:	c7 04 24 84 cc 01 c0 	mov    DWORD PTR [esp],0xc001cc84
c0005e47:	e8 5f 0e 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0005e4c:	59                   	pop    ecx
c0005e4d:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0005e52:	8b 98 e4 01 00 00    	mov    ebx,DWORD PTR [eax+0x1e4]
c0005e58:	53                   	push   ebx
c0005e59:	e8 12 51 00 00       	call   c000af70 <Device::loadDriversForAll()>
c0005e5e:	c7 04 24 9a cb 01 c0 	mov    DWORD PTR [esp],0xc001cb9a
c0005e65:	e8 41 0e 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0005e6a:	e8 75 91 00 00       	call   c000efe4 <Krnl::startCPUs()>
c0005e6f:	c7 04 24 b4 cb 01 c0 	mov    DWORD PTR [esp],0xc001cbb4
c0005e76:	e8 30 0e 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0005e7b:	58                   	pop    eax
c0005e7c:	8b 1d a8 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5a8
c0005e82:	5a                   	pop    edx
c0005e83:	6a 01                	push   0x1
c0005e85:	68 c5 cb 01 c0       	push   0xc001cbc5
c0005e8a:	e8 c5 c1 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c0005e8f:	59                   	pop    ecx
c0005e90:	5a                   	pop    edx
c0005e91:	53                   	push   ebx
c0005e92:	50                   	push   eax
c0005e93:	e8 ed c3 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c0005e98:	83 c4 10             	add    esp,0x10
c0005e9b:	83 ec 0c             	sub    esp,0xc
c0005e9e:	6a 02                	push   0x2
c0005ea0:	e8 9f cd 00 00       	call   c0012c44 <blockTask(TaskState)>
c0005ea5:	83 c4 10             	add    esp,0x10
c0005ea8:	eb f1                	jmp    c0005e9b <Krnl::firstTask()+0x13a>

c0005eaa <Computer::Computer()>:
c0005eaa:	83 ec 0c             	sub    esp,0xc
c0005ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005eb1:	83 ec 08             	sub    esp,0x8
c0005eb4:	68 e1 cb 01 c0       	push   0xc001cbe1
c0005eb9:	50                   	push   eax
c0005eba:	e8 2d 51 00 00       	call   c000afec <Device::Device(char const*)>
c0005ebf:	83 c4 10             	add    esp,0x10
c0005ec2:	ba d0 cc 01 c0       	mov    edx,0xc001ccd0
c0005ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ecb:	89 10                	mov    DWORD PTR [eax],edx
c0005ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ed1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005edf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005eed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0005ef3:	83 ca 04             	or     edx,0x4
c0005ef6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0005efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f06:	31 d2                	xor    edx,edx
c0005f08:	88 c2                	mov    dl,al
c0005f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f0e:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f1f:	31 d2                	xor    edx,edx
c0005f21:	88 c2                	mov    dl,al
c0005f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f27:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f36:	8d 50 01             	lea    edx,[eax+0x1]
c0005f39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f3d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f43:	31 d2                	xor    edx,edx
c0005f45:	88 c2                	mov    dl,al
c0005f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f4b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f4f:	83 e1 3f             	and    ecx,0x3f
c0005f52:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f5a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f60:	31 d2                	xor    edx,edx
c0005f62:	88 c2                	mov    dl,al
c0005f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f68:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0005f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f79:	31 d2                	xor    edx,edx
c0005f7b:	88 c2                	mov    dl,al
c0005f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f81:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f90:	8d 50 01             	lea    edx,[eax+0x1]
c0005f93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f97:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f9d:	31 d2                	xor    edx,edx
c0005f9f:	88 c2                	mov    dl,al
c0005fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fa5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005fa9:	83 e1 3f             	and    ecx,0x3f
c0005fac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fba:	31 d2                	xor    edx,edx
c0005fbc:	88 c2                	mov    dl,al
c0005fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fc2:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0005fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fcd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fd3:	31 d2                	xor    edx,edx
c0005fd5:	88 c2                	mov    dl,al
c0005fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fdb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fe4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fea:	8d 50 01             	lea    edx,[eax+0x1]
c0005fed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ff1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	88 c2                	mov    dl,al
c0005ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fff:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006003:	83 e1 3f             	and    ecx,0x3f
c0006006:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000600a:	90                   	nop
c000600b:	83 c4 0c             	add    esp,0xc
c000600e:	c3                   	ret    
c000600f:	90                   	nop

c0006010 <Computer::setBootMessage(char const*)>:
c0006010:	c3                   	ret    
c0006011:	90                   	nop

c0006012 <Computer::detectFeatures()>:
c0006012:	55                   	push   ebp
c0006013:	57                   	push   edi
c0006014:	56                   	push   esi
c0006015:	53                   	push   ebx
c0006016:	83 ec 1c             	sub    esp,0x1c
c0006019:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000601d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0006027:	e8 ed a1 ff ff       	call   c0000219 <detectCPUID>
c000602c:	85 c0                	test   eax,eax
c000602e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006034:	0f 95 c2             	setne  dl
c0006037:	83 e0 fd             	and    eax,0xfffffffd
c000603a:	01 d2                	add    edx,edx
c000603c:	09 d0                	or     eax,edx
c000603e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006044:	a8 02                	test   al,0x2
c0006046:	75 46                	jne    c000608e <Computer::detectFeatures()+0x7c>
c0006048:	f6 05 c1 f5 01 c0 04 	test   BYTE PTR ds:0xc001f5c1,0x4
c000604f:	74 07                	je     c0006058 <Computer::detectFeatures()+0x46>
c0006051:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0006058:	e8 09 54 01 00       	call   c001b466 <x87Detect>
c000605d:	83 e0 01             	and    eax,0x1
c0006060:	c1 e0 04             	shl    eax,0x4
c0006063:	88 c2                	mov    dl,al
c0006065:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000606b:	83 e0 ef             	and    eax,0xffffffef
c000606e:	09 d0                	or     eax,edx
c0006070:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006076:	a8 10                	test   al,0x10
c0006078:	0f 85 2a 01 00 00    	jne    c00061a8 <Computer::detectFeatures()+0x196>
c000607e:	84 c0                	test   al,al
c0006080:	0f 88 45 01 00 00    	js     c00061cb <Computer::detectFeatures()+0x1b9>
c0006086:	83 c4 1c             	add    esp,0x1c
c0006089:	5b                   	pop    ebx
c000608a:	5e                   	pop    esi
c000608b:	5f                   	pop    edi
c000608c:	5d                   	pop    ebp
c000608d:	c3                   	ret    
c000608e:	83 ec 0c             	sub    esp,0xc
c0006091:	6a 20                	push   0x20
c0006093:	e8 e4 84 00 00       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c0006098:	83 e0 01             	and    eax,0x1
c000609b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00060a2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00060a8:	83 e0 f7             	and    eax,0xfffffff7
c00060ab:	09 d0                	or     eax,edx
c00060ad:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00060b3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00060ba:	e8 bd 84 00 00       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c00060bf:	83 e0 01             	and    eax,0x1
c00060c2:	88 c2                	mov    dl,al
c00060c4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00060ca:	83 e0 fe             	and    eax,0xfffffffe
c00060cd:	09 d0                	or     eax,edx
c00060cf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00060d5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00060dc:	e8 9b 84 00 00       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c00060e1:	c1 e0 07             	shl    eax,0x7
c00060e4:	88 c2                	mov    dl,al
c00060e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00060ec:	83 e0 7f             	and    eax,0x7f
c00060ef:	09 d0                	or     eax,edx
c00060f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00060f7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00060fe:	e8 79 84 00 00       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c0006103:	83 c4 10             	add    esp,0x10
c0006106:	83 e0 01             	and    eax,0x1
c0006109:	c1 e0 05             	shl    eax,0x5
c000610c:	88 c2                	mov    dl,al
c000610e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006114:	83 e0 df             	and    eax,0xffffffdf
c0006117:	09 d0                	or     eax,edx
c0006119:	f7 05 c0 f5 01 c0 01 04 00 00 	test   DWORD PTR ds:0xc001f5c0,0x401
c0006123:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006129:	0f 84 c2 00 00 00    	je     c00061f1 <Computer::detectFeatures()+0x1df>
c000612f:	83 e0 fe             	and    eax,0xfffffffe
c0006132:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006138:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000613e:	88 c2                	mov    dl,al
c0006140:	83 e2 09             	and    edx,0x9
c0006143:	fe ca                	dec    dl
c0006145:	75 09                	jne    c0006150 <Computer::detectFeatures()+0x13e>
c0006147:	83 e0 fe             	and    eax,0xfffffffe
c000614a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006150:	83 ec 0c             	sub    esp,0xc
c0006153:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006157:	50                   	push   eax
c0006158:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000615c:	55                   	push   ebp
c000615d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006161:	57                   	push   edi
c0006162:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006166:	56                   	push   esi
c0006167:	68 00 00 00 80       	push   0x80000000
c000616c:	e8 87 83 00 00       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006171:	83 c4 20             	add    esp,0x20
c0006174:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000617b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000617f:	0f 86 c3 fe ff ff    	jbe    c0006048 <Computer::detectFeatures()+0x36>
c0006185:	83 ec 0c             	sub    esp,0xc
c0006188:	50                   	push   eax
c0006189:	55                   	push   ebp
c000618a:	57                   	push   edi
c000618b:	56                   	push   esi
c000618c:	68 01 00 00 80       	push   0x80000001
c0006191:	e8 62 83 00 00       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006196:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c00061a0:	83 c4 20             	add    esp,0x20
c00061a3:	e9 a0 fe ff ff       	jmp    c0006048 <Computer::detectFeatures()+0x36>
c00061a8:	e8 73 52 01 00       	call   c001b420 <absolutelyNoChanceInHell>
c00061ad:	88 c2                	mov    dl,al
c00061af:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00061b5:	c1 e2 07             	shl    edx,0x7
c00061b8:	83 e0 7f             	and    eax,0x7f
c00061bb:	09 d0                	or     eax,edx
c00061bd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00061c3:	84 c0                	test   al,al
c00061c5:	0f 89 bb fe ff ff    	jns    c0006086 <Computer::detectFeatures()+0x74>
c00061cb:	e8 d0 4f 01 00       	call   c001b1a0 <avxDetect>
c00061d0:	83 e0 01             	and    eax,0x1
c00061d3:	c1 e0 05             	shl    eax,0x5
c00061d6:	88 c2                	mov    dl,al
c00061d8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00061de:	83 e0 df             	and    eax,0xffffffdf
c00061e1:	09 d0                	or     eax,edx
c00061e3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00061e9:	83 c4 1c             	add    esp,0x1c
c00061ec:	5b                   	pop    ebx
c00061ed:	5e                   	pop    esi
c00061ee:	5f                   	pop    edi
c00061ef:	5d                   	pop    ebp
c00061f0:	c3                   	ret    
c00061f1:	83 ec 0c             	sub    esp,0xc
c00061f4:	68 00 02 00 00       	push   0x200
c00061f9:	e8 7e 83 00 00       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c00061fe:	83 c4 10             	add    esp,0x10
c0006201:	83 e0 01             	and    eax,0x1
c0006204:	88 c2                	mov    dl,al
c0006206:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000620c:	83 e0 fe             	and    eax,0xfffffffe
c000620f:	09 d0                	or     eax,edx
c0006211:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006217:	e9 1c ff ff ff       	jmp    c0006138 <Computer::detectFeatures()+0x126>

c000621c <Computer::displayFeatures()>:
c000621c:	c3                   	ret    
c000621d:	90                   	nop

c000621e <Computer::rdmsr(unsigned int)>:
c000621e:	83 ec 0c             	sub    esp,0xc
c0006221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006225:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000622c:	74 0a                	je     c0006238 <Computer::rdmsr(unsigned int)+0x1a>
c000622e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006232:	0f 32                	rdmsr  
c0006234:	83 c4 0c             	add    esp,0xc
c0006237:	c3                   	ret    
c0006238:	83 ec 0c             	sub    esp,0xc
c000623b:	68 ea cb 01 c0       	push   0xc001cbea
c0006240:	e8 22 93 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0006245:	83 c4 10             	add    esp,0x10
c0006248:	eb e4                	jmp    c000622e <Computer::rdmsr(unsigned int)+0x10>

c000624a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000624a:	57                   	push   edi
c000624b:	56                   	push   esi
c000624c:	52                   	push   edx
c000624d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006251:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006255:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006259:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0006260:	74 0e                	je     c0006270 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006262:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006266:	89 f0                	mov    eax,esi
c0006268:	89 fa                	mov    edx,edi
c000626a:	0f 30                	wrmsr  
c000626c:	58                   	pop    eax
c000626d:	5e                   	pop    esi
c000626e:	5f                   	pop    edi
c000626f:	c3                   	ret    
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	68 f0 cb 01 c0       	push   0xc001cbf0
c0006278:	e8 ea 92 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000627d:	83 c4 10             	add    esp,0x10
c0006280:	eb e0                	jmp    c0006262 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006282 <Computer::shutdown()>:
c0006282:	83 ec 0c             	sub    esp,0xc
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 10                	mov    edx,DWORD PTR [eax]
c000628b:	6a 00                	push   0x0
c000628d:	6a 00                	push   0x0
c000628f:	6a 00                	push   0x0
c0006291:	50                   	push   eax
c0006292:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006295:	83 c4 1c             	add    esp,0x1c
c0006298:	c3                   	ret    
c0006299:	90                   	nop

c000629a <Computer::restart()>:
c000629a:	83 ec 0c             	sub    esp,0xc
c000629d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00062a3:	6a 00                	push   0x0
c00062a5:	6a 00                	push   0x0
c00062a7:	6a 01                	push   0x1
c00062a9:	50                   	push   eax
c00062aa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00062ad:	83 c4 1c             	add    esp,0x1c
c00062b0:	c3                   	ret    
c00062b1:	90                   	nop

c00062b2 <Computer::sleep()>:
c00062b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062b6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00062bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00062c0:	e9 2f 7d 00 00       	jmp    c000dff4 <ACPI::sleep()>
c00062c5:	90                   	nop

c00062c6 <Computer::nmiEnabled()>:
c00062c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062ca:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00062d0:	c3                   	ret    
c00062d1:	90                   	nop

c00062d2 <Computer::readCMOS(unsigned char)>:
c00062d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062d6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00062dd:	19 c0                	sbb    eax,eax
c00062df:	83 e0 80             	and    eax,0xffffff80
c00062e2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00062e6:	e6 70                	out    0x70,al
c00062e8:	e4 71                	in     al,0x71
c00062ea:	c3                   	ret    
c00062eb:	90                   	nop

c00062ec <Computer::enableNMI(bool)>:
c00062ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00062f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062f4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00062fa:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006302:	eb ce                	jmp    c00062d2 <Computer::readCMOS(unsigned char)>

c0006304 <Computer::open(int, int, void*)>:
c0006304:	56                   	push   esi
c0006305:	53                   	push   ebx
c0006306:	83 ec 10             	sub    esp,0x10
c0006309:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000630d:	f6 05 c0 f5 01 c0 04 	test   BYTE PTR ds:0xc001f5c0,0x4
c0006314:	68 f6 cb 01 c0       	push   0xc001cbf6
c0006319:	0f 94 05 e0 ee 01 c0 	sete   BYTE PTR ds:0xc001eee0
c0006320:	e8 86 09 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0006325:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000632c:	e8 20 09 00 00       	call   c0006c51 <malloc>
c0006331:	89 04 24             	mov    DWORD PTR [esp],eax
c0006334:	89 c6                	mov    esi,eax
c0006336:	e8 51 78 00 00       	call   c000db8c <ACPI::ACPI()>
c000633b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0006341:	58                   	pop    eax
c0006342:	5a                   	pop    edx
c0006343:	56                   	push   esi
c0006344:	53                   	push   ebx
c0006345:	e8 0a 4b 00 00       	call   c000ae54 <Device::addChild(Device*)>
c000634a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000634d:	e8 c0 fc ff ff       	call   c0006012 <Computer::detectFeatures()>
c0006352:	59                   	pop    ecx
c0006353:	5e                   	pop    esi
c0006354:	6a 01                	push   0x1
c0006356:	53                   	push   ebx
c0006357:	e8 90 ff ff ff       	call   c00062ec <Computer::enableNMI(bool)>
c000635c:	c7 04 24 9a cb 01 c0 	mov    DWORD PTR [esp],0xc001cb9a
c0006363:	e8 43 09 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c0006368:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000636f:	e8 dd 08 00 00       	call   c0006c51 <malloc>
c0006374:	89 04 24             	mov    DWORD PTR [esp],eax
c0006377:	89 c6                	mov    esi,eax
c0006379:	e8 b6 82 00 00       	call   c000e634 <CPU::CPU()>
c000637e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006384:	58                   	pop    eax
c0006385:	5a                   	pop    edx
c0006386:	56                   	push   esi
c0006387:	53                   	push   ebx
c0006388:	e8 c7 4a 00 00       	call   c000ae54 <Device::addChild(Device*)>
c000638d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006393:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006397:	8b 10                	mov    edx,DWORD PTR [eax]
c0006399:	51                   	push   ecx
c000639a:	6a 00                	push   0x0
c000639c:	6a 00                	push   0x0
c000639e:	50                   	push   eax
c000639f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00063a2:	83 c4 14             	add    esp,0x14
c00063a5:	68 a4 cc 01 c0       	push   0xc001cca4
c00063aa:	e8 fc 08 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c00063af:	e8 44 e3 00 00       	call   c00146f8 <HalInitialiseCoprocessor()>
c00063b4:	c7 04 24 0e cc 01 c0 	mov    DWORD PTR [esp],0xc001cc0e
c00063bb:	e8 eb 08 00 00       	call   c0006cab <Krnl::setBootMessage(char const*)>
c00063c0:	c7 04 24 61 5d 00 c0 	mov    DWORD PTR [esp],0xc0005d61
c00063c7:	e8 74 c5 00 00       	call   c0012940 <setupMultitasking(void (*)())>
c00063cc:	83 c4 14             	add    esp,0x14
c00063cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00063d4:	5b                   	pop    ebx
c00063d5:	5e                   	pop    esi
c00063d6:	c3                   	ret    
c00063d7:	90                   	nop

c00063d8 <Computer::disableNMI()>:
c00063d8:	6a 00                	push   0x0
c00063da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063de:	50                   	push   eax
c00063df:	e8 08 ff ff ff       	call   c00062ec <Computer::enableNMI(bool)>
c00063e4:	5a                   	pop    edx
c00063e5:	59                   	pop    ecx
c00063e6:	c3                   	ret    
c00063e7:	90                   	nop

c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00063e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063ec:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00063f3:	19 c0                	sbb    eax,eax
c00063f5:	83 e0 80             	and    eax,0xffffff80
c00063f8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00063fc:	e6 70                	out    0x70,al
c00063fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006402:	e6 71                	out    0x71,al
c0006404:	c3                   	ret    
c0006405:	90                   	nop

c0006406 <Computer::handleNMI()>:
c0006406:	56                   	push   esi
c0006407:	53                   	push   ebx
c0006408:	83 ec 10             	sub    esp,0x10
c000640b:	e4 92                	in     al,0x92
c000640d:	89 c6                	mov    esi,eax
c000640f:	e4 61                	in     al,0x61
c0006411:	68 29 cc 01 c0       	push   0xc001cc29
c0006416:	88 c3                	mov    bl,al
c0006418:	e8 f7 35 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000641d:	83 c4 10             	add    esp,0x10
c0006420:	83 e6 10             	and    esi,0x10
c0006423:	75 0d                	jne    c0006432 <Computer::handleNMI()+0x2c>
c0006425:	f6 c3 40             	test   bl,0x40
c0006428:	75 1d                	jne    c0006447 <Computer::handleNMI()+0x41>
c000642a:	84 db                	test   bl,bl
c000642c:	78 2d                	js     c000645b <Computer::handleNMI()+0x55>
c000642e:	58                   	pop    eax
c000642f:	5b                   	pop    ebx
c0006430:	5e                   	pop    esi
c0006431:	c3                   	ret    
c0006432:	83 ec 0c             	sub    esp,0xc
c0006435:	68 3a cc 01 c0       	push   0xc001cc3a
c000643a:	e8 28 91 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000643f:	83 c4 10             	add    esp,0x10
c0006442:	f6 c3 40             	test   bl,0x40
c0006445:	74 e3                	je     c000642a <Computer::handleNMI()+0x24>
c0006447:	83 ec 0c             	sub    esp,0xc
c000644a:	68 47 cc 01 c0       	push   0xc001cc47
c000644f:	e8 13 91 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0006454:	83 c4 10             	add    esp,0x10
c0006457:	84 db                	test   bl,bl
c0006459:	79 d3                	jns    c000642e <Computer::handleNMI()+0x28>
c000645b:	c7 44 24 10 51 cc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cc51
c0006463:	5a                   	pop    edx
c0006464:	5b                   	pop    ebx
c0006465:	5e                   	pop    esi
c0006466:	e9 fc 90 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c000646b:	90                   	nop

c000646c <Computer::setDiskActivityLight(int, bool)>:
c000646c:	56                   	push   esi
c000646d:	53                   	push   ebx
c000646e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006472:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0006477:	77 1b                	ja     c0006494 <Computer::setDiskActivityLight(int, bool)+0x28>
c0006479:	e4 92                	in     al,0x92
c000647b:	bb 40 00 00 00       	mov    ebx,0x40
c0006480:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0006484:	89 da                	mov    edx,ebx
c0006486:	d3 e2                	shl    edx,cl
c0006488:	89 f1                	mov    ecx,esi
c000648a:	f7 d2                	not    edx
c000648c:	d3 e3                	shl    ebx,cl
c000648e:	21 d0                	and    eax,edx
c0006490:	09 d8                	or     eax,ebx
c0006492:	e6 92                	out    0x92,al
c0006494:	5b                   	pop    ebx
c0006495:	5e                   	pop    esi
c0006496:	c3                   	ret    
c0006497:	90                   	nop

c0006498 <GDTEntry::setBase(unsigned int)>:
c0006498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000649c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00064a6:	c1 e9 10             	shr    ecx,0x10
c00064a9:	c1 e8 18             	shr    eax,0x18
c00064ac:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00064af:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00064b2:	c3                   	ret    
c00064b3:	90                   	nop

c00064b4 <GDTEntry::setLimit(unsigned int)>:
c00064b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00064b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064bc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00064bf:	66 89 01             	mov    WORD PTR [ecx],ax
c00064c2:	83 e2 f0             	and    edx,0xfffffff0
c00064c5:	c1 e8 10             	shr    eax,0x10
c00064c8:	83 e0 0f             	and    eax,0xf
c00064cb:	09 d0                	or     eax,edx
c00064cd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00064d0:	c3                   	ret    
c00064d1:	90                   	nop

c00064d2 <GDT::GDT()>:
c00064d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00064dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00064e6:	90                   	nop
c00064e7:	c3                   	ret    

c00064e8 <GDT::addEntry(GDTEntry)>:
c00064e8:	53                   	push   ebx
c00064e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00064ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064f1:	8b 02                	mov    eax,DWORD PTR [edx]
c00064f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00064f7:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00064fb:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00064ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0006502:	c1 e0 03             	shl    eax,0x3
c0006505:	89 0a                	mov    DWORD PTR [edx],ecx
c0006507:	5b                   	pop    ebx
c0006508:	c3                   	ret    
c0006509:	90                   	nop

c000650a <GDT::getNumberOfEntries()>:
c000650a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000650e:	8b 00                	mov    eax,DWORD PTR [eax]
c0006510:	c3                   	ret    
c0006511:	90                   	nop

c0006512 <GDT::flush()>:
c0006512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006516:	8b 10                	mov    edx,DWORD PTR [eax]
c0006518:	83 c0 04             	add    eax,0x4
c000651b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0006522:	a3 b2 f5 01 c0       	mov    ds:0xc001f5b2,eax
c0006527:	66 89 15 b0 f5 01 c0 	mov    WORD PTR ds:0xc001f5b0,dx
c000652e:	e9 4a 9e ff ff       	jmp    c000037d <loadGDT>
c0006533:	90                   	nop

c0006534 <GDT::setup()>:
c0006534:	57                   	push   edi
c0006535:	56                   	push   esi
c0006536:	53                   	push   ebx
c0006537:	83 ec 40             	sub    esp,0x40
c000653a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000653e:	6a 00                	push   0x0
c0006540:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006544:	56                   	push   esi
c0006545:	e8 4e ff ff ff       	call   c0006498 <GDTEntry::setBase(unsigned int)>
c000654a:	6a 00                	push   0x0
c000654c:	56                   	push   esi
c000654d:	e8 62 ff ff ff       	call   c00064b4 <GDTEntry::setLimit(unsigned int)>
c0006552:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000655a:	6a 00                	push   0x0
c000655c:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006560:	56                   	push   esi
c0006561:	e8 32 ff ff ff       	call   c0006498 <GDTEntry::setBase(unsigned int)>
c0006566:	68 ff ff ff 00       	push   0xffffff
c000656b:	56                   	push   esi
c000656c:	e8 43 ff ff ff       	call   c00064b4 <GDTEntry::setLimit(unsigned int)>
c0006571:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006575:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000657a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000657f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006583:	83 c4 20             	add    esp,0x20
c0006586:	6a 00                	push   0x0
c0006588:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000658c:	56                   	push   esi
c000658d:	e8 06 ff ff ff       	call   c0006498 <GDTEntry::setBase(unsigned int)>
c0006592:	68 ff ff ff 00       	push   0xffffff
c0006597:	56                   	push   esi
c0006598:	e8 17 ff ff ff       	call   c00064b4 <GDTEntry::setLimit(unsigned int)>
c000659d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00065a1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00065a5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00065a9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00065ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00065b1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00065b6:	0d 00 92 c0 00       	or     eax,0xc09200
c00065bb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00065bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00065c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00065c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00065cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00065cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00065d3:	89 fa                	mov    edx,edi
c00065d5:	80 cc 60             	or     ah,0x60
c00065d8:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00065de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00065e2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00065e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00065ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065ee:	80 cc 60             	or     ah,0x60
c00065f1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00065f5:	89 f8                	mov    eax,edi
c00065f7:	25 ff ff 00 ff       	and    eax,0xff00ffff
c00065fc:	09 d0                	or     eax,edx
c00065fe:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006602:	89 c7                	mov    edi,eax
c0006604:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006608:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000660c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006610:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006614:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000661a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000661e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006623:	09 d0                	or     eax,edx
c0006625:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006629:	83 c4 0c             	add    esp,0xc
c000662c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006630:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006634:	53                   	push   ebx
c0006635:	e8 ae fe ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c000663a:	83 c4 0c             	add    esp,0xc
c000663d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006641:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006645:	53                   	push   ebx
c0006646:	e8 9d fe ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c000664b:	83 c4 0c             	add    esp,0xc
c000664e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006652:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006656:	53                   	push   ebx
c0006657:	e8 8c fe ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c000665c:	83 c4 0c             	add    esp,0xc
c000665f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006663:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006667:	53                   	push   ebx
c0006668:	e8 7b fe ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c000666d:	83 c4 0c             	add    esp,0xc
c0006670:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006678:	53                   	push   ebx
c0006679:	e8 6a fe ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c000667e:	83 c4 0c             	add    esp,0xc
c0006681:	57                   	push   edi
c0006682:	56                   	push   esi
c0006683:	53                   	push   ebx
c0006684:	e8 5f fe ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c0006689:	83 c4 0c             	add    esp,0xc
c000668c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006690:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006694:	53                   	push   ebx
c0006695:	e8 4e fe ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c000669a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000669d:	e8 70 fe ff ff       	call   c0006512 <GDT::flush()>
c00066a2:	83 c4 50             	add    esp,0x50
c00066a5:	5b                   	pop    ebx
c00066a6:	5e                   	pop    esi
c00066a7:	5f                   	pop    edi
c00066a8:	c3                   	ret    

c00066a9 <idleFunction(void*)>:
c00066a9:	83 ec 0c             	sub    esp,0xc
c00066ac:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00066b1:	48                   	dec    eax
c00066b2:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00066b7:	75 01                	jne    c00066ba <idleFunction(void*)+0x11>
c00066b9:	fb                   	sti    
c00066ba:	f4                   	hlt    
c00066bb:	e8 62 53 01 00       	call   c001ba22 <idleCommon()>
c00066c0:	eb f8                	jmp    c00066ba <idleFunction(void*)+0x11>
c00066c2:	66 90                	xchg   ax,ax

c00066c4 <IDTEntry::IDTEntry(bool)>:
c00066c4:	83 ec 04             	sub    esp,0x4
c00066c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00066cb:	88 04 24             	mov    BYTE PTR [esp],al
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00066d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066dc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00066e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00066e7:	83 e2 f0             	and    edx,0xfffffff0
c00066ea:	83 ca 0e             	or     edx,0xe
c00066ed:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00066f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00066f7:	83 e2 ef             	and    edx,0xffffffef
c00066fa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00066fd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0006701:	74 05                	je     c0006708 <IDTEntry::IDTEntry(bool)+0x44>
c0006703:	b2 03                	mov    dl,0x3
c0006705:	eb 05                	jmp    c000670c <IDTEntry::IDTEntry(bool)+0x48>
c0006707:	90                   	nop
c0006708:	b2 00                	mov    dl,0x0
c000670a:	66 90                	xchg   ax,ax
c000670c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006710:	83 e2 03             	and    edx,0x3
c0006713:	88 d1                	mov    cl,dl
c0006715:	c1 e1 05             	shl    ecx,0x5
c0006718:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000671b:	83 e2 9f             	and    edx,0xffffff9f
c000671e:	09 ca                	or     edx,ecx
c0006720:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006727:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000672a:	83 ca 80             	or     edx,0xffffff80
c000672d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006730:	90                   	nop
c0006731:	83 c4 04             	add    esp,0x4
c0006734:	c3                   	ret    
c0006735:	90                   	nop

c0006736 <IDTEntry::setOffset(unsigned int)>:
c0006736:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000673a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673e:	66 89 02             	mov    WORD PTR [edx],ax
c0006741:	c1 e8 10             	shr    eax,0x10
c0006744:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0006748:	c3                   	ret    
c0006749:	90                   	nop
c000674a:	66 90                	xchg   ax,ax

c000674c <IDT::IDT()>:
c000674c:	90                   	nop
c000674d:	c3                   	ret    

c000674e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000674e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006752:	83 c0 30             	add    eax,0x30
c0006755:	c3                   	ret    

c0006756 <IDT::addEntry(IDTEntry, int)>:
c0006756:	53                   	push   ebx
c0006757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000675f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006763:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006767:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000676a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000676e:	5b                   	pop    ebx
c000676f:	c3                   	ret    

c0006770 <IDT::addEntry(int, void (*)(), bool)>:
c0006770:	53                   	push   ebx
c0006771:	83 ec 10             	sub    esp,0x10
c0006774:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0006779:	50                   	push   eax
c000677a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000677e:	53                   	push   ebx
c000677f:	e8 40 ff ff ff       	call   c00066c4 <IDTEntry::IDTEntry(bool)>
c0006784:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006788:	53                   	push   ebx
c0006789:	e8 a8 ff ff ff       	call   c0006736 <IDTEntry::setOffset(unsigned int)>
c000678e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0006792:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006796:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000679a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000679e:	e8 b3 ff ff ff       	call   c0006756 <IDT::addEntry(IDTEntry, int)>
c00067a3:	83 c4 30             	add    esp,0x30
c00067a6:	5b                   	pop    ebx
c00067a7:	c3                   	ret    

c00067a8 <IDT::flush()>:
c00067a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00067ac:	66 c7 05 b8 f5 01 c0 ff 07 	mov    WORD PTR ds:0xc001f5b8,0x7ff
c00067b5:	a3 ba f5 01 c0       	mov    ds:0xc001f5ba,eax
c00067ba:	0f 01 1d b8 f5 01 c0 	lidtd  ds:0xc001f5b8
c00067c1:	c3                   	ret    

c00067c2 <IDT::setup()>:
c00067c2:	57                   	push   edi
c00067c3:	56                   	push   esi
c00067c4:	53                   	push   ebx
c00067c5:	83 ec 10             	sub    esp,0x10
c00067c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00067cc:	6a 00                	push   0x0
c00067ce:	68 30 b2 01 c0       	push   0xc001b230
c00067d3:	6a 00                	push   0x0
c00067d5:	53                   	push   ebx
c00067d6:	e8 95 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00067db:	6a 00                	push   0x0
c00067dd:	68 40 b2 01 c0       	push   0xc001b240
c00067e2:	6a 01                	push   0x1
c00067e4:	53                   	push   ebx
c00067e5:	e8 86 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00067ea:	83 c4 20             	add    esp,0x20
c00067ed:	6a 00                	push   0x0
c00067ef:	68 4a b2 01 c0       	push   0xc001b24a
c00067f4:	6a 02                	push   0x2
c00067f6:	53                   	push   ebx
c00067f7:	e8 74 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00067fc:	6a 00                	push   0x0
c00067fe:	68 54 b2 01 c0       	push   0xc001b254
c0006803:	6a 03                	push   0x3
c0006805:	53                   	push   ebx
c0006806:	e8 65 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000680b:	83 c4 20             	add    esp,0x20
c000680e:	6a 00                	push   0x0
c0006810:	68 5e b2 01 c0       	push   0xc001b25e
c0006815:	6a 04                	push   0x4
c0006817:	53                   	push   ebx
c0006818:	e8 53 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000681d:	6a 00                	push   0x0
c000681f:	68 68 b2 01 c0       	push   0xc001b268
c0006824:	6a 05                	push   0x5
c0006826:	53                   	push   ebx
c0006827:	e8 44 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000682c:	83 c4 20             	add    esp,0x20
c000682f:	6a 00                	push   0x0
c0006831:	68 72 b2 01 c0       	push   0xc001b272
c0006836:	6a 06                	push   0x6
c0006838:	53                   	push   ebx
c0006839:	e8 32 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000683e:	6a 00                	push   0x0
c0006840:	68 7c b2 01 c0       	push   0xc001b27c
c0006845:	6a 07                	push   0x7
c0006847:	53                   	push   ebx
c0006848:	e8 23 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000684d:	83 c4 20             	add    esp,0x20
c0006850:	6a 00                	push   0x0
c0006852:	68 86 b2 01 c0       	push   0xc001b286
c0006857:	6a 08                	push   0x8
c0006859:	53                   	push   ebx
c000685a:	e8 11 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000685f:	6a 00                	push   0x0
c0006861:	68 8e b2 01 c0       	push   0xc001b28e
c0006866:	6a 09                	push   0x9
c0006868:	53                   	push   ebx
c0006869:	e8 02 ff ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000686e:	83 c4 20             	add    esp,0x20
c0006871:	6a 00                	push   0x0
c0006873:	68 98 b2 01 c0       	push   0xc001b298
c0006878:	6a 0a                	push   0xa
c000687a:	53                   	push   ebx
c000687b:	e8 f0 fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006880:	6a 00                	push   0x0
c0006882:	68 a0 b2 01 c0       	push   0xc001b2a0
c0006887:	6a 0b                	push   0xb
c0006889:	53                   	push   ebx
c000688a:	e8 e1 fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c000688f:	83 c4 20             	add    esp,0x20
c0006892:	6a 00                	push   0x0
c0006894:	68 a8 b2 01 c0       	push   0xc001b2a8
c0006899:	6a 0c                	push   0xc
c000689b:	53                   	push   ebx
c000689c:	e8 cf fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00068a1:	6a 00                	push   0x0
c00068a3:	68 b0 b2 01 c0       	push   0xc001b2b0
c00068a8:	6a 0d                	push   0xd
c00068aa:	53                   	push   ebx
c00068ab:	e8 c0 fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00068b0:	83 c4 20             	add    esp,0x20
c00068b3:	6a 00                	push   0x0
c00068b5:	68 b8 b2 01 c0       	push   0xc001b2b8
c00068ba:	6a 0e                	push   0xe
c00068bc:	53                   	push   ebx
c00068bd:	e8 ae fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00068c2:	6a 00                	push   0x0
c00068c4:	68 c0 b2 01 c0       	push   0xc001b2c0
c00068c9:	6a 0f                	push   0xf
c00068cb:	53                   	push   ebx
c00068cc:	e8 9f fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00068d1:	83 c4 20             	add    esp,0x20
c00068d4:	6a 00                	push   0x0
c00068d6:	68 ca b2 01 c0       	push   0xc001b2ca
c00068db:	6a 10                	push   0x10
c00068dd:	53                   	push   ebx
c00068de:	e8 8d fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00068e3:	6a 00                	push   0x0
c00068e5:	68 d4 b2 01 c0       	push   0xc001b2d4
c00068ea:	6a 11                	push   0x11
c00068ec:	53                   	push   ebx
c00068ed:	e8 7e fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00068f2:	83 c4 20             	add    esp,0x20
c00068f5:	6a 00                	push   0x0
c00068f7:	68 de b2 01 c0       	push   0xc001b2de
c00068fc:	6a 12                	push   0x12
c00068fe:	53                   	push   ebx
c00068ff:	e8 6c fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006904:	6a 01                	push   0x1
c0006906:	68 78 b3 01 c0       	push   0xc001b378
c000690b:	6a 60                	push   0x60
c000690d:	53                   	push   ebx
c000690e:	e8 5d fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006913:	83 c4 20             	add    esp,0x20
c0006916:	6a 00                	push   0x0
c0006918:	68 7f b3 01 c0       	push   0xc001b37f
c000691d:	6a 20                	push   0x20
c000691f:	53                   	push   ebx
c0006920:	e8 4b fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006925:	6a 00                	push   0x0
c0006927:	68 6a b3 01 c0       	push   0xc001b36a
c000692c:	6a 21                	push   0x21
c000692e:	53                   	push   ebx
c000692f:	e8 3c fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006934:	83 c4 20             	add    esp,0x20
c0006937:	6a 00                	push   0x0
c0006939:	68 71 b3 01 c0       	push   0xc001b371
c000693e:	6a 22                	push   0x22
c0006940:	53                   	push   ebx
c0006941:	e8 2a fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006946:	6a 00                	push   0x0
c0006948:	68 e8 b2 01 c0       	push   0xc001b2e8
c000694d:	6a 23                	push   0x23
c000694f:	53                   	push   ebx
c0006950:	e8 1b fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006955:	83 c4 20             	add    esp,0x20
c0006958:	6a 00                	push   0x0
c000695a:	68 f2 b2 01 c0       	push   0xc001b2f2
c000695f:	6a 24                	push   0x24
c0006961:	53                   	push   ebx
c0006962:	e8 09 fe ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006967:	6a 00                	push   0x0
c0006969:	68 fc b2 01 c0       	push   0xc001b2fc
c000696e:	6a 25                	push   0x25
c0006970:	53                   	push   ebx
c0006971:	e8 fa fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006976:	83 c4 20             	add    esp,0x20
c0006979:	6a 00                	push   0x0
c000697b:	68 06 b3 01 c0       	push   0xc001b306
c0006980:	6a 26                	push   0x26
c0006982:	53                   	push   ebx
c0006983:	e8 e8 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006988:	6a 00                	push   0x0
c000698a:	68 10 b3 01 c0       	push   0xc001b310
c000698f:	6a 27                	push   0x27
c0006991:	53                   	push   ebx
c0006992:	e8 d9 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006997:	83 c4 20             	add    esp,0x20
c000699a:	6a 00                	push   0x0
c000699c:	68 1a b3 01 c0       	push   0xc001b31a
c00069a1:	6a 28                	push   0x28
c00069a3:	53                   	push   ebx
c00069a4:	e8 c7 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00069a9:	6a 00                	push   0x0
c00069ab:	68 24 b3 01 c0       	push   0xc001b324
c00069b0:	6a 29                	push   0x29
c00069b2:	53                   	push   ebx
c00069b3:	e8 b8 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00069b8:	83 c4 20             	add    esp,0x20
c00069bb:	6a 00                	push   0x0
c00069bd:	68 2e b3 01 c0       	push   0xc001b32e
c00069c2:	6a 2a                	push   0x2a
c00069c4:	53                   	push   ebx
c00069c5:	e8 a6 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00069ca:	6a 00                	push   0x0
c00069cc:	68 38 b3 01 c0       	push   0xc001b338
c00069d1:	6a 2b                	push   0x2b
c00069d3:	53                   	push   ebx
c00069d4:	e8 97 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00069d9:	83 c4 20             	add    esp,0x20
c00069dc:	6a 00                	push   0x0
c00069de:	68 42 b3 01 c0       	push   0xc001b342
c00069e3:	6a 2c                	push   0x2c
c00069e5:	53                   	push   ebx
c00069e6:	e8 85 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00069eb:	6a 00                	push   0x0
c00069ed:	68 4c b3 01 c0       	push   0xc001b34c
c00069f2:	6a 2d                	push   0x2d
c00069f4:	53                   	push   ebx
c00069f5:	e8 76 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c00069fa:	83 c4 20             	add    esp,0x20
c00069fd:	6a 00                	push   0x0
c00069ff:	68 56 b3 01 c0       	push   0xc001b356
c0006a04:	6a 2e                	push   0x2e
c0006a06:	53                   	push   ebx
c0006a07:	e8 64 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a0c:	6a 00                	push   0x0
c0006a0e:	68 60 b3 01 c0       	push   0xc001b360
c0006a13:	6a 2f                	push   0x2f
c0006a15:	53                   	push   ebx
c0006a16:	e8 55 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a1b:	83 c4 20             	add    esp,0x20
c0006a1e:	6a 00                	push   0x0
c0006a20:	68 b6 b3 01 c0       	push   0xc001b3b6
c0006a25:	6a 30                	push   0x30
c0006a27:	53                   	push   ebx
c0006a28:	e8 43 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a2d:	6a 00                	push   0x0
c0006a2f:	68 c0 b3 01 c0       	push   0xc001b3c0
c0006a34:	6a 31                	push   0x31
c0006a36:	53                   	push   ebx
c0006a37:	e8 34 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a3c:	83 c4 20             	add    esp,0x20
c0006a3f:	6a 00                	push   0x0
c0006a41:	68 ca b3 01 c0       	push   0xc001b3ca
c0006a46:	6a 32                	push   0x32
c0006a48:	53                   	push   ebx
c0006a49:	e8 22 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a4e:	6a 00                	push   0x0
c0006a50:	68 d4 b3 01 c0       	push   0xc001b3d4
c0006a55:	6a 33                	push   0x33
c0006a57:	53                   	push   ebx
c0006a58:	e8 13 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a5d:	83 c4 20             	add    esp,0x20
c0006a60:	6a 00                	push   0x0
c0006a62:	68 de b3 01 c0       	push   0xc001b3de
c0006a67:	6a 34                	push   0x34
c0006a69:	53                   	push   ebx
c0006a6a:	e8 01 fd ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a6f:	6a 00                	push   0x0
c0006a71:	68 e8 b3 01 c0       	push   0xc001b3e8
c0006a76:	6a 35                	push   0x35
c0006a78:	53                   	push   ebx
c0006a79:	e8 f2 fc ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a7e:	83 c4 20             	add    esp,0x20
c0006a81:	6a 00                	push   0x0
c0006a83:	68 f2 b3 01 c0       	push   0xc001b3f2
c0006a88:	6a 36                	push   0x36
c0006a8a:	53                   	push   ebx
c0006a8b:	e8 e0 fc ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a90:	6a 00                	push   0x0
c0006a92:	68 fc b3 01 c0       	push   0xc001b3fc
c0006a97:	6a 37                	push   0x37
c0006a99:	53                   	push   ebx
c0006a9a:	e8 d1 fc ff ff       	call   c0006770 <IDT::addEntry(int, void (*)(), bool)>
c0006a9f:	83 c4 1c             	add    esp,0x1c
c0006aa2:	6a 03                	push   0x3
c0006aa4:	6a 02                	push   0x2
c0006aa6:	ff 35 94 f6 01 c0    	push   DWORD PTR ds:0xc001f694
c0006aac:	e8 39 24 00 00       	call   c0008eea <VAS::allocatePages(int, int)>
c0006ab1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0006ab8:	89 c6                	mov    esi,eax
c0006aba:	e8 92 01 00 00       	call   c0006c51 <malloc>
c0006abf:	81 c6 00 20 00 00    	add    esi,0x2000
c0006ac5:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ac8:	89 c7                	mov    edi,eax
c0006aca:	e8 01 16 00 00       	call   c00080d0 <TSS::TSS()>
c0006acf:	83 c4 0c             	add    esp,0xc
c0006ad2:	68 86 b2 01 c0       	push   0xc001b286
c0006ad7:	56                   	push   esi
c0006ad8:	57                   	push   edi
c0006ad9:	e8 36 16 00 00       	call   c0008114 <TSS::setup(unsigned long, unsigned long)>
c0006ade:	89 c6                	mov    esi,eax
c0006ae0:	58                   	pop    eax
c0006ae1:	5a                   	pop    edx
c0006ae2:	6a 00                	push   0x0
c0006ae4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ae8:	50                   	push   eax
c0006ae9:	e8 d6 fb ff ff       	call   c00066c4 <IDTEntry::IDTEntry(bool)>
c0006aee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006af2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0006af7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006afe:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006b08:	80 ce 05             	or     dh,0x5
c0006b0b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006b0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006b16:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006b19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b1c:	e8 87 fc ff ff       	call   c00067a8 <IDT::flush()>
c0006b21:	83 c4 20             	add    esp,0x20
c0006b24:	5b                   	pop    ebx
c0006b25:	5e                   	pop    esi
c0006b26:	5f                   	pop    edi
c0006b27:	c3                   	ret    

c0006b28 <sbrk>:
c0006b28:	55                   	push   ebp
c0006b29:	57                   	push   edi
c0006b2a:	56                   	push   esi
c0006b2b:	53                   	push   ebx
c0006b2c:	83 ec 1c             	sub    esp,0x1c
c0006b2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006b33:	85 c0                	test   eax,eax
c0006b35:	74 5f                	je     c0006b96 <sbrk+0x6e>
c0006b37:	78 64                	js     c0006b9d <sbrk+0x75>
c0006b39:	8b 15 78 ed 01 c0    	mov    edx,DWORD PTR ds:0xc001ed78
c0006b3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006b43:	05 ff 0f 00 00       	add    eax,0xfff
c0006b48:	89 c5                	mov    ebp,eax
c0006b4a:	78 69                	js     c0006bb5 <sbrk+0x8d>
c0006b4c:	c1 fd 0c             	sar    ebp,0xc
c0006b4f:	bb 00 00 00 00       	mov    ebx,0x0
c0006b54:	8b 35 94 f6 01 c0    	mov    esi,DWORD PTR ds:0xc001f694
c0006b5a:	8b 3d 78 ed 01 c0    	mov    edi,DWORD PTR ds:0xc001ed78
c0006b60:	e8 b9 04 00 00       	call   c000701e <Phys::allocatePage()>
c0006b65:	68 01 04 00 00       	push   0x401
c0006b6a:	57                   	push   edi
c0006b6b:	50                   	push   eax
c0006b6c:	56                   	push   esi
c0006b6d:	e8 74 22 00 00       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0006b72:	81 05 78 ed 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ed78,0x1000
c0006b7c:	43                   	inc    ebx
c0006b7d:	83 c4 10             	add    esp,0x10
c0006b80:	39 dd                	cmp    ebp,ebx
c0006b82:	75 d0                	jne    c0006b54 <sbrk+0x2c>
c0006b84:	0f 20 d8             	mov    eax,cr3
c0006b87:	0f 22 d8             	mov    cr3,eax
c0006b8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b8e:	83 c4 1c             	add    esp,0x1c
c0006b91:	5b                   	pop    ebx
c0006b92:	5e                   	pop    esi
c0006b93:	5f                   	pop    edi
c0006b94:	5d                   	pop    ebp
c0006b95:	c3                   	ret    
c0006b96:	a1 78 ed 01 c0       	mov    eax,ds:0xc001ed78
c0006b9b:	eb f1                	jmp    c0006b8e <sbrk+0x66>
c0006b9d:	83 ec 08             	sub    esp,0x8
c0006ba0:	50                   	push   eax
c0006ba1:	68 f4 cc 01 c0       	push   0xc001ccf4
c0006ba6:	e8 69 2e 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0006bab:	83 c4 10             	add    esp,0x10
c0006bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006bb3:	eb d9                	jmp    c0006b8e <sbrk+0x66>
c0006bb5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006bbb:	eb 8f                	jmp    c0006b4c <sbrk+0x24>

c0006bbd <mmap>:
c0006bbd:	83 ec 18             	sub    esp,0x18
c0006bc0:	68 24 cd 01 c0       	push   0xc001cd24
c0006bc5:	e8 9d 89 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0006bca:	b8 00 00 00 00       	mov    eax,0x0
c0006bcf:	83 c4 1c             	add    esp,0x1c
c0006bd2:	c3                   	ret    

c0006bd3 <munmap>:
c0006bd3:	83 ec 18             	sub    esp,0x18
c0006bd6:	68 29 cd 01 c0       	push   0xc001cd29
c0006bdb:	e8 87 89 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0006be0:	b8 00 00 00 00       	mov    eax,0x0
c0006be5:	83 c4 1c             	add    esp,0x1c
c0006be8:	c3                   	ret    

c0006be9 <liballoc_lock()>:
c0006be9:	fa                   	cli    
c0006bea:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0006bf0:	b8 00 00 00 00       	mov    eax,0x0
c0006bf5:	c3                   	ret    

c0006bf6 <liballoc_unlock()>:
c0006bf6:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0006bfb:	48                   	dec    eax
c0006bfc:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0006c01:	75 01                	jne    c0006c04 <liballoc_unlock()+0xe>
c0006c03:	fb                   	sti    
c0006c04:	b8 00 00 00 00       	mov    eax,0x0
c0006c09:	c3                   	ret    

c0006c0a <liballoc_alloc(int)>:
c0006c0a:	83 ec 10             	sub    esp,0x10
c0006c0d:	6a 01                	push   0x1
c0006c0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006c13:	ff 35 94 f6 01 c0    	push   DWORD PTR ds:0xc001f694
c0006c19:	e8 cc 22 00 00       	call   c0008eea <VAS::allocatePages(int, int)>
c0006c1e:	83 c4 1c             	add    esp,0x1c
c0006c21:	c3                   	ret    

c0006c22 <liballoc_free(void*, int)>:
c0006c22:	83 ec 14             	sub    esp,0x14
c0006c25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006c29:	ff 35 94 f6 01 c0    	push   DWORD PTR ds:0xc001f694
c0006c2f:	e8 72 1f 00 00       	call   c0008ba6 <VAS::freeAllocatedPages(unsigned long)>
c0006c34:	b8 00 00 00 00       	mov    eax,0x0
c0006c39:	83 c4 1c             	add    esp,0x1c
c0006c3c:	c3                   	ret    

c0006c3d <realloc>:
c0006c3d:	83 ec 14             	sub    esp,0x14
c0006c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c48:	e8 04 a9 ff ff       	call   c0001551 <dlrealloc>
c0006c4d:	83 c4 1c             	add    esp,0x1c
c0006c50:	c3                   	ret    

c0006c51 <malloc>:
c0006c51:	83 ec 18             	sub    esp,0x18
c0006c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c58:	e8 b7 a3 ff ff       	call   c0001014 <dlmalloc>
c0006c5d:	83 c4 1c             	add    esp,0x1c
c0006c60:	c3                   	ret    

c0006c61 <free>:
c0006c61:	83 ec 18             	sub    esp,0x18
c0006c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c68:	e8 4c a0 ff ff       	call   c0000cb9 <dlfree>
c0006c6d:	83 c4 1c             	add    esp,0x1c
c0006c70:	c3                   	ret    

c0006c71 <rfree>:
c0006c71:	83 ec 18             	sub    esp,0x18
c0006c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c78:	e8 3c a0 ff ff       	call   c0000cb9 <dlfree>
c0006c7d:	83 c4 1c             	add    esp,0x1c
c0006c80:	c3                   	ret    

c0006c81 <calloc>:
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	83 ec 10             	sub    esp,0x10
c0006c86:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006c8a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006c8f:	53                   	push   ebx
c0006c90:	e8 bc ff ff ff       	call   c0006c51 <malloc>
c0006c95:	89 c6                	mov    esi,eax
c0006c97:	83 c4 0c             	add    esp,0xc
c0006c9a:	53                   	push   ebx
c0006c9b:	6a 00                	push   0x0
c0006c9d:	50                   	push   eax
c0006c9e:	e8 4d 98 ff ff       	call   c00004f0 <memset>
c0006ca3:	89 f0                	mov    eax,esi
c0006ca5:	83 c4 14             	add    esp,0x14
c0006ca8:	5b                   	pop    ebx
c0006ca9:	5e                   	pop    esi
c0006caa:	c3                   	ret    

c0006cab <Krnl::setBootMessage(char const*)>:
c0006cab:	57                   	push   edi
c0006cac:	56                   	push   esi
c0006cad:	53                   	push   ebx
c0006cae:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006cb4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006cbb:	68 9e 00 00 00       	push   0x9e
c0006cc0:	6a 00                	push   0x0
c0006cc2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006cc6:	56                   	push   esi
c0006cc7:	e8 24 98 ff ff       	call   c00004f0 <memset>
c0006ccc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006ccf:	e8 8c 98 ff ff       	call   c0000560 <strlen>
c0006cd4:	ba 50 00 00 00       	mov    edx,0x50
c0006cd9:	83 c4 10             	add    esp,0x10
c0006cdc:	29 c2                	sub    edx,eax
c0006cde:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006ce2:	d1 ea                	shr    edx,1
c0006ce4:	84 c0                	test   al,al
c0006ce6:	74 19                	je     c0006d01 <Krnl::setBootMessage(char const*)+0x56>
c0006ce8:	01 d2                	add    edx,edx
c0006cea:	43                   	inc    ebx
c0006ceb:	01 f2                	add    edx,esi
c0006ced:	80 cc 0f             	or     ah,0xf
c0006cf0:	83 c2 02             	add    edx,0x2
c0006cf3:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006cf7:	43                   	inc    ebx
c0006cf8:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006cfd:	84 c0                	test   al,al
c0006cff:	75 ec                	jne    c0006ced <Krnl::setBootMessage(char const*)+0x42>
c0006d01:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006d06:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d0d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006d13:	5b                   	pop    ebx
c0006d14:	5e                   	pop    esi
c0006d15:	5f                   	pop    edi
c0006d16:	c3                   	ret    

c0006d17 <kernel_main>:
c0006d17:	55                   	push   ebp
c0006d18:	57                   	push   edi
c0006d19:	bf f9 03 00 00       	mov    edi,0x3f9
c0006d1e:	56                   	push   esi
c0006d1f:	89 fa                	mov    edx,edi
c0006d21:	53                   	push   ebx
c0006d22:	31 f6                	xor    esi,esi
c0006d24:	83 ec 38             	sub    esp,0x38
c0006d27:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006d2c:	a3 c0 f5 01 c0       	mov    ds:0xc001f5c0,eax
c0006d31:	89 f0                	mov    eax,esi
c0006d33:	ee                   	out    dx,al
c0006d34:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006d39:	b0 80                	mov    al,0x80
c0006d3b:	89 da                	mov    edx,ebx
c0006d3d:	ee                   	out    dx,al
c0006d3e:	b1 03                	mov    cl,0x3
c0006d40:	ba f8 03 00 00       	mov    edx,0x3f8
c0006d45:	88 c8                	mov    al,cl
c0006d47:	ee                   	out    dx,al
c0006d48:	89 f0                	mov    eax,esi
c0006d4a:	89 fa                	mov    edx,edi
c0006d4c:	ee                   	out    dx,al
c0006d4d:	88 c8                	mov    al,cl
c0006d4f:	89 da                	mov    edx,ebx
c0006d51:	ee                   	out    dx,al
c0006d52:	b0 c7                	mov    al,0xc7
c0006d54:	ba fa 03 00 00       	mov    edx,0x3fa
c0006d59:	ee                   	out    dx,al
c0006d5a:	b0 0b                	mov    al,0xb
c0006d5c:	ba fc 03 00 00       	mov    edx,0x3fc
c0006d61:	ee                   	out    dx,al
c0006d62:	68 30 cd 01 c0       	push   0xc001cd30
c0006d67:	e8 a8 2c 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0006d6c:	0f be 05 80 ed 01 c0 	movsx  eax,BYTE PTR ds:0xc001ed80
c0006d73:	83 c4 10             	add    esp,0x10
c0006d76:	84 c0                	test   al,al
c0006d78:	74 5c                	je     c0006dd6 <kernel_main+0xbf>
c0006d7a:	31 db                	xor    ebx,ebx
c0006d7c:	bd 0a 00 00 00       	mov    ebp,0xa
c0006d81:	bf 05 00 00 00       	mov    edi,0x5
c0006d86:	31 f6                	xor    esi,esi
c0006d88:	eb 14                	jmp    c0006d9e <kernel_main+0x87>
c0006d8a:	47                   	inc    edi
c0006d8b:	bd 0a 00 00 00       	mov    ebp,0xa
c0006d90:	31 f6                	xor    esi,esi
c0006d92:	43                   	inc    ebx
c0006d93:	0f be 83 80 ed 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1280]
c0006d9a:	84 c0                	test   al,al
c0006d9c:	74 38                	je     c0006dd6 <kernel_main+0xbf>
c0006d9e:	80 be b6 ed 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe124a],0xdb
c0006da5:	0f 84 97 00 00 00    	je     c0006e42 <kernel_main+0x12b>
c0006dab:	3c 0d                	cmp    al,0xd
c0006dad:	74 e3                	je     c0006d92 <kernel_main+0x7b>
c0006daf:	3c 0a                	cmp    al,0xa
c0006db1:	74 d7                	je     c0006d8a <kernel_main+0x73>
c0006db3:	83 ec 0c             	sub    esp,0xc
c0006db6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006dba:	57                   	push   edi
c0006dbb:	43                   	inc    ebx
c0006dbc:	52                   	push   edx
c0006dbd:	46                   	inc    esi
c0006dbe:	6a 00                	push   0x0
c0006dc0:	6a 0e                	push   0xe
c0006dc2:	50                   	push   eax
c0006dc3:	e8 64 e6 00 00       	call   c001542c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0006dc8:	83 c4 20             	add    esp,0x20
c0006dcb:	0f be 83 80 ed 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1280]
c0006dd2:	84 c0                	test   al,al
c0006dd4:	75 c8                	jne    c0006d9e <kernel_main+0x87>
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006dde:	05 ff 0f 00 00       	add    eax,0xfff
c0006de3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006de8:	50                   	push   eax
c0006de9:	e8 82 03 00 00       	call   c0007170 <Phys::physicalMemorySetup(unsigned int)>
c0006dee:	e8 59 1b 00 00       	call   c000894c <Virt::virtualMemorySetup()>
c0006df3:	58                   	pop    eax
c0006df4:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006df8:	53                   	push   ebx
c0006df9:	e8 16 27 00 00       	call   c0009514 <VAS::VAS()>
c0006dfe:	89 1d 94 f6 01 c0    	mov    DWORD PTR ds:0xc001f694,ebx
c0006e04:	e8 17 92 ff ff       	call   c0000020 <callGlobalConstructors>
c0006e09:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0006e10:	e8 3c fe ff ff       	call   c0006c51 <malloc>
c0006e15:	89 04 24             	mov    DWORD PTR [esp],eax
c0006e18:	89 c6                	mov    esi,eax
c0006e1a:	e8 8b f0 ff ff       	call   c0005eaa <Computer::Computer()>
c0006e1f:	6a 00                	push   0x0
c0006e21:	89 35 a8 f5 01 c0    	mov    DWORD PTR ds:0xc001f5a8,esi
c0006e27:	6a 00                	push   0x0
c0006e29:	6a 00                	push   0x0
c0006e2b:	56                   	push   esi
c0006e2c:	e8 d3 f4 ff ff       	call   c0006304 <Computer::open(int, int, void*)>
c0006e31:	83 c4 14             	add    esp,0x14
c0006e34:	53                   	push   ebx
c0006e35:	e8 48 1e 00 00       	call   c0008c82 <VAS::~VAS()>
c0006e3a:	83 c4 3c             	add    esp,0x3c
c0006e3d:	5b                   	pop    ebx
c0006e3e:	5e                   	pop    esi
c0006e3f:	5f                   	pop    edi
c0006e40:	5d                   	pop    ebp
c0006e41:	c3                   	ret    
c0006e42:	31 d2                	xor    edx,edx
c0006e44:	8a 96 b5 ed 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe124b]
c0006e4a:	83 e2 fe             	and    edx,0xfffffffe
c0006e4d:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006e53:	0f 85 52 ff ff ff    	jne    c0006dab <kernel_main+0x94>
c0006e59:	45                   	inc    ebp
c0006e5a:	e9 4c ff ff ff       	jmp    c0006dab <kernel_main+0x94>

c0006e5f <Phys::allocateDMA(unsigned long)>:
c0006e5f:	55                   	push   ebp
c0006e60:	31 ed                	xor    ebp,ebp
c0006e62:	57                   	push   edi
c0006e63:	56                   	push   esi
c0006e64:	53                   	push   ebx
c0006e65:	31 db                	xor    ebx,ebx
c0006e67:	83 ec 1c             	sub    esp,0x1c
c0006e6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006e6e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006e76:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006e7c:	31 c0                	xor    eax,eax
c0006e7e:	c1 ef 0c             	shr    edi,0xc
c0006e81:	eb 19                	jmp    c0006e9c <Phys::allocateDMA(unsigned long)+0x3d>
c0006e83:	85 c0                	test   eax,eax
c0006e85:	75 06                	jne    c0006e8d <Phys::allocateDMA(unsigned long)+0x2e>
c0006e87:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006e8b:	89 dd                	mov    ebp,ebx
c0006e8d:	8d 70 01             	lea    esi,[eax+0x1]
c0006e90:	39 f7                	cmp    edi,esi
c0006e92:	74 33                	je     c0006ec7 <Phys::allocateDMA(unsigned long)+0x68>
c0006e94:	89 f0                	mov    eax,esi
c0006e96:	43                   	inc    ebx
c0006e97:	83 fb 0f             	cmp    ebx,0xf
c0006e9a:	7f 11                	jg     c0006ead <Phys::allocateDMA(unsigned long)+0x4e>
c0006e9c:	80 bb dc f5 01 c0 00 	cmp    BYTE PTR [ebx-0x3ffe0a24],0x0
c0006ea3:	74 de                	je     c0006e83 <Phys::allocateDMA(unsigned long)+0x24>
c0006ea5:	31 c0                	xor    eax,eax
c0006ea7:	43                   	inc    ebx
c0006ea8:	83 fb 0f             	cmp    ebx,0xf
c0006eab:	7e ef                	jle    c0006e9c <Phys::allocateDMA(unsigned long)+0x3d>
c0006ead:	83 ec 0c             	sub    esp,0xc
c0006eb0:	68 48 cd 01 c0       	push   0xc001cd48
c0006eb5:	e8 ad 86 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0006eba:	83 c4 10             	add    esp,0x10
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	83 c4 1c             	add    esp,0x1c
c0006ec2:	5b                   	pop    ebx
c0006ec3:	5e                   	pop    esi
c0006ec4:	5f                   	pop    edi
c0006ec5:	5d                   	pop    ebp
c0006ec6:	c3                   	ret    
c0006ec7:	89 e9                	mov    ecx,ebp
c0006ec9:	c1 f9 04             	sar    ecx,0x4
c0006ecc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ed0:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006ed4:	89 ca                	mov    edx,ecx
c0006ed6:	4a                   	dec    edx
c0006ed7:	79 03                	jns    c0006edc <Phys::allocateDMA(unsigned long)+0x7d>
c0006ed9:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006edc:	c1 fa 04             	sar    edx,0x4
c0006edf:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006ee3:	74 08                	je     c0006eed <Phys::allocateDMA(unsigned long)+0x8e>
c0006ee5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ee9:	31 c0                	xor    eax,eax
c0006eeb:	eb ba                	jmp    c0006ea7 <Phys::allocateDMA(unsigned long)+0x48>
c0006eed:	85 f6                	test   esi,esi
c0006eef:	74 15                	je     c0006f06 <Phys::allocateDMA(unsigned long)+0xa7>
c0006ef1:	8d 95 dc f5 01 c0    	lea    edx,[ebp-0x3ffe0a24]
c0006ef7:	8d 84 05 dd f5 01 c0 	lea    eax,[ebp+eax*1-0x3ffe0a23]
c0006efe:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006f01:	42                   	inc    edx
c0006f02:	39 d0                	cmp    eax,edx
c0006f04:	75 f8                	jne    c0006efe <Phys::allocateDMA(unsigned long)+0x9f>
c0006f06:	01 3d d4 f5 01 c0    	add    DWORD PTR ds:0xc001f5d4,edi
c0006f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f10:	85 c0                	test   eax,eax
c0006f12:	74 17                	je     c0006f2b <Phys::allocateDMA(unsigned long)+0xcc>
c0006f14:	83 ec 0c             	sub    esp,0xc
c0006f17:	68 48 cd 01 c0       	push   0xc001cd48
c0006f1c:	e8 46 86 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0006f21:	83 c4 10             	add    esp,0x10
c0006f24:	89 f0                	mov    eax,esi
c0006f26:	e9 6b ff ff ff       	jmp    c0006e96 <Phys::allocateDMA(unsigned long)+0x37>
c0006f2b:	c1 e5 0c             	shl    ebp,0xc
c0006f2e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006f34:	eb 89                	jmp    c0006ebf <Phys::allocateDMA(unsigned long)+0x60>

c0006f36 <Phys::freeDMA(unsigned long, unsigned long)>:
c0006f36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f3a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f44:	c1 ea 0c             	shr    edx,0xc
c0006f47:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006f4c:	29 15 d4 f5 01 c0    	sub    DWORD PTR ds:0xc001f5d4,edx
c0006f52:	c1 e8 0c             	shr    eax,0xc
c0006f55:	85 d2                	test   edx,edx
c0006f57:	74 0f                	je     c0006f68 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006f59:	05 dc f5 01 c0       	add    eax,0xc001f5dc
c0006f5e:	01 c2                	add    edx,eax
c0006f60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f63:	40                   	inc    eax
c0006f64:	39 d0                	cmp    eax,edx
c0006f66:	75 f8                	jne    c0006f60 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006f68:	c3                   	ret    

c0006f69 <Phys::setPageState(unsigned long, bool)>:
c0006f69:	56                   	push   esi
c0006f6a:	ba 01 00 00 00       	mov    edx,0x1
c0006f6f:	53                   	push   ebx
c0006f70:	8b 35 c4 ee 01 c0    	mov    esi,DWORD PTR ds:0xc001eec4
c0006f76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f7e:	89 c8                	mov    eax,ecx
c0006f80:	83 e1 07             	and    ecx,0x7
c0006f83:	c1 e8 03             	shr    eax,0x3
c0006f86:	d3 e3                	shl    ebx,cl
c0006f88:	01 c6                	add    esi,eax
c0006f8a:	d3 e2                	shl    edx,cl
c0006f8c:	f7 d2                	not    edx
c0006f8e:	20 16                	and    BYTE PTR [esi],dl
c0006f90:	03 05 c4 ee 01 c0    	add    eax,DWORD PTR ds:0xc001eec4
c0006f96:	08 18                	or     BYTE PTR [eax],bl
c0006f98:	5b                   	pop    ebx
c0006f99:	5e                   	pop    esi
c0006f9a:	c3                   	ret    

c0006f9b <Phys::getPageState(unsigned long)>:
c0006f9b:	53                   	push   ebx
c0006f9c:	8b 15 c4 ee 01 c0    	mov    edx,DWORD PTR ds:0xc001eec4
c0006fa2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006fa6:	31 db                	xor    ebx,ebx
c0006fa8:	89 c8                	mov    eax,ecx
c0006faa:	83 e1 07             	and    ecx,0x7
c0006fad:	c1 e8 03             	shr    eax,0x3
c0006fb0:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0006fb3:	89 d8                	mov    eax,ebx
c0006fb5:	5b                   	pop    ebx
c0006fb6:	d3 f8                	sar    eax,cl
c0006fb8:	83 e0 01             	and    eax,0x1
c0006fbb:	c3                   	ret    

c0006fbc <Phys::freePage(unsigned long)>:
c0006fbc:	53                   	push   ebx
c0006fbd:	83 ec 08             	sub    esp,0x8
c0006fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006fc4:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006fca:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006fd0:	76 3a                	jbe    c000700c <Phys::freePage(unsigned long)+0x50>
c0006fd2:	c1 e8 0c             	shr    eax,0xc
c0006fd5:	50                   	push   eax
c0006fd6:	89 c3                	mov    ebx,eax
c0006fd8:	e8 be ff ff ff       	call   c0006f9b <Phys::getPageState(unsigned long)>
c0006fdd:	5a                   	pop    edx
c0006fde:	84 c0                	test   al,al
c0006fe0:	74 19                	je     c0006ffb <Phys::freePage(unsigned long)+0x3f>
c0006fe2:	83 ec 08             	sub    esp,0x8
c0006fe5:	ff 0d d4 f5 01 c0    	dec    DWORD PTR ds:0xc001f5d4
c0006feb:	6a 00                	push   0x0
c0006fed:	53                   	push   ebx
c0006fee:	e8 76 ff ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c0006ff3:	83 c4 10             	add    esp,0x10
c0006ff6:	83 c4 08             	add    esp,0x8
c0006ff9:	5b                   	pop    ebx
c0006ffa:	c3                   	ret    
c0006ffb:	c7 44 24 10 ed cd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cded
c0007003:	83 c4 08             	add    esp,0x8
c0007006:	5b                   	pop    ebx
c0007007:	e9 5b 85 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c000700c:	68 00 10 00 00       	push   0x1000
c0007011:	50                   	push   eax
c0007012:	e8 1f ff ff ff       	call   c0006f36 <Phys::freeDMA(unsigned long, unsigned long)>
c0007017:	59                   	pop    ecx
c0007018:	5b                   	pop    ebx
c0007019:	83 c4 08             	add    esp,0x8
c000701c:	5b                   	pop    ebx
c000701d:	c3                   	ret    

c000701e <Phys::allocatePage()>:
c000701e:	56                   	push   esi
c000701f:	53                   	push   ebx
c0007020:	83 ec 14             	sub    esp,0x14
c0007023:	8b 35 c8 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f5c8
c0007029:	89 f3                	mov    ebx,esi
c000702b:	eb 0a                	jmp    c0007037 <Phys::allocatePage()+0x19>
c000702d:	89 1d c8 f5 01 c0    	mov    DWORD PTR ds:0xc001f5c8,ebx
c0007033:	39 de                	cmp    esi,ebx
c0007035:	74 24                	je     c000705b <Phys::allocatePage()+0x3d>
c0007037:	53                   	push   ebx
c0007038:	e8 5e ff ff ff       	call   c0006f9b <Phys::getPageState(unsigned long)>
c000703d:	5a                   	pop    edx
c000703e:	84 c0                	test   al,al
c0007040:	74 5f                	je     c00070a1 <Phys::allocatePage()+0x83>
c0007042:	43                   	inc    ebx
c0007043:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007049:	75 e2                	jne    c000702d <Phys::allocatePage()+0xf>
c000704b:	31 db                	xor    ebx,ebx
c000704d:	c7 05 c8 f5 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f5c8,0x0
c0007057:	39 de                	cmp    esi,ebx
c0007059:	75 dc                	jne    c0007037 <Phys::allocatePage()+0x19>
c000705b:	83 ec 0c             	sub    esp,0xc
c000705e:	80 35 ec f5 01 c0 01 	xor    BYTE PTR ds:0xc001f5ec,0x1
c0007065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000706a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000706d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007073:	50                   	push   eax
c0007074:	e8 bb 26 00 00       	call   c0009734 <VAS::scanForEviction()>
c0007079:	83 c4 10             	add    esp,0x10
c000707c:	85 c0                	test   eax,eax
c000707e:	75 3f                	jne    c00070bf <Phys::allocatePage()+0xa1>
c0007080:	83 ec 0c             	sub    esp,0xc
c0007083:	68 70 cd 01 c0       	push   0xc001cd70
c0007088:	e8 da 84 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000708d:	83 c4 10             	add    esp,0x10
c0007090:	8b 1d c8 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5c8
c0007096:	53                   	push   ebx
c0007097:	e8 ff fe ff ff       	call   c0006f9b <Phys::getPageState(unsigned long)>
c000709c:	5a                   	pop    edx
c000709d:	84 c0                	test   al,al
c000709f:	75 a1                	jne    c0007042 <Phys::allocatePage()+0x24>
c00070a1:	6a 01                	push   0x1
c00070a3:	53                   	push   ebx
c00070a4:	e8 c0 fe ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c00070a9:	a1 c8 f5 01 c0       	mov    eax,ds:0xc001f5c8
c00070ae:	5a                   	pop    edx
c00070af:	ff 05 d4 f5 01 c0    	inc    DWORD PTR ds:0xc001f5d4
c00070b5:	c1 e0 0c             	shl    eax,0xc
c00070b8:	59                   	pop    ecx
c00070b9:	83 c4 14             	add    esp,0x14
c00070bc:	5b                   	pop    ebx
c00070bd:	5e                   	pop    esi
c00070be:	c3                   	ret    
c00070bf:	83 ec 08             	sub    esp,0x8
c00070c2:	89 c2                	mov    edx,eax
c00070c4:	6a 01                	push   0x1
c00070c6:	c1 ea 0c             	shr    edx,0xc
c00070c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070cd:	52                   	push   edx
c00070ce:	e8 96 fe ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070da:	eb dd                	jmp    c00070b9 <Phys::allocatePage()+0x9b>

c00070dc <Phys::allocateContiguousPages(int)>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00070e3:	fa                   	cli    
c00070e4:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00070ea:	31 db                	xor    ebx,ebx
c00070ec:	85 db                	test   ebx,ebx
c00070ee:	75 11                	jne    c0007101 <Phys::allocateContiguousPages(int)+0x25>
c00070f0:	e8 29 ff ff ff       	call   c000701e <Phys::allocatePage()>
c00070f5:	83 fe 01             	cmp    esi,0x1
c00070f8:	89 c7                	mov    edi,eax
c00070fa:	74 21                	je     c000711d <Phys::allocateContiguousPages(int)+0x41>
c00070fc:	bb 01 00 00 00       	mov    ebx,0x1
c0007101:	e8 18 ff ff ff       	call   c000701e <Phys::allocatePage()>
c0007106:	89 da                	mov    edx,ebx
c0007108:	c1 e2 0c             	shl    edx,0xc
c000710b:	01 fa                	add    edx,edi
c000710d:	39 c2                	cmp    edx,eax
c000710f:	74 20                	je     c0007131 <Phys::allocateContiguousPages(int)+0x55>
c0007111:	bb 01 00 00 00       	mov    ebx,0x1
c0007116:	89 c7                	mov    edi,eax
c0007118:	83 fe 01             	cmp    esi,0x1
c000711b:	75 e4                	jne    c0007101 <Phys::allocateContiguousPages(int)+0x25>
c000711d:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0007122:	48                   	dec    eax
c0007123:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0007128:	75 01                	jne    c000712b <Phys::allocateContiguousPages(int)+0x4f>
c000712a:	fb                   	sti    
c000712b:	89 f8                	mov    eax,edi
c000712d:	5b                   	pop    ebx
c000712e:	5e                   	pop    esi
c000712f:	5f                   	pop    edi
c0007130:	c3                   	ret    
c0007131:	43                   	inc    ebx
c0007132:	39 f3                	cmp    ebx,esi
c0007134:	75 b6                	jne    c00070ec <Phys::allocateContiguousPages(int)+0x10>
c0007136:	eb e5                	jmp    c000711d <Phys::allocateContiguousPages(int)+0x41>

c0007138 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007138:	56                   	push   esi
c0007139:	53                   	push   ebx
c000713a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000713e:	39 1d cc f5 01 c0    	cmp    DWORD PTR ds:0xc001f5cc,ebx
c0007144:	73 06                	jae    c000714c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007146:	89 1d cc f5 01 c0    	mov    DWORD PTR ds:0xc001f5cc,ebx
c000714c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007150:	c1 eb 0c             	shr    ebx,0xc
c0007153:	c1 e8 0c             	shr    eax,0xc
c0007156:	39 d8                	cmp    eax,ebx
c0007158:	73 13                	jae    c000716d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000715a:	6a 00                	push   0x0
c000715c:	8d 70 01             	lea    esi,[eax+0x1]
c000715f:	50                   	push   eax
c0007160:	e8 04 fe ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c0007165:	5a                   	pop    edx
c0007166:	89 f0                	mov    eax,esi
c0007168:	59                   	pop    ecx
c0007169:	39 f3                	cmp    ebx,esi
c000716b:	75 ed                	jne    c000715a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000716d:	5b                   	pop    ebx
c000716e:	5e                   	pop    esi
c000716f:	c3                   	ret    

c0007170 <Phys::physicalMemorySetup(unsigned int)>:
c0007170:	55                   	push   ebp
c0007171:	57                   	push   edi
c0007172:	56                   	push   esi
c0007173:	53                   	push   ebx
c0007174:	31 db                	xor    ebx,ebx
c0007176:	83 ec 40             	sub    esp,0x40
c0007179:	6a 10                	push   0x10
c000717b:	6a 00                	push   0x0
c000717d:	68 dc f5 01 c0       	push   0xc001f5dc
c0007182:	e8 69 93 ff ff       	call   c00004f0 <memset>
c0007187:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000718b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007190:	05 00 10 00 00       	add    eax,0x1000
c0007195:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007199:	5a                   	pop    edx
c000719a:	59                   	pop    ecx
c000719b:	50                   	push   eax
c000719c:	68 03 ce 01 c0       	push   0xc001ce03
c00071a1:	e8 6e 28 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00071a6:	83 c4 10             	add    esp,0x10
c00071a9:	83 ec 08             	sub    esp,0x8
c00071ac:	6a 01                	push   0x1
c00071ae:	53                   	push   ebx
c00071af:	43                   	inc    ebx
c00071b0:	e8 b4 fd ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c00071b5:	83 c4 10             	add    esp,0x10
c00071b8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00071be:	75 e9                	jne    c00071a9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00071c0:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00071c6:	66 85 c0             	test   ax,ax
c00071c9:	0f 84 97 01 00 00    	je     c0007366 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00071cf:	89 c7                	mov    edi,eax
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	81 e7 ff ff 00 00    	and    edi,0xffff
c00071df:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00071e4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00071e8:	eb 15                	jmp    c00071ff <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00071ea:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071ee:	83 c3 18             	add    ebx,0x18
c00071f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00071f5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00071f9:	0f 84 77 01 00 00    	je     c0007376 <Phys::physicalMemorySetup(unsigned int)+0x206>
c00071ff:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007202:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007205:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007208:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000720c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007210:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007212:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007215:	01 f0                	add    eax,esi
c0007217:	55                   	push   ebp
c0007218:	11 fa                	adc    edx,edi
c000721a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000721e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007226:	50                   	push   eax
c0007227:	56                   	push   esi
c0007228:	68 a0 cd 01 c0       	push   0xc001cda0
c000722d:	e8 e2 27 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0007232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007236:	83 c4 10             	add    esp,0x10
c0007239:	09 f8                	or     eax,edi
c000723b:	0f 85 35 01 00 00    	jne    c0007376 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007241:	4d                   	dec    ebp
c0007242:	75 a6                	jne    c00071ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007244:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007248:	ba 00 00 08 00       	mov    edx,0x80000
c000724d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007251:	39 f2                	cmp    edx,esi
c0007253:	89 c1                	mov    ecx,eax
c0007255:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000725d:	19 f9                	sbb    ecx,edi
c000725f:	0f 82 a7 00 00 00    	jb     c000730c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007265:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007269:	89 c1                	mov    ecx,eax
c000726b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000726f:	0f 83 97 00 00 00    	jae    c000730c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007275:	ba 00 00 0a 00       	mov    edx,0xa0000
c000727a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000727e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007282:	39 fa                	cmp    edx,edi
c0007284:	19 e8                	sbb    eax,ebp
c0007286:	0f 82 9a 01 00 00    	jb     c0007426 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c000728c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007290:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007294:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000729a:	ba ff 1f 00 00       	mov    edx,0x1fff
c000729f:	83 d5 ff             	adc    ebp,0xffffffff
c00072a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00072a6:	31 c0                	xor    eax,eax
c00072a8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00072ac:	39 fa                	cmp    edx,edi
c00072ae:	89 c1                	mov    ecx,eax
c00072b0:	19 e9                	sbb    ecx,ebp
c00072b2:	0f 83 32 ff ff ff    	jae    c00071ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00072b8:	be 00 00 08 00       	mov    esi,0x80000
c00072bd:	51                   	push   ecx
c00072be:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00072c2:	57                   	push   edi
c00072c3:	56                   	push   esi
c00072c4:	68 c4 cd 01 c0       	push   0xc001cdc4
c00072c9:	e8 46 27 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00072ce:	5d                   	pop    ebp
c00072cf:	58                   	pop    eax
c00072d0:	57                   	push   edi
c00072d1:	56                   	push   esi
c00072d2:	e8 61 fe ff ff       	call   c0007138 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00072d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00072db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00072df:	83 c4 0c             	add    esp,0xc
c00072e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00072e6:	03 05 d8 f5 01 c0    	add    eax,DWORD PTR ds:0xc001f5d8
c00072ec:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00072f3:	a3 d8 f5 01 c0       	mov    ds:0xc001f5d8,eax
c00072f8:	52                   	push   edx
c00072f9:	50                   	push   eax
c00072fa:	68 29 ce 01 c0       	push   0xc001ce29
c00072ff:	e8 10 27 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0007304:	83 c4 10             	add    esp,0x10
c0007307:	e9 de fe ff ff       	jmp    c00071ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000730c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007314:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007318:	39 ea                	cmp    edx,ebp
c000731a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000731e:	0f 82 c6 fe ff ff    	jb     c00071ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007324:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007329:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000732d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007331:	0f 83 b3 fe ff ff    	jae    c00071ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007337:	39 ee                	cmp    esi,ebp
c0007339:	89 f8                	mov    eax,edi
c000733b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000733f:	0f 83 78 ff ff ff    	jae    c00072bd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007349:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000734d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007351:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007355:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007359:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000735d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007361:	e9 57 ff ff ff       	jmp    c00072bd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007366:	83 ec 0c             	sub    esp,0xc
c0007369:	68 1b ce 01 c0       	push   0xc001ce1b
c000736e:	e8 f4 81 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0007373:	83 c4 10             	add    esp,0x10
c0007376:	83 ec 08             	sub    esp,0x8
c0007379:	bb 60 00 00 00       	mov    ebx,0x60
c000737e:	6a 00                	push   0x0
c0007380:	6a 06                	push   0x6
c0007382:	e8 e2 fb ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c0007387:	58                   	pop    eax
c0007388:	5a                   	pop    edx
c0007389:	6a 00                	push   0x0
c000738b:	6a 07                	push   0x7
c000738d:	e8 d7 fb ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c0007392:	83 05 d8 f5 01 c0 02 	add    DWORD PTR ds:0xc001f5d8,0x2
c0007399:	83 c4 10             	add    esp,0x10
c000739c:	83 ec 08             	sub    esp,0x8
c000739f:	6a 00                	push   0x0
c00073a1:	53                   	push   ebx
c00073a2:	43                   	inc    ebx
c00073a3:	e8 c1 fb ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c00073a8:	83 c4 10             	add    esp,0x10
c00073ab:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00073b1:	75 e9                	jne    c000739c <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00073b3:	a1 d8 f5 01 c0       	mov    eax,ds:0xc001f5d8
c00073b8:	bb 40 01 00 00       	mov    ebx,0x140
c00073bd:	83 c0 20             	add    eax,0x20
c00073c0:	a3 d8 f5 01 c0       	mov    ds:0xc001f5d8,eax
c00073c5:	eb 22                	jmp    c00073e9 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00073c7:	83 ec 08             	sub    esp,0x8
c00073ca:	6a 00                	push   0x0
c00073cc:	53                   	push   ebx
c00073cd:	43                   	inc    ebx
c00073ce:	e8 96 fb ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c00073d3:	a1 d8 f5 01 c0       	mov    eax,ds:0xc001f5d8
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	40                   	inc    eax
c00073dc:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00073e2:	a3 d8 f5 01 c0       	mov    ds:0xc001f5d8,eax
c00073e7:	74 07                	je     c00073f0 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00073e9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00073ee:	7e d7                	jle    c00073c7 <Phys::physicalMemorySetup(unsigned int)+0x257>
c00073f0:	bb d0 01 00 00       	mov    ebx,0x1d0
c00073f5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00073fa:	7f 22                	jg     c000741e <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c00073fc:	83 ec 08             	sub    esp,0x8
c00073ff:	6a 00                	push   0x0
c0007401:	53                   	push   ebx
c0007402:	43                   	inc    ebx
c0007403:	e8 61 fb ff ff       	call   c0006f69 <Phys::setPageState(unsigned long, bool)>
c0007408:	a1 d8 f5 01 c0       	mov    eax,ds:0xc001f5d8
c000740d:	83 c4 10             	add    esp,0x10
c0007410:	40                   	inc    eax
c0007411:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007417:	a3 d8 f5 01 c0       	mov    ds:0xc001f5d8,eax
c000741c:	75 d7                	jne    c00073f5 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000741e:	83 c4 3c             	add    esp,0x3c
c0007421:	5b                   	pop    ebx
c0007422:	5e                   	pop    esi
c0007423:	5f                   	pop    edi
c0007424:	5d                   	pop    ebp
c0007425:	c3                   	ret    
c0007426:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000742e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007436:	e9 51 fe ff ff       	jmp    c000728c <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000743b:	90                   	nop

c000743c <Pipe::isAtty()>:
c000743c:	31 c0                	xor    eax,eax
c000743e:	c3                   	ret    
c000743f:	90                   	nop

c0007440 <Pipe::~Pipe()>:
c0007440:	83 ec 0c             	sub    esp,0xc
c0007443:	ba 88 ce 01 c0       	mov    edx,0xc001ce88
c0007448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744c:	89 10                	mov    DWORD PTR [eax],edx
c000744e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007452:	83 ec 0c             	sub    esp,0xc
c0007455:	50                   	push   eax
c0007456:	e8 d1 10 00 00       	call   c000852c <UnixFile::~UnixFile()>
c000745b:	83 c4 10             	add    esp,0x10
c000745e:	90                   	nop
c000745f:	83 c4 0c             	add    esp,0xc
c0007462:	c3                   	ret    
c0007463:	90                   	nop

c0007464 <Pipe::~Pipe()>:
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000746e:	e8 cd ff ff ff       	call   c0007440 <Pipe::~Pipe()>
c0007473:	83 c4 10             	add    esp,0x10
c0007476:	83 ec 08             	sub    esp,0x8
c0007479:	6a 20                	push   0x20
c000747b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000747f:	e8 9a 24 00 00       	call   c000991e <operator delete(void*, unsigned long)>
c0007484:	83 c4 10             	add    esp,0x10
c0007487:	83 c4 0c             	add    esp,0xc
c000748a:	c3                   	ret    
c000748b:	90                   	nop

c000748c <Pipe::write(unsigned long long, void*, int*)>:
c000748c:	55                   	push   ebp
c000748d:	57                   	push   edi
c000748e:	56                   	push   esi
c000748f:	53                   	push   ebx
c0007490:	83 ec 1c             	sub    esp,0x1c
c0007493:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007497:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000749b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000749e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00074a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00074a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074a9:	89 d8                	mov    eax,ebx
c00074ab:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00074ae:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00074b2:	89 d6                	mov    esi,edx
c00074b4:	89 d7                	mov    edi,edx
c00074b6:	c1 ff 1f             	sar    edi,0x1f
c00074b9:	03 34 24             	add    esi,DWORD PTR [esp]
c00074bc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00074c0:	c1 f8 1f             	sar    eax,0x1f
c00074c3:	39 f3                	cmp    ebx,esi
c00074c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00074c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074cd:	19 f8                	sbb    eax,edi
c00074cf:	b8 01 00 00 00       	mov    eax,0x1
c00074d4:	72 6e                	jb     c0007544 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00074d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00074d9:	01 d0                	add    eax,edx
c00074db:	99                   	cdq    
c00074dc:	f7 fb                	idiv   ebx
c00074de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074e2:	29 d3                	sub    ebx,edx
c00074e4:	89 d7                	mov    edi,edx
c00074e6:	89 de                	mov    esi,ebx
c00074e8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00074eb:	c1 fb 1f             	sar    ebx,0x1f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 d8                	sbb    eax,ebx
c00074f2:	b8 00 00 00 00       	mov    eax,0x0
c00074f7:	72 04                	jb     c00074fd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00074f9:	89 d0                	mov    eax,edx
c00074fb:	29 f0                	sub    eax,esi
c00074fd:	89 d3                	mov    ebx,edx
c00074ff:	29 c3                	sub    ebx,eax
c0007501:	74 0b                	je     c000750e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007503:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007506:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000750a:	89 d9                	mov    ecx,ebx
c000750c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000750e:	85 c0                	test   eax,eax
c0007510:	74 0d                	je     c000751f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007512:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007516:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007519:	89 de                	mov    esi,ebx
c000751b:	89 c1                	mov    ecx,eax
c000751d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000751f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007522:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007527:	75 10                	jne    c0007539 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007529:	83 ec 0c             	sub    esp,0xc
c000752c:	68 45 ce 01 c0       	push   0xc001ce45
c0007531:	e8 31 80 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0007536:	83 c4 10             	add    esp,0x10
c0007539:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000753d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007540:	89 08                	mov    DWORD PTR [eax],ecx
c0007542:	31 c0                	xor    eax,eax
c0007544:	83 c4 1c             	add    esp,0x1c
c0007547:	5b                   	pop    ebx
c0007548:	5e                   	pop    esi
c0007549:	5f                   	pop    edi
c000754a:	5d                   	pop    ebp
c000754b:	c3                   	ret    

c000754c <Pipe::read(unsigned long long, void*, int*)>:
c000754c:	55                   	push   ebp
c000754d:	57                   	push   edi
c000754e:	56                   	push   esi
c000754f:	53                   	push   ebx
c0007550:	83 ec 1c             	sub    esp,0x1c
c0007553:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007557:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000755b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000755f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007562:	89 c8                	mov    eax,ecx
c0007564:	99                   	cdq    
c0007565:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007569:	74 24                	je     c000758f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000756b:	39 f9                	cmp    ecx,edi
c000756d:	89 d1                	mov    ecx,edx
c000756f:	19 f1                	sbb    ecx,esi
c0007571:	73 1c                	jae    c000758f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007573:	fa                   	cli    
c0007574:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c000757a:	e8 c9 b4 00 00       	call   c0012a48 <schedule()>
c000757f:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0007584:	48                   	dec    eax
c0007585:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000758a:	75 d3                	jne    c000755f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000758c:	fb                   	sti    
c000758d:	eb d0                	jmp    c000755f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000758f:	39 f8                	cmp    eax,edi
c0007591:	89 d1                	mov    ecx,edx
c0007593:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007596:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000759a:	19 f1                	sbb    ecx,esi
c000759c:	73 07                	jae    c00075a5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000759e:	89 04 24             	mov    DWORD PTR [esp],eax
c00075a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075a5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00075a8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00075ab:	29 f7                	sub    edi,esi
c00075ad:	89 f8                	mov    eax,edi
c00075af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00075b3:	99                   	cdq    
c00075b4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00075b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075bb:	19 d0                	sbb    eax,edx
c00075bd:	73 07                	jae    c00075c6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00075bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00075c6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00075c9:	89 ea                	mov    edx,ebp
c00075cb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00075cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00075d4:	74 0d                	je     c00075e3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00075d6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00075d9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00075dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00075e3:	85 d2                	test   edx,edx
c00075e5:	74 11                	je     c00075f8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00075e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075eb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00075ee:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00075f2:	89 d1                	mov    ecx,edx
c00075f4:	89 c7                	mov    edi,eax
c00075f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00075f8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00075fb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00075fe:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0007601:	99                   	cdq    
c0007602:	89 f7                	mov    edi,esi
c0007604:	03 04 24             	add    eax,DWORD PTR [esp]
c0007607:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000760b:	c1 ff 1f             	sar    edi,0x1f
c000760e:	57                   	push   edi
c000760f:	56                   	push   esi
c0007610:	52                   	push   edx
c0007611:	50                   	push   eax
c0007612:	e8 89 42 01 00       	call   c001b8a0 <__umoddi3>
c0007617:	83 c4 10             	add    esp,0x10
c000761a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000761d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007622:	75 10                	jne    c0007634 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0007624:	83 ec 0c             	sub    esp,0xc
c0007627:	68 62 ce 01 c0       	push   0xc001ce62
c000762c:	e8 36 7f 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0007631:	83 c4 10             	add    esp,0x10
c0007634:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007638:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000763b:	89 10                	mov    DWORD PTR [eax],edx
c000763d:	83 c4 1c             	add    esp,0x1c
c0007640:	31 c0                	xor    eax,eax
c0007642:	5b                   	pop    ebx
c0007643:	5e                   	pop    esi
c0007644:	5f                   	pop    edi
c0007645:	5d                   	pop    ebp
c0007646:	c3                   	ret    
c0007647:	90                   	nop

c0007648 <Pipe::Pipe(int)>:
c0007648:	83 ec 0c             	sub    esp,0xc
c000764b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000764f:	83 ec 08             	sub    esp,0x8
c0007652:	6a 00                	push   0x0
c0007654:	50                   	push   eax
c0007655:	e8 f0 0c 00 00       	call   c000834a <UnixFile::UnixFile(int)>
c000765a:	83 c4 10             	add    esp,0x10
c000765d:	ba 88 ce 01 c0       	mov    edx,0xc001ce88
c0007662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007666:	89 10                	mov    DWORD PTR [eax],edx
c0007668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000766c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007670:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007677:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000767e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007682:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0007689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000768d:	83 ec 0c             	sub    esp,0xc
c0007690:	50                   	push   eax
c0007691:	e8 bb f5 ff ff       	call   c0006c51 <malloc>
c0007696:	83 c4 10             	add    esp,0x10
c0007699:	89 c2                	mov    edx,eax
c000769b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000769f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00076a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076a6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00076aa:	90                   	nop
c00076ab:	83 c4 0c             	add    esp,0xc
c00076ae:	c3                   	ret    
c00076af:	90                   	nop

c00076b0 <VgaText::isAtty()>:
c00076b0:	b0 01                	mov    al,0x1
c00076b2:	c3                   	ret    
c00076b3:	90                   	nop

c00076b4 <VgaText::~VgaText()>:
c00076b4:	83 ec 0c             	sub    esp,0xc
c00076b7:	ba 10 cf 01 c0       	mov    edx,0xc001cf10
c00076bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c0:	89 10                	mov    DWORD PTR [eax],edx
c00076c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c6:	83 ec 0c             	sub    esp,0xc
c00076c9:	50                   	push   eax
c00076ca:	e8 5d 0e 00 00       	call   c000852c <UnixFile::~UnixFile()>
c00076cf:	83 c4 10             	add    esp,0x10
c00076d2:	90                   	nop
c00076d3:	83 c4 0c             	add    esp,0xc
c00076d6:	c3                   	ret    
c00076d7:	90                   	nop

c00076d8 <VgaText::~VgaText()>:
c00076d8:	83 ec 0c             	sub    esp,0xc
c00076db:	83 ec 0c             	sub    esp,0xc
c00076de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00076e2:	e8 cd ff ff ff       	call   c00076b4 <VgaText::~VgaText()>
c00076e7:	83 c4 10             	add    esp,0x10
c00076ea:	83 ec 08             	sub    esp,0x8
c00076ed:	68 34 01 00 00       	push   0x134
c00076f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00076f6:	e8 23 22 00 00       	call   c000991e <operator delete(void*, unsigned long)>
c00076fb:	83 c4 10             	add    esp,0x10
c00076fe:	83 c4 0c             	add    esp,0xc
c0007701:	c3                   	ret    

c0007702 <VgaText::read(unsigned long long, void*, int*)>:
c0007702:	83 ec 10             	sub    esp,0x10
c0007705:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007709:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000770d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007711:	e8 58 45 00 00       	call   c000bc6e <readKeyboard(VgaText*, char*, unsigned long)>
c0007716:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000771a:	89 02                	mov    DWORD PTR [edx],eax
c000771c:	31 c0                	xor    eax,eax
c000771e:	83 c4 1c             	add    esp,0x1c
c0007721:	c3                   	ret    

c0007722 <setTerminalScrollLock(bool)>:
c0007722:	c3                   	ret    

c0007723 <doTerminalCycle()>:
c0007723:	c3                   	ret    

c0007724 <addToTerminalCycle(VgaText*)>:
c0007724:	c3                   	ret    

c0007725 <scrollTerminalScrollLock(int)>:
c0007725:	c3                   	ret    

c0007726 <VgaText::updateTitle()>:
c0007726:	c3                   	ret    
c0007727:	90                   	nop

c0007728 <VgaText::load()>:
c0007728:	c3                   	ret    
c0007729:	90                   	nop

c000772a <VgaText::updateCursor()>:
c000772a:	83 ec 14             	sub    esp,0x14
c000772d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007731:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007734:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007737:	e8 5c dd 00 00       	call   c0015498 <HalConsoleCursorUpdate(int, int)>
c000773c:	83 c4 1c             	add    esp,0x1c
c000773f:	c3                   	ret    

c0007740 <VgaText::doANSI_SGR(int)>:
c0007740:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007748:	85 d2                	test   edx,edx
c000774a:	75 0b                	jne    c0007757 <VgaText::doANSI_SGR(int)+0x17>
c000774c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000774f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007752:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007755:	eb 59                	jmp    c00077b0 <VgaText::doANSI_SGR(int)+0x70>
c0007757:	83 fa 07             	cmp    edx,0x7
c000775a:	75 0b                	jne    c0007767 <VgaText::doANSI_SGR(int)+0x27>
c000775c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000775f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0007762:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007765:	eb 49                	jmp    c00077b0 <VgaText::doANSI_SGR(int)+0x70>
c0007767:	83 fa 1b             	cmp    edx,0x1b
c000776a:	74 e0                	je     c000774c <VgaText::doANSI_SGR(int)+0xc>
c000776c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000776f:	83 f9 07             	cmp    ecx,0x7
c0007772:	77 09                	ja     c000777d <VgaText::doANSI_SGR(int)+0x3d>
c0007774:	8b 14 8d 00 ef 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1100]
c000777b:	eb 20                	jmp    c000779d <VgaText::doANSI_SGR(int)+0x5d>
c000777d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007780:	83 f9 07             	cmp    ecx,0x7
c0007783:	77 09                	ja     c000778e <VgaText::doANSI_SGR(int)+0x4e>
c0007785:	8b 14 8d 00 ef 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1100]
c000778c:	eb 22                	jmp    c00077b0 <VgaText::doANSI_SGR(int)+0x70>
c000778e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0007791:	83 f9 07             	cmp    ecx,0x7
c0007794:	77 0b                	ja     c00077a1 <VgaText::doANSI_SGR(int)+0x61>
c0007796:	8b 14 95 b8 ed 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1248]
c000779d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00077a0:	c3                   	ret    
c00077a1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00077a4:	83 f9 07             	cmp    ecx,0x7
c00077a7:	77 0a                	ja     c00077b3 <VgaText::doANSI_SGR(int)+0x73>
c00077a9:	8b 14 95 90 ed 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1270]
c00077b0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00077b3:	c3                   	ret    

c00077b4 <VgaText::setDefaultBgColour(VgaColour)>:
c00077b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00077bc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00077bf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00077c2:	c3                   	ret    
c00077c3:	90                   	nop

c00077c4 <VgaText::setDefaultFgColour(VgaColour)>:
c00077c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00077cc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00077cf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00077d2:	c3                   	ret    
c00077d3:	90                   	nop

c00077d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00077d4:	53                   	push   ebx
c00077d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00077d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00077dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00077e1:	51                   	push   ecx
c00077e2:	e8 cd ff ff ff       	call   c00077b4 <VgaText::setDefaultBgColour(VgaColour)>
c00077e7:	58                   	pop    eax
c00077e8:	5a                   	pop    edx
c00077e9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00077ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00077f1:	5b                   	pop    ebx
c00077f2:	eb d0                	jmp    c00077c4 <VgaText::setDefaultFgColour(VgaColour)>

c00077f4 <VgaText::setTitleTextColour(VgaColour)>:
c00077f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00077fc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00077ff:	c3                   	ret    

c0007800 <VgaText::setTitleColour(VgaColour)>:
c0007800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007804:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007808:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000780b:	c3                   	ret    

c000780c <VgaText::setTitle(char*)>:
c000780c:	c3                   	ret    
c000780d:	90                   	nop

c000780e <VgaText::combineColours(unsigned char, unsigned char)>:
c000780e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0007812:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007817:	83 e0 0f             	and    eax,0xf
c000781a:	c1 e2 04             	shl    edx,0x4
c000781d:	09 d0                	or     eax,edx
c000781f:	c3                   	ret    

c0007820 <VgaText::scrollScreen()>:
c0007820:	55                   	push   ebp
c0007821:	b9 01 00 00 00       	mov    ecx,0x1
c0007826:	57                   	push   edi
c0007827:	56                   	push   esi
c0007828:	53                   	push   ebx
c0007829:	83 ec 0c             	sub    esp,0xc
c000782c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007830:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0007836:	31 ff                	xor    edi,edi
c0007838:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000783b:	83 f9 18             	cmp    ecx,0x18
c000783e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007841:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0007848:	75 27                	jne    c0007871 <VgaText::scrollScreen()+0x51>
c000784a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000784d:	01 f5                	add    ebp,esi
c000784f:	f7 c7 01 00 00 00    	test   edi,0x1
c0007855:	74 16                	je     c000786d <VgaText::scrollScreen()+0x4d>
c0007857:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000785b:	50                   	push   eax
c000785c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007860:	50                   	push   eax
c0007861:	e8 a8 ff ff ff       	call   c000780e <VgaText::combineColours(unsigned char, unsigned char)>
c0007866:	5a                   	pop    edx
c0007867:	5a                   	pop    edx
c0007868:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000786b:	eb 04                	jmp    c0007871 <VgaText::scrollScreen()+0x51>
c000786d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007871:	47                   	inc    edi
c0007872:	46                   	inc    esi
c0007873:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0007879:	75 bd                	jne    c0007838 <VgaText::scrollScreen()+0x18>
c000787b:	41                   	inc    ecx
c000787c:	83 f9 19             	cmp    ecx,0x19
c000787f:	75 af                	jne    c0007830 <VgaText::scrollScreen()+0x10>
c0007881:	39 1d f4 f5 01 c0    	cmp    DWORD PTR ds:0xc001f5f4,ebx
c0007887:	75 1f                	jne    c00078a8 <VgaText::scrollScreen()+0x88>
c0007889:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000788d:	74 05                	je     c0007894 <VgaText::scrollScreen()+0x74>
c000788f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0007892:	eb 14                	jmp    c00078a8 <VgaText::scrollScreen()+0x88>
c0007894:	50                   	push   eax
c0007895:	50                   	push   eax
c0007896:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000789a:	50                   	push   eax
c000789b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000789f:	50                   	push   eax
c00078a0:	e8 7f da 00 00       	call   c0015324 <HalConsoleScroll(int, int)>
c00078a5:	83 c4 10             	add    esp,0x10
c00078a8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00078ac:	83 c4 0c             	add    esp,0xc
c00078af:	5b                   	pop    ebx
c00078b0:	5e                   	pop    esi
c00078b1:	5f                   	pop    edi
c00078b2:	5d                   	pop    ebp
c00078b3:	e9 72 fe ff ff       	jmp    c000772a <VgaText::updateCursor()>

c00078b8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00078b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00078bd:	c1 e0 08             	shl    eax,0x8
c00078c0:	89 c2                	mov    edx,eax
c00078c2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00078c7:	09 d0                	or     eax,edx
c00078c9:	c3                   	ret    

c00078ca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00078ca:	55                   	push   ebp
c00078cb:	57                   	push   edi
c00078cc:	56                   	push   esi
c00078cd:	53                   	push   ebx
c00078ce:	83 ec 1c             	sub    esp,0x1c
c00078d1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00078d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00078d9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00078dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00078e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00078e5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00078e9:	0f b6 c3             	movzx  eax,bl
c00078ec:	50                   	push   eax
c00078ed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00078f2:	50                   	push   eax
c00078f3:	e8 16 ff ff ff       	call   c000780e <VgaText::combineColours(unsigned char, unsigned char)>
c00078f8:	5a                   	pop    edx
c00078f9:	0f b6 c0             	movzx  eax,al
c00078fc:	59                   	pop    ecx
c00078fd:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0007902:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007906:	50                   	push   eax
c0007907:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000790b:	e8 a8 ff ff ff       	call   c00078b8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007910:	5a                   	pop    edx
c0007911:	66 6b d7 50          	imul   dx,di,0x50
c0007915:	59                   	pop    ecx
c0007916:	01 f2                	add    edx,esi
c0007918:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000791b:	0f b7 d2             	movzx  edx,dx
c000791e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0007922:	39 2d f4 f5 01 c0    	cmp    DWORD PTR ds:0xc001f5f4,ebp
c0007928:	75 28                	jne    c0007952 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000792a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000792e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0007932:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0007936:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000793a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000793e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007942:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007946:	83 c4 1c             	add    esp,0x1c
c0007949:	5b                   	pop    ebx
c000794a:	5e                   	pop    esi
c000794b:	5f                   	pop    edi
c000794c:	5d                   	pop    ebp
c000794d:	e9 da da 00 00       	jmp    c001542c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007952:	83 c4 1c             	add    esp,0x1c
c0007955:	5b                   	pop    ebx
c0007956:	5e                   	pop    esi
c0007957:	5f                   	pop    edi
c0007958:	5d                   	pop    ebp
c0007959:	c3                   	ret    

c000795a <VgaText::getCursorX()>:
c000795a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000795e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007961:	c3                   	ret    

c0007962 <VgaText::getCursorY()>:
c0007962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007966:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0007969:	c3                   	ret    

c000796a <VgaText::setCursor(int, int)>:
c000796a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000796e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007972:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007975:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007979:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000797c:	e9 a9 fd ff ff       	jmp    c000772a <VgaText::updateCursor()>

c0007981 <setActiveTerminal(VgaText*)>:
c0007981:	53                   	push   ebx
c0007982:	83 ec 08             	sub    esp,0x8
c0007985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007989:	85 db                	test   ebx,ebx
c000798b:	75 11                	jne    c000799e <setActiveTerminal(VgaText*)+0x1d>
c000798d:	c7 44 24 10 9c ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ce9c
c0007995:	83 c4 08             	add    esp,0x8
c0007998:	5b                   	pop    ebx
c0007999:	e9 c9 7b 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c000799e:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c00079a3:	85 c0                	test   eax,eax
c00079a5:	74 0c                	je     c00079b3 <setActiveTerminal(VgaText*)+0x32>
c00079a7:	83 ec 0c             	sub    esp,0xc
c00079aa:	50                   	push   eax
c00079ab:	e8 7a fd ff ff       	call   c000772a <VgaText::updateCursor()>
c00079b0:	83 c4 10             	add    esp,0x10
c00079b3:	89 1d f4 f5 01 c0    	mov    DWORD PTR ds:0xc001f5f4,ebx
c00079b9:	50                   	push   eax
c00079ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00079bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00079c0:	53                   	push   ebx
c00079c1:	e8 a4 ff ff ff       	call   c000796a <VgaText::setCursor(int, int)>
c00079c6:	83 c4 18             	add    esp,0x18
c00079c9:	5b                   	pop    ebx
c00079ca:	c3                   	ret    
c00079cb:	90                   	nop

c00079cc <VgaText::clearScreen()>:
c00079cc:	57                   	push   edi
c00079cd:	56                   	push   esi
c00079ce:	31 f6                	xor    esi,esi
c00079d0:	53                   	push   ebx
c00079d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079d5:	52                   	push   edx
c00079d6:	6a 00                	push   0x0
c00079d8:	6a 00                	push   0x0
c00079da:	53                   	push   ebx
c00079db:	e8 8a ff ff ff       	call   c000796a <VgaText::setCursor(int, int)>
c00079e0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00079e7:	83 c4 10             	add    esp,0x10
c00079ea:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00079ed:	7e 20                	jle    c0007a0f <VgaText::clearScreen()+0x43>
c00079ef:	31 ff                	xor    edi,edi
c00079f1:	50                   	push   eax
c00079f2:	50                   	push   eax
c00079f3:	56                   	push   esi
c00079f4:	57                   	push   edi
c00079f5:	47                   	inc    edi
c00079f6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00079f9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00079fc:	6a 20                	push   0x20
c00079fe:	53                   	push   ebx
c00079ff:	e8 c6 fe ff ff       	call   c00078ca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a04:	83 c4 20             	add    esp,0x20
c0007a07:	83 ff 50             	cmp    edi,0x50
c0007a0a:	75 e5                	jne    c00079f1 <VgaText::clearScreen()+0x25>
c0007a0c:	46                   	inc    esi
c0007a0d:	eb db                	jmp    c00079ea <VgaText::clearScreen()+0x1e>
c0007a0f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007a16:	5b                   	pop    ebx
c0007a17:	5e                   	pop    esi
c0007a18:	5f                   	pop    edi
c0007a19:	c3                   	ret    

c0007a1a <VgaText::setCursorX(int)>:
c0007a1a:	83 ec 10             	sub    esp,0x10
c0007a1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a21:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a28:	50                   	push   eax
c0007a29:	e8 3c ff ff ff       	call   c000796a <VgaText::setCursor(int, int)>
c0007a2e:	83 c4 1c             	add    esp,0x1c
c0007a31:	c3                   	ret    

c0007a32 <VgaText::setCursorY(int)>:
c0007a32:	83 ec 10             	sub    esp,0x10
c0007a35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a3d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007a40:	50                   	push   eax
c0007a41:	e8 24 ff ff ff       	call   c000796a <VgaText::setCursor(int, int)>
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <VgaText::incrementCursor(bool)>:
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	51                   	push   ecx
c0007a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007a55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007a58:	40                   	inc    eax
c0007a59:	83 f8 50             	cmp    eax,0x50
c0007a5c:	74 05                	je     c0007a63 <VgaText::incrementCursor(bool)+0x19>
c0007a5e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007a61:	eb 24                	jmp    c0007a87 <VgaText::incrementCursor(bool)+0x3d>
c0007a63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007a66:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a6d:	8d 50 01             	lea    edx,[eax+0x1]
c0007a70:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007a73:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007a76:	75 0f                	jne    c0007a87 <VgaText::incrementCursor(bool)+0x3d>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007a7e:	53                   	push   ebx
c0007a7f:	e8 9c fd ff ff       	call   c0007820 <VgaText::scrollScreen()>
c0007a84:	83 c4 10             	add    esp,0x10
c0007a87:	89 f0                	mov    eax,esi
c0007a89:	84 c0                	test   al,al
c0007a8b:	74 0c                	je     c0007a99 <VgaText::incrementCursor(bool)+0x4f>
c0007a8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007a91:	5a                   	pop    edx
c0007a92:	5b                   	pop    ebx
c0007a93:	5e                   	pop    esi
c0007a94:	e9 91 fc ff ff       	jmp    c000772a <VgaText::updateCursor()>
c0007a99:	58                   	pop    eax
c0007a9a:	5b                   	pop    ebx
c0007a9b:	5e                   	pop    esi
c0007a9c:	c3                   	ret    
c0007a9d:	90                   	nop

c0007a9e <VgaText::decrementCursor(bool)>:
c0007a9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007aa2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007aa6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0007aa9:	85 c0                	test   eax,eax
c0007aab:	74 04                	je     c0007ab1 <VgaText::decrementCursor(bool)+0x13>
c0007aad:	48                   	dec    eax
c0007aae:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0007ab1:	84 c9                	test   cl,cl
c0007ab3:	74 09                	je     c0007abe <VgaText::decrementCursor(bool)+0x20>
c0007ab5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007ab9:	e9 6c fc ff ff       	jmp    c000772a <VgaText::updateCursor()>
c0007abe:	c3                   	ret    
c0007abf:	90                   	nop

c0007ac0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0007ac0:	53                   	push   ebx
c0007ac1:	83 ec 08             	sub    esp,0x8
c0007ac4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ac8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007acc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007ad0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007ad4:	3c 07                	cmp    al,0x7
c0007ad6:	75 21                	jne    c0007af9 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0007ad8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007ae0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0007ae8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0007af0:	83 c4 08             	add    esp,0x8
c0007af3:	5b                   	pop    ebx
c0007af4:	e9 72 2d 00 00       	jmp    c000a86b <Krnl::beep(int, int, bool)>
c0007af9:	3c 0d                	cmp    al,0xd
c0007afb:	75 09                	jne    c0007b06 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0007afd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007b04:	eb 2c                	jmp    c0007b32 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0007b06:	3c 0a                	cmp    al,0xa
c0007b08:	75 31                	jne    c0007b3b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0007b0a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007b0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007b14:	8d 50 01             	lea    edx,[eax+0x1]
c0007b17:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007b1a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007b1d:	75 0f                	jne    c0007b2e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007b1f:	83 ec 0c             	sub    esp,0xc
c0007b22:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007b25:	53                   	push   ebx
c0007b26:	e8 f5 fc ff ff       	call   c0007820 <VgaText::scrollScreen()>
c0007b2b:	83 c4 10             	add    esp,0x10
c0007b2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007b32:	83 c4 08             	add    esp,0x8
c0007b35:	5b                   	pop    ebx
c0007b36:	e9 ef fb ff ff       	jmp    c000772a <VgaText::updateCursor()>
c0007b3b:	3c 08                	cmp    al,0x8
c0007b3d:	75 25                	jne    c0007b64 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007b3f:	50                   	push   eax
c0007b40:	50                   	push   eax
c0007b41:	6a 01                	push   0x1
c0007b43:	53                   	push   ebx
c0007b44:	e8 55 ff ff ff       	call   c0007a9e <VgaText::decrementCursor(bool)>
c0007b49:	5a                   	pop    edx
c0007b4a:	59                   	pop    ecx
c0007b4b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007b4e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007b51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b57:	6a 20                	push   0x20
c0007b59:	53                   	push   ebx
c0007b5a:	e8 6b fd ff ff       	call   c00078ca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007b5f:	83 c4 28             	add    esp,0x28
c0007b62:	5b                   	pop    ebx
c0007b63:	c3                   	ret    
c0007b64:	83 ec 08             	sub    esp,0x8
c0007b67:	0f be c0             	movsx  eax,al
c0007b6a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007b6d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007b70:	51                   	push   ecx
c0007b71:	52                   	push   edx
c0007b72:	50                   	push   eax
c0007b73:	53                   	push   ebx
c0007b74:	e8 51 fd ff ff       	call   c00078ca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007b79:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007b7d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007b85:	83 c4 28             	add    esp,0x28
c0007b88:	5b                   	pop    ebx
c0007b89:	e9 bc fe ff ff       	jmp    c0007a4a <VgaText::incrementCursor(bool)>

c0007b8e <VgaText::putchar(char)>:
c0007b8e:	56                   	push   esi
c0007b8f:	53                   	push   ebx
c0007b90:	83 ec 14             	sub    esp,0x14
c0007b93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b9b:	3c 5b                	cmp    al,0x5b
c0007b9d:	75 18                	jne    c0007bb7 <VgaText::putchar(char)+0x29>
c0007b9f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007ba3:	74 1f                	je     c0007bc4 <VgaText::putchar(char)+0x36>
c0007ba5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007bab:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007bb2:	e9 bd 00 00 00       	jmp    c0007c74 <VgaText::putchar(char)+0xe6>
c0007bb7:	3c 1b                	cmp    al,0x1b
c0007bb9:	75 09                	jne    c0007bc4 <VgaText::putchar(char)+0x36>
c0007bbb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007bbf:	e9 b0 00 00 00       	jmp    c0007c74 <VgaText::putchar(char)+0xe6>
c0007bc4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007bc7:	84 c9                	test   cl,cl
c0007bc9:	0f 84 92 00 00 00    	je     c0007c61 <VgaText::putchar(char)+0xd3>
c0007bcf:	8d 50 c0             	lea    edx,[eax-0x40]
c0007bd2:	80 fa 3e             	cmp    dl,0x3e
c0007bd5:	77 76                	ja     c0007c4d <VgaText::putchar(char)+0xbf>
c0007bd7:	3c 6d                	cmp    al,0x6d
c0007bd9:	75 47                	jne    c0007c22 <VgaText::putchar(char)+0x94>
c0007bdb:	31 f6                	xor    esi,esi
c0007bdd:	31 d2                	xor    edx,edx
c0007bdf:	31 c0                	xor    eax,eax
c0007be1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007be4:	7e 2d                	jle    c0007c13 <VgaText::putchar(char)+0x85>
c0007be6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007beb:	80 fa 3b             	cmp    dl,0x3b
c0007bee:	75 17                	jne    c0007c07 <VgaText::putchar(char)+0x79>
c0007bf0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007bf4:	50                   	push   eax
c0007bf5:	53                   	push   ebx
c0007bf6:	e8 45 fb ff ff       	call   c0007740 <VgaText::doANSI_SGR(int)>
c0007bfb:	59                   	pop    ecx
c0007bfc:	31 d2                	xor    edx,edx
c0007bfe:	58                   	pop    eax
c0007bff:	31 c0                	xor    eax,eax
c0007c01:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007c05:	eb 09                	jmp    c0007c10 <VgaText::putchar(char)+0x82>
c0007c07:	6b c0 0a             	imul   eax,eax,0xa
c0007c0a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007c0e:	88 ca                	mov    dl,cl
c0007c10:	46                   	inc    esi
c0007c11:	eb ce                	jmp    c0007be1 <VgaText::putchar(char)+0x53>
c0007c13:	84 d2                	test   dl,dl
c0007c15:	74 2e                	je     c0007c45 <VgaText::putchar(char)+0xb7>
c0007c17:	50                   	push   eax
c0007c18:	53                   	push   ebx
c0007c19:	e8 22 fb ff ff       	call   c0007740 <VgaText::doANSI_SGR(int)>
c0007c1e:	58                   	pop    eax
c0007c1f:	5a                   	pop    edx
c0007c20:	eb 23                	jmp    c0007c45 <VgaText::putchar(char)+0xb7>
c0007c22:	3c 4a                	cmp    al,0x4a
c0007c24:	75 1f                	jne    c0007c45 <VgaText::putchar(char)+0xb7>
c0007c26:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007c2a:	75 19                	jne    c0007c45 <VgaText::putchar(char)+0xb7>
c0007c2c:	83 ec 0c             	sub    esp,0xc
c0007c2f:	53                   	push   ebx
c0007c30:	e8 97 fd ff ff       	call   c00079cc <VgaText::clearScreen()>
c0007c35:	83 c4 0c             	add    esp,0xc
c0007c38:	6a 00                	push   0x0
c0007c3a:	6a 00                	push   0x0
c0007c3c:	53                   	push   ebx
c0007c3d:	e8 28 fd ff ff       	call   c000796a <VgaText::setCursor(int, int)>
c0007c42:	83 c4 10             	add    esp,0x10
c0007c45:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007c4b:	eb 27                	jmp    c0007c74 <VgaText::putchar(char)+0xe6>
c0007c4d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007c50:	83 fa 0e             	cmp    edx,0xe
c0007c53:	7f 1f                	jg     c0007c74 <VgaText::putchar(char)+0xe6>
c0007c55:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007c58:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007c5b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007c5f:	eb 13                	jmp    c0007c74 <VgaText::putchar(char)+0xe6>
c0007c61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007c64:	0f be c0             	movsx  eax,al
c0007c67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007c6a:	50                   	push   eax
c0007c6b:	53                   	push   ebx
c0007c6c:	e8 4f fe ff ff       	call   c0007ac0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007c71:	83 c4 10             	add    esp,0x10
c0007c74:	83 c4 14             	add    esp,0x14
c0007c77:	5b                   	pop    ebx
c0007c78:	5e                   	pop    esi
c0007c79:	c3                   	ret    

c0007c7a <VgaText::putx(unsigned int)>:
c0007c7a:	57                   	push   edi
c0007c7b:	b9 11 00 00 00       	mov    ecx,0x11
c0007c80:	56                   	push   esi
c0007c81:	be aa ce 01 c0       	mov    esi,0xc001ceaa
c0007c86:	53                   	push   ebx
c0007c87:	83 ec 20             	sub    esp,0x20
c0007c8a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007c8e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007c92:	fc                   	cld    
c0007c93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007c95:	be 08 00 00 00       	mov    esi,0x8
c0007c9a:	50                   	push   eax
c0007c9b:	50                   	push   eax
c0007c9c:	89 d8                	mov    eax,ebx
c0007c9e:	c1 e3 04             	shl    ebx,0x4
c0007ca1:	c1 e8 1c             	shr    eax,0x1c
c0007ca4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007ca9:	50                   	push   eax
c0007caa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cae:	e8 db fe ff ff       	call   c0007b8e <VgaText::putchar(char)>
c0007cb3:	83 c4 10             	add    esp,0x10
c0007cb6:	4e                   	dec    esi
c0007cb7:	75 e1                	jne    c0007c9a <VgaText::putx(unsigned int)+0x20>
c0007cb9:	83 c4 20             	add    esp,0x20
c0007cbc:	5b                   	pop    ebx
c0007cbd:	5e                   	pop    esi
c0007cbe:	5f                   	pop    edi
c0007cbf:	c3                   	ret    

c0007cc0 <VgaText::puts(char const*)>:
c0007cc0:	53                   	push   ebx
c0007cc1:	83 ec 08             	sub    esp,0x8
c0007cc4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007cc8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007ccb:	84 c0                	test   al,al
c0007ccd:	74 12                	je     c0007ce1 <VgaText::puts(char const*)+0x21>
c0007ccf:	43                   	inc    ebx
c0007cd0:	51                   	push   ecx
c0007cd1:	51                   	push   ecx
c0007cd2:	50                   	push   eax
c0007cd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cd7:	e8 b2 fe ff ff       	call   c0007b8e <VgaText::putchar(char)>
c0007cdc:	83 c4 10             	add    esp,0x10
c0007cdf:	eb e7                	jmp    c0007cc8 <VgaText::puts(char const*)+0x8>
c0007ce1:	83 c4 08             	add    esp,0x8
c0007ce4:	5b                   	pop    ebx
c0007ce5:	c3                   	ret    

c0007ce6 <VgaText::write(unsigned long long, void*, int*)>:
c0007ce6:	55                   	push   ebp
c0007ce7:	57                   	push   edi
c0007ce8:	56                   	push   esi
c0007ce9:	53                   	push   ebx
c0007cea:	83 ec 0c             	sub    esp,0xc
c0007ced:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007cf1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007cf5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007cf9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007d00:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007d03:	39 eb                	cmp    ebx,ebp
c0007d05:	74 13                	je     c0007d1a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007d07:	43                   	inc    ebx
c0007d08:	50                   	push   eax
c0007d09:	50                   	push   eax
c0007d0a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007d0e:	50                   	push   eax
c0007d0f:	56                   	push   esi
c0007d10:	e8 79 fe ff ff       	call   c0007b8e <VgaText::putchar(char)>
c0007d15:	83 c4 10             	add    esp,0x10
c0007d18:	eb e9                	jmp    c0007d03 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007d1a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007d21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d25:	89 38                	mov    DWORD PTR [eax],edi
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	31 c0                	xor    eax,eax
c0007d2c:	5b                   	pop    ebx
c0007d2d:	5e                   	pop    esi
c0007d2e:	5f                   	pop    edi
c0007d2f:	5d                   	pop    ebp
c0007d30:	c3                   	ret    
c0007d31:	90                   	nop

c0007d32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007d32:	55                   	push   ebp
c0007d33:	57                   	push   edi
c0007d34:	56                   	push   esi
c0007d35:	53                   	push   ebx
c0007d36:	83 ec 0c             	sub    esp,0xc
c0007d39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007d3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007d42:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007d49:	50                   	push   eax
c0007d4a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007d4f:	50                   	push   eax
c0007d50:	e8 b9 fa ff ff       	call   c000780e <VgaText::combineColours(unsigned char, unsigned char)>
c0007d55:	5a                   	pop    edx
c0007d56:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d5b:	59                   	pop    ecx
c0007d5c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007d5f:	89 c5                	mov    ebp,eax
c0007d61:	0f b7 f6             	movzx  esi,si
c0007d64:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007d68:	01 f6                	add    esi,esi
c0007d6a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d6d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007d70:	84 c0                	test   al,al
c0007d72:	0f 84 f4 00 00 00    	je     c0007e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0007d78:	3c 0d                	cmp    al,0xd
c0007d7a:	75 0c                	jne    c0007d88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0007d7c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007d83:	e9 de 00 00 00       	jmp    c0007e66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d88:	3c 0a                	cmp    al,0xa
c0007d8a:	75 45                	jne    c0007dd1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0007d8c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007d8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007d96:	8d 48 01             	lea    ecx,[eax+0x1]
c0007d99:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007d9c:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007d9f:	75 0f                	jne    c0007db0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007da7:	53                   	push   ebx
c0007da8:	e8 73 fa ff ff       	call   c0007820 <VgaText::scrollScreen()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 0c             	sub    esp,0xc
c0007db3:	53                   	push   ebx
c0007db4:	e8 71 f9 ff ff       	call   c000772a <VgaText::updateCursor()>
c0007db9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007dbe:	83 c4 10             	add    esp,0x10
c0007dc1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007dc4:	0f b7 f6             	movzx  esi,si
c0007dc7:	01 f6                	add    esi,esi
c0007dc9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007dcc:	e9 95 00 00 00       	jmp    c0007e66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007dd1:	3c 08                	cmp    al,0x8
c0007dd3:	75 35                	jne    c0007e0a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0007dd5:	51                   	push   ecx
c0007dd6:	51                   	push   ecx
c0007dd7:	6a 01                	push   0x1
c0007dd9:	53                   	push   ebx
c0007dda:	e8 bf fc ff ff       	call   c0007a9e <VgaText::decrementCursor(bool)>
c0007ddf:	5e                   	pop    esi
c0007de0:	58                   	pop    eax
c0007de1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007de4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007de7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007dea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007ded:	6a 20                	push   0x20
c0007def:	53                   	push   ebx
c0007df0:	e8 d5 fa ff ff       	call   c00078ca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007df5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007dfa:	83 c4 20             	add    esp,0x20
c0007dfd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007e00:	0f b7 f6             	movzx  esi,si
c0007e03:	01 f6                	add    esi,esi
c0007e05:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007e08:	eb 5c                	jmp    c0007e66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007e0a:	52                   	push   edx
c0007e0b:	52                   	push   edx
c0007e0c:	89 ea                	mov    edx,ebp
c0007e0e:	0f b6 ca             	movzx  ecx,dl
c0007e11:	51                   	push   ecx
c0007e12:	50                   	push   eax
c0007e13:	e8 a0 fa ff ff       	call   c00078b8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007e18:	83 c4 10             	add    esp,0x10
c0007e1b:	66 89 06             	mov    WORD PTR [esi],ax
c0007e1e:	39 1d f4 f5 01 c0    	cmp    DWORD PTR ds:0xc001f5f4,ebx
c0007e24:	75 1d                	jne    c0007e43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007e2c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007e2f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007e33:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007e37:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007e3a:	50                   	push   eax
c0007e3b:	e8 ec d5 00 00       	call   c001542c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007e40:	83 c4 20             	add    esp,0x20
c0007e43:	83 c6 02             	add    esi,0x2
c0007e46:	50                   	push   eax
c0007e47:	50                   	push   eax
c0007e48:	6a 00                	push   0x0
c0007e4a:	53                   	push   ebx
c0007e4b:	e8 fa fb ff ff       	call   c0007a4a <VgaText::incrementCursor(bool)>
c0007e50:	83 c4 10             	add    esp,0x10
c0007e53:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007e57:	75 0d                	jne    c0007e66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007e59:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007e5e:	0f b7 f6             	movzx  esi,si
c0007e61:	01 f6                	add    esi,esi
c0007e63:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007e66:	47                   	inc    edi
c0007e67:	e9 01 ff ff ff       	jmp    c0007d6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0007e6c:	83 ec 0c             	sub    esp,0xc
c0007e6f:	53                   	push   ebx
c0007e70:	e8 b5 f8 ff ff       	call   c000772a <VgaText::updateCursor()>
c0007e75:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007e7c:	83 c4 1c             	add    esp,0x1c
c0007e7f:	5b                   	pop    ebx
c0007e80:	5e                   	pop    esi
c0007e81:	5f                   	pop    edi
c0007e82:	5d                   	pop    ebp
c0007e83:	c3                   	ret    

c0007e84 <VgaText::VgaText(char const*)>:
c0007e84:	56                   	push   esi
c0007e85:	53                   	push   ebx
c0007e86:	83 ec 04             	sub    esp,0x4
c0007e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e8d:	83 ec 08             	sub    esp,0x8
c0007e90:	6a 00                	push   0x0
c0007e92:	50                   	push   eax
c0007e93:	e8 b2 04 00 00       	call   c000834a <UnixFile::UnixFile(int)>
c0007e98:	83 c4 10             	add    esp,0x10
c0007e9b:	ba 10 cf 01 c0       	mov    edx,0xc001cf10
c0007ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea4:	89 10                	mov    DWORD PTR [eax],edx
c0007ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eaa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eb5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007edb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ee6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ef1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007efc:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007f03:	83 ec 0c             	sub    esp,0xc
c0007f06:	6a 01                	push   0x1
c0007f08:	e8 80 08 00 00       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c0007f0d:	83 c4 10             	add    esp,0x10
c0007f10:	89 c2                	mov    edx,eax
c0007f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f16:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007f19:	8b 1d 94 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f694
c0007f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f26:	89 c6                	mov    esi,eax
c0007f28:	e8 f1 f0 ff ff       	call   c000701e <Phys::allocatePage()>
c0007f2d:	68 05 0c 00 00       	push   0xc05
c0007f32:	56                   	push   esi
c0007f33:	50                   	push   eax
c0007f34:	53                   	push   ebx
c0007f35:	e8 ac 0e 00 00       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007f3a:	83 c4 10             	add    esp,0x10
c0007f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f44:	83 ec 04             	sub    esp,0x4
c0007f47:	68 a0 0f 00 00       	push   0xfa0
c0007f4c:	6a 00                	push   0x0
c0007f4e:	50                   	push   eax
c0007f4f:	e8 9c 85 ff ff       	call   c00004f0 <memset>
c0007f54:	83 c4 10             	add    esp,0x10
c0007f57:	83 ec 04             	sub    esp,0x4
c0007f5a:	6a 00                	push   0x0
c0007f5c:	6a 07                	push   0x7
c0007f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f62:	e8 6d f8 ff ff       	call   c00077d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007f67:	83 c4 10             	add    esp,0x10
c0007f6a:	83 ec 04             	sub    esp,0x4
c0007f6d:	6a 00                	push   0x0
c0007f6f:	6a 00                	push   0x0
c0007f71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f75:	e8 f0 f9 ff ff       	call   c000796a <VgaText::setCursor(int, int)>
c0007f7a:	83 c4 10             	add    esp,0x10
c0007f7d:	83 ec 0c             	sub    esp,0xc
c0007f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f84:	e8 43 fa ff ff       	call   c00079cc <VgaText::clearScreen()>
c0007f89:	83 c4 10             	add    esp,0x10
c0007f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f90:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f98:	05 82 00 00 00       	add    eax,0x82
c0007f9d:	83 ec 04             	sub    esp,0x4
c0007fa0:	6a 30                	push   0x30
c0007fa2:	6a 00                	push   0x0
c0007fa4:	50                   	push   eax
c0007fa5:	e8 46 85 ff ff       	call   c00004f0 <memset>
c0007faa:	83 c4 10             	add    esp,0x10
c0007fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fb1:	05 b2 00 00 00       	add    eax,0xb2
c0007fb6:	83 ec 04             	sub    esp,0x4
c0007fb9:	68 80 00 00 00       	push   0x80
c0007fbe:	6a 00                	push   0x0
c0007fc0:	50                   	push   eax
c0007fc1:	e8 2a 85 ff ff       	call   c00004f0 <memset>
c0007fc6:	83 c4 10             	add    esp,0x10
c0007fc9:	90                   	nop
c0007fca:	83 c4 04             	add    esp,0x4
c0007fcd:	5b                   	pop    ebx
c0007fce:	5e                   	pop    esi
c0007fcf:	c3                   	ret    

c0007fd0 <VgaText::receiveKey(unsigned char)>:
c0007fd0:	57                   	push   edi
c0007fd1:	56                   	push   esi
c0007fd2:	53                   	push   ebx
c0007fd3:	83 ec 10             	sub    esp,0x10
c0007fd6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007fda:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007fde:	84 db                	test   bl,bl
c0007fe0:	0f 84 ba 00 00 00    	je     c00080a0 <VgaText::receiveKey(unsigned char)+0xd0>
c0007fe6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007fec:	80 fb 08             	cmp    bl,0x8
c0007fef:	75 2c                	jne    c000801d <VgaText::receiveKey(unsigned char)+0x4d>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	57                   	push   edi
c0007ff5:	e8 66 85 ff ff       	call   c0000560 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	85 c0                	test   eax,eax
c0007fff:	74 41                	je     c0008042 <VgaText::receiveKey(unsigned char)+0x72>
c0008001:	50                   	push   eax
c0008002:	50                   	push   eax
c0008003:	6a 08                	push   0x8
c0008005:	56                   	push   esi
c0008006:	e8 83 fb ff ff       	call   c0007b8e <VgaText::putchar(char)>
c000800b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800e:	e8 4d 85 ff ff       	call   c0000560 <strlen>
c0008013:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c000801b:	eb 22                	jmp    c000803f <VgaText::receiveKey(unsigned char)+0x6f>
c000801d:	0f be c3             	movsx  eax,bl
c0008020:	52                   	push   edx
c0008021:	52                   	push   edx
c0008022:	50                   	push   eax
c0008023:	56                   	push   esi
c0008024:	e8 65 fb ff ff       	call   c0007b8e <VgaText::putchar(char)>
c0008029:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000802d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008032:	59                   	pop    ecx
c0008033:	58                   	pop    eax
c0008034:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008038:	50                   	push   eax
c0008039:	57                   	push   edi
c000803a:	e8 a1 87 ff ff       	call   c00007e0 <strcat>
c000803f:	83 c4 10             	add    esp,0x10
c0008042:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008049:	75 05                	jne    c0008050 <VgaText::receiveKey(unsigned char)+0x80>
c000804b:	80 fb 0a             	cmp    bl,0xa
c000804e:	75 50                	jne    c00080a0 <VgaText::receiveKey(unsigned char)+0xd0>
c0008050:	83 ec 0c             	sub    esp,0xc
c0008053:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008059:	56                   	push   esi
c000805a:	e8 01 85 ff ff       	call   c0000560 <strlen>
c000805f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008062:	89 c3                	mov    ebx,eax
c0008064:	e8 f7 84 ff ff       	call   c0000560 <strlen>
c0008069:	83 c4 10             	add    esp,0x10
c000806c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008070:	3d 80 00 00 00       	cmp    eax,0x80
c0008075:	76 10                	jbe    c0008087 <VgaText::receiveKey(unsigned char)+0xb7>
c0008077:	83 ec 0c             	sub    esp,0xc
c000807a:	68 bb ce 01 c0       	push   0xc001cebb
c000807f:	e8 e3 74 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0008084:	83 c4 10             	add    esp,0x10
c0008087:	50                   	push   eax
c0008088:	50                   	push   eax
c0008089:	57                   	push   edi
c000808a:	56                   	push   esi
c000808b:	e8 50 87 ff ff       	call   c00007e0 <strcat>
c0008090:	83 c4 0c             	add    esp,0xc
c0008093:	6a 30                	push   0x30
c0008095:	6a 00                	push   0x0
c0008097:	57                   	push   edi
c0008098:	e8 53 84 ff ff       	call   c00004f0 <memset>
c000809d:	83 c4 10             	add    esp,0x10
c00080a0:	83 c4 10             	add    esp,0x10
c00080a3:	5b                   	pop    ebx
c00080a4:	5e                   	pop    esi
c00080a5:	5f                   	pop    edi
c00080a6:	c3                   	ret    
c00080a7:	90                   	nop

c00080a8 <VgaText::doUpdate()>:
c00080a8:	c3                   	ret    

c00080a9 <newTerminal(char*)>:
c00080a9:	83 ec 28             	sub    esp,0x28
c00080ac:	68 34 01 00 00       	push   0x134
c00080b1:	e8 9b eb ff ff       	call   c0006c51 <malloc>
c00080b6:	5a                   	pop    edx
c00080b7:	59                   	pop    ecx
c00080b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080bc:	50                   	push   eax
c00080bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00080c1:	e8 be fd ff ff       	call   c0007e84 <VgaText::VgaText(char const*)>
c00080c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080ca:	83 c4 2c             	add    esp,0x2c
c00080cd:	c3                   	ret    
c00080ce:	66 90                	xchg   ax,ax

c00080d0 <TSS::TSS()>:
c00080d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00080db:	90                   	nop
c00080dc:	c3                   	ret    
c00080dd:	90                   	nop
c00080de:	66 90                	xchg   ax,ax

c00080e0 <TSS::setESP(unsigned long)>:
c00080e0:	55                   	push   ebp
c00080e1:	89 e5                	mov    ebp,esp
c00080e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00080ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00080ef:	90                   	nop
c00080f0:	5d                   	pop    ebp
c00080f1:	c3                   	ret    
c00080f2:	66 90                	xchg   ax,ax

c00080f4 <TSS::flush()>:
c00080f4:	55                   	push   ebp
c00080f5:	89 e5                	mov    ebp,esp
c00080f7:	83 ec 10             	sub    esp,0x10
c00080fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00080ff:	83 c8 03             	or     eax,0x3
c0008102:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008106:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000810a:	66 89 d0             	mov    ax,dx
c000810d:	0f 00 d8             	ltr    ax
c0008110:	90                   	nop
c0008111:	c9                   	leave  
c0008112:	c3                   	ret    
c0008113:	90                   	nop

c0008114 <TSS::setup(unsigned long, unsigned long)>:
c0008114:	55                   	push   ebp
c0008115:	89 e5                	mov    ebp,esp
c0008117:	83 ec 18             	sub    esp,0x18
c000811a:	83 ec 0c             	sub    esp,0xc
c000811d:	6a 68                	push   0x68
c000811f:	e8 2d eb ff ff       	call   c0006c51 <malloc>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	89 c2                	mov    edx,eax
c0008129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000812c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000812f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008135:	83 ec 04             	sub    esp,0x4
c0008138:	6a 68                	push   0x68
c000813a:	6a 00                	push   0x0
c000813c:	50                   	push   eax
c000813d:	e8 ae 83 ff ff       	call   c00004f0 <memset>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000814b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008157:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000815d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008163:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008166:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000816c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000816f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008178:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000817b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008187:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000818d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008193:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000819c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000819f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00081a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081ab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00081b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081b7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00081ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00081bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00081c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00081c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081cf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00081d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081dc:	0f 20 da             	mov    edx,cr3
c00081df:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00081e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00081e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00081e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081ee:	83 ec 08             	sub    esp,0x8
c00081f1:	50                   	push   eax
c00081f2:	8d 45 ec             	lea    eax,[ebp-0x14]
c00081f5:	50                   	push   eax
c00081f6:	e8 9d e2 ff ff       	call   c0006498 <GDTEntry::setBase(unsigned int)>
c00081fb:	83 c4 10             	add    esp,0x10
c00081fe:	83 ec 08             	sub    esp,0x8
c0008201:	6a 68                	push   0x68
c0008203:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008206:	50                   	push   eax
c0008207:	e8 a8 e2 ff ff       	call   c00064b4 <GDTEntry::setLimit(unsigned int)>
c000820c:	83 c4 10             	add    esp,0x10
c000820f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008213:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008216:	83 e0 0f             	and    eax,0xf
c0008219:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000821c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000821f:	83 c8 40             	or     eax,0x40
c0008222:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008225:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000822a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008230:	05 78 01 00 00       	add    eax,0x178
c0008235:	83 ec 04             	sub    esp,0x4
c0008238:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000823b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000823e:	50                   	push   eax
c000823f:	e8 a4 e2 ff ff       	call   c00064e8 <GDT::addEntry(GDTEntry)>
c0008244:	83 c4 10             	add    esp,0x10
c0008247:	89 c2                	mov    edx,eax
c0008249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000824c:	89 10                	mov    DWORD PTR [eax],edx
c000824e:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0008253:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008259:	05 78 01 00 00       	add    eax,0x178
c000825e:	83 ec 0c             	sub    esp,0xc
c0008261:	50                   	push   eax
c0008262:	e8 ab e2 ff ff       	call   c0006512 <GDT::flush()>
c0008267:	83 c4 10             	add    esp,0x10
c000826a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000826d:	8b 00                	mov    eax,DWORD PTR [eax]
c000826f:	c9                   	leave  
c0008270:	c3                   	ret    
c0008271:	90                   	nop

c0008272 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008276:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000827a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000827d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008282:	75 08                	jne    c000828c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008284:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000828a:	eb 38                	jmp    c00082c4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000828c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008291:	75 17                	jne    c00082aa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008298:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000829b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00082a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00082a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00082a7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00082aa:	89 c1                	mov    ecx,eax
c00082ac:	83 e1 fd             	and    ecx,0xfffffffd
c00082af:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00082b5:	74 cd                	je     c0008284 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00082b7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00082bc:	83 e0 ef             	and    eax,0xffffffef
c00082bf:	83 f8 08             	cmp    eax,0x8
c00082c2:	76 c0                	jbe    c0008284 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00082c4:	31 c0                	xor    eax,eax
c00082c6:	c3                   	ret    
c00082c7:	90                   	nop

c00082c8 <ReservedFilename::isAtty()>:
c00082c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00082cf:	31 c0                	xor    eax,eax
c00082d1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00082d7:	74 09                	je     c00082e2 <ReservedFilename::isAtty()+0x1a>
c00082d9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00082df:	0f 94 c0             	sete   al
c00082e2:	c3                   	ret    
c00082e3:	90                   	nop

c00082e4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00082e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00082ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00082f3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00082f8:	75 08                	jne    c0008302 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00082fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008300:	eb 3d                	jmp    c000833f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008302:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008307:	75 17                	jne    c0008320 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008309:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000830e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008311:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008317:	8b 10                	mov    edx,DWORD PTR [eax]
c0008319:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000831d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008320:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008325:	75 04                	jne    c000832b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008327:	89 0a                	mov    DWORD PTR [edx],ecx
c0008329:	eb 14                	jmp    c000833f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000832b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008330:	74 c8                	je     c00082fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008332:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008337:	83 e0 ef             	and    eax,0xffffffef
c000833a:	83 f8 08             	cmp    eax,0x8
c000833d:	76 bb                	jbe    c00082fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000833f:	31 c0                	xor    eax,eax
c0008341:	c3                   	ret    

c0008342 <UnixFile::getFileDescriptor()>:
c0008342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008349:	c3                   	ret    

c000834a <UnixFile::UnixFile(int)>:
c000834a:	53                   	push   ebx
c000834b:	83 ec 28             	sub    esp,0x28
c000834e:	ba d8 cf 01 c0       	mov    edx,0xc001cfd8
c0008353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008357:	89 10                	mov    DWORD PTR [eax],edx
c0008359:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008361:	0f 8f 8c 01 00 00    	jg     c00084f3 <UnixFile::UnixFile(int)+0x1a9>
c0008367:	a1 40 ef 01 c0       	mov    eax,ds:0xc001ef40
c000836c:	8d 50 01             	lea    edx,[eax+0x1]
c000836f:	89 15 40 ef 01 c0    	mov    DWORD PTR ds:0xc001ef40,edx
c0008375:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008379:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000837c:	83 ec 08             	sub    esp,0x8
c000837f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008383:	68 78 f6 01 c0       	push   0xc001f678
c0008388:	e8 fb 36 01 00       	call   c001ba88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000838d:	83 c4 10             	add    esp,0x10
c0008390:	a0 74 f6 01 c0       	mov    al,ds:0xc001f674
c0008395:	83 f0 01             	xor    eax,0x1
c0008398:	84 c0                	test   al,al
c000839a:	0f 84 54 01 00 00    	je     c00084f4 <UnixFile::UnixFile(int)+0x1aa>
c00083a0:	c6 05 74 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f674,0x1
c00083a7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00083af:	83 ec 0c             	sub    esp,0xc
c00083b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083b6:	e8 96 e8 ff ff       	call   c0006c51 <malloc>
c00083bb:	83 c4 10             	add    esp,0x10
c00083be:	89 c3                	mov    ebx,eax
c00083c0:	83 ec 08             	sub    esp,0x8
c00083c3:	68 03 ff ff 0f       	push   0xfffff03
c00083c8:	53                   	push   ebx
c00083c9:	e8 2c 01 00 00       	call   c00084fa <ReservedFilename::ReservedFilename(int)>
c00083ce:	83 c4 10             	add    esp,0x10
c00083d1:	89 1d 6c f6 01 c0    	mov    DWORD PTR ds:0xc001f66c,ebx
c00083d7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00083df:	83 ec 0c             	sub    esp,0xc
c00083e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083e6:	e8 66 e8 ff ff       	call   c0006c51 <malloc>
c00083eb:	83 c4 10             	add    esp,0x10
c00083ee:	89 c3                	mov    ebx,eax
c00083f0:	83 ec 08             	sub    esp,0x8
c00083f3:	68 01 ff ff 0f       	push   0xfffff01
c00083f8:	53                   	push   ebx
c00083f9:	e8 fc 00 00 00       	call   c00084fa <ReservedFilename::ReservedFilename(int)>
c00083fe:	83 c4 10             	add    esp,0x10
c0008401:	89 1d 70 f6 01 c0    	mov    DWORD PTR ds:0xc001f670,ebx
c0008407:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008416:	e8 36 e8 ff ff       	call   c0006c51 <malloc>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	89 c3                	mov    ebx,eax
c0008420:	83 ec 08             	sub    esp,0x8
c0008423:	68 00 ff ff 0f       	push   0xfffff00
c0008428:	53                   	push   ebx
c0008429:	e8 cc 00 00 00       	call   c00084fa <ReservedFilename::ReservedFilename(int)>
c000842e:	83 c4 10             	add    esp,0x10
c0008431:	89 1d 64 f6 01 c0    	mov    DWORD PTR ds:0xc001f664,ebx
c0008437:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000843f:	83 ec 0c             	sub    esp,0xc
c0008442:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008446:	e8 06 e8 ff ff       	call   c0006c51 <malloc>
c000844b:	83 c4 10             	add    esp,0x10
c000844e:	89 c3                	mov    ebx,eax
c0008450:	83 ec 08             	sub    esp,0x8
c0008453:	68 02 ff ff 0f       	push   0xfffff02
c0008458:	53                   	push   ebx
c0008459:	e8 9c 00 00 00       	call   c00084fa <ReservedFilename::ReservedFilename(int)>
c000845e:	83 c4 10             	add    esp,0x10
c0008461:	89 1d 68 f6 01 c0    	mov    DWORD PTR ds:0xc001f668,ebx
c0008467:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000846f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008474:	7f 7e                	jg     c00084f4 <UnixFile::UnixFile(int)+0x1aa>
c0008476:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000847e:	83 ec 0c             	sub    esp,0xc
c0008481:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008485:	e8 c7 e7 ff ff       	call   c0006c51 <malloc>
c000848a:	83 c4 10             	add    esp,0x10
c000848d:	89 c3                	mov    ebx,eax
c000848f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008493:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008498:	83 ec 08             	sub    esp,0x8
c000849b:	50                   	push   eax
c000849c:	53                   	push   ebx
c000849d:	e8 58 00 00 00       	call   c00084fa <ReservedFilename::ReservedFilename(int)>
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084a9:	89 1c 85 40 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe09c0],ebx
c00084b0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084bf:	e8 8d e7 ff ff       	call   c0006c51 <malloc>
c00084c4:	83 c4 10             	add    esp,0x10
c00084c7:	89 c3                	mov    ebx,eax
c00084c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084cd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00084d2:	83 ec 08             	sub    esp,0x8
c00084d5:	50                   	push   eax
c00084d6:	53                   	push   ebx
c00084d7:	e8 1e 00 00 00       	call   c00084fa <ReservedFilename::ReservedFilename(int)>
c00084dc:	83 c4 10             	add    esp,0x10
c00084df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084e3:	89 1c 85 00 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0a00],ebx
c00084ea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00084ee:	e9 7c ff ff ff       	jmp    c000846f <UnixFile::UnixFile(int)+0x125>
c00084f3:	90                   	nop
c00084f4:	83 c4 28             	add    esp,0x28
c00084f7:	5b                   	pop    ebx
c00084f8:	c3                   	ret    
c00084f9:	90                   	nop

c00084fa <ReservedFilename::ReservedFilename(int)>:
c00084fa:	83 ec 0c             	sub    esp,0xc
c00084fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008501:	83 ec 08             	sub    esp,0x8
c0008504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008508:	50                   	push   eax
c0008509:	e8 3c fe ff ff       	call   c000834a <UnixFile::UnixFile(int)>
c000850e:	83 c4 10             	add    esp,0x10
c0008511:	ba f4 cf 01 c0       	mov    edx,0xc001cff4
c0008516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000851a:	89 10                	mov    DWORD PTR [eax],edx
c000851c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008524:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008527:	90                   	nop
c0008528:	83 c4 0c             	add    esp,0xc
c000852b:	c3                   	ret    

c000852c <UnixFile::~UnixFile()>:
c000852c:	83 ec 1c             	sub    esp,0x1c
c000852f:	ba d8 cf 01 c0       	mov    edx,0xc001cfd8
c0008534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008538:	89 10                	mov    DWORD PTR [eax],edx
c000853a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008541:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008546:	7f 73                	jg     c00085bb <UnixFile::~UnixFile()+0x8f>
c0008548:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008550:	83 ec 0c             	sub    esp,0xc
c0008553:	68 78 f6 01 c0       	push   0xc001f678
c0008558:	e8 ff 35 01 00       	call   c001bb5c <LinkedList<UnixFile>::getFirstElement()>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008564:	83 ec 0c             	sub    esp,0xc
c0008567:	68 78 f6 01 c0       	push   0xc001f678
c000856c:	e8 f3 35 01 00       	call   c001bb64 <LinkedList<UnixFile>::removeFirst()>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008578:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000857c:	74 40                	je     c00085be <UnixFile::~UnixFile()+0x92>
c000857e:	83 ec 08             	sub    esp,0x8
c0008581:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008585:	68 78 f6 01 c0       	push   0xc001f678
c000858a:	e8 f9 34 01 00       	call   c001ba88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000858f:	83 c4 10             	add    esp,0x10
c0008592:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008596:	8d 50 01             	lea    edx,[eax+0x1]
c0008599:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000859d:	3d 88 13 00 00       	cmp    eax,0x1388
c00085a2:	0f 94 c0             	sete   al
c00085a5:	84 c0                	test   al,al
c00085a7:	74 a7                	je     c0008550 <UnixFile::~UnixFile()+0x24>
c00085a9:	83 ec 0c             	sub    esp,0xc
c00085ac:	68 b0 cf 01 c0       	push   0xc001cfb0
c00085b1:	e8 b1 6f 00 00       	call   c000f567 <Krnl::panic(char const*)>
c00085b6:	83 c4 10             	add    esp,0x10
c00085b9:	eb 95                	jmp    c0008550 <UnixFile::~UnixFile()+0x24>
c00085bb:	90                   	nop
c00085bc:	eb 01                	jmp    c00085bf <UnixFile::~UnixFile()+0x93>
c00085be:	90                   	nop
c00085bf:	90                   	nop
c00085c0:	83 c4 1c             	add    esp,0x1c
c00085c3:	c3                   	ret    

c00085c4 <UnixFile::~UnixFile()>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 59 ff ff ff       	call   c000852c <UnixFile::~UnixFile()>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 ec 08             	sub    esp,0x8
c00085d9:	6a 0c                	push   0xc
c00085db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085df:	e8 3a 13 00 00       	call   c000991e <operator delete(void*, unsigned long)>
c00085e4:	83 c4 10             	add    esp,0x10
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ReservedFilename::~ReservedFilename()>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	ba f4 cf 01 c0       	mov    edx,0xc001cff4
c00085f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f8:	89 10                	mov    DWORD PTR [eax],edx
c00085fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085fe:	83 ec 0c             	sub    esp,0xc
c0008601:	50                   	push   eax
c0008602:	e8 25 ff ff ff       	call   c000852c <UnixFile::~UnixFile()>
c0008607:	83 c4 10             	add    esp,0x10
c000860a:	90                   	nop
c000860b:	83 c4 0c             	add    esp,0xc
c000860e:	c3                   	ret    
c000860f:	90                   	nop

c0008610 <ReservedFilename::~ReservedFilename()>:
c0008610:	83 ec 0c             	sub    esp,0xc
c0008613:	83 ec 0c             	sub    esp,0xc
c0008616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000861a:	e8 cd ff ff ff       	call   c00085ec <ReservedFilename::~ReservedFilename()>
c000861f:	83 c4 10             	add    esp,0x10
c0008622:	83 ec 08             	sub    esp,0x8
c0008625:	6a 0c                	push   0xc
c0008627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000862b:	e8 ee 12 00 00       	call   c000991e <operator delete(void*, unsigned long)>
c0008630:	83 c4 10             	add    esp,0x10
c0008633:	83 c4 0c             	add    esp,0xc
c0008636:	c3                   	ret    

c0008637 <getFromFileDescriptor(int)>:
c0008637:	53                   	push   ebx
c0008638:	83 ec 08             	sub    esp,0x8
c000863b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000863f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008645:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000864b:	7f 2c                	jg     c0008679 <getFromFileDescriptor(int)+0x42>
c000864d:	83 ec 0c             	sub    esp,0xc
c0008650:	68 78 f6 01 c0       	push   0xc001f678
c0008655:	e8 02 35 01 00       	call   c001bb5c <LinkedList<UnixFile>::getFirstElement()>
c000865a:	83 c4 10             	add    esp,0x10
c000865d:	85 c0                	test   eax,eax
c000865f:	75 04                	jne    c0008665 <getFromFileDescriptor(int)+0x2e>
c0008661:	31 c0                	xor    eax,eax
c0008663:	eb 6e                	jmp    c00086d3 <getFromFileDescriptor(int)+0x9c>
c0008665:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0008668:	74 69                	je     c00086d3 <getFromFileDescriptor(int)+0x9c>
c000866a:	52                   	push   edx
c000866b:	52                   	push   edx
c000866c:	50                   	push   eax
c000866d:	68 78 f6 01 c0       	push   0xc001f678
c0008672:	e8 8f 35 01 00       	call   c001bc06 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0008677:	eb e1                	jmp    c000865a <getFromFileDescriptor(int)+0x23>
c0008679:	a1 6c f6 01 c0       	mov    eax,ds:0xc001f66c
c000867e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008684:	74 4d                	je     c00086d3 <getFromFileDescriptor(int)+0x9c>
c0008686:	a1 70 f6 01 c0       	mov    eax,ds:0xc001f670
c000868b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0008691:	74 40                	je     c00086d3 <getFromFileDescriptor(int)+0x9c>
c0008693:	a1 68 f6 01 c0       	mov    eax,ds:0xc001f668
c0008698:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000869e:	74 33                	je     c00086d3 <getFromFileDescriptor(int)+0x9c>
c00086a0:	a1 64 f6 01 c0       	mov    eax,ds:0xc001f664
c00086a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00086ab:	74 26                	je     c00086d3 <getFromFileDescriptor(int)+0x9c>
c00086ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00086b3:	83 f8 08             	cmp    eax,0x8
c00086b6:	77 09                	ja     c00086c1 <getFromFileDescriptor(int)+0x8a>
c00086b8:	8b 04 85 40 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe09c0]
c00086bf:	eb 12                	jmp    c00086d3 <getFromFileDescriptor(int)+0x9c>
c00086c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00086c7:	83 fb 08             	cmp    ebx,0x8
c00086ca:	77 95                	ja     c0008661 <getFromFileDescriptor(int)+0x2a>
c00086cc:	8b 04 9d 00 f6 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe0a00]
c00086d3:	83 c4 08             	add    esp,0x8
c00086d6:	5b                   	pop    ebx
c00086d7:	c3                   	ret    

c00086d8 <__static_initialization_and_destruction_0(int, int)>:
c00086d8:	83 ec 0c             	sub    esp,0xc
c00086db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00086e0:	75 34                	jne    c0008716 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00086e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00086ea:	75 2a                	jne    c0008716 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00086ec:	83 ec 0c             	sub    esp,0xc
c00086ef:	68 78 f6 01 c0       	push   0xc001f678
c00086f4:	e8 4d 33 01 00       	call   c001ba46 <LinkedList<UnixFile>::LinkedList()>
c00086f9:	83 c4 10             	add    esp,0x10
c00086fc:	83 ec 04             	sub    esp,0x4
c00086ff:	68 74 ed 01 c0       	push   0xc001ed74
c0008704:	68 78 f6 01 c0       	push   0xc001f678
c0008709:	68 44 ba 01 c0       	push   0xc001ba44
c000870e:	e8 bb 11 00 00       	call   c00098ce <__cxa_atexit>
c0008713:	83 c4 10             	add    esp,0x10
c0008716:	90                   	nop
c0008717:	83 c4 0c             	add    esp,0xc
c000871a:	c3                   	ret    

c000871b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000871b:	83 ec 0c             	sub    esp,0xc
c000871e:	83 ec 08             	sub    esp,0x8
c0008721:	68 ff ff 00 00       	push   0xffff
c0008726:	6a 01                	push   0x1
c0008728:	e8 ab ff ff ff       	call   c00086d8 <__static_initialization_and_destruction_0(int, int)>
c000872d:	83 c4 10             	add    esp,0x10
c0008730:	83 c4 0c             	add    esp,0xc
c0008733:	c3                   	ret    

c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008734:	53                   	push   ebx
c0008735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008739:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000873d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008743:	89 c8                	mov    eax,ecx
c0008745:	d1 e8                	shr    eax,1
c0008747:	03 05 48 ef 01 c0    	add    eax,DWORD PTR ds:0xc001ef48
c000874d:	83 e1 01             	and    ecx,0x1
c0008750:	8a 10                	mov    dl,BYTE PTR [eax]
c0008752:	75 09                	jne    c000875d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008754:	83 e2 f0             	and    edx,0xfffffff0
c0008757:	09 da                	or     edx,ebx
c0008759:	88 10                	mov    BYTE PTR [eax],dl
c000875b:	5b                   	pop    ebx
c000875c:	c3                   	ret    
c000875d:	c1 e3 04             	shl    ebx,0x4
c0008760:	83 e2 0f             	and    edx,0xf
c0008763:	09 da                	or     edx,ebx
c0008765:	88 10                	mov    BYTE PTR [eax],dl
c0008767:	5b                   	pop    ebx
c0008768:	c3                   	ret    

c0008769 <Virt::getPageState(unsigned long)>:
c0008769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000876d:	8b 0d 48 ef 01 c0    	mov    ecx,DWORD PTR ds:0xc001ef48
c0008773:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0008779:	89 d0                	mov    eax,edx
c000877b:	d1 e8                	shr    eax,1
c000877d:	83 e2 01             	and    edx,0x1
c0008780:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008783:	75 04                	jne    c0008789 <Virt::getPageState(unsigned long)+0x20>
c0008785:	83 e0 0f             	and    eax,0xf
c0008788:	c3                   	ret    
c0008789:	c0 e8 04             	shr    al,0x4
c000878c:	c3                   	ret    

c000878d <Virt::allocateKernelVirtualPages(int)>:
c000878d:	55                   	push   ebp
c000878e:	31 ed                	xor    ebp,ebp
c0008790:	57                   	push   edi
c0008791:	56                   	push   esi
c0008792:	53                   	push   ebx
c0008793:	31 db                	xor    ebx,ebx
c0008795:	83 ec 1c             	sub    esp,0x1c
c0008798:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000879c:	8b 3d 44 ef 01 c0    	mov    edi,DWORD PTR ds:0xc001ef44
c00087a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00087a7:	57                   	push   edi
c00087a8:	e8 bc ff ff ff       	call   c0008769 <Virt::getPageState(unsigned long)>
c00087ad:	5a                   	pop    edx
c00087ae:	84 c0                	test   al,al
c00087b0:	75 3a                	jne    c00087ec <Virt::allocateKernelVirtualPages(int)+0x5f>
c00087b2:	85 db                	test   ebx,ebx
c00087b4:	75 02                	jne    c00087b8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00087b6:	89 fd                	mov    ebp,edi
c00087b8:	43                   	inc    ebx
c00087b9:	39 f3                	cmp    ebx,esi
c00087bb:	74 5a                	je     c0008817 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00087bd:	47                   	inc    edi
c00087be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00087c4:	76 31                	jbe    c00087f7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00087c6:	c7 05 44 ef 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001ef44,0xc8000
c00087d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00087d5:	75 28                	jne    c00087ff <Virt::allocateKernelVirtualPages(int)+0x72>
c00087d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00087dc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00087e1:	57                   	push   edi
c00087e2:	e8 82 ff ff ff       	call   c0008769 <Virt::getPageState(unsigned long)>
c00087e7:	5a                   	pop    edx
c00087e8:	84 c0                	test   al,al
c00087ea:	74 c6                	je     c00087b2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00087ec:	31 db                	xor    ebx,ebx
c00087ee:	47                   	inc    edi
c00087ef:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00087f5:	77 cf                	ja     c00087c6 <Virt::allocateKernelVirtualPages(int)+0x39>
c00087f7:	89 3d 44 ef 01 c0    	mov    DWORD PTR ds:0xc001ef44,edi
c00087fd:	eb a8                	jmp    c00087a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00087ff:	83 ec 0c             	sub    esp,0xc
c0008802:	68 08 d0 01 c0       	push   0xc001d008
c0008807:	e8 5b 6d 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000880c:	8b 3d 44 ef 01 c0    	mov    edi,DWORD PTR ds:0xc001ef44
c0008812:	83 c4 10             	add    esp,0x10
c0008815:	eb 90                	jmp    c00087a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0008817:	89 2d 44 ef 01 c0    	mov    DWORD PTR ds:0xc001ef44,ebp
c000881d:	4b                   	dec    ebx
c000881e:	74 5f                	je     c000887f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008820:	85 f6                	test   esi,esi
c0008822:	74 3d                	je     c0008861 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008824:	89 e8                	mov    eax,ebp
c0008826:	31 db                	xor    ebx,ebx
c0008828:	8d 7e ff             	lea    edi,[esi-0x1]
c000882b:	eb 14                	jmp    c0008841 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000882d:	6a 01                	push   0x1
c000882f:	43                   	inc    ebx
c0008830:	50                   	push   eax
c0008831:	e8 fe fe ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008836:	58                   	pop    eax
c0008837:	39 f3                	cmp    ebx,esi
c0008839:	5a                   	pop    edx
c000883a:	74 25                	je     c0008861 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000883c:	a1 44 ef 01 c0       	mov    eax,ds:0xc001ef44
c0008841:	8d 50 01             	lea    edx,[eax+0x1]
c0008844:	85 db                	test   ebx,ebx
c0008846:	89 15 44 ef 01 c0    	mov    DWORD PTR ds:0xc001ef44,edx
c000884c:	74 20                	je     c000886e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000884e:	39 df                	cmp    edi,ebx
c0008850:	75 db                	jne    c000882d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008852:	6a 03                	push   0x3
c0008854:	43                   	inc    ebx
c0008855:	50                   	push   eax
c0008856:	e8 d9 fe ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000885b:	59                   	pop    ecx
c000885c:	39 f3                	cmp    ebx,esi
c000885e:	58                   	pop    eax
c000885f:	75 db                	jne    c000883c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008861:	83 c4 1c             	add    esp,0x1c
c0008864:	89 e8                	mov    eax,ebp
c0008866:	5b                   	pop    ebx
c0008867:	c1 e0 0c             	shl    eax,0xc
c000886a:	5e                   	pop    esi
c000886b:	5f                   	pop    edi
c000886c:	5d                   	pop    ebp
c000886d:	c3                   	ret    
c000886e:	6a 02                	push   0x2
c0008870:	bb 01 00 00 00       	mov    ebx,0x1
c0008875:	50                   	push   eax
c0008876:	e8 b9 fe ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000887b:	58                   	pop    eax
c000887c:	5a                   	pop    edx
c000887d:	eb bd                	jmp    c000883c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000887f:	6a 04                	push   0x4
c0008881:	8d 45 01             	lea    eax,[ebp+0x1]
c0008884:	55                   	push   ebp
c0008885:	a3 44 ef 01 c0       	mov    ds:0xc001ef44,eax
c000888a:	e8 a5 fe ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000888f:	59                   	pop    ecx
c0008890:	89 e8                	mov    eax,ebp
c0008892:	5b                   	pop    ebx
c0008893:	c1 e0 0c             	shl    eax,0xc
c0008896:	83 c4 1c             	add    esp,0x1c
c0008899:	5b                   	pop    ebx
c000889a:	5e                   	pop    esi
c000889b:	5f                   	pop    edi
c000889c:	5d                   	pop    ebp
c000889d:	c3                   	ret    

c000889e <Virt::freeSwapfilePage(unsigned long)>:
c000889e:	53                   	push   ebx
c000889f:	8b 15 90 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f690
c00088a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088a9:	b8 01 00 00 00       	mov    eax,0x1
c00088ae:	89 cb                	mov    ebx,ecx
c00088b0:	d3 e0                	shl    eax,cl
c00088b2:	c1 eb 05             	shr    ebx,0x5
c00088b5:	f7 d0                	not    eax
c00088b7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00088ba:	5b                   	pop    ebx
c00088bb:	c3                   	ret    

c00088bc <Virt::swapIDToSector(unsigned long)>:
c00088bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088c0:	0f af 05 4c ef 01 c0 	imul   eax,DWORD PTR ds:0xc001ef4c
c00088c7:	03 05 54 ef 01 c0    	add    eax,DWORD PTR ds:0xc001ef54
c00088cd:	c3                   	ret    

c00088ce <Virt::allocateSwapfilePage()>:
c00088ce:	55                   	push   ebp
c00088cf:	31 d2                	xor    edx,edx
c00088d1:	57                   	push   edi
c00088d2:	56                   	push   esi
c00088d3:	53                   	push   ebx
c00088d4:	83 ec 0c             	sub    esp,0xc
c00088d7:	8b 0d 4c ef 01 c0    	mov    ecx,DWORD PTR ds:0xc001ef4c
c00088dd:	a1 50 ef 01 c0       	mov    eax,ds:0xc001ef50
c00088e2:	f7 f1                	div    ecx
c00088e4:	39 0d 50 ef 01 c0    	cmp    DWORD PTR ds:0xc001ef50,ecx
c00088ea:	72 2d                	jb     c0008919 <Virt::allocateSwapfilePage()+0x4b>
c00088ec:	8b 35 90 f6 01 c0    	mov    esi,DWORD PTR ds:0xc001f690
c00088f2:	8b 16                	mov    edx,DWORD PTR [esi]
c00088f4:	f6 c2 01             	test   dl,0x1
c00088f7:	74 3c                	je     c0008935 <Virt::allocateSwapfilePage()+0x67>
c00088f9:	31 c9                	xor    ecx,ecx
c00088fb:	bf 01 00 00 00       	mov    edi,0x1
c0008900:	eb 12                	jmp    c0008914 <Virt::allocateSwapfilePage()+0x46>
c0008902:	89 fd                	mov    ebp,edi
c0008904:	89 ca                	mov    edx,ecx
c0008906:	d3 e5                	shl    ebp,cl
c0008908:	c1 ea 05             	shr    edx,0x5
c000890b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000890e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008910:	85 ea                	test   edx,ebp
c0008912:	74 2a                	je     c000893e <Virt::allocateSwapfilePage()+0x70>
c0008914:	41                   	inc    ecx
c0008915:	39 c8                	cmp    eax,ecx
c0008917:	77 e9                	ja     c0008902 <Virt::allocateSwapfilePage()+0x34>
c0008919:	83 ec 0c             	sub    esp,0xc
c000891c:	68 6f d1 01 c0       	push   0xc001d16f
c0008921:	e8 41 6c 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0008926:	83 c4 10             	add    esp,0x10
c0008929:	31 c9                	xor    ecx,ecx
c000892b:	83 c4 0c             	add    esp,0xc
c000892e:	89 c8                	mov    eax,ecx
c0008930:	5b                   	pop    ebx
c0008931:	5e                   	pop    esi
c0008932:	5f                   	pop    edi
c0008933:	5d                   	pop    ebp
c0008934:	c3                   	ret    
c0008935:	89 f3                	mov    ebx,esi
c0008937:	bd 01 00 00 00       	mov    ebp,0x1
c000893c:	31 c9                	xor    ecx,ecx
c000893e:	09 ea                	or     edx,ebp
c0008940:	89 c8                	mov    eax,ecx
c0008942:	89 13                	mov    DWORD PTR [ebx],edx
c0008944:	83 c4 0c             	add    esp,0xc
c0008947:	5b                   	pop    ebx
c0008948:	5e                   	pop    esi
c0008949:	5f                   	pop    edi
c000894a:	5d                   	pop    ebp
c000894b:	c3                   	ret    

c000894c <Virt::virtualMemorySetup()>:
c000894c:	53                   	push   ebx
c000894d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008952:	6a 0f                	push   0xf
c0008954:	53                   	push   ebx
c0008955:	43                   	inc    ebx
c0008956:	e8 d9 fd ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000895b:	58                   	pop    eax
c000895c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008962:	5a                   	pop    edx
c0008963:	75 ed                	jne    c0008952 <Virt::virtualMemorySetup()+0x6>
c0008965:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000896a:	6a 00                	push   0x0
c000896c:	53                   	push   ebx
c000896d:	43                   	inc    ebx
c000896e:	e8 c1 fd ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008973:	59                   	pop    ecx
c0008974:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000897a:	58                   	pop    eax
c000897b:	75 ed                	jne    c000896a <Virt::virtualMemorySetup()+0x1e>
c000897d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008982:	6a 0f                	push   0xf
c0008984:	53                   	push   ebx
c0008985:	43                   	inc    ebx
c0008986:	e8 a9 fd ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000898b:	58                   	pop    eax
c000898c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0008992:	5a                   	pop    edx
c0008993:	75 ed                	jne    c0008982 <Virt::virtualMemorySetup()+0x36>
c0008995:	5b                   	pop    ebx
c0008996:	c3                   	ret    

c0008997 <Virt::setupPageSwapping(int)>:
c0008997:	53                   	push   ebx
c0008998:	83 ec 0c             	sub    esp,0xc
c000899b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000899f:	a1 28 1b 02 c0       	mov    eax,ds:0xc0021b28
c00089a4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00089aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00089ac:	53                   	push   ebx
c00089ad:	c1 e3 0b             	shl    ebx,0xb
c00089b0:	68 86 d1 01 c0       	push   0xc001d186
c00089b5:	50                   	push   eax
c00089b6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00089b9:	89 1d 50 ef 01 c0    	mov    DWORD PTR ds:0xc001ef50,ebx
c00089bf:	c6 05 58 ef 01 c0 43 	mov    BYTE PTR ds:0xc001ef58,0x43
c00089c6:	c1 eb 08             	shr    ebx,0x8
c00089c9:	a3 54 ef 01 c0       	mov    ds:0xc001ef54,eax
c00089ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00089d1:	c7 05 4c ef 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001ef4c,0x8
c00089db:	e8 71 e2 ff ff       	call   c0006c51 <malloc>
c00089e0:	83 c4 0c             	add    esp,0xc
c00089e3:	89 c1                	mov    ecx,eax
c00089e5:	a3 90 f6 01 c0       	mov    ds:0xc001f690,eax
c00089ea:	31 d2                	xor    edx,edx
c00089ec:	a1 50 ef 01 c0       	mov    eax,ds:0xc001ef50
c00089f1:	f7 35 4c ef 01 c0    	div    DWORD PTR ds:0xc001ef4c
c00089f7:	c1 e8 05             	shr    eax,0x5
c00089fa:	50                   	push   eax
c00089fb:	6a 00                	push   0x0
c00089fd:	51                   	push   ecx
c00089fe:	e8 ed 7a ff ff       	call   c00004f0 <memset>
c0008a03:	83 c4 18             	add    esp,0x18
c0008a06:	5b                   	pop    ebx
c0008a07:	c3                   	ret    

c0008a08 <VAS::VAS(VAS*)>:
c0008a08:	83 ec 0c             	sub    esp,0xc
c0008a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008a21:	83 ec 0c             	sub    esp,0xc
c0008a24:	68 28 d0 01 c0       	push   0xc001d028
c0008a29:	e8 39 6b 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0008a2e:	83 c4 10             	add    esp,0x10
c0008a31:	90                   	nop
c0008a32:	83 c4 0c             	add    esp,0xc
c0008a35:	c3                   	ret    

c0008a36 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0008a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a3a:	89 c2                	mov    edx,eax
c0008a3c:	c1 e8 0a             	shr    eax,0xa
c0008a3f:	c1 ea 16             	shr    edx,0x16
c0008a42:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008a47:	19 c9                	sbb    ecx,ecx
c0008a49:	c1 e2 0c             	shl    edx,0xc
c0008a4c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0008a52:	25 fc 0f 00 00       	and    eax,0xffc
c0008a57:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0008a5e:	01 d0                	add    eax,edx
c0008a60:	c3                   	ret    
c0008a61:	90                   	nop

c0008a62 <VAS::getPageTableEntry(unsigned long)>:
c0008a62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008a66:	89 ca                	mov    edx,ecx
c0008a68:	c1 e9 0a             	shr    ecx,0xa
c0008a6b:	c1 ea 16             	shr    edx,0x16
c0008a6e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0008a74:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0008a7a:	c1 e0 0c             	shl    eax,0xc
c0008a7d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008a80:	c3                   	ret    

c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008a81:	57                   	push   edi
c0008a82:	56                   	push   esi
c0008a83:	be 01 00 00 00       	mov    esi,0x1
c0008a88:	53                   	push   ebx
c0008a89:	83 ec 10             	sub    esp,0x10
c0008a8c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a90:	c1 eb 0c             	shr    ebx,0xc
c0008a93:	eb 3f                	jmp    c0008ad4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0008a95:	83 ec 08             	sub    esp,0x8
c0008a98:	a1 94 f6 01 c0       	mov    eax,ds:0xc001f694
c0008a9d:	57                   	push   edi
c0008a9e:	50                   	push   eax
c0008a9f:	e8 be ff ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c0008aa4:	83 c4 10             	add    esp,0x10
c0008aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0008aa9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008aad:	f6 c4 04             	test   ah,0x4
c0008ab0:	75 60                	jne    c0008b12 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0008ab2:	80 fa 04             	cmp    dl,0x4
c0008ab5:	74 79                	je     c0008b30 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0008ab7:	80 fa 02             	cmp    dl,0x2
c0008aba:	0f 84 89 00 00 00    	je     c0008b49 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0008ac0:	80 fa 03             	cmp    dl,0x3
c0008ac3:	0f 84 ae 00 00 00    	je     c0008b77 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0008ac9:	fe ca                	dec    dl
c0008acb:	0f 84 93 00 00 00    	je     c0008b64 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008ad1:	43                   	inc    ebx
c0008ad2:	31 f6                	xor    esi,esi
c0008ad4:	53                   	push   ebx
c0008ad5:	89 df                	mov    edi,ebx
c0008ad7:	e8 8d fc ff ff       	call   c0008769 <Virt::getPageState(unsigned long)>
c0008adc:	c1 e7 0c             	shl    edi,0xc
c0008adf:	5a                   	pop    edx
c0008ae0:	84 c0                	test   al,al
c0008ae2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ae6:	75 ad                	jne    c0008a95 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0008ae8:	83 ec 0c             	sub    esp,0xc
c0008aeb:	68 9d d1 01 c0       	push   0xc001d19d
c0008af0:	e8 72 6a 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0008af5:	5a                   	pop    edx
c0008af6:	59                   	pop    ecx
c0008af7:	57                   	push   edi
c0008af8:	8b 3d 94 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f694
c0008afe:	57                   	push   edi
c0008aff:	e8 5e ff ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c0008b04:	83 c4 10             	add    esp,0x10
c0008b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b09:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008b0d:	f6 c4 04             	test   ah,0x4
c0008b10:	74 bf                	je     c0008ad1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b12:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008b16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008b1b:	83 ec 0c             	sub    esp,0xc
c0008b1e:	50                   	push   eax
c0008b1f:	e8 98 e4 ff ff       	call   c0006fbc <Phys::freePage(unsigned long)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008b2b:	80 fa 04             	cmp    dl,0x4
c0008b2e:	75 87                	jne    c0008ab7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008b30:	89 f0                	mov    eax,esi
c0008b32:	84 c0                	test   al,al
c0008b34:	75 47                	jne    c0008b7d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0008b36:	c7 44 24 20 4c d0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d04c
c0008b3e:	83 c4 10             	add    esp,0x10
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	e9 1e 6a 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c0008b49:	89 f0                	mov    eax,esi
c0008b4b:	84 c0                	test   al,al
c0008b4d:	75 15                	jne    c0008b64 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	68 b9 d1 01 c0       	push   0xc001d1b9
c0008b57:	e8 0b 6a 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0008b5c:	83 c4 10             	add    esp,0x10
c0008b5f:	e9 6d ff ff ff       	jmp    c0008ad1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b64:	83 ec 08             	sub    esp,0x8
c0008b67:	6a 00                	push   0x0
c0008b69:	53                   	push   ebx
c0008b6a:	e8 c5 fb ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008b6f:	83 c4 10             	add    esp,0x10
c0008b72:	e9 5a ff ff ff       	jmp    c0008ad1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b77:	89 f0                	mov    eax,esi
c0008b79:	84 c0                	test   al,al
c0008b7b:	75 15                	jne    c0008b92 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0008b7d:	83 ec 08             	sub    esp,0x8
c0008b80:	6a 00                	push   0x0
c0008b82:	53                   	push   ebx
c0008b83:	e8 ac fb ff ff       	call   c0008734 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008b88:	83 c4 10             	add    esp,0x10
c0008b8b:	83 c4 10             	add    esp,0x10
c0008b8e:	5b                   	pop    ebx
c0008b8f:	5e                   	pop    esi
c0008b90:	5f                   	pop    edi
c0008b91:	c3                   	ret    
c0008b92:	c7 44 24 20 d5 d1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d1d5
c0008b9a:	83 c4 10             	add    esp,0x10
c0008b9d:	5b                   	pop    ebx
c0008b9e:	5e                   	pop    esi
c0008b9f:	5f                   	pop    edi
c0008ba0:	e9 c2 69 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c0008ba5:	90                   	nop

c0008ba6 <VAS::freeAllocatedPages(unsigned long)>:
c0008ba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008baa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008bae:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008bb2:	74 09                	je     c0008bbd <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008bb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008bb8:	e9 c4 fe ff ff       	jmp    c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>
c0008bbd:	c7 44 24 04 70 d0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d070
c0008bc5:	e9 4a 0e 00 00       	jmp    c0009a14 <Dbg::kprintf(char const*, ...)>

c0008bca <VAS::virtualToPhysical(unsigned long)>:
c0008bca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008bce:	50                   	push   eax
c0008bcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008bd3:	52                   	push   edx
c0008bd4:	e8 89 fe ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c0008bd9:	59                   	pop    ecx
c0008bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bdc:	5a                   	pop    edx
c0008bdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008be2:	c3                   	ret    
c0008be3:	90                   	nop

c0008be4 <VAS::reflagRange(unsigned long, int, int, int)>:
c0008be4:	55                   	push   ebp
c0008be5:	57                   	push   edi
c0008be6:	56                   	push   esi
c0008be7:	53                   	push   ebx
c0008be8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008bec:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008bf0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bf4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008bf8:	85 db                	test   ebx,ebx
c0008bfa:	7e 22                	jle    c0008c1e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008bfc:	c1 e3 0c             	shl    ebx,0xc
c0008bff:	01 f3                	add    ebx,esi
c0008c01:	56                   	push   esi
c0008c02:	81 c6 00 10 00 00    	add    esi,0x1000
c0008c08:	55                   	push   ebp
c0008c09:	e8 54 fe ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c0008c0e:	5a                   	pop    edx
c0008c0f:	59                   	pop    ecx
c0008c10:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008c12:	21 f9                	and    ecx,edi
c0008c14:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008c18:	39 f3                	cmp    ebx,esi
c0008c1a:	89 08                	mov    DWORD PTR [eax],ecx
c0008c1c:	75 e3                	jne    c0008c01 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008c1e:	5b                   	pop    ebx
c0008c1f:	5e                   	pop    esi
c0008c20:	5f                   	pop    edi
c0008c21:	5d                   	pop    ebp
c0008c22:	c3                   	ret    
c0008c23:	90                   	nop

c0008c24 <VAS::setToWriteCombining(unsigned long, int)>:
c0008c24:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0008c29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008c2f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008c36:	75 01                	jne    c0008c39 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008c38:	c3                   	ret    
c0008c39:	68 80 00 00 00       	push   0x80
c0008c3e:	6a ff                	push   0xffffffff
c0008c40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c44:	50                   	push   eax
c0008c45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008c49:	52                   	push   edx
c0008c4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008c4e:	51                   	push   ecx
c0008c4f:	e8 90 ff ff ff       	call   c0008be4 <VAS::reflagRange(unsigned long, int, int, int)>
c0008c54:	83 c4 14             	add    esp,0x14
c0008c57:	c3                   	ret    

c0008c58 <VAS::mapOtherVASIn(bool, VAS*)>:
c0008c58:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c61:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c68:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008c6b:	19 c0                	sbb    eax,eax
c0008c6d:	83 ca 03             	or     edx,0x3
c0008c70:	83 e0 fc             	and    eax,0xfffffffc
c0008c73:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008c7a:	0f 20 d8             	mov    eax,cr3
c0008c7d:	0f 22 d8             	mov    cr3,eax
c0008c80:	c3                   	ret    
c0008c81:	90                   	nop

c0008c82 <VAS::~VAS()>:
c0008c82:	83 ec 2c             	sub    esp,0x2c
c0008c85:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008c8d:	fa                   	cli    
c0008c8e:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0008c93:	40                   	inc    eax
c0008c94:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0008c99:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ca0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ca3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008ca9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008cad:	6a 01                	push   0x1
c0008caf:	50                   	push   eax
c0008cb0:	e8 a3 ff ff ff       	call   c0008c58 <VAS::mapOtherVASIn(bool, VAS*)>
c0008cb5:	83 c4 0c             	add    esp,0xc
c0008cb8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cc0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008cc8:	0f 8f d4 00 00 00    	jg     c0008da2 <VAS::~VAS()+0x120>
c0008cce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008cd2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cd5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cd9:	c1 e2 02             	shl    edx,0x2
c0008cdc:	01 d0                	add    eax,edx
c0008cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	83 e0 01             	and    eax,0x1
c0008ceb:	0f 84 a8 00 00 00    	je     c0008d99 <VAS::~VAS()+0x117>
c0008cf1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008cf9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008d01:	7f 72                	jg     c0008d75 <VAS::~VAS()+0xf3>
c0008d03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d07:	c1 e0 0a             	shl    eax,0xa
c0008d0a:	89 c2                	mov    edx,eax
c0008d0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008d10:	01 d0                	add    eax,edx
c0008d12:	c1 e0 0c             	shl    eax,0xc
c0008d15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d19:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d23:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008d29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008d2d:	6a 01                	push   0x1
c0008d2f:	50                   	push   eax
c0008d30:	e8 01 fd ff ff       	call   c0008a36 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008d35:	83 c4 0c             	add    esp,0xc
c0008d38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d4a:	25 01 04 00 00       	and    eax,0x401
c0008d4f:	3d 01 04 00 00       	cmp    eax,0x401
c0008d54:	75 19                	jne    c0008d6f <VAS::~VAS()+0xed>
c0008d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	50                   	push   eax
c0008d63:	e8 54 e2 ff ff       	call   c0006fbc <Phys::freePage(unsigned long)>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d6f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008d73:	eb 84                	jmp    c0008cf9 <VAS::~VAS()+0x77>
c0008d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d79:	25 00 04 00 00       	and    eax,0x400
c0008d7e:	74 19                	je     c0008d99 <VAS::~VAS()+0x117>
c0008d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008d89:	83 ec 0c             	sub    esp,0xc
c0008d8c:	50                   	push   eax
c0008d8d:	e8 2a e2 ff ff       	call   c0006fbc <Phys::freePage(unsigned long)>
c0008d92:	83 c4 10             	add    esp,0x10
c0008d95:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d99:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008d9d:	e9 1e ff ff ff       	jmp    c0008cc0 <VAS::~VAS()+0x3e>
c0008da2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008da6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008da9:	83 ec 0c             	sub    esp,0xc
c0008dac:	50                   	push   eax
c0008dad:	e8 cf fc ff ff       	call   c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>
c0008db2:	83 c4 10             	add    esp,0x10
c0008db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008db9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008dbc:	83 ec 0c             	sub    esp,0xc
c0008dbf:	50                   	push   eax
c0008dc0:	e8 f7 e1 ff ff       	call   c0006fbc <Phys::freePage(unsigned long)>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008dcc:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0008dd1:	48                   	dec    eax
c0008dd2:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0008dd7:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0008ddc:	85 c0                	test   eax,eax
c0008dde:	75 01                	jne    c0008de1 <VAS::~VAS()+0x15f>
c0008de0:	fb                   	sti    
c0008de1:	90                   	nop
c0008de2:	83 c4 2c             	add    esp,0x2c
c0008de5:	c3                   	ret    

c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008de6:	55                   	push   ebp
c0008de7:	57                   	push   edi
c0008de8:	56                   	push   esi
c0008de9:	53                   	push   ebx
c0008dea:	83 ec 1c             	sub    esp,0x1c
c0008ded:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008df1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008df5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008dfb:	77 0b                	ja     c0008e08 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008dfd:	0f 20 d8             	mov    eax,cr3
c0008e00:	0f 20 d8             	mov    eax,cr3
c0008e03:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008e06:	75 47                	jne    c0008e4f <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008e08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e0c:	09 d8                	or     eax,ebx
c0008e0e:	a9 ff 0f 00 00       	test   eax,0xfff
c0008e13:	75 57                	jne    c0008e6c <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008e15:	89 de                	mov    esi,ebx
c0008e17:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008e1a:	c1 ee 16             	shr    esi,0x16
c0008e1d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008e24:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008e28:	74 54                	je     c0008e7e <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008e2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008e2e:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008e34:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008e38:	c1 e6 0c             	shl    esi,0xc
c0008e3b:	c1 eb 0a             	shr    ebx,0xa
c0008e3e:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008e44:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008e47:	83 c4 1c             	add    esp,0x1c
c0008e4a:	5b                   	pop    ebx
c0008e4b:	5e                   	pop    esi
c0008e4c:	5f                   	pop    edi
c0008e4d:	5d                   	pop    ebp
c0008e4e:	c3                   	ret    
c0008e4f:	83 ec 0c             	sub    esp,0xc
c0008e52:	68 94 d0 01 c0       	push   0xc001d094
c0008e57:	e8 b8 0b 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e63:	09 d8                	or     eax,ebx
c0008e65:	a9 ff 0f 00 00       	test   eax,0xfff
c0008e6a:	74 a9                	je     c0008e15 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	68 fc d0 01 c0       	push   0xc001d0fc
c0008e74:	e8 ee 66 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0008e79:	83 c4 10             	add    esp,0x10
c0008e7c:	eb 97                	jmp    c0008e15 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008e7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e82:	e8 97 e1 ff ff       	call   c000701e <Phys::allocatePage()>
c0008e87:	83 ec 0c             	sub    esp,0xc
c0008e8a:	89 c5                	mov    ebp,eax
c0008e8c:	8b 0d 94 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f694
c0008e92:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008e96:	6a 01                	push   0x1
c0008e98:	e8 f0 f8 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c0008e9d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008ea4:	6a 01                	push   0x1
c0008ea6:	50                   	push   eax
c0008ea7:	55                   	push   ebp
c0008ea8:	81 cd 07 04 00 00    	or     ebp,0x407
c0008eae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008eb2:	51                   	push   ecx
c0008eb3:	e8 28 02 00 00       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008eb8:	83 c4 1c             	add    esp,0x1c
c0008ebb:	68 00 10 00 00       	push   0x1000
c0008ec0:	6a 00                	push   0x0
c0008ec2:	50                   	push   eax
c0008ec3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ec7:	e8 24 76 ff ff       	call   c00004f0 <memset>
c0008ecc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008ed0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008ed3:	e8 a9 fb ff ff       	call   c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>
c0008ed8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008edc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008edf:	83 c4 10             	add    esp,0x10
c0008ee2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008ee5:	e9 40 ff ff ff       	jmp    c0008e2a <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008eea <VAS::allocatePages(int, int)>:
c0008eea:	55                   	push   ebp
c0008eeb:	57                   	push   edi
c0008eec:	56                   	push   esi
c0008eed:	53                   	push   ebx
c0008eee:	83 ec 1c             	sub    esp,0x1c
c0008ef1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008ef5:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0008efa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008f00:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008f06:	83 e0 01             	and    eax,0x1
c0008f09:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008f0d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008f11:	0f 85 cc 00 00 00    	jne    c0008fe3 <VAS::allocatePages(int, int)+0xf9>
c0008f17:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008f1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f1e:	85 c0                	test   eax,eax
c0008f20:	0f 84 a1 00 00 00    	je     c0008fc7 <VAS::allocatePages(int, int)+0xdd>
c0008f26:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008f2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008f2e:	c1 e6 0c             	shl    esi,0xc
c0008f31:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008f35:	85 c0                	test   eax,eax
c0008f37:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008f3a:	7e 33                	jle    c0008f6f <VAS::allocatePages(int, int)+0x85>
c0008f3c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008f40:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f44:	81 cd 00 04 00 00    	or     ebp,0x400
c0008f4a:	e8 cf e0 ff ff       	call   c000701e <Phys::allocatePage()>
c0008f4f:	55                   	push   ebp
c0008f50:	53                   	push   ebx
c0008f51:	50                   	push   eax
c0008f52:	57                   	push   edi
c0008f53:	e8 8e fe ff ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f58:	83 c4 10             	add    esp,0x10
c0008f5b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f60:	74 03                	je     c0008f65 <VAS::allocatePages(int, int)+0x7b>
c0008f62:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f6b:	39 de                	cmp    esi,ebx
c0008f6d:	75 db                	jne    c0008f4a <VAS::allocatePages(int, int)+0x60>
c0008f6f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f74:	75 12                	jne    c0008f88 <VAS::allocatePages(int, int)+0x9e>
c0008f76:	0f 20 d8             	mov    eax,cr3
c0008f79:	0f 22 d8             	mov    cr3,eax
c0008f7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f80:	83 c4 1c             	add    esp,0x1c
c0008f83:	5b                   	pop    ebx
c0008f84:	5e                   	pop    esi
c0008f85:	5f                   	pop    edi
c0008f86:	5d                   	pop    ebp
c0008f87:	c3                   	ret    
c0008f88:	c1 ee 0a             	shr    esi,0xa
c0008f8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f8f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008f95:	c1 eb 0a             	shr    ebx,0xa
c0008f98:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008f9e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008fa4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008faa:	39 c3                	cmp    ebx,eax
c0008fac:	77 ce                	ja     c0008f7c <VAS::allocatePages(int, int)+0x92>
c0008fae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008fb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008fb7:	39 d8                	cmp    eax,ebx
c0008fb9:	73 f3                	jae    c0008fae <VAS::allocatePages(int, int)+0xc4>
c0008fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fbf:	83 c4 1c             	add    esp,0x1c
c0008fc2:	5b                   	pop    ebx
c0008fc3:	5e                   	pop    esi
c0008fc4:	5f                   	pop    edi
c0008fc5:	5d                   	pop    ebp
c0008fc6:	c3                   	ret    
c0008fc7:	83 ec 0c             	sub    esp,0xc
c0008fca:	68 20 d1 01 c0       	push   0xc001d120
c0008fcf:	e8 93 65 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0008fd4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008fd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fdb:	83 c4 10             	add    esp,0x10
c0008fde:	e9 43 ff ff ff       	jmp    c0008f26 <VAS::allocatePages(int, int)+0x3c>
c0008fe3:	83 ec 0c             	sub    esp,0xc
c0008fe6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0008fea:	51                   	push   ecx
c0008feb:	e8 9d f7 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c0008ff0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ff4:	83 c4 10             	add    esp,0x10
c0008ff7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008ffc:	0f 87 9b 00 00 00    	ja     c000909d <VAS::allocatePages(int, int)+0x1b3>
c0009002:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009006:	85 d2                	test   edx,edx
c0009008:	7e 3c                	jle    c0009046 <VAS::allocatePages(int, int)+0x15c>
c000900a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000900e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009012:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009016:	c1 e5 0c             	shl    ebp,0xc
c0009019:	81 ce 00 04 00 00    	or     esi,0x400
c000901f:	01 dd                	add    ebp,ebx
c0009021:	e8 f8 df ff ff       	call   c000701e <Phys::allocatePage()>
c0009026:	56                   	push   esi
c0009027:	53                   	push   ebx
c0009028:	50                   	push   eax
c0009029:	57                   	push   edi
c000902a:	e8 b7 fd ff ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000902f:	83 c4 10             	add    esp,0x10
c0009032:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009037:	74 03                	je     c000903c <VAS::allocatePages(int, int)+0x152>
c0009039:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000903c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009042:	39 dd                	cmp    ebp,ebx
c0009044:	75 db                	jne    c0009021 <VAS::allocatePages(int, int)+0x137>
c0009046:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000904b:	0f 84 25 ff ff ff    	je     c0008f76 <VAS::allocatePages(int, int)+0x8c>
c0009051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009055:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009059:	89 d3                	mov    ebx,edx
c000905b:	c1 e0 0c             	shl    eax,0xc
c000905e:	c1 eb 0a             	shr    ebx,0xa
c0009061:	01 d0                	add    eax,edx
c0009063:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009069:	c1 e8 0a             	shr    eax,0xa
c000906c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009072:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009077:	2d 00 00 40 00       	sub    eax,0x400000
c000907c:	39 c3                	cmp    ebx,eax
c000907e:	0f 87 f8 fe ff ff    	ja     c0008f7c <VAS::allocatePages(int, int)+0x92>
c0009084:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009087:	81 c3 00 10 00 00    	add    ebx,0x1000
c000908d:	39 d8                	cmp    eax,ebx
c000908f:	73 f3                	jae    c0009084 <VAS::allocatePages(int, int)+0x19a>
c0009091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009095:	83 c4 1c             	add    esp,0x1c
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    
c000909d:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00090a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a8:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c00090af:	0f 84 4d ff ff ff    	je     c0009002 <VAS::allocatePages(int, int)+0x118>
c00090b5:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00090bd:	e9 40 ff ff ff       	jmp    c0009002 <VAS::allocatePages(int, int)+0x118>

c00090c2 <VAS::setCPUSpecific(unsigned long)>:
c00090c2:	83 ec 0c             	sub    esp,0xc
c00090c5:	6a 05                	push   0x5
c00090c7:	68 00 00 40 c2       	push   0xc2400000
c00090cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090d0:	50                   	push   eax
c00090d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00090d5:	52                   	push   edx
c00090d6:	e8 0b fd ff ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00090db:	83 c4 1c             	add    esp,0x1c
c00090de:	c3                   	ret    
c00090df:	90                   	nop

c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00090e0:	55                   	push   ebp
c00090e1:	57                   	push   edi
c00090e2:	56                   	push   esi
c00090e3:	53                   	push   ebx
c00090e4:	83 ec 1c             	sub    esp,0x1c
c00090e7:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00090ec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00090f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090f6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00090fa:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009100:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009104:	83 e0 01             	and    eax,0x1
c0009107:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000910b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000910f:	85 c0                	test   eax,eax
c0009111:	7e 39                	jle    c000914c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009113:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009117:	89 f3                	mov    ebx,esi
c0009119:	c1 e0 0c             	shl    eax,0xc
c000911c:	01 f0                	add    eax,esi
c000911e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009122:	55                   	push   ebp
c0009123:	53                   	push   ebx
c0009124:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009128:	29 f0                	sub    eax,esi
c000912a:	01 d8                	add    eax,ebx
c000912c:	50                   	push   eax
c000912d:	57                   	push   edi
c000912e:	e8 b3 fc ff ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000913b:	74 03                	je     c0009140 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000913d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009140:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009146:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000914a:	75 d6                	jne    c0009122 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000914c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009151:	75 10                	jne    c0009163 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009153:	0f 20 d8             	mov    eax,cr3
c0009156:	0f 22 d8             	mov    cr3,eax
c0009159:	83 c4 1c             	add    esp,0x1c
c000915c:	89 f0                	mov    eax,esi
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	5f                   	pop    edi
c0009161:	5d                   	pop    ebp
c0009162:	c3                   	ret    
c0009163:	89 f3                	mov    ebx,esi
c0009165:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009169:	c1 eb 0a             	shr    ebx,0xa
c000916c:	c1 e0 0c             	shl    eax,0xc
c000916f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009175:	01 f0                	add    eax,esi
c0009177:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000917d:	c1 e8 0a             	shr    eax,0xa
c0009180:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009185:	2d 00 00 40 00       	sub    eax,0x400000
c000918a:	39 c3                	cmp    ebx,eax
c000918c:	77 cb                	ja     c0009159 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000918e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009191:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009197:	39 d8                	cmp    eax,ebx
c0009199:	73 f3                	jae    c000918e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000919b:	83 c4 1c             	add    esp,0x1c
c000919e:	89 f0                	mov    eax,esi
c00091a0:	5b                   	pop    ebx
c00091a1:	5e                   	pop    esi
c00091a2:	5f                   	pop    edi
c00091a3:	5d                   	pop    ebp
c00091a4:	c3                   	ret    
c00091a5:	90                   	nop

c00091a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00091a6:	55                   	push   ebp
c00091a7:	57                   	push   edi
c00091a8:	56                   	push   esi
c00091a9:	53                   	push   ebx
c00091aa:	83 ec 1c             	sub    esp,0x1c
c00091ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00091b1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00091b5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00091b9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00091bd:	a9 ff 0f 00 00       	test   eax,0xfff
c00091c2:	75 4a                	jne    c000920e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00091c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00091c8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00091cb:	c1 eb 16             	shr    ebx,0x16
c00091ce:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00091d5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00091d9:	74 4d                	je     c0009228 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00091db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00091df:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00091e3:	c1 e8 0a             	shr    eax,0xa
c00091e6:	80 fa 01             	cmp    dl,0x1
c00091e9:	19 d2                	sbb    edx,edx
c00091eb:	c1 e3 0c             	shl    ebx,0xc
c00091ee:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00091f2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00091f8:	25 fc 0f 00 00       	and    eax,0xffc
c00091fd:	01 d8                	add    eax,ebx
c00091ff:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009206:	83 c4 1c             	add    esp,0x1c
c0009209:	5b                   	pop    ebx
c000920a:	5e                   	pop    esi
c000920b:	5f                   	pop    edi
c000920c:	5d                   	pop    ebp
c000920d:	c3                   	ret    
c000920e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009212:	83 ec 0c             	sub    esp,0xc
c0009215:	68 4c d1 01 c0       	push   0xc001d14c
c000921a:	e8 48 63 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000921f:	83 c4 10             	add    esp,0x10
c0009222:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009226:	eb 9c                	jmp    c00091c4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009228:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000922c:	e8 ed dd ff ff       	call   c000701e <Phys::allocatePage()>
c0009231:	83 ec 0c             	sub    esp,0xc
c0009234:	89 c5                	mov    ebp,eax
c0009236:	8b 0d 94 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f694
c000923c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009240:	6a 01                	push   0x1
c0009242:	e8 46 f5 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c0009247:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000924e:	6a 01                	push   0x1
c0009250:	50                   	push   eax
c0009251:	55                   	push   ebp
c0009252:	81 cd 07 04 00 00    	or     ebp,0x407
c0009258:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000925c:	51                   	push   ecx
c000925d:	e8 7e fe ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009262:	83 c4 1c             	add    esp,0x1c
c0009265:	68 00 10 00 00       	push   0x1000
c000926a:	6a 00                	push   0x0
c000926c:	50                   	push   eax
c000926d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009271:	e8 7a 72 ff ff       	call   c00004f0 <memset>
c0009276:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000927a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000927d:	e8 ff f7 ff ff       	call   c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>
c0009282:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000928b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000928f:	e9 47 ff ff ff       	jmp    c00091db <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009294 <VAS::VAS(bool)>:
c0009294:	53                   	push   ebx
c0009295:	83 ec 28             	sub    esp,0x28
c0009298:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000929c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00092a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00092b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092ba:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00092be:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00092c1:	e8 58 dd ff ff       	call   c000701e <Phys::allocatePage()>
c00092c6:	89 c2                	mov    edx,eax
c00092c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00092cf:	8b 1d 94 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f694
c00092d5:	83 ec 0c             	sub    esp,0xc
c00092d8:	6a 01                	push   0x1
c00092da:	e8 ae f4 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c00092df:	83 c4 10             	add    esp,0x10
c00092e2:	89 c2                	mov    edx,eax
c00092e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00092eb:	83 ec 0c             	sub    esp,0xc
c00092ee:	6a 03                	push   0x3
c00092f0:	6a 01                	push   0x1
c00092f2:	52                   	push   edx
c00092f3:	50                   	push   eax
c00092f4:	53                   	push   ebx
c00092f5:	e8 e6 fd ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00092fa:	83 c4 20             	add    esp,0x20
c00092fd:	89 c2                	mov    edx,eax
c00092ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009303:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009306:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000930e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009316:	7f 1c                	jg     c0009334 <VAS::VAS(bool)+0xa0>
c0009318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000931c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000931f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009323:	c1 e2 02             	shl    edx,0x2
c0009326:	01 d0                	add    eax,edx
c0009328:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000932e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009332:	eb da                	jmp    c000930e <VAS::VAS(bool)+0x7a>
c0009334:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000933c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009344:	7f 7a                	jg     c00093c0 <VAS::VAS(bool)+0x12c>
c0009346:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000934a:	2d 00 02 00 00       	sub    eax,0x200
c000934f:	c1 e0 0c             	shl    eax,0xc
c0009352:	83 c8 03             	or     eax,0x3
c0009355:	89 c2                	mov    edx,eax
c0009357:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000935c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009362:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009368:	83 e0 10             	and    eax,0x10
c000936b:	84 c0                	test   al,al
c000936d:	74 07                	je     c0009376 <VAS::VAS(bool)+0xe2>
c000936f:	b8 00 01 00 00       	mov    eax,0x100
c0009374:	eb 05                	jmp    c000937b <VAS::VAS(bool)+0xe7>
c0009376:	b8 00 00 00 00       	mov    eax,0x0
c000937b:	09 d0                	or     eax,edx
c000937d:	89 c1                	mov    ecx,eax
c000937f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009383:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009386:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000938a:	c1 e2 02             	shl    edx,0x2
c000938d:	01 d0                	add    eax,edx
c000938f:	89 ca                	mov    edx,ecx
c0009391:	89 10                	mov    DWORD PTR [eax],edx
c0009393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009397:	2d 40 03 00 00       	sub    eax,0x340
c000939c:	83 f8 7f             	cmp    eax,0x7f
c000939f:	77 16                	ja     c00093b7 <VAS::VAS(bool)+0x123>
c00093a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00093a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00093ac:	c1 e2 02             	shl    edx,0x2
c00093af:	01 d0                	add    eax,edx
c00093b1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00093b7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00093bb:	e9 7c ff ff ff       	jmp    c000933c <VAS::VAS(bool)+0xa8>
c00093c0:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00093c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00093d1:	83 e0 10             	and    eax,0x10
c00093d4:	84 c0                	test   al,al
c00093d6:	74 07                	je     c00093df <VAS::VAS(bool)+0x14b>
c00093d8:	b8 03 41 00 00       	mov    eax,0x4103
c00093dd:	eb 05                	jmp    c00093e4 <VAS::VAS(bool)+0x150>
c00093df:	b8 03 40 00 00       	mov    eax,0x4003
c00093e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00093e8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00093eb:	81 c2 20 0c 00 00    	add    edx,0xc20
c00093f1:	89 02                	mov    DWORD PTR [edx],eax
c00093f3:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00093f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009404:	83 ec 08             	sub    esp,0x8
c0009407:	50                   	push   eax
c0009408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000940c:	e8 b1 fc ff ff       	call   c00090c2 <VAS::setCPUSpecific(unsigned long)>
c0009411:	83 c4 10             	add    esp,0x10
c0009414:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009418:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000941b:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0009420:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009426:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000942c:	83 e0 10             	and    eax,0x10
c000942f:	84 c0                	test   al,al
c0009431:	74 07                	je     c000943a <VAS::VAS(bool)+0x1a6>
c0009433:	b8 00 01 00 00       	mov    eax,0x100
c0009438:	eb 05                	jmp    c000943f <VAS::VAS(bool)+0x1ab>
c000943a:	b8 00 00 00 00       	mov    eax,0x0
c000943f:	09 c2                	or     edx,eax
c0009441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009445:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009448:	05 fc 0f 00 00       	add    eax,0xffc
c000944d:	83 ca 03             	or     edx,0x3
c0009450:	89 10                	mov    DWORD PTR [eax],edx
c0009452:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0009457:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000945d:	83 ec 0c             	sub    esp,0xc
c0009460:	50                   	push   eax
c0009461:	e8 82 1c 00 00       	call   c000b0e8 <Device::getName()>
c0009466:	83 c4 10             	add    esp,0x10
c0009469:	83 ec 08             	sub    esp,0x8
c000946c:	68 ef d1 01 c0       	push   0xc001d1ef
c0009471:	50                   	push   eax
c0009472:	e8 89 72 ff ff       	call   c0000700 <strcmp>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	85 c0                	test   eax,eax
c000947c:	0f 94 c0             	sete   al
c000947f:	84 c0                	test   al,al
c0009481:	0f 84 87 00 00 00    	je     c000950e <VAS::VAS(bool)+0x27a>
c0009487:	fa                   	cli    
c0009488:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000948d:	40                   	inc    eax
c000948e:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0009493:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0009498:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000949e:	05 7c 09 00 00       	add    eax,0x97c
c00094a3:	83 ec 0c             	sub    esp,0xc
c00094a6:	50                   	push   eax
c00094a7:	e8 a2 d2 ff ff       	call   c000674e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00094b4:	89 c3                	mov    ebx,eax
c00094b6:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00094bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00094c1:	05 7c 09 00 00       	add    eax,0x97c
c00094c6:	83 ec 0c             	sub    esp,0xc
c00094c9:	50                   	push   eax
c00094ca:	e8 7f d2 ff ff       	call   c000674e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00094cf:	83 c4 10             	add    esp,0x10
c00094d2:	83 ec 08             	sub    esp,0x8
c00094d5:	50                   	push   eax
c00094d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00094da:	e8 83 f5 ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c00094df:	83 c4 10             	add    esp,0x10
c00094e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00094e4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00094e9:	6a 11                	push   0x11
c00094eb:	53                   	push   ebx
c00094ec:	50                   	push   eax
c00094ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00094f1:	e8 f0 f8 ff ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00094f6:	83 c4 10             	add    esp,0x10
c00094f9:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00094fe:	48                   	dec    eax
c00094ff:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0009504:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0009509:	85 c0                	test   eax,eax
c000950b:	75 01                	jne    c000950e <VAS::VAS(bool)+0x27a>
c000950d:	fb                   	sti    
c000950e:	90                   	nop
c000950f:	83 c4 28             	add    esp,0x28
c0009512:	5b                   	pop    ebx
c0009513:	c3                   	ret    

c0009514 <VAS::VAS()>:
c0009514:	53                   	push   ebx
c0009515:	83 ec 18             	sub    esp,0x18
c0009518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000951c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009527:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000952e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009532:	a3 94 f6 01 c0       	mov    ds:0xc001f694,eax
c0009537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000953b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000953f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009543:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000954a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009551:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c0009559:	83 ec 0c             	sub    esp,0xc
c000955c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009560:	e8 ec d6 ff ff       	call   c0006c51 <malloc>
c0009565:	83 c4 10             	add    esp,0x10
c0009568:	89 c3                	mov    ebx,eax
c000956a:	83 ec 08             	sub    esp,0x8
c000956d:	6a 01                	push   0x1
c000956f:	53                   	push   ebx
c0009570:	e8 1f fd ff ff       	call   c0009294 <VAS::VAS(bool)>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	89 1d 8c f6 01 c0    	mov    DWORD PTR ds:0xc001f68c,ebx
c000957e:	90                   	nop
c000957f:	83 c4 18             	add    esp,0x18
c0009582:	5b                   	pop    ebx
c0009583:	c3                   	ret    

c0009584 <VAS::evict(unsigned long)>:
c0009584:	55                   	push   ebp
c0009585:	57                   	push   edi
c0009586:	56                   	push   esi
c0009587:	53                   	push   ebx
c0009588:	83 ec 1c             	sub    esp,0x1c
c000958b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000958f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009597:	e8 32 f3 ff ff       	call   c00088ce <Virt::allocateSwapfilePage()>
c000959c:	8b 0d 4c ef 01 c0    	mov    ecx,DWORD PTR ds:0xc001ef4c
c00095a2:	89 c7                	mov    edi,eax
c00095a4:	85 c9                	test   ecx,ecx
c00095a6:	7e 3e                	jle    c00095e6 <VAS::evict(unsigned long)+0x62>
c00095a8:	89 ee                	mov    esi,ebp
c00095aa:	31 db                	xor    ebx,ebx
c00095ac:	83 ec 0c             	sub    esp,0xc
c00095af:	57                   	push   edi
c00095b0:	e8 07 f3 ff ff       	call   c00088bc <Virt::swapIDToSector(unsigned long)>
c00095b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00095b8:	01 d8                	add    eax,ebx
c00095ba:	6a 01                	push   0x1
c00095bc:	31 d2                	xor    edx,edx
c00095be:	43                   	inc    ebx
c00095bf:	52                   	push   edx
c00095c0:	81 c6 00 02 00 00    	add    esi,0x200
c00095c6:	50                   	push   eax
c00095c7:	0f be 05 58 ef 01 c0 	movsx  eax,BYTE PTR ds:0xc001ef58
c00095ce:	8b 14 85 1c 1a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde5e4]
c00095d5:	52                   	push   edx
c00095d6:	e8 8d 2b 00 00       	call   c000c168 <LogicalDisk::write(unsigned long long, int, void*)>
c00095db:	83 c4 20             	add    esp,0x20
c00095de:	39 1d 4c ef 01 c0    	cmp    DWORD PTR ds:0xc001ef4c,ebx
c00095e4:	7f c6                	jg     c00095ac <VAS::evict(unsigned long)+0x28>
c00095e6:	83 ec 08             	sub    esp,0x8
c00095e9:	c1 e7 0b             	shl    edi,0xb
c00095ec:	55                   	push   ebp
c00095ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00095f1:	50                   	push   eax
c00095f2:	e8 6b f4 ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c00095f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00095f9:	89 d1                	mov    ecx,edx
c00095fb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009601:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0009607:	09 cf                	or     edi,ecx
c0009609:	89 38                	mov    DWORD PTR [eax],edi
c000960b:	89 14 24             	mov    DWORD PTR [esp],edx
c000960e:	ff 05 88 f6 01 c0    	inc    DWORD PTR ds:0xc001f688
c0009614:	e8 a3 d9 ff ff       	call   c0006fbc <Phys::freePage(unsigned long)>
c0009619:	0f 20 d8             	mov    eax,cr3
c000961c:	0f 22 d8             	mov    cr3,eax
c000961f:	a1 84 f6 01 c0       	mov    eax,ds:0xc001f684
c0009624:	c7 44 24 40 fd d1 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d1fd
c000962c:	8d 50 01             	lea    edx,[eax+0x1]
c000962f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009633:	89 15 84 f6 01 c0    	mov    DWORD PTR ds:0xc001f684,edx
c0009639:	83 c4 2c             	add    esp,0x2c
c000963c:	5b                   	pop    ebx
c000963d:	5e                   	pop    esi
c000963e:	5f                   	pop    edi
c000963f:	5d                   	pop    ebp
c0009640:	e9 cf 03 00 00       	jmp    c0009a14 <Dbg::kprintf(char const*, ...)>
c0009645:	90                   	nop

c0009646 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0009646:	55                   	push   ebp
c0009647:	57                   	push   edi
c0009648:	56                   	push   esi
c0009649:	53                   	push   ebx
c000964a:	83 ec 14             	sub    esp,0x14
c000964d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009651:	53                   	push   ebx
c0009652:	68 0e d2 01 c0       	push   0xc001d20e
c0009657:	e8 b8 03 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009665:	74 21                	je     c0009688 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0009667:	83 ec 08             	sub    esp,0x8
c000966a:	53                   	push   ebx
c000966b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000966f:	57                   	push   edi
c0009670:	e8 ed f3 ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c0009675:	83 c4 10             	add    esp,0x10
c0009678:	89 c6                	mov    esi,eax
c000967a:	85 c0                	test   eax,eax
c000967c:	74 0a                	je     c0009688 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000967e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009680:	f7 c5 01 00 00 00    	test   ebp,0x1
c0009686:	74 0a                	je     c0009692 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c0009688:	31 c0                	xor    eax,eax
c000968a:	83 c4 0c             	add    esp,0xc
c000968d:	5b                   	pop    ebx
c000968e:	5e                   	pop    esi
c000968f:	5f                   	pop    edi
c0009690:	5d                   	pop    ebp
c0009691:	c3                   	ret    
c0009692:	e8 87 d9 ff ff       	call   c000701e <Phys::allocatePage()>
c0009697:	c1 ed 0b             	shr    ebp,0xb
c000969a:	8b 16                	mov    edx,DWORD PTR [esi]
c000969c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00096a2:	09 c2                	or     edx,eax
c00096a4:	81 ca 01 08 00 00    	or     edx,0x801
c00096aa:	89 16                	mov    DWORD PTR [esi],edx
c00096ac:	8b 35 4c ef 01 c0    	mov    esi,DWORD PTR ds:0xc001ef4c
c00096b2:	85 f6                	test   esi,esi
c00096b4:	7e 3e                	jle    c00096f4 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c00096b6:	89 df                	mov    edi,ebx
c00096b8:	31 f6                	xor    esi,esi
c00096ba:	83 ec 0c             	sub    esp,0xc
c00096bd:	55                   	push   ebp
c00096be:	e8 f9 f1 ff ff       	call   c00088bc <Virt::swapIDToSector(unsigned long)>
c00096c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00096c6:	01 f0                	add    eax,esi
c00096c8:	6a 01                	push   0x1
c00096ca:	31 d2                	xor    edx,edx
c00096cc:	46                   	inc    esi
c00096cd:	52                   	push   edx
c00096ce:	81 c7 00 02 00 00    	add    edi,0x200
c00096d4:	50                   	push   eax
c00096d5:	0f be 05 58 ef 01 c0 	movsx  eax,BYTE PTR ds:0xc001ef58
c00096dc:	8b 0c 85 1c 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde5e4]
c00096e3:	51                   	push   ecx
c00096e4:	e8 13 2a 00 00       	call   c000c0fc <LogicalDisk::read(unsigned long long, int, void*)>
c00096e9:	83 c4 20             	add    esp,0x20
c00096ec:	39 35 4c ef 01 c0    	cmp    DWORD PTR ds:0xc001ef4c,esi
c00096f2:	7f c6                	jg     c00096ba <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c00096f4:	a1 88 f6 01 c0       	mov    eax,ds:0xc001f688
c00096f9:	48                   	dec    eax
c00096fa:	52                   	push   edx
c00096fb:	a3 88 f6 01 c0       	mov    ds:0xc001f688,eax
c0009700:	50                   	push   eax
c0009701:	53                   	push   ebx
c0009702:	68 21 d2 01 c0       	push   0xc001d221
c0009707:	e8 08 03 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000970c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000970f:	e8 8a f1 ff ff       	call   c000889e <Virt::freeSwapfilePage(unsigned long)>
c0009714:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0009719:	83 c4 10             	add    esp,0x10
c000971c:	48                   	dec    eax
c000971d:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0009722:	85 c0                	test   eax,eax
c0009724:	75 01                	jne    c0009727 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c0009726:	fb                   	sti    
c0009727:	0f 20 d8             	mov    eax,cr3
c000972a:	0f 22 d8             	mov    cr3,eax
c000972d:	b0 01                	mov    al,0x1
c000972f:	e9 56 ff ff ff       	jmp    c000968a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0009734 <VAS::scanForEviction()>:
c0009734:	57                   	push   edi
c0009735:	31 ff                	xor    edi,edi
c0009737:	56                   	push   esi
c0009738:	53                   	push   ebx
c0009739:	83 ec 10             	sub    esp,0x10
c000973c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009740:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009743:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009749:	75 0e                	jne    c0009759 <VAS::scanForEviction()+0x25>
c000974b:	89 da                	mov    edx,ebx
c000974d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009750:	c1 ea 16             	shr    edx,0x16
c0009753:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009757:	74 4e                	je     c00097a7 <VAS::scanForEviction()+0x73>
c0009759:	53                   	push   ebx
c000975a:	56                   	push   esi
c000975b:	e8 02 f3 ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c0009760:	5a                   	pop    edx
c0009761:	8b 10                	mov    edx,DWORD PTR [eax]
c0009763:	59                   	pop    ecx
c0009764:	89 d1                	mov    ecx,edx
c0009766:	81 e1 01 08 00 00    	and    ecx,0x801
c000976c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0009772:	74 3e                	je     c00097b2 <VAS::scanForEviction()+0x7e>
c0009774:	81 c3 00 10 00 00    	add    ebx,0x1000
c000977a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0009780:	76 2b                	jbe    c00097ad <VAS::scanForEviction()+0x79>
c0009782:	47                   	inc    edi
c0009783:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000978a:	83 ff 03             	cmp    edi,0x3
c000978d:	74 32                	je     c00097c1 <VAS::scanForEviction()+0x8d>
c000978f:	31 db                	xor    ebx,ebx
c0009791:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009797:	75 c0                	jne    c0009759 <VAS::scanForEviction()+0x25>
c0009799:	89 da                	mov    edx,ebx
c000979b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000979e:	c1 ea 16             	shr    edx,0x16
c00097a1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00097a5:	75 b2                	jne    c0009759 <VAS::scanForEviction()+0x25>
c00097a7:	81 c3 00 00 40 00    	add    ebx,0x400000
c00097ad:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00097b0:	eb 91                	jmp    c0009743 <VAS::scanForEviction()+0xf>
c00097b2:	f6 c2 20             	test   dl,0x20
c00097b5:	74 13                	je     c00097ca <VAS::scanForEviction()+0x96>
c00097b7:	83 e2 df             	and    edx,0xffffffdf
c00097ba:	89 10                	mov    DWORD PTR [eax],edx
c00097bc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00097bf:	eb b3                	jmp    c0009774 <VAS::scanForEviction()+0x40>
c00097c1:	83 c4 10             	add    esp,0x10
c00097c4:	31 c0                	xor    eax,eax
c00097c6:	5b                   	pop    ebx
c00097c7:	5e                   	pop    esi
c00097c8:	5f                   	pop    edi
c00097c9:	c3                   	ret    
c00097ca:	83 ec 08             	sub    esp,0x8
c00097cd:	89 d0                	mov    eax,edx
c00097cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00097d8:	53                   	push   ebx
c00097d9:	68 36 d2 01 c0       	push   0xc001d236
c00097de:	e8 31 02 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00097e3:	58                   	pop    eax
c00097e4:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c00097e7:	5a                   	pop    edx
c00097e8:	51                   	push   ecx
c00097e9:	56                   	push   esi
c00097ea:	e8 95 fd ff ff       	call   c0009584 <VAS::evict(unsigned long)>
c00097ef:	5b                   	pop    ebx
c00097f0:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00097f3:	5f                   	pop    edi
c00097f4:	50                   	push   eax
c00097f5:	68 4a d2 01 c0       	push   0xc001d24a
c00097fa:	e8 15 02 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00097ff:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0009806:	83 c4 10             	add    esp,0x10
c0009809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000980d:	83 c4 10             	add    esp,0x10
c0009810:	5b                   	pop    ebx
c0009811:	5e                   	pop    esi
c0009812:	5f                   	pop    edi
c0009813:	c3                   	ret    

c0009814 <mapVASFirstTime>:
c0009814:	55                   	push   ebp
c0009815:	57                   	push   edi
c0009816:	56                   	push   esi
c0009817:	53                   	push   ebx
c0009818:	83 ec 0c             	sub    esp,0xc
c000981b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009820:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009823:	4a                   	dec    edx
c0009824:	0f 84 8c 00 00 00    	je     c00098b6 <mapVASFirstTime+0xa2>
c000982a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000982d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0009830:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0009835:	c1 e5 15             	shl    ebp,0x15
c0009838:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000983d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0009843:	29 eb                	sub    ebx,ebp
c0009845:	29 ef                	sub    edi,ebp
c0009847:	e8 d2 d7 ff ff       	call   c000701e <Phys::allocatePage()>
c000984c:	83 ec 0c             	sub    esp,0xc
c000984f:	68 03 04 00 00       	push   0x403
c0009854:	6a 01                	push   0x1
c0009856:	53                   	push   ebx
c0009857:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000985d:	50                   	push   eax
c000985e:	56                   	push   esi
c000985f:	e8 7c f8 ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009864:	83 c4 20             	add    esp,0x20
c0009867:	39 fb                	cmp    ebx,edi
c0009869:	75 dc                	jne    c0009847 <mapVASFirstTime+0x33>
c000986b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009870:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009875:	29 eb                	sub    ebx,ebp
c0009877:	29 ef                	sub    edi,ebp
c0009879:	e8 a0 d7 ff ff       	call   c000701e <Phys::allocatePage()>
c000987e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0009882:	19 d2                	sbb    edx,edx
c0009884:	83 ec 0c             	sub    esp,0xc
c0009887:	83 e2 04             	and    edx,0x4
c000988a:	81 c2 03 04 00 00    	add    edx,0x403
c0009890:	52                   	push   edx
c0009891:	6a 01                	push   0x1
c0009893:	53                   	push   ebx
c0009894:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000989a:	50                   	push   eax
c000989b:	56                   	push   esi
c000989c:	e8 3f f8 ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00098a1:	83 c4 20             	add    esp,0x20
c00098a4:	39 df                	cmp    edi,ebx
c00098a6:	75 d1                	jne    c0009879 <mapVASFirstTime+0x65>
c00098a8:	0f 20 d8             	mov    eax,cr3
c00098ab:	0f 22 d8             	mov    cr3,eax
c00098ae:	83 c4 0c             	add    esp,0xc
c00098b1:	5b                   	pop    ebx
c00098b2:	5e                   	pop    esi
c00098b3:	5f                   	pop    edi
c00098b4:	5d                   	pop    ebp
c00098b5:	c3                   	ret    
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	68 5d d2 01 c0       	push   0xc001d25d
c00098be:	e8 51 01 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00098c3:	83 c4 10             	add    esp,0x10
c00098c6:	83 c4 0c             	add    esp,0xc
c00098c9:	5b                   	pop    ebx
c00098ca:	5e                   	pop    esi
c00098cb:	5f                   	pop    edi
c00098cc:	5d                   	pop    ebp
c00098cd:	c3                   	ret    

c00098ce <__cxa_atexit>:
c00098ce:	31 c0                	xor    eax,eax
c00098d0:	c3                   	ret    

c00098d1 <__cxa_finalize>:
c00098d1:	c3                   	ret    

c00098d2 <__stack_chk_fail>:
c00098d2:	55                   	push   ebp
c00098d3:	89 e5                	mov    ebp,esp
c00098d5:	83 ec 10             	sub    esp,0x10
c00098d8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00098db:	68 76 d2 01 c0       	push   0xc001d276
c00098e0:	e8 2f 01 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00098e5:	58                   	pop    eax
c00098e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00098e9:	5a                   	pop    edx
c00098ea:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00098ed:	68 76 d2 01 c0       	push   0xc001d276
c00098f2:	e8 1d 01 00 00       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00098f7:	c7 04 24 7e d2 01 c0 	mov    DWORD PTR [esp],0xc001d27e
c00098fe:	e8 64 5c 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	c9                   	leave  
c0009907:	c3                   	ret    

c0009908 <__cxa_pure_virtual>:
c0009908:	83 ec 18             	sub    esp,0x18
c000990b:	68 96 d2 01 c0       	push   0xc001d296
c0009910:	e8 52 5c 00 00       	call   c000f567 <Krnl::panic(char const*)>
c0009915:	83 c4 1c             	add    esp,0x1c
c0009918:	c3                   	ret    

c0009919 <operator new[](unsigned long)>:
c0009919:	e9 33 d3 ff ff       	jmp    c0006c51 <malloc>

c000991e <operator delete(void*, unsigned long)>:
c000991e:	e9 4e d3 ff ff       	jmp    c0006c71 <rfree>

c0009923 <operator delete[](void*)>:
c0009923:	e9 49 d3 ff ff       	jmp    c0006c71 <rfree>

c0009928 <operator delete[](void*, unsigned long)>:
c0009928:	e9 44 d3 ff ff       	jmp    c0006c71 <rfree>

c000992d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000992d:	55                   	push   ebp
c000992e:	b9 04 00 00 00       	mov    ecx,0x4
c0009933:	57                   	push   edi
c0009934:	56                   	push   esi
c0009935:	be ab ce 01 c0       	mov    esi,0xc001ceab
c000993a:	53                   	push   ebx
c000993b:	83 ec 20             	sub    esp,0x20
c000993e:	a1 aa ce 01 c0       	mov    eax,ds:0xc001ceaa
c0009943:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009947:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000994b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000994f:	a1 b7 ce 01 c0       	mov    eax,ds:0xc001ceb7
c0009954:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0009958:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000995c:	fc                   	cld    
c000995d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000995f:	89 ee                	mov    esi,ebp
c0009961:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009965:	eb 02                	jmp    c0009969 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0009967:	89 c6                	mov    esi,eax
c0009969:	31 d2                	xor    edx,edx
c000996b:	41                   	inc    ecx
c000996c:	89 f0                	mov    eax,esi
c000996e:	f7 f3                	div    ebx
c0009970:	39 de                	cmp    esi,ebx
c0009972:	73 f3                	jae    c0009967 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0009974:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009977:	eb 02                	jmp    c000997b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c0009979:	89 c5                	mov    ebp,eax
c000997b:	31 d2                	xor    edx,edx
c000997d:	49                   	dec    ecx
c000997e:	89 e8                	mov    eax,ebp
c0009980:	f7 f3                	div    ebx
c0009982:	39 dd                	cmp    ebp,ebx
c0009984:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0009988:	88 11                	mov    BYTE PTR [ecx],dl
c000998a:	73 ed                	jae    c0009979 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000998c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009990:	83 c4 20             	add    esp,0x20
c0009993:	5b                   	pop    ebx
c0009994:	5e                   	pop    esi
c0009995:	5f                   	pop    edi
c0009996:	5d                   	pop    ebp
c0009997:	c3                   	ret    

c0009998 <Dbg::logc(char)>:
c0009998:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000999c:	f6 05 c0 f5 01 c0 10 	test   BYTE PTR ds:0xc001f5c0,0x10
c00099a3:	75 12                	jne    c00099b7 <Dbg::logc(char)+0x1f>
c00099a5:	ba fd 03 00 00       	mov    edx,0x3fd
c00099aa:	ec                   	in     al,dx
c00099ab:	a8 20                	test   al,0x20
c00099ad:	74 fb                	je     c00099aa <Dbg::logc(char)+0x12>
c00099af:	ba f8 03 00 00       	mov    edx,0x3f8
c00099b4:	88 c8                	mov    al,cl
c00099b6:	ee                   	out    dx,al
c00099b7:	c3                   	ret    

c00099b8 <Dbg::logs(char*)>:
c00099b8:	53                   	push   ebx
c00099b9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00099bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00099c0:	84 c0                	test   al,al
c00099c2:	74 0f                	je     c00099d3 <Dbg::logs(char*)+0x1b>
c00099c4:	50                   	push   eax
c00099c5:	43                   	inc    ebx
c00099c6:	e8 cd ff ff ff       	call   c0009998 <Dbg::logc(char)>
c00099cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00099ce:	5a                   	pop    edx
c00099cf:	84 c0                	test   al,al
c00099d1:	75 f1                	jne    c00099c4 <Dbg::logs(char*)+0xc>
c00099d3:	5b                   	pop    ebx
c00099d4:	c3                   	ret    

c00099d5 <Dbg::logWriteInt(unsigned int)>:
c00099d5:	83 ec 10             	sub    esp,0x10
c00099d8:	6a 0a                	push   0xa
c00099da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00099de:	50                   	push   eax
c00099df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099e3:	50                   	push   eax
c00099e4:	e8 44 ff ff ff       	call   c000992d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00099e9:	50                   	push   eax
c00099ea:	e8 c9 ff ff ff       	call   c00099b8 <Dbg::logs(char*)>
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	c3                   	ret    

c00099f3 <Dbg::logWriteIntBase(unsigned int, int)>:
c00099f3:	83 ec 10             	sub    esp,0x10
c00099f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099fa:	50                   	push   eax
c00099fb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00099ff:	50                   	push   eax
c0009a00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a04:	52                   	push   edx
c0009a05:	e8 23 ff ff ff       	call   c000992d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0009a0a:	50                   	push   eax
c0009a0b:	e8 a8 ff ff ff       	call   c00099b8 <Dbg::logs(char*)>
c0009a10:	83 c4 20             	add    esp,0x20
c0009a13:	c3                   	ret    

c0009a14 <Dbg::kprintf(char const*, ...)>:
c0009a14:	55                   	push   ebp
c0009a15:	57                   	push   edi
c0009a16:	56                   	push   esi
c0009a17:	53                   	push   ebx
c0009a18:	83 ec 0c             	sub    esp,0xc
c0009a1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a1f:	f6 05 c0 f5 01 c0 10 	test   BYTE PTR ds:0xc001f5c0,0x10
c0009a26:	74 08                	je     c0009a30 <Dbg::kprintf(char const*, ...)+0x1c>
c0009a28:	83 c4 0c             	add    esp,0xc
c0009a2b:	5b                   	pop    ebx
c0009a2c:	5e                   	pop    esi
c0009a2d:	5f                   	pop    edi
c0009a2e:	5d                   	pop    ebp
c0009a2f:	c3                   	ret    
c0009a30:	8d 44 24 24          	lea    eax,[esp+0x24]
c0009a34:	31 ff                	xor    edi,edi
c0009a36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a3a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009a3d:	84 c0                	test   al,al
c0009a3f:	74 e7                	je     c0009a28 <Dbg::kprintf(char const*, ...)+0x14>
c0009a41:	8d 77 01             	lea    esi,[edi+0x1]
c0009a44:	3c 25                	cmp    al,0x25
c0009a46:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009a49:	75 47                	jne    c0009a92 <Dbg::kprintf(char const*, ...)+0x7e>
c0009a4b:	83 c7 02             	add    edi,0x2
c0009a4e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009a51:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0009a54:	83 e8 25             	sub    eax,0x25
c0009a57:	3c 53                	cmp    al,0x53
c0009a59:	0f 87 d2 00 00 00    	ja     c0009b31 <Dbg::kprintf(char const*, ...)+0x11d>
c0009a5f:	25 ff 00 00 00       	and    eax,0xff
c0009a64:	ff 24 85 ac d2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2d54]
c0009a6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009a6f:	89 c8                	mov    eax,ecx
c0009a71:	83 c1 04             	add    ecx,0x4
c0009a74:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009a78:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009a7a:	55                   	push   ebp
c0009a7b:	e8 55 ff ff ff       	call   c00099d5 <Dbg::logWriteInt(unsigned int)>
c0009a80:	58                   	pop    eax
c0009a81:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009a84:	84 c0                	test   al,al
c0009a86:	74 a0                	je     c0009a28 <Dbg::kprintf(char const*, ...)+0x14>
c0009a88:	8d 77 01             	lea    esi,[edi+0x1]
c0009a8b:	3c 25                	cmp    al,0x25
c0009a8d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009a90:	74 b9                	je     c0009a4b <Dbg::kprintf(char const*, ...)+0x37>
c0009a92:	50                   	push   eax
c0009a93:	89 f7                	mov    edi,esi
c0009a95:	e8 fe fe ff ff       	call   c0009998 <Dbg::logc(char)>
c0009a9a:	89 ee                	mov    esi,ebp
c0009a9c:	58                   	pop    eax
c0009a9d:	eb e2                	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009aa3:	89 c8                	mov    eax,ecx
c0009aa5:	83 c1 04             	add    ecx,0x4
c0009aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009aaa:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009aae:	50                   	push   eax
c0009aaf:	e8 04 ff ff ff       	call   c00099b8 <Dbg::logs(char*)>
c0009ab4:	58                   	pop    eax
c0009ab5:	eb ca                	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009ab7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009abb:	89 d0                	mov    eax,edx
c0009abd:	83 c2 04             	add    edx,0x4
c0009ac0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ac6:	50                   	push   eax
c0009ac7:	e8 09 ff ff ff       	call   c00099d5 <Dbg::logWriteInt(unsigned int)>
c0009acc:	58                   	pop    eax
c0009acd:	eb b2                	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009acf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009ad3:	89 d0                	mov    eax,edx
c0009ad5:	83 c2 04             	add    edx,0x4
c0009ad8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0009adb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009adf:	50                   	push   eax
c0009ae0:	e8 b3 fe ff ff       	call   c0009998 <Dbg::logc(char)>
c0009ae5:	58                   	pop    eax
c0009ae6:	eb 99                	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009ae8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009aec:	89 c8                	mov    eax,ecx
c0009aee:	83 c1 04             	add    ecx,0x4
c0009af1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009af5:	6a 10                	push   0x10
c0009af7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009af9:	51                   	push   ecx
c0009afa:	e8 f4 fe ff ff       	call   c00099f3 <Dbg::logWriteIntBase(unsigned int, int)>
c0009aff:	5d                   	pop    ebp
c0009b00:	58                   	pop    eax
c0009b01:	e9 7b ff ff ff       	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009b0a:	89 d0                	mov    eax,edx
c0009b0c:	83 c2 08             	add    edx,0x8
c0009b0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009b13:	6a 10                	push   0x10
c0009b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b17:	50                   	push   eax
c0009b18:	e8 d6 fe ff ff       	call   c00099f3 <Dbg::logWriteIntBase(unsigned int, int)>
c0009b1d:	58                   	pop    eax
c0009b1e:	5a                   	pop    edx
c0009b1f:	e9 5d ff ff ff       	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b24:	6a 25                	push   0x25
c0009b26:	e8 6d fe ff ff       	call   c0009998 <Dbg::logc(char)>
c0009b2b:	5a                   	pop    edx
c0009b2c:	e9 50 ff ff ff       	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b31:	6a 25                	push   0x25
c0009b33:	e8 60 fe ff ff       	call   c0009998 <Dbg::logc(char)>
c0009b38:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009b3c:	50                   	push   eax
c0009b3d:	e8 56 fe ff ff       	call   c0009998 <Dbg::logc(char)>
c0009b42:	5a                   	pop    edx
c0009b43:	59                   	pop    ecx
c0009b44:	e9 38 ff ff ff       	jmp    c0009a81 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b49:	90                   	nop

c0009b4a <File::read(unsigned long long, void*, int*)>:
c0009b4a:	53                   	push   ebx
c0009b4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b53:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009b5a:	3c 19                	cmp    al,0x19
c0009b5c:	77 35                	ja     c0009b93 <File::read(unsigned long long, void*, int*)+0x49>
c0009b5e:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c0009b65:	85 c0                	test   eax,eax
c0009b67:	74 2a                	je     c0009b93 <File::read(unsigned long long, void*, int*)+0x49>
c0009b69:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009b6f:	85 c0                	test   eax,eax
c0009b71:	74 20                	je     c0009b93 <File::read(unsigned long long, void*, int*)+0x49>
c0009b73:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009b77:	74 21                	je     c0009b9a <File::read(unsigned long long, void*, int*)+0x50>
c0009b79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009b7f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009b85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b8d:	5b                   	pop    ebx
c0009b8e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009b91:	ff e0                	jmp    eax
c0009b93:	b8 0b 00 00 00       	mov    eax,0xb
c0009b98:	eb 05                	jmp    c0009b9f <File::read(unsigned long long, void*, int*)+0x55>
c0009b9a:	b8 05 00 00 00       	mov    eax,0x5
c0009b9f:	5b                   	pop    ebx
c0009ba0:	c3                   	ret    
c0009ba1:	90                   	nop

c0009ba2 <File::write(unsigned long long, void*, int*)>:
c0009ba2:	53                   	push   ebx
c0009ba3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009bb2:	3c 19                	cmp    al,0x19
c0009bb4:	77 35                	ja     c0009beb <File::write(unsigned long long, void*, int*)+0x49>
c0009bb6:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c0009bbd:	85 c0                	test   eax,eax
c0009bbf:	74 2a                	je     c0009beb <File::write(unsigned long long, void*, int*)+0x49>
c0009bc1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bc7:	85 c0                	test   eax,eax
c0009bc9:	74 20                	je     c0009beb <File::write(unsigned long long, void*, int*)+0x49>
c0009bcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009bcf:	74 21                	je     c0009bf2 <File::write(unsigned long long, void*, int*)+0x50>
c0009bd1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009bd3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009bd7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009bdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009be1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009be5:	5b                   	pop    ebx
c0009be6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009be9:	ff e0                	jmp    eax
c0009beb:	b8 0b 00 00 00       	mov    eax,0xb
c0009bf0:	eb 05                	jmp    c0009bf7 <File::write(unsigned long long, void*, int*)+0x55>
c0009bf2:	b8 05 00 00 00       	mov    eax,0x5
c0009bf7:	5b                   	pop    ebx
c0009bf8:	c3                   	ret    
c0009bf9:	90                   	nop

c0009bfa <Directory::read(unsigned long long, void*, int*)>:
c0009bfa:	53                   	push   ebx
c0009bfb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c03:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009c0a:	3c 19                	cmp    al,0x19
c0009c0c:	77 35                	ja     c0009c43 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009c0e:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c0009c15:	85 c0                	test   eax,eax
c0009c17:	74 2a                	je     c0009c43 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009c19:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009c1f:	85 c0                	test   eax,eax
c0009c21:	74 20                	je     c0009c43 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009c23:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009c27:	74 21                	je     c0009c4a <Directory::read(unsigned long long, void*, int*)+0x50>
c0009c29:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009c2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009c2f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009c35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c3d:	5b                   	pop    ebx
c0009c3e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009c41:	ff e0                	jmp    eax
c0009c43:	b8 0b 00 00 00       	mov    eax,0xb
c0009c48:	eb 05                	jmp    c0009c4f <Directory::read(unsigned long long, void*, int*)+0x55>
c0009c4a:	b8 05 00 00 00       	mov    eax,0x5
c0009c4f:	5b                   	pop    ebx
c0009c50:	c3                   	ret    
c0009c51:	90                   	nop

c0009c52 <Directory::write(unsigned long long, void*, int*)>:
c0009c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c56:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009c5d:	b8 0b 00 00 00       	mov    eax,0xb
c0009c62:	80 fa 19             	cmp    dl,0x19
c0009c65:	77 18                	ja     c0009c7f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009c67:	8b 14 95 20 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde4e0]
c0009c6e:	85 d2                	test   edx,edx
c0009c70:	74 0d                	je     c0009c7f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009c72:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009c79:	19 c0                	sbb    eax,eax
c0009c7b:	83 e0 0a             	and    eax,0xa
c0009c7e:	40                   	inc    eax
c0009c7f:	c3                   	ret    

c0009c80 <File::isAtty()>:
c0009c80:	31 c0                	xor    eax,eax
c0009c82:	c3                   	ret    
c0009c83:	90                   	nop

c0009c84 <Directory::isAtty()>:
c0009c84:	31 c0                	xor    eax,eax
c0009c86:	c3                   	ret    
c0009c87:	90                   	nop

c0009c88 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009c88:	b8 0a 00 00 00       	mov    eax,0xa
c0009c8d:	c3                   	ret    

c0009c8e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009c8e:	b8 0a 00 00 00       	mov    eax,0xa
c0009c93:	c3                   	ret    

c0009c94 <Filesystem::allocateSwapfile(char const*, int)>:
c0009c94:	31 c0                	xor    eax,eax
c0009c96:	31 d2                	xor    edx,edx
c0009c98:	c3                   	ret    
c0009c99:	90                   	nop

c0009c9a <File::~File()>:
c0009c9a:	83 ec 0c             	sub    esp,0xc
c0009c9d:	ba 6c d4 01 c0       	mov    edx,0xc001d46c
c0009ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ca6:	89 10                	mov    DWORD PTR [eax],edx
c0009ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cac:	83 ec 0c             	sub    esp,0xc
c0009caf:	50                   	push   eax
c0009cb0:	e8 77 e8 ff ff       	call   c000852c <UnixFile::~UnixFile()>
c0009cb5:	83 c4 10             	add    esp,0x10
c0009cb8:	90                   	nop
c0009cb9:	83 c4 0c             	add    esp,0xc
c0009cbc:	c3                   	ret    
c0009cbd:	90                   	nop

c0009cbe <File::~File()>:
c0009cbe:	83 ec 0c             	sub    esp,0xc
c0009cc1:	83 ec 0c             	sub    esp,0xc
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 cd ff ff ff       	call   c0009c9a <File::~File()>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	83 ec 08             	sub    esp,0x8
c0009cd3:	68 14 01 00 00       	push   0x114
c0009cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cdc:	e8 3d fc ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	83 c4 0c             	add    esp,0xc
c0009ce7:	c3                   	ret    

c0009ce8 <Directory::~Directory()>:
c0009ce8:	83 ec 0c             	sub    esp,0xc
c0009ceb:	ba 88 d4 01 c0       	mov    edx,0xc001d488
c0009cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cf4:	89 10                	mov    DWORD PTR [eax],edx
c0009cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cfa:	83 ec 0c             	sub    esp,0xc
c0009cfd:	50                   	push   eax
c0009cfe:	e8 29 e8 ff ff       	call   c000852c <UnixFile::~UnixFile()>
c0009d03:	83 c4 10             	add    esp,0x10
c0009d06:	90                   	nop
c0009d07:	83 c4 0c             	add    esp,0xc
c0009d0a:	c3                   	ret    
c0009d0b:	90                   	nop

c0009d0c <Directory::~Directory()>:
c0009d0c:	83 ec 0c             	sub    esp,0xc
c0009d0f:	83 ec 0c             	sub    esp,0xc
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	e8 cd ff ff ff       	call   c0009ce8 <Directory::~Directory()>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	83 ec 08             	sub    esp,0x8
c0009d21:	68 14 01 00 00       	push   0x114
c0009d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d2a:	e8 ef fb ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c0009d2f:	83 c4 10             	add    esp,0x10
c0009d32:	83 c4 0c             	add    esp,0xc
c0009d35:	c3                   	ret    

c0009d36 <Filesystem::Filesystem()>:
c0009d36:	ba 04 d4 01 c0       	mov    edx,0xc001d404
c0009d3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d3f:	89 10                	mov    DWORD PTR [eax],edx
c0009d41:	8b 15 98 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f698
c0009d47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009d4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d52:	a3 98 f6 01 c0       	mov    ds:0xc001f698,eax
c0009d57:	90                   	nop
c0009d58:	c3                   	ret    
c0009d59:	90                   	nop

c0009d5a <Filesystem::~Filesystem()>:
c0009d5a:	ba 04 d4 01 c0       	mov    edx,0xc001d404
c0009d5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d63:	89 10                	mov    DWORD PTR [eax],edx
c0009d65:	90                   	nop
c0009d66:	c3                   	ret    
c0009d67:	90                   	nop

c0009d68 <Filesystem::~Filesystem()>:
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009d6f:	e8 e6 ff ff ff       	call   c0009d5a <Filesystem::~Filesystem()>
c0009d74:	83 c4 04             	add    esp,0x4
c0009d77:	83 ec 08             	sub    esp,0x8
c0009d7a:	6a 08                	push   0x8
c0009d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d80:	e8 99 fb ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c0009d85:	83 c4 10             	add    esp,0x10
c0009d88:	83 c4 0c             	add    esp,0xc
c0009d8b:	c3                   	ret    

c0009d8c <Fs::getcwd(Process*, char*, int)>:
c0009d8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d90:	31 c0                	xor    eax,eax
c0009d92:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009d95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009d99:	7d 15                	jge    c0009db0 <Fs::getcwd(Process*, char*, int)+0x24>
c0009d9b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d9f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009da6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009da9:	84 c9                	test   cl,cl
c0009dab:	74 06                	je     c0009db3 <Fs::getcwd(Process*, char*, int)+0x27>
c0009dad:	40                   	inc    eax
c0009dae:	eb e2                	jmp    c0009d92 <Fs::getcwd(Process*, char*, int)+0x6>
c0009db0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009db3:	31 c0                	xor    eax,eax
c0009db5:	c3                   	ret    

c0009db6 <Fs::initVFS()>:
c0009db6:	83 ec 18             	sub    esp,0x18
c0009db9:	6a 08                	push   0x8
c0009dbb:	e8 91 ce ff ff       	call   c0006c51 <malloc>
c0009dc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc3:	e8 10 c4 00 00       	call   c00161d8 <FAT::FAT()>
c0009dc8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009dcf:	e8 7d ce ff ff       	call   c0006c51 <malloc>
c0009dd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dd7:	e8 b6 d6 00 00       	call   c0017492 <ISO9660::ISO9660()>
c0009ddc:	83 c4 1c             	add    esp,0x1c
c0009ddf:	c3                   	ret    

c0009de0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009de0:	55                   	push   ebp
c0009de1:	57                   	push   edi
c0009de2:	56                   	push   esi
c0009de3:	53                   	push   ebx
c0009de4:	81 ec 10 04 00 00    	sub    esp,0x410
c0009dea:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009df1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009df8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009dff:	68 00 04 00 00       	push   0x400
c0009e04:	6a 00                	push   0x0
c0009e06:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009e0a:	56                   	push   esi
c0009e0b:	e8 e0 66 ff ff       	call   c00004f0 <memset>
c0009e10:	83 c4 10             	add    esp,0x10
c0009e13:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009e17:	75 0b                	jne    c0009e24 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009e19:	50                   	push   eax
c0009e1a:	50                   	push   eax
c0009e1b:	57                   	push   edi
c0009e1c:	56                   	push   esi
c0009e1d:	e8 fe 67 ff ff       	call   c0000620 <strcpy>
c0009e22:	eb 41                	jmp    c0009e65 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009e24:	8a 07                	mov    al,BYTE PTR [edi]
c0009e26:	3c 5c                	cmp    al,0x5c
c0009e28:	74 04                	je     c0009e2e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009e2a:	3c 2f                	cmp    al,0x2f
c0009e2c:	75 18                	jne    c0009e46 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009e2e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009e31:	3c 60                	cmp    al,0x60
c0009e33:	7e 03                	jle    c0009e38 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009e35:	83 e8 20             	sub    eax,0x20
c0009e38:	88 04 24             	mov    BYTE PTR [esp],al
c0009e3b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009e42:	50                   	push   eax
c0009e43:	50                   	push   eax
c0009e44:	eb 18                	jmp    c0009e5e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009e46:	50                   	push   eax
c0009e47:	50                   	push   eax
c0009e48:	55                   	push   ebp
c0009e49:	56                   	push   esi
c0009e4a:	e8 d1 67 ff ff       	call   c0000620 <strcpy>
c0009e4f:	5a                   	pop    edx
c0009e50:	59                   	pop    ecx
c0009e51:	68 23 e2 01 c0       	push   0xc001e223
c0009e56:	56                   	push   esi
c0009e57:	e8 84 69 ff ff       	call   c00007e0 <strcat>
c0009e5c:	5d                   	pop    ebp
c0009e5d:	58                   	pop    eax
c0009e5e:	57                   	push   edi
c0009e5f:	56                   	push   esi
c0009e60:	e8 7b 69 ff ff       	call   c00007e0 <strcat>
c0009e65:	83 c4 10             	add    esp,0x10
c0009e68:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009e6b:	3c 60                	cmp    al,0x60
c0009e6d:	7e 03                	jle    c0009e72 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009e6f:	83 e8 20             	sub    eax,0x20
c0009e72:	88 04 24             	mov    BYTE PTR [esp],al
c0009e75:	88 03                	mov    BYTE PTR [ebx],al
c0009e77:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009e7e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009e84:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009e88:	bf 03 00 00 00       	mov    edi,0x3
c0009e8d:	b8 03 00 00 00       	mov    eax,0x3
c0009e92:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009e95:	84 d2                	test   dl,dl
c0009e97:	0f 84 91 00 00 00    	je     c0009f2e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009e9d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009ea0:	80 fa 5c             	cmp    dl,0x5c
c0009ea3:	74 05                	je     c0009eaa <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009ea5:	80 fa 2f             	cmp    dl,0x2f
c0009ea8:	75 12                	jne    c0009ebc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009eaa:	89 c5                	mov    ebp,eax
c0009eac:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009eb1:	74 09                	je     c0009ebc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009eb3:	40                   	inc    eax
c0009eb4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009eb8:	89 cf                	mov    edi,ecx
c0009eba:	eb d6                	jmp    c0009e92 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009ebc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009ec1:	75 5b                	jne    c0009f1e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009ec3:	80 fa 2e             	cmp    dl,0x2e
c0009ec6:	75 56                	jne    c0009f1e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009ec8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009ecc:	74 19                	je     c0009ee7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009ece:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009ed3:	74 53                	je     c0009f28 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009ed5:	89 f9                	mov    ecx,edi
c0009ed7:	41                   	inc    ecx
c0009ed8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009edb:	80 fa 2f             	cmp    dl,0x2f
c0009ede:	74 f7                	je     c0009ed7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ee0:	80 fa 5c             	cmp    dl,0x5c
c0009ee3:	74 f2                	je     c0009ed7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ee5:	eb d1                	jmp    c0009eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ee7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009eec:	74 3a                	je     c0009f28 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009eee:	83 f8 03             	cmp    eax,0x3
c0009ef1:	74 c5                	je     c0009eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ef3:	41                   	inc    ecx
c0009ef4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009ef7:	80 fa 2f             	cmp    dl,0x2f
c0009efa:	74 f7                	je     c0009ef3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009efc:	80 fa 5c             	cmp    dl,0x5c
c0009eff:	74 f2                	je     c0009ef3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009f01:	48                   	dec    eax
c0009f02:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009f06:	75 06                	jne    c0009f0e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009f08:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009f0c:	eb f3                	jmp    c0009f01 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009f0e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009f12:	74 07                	je     c0009f1b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009f14:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009f18:	48                   	dec    eax
c0009f19:	eb f3                	jmp    c0009f0e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009f1b:	40                   	inc    eax
c0009f1c:	eb 9a                	jmp    c0009eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f1e:	80 fa 2f             	cmp    dl,0x2f
c0009f21:	74 95                	je     c0009eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f23:	80 fa 5c             	cmp    dl,0x5c
c0009f26:	74 90                	je     c0009eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f28:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009f2b:	40                   	inc    eax
c0009f2c:	eb 8a                	jmp    c0009eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f2e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009f32:	83 ec 0c             	sub    esp,0xc
c0009f35:	53                   	push   ebx
c0009f36:	e8 25 66 ff ff       	call   c0000560 <strlen>
c0009f3b:	83 c4 10             	add    esp,0x10
c0009f3e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009f43:	75 26                	jne    c0009f6b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009f45:	83 ec 0c             	sub    esp,0xc
c0009f48:	53                   	push   ebx
c0009f49:	e8 12 66 ff ff       	call   c0000560 <strlen>
c0009f4e:	83 c4 10             	add    esp,0x10
c0009f51:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009f56:	74 26                	je     c0009f7e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009f58:	83 ec 0c             	sub    esp,0xc
c0009f5b:	53                   	push   ebx
c0009f5c:	e8 ff 65 ff ff       	call   c0000560 <strlen>
c0009f61:	83 c4 10             	add    esp,0x10
c0009f64:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009f69:	eb c7                	jmp    c0009f32 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009f6b:	83 ec 0c             	sub    esp,0xc
c0009f6e:	53                   	push   ebx
c0009f6f:	e8 ec 65 ff ff       	call   c0000560 <strlen>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009f7c:	74 c7                	je     c0009f45 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009f7e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009f84:	5b                   	pop    ebx
c0009f85:	5e                   	pop    esi
c0009f86:	5f                   	pop    edi
c0009f87:	5d                   	pop    ebp
c0009f88:	c3                   	ret    
c0009f89:	90                   	nop

c0009f8a <File::File(char const*, Process*)>:
c0009f8a:	83 ec 0c             	sub    esp,0xc
c0009f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f91:	83 ec 08             	sub    esp,0x8
c0009f94:	6a 00                	push   0x0
c0009f96:	50                   	push   eax
c0009f97:	e8 ae e3 ff ff       	call   c000834a <UnixFile::UnixFile(int)>
c0009f9c:	83 c4 10             	add    esp,0x10
c0009f9f:	ba 6c d4 01 c0       	mov    edx,0xc001d46c
c0009fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fa8:	89 10                	mov    DWORD PTR [eax],edx
c0009faa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fb8:	83 c0 0d             	add    eax,0xd
c0009fbb:	83 ec 04             	sub    esp,0x4
c0009fbe:	52                   	push   edx
c0009fbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fc3:	50                   	push   eax
c0009fc4:	e8 17 fe ff ff       	call   c0009de0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0009fc9:	83 c4 10             	add    esp,0x10
c0009fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fd0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009fd3:	8d 50 bf             	lea    edx,[eax-0x41]
c0009fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fda:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fe4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ff2:	25 ff 00 00 00       	and    eax,0xff
c0009ff7:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c0009ffe:	85 c0                	test   eax,eax
c000a000:	74 42                	je     c000a044 <File::File(char const*, Process*)+0xba>
c000a002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a006:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a00c:	25 ff 00 00 00       	and    eax,0xff
c000a011:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c000a018:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a01e:	85 c0                	test   eax,eax
c000a020:	75 22                	jne    c000a044 <File::File(char const*, Process*)+0xba>
c000a022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a026:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a02c:	25 ff 00 00 00       	and    eax,0xff
c000a031:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c000a038:	83 ec 0c             	sub    esp,0xc
c000a03b:	50                   	push   eax
c000a03c:	e8 f9 1f 00 00       	call   c000c03a <LogicalDisk::mount()>
c000a041:	83 c4 10             	add    esp,0x10
c000a044:	90                   	nop
c000a045:	83 c4 0c             	add    esp,0xc
c000a048:	c3                   	ret    
c000a049:	90                   	nop

c000a04a <File::open(FileOpenMode)>:
c000a04a:	53                   	push   ebx
c000a04b:	b8 0b 00 00 00       	mov    eax,0xb
c000a050:	83 ec 08             	sub    esp,0x8
c000a053:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a057:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a05e:	80 fa 19             	cmp    dl,0x19
c000a061:	77 40                	ja     c000a0a3 <File::open(FileOpenMode)+0x59>
c000a063:	8b 14 95 20 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde4e0]
c000a06a:	85 d2                	test   edx,edx
c000a06c:	74 35                	je     c000a0a3 <File::open(FileOpenMode)+0x59>
c000a06e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a074:	85 d2                	test   edx,edx
c000a076:	74 2b                	je     c000a0a3 <File::open(FileOpenMode)+0x59>
c000a078:	b8 06 00 00 00       	mov    eax,0x6
c000a07d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a081:	75 20                	jne    c000a0a3 <File::open(FileOpenMode)+0x59>
c000a083:	8b 02                	mov    eax,DWORD PTR [edx]
c000a085:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a08b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a08f:	51                   	push   ecx
c000a090:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a093:	51                   	push   ecx
c000a094:	52                   	push   edx
c000a095:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a098:	83 c4 10             	add    esp,0x10
c000a09b:	85 c0                	test   eax,eax
c000a09d:	75 04                	jne    c000a0a3 <File::open(FileOpenMode)+0x59>
c000a09f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a0a3:	83 c4 08             	add    esp,0x8
c000a0a6:	5b                   	pop    ebx
c000a0a7:	c3                   	ret    

c000a0a8 <File::close()>:
c000a0a8:	53                   	push   ebx
c000a0a9:	b8 0b 00 00 00       	mov    eax,0xb
c000a0ae:	83 ec 08             	sub    esp,0x8
c000a0b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a0b5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a0bc:	80 fa 19             	cmp    dl,0x19
c000a0bf:	77 41                	ja     c000a102 <File::close()+0x5a>
c000a0c1:	8b 1c 95 20 1b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde4e0]
c000a0c8:	85 db                	test   ebx,ebx
c000a0ca:	74 36                	je     c000a102 <File::close()+0x5a>
c000a0cc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a0d3:	74 2d                	je     c000a102 <File::close()+0x5a>
c000a0d5:	b8 05 00 00 00       	mov    eax,0x5
c000a0da:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a0de:	74 22                	je     c000a102 <File::close()+0x5a>
c000a0e0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a0e4:	8b 04 95 20 1b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde4e0]
c000a0eb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a0f1:	53                   	push   ebx
c000a0f2:	53                   	push   ebx
c000a0f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0f5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a0fb:	50                   	push   eax
c000a0fc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000a0ff:	83 c4 10             	add    esp,0x10
c000a102:	83 c4 08             	add    esp,0x8
c000a105:	5b                   	pop    ebx
c000a106:	c3                   	ret    
c000a107:	90                   	nop

c000a108 <File::seek(unsigned long long)>:
c000a108:	56                   	push   esi
c000a109:	53                   	push   ebx
c000a10a:	b8 0b 00 00 00       	mov    eax,0xb
c000a10f:	51                   	push   ecx
c000a110:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a114:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a118:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000a11f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a123:	80 fa 19             	cmp    dl,0x19
c000a126:	77 31                	ja     c000a159 <File::seek(unsigned long long)+0x51>
c000a128:	8b 14 95 20 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde4e0]
c000a12f:	85 d2                	test   edx,edx
c000a131:	74 26                	je     c000a159 <File::seek(unsigned long long)+0x51>
c000a133:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a139:	85 d2                	test   edx,edx
c000a13b:	74 1c                	je     c000a159 <File::seek(unsigned long long)+0x51>
c000a13d:	b8 05 00 00 00       	mov    eax,0x5
c000a142:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000a146:	74 11                	je     c000a159 <File::seek(unsigned long long)+0x51>
c000a148:	8b 02                	mov    eax,DWORD PTR [edx]
c000a14a:	53                   	push   ebx
c000a14b:	51                   	push   ecx
c000a14c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000a152:	52                   	push   edx
c000a153:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000a156:	83 c4 10             	add    esp,0x10
c000a159:	5a                   	pop    edx
c000a15a:	5b                   	pop    ebx
c000a15b:	5e                   	pop    esi
c000a15c:	c3                   	ret    
c000a15d:	90                   	nop

c000a15e <File::tell(unsigned long long*)>:
c000a15e:	83 ec 0c             	sub    esp,0xc
c000a161:	b8 0b 00 00 00       	mov    eax,0xb
c000a166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a16a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a171:	80 fa 19             	cmp    dl,0x19
c000a174:	77 34                	ja     c000a1aa <File::tell(unsigned long long*)+0x4c>
c000a176:	8b 14 95 20 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde4e0]
c000a17d:	85 d2                	test   edx,edx
c000a17f:	74 29                	je     c000a1aa <File::tell(unsigned long long*)+0x4c>
c000a181:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a187:	85 d2                	test   edx,edx
c000a189:	74 1f                	je     c000a1aa <File::tell(unsigned long long*)+0x4c>
c000a18b:	b8 05 00 00 00       	mov    eax,0x5
c000a190:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a194:	74 14                	je     c000a1aa <File::tell(unsigned long long*)+0x4c>
c000a196:	50                   	push   eax
c000a197:	8b 02                	mov    eax,DWORD PTR [edx]
c000a199:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a19d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a1a3:	52                   	push   edx
c000a1a4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	83 c4 0c             	add    esp,0xc
c000a1ad:	c3                   	ret    

c000a1ae <File::rewind()>:
c000a1ae:	83 ec 10             	sub    esp,0x10
c000a1b1:	6a 00                	push   0x0
c000a1b3:	6a 00                	push   0x0
c000a1b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b9:	e8 4a ff ff ff       	call   c000a108 <File::seek(unsigned long long)>
c000a1be:	83 c4 1c             	add    esp,0x1c
c000a1c1:	c3                   	ret    

c000a1c2 <File::unlink()>:
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	b8 0b 00 00 00       	mov    eax,0xb
c000a1ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a1ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1d5:	80 f9 19             	cmp    cl,0x19
c000a1d8:	77 2f                	ja     c000a209 <File::unlink()+0x47>
c000a1da:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a1e1:	85 c9                	test   ecx,ecx
c000a1e3:	74 24                	je     c000a209 <File::unlink()+0x47>
c000a1e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1eb:	85 c9                	test   ecx,ecx
c000a1ed:	74 1a                	je     c000a209 <File::unlink()+0x47>
c000a1ef:	b8 06 00 00 00       	mov    eax,0x6
c000a1f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a1f8:	75 0f                	jne    c000a209 <File::unlink()+0x47>
c000a1fa:	83 c2 0d             	add    edx,0xd
c000a1fd:	50                   	push   eax
c000a1fe:	50                   	push   eax
c000a1ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a201:	52                   	push   edx
c000a202:	51                   	push   ecx
c000a203:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	83 c4 0c             	add    esp,0xc
c000a20c:	c3                   	ret    
c000a20d:	90                   	nop

c000a20e <File::rename(char const*)>:
c000a20e:	83 ec 0c             	sub    esp,0xc
c000a211:	b8 0b 00 00 00       	mov    eax,0xb
c000a216:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a21a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a221:	80 f9 19             	cmp    cl,0x19
c000a224:	77 32                	ja     c000a258 <File::rename(char const*)+0x4a>
c000a226:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a22d:	85 c9                	test   ecx,ecx
c000a22f:	74 27                	je     c000a258 <File::rename(char const*)+0x4a>
c000a231:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a237:	85 c9                	test   ecx,ecx
c000a239:	74 1d                	je     c000a258 <File::rename(char const*)+0x4a>
c000a23b:	b8 06 00 00 00       	mov    eax,0x6
c000a240:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a244:	75 12                	jne    c000a258 <File::rename(char const*)+0x4a>
c000a246:	83 c2 0d             	add    edx,0xd
c000a249:	50                   	push   eax
c000a24a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a24c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a250:	52                   	push   edx
c000a251:	51                   	push   ecx
c000a252:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a255:	83 c4 10             	add    esp,0x10
c000a258:	83 c4 0c             	add    esp,0xc
c000a25b:	c3                   	ret    

c000a25c <File::chfatattr(unsigned char, unsigned char)>:
c000a25c:	57                   	push   edi
c000a25d:	b8 0b 00 00 00       	mov    eax,0xb
c000a262:	56                   	push   esi
c000a263:	53                   	push   ebx
c000a264:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a268:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a26c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a273:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a277:	80 f9 19             	cmp    cl,0x19
c000a27a:	77 37                	ja     c000a2b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a27c:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a283:	85 c9                	test   ecx,ecx
c000a285:	74 2c                	je     c000a2b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a287:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a28d:	85 c9                	test   ecx,ecx
c000a28f:	74 22                	je     c000a2b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a291:	b8 06 00 00 00       	mov    eax,0x6
c000a296:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a29a:	75 17                	jne    c000a2b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a29c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a29e:	89 f0                	mov    eax,esi
c000a2a0:	83 c2 0d             	add    edx,0xd
c000a2a3:	0f b6 f0             	movzx  esi,al
c000a2a6:	0f b6 db             	movzx  ebx,bl
c000a2a9:	56                   	push   esi
c000a2aa:	53                   	push   ebx
c000a2ab:	52                   	push   edx
c000a2ac:	51                   	push   ecx
c000a2ad:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a2b0:	83 c4 10             	add    esp,0x10
c000a2b3:	5b                   	pop    ebx
c000a2b4:	5e                   	pop    esi
c000a2b5:	5f                   	pop    edi
c000a2b6:	c3                   	ret    
c000a2b7:	90                   	nop

c000a2b8 <File::exists()>:
c000a2b8:	83 ec 0c             	sub    esp,0xc
c000a2bb:	31 c0                	xor    eax,eax
c000a2bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a2c1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a2c8:	80 f9 19             	cmp    cl,0x19
c000a2cb:	77 24                	ja     c000a2f1 <File::exists()+0x39>
c000a2cd:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a2d4:	85 c9                	test   ecx,ecx
c000a2d6:	74 19                	je     c000a2f1 <File::exists()+0x39>
c000a2d8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a2de:	85 c9                	test   ecx,ecx
c000a2e0:	74 0f                	je     c000a2f1 <File::exists()+0x39>
c000a2e2:	83 c2 0d             	add    edx,0xd
c000a2e5:	50                   	push   eax
c000a2e6:	50                   	push   eax
c000a2e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a2e9:	52                   	push   edx
c000a2ea:	51                   	push   ecx
c000a2eb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a2ee:	83 c4 10             	add    esp,0x10
c000a2f1:	83 c4 0c             	add    esp,0xc
c000a2f4:	c3                   	ret    
c000a2f5:	90                   	nop

c000a2f6 <File::stat(unsigned long long*, bool*)>:
c000a2f6:	56                   	push   esi
c000a2f7:	53                   	push   ebx
c000a2f8:	50                   	push   eax
c000a2f9:	b8 0b 00 00 00       	mov    eax,0xb
c000a2fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a302:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a306:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a30d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a311:	80 f9 19             	cmp    cl,0x19
c000a314:	77 3d                	ja     c000a353 <File::stat(unsigned long long*, bool*)+0x5d>
c000a316:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a31d:	85 c9                	test   ecx,ecx
c000a31f:	74 32                	je     c000a353 <File::stat(unsigned long long*, bool*)+0x5d>
c000a321:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a327:	85 c9                	test   ecx,ecx
c000a329:	74 28                	je     c000a353 <File::stat(unsigned long long*, bool*)+0x5d>
c000a32b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a32d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a331:	74 13                	je     c000a346 <File::stat(unsigned long long*, bool*)+0x50>
c000a333:	83 ec 04             	sub    esp,0x4
c000a336:	56                   	push   esi
c000a337:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a33d:	51                   	push   ecx
c000a33e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a341:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a344:	eb 0a                	jmp    c000a350 <File::stat(unsigned long long*, bool*)+0x5a>
c000a346:	53                   	push   ebx
c000a347:	83 c2 0d             	add    edx,0xd
c000a34a:	56                   	push   esi
c000a34b:	52                   	push   edx
c000a34c:	51                   	push   ecx
c000a34d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a350:	83 c4 10             	add    esp,0x10
c000a353:	5a                   	pop    edx
c000a354:	5b                   	pop    ebx
c000a355:	5e                   	pop    esi
c000a356:	c3                   	ret    

c000a357 <Fs::setcwd(Process*, char*)>:
c000a357:	55                   	push   ebp
c000a358:	57                   	push   edi
c000a359:	56                   	push   esi
c000a35a:	53                   	push   ebx
c000a35b:	81 ec 20 02 00 00    	sub    esp,0x220
c000a361:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a368:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a36e:	57                   	push   edi
c000a36f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a376:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a37a:	56                   	push   esi
c000a37b:	e8 60 fa ff ff       	call   c0009de0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a380:	89 34 24             	mov    DWORD PTR [esp],esi
c000a383:	e8 d8 61 ff ff       	call   c0000560 <strlen>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	83 f8 02             	cmp    eax,0x2
c000a38e:	77 15                	ja     c000a3a5 <Fs::setcwd(Process*, char*)+0x4e>
c000a390:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a395:	83 eb 41             	sub    ebx,0x41
c000a398:	8b 04 9d 20 1b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde4e0]
c000a39f:	85 c0                	test   eax,eax
c000a3a1:	75 1c                	jne    c000a3bf <Fs::setcwd(Process*, char*)+0x68>
c000a3a3:	eb 2f                	jmp    c000a3d4 <Fs::setcwd(Process*, char*)+0x7d>
c000a3a5:	83 ec 0c             	sub    esp,0xc
c000a3a8:	56                   	push   esi
c000a3a9:	e8 b2 61 ff ff       	call   c0000560 <strlen>
c000a3ae:	83 c4 10             	add    esp,0x10
c000a3b1:	83 f8 03             	cmp    eax,0x3
c000a3b4:	75 57                	jne    c000a40d <Fs::setcwd(Process*, char*)+0xb6>
c000a3b6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a3bb:	75 50                	jne    c000a40d <Fs::setcwd(Process*, char*)+0xb6>
c000a3bd:	eb d1                	jmp    c000a390 <Fs::setcwd(Process*, char*)+0x39>
c000a3bf:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a3c6:	75 0c                	jne    c000a3d4 <Fs::setcwd(Process*, char*)+0x7d>
c000a3c8:	83 ec 0c             	sub    esp,0xc
c000a3cb:	50                   	push   eax
c000a3cc:	e8 69 1c 00 00       	call   c000c03a <LogicalDisk::mount()>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	b8 03 00 00 00       	mov    eax,0x3
c000a3d9:	83 fb 19             	cmp    ebx,0x19
c000a3dc:	0f 87 c6 00 00 00    	ja     c000a4a8 <Fs::setcwd(Process*, char*)+0x151>
c000a3e2:	8b 14 9d 20 1b 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffde4e0]
c000a3e9:	b8 05 00 00 00       	mov    eax,0x5
c000a3ee:	85 d2                	test   edx,edx
c000a3f0:	0f 84 b2 00 00 00    	je     c000a4a8 <Fs::setcwd(Process*, char*)+0x151>
c000a3f6:	b8 06 00 00 00       	mov    eax,0x6
c000a3fb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a402:	0f 85 92 00 00 00    	jne    c000a49a <Fs::setcwd(Process*, char*)+0x143>
c000a408:	e9 9b 00 00 00       	jmp    c000a4a8 <Fs::setcwd(Process*, char*)+0x151>
c000a40d:	83 ec 0c             	sub    esp,0xc
c000a410:	68 14 01 00 00       	push   0x114
c000a415:	e8 37 c8 ff ff       	call   c0006c51 <malloc>
c000a41a:	83 c4 0c             	add    esp,0xc
c000a41d:	89 c3                	mov    ebx,eax
c000a41f:	55                   	push   ebp
c000a420:	56                   	push   esi
c000a421:	50                   	push   eax
c000a422:	e8 63 fb ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000a427:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a42c:	83 c4 0c             	add    esp,0xc
c000a42f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a433:	50                   	push   eax
c000a434:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a438:	50                   	push   eax
c000a439:	53                   	push   ebx
c000a43a:	e8 b7 fe ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c000a43f:	83 c4 10             	add    esp,0x10
c000a442:	83 f8 02             	cmp    eax,0x2
c000a445:	74 04                	je     c000a44b <Fs::setcwd(Process*, char*)+0xf4>
c000a447:	85 c0                	test   eax,eax
c000a449:	74 1c                	je     c000a467 <Fs::setcwd(Process*, char*)+0x110>
c000a44b:	b8 01 00 00 00       	mov    eax,0x1
c000a450:	85 db                	test   ebx,ebx
c000a452:	74 54                	je     c000a4a8 <Fs::setcwd(Process*, char*)+0x151>
c000a454:	83 ec 0c             	sub    esp,0xc
c000a457:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a459:	53                   	push   ebx
c000a45a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	b8 01 00 00 00       	mov    eax,0x1
c000a465:	eb 41                	jmp    c000a4a8 <Fs::setcwd(Process*, char*)+0x151>
c000a467:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a46c:	75 1c                	jne    c000a48a <Fs::setcwd(Process*, char*)+0x133>
c000a46e:	b8 02 00 00 00       	mov    eax,0x2
c000a473:	85 db                	test   ebx,ebx
c000a475:	74 31                	je     c000a4a8 <Fs::setcwd(Process*, char*)+0x151>
c000a477:	83 ec 0c             	sub    esp,0xc
c000a47a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a47c:	53                   	push   ebx
c000a47d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	b8 02 00 00 00       	mov    eax,0x2
c000a488:	eb 1e                	jmp    c000a4a8 <Fs::setcwd(Process*, char*)+0x151>
c000a48a:	85 db                	test   ebx,ebx
c000a48c:	74 0c                	je     c000a49a <Fs::setcwd(Process*, char*)+0x143>
c000a48e:	83 ec 0c             	sub    esp,0xc
c000a491:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a493:	53                   	push   ebx
c000a494:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	50                   	push   eax
c000a49b:	50                   	push   eax
c000a49c:	56                   	push   esi
c000a49d:	57                   	push   edi
c000a49e:	e8 7d 61 ff ff       	call   c0000620 <strcpy>
c000a4a3:	83 c4 10             	add    esp,0x10
c000a4a6:	31 c0                	xor    eax,eax
c000a4a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a4ae:	5b                   	pop    ebx
c000a4af:	5e                   	pop    esi
c000a4b0:	5f                   	pop    edi
c000a4b1:	5d                   	pop    ebp
c000a4b2:	c3                   	ret    
c000a4b3:	90                   	nop

c000a4b4 <Directory::Directory(char const*, Process*)>:
c000a4b4:	83 ec 0c             	sub    esp,0xc
c000a4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4bb:	83 ec 08             	sub    esp,0x8
c000a4be:	6a 00                	push   0x0
c000a4c0:	50                   	push   eax
c000a4c1:	e8 84 de ff ff       	call   c000834a <UnixFile::UnixFile(int)>
c000a4c6:	83 c4 10             	add    esp,0x10
c000a4c9:	ba 88 d4 01 c0       	mov    edx,0xc001d488
c000a4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4d2:	89 10                	mov    DWORD PTR [eax],edx
c000a4d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4d8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4e2:	83 c0 0d             	add    eax,0xd
c000a4e5:	83 ec 04             	sub    esp,0x4
c000a4e8:	52                   	push   edx
c000a4e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ed:	50                   	push   eax
c000a4ee:	e8 ed f8 ff ff       	call   c0009de0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a4f3:	83 c4 10             	add    esp,0x10
c000a4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4fa:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a4fd:	8d 50 bf             	lea    edx,[eax-0x41]
c000a500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a504:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a50e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a516:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a51c:	25 ff 00 00 00       	and    eax,0xff
c000a521:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c000a528:	85 c0                	test   eax,eax
c000a52a:	74 42                	je     c000a56e <Directory::Directory(char const*, Process*)+0xba>
c000a52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a530:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a536:	25 ff 00 00 00       	and    eax,0xff
c000a53b:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c000a542:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a548:	85 c0                	test   eax,eax
c000a54a:	75 22                	jne    c000a56e <Directory::Directory(char const*, Process*)+0xba>
c000a54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a550:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a556:	25 ff 00 00 00       	and    eax,0xff
c000a55b:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c000a562:	83 ec 0c             	sub    esp,0xc
c000a565:	50                   	push   eax
c000a566:	e8 cf 1a 00 00       	call   c000c03a <LogicalDisk::mount()>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	90                   	nop
c000a56f:	83 c4 0c             	add    esp,0xc
c000a572:	c3                   	ret    
c000a573:	90                   	nop

c000a574 <Directory::open()>:
c000a574:	53                   	push   ebx
c000a575:	b8 0b 00 00 00       	mov    eax,0xb
c000a57a:	83 ec 08             	sub    esp,0x8
c000a57d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a581:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a588:	80 fa 19             	cmp    dl,0x19
c000a58b:	77 3d                	ja     c000a5ca <Directory::open()+0x56>
c000a58d:	8b 14 95 20 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde4e0]
c000a594:	85 d2                	test   edx,edx
c000a596:	74 32                	je     c000a5ca <Directory::open()+0x56>
c000a598:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a59e:	85 d2                	test   edx,edx
c000a5a0:	74 28                	je     c000a5ca <Directory::open()+0x56>
c000a5a2:	b8 06 00 00 00       	mov    eax,0x6
c000a5a7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a5ab:	75 1d                	jne    c000a5ca <Directory::open()+0x56>
c000a5ad:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a5b3:	50                   	push   eax
c000a5b4:	8b 02                	mov    eax,DWORD PTR [edx]
c000a5b6:	51                   	push   ecx
c000a5b7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a5ba:	51                   	push   ecx
c000a5bb:	52                   	push   edx
c000a5bc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a5bf:	83 c4 10             	add    esp,0x10
c000a5c2:	85 c0                	test   eax,eax
c000a5c4:	75 04                	jne    c000a5ca <Directory::open()+0x56>
c000a5c6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a5ca:	83 c4 08             	add    esp,0x8
c000a5cd:	5b                   	pop    ebx
c000a5ce:	c3                   	ret    
c000a5cf:	90                   	nop

c000a5d0 <Directory::close()>:
c000a5d0:	53                   	push   ebx
c000a5d1:	b8 0b 00 00 00       	mov    eax,0xb
c000a5d6:	83 ec 08             	sub    esp,0x8
c000a5d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a5dd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a5e4:	80 fa 19             	cmp    dl,0x19
c000a5e7:	77 41                	ja     c000a62a <Directory::close()+0x5a>
c000a5e9:	8b 1c 95 20 1b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde4e0]
c000a5f0:	85 db                	test   ebx,ebx
c000a5f2:	74 36                	je     c000a62a <Directory::close()+0x5a>
c000a5f4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a5fb:	74 2d                	je     c000a62a <Directory::close()+0x5a>
c000a5fd:	b8 05 00 00 00       	mov    eax,0x5
c000a602:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a606:	74 22                	je     c000a62a <Directory::close()+0x5a>
c000a608:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a60c:	8b 04 95 20 1b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde4e0]
c000a613:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a619:	53                   	push   ebx
c000a61a:	53                   	push   ebx
c000a61b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a61d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a623:	50                   	push   eax
c000a624:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a627:	83 c4 10             	add    esp,0x10
c000a62a:	83 c4 08             	add    esp,0x8
c000a62d:	5b                   	pop    ebx
c000a62e:	c3                   	ret    
c000a62f:	90                   	nop

c000a630 <Directory::unlink()>:
c000a630:	83 ec 0c             	sub    esp,0xc
c000a633:	b8 0b 00 00 00       	mov    eax,0xb
c000a638:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a63c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a643:	80 f9 19             	cmp    cl,0x19
c000a646:	77 2f                	ja     c000a677 <Directory::unlink()+0x47>
c000a648:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a64f:	85 c9                	test   ecx,ecx
c000a651:	74 24                	je     c000a677 <Directory::unlink()+0x47>
c000a653:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a659:	85 c9                	test   ecx,ecx
c000a65b:	74 1a                	je     c000a677 <Directory::unlink()+0x47>
c000a65d:	b8 06 00 00 00       	mov    eax,0x6
c000a662:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a666:	75 0f                	jne    c000a677 <Directory::unlink()+0x47>
c000a668:	83 c2 0d             	add    edx,0xd
c000a66b:	50                   	push   eax
c000a66c:	50                   	push   eax
c000a66d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a66f:	52                   	push   edx
c000a670:	51                   	push   ecx
c000a671:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a674:	83 c4 10             	add    esp,0x10
c000a677:	83 c4 0c             	add    esp,0xc
c000a67a:	c3                   	ret    
c000a67b:	90                   	nop

c000a67c <Directory::rename(char const*)>:
c000a67c:	83 ec 0c             	sub    esp,0xc
c000a67f:	b8 0b 00 00 00       	mov    eax,0xb
c000a684:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a688:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a68f:	80 f9 19             	cmp    cl,0x19
c000a692:	77 32                	ja     c000a6c6 <Directory::rename(char const*)+0x4a>
c000a694:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a69b:	85 c9                	test   ecx,ecx
c000a69d:	74 27                	je     c000a6c6 <Directory::rename(char const*)+0x4a>
c000a69f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a6a5:	85 c9                	test   ecx,ecx
c000a6a7:	74 1d                	je     c000a6c6 <Directory::rename(char const*)+0x4a>
c000a6a9:	b8 06 00 00 00       	mov    eax,0x6
c000a6ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6b2:	75 12                	jne    c000a6c6 <Directory::rename(char const*)+0x4a>
c000a6b4:	83 c2 0d             	add    edx,0xd
c000a6b7:	50                   	push   eax
c000a6b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a6ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a6be:	52                   	push   edx
c000a6bf:	51                   	push   ecx
c000a6c0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a6c3:	83 c4 10             	add    esp,0x10
c000a6c6:	83 c4 0c             	add    esp,0xc
c000a6c9:	c3                   	ret    

c000a6ca <Directory::exists()>:
c000a6ca:	83 ec 0c             	sub    esp,0xc
c000a6cd:	31 c0                	xor    eax,eax
c000a6cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a6d3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a6da:	80 f9 19             	cmp    cl,0x19
c000a6dd:	77 24                	ja     c000a703 <Directory::exists()+0x39>
c000a6df:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a6e6:	85 c9                	test   ecx,ecx
c000a6e8:	74 19                	je     c000a703 <Directory::exists()+0x39>
c000a6ea:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a6f0:	85 c9                	test   ecx,ecx
c000a6f2:	74 0f                	je     c000a703 <Directory::exists()+0x39>
c000a6f4:	83 c2 0d             	add    edx,0xd
c000a6f7:	50                   	push   eax
c000a6f8:	50                   	push   eax
c000a6f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a6fb:	52                   	push   edx
c000a6fc:	51                   	push   ecx
c000a6fd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a700:	83 c4 10             	add    esp,0x10
c000a703:	83 c4 0c             	add    esp,0xc
c000a706:	c3                   	ret    
c000a707:	90                   	nop

c000a708 <Directory::read(dirent*)>:
c000a708:	83 ec 1c             	sub    esp,0x1c
c000a70b:	b8 0b 00 00 00       	mov    eax,0xb
c000a710:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a714:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a71b:	80 fa 19             	cmp    dl,0x19
c000a71e:	77 30                	ja     c000a750 <Directory::read(dirent*)+0x48>
c000a720:	8b 14 95 20 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde4e0]
c000a727:	85 d2                	test   edx,edx
c000a729:	74 25                	je     c000a750 <Directory::read(dirent*)+0x48>
c000a72b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a732:	74 1c                	je     c000a750 <Directory::read(dirent*)+0x48>
c000a734:	83 ec 0c             	sub    esp,0xc
c000a737:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a739:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a73d:	52                   	push   edx
c000a73e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a742:	6a 00                	push   0x0
c000a744:	68 10 01 00 00       	push   0x110
c000a749:	51                   	push   ecx
c000a74a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a74d:	83 c4 20             	add    esp,0x20
c000a750:	83 c4 1c             	add    esp,0x1c
c000a753:	c3                   	ret    

c000a754 <Directory::create()>:
c000a754:	83 ec 0c             	sub    esp,0xc
c000a757:	b8 0b 00 00 00       	mov    eax,0xb
c000a75c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a760:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a767:	80 f9 19             	cmp    cl,0x19
c000a76a:	77 2f                	ja     c000a79b <Directory::create()+0x47>
c000a76c:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000a773:	85 c9                	test   ecx,ecx
c000a775:	74 24                	je     c000a79b <Directory::create()+0x47>
c000a777:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a77d:	85 c9                	test   ecx,ecx
c000a77f:	74 1a                	je     c000a79b <Directory::create()+0x47>
c000a781:	b8 06 00 00 00       	mov    eax,0x6
c000a786:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a78a:	75 0f                	jne    c000a79b <Directory::create()+0x47>
c000a78c:	83 c2 0d             	add    edx,0xd
c000a78f:	50                   	push   eax
c000a790:	50                   	push   eax
c000a791:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a793:	52                   	push   edx
c000a794:	51                   	push   ecx
c000a795:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a798:	83 c4 10             	add    esp,0x10
c000a79b:	83 c4 0c             	add    esp,0xc
c000a79e:	c3                   	ret    
c000a79f:	90                   	nop

c000a7a0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a7a0:	b8 0a 00 00 00       	mov    eax,0xa
c000a7a5:	c3                   	ret    
c000a7a6:	66 90                	xchg   ax,ax

c000a7a8 <Bus::Bus(char const*)>:
c000a7a8:	83 ec 0c             	sub    esp,0xc
c000a7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7af:	83 ec 08             	sub    esp,0x8
c000a7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7b6:	50                   	push   eax
c000a7b7:	e8 30 08 00 00       	call   c000afec <Device::Device(char const*)>
c000a7bc:	83 c4 10             	add    esp,0x10
c000a7bf:	ba a4 d4 01 c0       	mov    edx,0xc001d4a4
c000a7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ce:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a7d8:	90                   	nop
c000a7d9:	83 c4 0c             	add    esp,0xc
c000a7dc:	c3                   	ret    
c000a7dd:	90                   	nop
c000a7de:	66 90                	xchg   ax,ax

c000a7e0 <Bus::~Bus()>:
c000a7e0:	83 ec 0c             	sub    esp,0xc
c000a7e3:	ba a4 d4 01 c0       	mov    edx,0xc001d4a4
c000a7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ec:	89 10                	mov    DWORD PTR [eax],edx
c000a7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7f2:	83 ec 0c             	sub    esp,0xc
c000a7f5:	50                   	push   eax
c000a7f6:	e8 5b 05 00 00       	call   c000ad56 <Device::~Device()>
c000a7fb:	83 c4 10             	add    esp,0x10
c000a7fe:	90                   	nop
c000a7ff:	83 c4 0c             	add    esp,0xc
c000a802:	c3                   	ret    
c000a803:	90                   	nop

c000a804 <Bus::~Bus()>:
c000a804:	83 ec 0c             	sub    esp,0xc
c000a807:	83 ec 0c             	sub    esp,0xc
c000a80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80e:	e8 cd ff ff ff       	call   c000a7e0 <Bus::~Bus()>
c000a813:	83 c4 10             	add    esp,0x10
c000a816:	83 ec 08             	sub    esp,0x8
c000a819:	68 58 01 00 00       	push   0x158
c000a81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a822:	e8 f7 f0 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000a827:	83 c4 10             	add    esp,0x10
c000a82a:	83 c4 0c             	add    esp,0xc
c000a82d:	c3                   	ret    

c000a82e <beepThread(void*)>:
c000a82e:	83 ec 0c             	sub    esp,0xc
c000a831:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000a836:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a83a:	48                   	dec    eax
c000a83b:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000a840:	75 01                	jne    c000a843 <beepThread(void*)+0x15>
c000a842:	fb                   	sti    
c000a843:	83 ec 0c             	sub    esp,0xc
c000a846:	6b c2 0a             	imul   eax,edx,0xa
c000a849:	50                   	push   eax
c000a84a:	e8 f9 84 00 00       	call   c0012d48 <milliTenthSleep(unsigned int)>
c000a84f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a856:	e8 11 a1 00 00       	call   c001496c <HalMakeBeep(int)>
c000a85b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a863:	83 c4 1c             	add    esp,0x1c
c000a866:	e9 d9 83 00 00       	jmp    c0012c44 <blockTask(TaskState)>

c000a86b <Krnl::beep(int, int, bool)>:
c000a86b:	56                   	push   esi
c000a86c:	53                   	push   ebx
c000a86d:	83 ec 10             	sub    esp,0x10
c000a870:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a874:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a87c:	e8 eb a0 00 00       	call   c001496c <HalMakeBeep(int)>
c000a881:	83 c4 10             	add    esp,0x10
c000a884:	89 f0                	mov    eax,esi
c000a886:	84 c0                	test   al,al
c000a888:	74 1e                	je     c000a8a8 <Krnl::beep(int, int, bool)+0x3d>
c000a88a:	83 ec 0c             	sub    esp,0xc
c000a88d:	6b db 0a             	imul   ebx,ebx,0xa
c000a890:	53                   	push   ebx
c000a891:	e8 b2 84 00 00       	call   c0012d48 <milliTenthSleep(unsigned int)>
c000a896:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a89e:	83 c4 14             	add    esp,0x14
c000a8a1:	5b                   	pop    ebx
c000a8a2:	5e                   	pop    esi
c000a8a3:	e9 c4 a0 00 00       	jmp    c001496c <HalMakeBeep(int)>
c000a8a8:	68 e6 00 00 00       	push   0xe6
c000a8ad:	53                   	push   ebx
c000a8ae:	68 2e a8 00 c0       	push   0xc000a82e
c000a8b3:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c000a8b9:	e8 6a 7f 00 00       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c000a8be:	83 c4 14             	add    esp,0x14
c000a8c1:	5b                   	pop    ebx
c000a8c2:	5e                   	pop    esi
c000a8c3:	c3                   	ret    

c000a8c4 <User::loadClockSettings(int)>:
c000a8c4:	53                   	push   ebx
c000a8c5:	83 ec 14             	sub    esp,0x14
c000a8c8:	68 14 01 00 00       	push   0x114
c000a8cd:	e8 7f c3 ff ff       	call   c0006c51 <malloc>
c000a8d2:	83 c4 0c             	add    esp,0xc
c000a8d5:	89 c3                	mov    ebx,eax
c000a8d7:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c000a8dd:	68 c8 d4 01 c0       	push   0xc001d4c8
c000a8e2:	50                   	push   eax
c000a8e3:	e8 a2 f6 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000a8e8:	58                   	pop    eax
c000a8e9:	5a                   	pop    edx
c000a8ea:	6a 01                	push   0x1
c000a8ec:	53                   	push   ebx
c000a8ed:	e8 58 f7 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c000a8f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a8f5:	e8 ae f7 ff ff       	call   c000a0a8 <File::close()>
c000a8fa:	83 c4 10             	add    esp,0x10
c000a8fd:	85 db                	test   ebx,ebx
c000a8ff:	74 0f                	je     c000a910 <User::loadClockSettings(int)+0x4c>
c000a901:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a903:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a907:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a90a:	83 c4 08             	add    esp,0x8
c000a90d:	5b                   	pop    ebx
c000a90e:	ff e0                	jmp    eax
c000a910:	83 c4 08             	add    esp,0x8
c000a913:	5b                   	pop    ebx
c000a914:	c3                   	ret    
c000a915:	90                   	nop

c000a916 <Clock::Clock(char const*)>:
c000a916:	83 ec 0c             	sub    esp,0xc
c000a919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a91d:	83 ec 08             	sub    esp,0x8
c000a920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a924:	50                   	push   eax
c000a925:	e8 c2 06 00 00       	call   c000afec <Device::Device(char const*)>
c000a92a:	83 c4 10             	add    esp,0x10
c000a92d:	ba f0 d4 01 c0       	mov    edx,0xc001d4f0
c000a932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a936:	89 10                	mov    DWORD PTR [eax],edx
c000a938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a93c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a946:	90                   	nop
c000a947:	83 c4 0c             	add    esp,0xc
c000a94a:	c3                   	ret    
c000a94b:	90                   	nop

c000a94c <Clock::~Clock()>:
c000a94c:	83 ec 0c             	sub    esp,0xc
c000a94f:	ba f0 d4 01 c0       	mov    edx,0xc001d4f0
c000a954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a958:	89 10                	mov    DWORD PTR [eax],edx
c000a95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a95e:	83 ec 0c             	sub    esp,0xc
c000a961:	50                   	push   eax
c000a962:	e8 ef 03 00 00       	call   c000ad56 <Device::~Device()>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	90                   	nop
c000a96b:	83 c4 0c             	add    esp,0xc
c000a96e:	c3                   	ret    
c000a96f:	90                   	nop

c000a970 <Clock::~Clock()>:
c000a970:	83 ec 0c             	sub    esp,0xc
c000a973:	83 ec 0c             	sub    esp,0xc
c000a976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a97a:	e8 cd ff ff ff       	call   c000a94c <Clock::~Clock()>
c000a97f:	83 c4 10             	add    esp,0x10
c000a982:	83 ec 08             	sub    esp,0x8
c000a985:	68 58 01 00 00       	push   0x158
c000a98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a98e:	e8 8b ef ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	83 c4 0c             	add    esp,0xc
c000a999:	c3                   	ret    

c000a99a <Clock::timeInSecondsLocal()>:
c000a99a:	53                   	push   ebx
c000a99b:	83 ec 14             	sub    esp,0x14
c000a99e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9a4:	50                   	push   eax
c000a9a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a9a8:	0f b6 0d 9c f6 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f69c
c000a9af:	03 0d a0 f6 01 c0    	add    ecx,DWORD PTR ds:0xc001f6a0
c000a9b5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a9bb:	89 cb                	mov    ebx,ecx
c000a9bd:	c1 fb 1f             	sar    ebx,0x1f
c000a9c0:	01 c8                	add    eax,ecx
c000a9c2:	11 da                	adc    edx,ebx
c000a9c4:	83 c4 10             	add    esp,0x10
c000a9c7:	31 c9                	xor    ecx,ecx
c000a9c9:	80 3d 9d f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f69d,0x0
c000a9d0:	74 05                	je     c000a9d7 <Clock::timeInSecondsLocal()+0x3d>
c000a9d2:	b9 08 07 00 00       	mov    ecx,0x708
c000a9d7:	31 db                	xor    ebx,ebx
c000a9d9:	01 c8                	add    eax,ecx
c000a9db:	11 da                	adc    edx,ebx
c000a9dd:	83 c4 08             	add    esp,0x8
c000a9e0:	5b                   	pop    ebx
c000a9e1:	c3                   	ret    

c000a9e2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a9e2:	57                   	push   edi
c000a9e3:	56                   	push   esi
c000a9e4:	53                   	push   ebx
c000a9e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a9e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a9ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a9ef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a9f3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a9f6:	0f b6 05 9c f6 01 c0 	movzx  eax,BYTE PTR ds:0xc001f69c
c000a9fd:	03 05 a0 f6 01 c0    	add    eax,DWORD PTR ds:0xc001f6a0
c000aa03:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000aa09:	99                   	cdq    
c000aa0a:	29 c6                	sub    esi,eax
c000aa0c:	19 d7                	sbb    edi,edx
c000aa0e:	89 f0                	mov    eax,esi
c000aa10:	89 fa                	mov    edx,edi
c000aa12:	31 f6                	xor    esi,esi
c000aa14:	80 3d 9d f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f69d,0x0
c000aa1b:	74 05                	je     c000aa22 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000aa1d:	be 08 07 00 00       	mov    esi,0x708
c000aa22:	31 ff                	xor    edi,edi
c000aa24:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000aa28:	29 f0                	sub    eax,esi
c000aa2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa2e:	19 fa                	sbb    edx,edi
c000aa30:	89 d8                	mov    eax,ebx
c000aa32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000aa36:	5b                   	pop    ebx
c000aa37:	5e                   	pop    esi
c000aa38:	5f                   	pop    edi
c000aa39:	ff e0                	jmp    eax

c000aa3b <datetimeToSeconds(datetime_t)>:
c000aa3b:	55                   	push   ebp
c000aa3c:	57                   	push   edi
c000aa3d:	56                   	push   esi
c000aa3e:	53                   	push   ebx
c000aa3f:	83 ec 14             	sub    esp,0x14
c000aa42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000aa46:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000aa4a:	89 d3                	mov    ebx,edx
c000aa4c:	0f b6 c6             	movzx  eax,dh
c000aa4f:	c1 eb 10             	shr    ebx,0x10
c000aa52:	48                   	dec    eax
c000aa53:	66 81 eb 6c 07       	sub    bx,0x76c
c000aa58:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000aa5c:	0f b6 f5             	movzx  esi,ch
c000aa5f:	89 cf                	mov    edi,ecx
c000aa61:	6b f6 3c             	imul   esi,esi,0x3c
c000aa64:	c1 ef 10             	shr    edi,0x10
c000aa67:	0f b6 c9             	movzx  ecx,cl
c000aa6a:	89 f8                	mov    eax,edi
c000aa6c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aa72:	0f b6 f8             	movzx  edi,al
c000aa75:	0f b6 d2             	movzx  edx,dl
c000aa78:	01 fe                	add    esi,edi
c000aa7a:	01 f1                	add    ecx,esi
c000aa7c:	0f b7 f3             	movzx  esi,bx
c000aa7f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aa83:	c1 f9 1f             	sar    ecx,0x1f
c000aa86:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000aa8b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aa8f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000aa94:	8b 0c 8d 40 d5 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2ac0]
c000aa9b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000aa9f:	76 29                	jbe    c000aaca <datetimeToSeconds(datetime_t)+0x8f>
c000aaa1:	f6 c3 03             	test   bl,0x3
c000aaa4:	75 24                	jne    c000aaca <datetimeToSeconds(datetime_t)+0x8f>
c000aaa6:	31 d2                	xor    edx,edx
c000aaa8:	bf 64 00 00 00       	mov    edi,0x64
c000aaad:	89 d8                	mov    eax,ebx
c000aaaf:	66 f7 f7             	div    di
c000aab2:	66 85 d2             	test   dx,dx
c000aab5:	75 12                	jne    c000aac9 <datetimeToSeconds(datetime_t)+0x8e>
c000aab7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000aabd:	bf 90 01 00 00       	mov    edi,0x190
c000aac2:	99                   	cdq    
c000aac3:	f7 ff                	idiv   edi
c000aac5:	85 d2                	test   edx,edx
c000aac7:	75 01                	jne    c000aaca <datetimeToSeconds(datetime_t)+0x8f>
c000aac9:	41                   	inc    ecx
c000aaca:	66 83 fb 46          	cmp    bx,0x46
c000aace:	76 45                	jbe    c000ab15 <datetimeToSeconds(datetime_t)+0xda>
c000aad0:	bb 46 00 00 00       	mov    ebx,0x46
c000aad5:	bf 64 00 00 00       	mov    edi,0x64
c000aada:	bd 90 01 00 00       	mov    ebp,0x190
c000aadf:	b8 6d 01 00 00       	mov    eax,0x16d
c000aae4:	f6 c3 03             	test   bl,0x3
c000aae7:	75 23                	jne    c000ab0c <datetimeToSeconds(datetime_t)+0xd1>
c000aae9:	89 d8                	mov    eax,ebx
c000aaeb:	99                   	cdq    
c000aaec:	f7 ff                	idiv   edi
c000aaee:	b8 6e 01 00 00       	mov    eax,0x16e
c000aaf3:	85 d2                	test   edx,edx
c000aaf5:	75 15                	jne    c000ab0c <datetimeToSeconds(datetime_t)+0xd1>
c000aaf7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000aafd:	99                   	cdq    
c000aafe:	f7 fd                	idiv   ebp
c000ab00:	31 c0                	xor    eax,eax
c000ab02:	85 d2                	test   edx,edx
c000ab04:	0f 94 c0             	sete   al
c000ab07:	05 6d 01 00 00       	add    eax,0x16d
c000ab0c:	01 c1                	add    ecx,eax
c000ab0e:	43                   	inc    ebx
c000ab0f:	39 f3                	cmp    ebx,esi
c000ab11:	7c cc                	jl     c000aadf <datetimeToSeconds(datetime_t)+0xa4>
c000ab13:	eb 3b                	jmp    c000ab50 <datetimeToSeconds(datetime_t)+0x115>
c000ab15:	74 39                	je     c000ab50 <datetimeToSeconds(datetime_t)+0x115>
c000ab17:	b8 45 00 00 00       	mov    eax,0x45
c000ab1c:	89 c2                	mov    edx,eax
c000ab1e:	83 e2 03             	and    edx,0x3
c000ab21:	39 f0                	cmp    eax,esi
c000ab23:	7e 13                	jle    c000ab38 <datetimeToSeconds(datetime_t)+0xfd>
c000ab25:	85 d2                	test   edx,edx
c000ab27:	0f 94 c2             	sete   dl
c000ab2a:	48                   	dec    eax
c000ab2b:	0f b6 d2             	movzx  edx,dl
c000ab2e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000ab34:	29 d1                	sub    ecx,edx
c000ab36:	eb e4                	jmp    c000ab1c <datetimeToSeconds(datetime_t)+0xe1>
c000ab38:	b8 6d 01 00 00       	mov    eax,0x16d
c000ab3d:	85 d2                	test   edx,edx
c000ab3f:	75 0d                	jne    c000ab4e <datetimeToSeconds(datetime_t)+0x113>
c000ab41:	31 c0                	xor    eax,eax
c000ab43:	66 85 db             	test   bx,bx
c000ab46:	0f 95 c0             	setne  al
c000ab49:	05 6d 01 00 00       	add    eax,0x16d
c000ab4e:	29 c1                	sub    ecx,eax
c000ab50:	b8 80 51 01 00       	mov    eax,0x15180
c000ab55:	f7 e9                	imul   ecx
c000ab57:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ab5b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ab5f:	83 c4 14             	add    esp,0x14
c000ab62:	5b                   	pop    ebx
c000ab63:	5e                   	pop    esi
c000ab64:	5f                   	pop    edi
c000ab65:	5d                   	pop    ebp
c000ab66:	c3                   	ret    
c000ab67:	90                   	nop

c000ab68 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ab68:	57                   	push   edi
c000ab69:	56                   	push   esi
c000ab6a:	53                   	push   ebx
c000ab6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab6f:	8b 06                	mov    eax,DWORD PTR [esi]
c000ab71:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ab74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab7c:	e8 ba fe ff ff       	call   c000aa3b <datetimeToSeconds(datetime_t)>
c000ab81:	59                   	pop    ecx
c000ab82:	0f b6 0d 9c f6 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f69c
c000ab89:	5b                   	pop    ebx
c000ab8a:	03 0d a0 f6 01 c0    	add    ecx,DWORD PTR ds:0xc001f6a0
c000ab90:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ab96:	89 cb                	mov    ebx,ecx
c000ab98:	c1 fb 1f             	sar    ebx,0x1f
c000ab9b:	29 c8                	sub    eax,ecx
c000ab9d:	19 da                	sbb    edx,ebx
c000ab9f:	31 c9                	xor    ecx,ecx
c000aba1:	80 3d 9d f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f69d,0x0
c000aba8:	74 05                	je     c000abaf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000abaa:	b9 08 07 00 00       	mov    ecx,0x708
c000abaf:	31 db                	xor    ebx,ebx
c000abb1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000abb5:	29 c8                	sub    eax,ecx
c000abb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000abbb:	19 da                	sbb    edx,ebx
c000abbd:	89 f8                	mov    eax,edi
c000abbf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000abc3:	5b                   	pop    ebx
c000abc4:	5e                   	pop    esi
c000abc5:	5f                   	pop    edi
c000abc6:	ff e0                	jmp    eax

c000abc8 <secondsToDatetime(unsigned long long)>:
c000abc8:	55                   	push   ebp
c000abc9:	57                   	push   edi
c000abca:	56                   	push   esi
c000abcb:	53                   	push   ebx
c000abcc:	83 ec 1c             	sub    esp,0x1c
c000abcf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000abd3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000abd7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000abdb:	6a 00                	push   0x0
c000abdd:	68 80 51 01 00       	push   0x15180
c000abe2:	55                   	push   ebp
c000abe3:	57                   	push   edi
c000abe4:	e8 b7 0b 01 00       	call   c001b7a0 <__udivdi3>
c000abe9:	83 c4 10             	add    esp,0x10
c000abec:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000abf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abf6:	6a 00                	push   0x0
c000abf8:	68 80 51 01 00       	push   0x15180
c000abfd:	55                   	push   ebp
c000abfe:	57                   	push   edi
c000abff:	bf 10 0e 00 00       	mov    edi,0xe10
c000ac04:	e8 97 0c 01 00       	call   c001b8a0 <__umoddi3>
c000ac09:	83 c4 10             	add    esp,0x10
c000ac0c:	99                   	cdq    
c000ac0d:	f7 ff                	idiv   edi
c000ac0f:	bf 3c 00 00 00       	mov    edi,0x3c
c000ac14:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000ac17:	89 d0                	mov    eax,edx
c000ac19:	99                   	cdq    
c000ac1a:	f7 ff                	idiv   edi
c000ac1c:	85 db                	test   ebx,ebx
c000ac1e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000ac21:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ac24:	79 11                	jns    c000ac37 <secondsToDatetime(unsigned long long)+0x6f>
c000ac26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac2a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ac30:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ac35:	eb 07                	jmp    c000ac3e <secondsToDatetime(unsigned long long)+0x76>
c000ac37:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ac3c:	89 d8                	mov    eax,ebx
c000ac3e:	bf b4 05 00 00       	mov    edi,0x5b4
c000ac43:	99                   	cdq    
c000ac44:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ac49:	f7 f9                	idiv   ecx
c000ac4b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ac50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac54:	31 d2                	xor    edx,edx
c000ac56:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ac5e:	01 c3                	add    ebx,eax
c000ac60:	89 d8                	mov    eax,ebx
c000ac62:	f7 f1                	div    ecx
c000ac64:	31 d2                	xor    edx,edx
c000ac66:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ac69:	89 d8                	mov    eax,ebx
c000ac6b:	f7 f7                	div    edi
c000ac6d:	31 d2                	xor    edx,edx
c000ac6f:	29 c1                	sub    ecx,eax
c000ac71:	89 d8                	mov    eax,ebx
c000ac73:	f7 f5                	div    ebp
c000ac75:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ac7a:	29 c1                	sub    ecx,eax
c000ac7c:	31 d2                	xor    edx,edx
c000ac7e:	89 c8                	mov    eax,ecx
c000ac80:	f7 f5                	div    ebp
c000ac82:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ac87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac8b:	31 d2                	xor    edx,edx
c000ac8d:	89 c8                	mov    eax,ecx
c000ac8f:	f7 f5                	div    ebp
c000ac91:	31 d2                	xor    edx,edx
c000ac93:	01 c3                	add    ebx,eax
c000ac95:	89 c8                	mov    eax,ecx
c000ac97:	f7 f7                	div    edi
c000ac99:	bf 99 00 00 00       	mov    edi,0x99
c000ac9e:	29 c3                	sub    ebx,eax
c000aca0:	31 d2                	xor    edx,edx
c000aca2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000acaa:	29 c3                	sub    ebx,eax
c000acac:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000acaf:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000acb2:	bb 05 00 00 00       	mov    ebx,0x5
c000acb7:	83 c1 02             	add    ecx,0x2
c000acba:	89 c8                	mov    eax,ecx
c000acbc:	f7 f7                	div    edi
c000acbe:	31 d2                	xor    edx,edx
c000acc0:	89 c7                	mov    edi,eax
c000acc2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000acc8:	83 c0 02             	add    eax,0x2
c000accb:	f7 f3                	div    ebx
c000accd:	89 eb                	mov    ebx,ebp
c000accf:	29 c3                	sub    ebx,eax
c000acd1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000acd7:	88 1e                	mov    BYTE PTR [esi],bl
c000acd9:	19 c0                	sbb    eax,eax
c000acdb:	31 d2                	xor    edx,edx
c000acdd:	83 e0 0c             	and    eax,0xc
c000ace0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000ace4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000acec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000acf0:	83 f9 01             	cmp    ecx,0x1
c000acf3:	0f 96 c2             	setbe  dl
c000acf6:	41                   	inc    ecx
c000acf7:	01 d0                	add    eax,edx
c000acf9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000acfc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ad00:	83 c4 1c             	add    esp,0x1c
c000ad03:	89 f0                	mov    eax,esi
c000ad05:	5b                   	pop    ebx
c000ad06:	5e                   	pop    esi
c000ad07:	5f                   	pop    edi
c000ad08:	5d                   	pop    ebp
c000ad09:	c2 04 00             	ret    0x4

c000ad0c <Clock::timeInDatetimeLocal()>:
c000ad0c:	53                   	push   ebx
c000ad0d:	83 ec 14             	sub    esp,0x14
c000ad10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ad14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ad18:	e8 7d fc ff ff       	call   c000a99a <Clock::timeInSecondsLocal()>
c000ad1d:	83 c4 0c             	add    esp,0xc
c000ad20:	52                   	push   edx
c000ad21:	50                   	push   eax
c000ad22:	53                   	push   ebx
c000ad23:	e8 a0 fe ff ff       	call   c000abc8 <secondsToDatetime(unsigned long long)>
c000ad28:	89 d8                	mov    eax,ebx
c000ad2a:	83 c4 14             	add    esp,0x14
c000ad2d:	5b                   	pop    ebx
c000ad2e:	c2 04 00             	ret    0x4
c000ad31:	90                   	nop

c000ad32 <Device::hibernate()>:
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <Device::wake()>:
c000ad34:	c3                   	ret    
c000ad35:	90                   	nop

c000ad36 <Device::detect()>:
c000ad36:	c3                   	ret    
c000ad37:	90                   	nop

c000ad38 <Device::disableLegacy()>:
c000ad38:	c3                   	ret    
c000ad39:	90                   	nop

c000ad3a <Device::powerSaving(PowerSavingLevel)>:
c000ad3a:	c3                   	ret    
c000ad3b:	90                   	nop

c000ad3c <DriverlessDevice::close(int, int, void*)>:
c000ad3c:	31 c0                	xor    eax,eax
c000ad3e:	c3                   	ret    
c000ad3f:	90                   	nop

c000ad40 <DriverlessDevice::detect()>:
c000ad40:	c3                   	ret    
c000ad41:	90                   	nop

c000ad42 <DriverlessDevice::open(int, int, void*)>:
c000ad42:	83 ec 18             	sub    esp,0x18
c000ad45:	68 70 d5 01 c0       	push   0xc001d570
c000ad4a:	e8 18 48 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000ad4f:	83 c8 ff             	or     eax,0xffffffff
c000ad52:	83 c4 1c             	add    esp,0x1c
c000ad55:	c3                   	ret    

c000ad56 <Device::~Device()>:
c000ad56:	ba d0 d5 01 c0       	mov    edx,0xc001d5d0
c000ad5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad5f:	89 10                	mov    DWORD PTR [eax],edx
c000ad61:	90                   	nop
c000ad62:	c3                   	ret    
c000ad63:	90                   	nop

c000ad64 <Device::~Device()>:
c000ad64:	83 ec 0c             	sub    esp,0xc
c000ad67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad6b:	e8 e6 ff ff ff       	call   c000ad56 <Device::~Device()>
c000ad70:	83 c4 04             	add    esp,0x4
c000ad73:	83 ec 08             	sub    esp,0x8
c000ad76:	68 58 01 00 00       	push   0x158
c000ad7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad7f:	e8 9a eb ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	83 c4 0c             	add    esp,0xc
c000ad8a:	c3                   	ret    
c000ad8b:	90                   	nop

c000ad8c <Device::findAndLoadDriver()>:
c000ad8c:	c7 44 24 04 8e d5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d58e
c000ad94:	e9 7b ec ff ff       	jmp    c0009a14 <Dbg::kprintf(char const*, ...)>
c000ad99:	90                   	nop

c000ad9a <Device::preOpenPCI(PCIDeviceInfo)>:
c000ad9a:	57                   	push   edi
c000ad9b:	b9 09 00 00 00       	mov    ecx,0x9
c000ada0:	56                   	push   esi
c000ada1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ada5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ada9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000adb3:	81 c7 18 01 00 00    	add    edi,0x118
c000adb9:	fc                   	cld    
c000adba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000adbc:	5e                   	pop    esi
c000adbd:	5f                   	pop    edi
c000adbe:	c3                   	ret    
c000adbf:	90                   	nop

c000adc0 <Device::preOpenACPI(void*, char*, char*)>:
c000adc0:	57                   	push   edi
c000adc1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000adc6:	56                   	push   esi
c000adc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000adcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adcf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000add9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000addf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ade5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ade9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000adeb:	b9 0e 00 00 00       	mov    ecx,0xe
c000adf0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000adf6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000adfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000adfc:	5e                   	pop    esi
c000adfd:	5f                   	pop    edi
c000adfe:	c3                   	ret    
c000adff:	90                   	nop

c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ae00:	53                   	push   ebx
c000ae01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae11:	0f b6 c0             	movzx  eax,al
c000ae14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ae20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ae24:	5b                   	pop    ebx
c000ae25:	e9 a6 05 00 00       	jmp    c000b3d0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ae2a <Device::getParent()>:
c000ae2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ae34:	c3                   	ret    
c000ae35:	90                   	nop

c000ae36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ae36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ae3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ae43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ae47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ae4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae4f:	e9 e8 06 00 00       	jmp    c000b53c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ae54 <Device::addChild(Device*)>:
c000ae54:	53                   	push   ebx
c000ae55:	83 ec 08             	sub    esp,0x8
c000ae58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ae66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ae6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae6e:	85 d2                	test   edx,edx
c000ae70:	74 04                	je     c000ae76 <Device::addChild(Device*)+0x22>
c000ae72:	89 d3                	mov    ebx,edx
c000ae74:	eb f6                	jmp    c000ae6c <Device::addChild(Device*)+0x18>
c000ae76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ae79:	83 ec 0c             	sub    esp,0xc
c000ae7c:	6a 08                	push   0x8
c000ae7e:	e8 ce bd ff ff       	call   c0006c51 <malloc>
c000ae83:	89 03                	mov    DWORD PTR [ebx],eax
c000ae85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ae8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ae92:	83 c4 18             	add    esp,0x18
c000ae95:	5b                   	pop    ebx
c000ae96:	c3                   	ret    
c000ae97:	90                   	nop

c000ae98 <Device::removeAllChildren()>:
c000ae98:	56                   	push   esi
c000ae99:	53                   	push   ebx
c000ae9a:	52                   	push   edx
c000ae9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000aea5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aea8:	74 17                	je     c000aec1 <Device::removeAllChildren()+0x29>
c000aeaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aead:	85 c0                	test   eax,eax
c000aeaf:	74 0c                	je     c000aebd <Device::removeAllChildren()+0x25>
c000aeb1:	83 ec 0c             	sub    esp,0xc
c000aeb4:	8b 10                	mov    edx,DWORD PTR [eax]
c000aeb6:	50                   	push   eax
c000aeb7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000aeba:	83 c4 10             	add    esp,0x10
c000aebd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aebf:	eb e4                	jmp    c000aea5 <Device::removeAllChildren()+0xd>
c000aec1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000aec7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000aecd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000aed3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000aeda:	58                   	pop    eax
c000aedb:	5b                   	pop    ebx
c000aedc:	5e                   	pop    esi
c000aedd:	c3                   	ret    

c000aede <Device::hibernateAll()>:
c000aede:	53                   	push   ebx
c000aedf:	83 ec 14             	sub    esp,0x14
c000aee2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aee6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aee8:	53                   	push   ebx
c000aee9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000aeec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aef8:	74 0f                	je     c000af09 <Device::hibernateAll()+0x2b>
c000aefa:	83 ec 0c             	sub    esp,0xc
c000aefd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af00:	e8 d9 ff ff ff       	call   c000aede <Device::hibernateAll()>
c000af05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af07:	eb e9                	jmp    c000aef2 <Device::hibernateAll()+0x14>
c000af09:	83 c4 08             	add    esp,0x8
c000af0c:	5b                   	pop    ebx
c000af0d:	c3                   	ret    

c000af0e <Device::wakeAll()>:
c000af0e:	53                   	push   ebx
c000af0f:	83 ec 14             	sub    esp,0x14
c000af12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000af16:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af18:	53                   	push   ebx
c000af19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000af1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af28:	74 0f                	je     c000af39 <Device::wakeAll()+0x2b>
c000af2a:	83 ec 0c             	sub    esp,0xc
c000af2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af30:	e8 d9 ff ff ff       	call   c000af0e <Device::wakeAll()>
c000af35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af37:	eb e9                	jmp    c000af22 <Device::wakeAll()+0x14>
c000af39:	83 c4 08             	add    esp,0x8
c000af3c:	5b                   	pop    ebx
c000af3d:	c3                   	ret    

c000af3e <Device::detectAll()>:
c000af3e:	53                   	push   ebx
c000af3f:	83 ec 14             	sub    esp,0x14
c000af42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000af46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af48:	53                   	push   ebx
c000af49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000af4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af58:	74 0f                	je     c000af69 <Device::detectAll()+0x2b>
c000af5a:	83 ec 0c             	sub    esp,0xc
c000af5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af60:	e8 d9 ff ff ff       	call   c000af3e <Device::detectAll()>
c000af65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af67:	eb e9                	jmp    c000af52 <Device::detectAll()+0x14>
c000af69:	83 c4 08             	add    esp,0x8
c000af6c:	5b                   	pop    ebx
c000af6d:	c3                   	ret    

c000af6e <Device::disableLegacyAll()>:
c000af6e:	c3                   	ret    
c000af6f:	90                   	nop

c000af70 <Device::loadDriversForAll()>:
c000af70:	c3                   	ret    
c000af71:	90                   	nop

c000af72 <Device::closeAll()>:
c000af72:	53                   	push   ebx
c000af73:	83 ec 08             	sub    esp,0x8
c000af76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af7c:	6a 00                	push   0x0
c000af7e:	6a 00                	push   0x0
c000af80:	6a 00                	push   0x0
c000af82:	53                   	push   ebx
c000af83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af92:	74 0f                	je     c000afa3 <Device::closeAll()+0x31>
c000af94:	83 ec 0c             	sub    esp,0xc
c000af97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af9a:	e8 d3 ff ff ff       	call   c000af72 <Device::closeAll()>
c000af9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000afa1:	eb e9                	jmp    c000af8c <Device::closeAll()+0x1a>
c000afa3:	83 c4 08             	add    esp,0x8
c000afa6:	5b                   	pop    ebx
c000afa7:	c3                   	ret    

c000afa8 <Device::powerSavingAll(PowerSavingLevel)>:
c000afa8:	56                   	push   esi
c000afa9:	53                   	push   ebx
c000afaa:	83 ec 0c             	sub    esp,0xc
c000afad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000afb1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000afb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000afbc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000afc2:	83 c4 10             	add    esp,0x10
c000afc5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000afc8:	74 0f                	je     c000afd9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000afca:	52                   	push   edx
c000afcb:	52                   	push   edx
c000afcc:	56                   	push   esi
c000afcd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000afd0:	e8 d3 ff ff ff       	call   c000afa8 <Device::powerSavingAll(PowerSavingLevel)>
c000afd5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000afd7:	eb e9                	jmp    c000afc2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000afd9:	58                   	pop    eax
c000afda:	5b                   	pop    ebx
c000afdb:	5e                   	pop    esi
c000afdc:	c3                   	ret    
c000afdd:	90                   	nop

c000afde <Device::setName(char const*)>:
c000afde:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000afe6:	e9 35 56 ff ff       	jmp    c0000620 <strcpy>
c000afeb:	90                   	nop

c000afec <Device::Device(char const*)>:
c000afec:	83 ec 1c             	sub    esp,0x1c
c000afef:	ba d0 d5 01 c0       	mov    edx,0xc001d5d0
c000aff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aff8:	89 10                	mov    DWORD PTR [eax],edx
c000affa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000affe:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000b008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b00c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000b016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b01a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000b024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b028:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000b032:	83 ec 08             	sub    esp,0x8
c000b035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b039:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b03d:	e8 9c ff ff ff       	call   c000afde <Device::setName(char const*)>
c000b042:	83 c4 10             	add    esp,0x10
c000b045:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000b04d:	83 ec 0c             	sub    esp,0xc
c000b050:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b054:	e8 f8 bb ff ff       	call   c0006c51 <malloc>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b069:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b06d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000b073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b077:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b07d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b087:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b08d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b098:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000b09f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0a3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000b0aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0ae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000b0b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0bc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000b0c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0ca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000b0d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0d8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000b0e2:	90                   	nop
c000b0e3:	83 c4 1c             	add    esp,0x1c
c000b0e6:	c3                   	ret    
c000b0e7:	90                   	nop

c000b0e8 <Device::getName()>:
c000b0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ec:	05 d0 00 00 00       	add    eax,0xd0
c000b0f1:	c3                   	ret    

c000b0f2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000b0f2:	83 ec 0c             	sub    esp,0xc
c000b0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f9:	83 ec 08             	sub    esp,0x8
c000b0fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b100:	50                   	push   eax
c000b101:	e8 e6 fe ff ff       	call   c000afec <Device::Device(char const*)>
c000b106:	83 c4 10             	add    esp,0x10
c000b109:	ba fc d5 01 c0       	mov    edx,0xc001d5fc
c000b10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b112:	89 10                	mov    DWORD PTR [eax],edx
c000b114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b118:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000b122:	90                   	nop
c000b123:	83 c4 0c             	add    esp,0xc
c000b126:	c3                   	ret    
c000b127:	90                   	nop

c000b128 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000b128:	57                   	push   edi
c000b129:	56                   	push   esi
c000b12a:	53                   	push   ebx
c000b12b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b12f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b133:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b137:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000b13d:	75 0c                	jne    c000b14b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000b13f:	52                   	push   edx
c000b140:	52                   	push   edx
c000b141:	53                   	push   ebx
c000b142:	56                   	push   esi
c000b143:	e8 0a 0b 01 00       	call   c001bc52 <LinkedList<Device>::addElement(Device*)>
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b151:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b154:	74 12                	je     c000b168 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000b156:	50                   	push   eax
c000b157:	57                   	push   edi
c000b158:	56                   	push   esi
c000b159:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b15c:	e8 c7 ff ff ff       	call   c000b128 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b161:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	eb e9                	jmp    c000b151 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b168:	5b                   	pop    ebx
c000b169:	5e                   	pop    esi
c000b16a:	5f                   	pop    edi
c000b16b:	c3                   	ret    

c000b16c <getDevicesOfType(DeviceType)>:
c000b16c:	53                   	push   ebx
c000b16d:	83 ec 14             	sub    esp,0x14
c000b170:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b174:	53                   	push   ebx
c000b175:	e8 b4 0b 01 00       	call   c001bd2e <LinkedList<Device>::LinkedList()>
c000b17a:	83 c4 0c             	add    esp,0xc
c000b17d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b181:	53                   	push   ebx
c000b182:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000b188:	e8 9b ff ff ff       	call   c000b128 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b18d:	89 d8                	mov    eax,ebx
c000b18f:	83 c4 18             	add    esp,0x18
c000b192:	5b                   	pop    ebx
c000b193:	c2 04 00             	ret    0x4
c000b196:	66 90                	xchg   ax,ax

c000b198 <HardDiskController::HardDiskController(char const*)>:
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19f:	83 ec 08             	sub    esp,0x8
c000b1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1a6:	50                   	push   eax
c000b1a7:	e8 40 fe ff ff       	call   c000afec <Device::Device(char const*)>
c000b1ac:	83 c4 10             	add    esp,0x10
c000b1af:	ba 28 d6 01 c0       	mov    edx,0xc001d628
c000b1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b8:	89 10                	mov    DWORD PTR [eax],edx
c000b1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1be:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b1c8:	90                   	nop
c000b1c9:	83 c4 0c             	add    esp,0xc
c000b1cc:	c3                   	ret    
c000b1cd:	90                   	nop
c000b1ce:	66 90                	xchg   ax,ax

c000b1d0 <HardDiskController::~HardDiskController()>:
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	ba 28 d6 01 c0       	mov    edx,0xc001d628
c000b1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1dc:	89 10                	mov    DWORD PTR [eax],edx
c000b1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e2:	83 ec 0c             	sub    esp,0xc
c000b1e5:	50                   	push   eax
c000b1e6:	e8 6b fb ff ff       	call   c000ad56 <Device::~Device()>
c000b1eb:	83 c4 10             	add    esp,0x10
c000b1ee:	90                   	nop
c000b1ef:	83 c4 0c             	add    esp,0xc
c000b1f2:	c3                   	ret    
c000b1f3:	90                   	nop

c000b1f4 <HardDiskController::~HardDiskController()>:
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	83 ec 0c             	sub    esp,0xc
c000b1fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1fe:	e8 cd ff ff ff       	call   c000b1d0 <HardDiskController::~HardDiskController()>
c000b203:	83 c4 10             	add    esp,0x10
c000b206:	83 ec 08             	sub    esp,0x8
c000b209:	68 58 01 00 00       	push   0x158
c000b20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b212:	e8 07 e7 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	83 c4 0c             	add    esp,0xc
c000b21d:	c3                   	ret    

c000b21e <PhysicalDisk::eject()>:
c000b21e:	83 c8 ff             	or     eax,0xffffffff
c000b221:	c3                   	ret    

c000b222 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b229:	83 ec 08             	sub    esp,0x8
c000b22c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b230:	50                   	push   eax
c000b231:	e8 b6 fd ff ff       	call   c000afec <Device::Device(char const*)>
c000b236:	83 c4 10             	add    esp,0x10
c000b239:	ba 54 d6 01 c0       	mov    edx,0xc001d654
c000b23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b242:	89 10                	mov    DWORD PTR [eax],edx
c000b244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b248:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b253:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b25e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b26c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b270:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b27a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b284:	90                   	nop
c000b285:	83 c4 0c             	add    esp,0xc
c000b288:	c3                   	ret    
c000b289:	90                   	nop

c000b28a <PhysicalDisk::startCache()>:
c000b28a:	56                   	push   esi
c000b28b:	53                   	push   ebx
c000b28c:	83 ec 10             	sub    esp,0x10
c000b28f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b293:	6a 44                	push   0x44
c000b295:	e8 b7 b9 ff ff       	call   c0006c51 <malloc>
c000b29a:	89 c6                	mov    esi,eax
c000b29c:	58                   	pop    eax
c000b29d:	5a                   	pop    edx
c000b29e:	53                   	push   ebx
c000b29f:	56                   	push   esi
c000b2a0:	e8 ab 15 00 00       	call   c000c850 <VCache::VCache(PhysicalDisk*)>
c000b2a5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b2ab:	83 c4 14             	add    esp,0x14
c000b2ae:	5b                   	pop    ebx
c000b2af:	5e                   	pop    esi
c000b2b0:	c3                   	ret    
c000b2b1:	90                   	nop

c000b2b2 <PhysicalDisk::~PhysicalDisk()>:
c000b2b2:	83 ec 0c             	sub    esp,0xc
c000b2b5:	ba 54 d6 01 c0       	mov    edx,0xc001d654
c000b2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2be:	89 10                	mov    DWORD PTR [eax],edx
c000b2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c4:	83 ec 0c             	sub    esp,0xc
c000b2c7:	50                   	push   eax
c000b2c8:	e8 89 fa ff ff       	call   c000ad56 <Device::~Device()>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	90                   	nop
c000b2d1:	83 c4 0c             	add    esp,0xc
c000b2d4:	c3                   	ret    
c000b2d5:	90                   	nop

c000b2d6 <PhysicalDisk::~PhysicalDisk()>:
c000b2d6:	83 ec 0c             	sub    esp,0xc
c000b2d9:	83 ec 0c             	sub    esp,0xc
c000b2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e0:	e8 cd ff ff ff       	call   c000b2b2 <PhysicalDisk::~PhysicalDisk()>
c000b2e5:	83 c4 10             	add    esp,0x10
c000b2e8:	83 ec 08             	sub    esp,0x8
c000b2eb:	68 6c 01 00 00       	push   0x16c
c000b2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f4:	e8 25 e6 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	83 c4 0c             	add    esp,0xc
c000b2ff:	c3                   	ret    

c000b300 <int_handler>:
c000b300:	55                   	push   ebp
c000b301:	57                   	push   edi
c000b302:	56                   	push   esi
c000b303:	53                   	push   ebx
c000b304:	83 ec 0c             	sub    esp,0xc
c000b307:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b30b:	80 3d 44 20 02 c0 00 	cmp    BYTE PTR ds:0xc0022044,0x0
c000b312:	74 0b                	je     c000b31f <int_handler+0x1f>
c000b314:	fa                   	cli    
c000b315:	f4                   	hlt    
c000b316:	80 3d 44 20 02 c0 00 	cmp    BYTE PTR ds:0xc0022044,0x0
c000b31d:	75 f5                	jne    c000b314 <int_handler+0x14>
c000b31f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b322:	8d 46 e0             	lea    eax,[esi-0x20]
c000b325:	83 f8 17             	cmp    eax,0x17
c000b328:	76 3e                	jbe    c000b368 <int_handler+0x68>
c000b32a:	c1 e6 04             	shl    esi,0x4
c000b32d:	31 db                	xor    ebx,ebx
c000b32f:	8d ae c0 06 02 c0    	lea    ebp,[esi-0x3ffdf940]
c000b335:	81 c6 c0 f6 01 c0    	add    esi,0xc001f6c0
c000b33b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b33f:	85 c0                	test   eax,eax
c000b341:	74 13                	je     c000b356 <int_handler+0x56>
c000b343:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b346:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b34a:	74 2a                	je     c000b376 <int_handler+0x76>
c000b34c:	83 ec 08             	sub    esp,0x8
c000b34f:	52                   	push   edx
c000b350:	57                   	push   edi
c000b351:	ff d0                	call   eax
c000b353:	83 c4 10             	add    esp,0x10
c000b356:	43                   	inc    ebx
c000b357:	83 fb 04             	cmp    ebx,0x4
c000b35a:	75 df                	jne    c000b33b <int_handler+0x3b>
c000b35c:	83 c4 0c             	add    esp,0xc
c000b35f:	31 c0                	xor    eax,eax
c000b361:	5b                   	pop    ebx
c000b362:	31 d2                	xor    edx,edx
c000b364:	5e                   	pop    esi
c000b365:	5f                   	pop    edi
c000b366:	5d                   	pop    ebp
c000b367:	c3                   	ret    
c000b368:	83 ec 0c             	sub    esp,0xc
c000b36b:	50                   	push   eax
c000b36c:	e8 38 96 00 00       	call   c00149a9 <HalEndOfInterrupt(int)>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	eb b4                	jmp    c000b32a <int_handler+0x2a>
c000b376:	83 ec 08             	sub    esp,0x8
c000b379:	52                   	push   edx
c000b37a:	57                   	push   edi
c000b37b:	ff d0                	call   eax
c000b37d:	83 c4 10             	add    esp,0x10
c000b380:	83 c4 0c             	add    esp,0xc
c000b383:	5b                   	pop    ebx
c000b384:	5e                   	pop    esi
c000b385:	5f                   	pop    edi
c000b386:	5d                   	pop    ebp
c000b387:	c3                   	ret    

c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b388:	56                   	push   esi
c000b389:	31 c0                	xor    eax,eax
c000b38b:	53                   	push   ebx
c000b38c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b390:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b394:	89 ca                	mov    edx,ecx
c000b396:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b39a:	c1 e2 04             	shl    edx,0x4
c000b39d:	83 bc 82 c0 06 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdf940],0x0
c000b3a5:	74 15                	je     c000b3bc <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b3a7:	40                   	inc    eax
c000b3a8:	83 f8 04             	cmp    eax,0x4
c000b3ab:	75 f0                	jne    c000b39d <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b3ad:	c7 44 24 0c 84 d6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d684
c000b3b5:	5b                   	pop    ebx
c000b3b6:	5e                   	pop    esi
c000b3b7:	e9 ab 41 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c000b3bc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b3bf:	89 1c 85 c0 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf940],ebx
c000b3c6:	89 34 85 c0 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0940],esi
c000b3cd:	5b                   	pop    ebx
c000b3ce:	5e                   	pop    esi
c000b3cf:	c3                   	ret    

c000b3d0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b3d0:	57                   	push   edi
c000b3d1:	8b 15 a8 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5a8
c000b3d7:	56                   	push   esi
c000b3d8:	53                   	push   ebx
c000b3d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b3dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3e1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b3e8:	74 5b                	je     c000b445 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b3ea:	89 c7                	mov    edi,eax
c000b3ec:	84 c0                	test   al,al
c000b3ee:	74 24                	je     c000b414 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b3f0:	83 fe 0f             	cmp    esi,0xf
c000b3f3:	0f 8f d9 00 00 00    	jg     c000b4d2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000b3f9:	8a 86 60 ef 01 c0    	mov    al,BYTE PTR [esi-0x3ffe10a0]
c000b3ff:	25 ff 00 00 00       	and    eax,0xff
c000b404:	66 8b bc 00 60 1e 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffde1a0]
c000b40c:	89 c6                	mov    esi,eax
c000b40e:	66 d1 ef             	shr    di,1
c000b411:	83 e7 01             	and    edi,0x1
c000b414:	83 ec 08             	sub    esp,0x8
c000b417:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c000b41c:	31 db                	xor    ebx,ebx
c000b41e:	50                   	push   eax
c000b41f:	68 91 d6 01 c0       	push   0xc001d691
c000b424:	e8 eb e5 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c000b431:	85 c0                	test   eax,eax
c000b433:	7f 51                	jg     c000b486 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000b435:	83 ec 0c             	sub    esp,0xc
c000b438:	68 a8 d6 01 c0       	push   0xc001d6a8
c000b43d:	e8 25 41 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b448:	31 d2                	xor    edx,edx
c000b44a:	89 c8                	mov    eax,ecx
c000b44c:	c1 e0 04             	shl    eax,0x4
c000b44f:	8b 9c 90 c0 06 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdf940]
c000b456:	85 db                	test   ebx,ebx
c000b458:	0f 84 8b 00 00 00    	je     c000b4e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000b45e:	42                   	inc    edx
c000b45f:	83 fa 04             	cmp    edx,0x4
c000b462:	75 eb                	jne    c000b44f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	68 fc d6 01 c0       	push   0xc001d6fc
c000b46c:	e8 f6 40 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000b471:	83 c4 10             	add    esp,0x10
c000b474:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b479:	5b                   	pop    ebx
c000b47a:	5e                   	pop    esi
c000b47b:	5f                   	pop    edi
c000b47c:	c3                   	ret    
c000b47d:	43                   	inc    ebx
c000b47e:	39 1d 80 34 02 c0    	cmp    DWORD PTR ds:0xc0023480,ebx
c000b484:	7e af                	jle    c000b435 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000b486:	83 ec 08             	sub    esp,0x8
c000b489:	8b 04 9d a0 34 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcb60]
c000b490:	56                   	push   esi
c000b491:	50                   	push   eax
c000b492:	e8 e1 f7 00 00       	call   c001ac78 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b497:	83 c4 10             	add    esp,0x10
c000b49a:	84 c0                	test   al,al
c000b49c:	74 df                	je     c000b47d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000b49e:	81 e7 ff 00 00 00    	and    edi,0xff
c000b4a4:	50                   	push   eax
c000b4a5:	8d 46 20             	lea    eax,[esi+0x20]
c000b4a8:	57                   	push   edi
c000b4a9:	25 ff 00 00 00       	and    eax,0xff
c000b4ae:	6a 00                	push   0x0
c000b4b0:	50                   	push   eax
c000b4b1:	89 f0                	mov    eax,esi
c000b4b3:	6a 00                	push   0x0
c000b4b5:	25 ff 00 00 00       	and    eax,0xff
c000b4ba:	6a 00                	push   0x0
c000b4bc:	50                   	push   eax
c000b4bd:	8b 04 9d a0 34 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcb60]
c000b4c4:	50                   	push   eax
c000b4c5:	e8 28 f9 00 00       	call   c001adf2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b4ca:	83 c4 20             	add    esp,0x20
c000b4cd:	e9 73 ff ff ff       	jmp    c000b445 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b4d2:	83 ec 0c             	sub    esp,0xc
c000b4d5:	31 ff                	xor    edi,edi
c000b4d7:	68 c4 d6 01 c0       	push   0xc001d6c4
c000b4dc:	e8 86 40 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000b4e1:	83 c4 10             	add    esp,0x10
c000b4e4:	e9 2b ff ff ff       	jmp    c000b414 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b4e9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b4ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4f0:	89 14 85 c0 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf940],edx
c000b4f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b4fb:	5b                   	pop    ebx
c000b4fc:	89 14 85 c0 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0940],edx
c000b503:	89 f0                	mov    eax,esi
c000b505:	5e                   	pop    esi
c000b506:	5f                   	pop    edi
c000b507:	c3                   	ret    

c000b508 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b510:	c1 e0 04             	shl    eax,0x4
c000b513:	8d 50 10             	lea    edx,[eax+0x10]
c000b516:	39 88 c0 06 02 c0    	cmp    DWORD PTR [eax-0x3ffdf940],ecx
c000b51c:	74 08                	je     c000b526 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b51e:	83 c0 04             	add    eax,0x4
c000b521:	39 d0                	cmp    eax,edx
c000b523:	75 f1                	jne    c000b516 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b525:	c3                   	ret    
c000b526:	c7 80 c0 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf940],0x0
c000b530:	c7 80 c0 f6 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0940],0x0
c000b53a:	eb e2                	jmp    c000b51e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b53c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b53c:	53                   	push   ebx
c000b53d:	83 ec 08             	sub    esp,0x8
c000b540:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b544:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b549:	74 0e                	je     c000b559 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b54b:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000b550:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000b557:	75 37                	jne    c000b590 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b55d:	83 c0 20             	add    eax,0x20
c000b560:	c1 e0 04             	shl    eax,0x4
c000b563:	8d 50 10             	lea    edx,[eax+0x10]
c000b566:	39 98 c0 06 02 c0    	cmp    DWORD PTR [eax-0x3ffdf940],ebx
c000b56c:	74 0c                	je     c000b57a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b56e:	83 c0 04             	add    eax,0x4
c000b571:	39 d0                	cmp    eax,edx
c000b573:	75 f1                	jne    c000b566 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b575:	83 c4 08             	add    esp,0x8
c000b578:	5b                   	pop    ebx
c000b579:	c3                   	ret    
c000b57a:	c7 80 c0 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf940],0x0
c000b584:	c7 80 c0 f6 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0940],0x0
c000b58e:	eb de                	jmp    c000b56e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b590:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b595:	7f 12                	jg     c000b5a9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000b597:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b59b:	31 c0                	xor    eax,eax
c000b59d:	8a 81 60 ef 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe10a0]
c000b5a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5a7:	eb b0                	jmp    c000b559 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b5a9:	83 ec 0c             	sub    esp,0xc
c000b5ac:	68 b5 d6 01 c0       	push   0xc001d6b5
c000b5b1:	e8 b1 3f 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000b5b6:	83 c4 10             	add    esp,0x10
c000b5b9:	eb 9e                	jmp    c000b559 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b5bb <setupINTS()>:
c000b5bb:	31 c0                	xor    eax,eax
c000b5bd:	c7 80 c0 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf940],0x0
c000b5c7:	c7 80 c0 f6 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0940],0x0
c000b5d1:	c7 80 c4 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf93c],0x0
c000b5db:	c7 80 c4 f6 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe093c],0x0
c000b5e5:	c7 80 c8 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf938],0x0
c000b5ef:	c7 80 c8 f6 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0938],0x0
c000b5f9:	c7 80 cc 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf934],0x0
c000b603:	c7 80 cc f6 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0934],0x0
c000b60d:	83 c0 10             	add    eax,0x10
c000b610:	3d 00 10 00 00       	cmp    eax,0x1000
c000b615:	75 a6                	jne    c000b5bd <setupINTS()+0x2>
c000b617:	c3                   	ret    

c000b618 <convertLegacyIRQNumber(int)>:
c000b618:	83 ec 0c             	sub    esp,0xc
c000b61b:	8b 15 a8 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5a8
c000b621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b625:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b62c:	74 0f                	je     c000b63d <convertLegacyIRQNumber(int)+0x25>
c000b62e:	83 f8 0f             	cmp    eax,0xf
c000b631:	7f 0e                	jg     c000b641 <convertLegacyIRQNumber(int)+0x29>
c000b633:	31 c9                	xor    ecx,ecx
c000b635:	8a 88 60 ef 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe10a0]
c000b63b:	89 c8                	mov    eax,ecx
c000b63d:	83 c4 0c             	add    esp,0xc
c000b640:	c3                   	ret    
c000b641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b645:	83 ec 0c             	sub    esp,0xc
c000b648:	68 c4 d6 01 c0       	push   0xc001d6c4
c000b64d:	e8 15 3f 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000b652:	83 c4 10             	add    esp,0x10
c000b655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b659:	83 c4 0c             	add    esp,0xc
c000b65c:	c3                   	ret    
c000b65d:	90                   	nop

c000b65e <startGUI(void*)>:
c000b65e:	55                   	push   ebp
c000b65f:	89 e5                	mov    ebp,esp
c000b661:	53                   	push   ebx
c000b662:	83 ec 04             	sub    esp,0x4
c000b665:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000b66a:	48                   	dec    eax
c000b66b:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000b670:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000b675:	85 c0                	test   eax,eax
c000b677:	75 01                	jne    c000b67a <startGUI(void*)+0x1c>
c000b679:	fb                   	sti    
c000b67a:	8b 1d a8 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5a8
c000b680:	83 ec 08             	sub    esp,0x8
c000b683:	6a 01                	push   0x1
c000b685:	68 21 d7 01 c0       	push   0xc001d721
c000b68a:	e8 c5 69 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	83 ec 08             	sub    esp,0x8
c000b695:	53                   	push   ebx
c000b696:	50                   	push   eax
c000b697:	e8 e9 6b 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	8b 1d a8 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5a8
c000b6a5:	83 ec 08             	sub    esp,0x8
c000b6a8:	6a 01                	push   0x1
c000b6aa:	68 3b d7 01 c0       	push   0xc001d73b
c000b6af:	e8 a0 69 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000b6b4:	83 c4 10             	add    esp,0x10
c000b6b7:	83 ec 08             	sub    esp,0x8
c000b6ba:	53                   	push   ebx
c000b6bb:	50                   	push   eax
c000b6bc:	e8 c4 6b 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000b6c1:	83 c4 10             	add    esp,0x10
c000b6c4:	90                   	nop
c000b6c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b6c8:	c9                   	leave  
c000b6c9:	c3                   	ret    

c000b6ca <startGUIVESA(void*)>:
c000b6ca:	55                   	push   ebp
c000b6cb:	89 e5                	mov    ebp,esp
c000b6cd:	53                   	push   ebx
c000b6ce:	83 ec 04             	sub    esp,0x4
c000b6d1:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000b6d6:	48                   	dec    eax
c000b6d7:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000b6dc:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000b6e1:	85 c0                	test   eax,eax
c000b6e3:	75 01                	jne    c000b6e6 <startGUIVESA(void*)+0x1c>
c000b6e5:	fb                   	sti    
c000b6e6:	8b 1d a8 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5a8
c000b6ec:	83 ec 08             	sub    esp,0x8
c000b6ef:	6a 01                	push   0x1
c000b6f1:	68 59 d7 01 c0       	push   0xc001d759
c000b6f6:	e8 59 69 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000b6fb:	83 c4 10             	add    esp,0x10
c000b6fe:	83 ec 08             	sub    esp,0x8
c000b701:	53                   	push   ebx
c000b702:	50                   	push   eax
c000b703:	e8 7d 6b 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	8b 1d a8 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5a8
c000b711:	83 ec 08             	sub    esp,0x8
c000b714:	6a 01                	push   0x1
c000b716:	68 3b d7 01 c0       	push   0xc001d73b
c000b71b:	e8 34 69 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000b720:	83 c4 10             	add    esp,0x10
c000b723:	83 ec 08             	sub    esp,0x8
c000b726:	53                   	push   ebx
c000b727:	50                   	push   eax
c000b728:	e8 58 6b 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	90                   	nop
c000b731:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b734:	c9                   	leave  
c000b735:	c3                   	ret    

c000b736 <sendKeyToTerminal(unsigned char)>:
c000b736:	55                   	push   ebp
c000b737:	89 e5                	mov    ebp,esp
c000b739:	83 ec 28             	sub    esp,0x28
c000b73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b73f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b742:	8b 15 f4 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5f4
c000b748:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000b74b:	25 ff 00 00 00       	and    eax,0xff
c000b750:	83 ec 08             	sub    esp,0x8
c000b753:	50                   	push   eax
c000b754:	52                   	push   edx
c000b755:	e8 76 c8 ff ff       	call   c0007fd0 <VgaText::receiveKey(unsigned char)>
c000b75a:	83 c4 10             	add    esp,0x10
c000b75d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b761:	0f 85 8f 00 00 00    	jne    c000b7f6 <sendKeyToTerminal(unsigned char)+0xc0>
c000b767:	fa                   	cli    
c000b768:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000b76d:	40                   	inc    eax
c000b76e:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000b773:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000b778:	40                   	inc    eax
c000b779:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c000b77e:	a1 c0 16 02 c0       	mov    eax,ds:0xc00216c0
c000b783:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b786:	c7 05 c0 16 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00216c0,0x0
c000b790:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b794:	74 1f                	je     c000b7b5 <sendKeyToTerminal(unsigned char)+0x7f>
c000b796:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b799:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b79c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b79f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b7a5:	83 ec 0c             	sub    esp,0xc
c000b7a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7ab:	e8 5c 77 00 00       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c000b7b0:	83 c4 10             	add    esp,0x10
c000b7b3:	eb db                	jmp    c000b790 <sendKeyToTerminal(unsigned char)+0x5a>
c000b7b5:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000b7ba:	48                   	dec    eax
c000b7bb:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c000b7c0:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000b7c5:	85 c0                	test   eax,eax
c000b7c7:	75 18                	jne    c000b7e1 <sendKeyToTerminal(unsigned char)+0xab>
c000b7c9:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c000b7ce:	85 c0                	test   eax,eax
c000b7d0:	74 0f                	je     c000b7e1 <sendKeyToTerminal(unsigned char)+0xab>
c000b7d2:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c000b7dc:	e8 67 72 00 00       	call   c0012a48 <schedule()>
c000b7e1:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000b7e6:	48                   	dec    eax
c000b7e7:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000b7ec:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000b7f1:	85 c0                	test   eax,eax
c000b7f3:	75 01                	jne    c000b7f6 <sendKeyToTerminal(unsigned char)+0xc0>
c000b7f5:	fb                   	sti    
c000b7f6:	90                   	nop
c000b7f7:	c9                   	leave  
c000b7f8:	c3                   	ret    

c000b7f9 <sendKeyboardToken(KeyboardToken)>:
c000b7f9:	55                   	push   ebp
c000b7fa:	89 e5                	mov    ebp,esp
c000b7fc:	83 ec 18             	sub    esp,0x18
c000b7ff:	e8 39 40 00 00       	call   c000f83d <Krnl::userIOReceived()>
c000b804:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b80a:	25 ff ff 00 00       	and    eax,0xffff
c000b80f:	83 f2 01             	xor    edx,0x1
c000b812:	88 90 e0 16 02 c0    	mov    BYTE PTR [eax-0x3ffde920],dl
c000b818:	a1 c8 16 02 c0       	mov    eax,ds:0xc00216c8
c000b81d:	85 c0                	test   eax,eax
c000b81f:	74 24                	je     c000b845 <sendKeyboardToken(KeyboardToken)+0x4c>
c000b821:	8b 0d c8 16 02 c0    	mov    ecx,DWORD PTR ds:0xc00216c8
c000b827:	83 ec 04             	sub    esp,0x4
c000b82a:	68 e0 16 02 c0       	push   0xc00216e0
c000b82f:	83 ec 08             	sub    esp,0x8
c000b832:	89 e2                	mov    edx,esp
c000b834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b837:	89 02                	mov    DWORD PTR [edx],eax
c000b839:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b83c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b840:	ff d1                	call   ecx
c000b842:	83 c4 10             	add    esp,0x10
c000b845:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b849:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b84c:	a0 e8 1a 02 c0       	mov    al,ds:0xc0021ae8
c000b851:	38 c2                	cmp    dl,al
c000b853:	74 1e                	je     c000b873 <sendKeyboardToken(KeyboardToken)+0x7a>
c000b855:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b858:	a2 e8 1a 02 c0       	mov    ds:0xc0021ae8,al
c000b85d:	a0 e8 1a 02 c0       	mov    al,ds:0xc0021ae8
c000b862:	25 ff 00 00 00       	and    eax,0xff
c000b867:	83 ec 0c             	sub    esp,0xc
c000b86a:	50                   	push   eax
c000b86b:	e8 b2 be ff ff       	call   c0007722 <setTerminalScrollLock(bool)>
c000b870:	83 c4 10             	add    esp,0x10
c000b873:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b876:	84 c0                	test   al,al
c000b878:	0f 84 ae 00 00 00    	je     c000b92c <sendKeyboardToken(KeyboardToken)+0x133>
c000b87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b881:	66 3d 10 03          	cmp    ax,0x310
c000b885:	75 06                	jne    c000b88d <sendKeyboardToken(KeyboardToken)+0x94>
c000b887:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b890:	66 3d 11 03          	cmp    ax,0x311
c000b894:	75 06                	jne    c000b89c <sendKeyboardToken(KeyboardToken)+0xa3>
c000b896:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b89c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b89f:	66 3d 12 03          	cmp    ax,0x312
c000b8a3:	75 06                	jne    c000b8ab <sendKeyboardToken(KeyboardToken)+0xb2>
c000b8a5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8ae:	66 3d 13 03          	cmp    ax,0x313
c000b8b2:	75 06                	jne    c000b8ba <sendKeyboardToken(KeyboardToken)+0xc1>
c000b8b4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8bd:	66 3d 14 03          	cmp    ax,0x314
c000b8c1:	75 06                	jne    c000b8c9 <sendKeyboardToken(KeyboardToken)+0xd0>
c000b8c3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b8c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8cc:	66 3d 15 03          	cmp    ax,0x315
c000b8d0:	75 06                	jne    c000b8d8 <sendKeyboardToken(KeyboardToken)+0xdf>
c000b8d2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8db:	66 3d 16 03          	cmp    ax,0x316
c000b8df:	75 06                	jne    c000b8e7 <sendKeyboardToken(KeyboardToken)+0xee>
c000b8e1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8ea:	66 3d 17 03          	cmp    ax,0x317
c000b8ee:	75 06                	jne    c000b8f6 <sendKeyboardToken(KeyboardToken)+0xfd>
c000b8f0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8f9:	66 3d 18 03          	cmp    ax,0x318
c000b8fd:	75 06                	jne    c000b905 <sendKeyboardToken(KeyboardToken)+0x10c>
c000b8ff:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b908:	66 3d 19 03          	cmp    ax,0x319
c000b90c:	75 06                	jne    c000b914 <sendKeyboardToken(KeyboardToken)+0x11b>
c000b90e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b917:	66 3d 1a 03          	cmp    ax,0x31a
c000b91b:	0f 85 c9 00 00 00    	jne    c000b9ea <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b921:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b927:	e9 be 00 00 00       	jmp    c000b9ea <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b92f:	66 3d 10 03          	cmp    ax,0x310
c000b933:	75 0a                	jne    c000b93f <sendKeyboardToken(KeyboardToken)+0x146>
c000b935:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b93b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b93f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b942:	66 3d 11 03          	cmp    ax,0x311
c000b946:	75 0a                	jne    c000b952 <sendKeyboardToken(KeyboardToken)+0x159>
c000b948:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b94e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b955:	66 3d 12 03          	cmp    ax,0x312
c000b959:	75 0a                	jne    c000b965 <sendKeyboardToken(KeyboardToken)+0x16c>
c000b95b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b961:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b968:	66 3d 13 03          	cmp    ax,0x313
c000b96c:	75 0a                	jne    c000b978 <sendKeyboardToken(KeyboardToken)+0x17f>
c000b96e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b974:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b97b:	66 3d 14 03          	cmp    ax,0x314
c000b97f:	75 0a                	jne    c000b98b <sendKeyboardToken(KeyboardToken)+0x192>
c000b981:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b987:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b98b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b98e:	66 3d 15 03          	cmp    ax,0x315
c000b992:	75 0a                	jne    c000b99e <sendKeyboardToken(KeyboardToken)+0x1a5>
c000b994:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b99a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9a1:	66 3d 16 03          	cmp    ax,0x316
c000b9a5:	75 0a                	jne    c000b9b1 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000b9a7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b9ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9b4:	66 3d 17 03          	cmp    ax,0x317
c000b9b8:	75 0a                	jne    c000b9c4 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000b9ba:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b9c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9c7:	66 3d 18 03          	cmp    ax,0x318
c000b9cb:	75 0a                	jne    c000b9d7 <sendKeyboardToken(KeyboardToken)+0x1de>
c000b9cd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b9d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9da:	66 3d 19 03          	cmp    ax,0x319
c000b9de:	75 0a                	jne    c000b9ea <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b9e0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b9e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9ed:	66 3d 00 02          	cmp    ax,0x200
c000b9f1:	75 2c                	jne    c000ba1f <sendKeyboardToken(KeyboardToken)+0x226>
c000b9f3:	a0 e0 1a 02 c0       	mov    al,ds:0xc0021ae0
c000b9f8:	83 f0 01             	xor    eax,0x1
c000b9fb:	84 c0                	test   al,al
c000b9fd:	74 20                	je     c000ba1f <sendKeyboardToken(KeyboardToken)+0x226>
c000b9ff:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c000ba04:	6a 01                	push   0x1
c000ba06:	6a 00                	push   0x0
c000ba08:	68 5e b6 00 c0       	push   0xc000b65e
c000ba0d:	50                   	push   eax
c000ba0e:	e8 15 6e 00 00       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	c6 05 e0 1a 02 c0 01 	mov    BYTE PTR ds:0xc0021ae0,0x1
c000ba1d:	eb 33                	jmp    c000ba52 <sendKeyboardToken(KeyboardToken)+0x259>
c000ba1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba22:	66 3d 01 02          	cmp    ax,0x201
c000ba26:	75 2a                	jne    c000ba52 <sendKeyboardToken(KeyboardToken)+0x259>
c000ba28:	a0 e0 1a 02 c0       	mov    al,ds:0xc0021ae0
c000ba2d:	83 f0 01             	xor    eax,0x1
c000ba30:	84 c0                	test   al,al
c000ba32:	74 1e                	je     c000ba52 <sendKeyboardToken(KeyboardToken)+0x259>
c000ba34:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c000ba39:	6a 01                	push   0x1
c000ba3b:	6a 00                	push   0x0
c000ba3d:	68 ca b6 00 c0       	push   0xc000b6ca
c000ba42:	50                   	push   eax
c000ba43:	e8 e0 6d 00 00       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c000ba48:	83 c4 10             	add    esp,0x10
c000ba4b:	c6 05 e0 1a 02 c0 01 	mov    BYTE PTR ds:0xc0021ae0,0x1
c000ba52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba55:	66 3d 1d 03          	cmp    ax,0x31d
c000ba59:	75 06                	jne    c000ba61 <sendKeyboardToken(KeyboardToken)+0x268>
c000ba5b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ba61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba64:	66 3d 1c 03          	cmp    ax,0x31c
c000ba68:	75 06                	jne    c000ba70 <sendKeyboardToken(KeyboardToken)+0x277>
c000ba6a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ba70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba73:	66 3d 1b 03          	cmp    ax,0x31b
c000ba77:	75 06                	jne    c000ba7f <sendKeyboardToken(KeyboardToken)+0x286>
c000ba79:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ba7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba82:	66 3d 1e 03          	cmp    ax,0x31e
c000ba86:	75 06                	jne    c000ba8e <sendKeyboardToken(KeyboardToken)+0x295>
c000ba88:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ba8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba91:	66 3d 1f 03          	cmp    ax,0x31f
c000ba95:	75 06                	jne    c000ba9d <sendKeyboardToken(KeyboardToken)+0x2a4>
c000ba97:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ba9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000baa0:	66 3d 1a 03          	cmp    ax,0x31a
c000baa4:	75 06                	jne    c000baac <sendKeyboardToken(KeyboardToken)+0x2b3>
c000baa6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000baac:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000bab0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bab3:	83 f0 01             	xor    eax,0x1
c000bab6:	84 c0                	test   al,al
c000bab8:	74 7b                	je     c000bb35 <sendKeyboardToken(KeyboardToken)+0x33c>
c000baba:	a0 e1 17 02 c0       	mov    al,ds:0xc00217e1
c000babf:	84 c0                	test   al,al
c000bac1:	74 43                	je     c000bb06 <sendKeyboardToken(KeyboardToken)+0x30d>
c000bac3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bac7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000bacb:	74 2d                	je     c000bafa <sendKeyboardToken(KeyboardToken)+0x301>
c000bacd:	8b 15 e4 1a 02 c0    	mov    edx,DWORD PTR ds:0xc0021ae4
c000bad3:	89 d0                	mov    eax,edx
c000bad5:	c1 e0 02             	shl    eax,0x2
c000bad8:	01 d0                	add    eax,edx
c000bada:	01 c0                	add    eax,eax
c000badc:	a3 e4 1a 02 c0       	mov    ds:0xc0021ae4,eax
c000bae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bae4:	25 ff ff 00 00       	and    eax,0xffff
c000bae9:	8d 50 d0             	lea    edx,[eax-0x30]
c000baec:	a1 e4 1a 02 c0       	mov    eax,ds:0xc0021ae4
c000baf1:	01 d0                	add    eax,edx
c000baf3:	a3 e4 1a 02 c0       	mov    ds:0xc0021ae4,eax
c000baf8:	eb 71                	jmp    c000bb6b <sendKeyboardToken(KeyboardToken)+0x372>
c000bafa:	c7 05 e4 1a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ae4,0x0
c000bb04:	eb 65                	jmp    c000bb6b <sendKeyboardToken(KeyboardToken)+0x372>
c000bb06:	a1 e4 1a 02 c0       	mov    eax,ds:0xc0021ae4
c000bb0b:	85 c0                	test   eax,eax
c000bb0d:	74 1a                	je     c000bb29 <sendKeyboardToken(KeyboardToken)+0x330>
c000bb0f:	a1 e4 1a 02 c0       	mov    eax,ds:0xc0021ae4
c000bb14:	25 ff 00 00 00       	and    eax,0xff
c000bb19:	83 ec 0c             	sub    esp,0xc
c000bb1c:	50                   	push   eax
c000bb1d:	e8 14 fc ff ff       	call   c000b736 <sendKeyToTerminal(unsigned char)>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bb29:	c7 05 e4 1a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ae4,0x0
c000bb33:	eb 36                	jmp    c000bb6b <sendKeyboardToken(KeyboardToken)+0x372>
c000bb35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb38:	66 3d 01 01          	cmp    ax,0x101
c000bb3c:	75 2d                	jne    c000bb6b <sendKeyboardToken(KeyboardToken)+0x372>
c000bb3e:	a1 e4 1a 02 c0       	mov    eax,ds:0xc0021ae4
c000bb43:	85 c0                	test   eax,eax
c000bb45:	74 1a                	je     c000bb61 <sendKeyboardToken(KeyboardToken)+0x368>
c000bb47:	a1 e4 1a 02 c0       	mov    eax,ds:0xc0021ae4
c000bb4c:	25 ff 00 00 00       	and    eax,0xff
c000bb51:	83 ec 0c             	sub    esp,0xc
c000bb54:	50                   	push   eax
c000bb55:	e8 dc fb ff ff       	call   c000b736 <sendKeyToTerminal(unsigned char)>
c000bb5a:	83 c4 10             	add    esp,0x10
c000bb5d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bb61:	c7 05 e4 1a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ae4,0x0
c000bb6b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bb6e:	83 f0 01             	xor    eax,0x1
c000bb71:	84 c0                	test   al,al
c000bb73:	74 4e                	je     c000bbc3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb75:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb78:	83 f0 01             	xor    eax,0x1
c000bb7b:	84 c0                	test   al,al
c000bb7d:	74 44                	je     c000bbc3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb7f:	a0 e0 17 02 c0       	mov    al,ds:0xc00217e0
c000bb84:	83 f0 01             	xor    eax,0x1
c000bb87:	84 c0                	test   al,al
c000bb89:	74 38                	je     c000bbc3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb8e:	66 83 f8 1f          	cmp    ax,0x1f
c000bb92:	76 09                	jbe    c000bb9d <sendKeyboardToken(KeyboardToken)+0x3a4>
c000bb94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb97:	66 83 f8 7e          	cmp    ax,0x7e
c000bb9b:	76 12                	jbe    c000bbaf <sendKeyboardToken(KeyboardToken)+0x3b6>
c000bb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bba0:	66 83 f8 0a          	cmp    ax,0xa
c000bba4:	74 09                	je     c000bbaf <sendKeyboardToken(KeyboardToken)+0x3b6>
c000bba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bba9:	66 83 f8 08          	cmp    ax,0x8
c000bbad:	75 14                	jne    c000bbc3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbb2:	25 ff 00 00 00       	and    eax,0xff
c000bbb7:	83 ec 0c             	sub    esp,0xc
c000bbba:	50                   	push   eax
c000bbbb:	e8 76 fb ff ff       	call   c000b736 <sendKeyToTerminal(unsigned char)>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bbc6:	83 f0 01             	xor    eax,0x1
c000bbc9:	84 c0                	test   al,al
c000bbcb:	74 51                	je     c000bc1e <sendKeyboardToken(KeyboardToken)+0x425>
c000bbcd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bbd0:	83 f0 01             	xor    eax,0x1
c000bbd3:	84 c0                	test   al,al
c000bbd5:	74 47                	je     c000bc1e <sendKeyboardToken(KeyboardToken)+0x425>
c000bbd7:	a0 e0 17 02 c0       	mov    al,ds:0xc00217e0
c000bbdc:	84 c0                	test   al,al
c000bbde:	74 3e                	je     c000bc1e <sendKeyboardToken(KeyboardToken)+0x425>
c000bbe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbe3:	66 83 f8 3f          	cmp    ax,0x3f
c000bbe7:	76 35                	jbe    c000bc1e <sendKeyboardToken(KeyboardToken)+0x425>
c000bbe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbec:	66 83 f8 7f          	cmp    ax,0x7f
c000bbf0:	77 2c                	ja     c000bc1e <sendKeyboardToken(KeyboardToken)+0x425>
c000bbf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbf5:	88 c2                	mov    dl,al
c000bbf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbfa:	66 83 f8 5f          	cmp    ax,0x5f
c000bbfe:	76 04                	jbe    c000bc04 <sendKeyboardToken(KeyboardToken)+0x40b>
c000bc00:	b0 20                	mov    al,0x20
c000bc02:	eb 02                	jmp    c000bc06 <sendKeyboardToken(KeyboardToken)+0x40d>
c000bc04:	b0 00                	mov    al,0x0
c000bc06:	29 c2                	sub    edx,eax
c000bc08:	88 d0                	mov    al,dl
c000bc0a:	83 e8 40             	sub    eax,0x40
c000bc0d:	25 ff 00 00 00       	and    eax,0xff
c000bc12:	83 ec 0c             	sub    esp,0xc
c000bc15:	50                   	push   eax
c000bc16:	e8 1b fb ff ff       	call   c000b736 <sendKeyToTerminal(unsigned char)>
c000bc1b:	83 c4 10             	add    esp,0x10
c000bc1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc21:	66 3d 00 03          	cmp    ax,0x300
c000bc25:	75 0f                	jne    c000bc36 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bc27:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bc2a:	83 f0 01             	xor    eax,0x1
c000bc2d:	84 c0                	test   al,al
c000bc2f:	74 05                	je     c000bc36 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bc31:	e8 ed ba ff ff       	call   c0007723 <doTerminalCycle()>
c000bc36:	90                   	nop
c000bc37:	c9                   	leave  
c000bc38:	c3                   	ret    

c000bc39 <clearInternalKeybuffer(VgaText*)>:
c000bc39:	55                   	push   ebp
c000bc3a:	89 e5                	mov    ebp,esp
c000bc3c:	83 ec 08             	sub    esp,0x8
c000bc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc42:	05 b2 00 00 00       	add    eax,0xb2
c000bc47:	83 ec 0c             	sub    esp,0xc
c000bc4a:	50                   	push   eax
c000bc4b:	e8 10 49 ff ff       	call   c0000560 <strlen>
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc56:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc5c:	83 ec 04             	sub    esp,0x4
c000bc5f:	50                   	push   eax
c000bc60:	6a 00                	push   0x0
c000bc62:	52                   	push   edx
c000bc63:	e8 88 48 ff ff       	call   c00004f0 <memset>
c000bc68:	83 c4 10             	add    esp,0x10
c000bc6b:	90                   	nop
c000bc6c:	c9                   	leave  
c000bc6d:	c3                   	ret    

c000bc6e <readKeyboard(VgaText*, char*, unsigned long)>:
c000bc6e:	55                   	push   ebp
c000bc6f:	89 e5                	mov    ebp,esp
c000bc71:	83 ec 18             	sub    esp,0x18
c000bc74:	a1 c8 16 02 c0       	mov    eax,ds:0xc00216c8
c000bc79:	85 c0                	test   eax,eax
c000bc7b:	74 2a                	je     c000bca7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bc7d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bc83:	8b 0d c8 16 02 c0    	mov    ecx,DWORD PTR ds:0xc00216c8
c000bc89:	83 ec 04             	sub    esp,0x4
c000bc8c:	68 e0 16 02 c0       	push   0xc00216e0
c000bc91:	83 ec 08             	sub    esp,0x8
c000bc94:	89 e2                	mov    edx,esp
c000bc96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bc99:	89 02                	mov    DWORD PTR [edx],eax
c000bc9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bc9e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bca2:	ff d1                	call   ecx
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	fb                   	sti    
c000bca8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bcaf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bcb3:	0f 84 a1 00 00 00    	je     c000bd5a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bcb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bcbc:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bcc2:	84 c0                	test   al,al
c000bcc4:	75 28                	jne    c000bcee <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bcc6:	fa                   	cli    
c000bcc7:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000bccc:	40                   	inc    eax
c000bccd:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000bcd2:	e8 71 6d 00 00       	call   c0012a48 <schedule()>
c000bcd7:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000bcdc:	48                   	dec    eax
c000bcdd:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000bce2:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000bce7:	85 c0                	test   eax,eax
c000bce9:	75 ce                	jne    c000bcb9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bceb:	fb                   	sti    
c000bcec:	eb cb                	jmp    c000bcb9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bcee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bcf1:	8d 50 01             	lea    edx,[eax+0x1]
c000bcf4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bcf7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bcfa:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bd00:	88 10                	mov    BYTE PTR [eax],dl
c000bd02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bd05:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bd0b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bd0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bd11:	05 b2 00 00 00       	add    eax,0xb2
c000bd16:	83 ec 0c             	sub    esp,0xc
c000bd19:	50                   	push   eax
c000bd1a:	e8 41 48 ff ff       	call   c0000560 <strlen>
c000bd1f:	83 c4 10             	add    esp,0x10
c000bd22:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bd25:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bd2b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bd2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bd31:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bd37:	83 ec 04             	sub    esp,0x4
c000bd3a:	50                   	push   eax
c000bd3b:	51                   	push   ecx
c000bd3c:	52                   	push   edx
c000bd3d:	e8 be 46 ff ff       	call   c0000400 <memmove>
c000bd42:	83 c4 10             	add    esp,0x10
c000bd45:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bd48:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bd4b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bd4f:	0f 85 5a ff ff ff    	jne    c000bcaf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000bd55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bd58:	eb 03                	jmp    c000bd5d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bd5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bd5d:	c9                   	leave  
c000bd5e:	c3                   	ret    
c000bd5f:	90                   	nop

c000bd60 <Keyboard::Keyboard(char const*)>:
c000bd60:	83 ec 0c             	sub    esp,0xc
c000bd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd67:	83 ec 08             	sub    esp,0x8
c000bd6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd6e:	50                   	push   eax
c000bd6f:	e8 78 f2 ff ff       	call   c000afec <Device::Device(char const*)>
c000bd74:	83 c4 10             	add    esp,0x10
c000bd77:	ba 7c d7 01 c0       	mov    edx,0xc001d77c
c000bd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd80:	89 10                	mov    DWORD PTR [eax],edx
c000bd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd86:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bd90:	c6 05 c4 16 02 c0 01 	mov    BYTE PTR ds:0xc00216c4,0x1
c000bd97:	90                   	nop
c000bd98:	83 c4 0c             	add    esp,0xc
c000bd9b:	c3                   	ret    

c000bd9c <Keyboard::~Keyboard()>:
c000bd9c:	83 ec 0c             	sub    esp,0xc
c000bd9f:	ba 7c d7 01 c0       	mov    edx,0xc001d77c
c000bda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda8:	89 10                	mov    DWORD PTR [eax],edx
c000bdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdae:	83 ec 0c             	sub    esp,0xc
c000bdb1:	50                   	push   eax
c000bdb2:	e8 9f ef ff ff       	call   c000ad56 <Device::~Device()>
c000bdb7:	83 c4 10             	add    esp,0x10
c000bdba:	90                   	nop
c000bdbb:	83 c4 0c             	add    esp,0xc
c000bdbe:	c3                   	ret    
c000bdbf:	90                   	nop

c000bdc0 <Keyboard::~Keyboard()>:
c000bdc0:	83 ec 0c             	sub    esp,0xc
c000bdc3:	83 ec 0c             	sub    esp,0xc
c000bdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdca:	e8 cd ff ff ff       	call   c000bd9c <Keyboard::~Keyboard()>
c000bdcf:	83 c4 10             	add    esp,0x10
c000bdd2:	83 ec 08             	sub    esp,0x8
c000bdd5:	68 5c 01 00 00       	push   0x15c
c000bdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdde:	e8 3b db ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	83 c4 0c             	add    esp,0xc
c000bde9:	c3                   	ret    

c000bdea <LogicalDisk::close(int, int, void*)>:
c000bdea:	83 c8 ff             	or     eax,0xffffffff
c000bded:	c3                   	ret    

c000bdee <LogicalDisk::~LogicalDisk()>:
c000bdee:	83 ec 0c             	sub    esp,0xc
c000bdf1:	ba f4 d7 01 c0       	mov    edx,0xc001d7f4
c000bdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdfa:	89 10                	mov    DWORD PTR [eax],edx
c000bdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be00:	83 ec 0c             	sub    esp,0xc
c000be03:	50                   	push   eax
c000be04:	e8 4d ef ff ff       	call   c000ad56 <Device::~Device()>
c000be09:	83 c4 10             	add    esp,0x10
c000be0c:	90                   	nop
c000be0d:	83 c4 0c             	add    esp,0xc
c000be10:	c3                   	ret    
c000be11:	90                   	nop

c000be12 <LogicalDisk::~LogicalDisk()>:
c000be12:	83 ec 0c             	sub    esp,0xc
c000be15:	83 ec 0c             	sub    esp,0xc
c000be18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be1c:	e8 cd ff ff ff       	call   c000bdee <LogicalDisk::~LogicalDisk()>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	83 ec 08             	sub    esp,0x8
c000be27:	68 74 01 00 00       	push   0x174
c000be2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be30:	e8 e9 da ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	83 c4 0c             	add    esp,0xc
c000be3b:	c3                   	ret    

c000be3c <LogicalDisk::open(int, int, void*)>:
c000be3c:	83 ec 18             	sub    esp,0x18
c000be3f:	68 a8 d7 01 c0       	push   0xc001d7a8
c000be44:	e8 1e 37 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000be49:	83 c8 ff             	or     eax,0xffffffff
c000be4c:	83 c4 1c             	add    esp,0x1c
c000be4f:	c3                   	ret    

c000be50 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000be50:	53                   	push   ebx
c000be51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be5d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000be63:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000be69:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000be6f:	77 10                	ja     c000be81 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000be71:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000be77:	89 d3                	mov    ebx,edx
c000be79:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000be7f:	72 05                	jb     c000be86 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000be81:	83 c8 ff             	or     eax,0xffffffff
c000be84:	89 c2                	mov    edx,eax
c000be86:	5b                   	pop    ebx
c000be87:	c3                   	ret    

c000be88 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000be88:	56                   	push   esi
c000be89:	83 c8 ff             	or     eax,0xffffffff
c000be8c:	53                   	push   ebx
c000be8d:	89 c2                	mov    edx,eax
c000be8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be93:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bea1:	77 27                	ja     c000beca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bea3:	89 d8                	mov    eax,ebx
c000bea5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000beab:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000beb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beb6:	89 c2                	mov    edx,eax
c000beb8:	73 10                	jae    c000beca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000beba:	89 c8                	mov    eax,ecx
c000bebc:	89 da                	mov    edx,ebx
c000bebe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bec4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000beca:	5b                   	pop    ebx
c000becb:	5e                   	pop    esi
c000becc:	c3                   	ret    
c000becd:	90                   	nop

c000bece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bece:	83 ec 1c             	sub    esp,0x1c
c000bed1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bed5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bedd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bee1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bee5:	89 04 24             	mov    DWORD PTR [esp],eax
c000bee8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000beec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bef4:	83 ec 08             	sub    esp,0x8
c000bef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befb:	50                   	push   eax
c000befc:	e8 eb f0 ff ff       	call   c000afec <Device::Device(char const*)>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	ba f4 d7 01 c0       	mov    edx,0xc001d7f4
c000bf09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf0d:	89 10                	mov    DWORD PTR [eax],edx
c000bf0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf13:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bf1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf1e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bf25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf29:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000bf33:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bf37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf3f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000bf45:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000bf4b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bf4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bf52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bf56:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000bf5c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000bf62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf6a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000bf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf74:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bf7e:	90                   	nop
c000bf7f:	83 c4 1c             	add    esp,0x1c
c000bf82:	c3                   	ret    
c000bf83:	90                   	nop

c000bf84 <LogicalDisk::assignDriveLetter()>:
c000bf84:	55                   	push   ebp
c000bf85:	57                   	push   edi
c000bf86:	56                   	push   esi
c000bf87:	53                   	push   ebx
c000bf88:	83 ec 14             	sub    esp,0x14
c000bf8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf8f:	8b 3d 00 1b 02 c0    	mov    edi,DWORD PTR ds:0xc0021b00
c000bf95:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000bf9b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000bf9f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000bfa5:	8b 3d 04 1b 02 c0    	mov    edi,DWORD PTR ds:0xc0021b04
c000bfab:	3c 01                	cmp    al,0x1
c000bfad:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000bfb1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bfb5:	19 c0                	sbb    eax,eax
c000bfb7:	83 e0 02             	and    eax,0x2
c000bfba:	83 c0 41             	add    eax,0x41
c000bfbd:	0f be e8             	movsx  ebp,al
c000bfc0:	3c 43                	cmp    al,0x43
c000bfc2:	75 10                	jne    c000bfd4 <LogicalDisk::assignDriveLetter()+0x50>
c000bfc4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bfcb:	75 5d                	jne    c000c02a <LogicalDisk::assignDriveLetter()+0xa6>
c000bfcd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000bfd2:	75 56                	jne    c000c02a <LogicalDisk::assignDriveLetter()+0xa6>
c000bfd4:	8d 75 bf             	lea    esi,[ebp-0x41]
c000bfd7:	ba 01 00 00 00       	mov    edx,0x1
c000bfdc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bfe0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bfe4:	d3 e2                	shl    edx,cl
c000bfe6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bfea:	89 d7                	mov    edi,edx
c000bfec:	89 d6                	mov    esi,edx
c000bfee:	c1 ff 1f             	sar    edi,0x1f
c000bff1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000bff5:	21 f9                	and    ecx,edi
c000bff7:	09 d1                	or     ecx,edx
c000bff9:	75 2f                	jne    c000c02a <LogicalDisk::assignDriveLetter()+0xa6>
c000bffb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000bfff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c003:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000c009:	09 f2                	or     edx,esi
c000c00b:	89 15 00 1b 02 c0    	mov    DWORD PTR ds:0xc0021b00,edx
c000c011:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c015:	09 fa                	or     edx,edi
c000c017:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c01b:	89 15 04 1b 02 c0    	mov    DWORD PTR ds:0xc0021b04,edx
c000c021:	89 1c bd 20 1b 02 c0 	mov    DWORD PTR [edi*4-0x3ffde4e0],ebx
c000c028:	eb 08                	jmp    c000c032 <LogicalDisk::assignDriveLetter()+0xae>
c000c02a:	45                   	inc    ebp
c000c02b:	40                   	inc    eax
c000c02c:	3c 5b                	cmp    al,0x5b
c000c02e:	75 90                	jne    c000bfc0 <LogicalDisk::assignDriveLetter()+0x3c>
c000c030:	31 c0                	xor    eax,eax
c000c032:	83 c4 14             	add    esp,0x14
c000c035:	5b                   	pop    ebx
c000c036:	5e                   	pop    esi
c000c037:	5f                   	pop    edi
c000c038:	5d                   	pop    ebp
c000c039:	c3                   	ret    

c000c03a <LogicalDisk::mount()>:
c000c03a:	56                   	push   esi
c000c03b:	53                   	push   ebx
c000c03c:	53                   	push   ebx
c000c03d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c041:	8b 1d 98 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f698
c000c047:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000c051:	85 db                	test   ebx,ebx
c000c053:	74 27                	je     c000c07c <LogicalDisk::mount()+0x42>
c000c055:	51                   	push   ecx
c000c056:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000c05d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c05f:	83 e8 41             	sub    eax,0x41
c000c062:	50                   	push   eax
c000c063:	56                   	push   esi
c000c064:	53                   	push   ebx
c000c065:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	84 c0                	test   al,al
c000c06d:	74 08                	je     c000c077 <LogicalDisk::mount()+0x3d>
c000c06f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000c075:	eb 07                	jmp    c000c07e <LogicalDisk::mount()+0x44>
c000c077:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000c07a:	eb d5                	jmp    c000c051 <LogicalDisk::mount()+0x17>
c000c07c:	31 c0                	xor    eax,eax
c000c07e:	5a                   	pop    edx
c000c07f:	5b                   	pop    ebx
c000c080:	5e                   	pop    esi
c000c081:	c3                   	ret    

c000c082 <LogicalDisk::unmount()>:
c000c082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c086:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000c090:	c3                   	ret    
c000c091:	90                   	nop

c000c092 <LogicalDisk::eject()>:
c000c092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c096:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c09c:	8b 10                	mov    edx,DWORD PTR [eax]
c000c09e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0a2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000c0a5:	90                   	nop

c000c0a6 <LogicalDisk::unassignDriveLetter()>:
c000c0a6:	57                   	push   edi
c000c0a7:	56                   	push   esi
c000c0a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c0ac:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000c0b3:	84 c9                	test   cl,cl
c000c0b5:	75 0f                	jne    c000c0c6 <LogicalDisk::unassignDriveLetter()+0x20>
c000c0b7:	c7 44 24 0c cc d7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d7cc
c000c0bf:	5e                   	pop    esi
c000c0c0:	5f                   	pop    edi
c000c0c1:	e9 a1 34 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c000c0c6:	83 e9 41             	sub    ecx,0x41
c000c0c9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000c0d0:	b8 01 00 00 00       	mov    eax,0x1
c000c0d5:	c7 04 8d 20 1b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffde4e0],0x0
c000c0e0:	d3 e0                	shl    eax,cl
c000c0e2:	89 c7                	mov    edi,eax
c000c0e4:	f7 d0                	not    eax
c000c0e6:	c1 ff 1f             	sar    edi,0x1f
c000c0e9:	21 05 00 1b 02 c0    	and    DWORD PTR ds:0xc0021b00,eax
c000c0ef:	89 fe                	mov    esi,edi
c000c0f1:	f7 d6                	not    esi
c000c0f3:	21 35 04 1b 02 c0    	and    DWORD PTR ds:0xc0021b04,esi
c000c0f9:	5e                   	pop    esi
c000c0fa:	5f                   	pop    edi
c000c0fb:	c3                   	ret    

c000c0fc <LogicalDisk::read(unsigned long long, int, void*)>:
c000c0fc:	57                   	push   edi
c000c0fd:	56                   	push   esi
c000c0fe:	53                   	push   ebx
c000c0ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c103:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c107:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c10b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c10f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c115:	77 41                	ja     c000c158 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000c117:	99                   	cdq    
c000c118:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c11e:	01 c8                	add    eax,ecx
c000c120:	11 da                	adc    edx,ebx
c000c122:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c128:	19 d7                	sbb    edi,edx
c000c12a:	72 33                	jb     c000c15f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000c12c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c132:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c138:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c13c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c140:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c146:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c14c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c150:	5b                   	pop    ebx
c000c151:	5e                   	pop    esi
c000c152:	5f                   	pop    edi
c000c153:	e9 32 0a 00 00       	jmp    c000cb8a <VCache::read(unsigned long long, int, void*)>
c000c158:	b8 05 00 00 00       	mov    eax,0x5
c000c15d:	eb 05                	jmp    c000c164 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000c15f:	b8 07 00 00 00       	mov    eax,0x7
c000c164:	5b                   	pop    ebx
c000c165:	5e                   	pop    esi
c000c166:	5f                   	pop    edi
c000c167:	c3                   	ret    

c000c168 <LogicalDisk::write(unsigned long long, int, void*)>:
c000c168:	57                   	push   edi
c000c169:	56                   	push   esi
c000c16a:	53                   	push   ebx
c000c16b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c16f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c173:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c17b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c181:	77 41                	ja     c000c1c4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c183:	99                   	cdq    
c000c184:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c18a:	01 c8                	add    eax,ecx
c000c18c:	11 da                	adc    edx,ebx
c000c18e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c194:	19 d7                	sbb    edi,edx
c000c196:	72 33                	jb     c000c1cb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c198:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c19e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c1a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c1a8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c1ac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c1b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c1b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1bc:	5b                   	pop    ebx
c000c1bd:	5e                   	pop    esi
c000c1be:	5f                   	pop    edi
c000c1bf:	e9 cc 08 00 00       	jmp    c000ca90 <VCache::write(unsigned long long, int, void*)>
c000c1c4:	b8 05 00 00 00       	mov    eax,0x5
c000c1c9:	eb 05                	jmp    c000c1d0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c1cb:	b8 07 00 00 00       	mov    eax,0x7
c000c1d0:	5b                   	pop    ebx
c000c1d1:	5e                   	pop    esi
c000c1d2:	5f                   	pop    edi
c000c1d3:	c3                   	ret    

c000c1d4 <Mouse::Mouse(char const*)>:
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1db:	83 ec 08             	sub    esp,0x8
c000c1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1e2:	50                   	push   eax
c000c1e3:	e8 04 ee ff ff       	call   c000afec <Device::Device(char const*)>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	ba 20 d8 01 c0       	mov    edx,0xc001d820
c000c1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f4:	89 10                	mov    DWORD PTR [eax],edx
c000c1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1fa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c204:	90                   	nop
c000c205:	83 c4 0c             	add    esp,0xc
c000c208:	c3                   	ret    
c000c209:	90                   	nop
c000c20a:	66 90                	xchg   ax,ax

c000c20c <Mouse::~Mouse()>:
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	ba 20 d8 01 c0       	mov    edx,0xc001d820
c000c214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c218:	89 10                	mov    DWORD PTR [eax],edx
c000c21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21e:	83 ec 0c             	sub    esp,0xc
c000c221:	50                   	push   eax
c000c222:	e8 2f eb ff ff       	call   c000ad56 <Device::~Device()>
c000c227:	83 c4 10             	add    esp,0x10
c000c22a:	90                   	nop
c000c22b:	83 c4 0c             	add    esp,0xc
c000c22e:	c3                   	ret    
c000c22f:	90                   	nop

c000c230 <Mouse::~Mouse()>:
c000c230:	83 ec 0c             	sub    esp,0xc
c000c233:	83 ec 0c             	sub    esp,0xc
c000c236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c23a:	e8 cd ff ff ff       	call   c000c20c <Mouse::~Mouse()>
c000c23f:	83 c4 10             	add    esp,0x10
c000c242:	83 ec 08             	sub    esp,0x8
c000c245:	68 58 01 00 00       	push   0x158
c000c24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c24e:	e8 cb d6 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000c253:	83 c4 10             	add    esp,0x10
c000c256:	83 c4 0c             	add    esp,0xc
c000c259:	c3                   	ret    

c000c25a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c25a:	55                   	push   ebp
c000c25b:	57                   	push   edi
c000c25c:	56                   	push   esi
c000c25d:	53                   	push   ebx
c000c25e:	81 ec 28 01 00 00    	sub    esp,0x128
c000c264:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c26b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c272:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c279:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c280:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c284:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c288:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c28f:	e8 54 ee ff ff       	call   c000b0e8 <Device::getName()>
c000c294:	5a                   	pop    edx
c000c295:	59                   	pop    ecx
c000c296:	50                   	push   eax
c000c297:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c29b:	55                   	push   ebp
c000c29c:	e8 7f 43 ff ff       	call   c0000620 <strcpy>
c000c2a1:	5b                   	pop    ebx
c000c2a2:	58                   	pop    eax
c000c2a3:	68 44 d8 01 c0       	push   0xc001d844
c000c2a8:	55                   	push   ebp
c000c2a9:	e8 32 45 ff ff       	call   c00007e0 <strcat>
c000c2ae:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c2b5:	e8 97 a9 ff ff       	call   c0006c51 <malloc>
c000c2ba:	83 c4 0c             	add    esp,0xc
c000c2bd:	89 c3                	mov    ebx,eax
c000c2bf:	57                   	push   edi
c000c2c0:	56                   	push   esi
c000c2c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2c9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c2d0:	55                   	push   ebp
c000c2d1:	50                   	push   eax
c000c2d2:	e8 f7 fb ff ff       	call   c000bece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c2d7:	83 c4 14             	add    esp,0x14
c000c2da:	53                   	push   ebx
c000c2db:	e8 a4 fc ff ff       	call   c000bf84 <LogicalDisk::assignDriveLetter()>
c000c2e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c2e3:	e8 52 fd ff ff       	call   c000c03a <LogicalDisk::mount()>
c000c2e8:	58                   	pop    eax
c000c2e9:	5a                   	pop    edx
c000c2ea:	53                   	push   ebx
c000c2eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c2f2:	e8 5d eb ff ff       	call   c000ae54 <Device::addChild(Device*)>
c000c2f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c2fd:	5b                   	pop    ebx
c000c2fe:	5e                   	pop    esi
c000c2ff:	5f                   	pop    edi
c000c300:	5d                   	pop    ebp
c000c301:	c3                   	ret    

c000c302 <createPartitionsForDisk(PhysicalDisk*)>:
c000c302:	55                   	push   ebp
c000c303:	57                   	push   edi
c000c304:	56                   	push   esi
c000c305:	53                   	push   ebx
c000c306:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c30c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c313:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c319:	3d 00 02 00 00       	cmp    eax,0x200
c000c31e:	74 27                	je     c000c347 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c320:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c326:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c32c:	83 ec 10             	sub    esp,0x10
c000c32f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c333:	99                   	cdq    
c000c334:	c1 e6 0a             	shl    esi,0xa
c000c337:	52                   	push   edx
c000c338:	89 fd                	mov    ebp,edi
c000c33a:	50                   	push   eax
c000c33b:	55                   	push   ebp
c000c33c:	56                   	push   esi
c000c33d:	e8 5e f4 00 00       	call   c001b7a0 <__udivdi3>
c000c342:	e9 b1 00 00 00       	jmp    c000c3f8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c347:	83 ec 0c             	sub    esp,0xc
c000c34a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c34c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c350:	56                   	push   esi
c000c351:	6a 01                	push   0x1
c000c353:	6a 00                	push   0x0
c000c355:	6a 00                	push   0x0
c000c357:	53                   	push   ebx
c000c358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c35b:	83 c4 20             	add    esp,0x20
c000c35e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c366:	75 0a                	jne    c000c372 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c368:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c370:	74 2c                	je     c000c39e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c372:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c378:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c37e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c384:	83 ec 10             	sub    esp,0x10
c000c387:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c38b:	89 f7                	mov    edi,esi
c000c38d:	c1 e0 0a             	shl    eax,0xa
c000c390:	c1 ff 1f             	sar    edi,0x1f
c000c393:	57                   	push   edi
c000c394:	56                   	push   esi
c000c395:	52                   	push   edx
c000c396:	50                   	push   eax
c000c397:	e8 04 f4 00 00       	call   c001b7a0 <__udivdi3>
c000c39c:	eb 5a                	jmp    c000c3f8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c39e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c3a5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c3ac:	83 e1 7f             	and    ecx,0x7f
c000c3af:	83 e0 7f             	and    eax,0x7f
c000c3b2:	01 c1                	add    ecx,eax
c000c3b4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c3bb:	83 e0 7f             	and    eax,0x7f
c000c3be:	01 c1                	add    ecx,eax
c000c3c0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c3c7:	83 e0 7f             	and    eax,0x7f
c000c3ca:	00 c1                	add    cl,al
c000c3cc:	74 41                	je     c000c40f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c3ce:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c3d4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c3da:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c3e0:	83 ec 10             	sub    esp,0x10
c000c3e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c3e7:	89 f7                	mov    edi,esi
c000c3e9:	c1 e0 0a             	shl    eax,0xa
c000c3ec:	c1 ff 1f             	sar    edi,0x1f
c000c3ef:	57                   	push   edi
c000c3f0:	56                   	push   esi
c000c3f1:	52                   	push   edx
c000c3f2:	50                   	push   eax
c000c3f3:	e8 a8 f3 00 00       	call   c001b7a0 <__udivdi3>
c000c3f8:	83 c4 14             	add    esp,0x14
c000c3fb:	52                   	push   edx
c000c3fc:	50                   	push   eax
c000c3fd:	6a 00                	push   0x0
c000c3ff:	6a 00                	push   0x0
c000c401:	53                   	push   ebx
c000c402:	e8 53 fe ff ff       	call   c000c25a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c407:	83 c4 20             	add    esp,0x20
c000c40a:	e9 79 01 00 00       	jmp    c000c588 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c40f:	89 f0                	mov    eax,esi
c000c411:	31 f6                	xor    esi,esi
c000c413:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c41a:	75 02                	jne    c000c41e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c41c:	89 f1                	mov    ecx,esi
c000c41e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c425:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c42c:	c1 e2 08             	shl    edx,0x8
c000c42f:	c1 e7 10             	shl    edi,0x10
c000c432:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c43a:	09 fa                	or     edx,edi
c000c43c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c444:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c44b:	83 c0 10             	add    eax,0x10
c000c44e:	09 fa                	or     edx,edi
c000c450:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c457:	c1 e7 18             	shl    edi,0x18
c000c45a:	09 fa                	or     edx,edi
c000c45c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c463:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c467:	c1 e7 10             	shl    edi,0x10
c000c46a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c471:	c1 e2 08             	shl    edx,0x8
c000c474:	09 fa                	or     edx,edi
c000c476:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c47d:	09 fa                	or     edx,edi
c000c47f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c486:	c1 e7 18             	shl    edi,0x18
c000c489:	09 fa                	or     edx,edi
c000c48b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c48f:	46                   	inc    esi
c000c490:	83 fe 04             	cmp    esi,0x4
c000c493:	0f 85 7a ff ff ff    	jne    c000c413 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49d:	83 f0 01             	xor    eax,0x1
c000c4a0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c4a4:	75 57                	jne    c000c4fd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c4a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4aa:	83 f0 01             	xor    eax,0x1
c000c4ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c4b1:	75 4a                	jne    c000c4fd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c4b3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c4b7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c4bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c4c7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c4cd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c4d3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c4d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c4dd:	89 f7                	mov    edi,esi
c000c4df:	c1 e0 0a             	shl    eax,0xa
c000c4e2:	c1 ff 1f             	sar    edi,0x1f
c000c4e5:	57                   	push   edi
c000c4e6:	56                   	push   esi
c000c4e7:	52                   	push   edx
c000c4e8:	50                   	push   eax
c000c4e9:	e8 b2 f2 00 00       	call   c001b7a0 <__udivdi3>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c4fd:	84 c9                	test   cl,cl
c000c4ff:	74 53                	je     c000c554 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c501:	0f b6 c9             	movzx  ecx,cl
c000c504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c508:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c50c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c510:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c514:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c518:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c51c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c520:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c530:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c534:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c538:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c53c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c540:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c548:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c54c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c550:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c554:	31 ed                	xor    ebp,ebp
c000c556:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c55a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c55e:	89 f8                	mov    eax,edi
c000c560:	09 f0                	or     eax,esi
c000c562:	74 1e                	je     c000c582 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c564:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c568:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c56c:	89 d1                	mov    ecx,edx
c000c56e:	09 c1                	or     ecx,eax
c000c570:	74 10                	je     c000c582 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c572:	83 ec 0c             	sub    esp,0xc
c000c575:	57                   	push   edi
c000c576:	56                   	push   esi
c000c577:	52                   	push   edx
c000c578:	50                   	push   eax
c000c579:	53                   	push   ebx
c000c57a:	e8 db fc ff ff       	call   c000c25a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c57f:	83 c4 20             	add    esp,0x20
c000c582:	45                   	inc    ebp
c000c583:	83 fd 04             	cmp    ebp,0x4
c000c586:	75 ce                	jne    c000c556 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c588:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c58e:	5b                   	pop    ebx
c000c58f:	5e                   	pop    esi
c000c590:	5f                   	pop    edi
c000c591:	5d                   	pop    ebp
c000c592:	c3                   	ret    
c000c593:	90                   	nop

c000c594 <Serial::Serial(char const*)>:
c000c594:	83 ec 0c             	sub    esp,0xc
c000c597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c59b:	83 ec 08             	sub    esp,0x8
c000c59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a2:	50                   	push   eax
c000c5a3:	e8 44 ea ff ff       	call   c000afec <Device::Device(char const*)>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	ba 58 d8 01 c0       	mov    edx,0xc001d858
c000c5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5b4:	89 10                	mov    DWORD PTR [eax],edx
c000c5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5ba:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c5c4:	90                   	nop
c000c5c5:	83 c4 0c             	add    esp,0xc
c000c5c8:	c3                   	ret    
c000c5c9:	90                   	nop
c000c5ca:	66 90                	xchg   ax,ax

c000c5cc <Serial::~Serial()>:
c000c5cc:	83 ec 0c             	sub    esp,0xc
c000c5cf:	ba 58 d8 01 c0       	mov    edx,0xc001d858
c000c5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d8:	89 10                	mov    DWORD PTR [eax],edx
c000c5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5de:	83 ec 0c             	sub    esp,0xc
c000c5e1:	50                   	push   eax
c000c5e2:	e8 6f e7 ff ff       	call   c000ad56 <Device::~Device()>
c000c5e7:	83 c4 10             	add    esp,0x10
c000c5ea:	90                   	nop
c000c5eb:	83 c4 0c             	add    esp,0xc
c000c5ee:	c3                   	ret    
c000c5ef:	90                   	nop

c000c5f0 <Serial::~Serial()>:
c000c5f0:	83 ec 0c             	sub    esp,0xc
c000c5f3:	83 ec 0c             	sub    esp,0xc
c000c5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fa:	e8 cd ff ff ff       	call   c000c5cc <Serial::~Serial()>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	83 ec 08             	sub    esp,0x8
c000c605:	68 58 01 00 00       	push   0x158
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	e8 0b d3 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000c613:	83 c4 10             	add    esp,0x10
c000c616:	83 c4 0c             	add    esp,0xc
c000c619:	c3                   	ret    
c000c61a:	66 90                	xchg   ax,ax

c000c61c <Timer::Timer(char const*)>:
c000c61c:	83 ec 0c             	sub    esp,0xc
c000c61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c623:	83 ec 08             	sub    esp,0x8
c000c626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62a:	50                   	push   eax
c000c62b:	e8 bc e9 ff ff       	call   c000afec <Device::Device(char const*)>
c000c630:	83 c4 10             	add    esp,0x10
c000c633:	ba 9c d8 01 c0       	mov    edx,0xc001d89c
c000c638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c63c:	89 10                	mov    DWORD PTR [eax],edx
c000c63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c642:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c64c:	90                   	nop
c000c64d:	83 c4 0c             	add    esp,0xc
c000c650:	c3                   	ret    
c000c651:	90                   	nop
c000c652:	66 90                	xchg   ax,ax

c000c654 <Timer::~Timer()>:
c000c654:	83 ec 0c             	sub    esp,0xc
c000c657:	ba 9c d8 01 c0       	mov    edx,0xc001d89c
c000c65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c660:	89 10                	mov    DWORD PTR [eax],edx
c000c662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c666:	83 ec 0c             	sub    esp,0xc
c000c669:	50                   	push   eax
c000c66a:	e8 e7 e6 ff ff       	call   c000ad56 <Device::~Device()>
c000c66f:	83 c4 10             	add    esp,0x10
c000c672:	90                   	nop
c000c673:	83 c4 0c             	add    esp,0xc
c000c676:	c3                   	ret    
c000c677:	90                   	nop

c000c678 <Timer::~Timer()>:
c000c678:	83 ec 0c             	sub    esp,0xc
c000c67b:	83 ec 0c             	sub    esp,0xc
c000c67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c682:	e8 cd ff ff ff       	call   c000c654 <Timer::~Timer()>
c000c687:	83 c4 10             	add    esp,0x10
c000c68a:	83 ec 08             	sub    esp,0x8
c000c68d:	68 5c 01 00 00       	push   0x15c
c000c692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c696:	e8 83 d2 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000c69b:	83 c4 10             	add    esp,0x10
c000c69e:	83 c4 0c             	add    esp,0xc
c000c6a1:	c3                   	ret    

c000c6a2 <Timer::read()>:
c000c6a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c6ac:	c3                   	ret    

c000c6ad <setupTimer(int)>:
c000c6ad:	53                   	push   ebx
c000c6ae:	83 ec 14             	sub    esp,0x14
c000c6b1:	68 5c 01 00 00       	push   0x15c
c000c6b6:	e8 96 a5 ff ff       	call   c0006c51 <malloc>
c000c6bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6be:	89 c3                	mov    ebx,eax
c000c6c0:	e8 4b ea 00 00       	call   c001b110 <PIT::PIT()>
c000c6c5:	58                   	pop    eax
c000c6c6:	5a                   	pop    edx
c000c6c7:	53                   	push   ebx
c000c6c8:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000c6ce:	e8 81 e7 ff ff       	call   c000ae54 <Device::addChild(Device*)>
c000c6d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6d5:	6a 00                	push   0x0
c000c6d7:	6a 00                	push   0x0
c000c6d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6dd:	53                   	push   ebx
c000c6de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	83 c4 28             	add    esp,0x28
c000c6e6:	5b                   	pop    ebx
c000c6e7:	c3                   	ret    

c000c6e8 <timerHandler(unsigned int)>:
c000c6e8:	56                   	push   esi
c000c6e9:	53                   	push   ebx
c000c6ea:	51                   	push   ecx
c000c6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ef:	01 05 8c 1b 02 c0    	add    DWORD PTR ds:0xc0021b8c,eax
c000c6f5:	80 3d ad f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f5ad,0x0
c000c6fc:	0f 84 4a 01 00 00    	je     c000c84c <timerHandler(unsigned int)+0x164>
c000c702:	fa                   	cli    
c000c703:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c000c709:	83 ec 0c             	sub    esp,0xc
c000c70c:	ff 05 84 2a 02 c0    	inc    DWORD PTR ds:0xc0022a84
c000c712:	68 98 2a 02 c0       	push   0xc0022a98
c000c717:	e8 54 f6 00 00       	call   c001bd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c71c:	83 c4 10             	add    esp,0x10
c000c71f:	84 c0                	test   al,al
c000c721:	0f 85 a1 00 00 00    	jne    c000c7c8 <timerHandler(unsigned int)+0xe0>
c000c727:	83 ec 0c             	sub    esp,0xc
c000c72a:	68 98 2a 02 c0       	push   0xc0022a98
c000c72f:	e8 58 f6 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c734:	83 c4 10             	add    esp,0x10
c000c737:	89 c6                	mov    esi,eax
c000c739:	8d 76 00             	lea    esi,[esi+0x0]
c000c73c:	83 ec 0c             	sub    esp,0xc
c000c73f:	68 98 2a 02 c0       	push   0xc0022a98
c000c744:	e8 43 f6 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c749:	c7 04 24 98 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a98
c000c750:	89 c3                	mov    ebx,eax
c000c752:	e8 3d f6 00 00       	call   c001bd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c757:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	3b 05 8c 1b 02 c0    	cmp    eax,DWORD PTR ds:0xc0021b8c
c000c763:	77 23                	ja     c000c788 <timerHandler(unsigned int)+0xa0>
c000c765:	83 ec 0c             	sub    esp,0xc
c000c768:	53                   	push   ebx
c000c769:	e8 9e 67 00 00       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c000c76e:	83 c4 10             	add    esp,0x10
c000c771:	39 de                	cmp    esi,ebx
c000c773:	75 27                	jne    c000c79c <timerHandler(unsigned int)+0xb4>
c000c775:	83 ec 0c             	sub    esp,0xc
c000c778:	68 98 2a 02 c0       	push   0xc0022a98
c000c77d:	e8 0a f6 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c782:	89 c6                	mov    esi,eax
c000c784:	eb 12                	jmp    c000c798 <timerHandler(unsigned int)+0xb0>
c000c786:	66 90                	xchg   ax,ax
c000c788:	52                   	push   edx
c000c789:	52                   	push   edx
c000c78a:	53                   	push   ebx
c000c78b:	68 98 2a 02 c0       	push   0xc0022a98
c000c790:	e8 b7 f6 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c795:	8d 76 00             	lea    esi,[esi+0x0]
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	90                   	nop
c000c79c:	83 ec 0c             	sub    esp,0xc
c000c79f:	68 98 2a 02 c0       	push   0xc0022a98
c000c7a4:	e8 c7 f5 00 00       	call   c001bd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	84 c0                	test   al,al
c000c7ae:	75 18                	jne    c000c7c8 <timerHandler(unsigned int)+0xe0>
c000c7b0:	83 ec 0c             	sub    esp,0xc
c000c7b3:	68 98 2a 02 c0       	push   0xc0022a98
c000c7b8:	e8 cf f5 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c7bd:	83 c4 10             	add    esp,0x10
c000c7c0:	39 f0                	cmp    eax,esi
c000c7c2:	0f 85 74 ff ff ff    	jne    c000c73c <timerHandler(unsigned int)+0x54>
c000c7c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7cd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c7d1:	74 41                	je     c000c814 <timerHandler(unsigned int)+0x12c>
c000c7d3:	80 3d ac f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f5ac,0x0
c000c7da:	74 38                	je     c000c814 <timerHandler(unsigned int)+0x12c>
c000c7dc:	fa                   	cli    
c000c7dd:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c000c7e3:	a1 8c 1b 02 c0       	mov    eax,ds:0xc0021b8c
c000c7e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c7ee:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c7f1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c7f7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c7fa:	72 08                	jb     c000c804 <timerHandler(unsigned int)+0x11c>
c000c7fc:	e8 47 62 00 00       	call   c0012a48 <schedule()>
c000c801:	8d 76 00             	lea    esi,[esi+0x0]
c000c804:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000c809:	48                   	dec    eax
c000c80a:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000c80f:	75 03                	jne    c000c814 <timerHandler(unsigned int)+0x12c>
c000c811:	fb                   	sti    
c000c812:	66 90                	xchg   ax,ax
c000c814:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000c819:	48                   	dec    eax
c000c81a:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c000c81f:	75 1b                	jne    c000c83c <timerHandler(unsigned int)+0x154>
c000c821:	83 3d 80 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a80,0x0
c000c828:	74 12                	je     c000c83c <timerHandler(unsigned int)+0x154>
c000c82a:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c000c834:	e8 0f 62 00 00       	call   c0012a48 <schedule()>
c000c839:	8d 76 00             	lea    esi,[esi+0x0]
c000c83c:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000c841:	48                   	dec    eax
c000c842:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000c847:	75 03                	jne    c000c84c <timerHandler(unsigned int)+0x164>
c000c849:	fb                   	sti    
c000c84a:	66 90                	xchg   ax,ax
c000c84c:	58                   	pop    eax
c000c84d:	5b                   	pop    ebx
c000c84e:	5e                   	pop    esi
c000c84f:	c3                   	ret    

c000c850 <VCache::VCache(PhysicalDisk*)>:
c000c850:	53                   	push   ebx
c000c851:	83 ec 18             	sub    esp,0x18
c000c854:	ba cc d8 01 c0       	mov    edx,0xc001d8cc
c000c859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85d:	89 10                	mov    DWORD PTR [eax],edx
c000c85f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c863:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c879:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c880:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c892:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c89d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8a8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c8ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8b0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c8b7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c8be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8c2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ca:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c8d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8da:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c8e1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c8e9:	83 ec 0c             	sub    esp,0xc
c000c8ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8f0:	e8 5c a3 ff ff       	call   c0006c51 <malloc>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	89 c3                	mov    ebx,eax
c000c8fa:	83 ec 0c             	sub    esp,0xc
c000c8fd:	53                   	push   ebx
c000c8fe:	e8 11 5f 00 00       	call   c0012814 <Mutex::Mutex()>
c000c903:	83 c4 10             	add    esp,0x10
c000c906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c90a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c911:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c915:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c91c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c923:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c927:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c92d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c931:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c934:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c938:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c93e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c944:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c948:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c94b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c94e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c952:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c956:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c960:	05 00 01 00 00       	add    eax,0x100
c000c965:	c1 e0 04             	shl    eax,0x4
c000c968:	83 ec 0c             	sub    esp,0xc
c000c96b:	50                   	push   eax
c000c96c:	e8 e0 a2 ff ff       	call   c0006c51 <malloc>
c000c971:	83 c4 10             	add    esp,0x10
c000c974:	89 c2                	mov    edx,eax
c000c976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c981:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c990:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c994:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c99a:	c1 e0 06             	shl    eax,0x6
c000c99d:	83 ec 0c             	sub    esp,0xc
c000c9a0:	50                   	push   eax
c000c9a1:	e8 ab a2 ff ff       	call   c0006c51 <malloc>
c000c9a6:	83 c4 10             	add    esp,0x10
c000c9a9:	89 c2                	mov    edx,eax
c000c9ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9af:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c9b2:	90                   	nop
c000c9b3:	83 c4 18             	add    esp,0x18
c000c9b6:	5b                   	pop    ebx
c000c9b7:	c3                   	ret    

c000c9b8 <VCache::invalidateReadBuffer()>:
c000c9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9bc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c9c2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c9c6:	c3                   	ret    
c000c9c7:	90                   	nop

c000c9c8 <VCache::writeWriteBuffer()>:
c000c9c8:	53                   	push   ebx
c000c9c9:	83 ec 08             	sub    esp,0x8
c000c9cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c9d4:	74 1e                	je     c000c9f4 <VCache::writeWriteBuffer()+0x2c>
c000c9d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c9d9:	83 ec 0c             	sub    esp,0xc
c000c9dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9de:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c9e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c9e4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c9e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9ea:	50                   	push   eax
c000c9eb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c9ee:	83 c4 20             	add    esp,0x20
c000c9f1:	8d 76 00             	lea    esi,[esi+0x0]
c000c9f4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c9fb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000ca02:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000ca06:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000ca0d:	83 c4 08             	add    esp,0x8
c000ca10:	5b                   	pop    ebx
c000ca11:	c3                   	ret    
c000ca12:	66 90                	xchg   ax,ax

c000ca14 <VCache::~VCache()>:
c000ca14:	83 ec 0c             	sub    esp,0xc
c000ca17:	ba cc d8 01 c0       	mov    edx,0xc001d8cc
c000ca1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca20:	89 10                	mov    DWORD PTR [eax],edx
c000ca22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca26:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000ca29:	84 c0                	test   al,al
c000ca2b:	74 0f                	je     c000ca3c <VCache::~VCache()+0x28>
c000ca2d:	83 ec 0c             	sub    esp,0xc
c000ca30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca34:	e8 8f ff ff ff       	call   c000c9c8 <VCache::writeWriteBuffer()>
c000ca39:	83 c4 10             	add    esp,0x10
c000ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca40:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca43:	83 ec 0c             	sub    esp,0xc
c000ca46:	50                   	push   eax
c000ca47:	e8 15 a2 ff ff       	call   c0006c61 <free>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca53:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ca56:	83 ec 0c             	sub    esp,0xc
c000ca59:	50                   	push   eax
c000ca5a:	e8 02 a2 ff ff       	call   c0006c61 <free>
c000ca5f:	83 c4 10             	add    esp,0x10
c000ca62:	90                   	nop
c000ca63:	83 c4 0c             	add    esp,0xc
c000ca66:	c3                   	ret    
c000ca67:	90                   	nop

c000ca68 <VCache::~VCache()>:
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	83 ec 0c             	sub    esp,0xc
c000ca6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca72:	e8 9d ff ff ff       	call   c000ca14 <VCache::~VCache()>
c000ca77:	83 c4 10             	add    esp,0x10
c000ca7a:	83 ec 08             	sub    esp,0x8
c000ca7d:	6a 44                	push   0x44
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	e8 96 ce ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	83 c4 0c             	add    esp,0xc
c000ca8e:	c3                   	ret    
c000ca8f:	90                   	nop

c000ca90 <VCache::write(unsigned long long, int, void*)>:
c000ca90:	55                   	push   ebp
c000ca91:	31 c0                	xor    eax,eax
c000ca93:	57                   	push   edi
c000ca94:	56                   	push   esi
c000ca95:	53                   	push   ebx
c000ca96:	83 ec 0c             	sub    esp,0xc
c000ca99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca9d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000caa1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000caa5:	8d 76 00             	lea    esi,[esi+0x0]
c000caa8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000caac:	7d 1a                	jge    c000cac8 <VCache::write(unsigned long long, int, void*)+0x38>
c000caae:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cab1:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cab7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cabb:	0f af c8             	imul   ecx,eax
c000cabe:	01 ca                	add    edx,ecx
c000cac0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cac2:	40                   	inc    eax
c000cac3:	eb e3                	jmp    c000caa8 <VCache::write(unsigned long long, int, void*)+0x18>
c000cac5:	8d 76 00             	lea    esi,[esi+0x0]
c000cac8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000cacc:	74 0a                	je     c000cad8 <VCache::write(unsigned long long, int, void*)+0x48>
c000cace:	53                   	push   ebx
c000cacf:	e8 e4 fe ff ff       	call   c000c9b8 <VCache::invalidateReadBuffer()>
c000cad4:	58                   	pop    eax
c000cad5:	8d 76 00             	lea    esi,[esi+0x0]
c000cad8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000cadc:	74 5e                	je     c000cb3c <VCache::write(unsigned long long, int, void*)+0xac>
c000cade:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000cae1:	89 e8                	mov    eax,ebp
c000cae3:	99                   	cdq    
c000cae4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000cae7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000caea:	89 c1                	mov    ecx,eax
c000caec:	89 d0                	mov    eax,edx
c000caee:	31 f1                	xor    ecx,esi
c000caf0:	31 f8                	xor    eax,edi
c000caf2:	09 c1                	or     ecx,eax
c000caf4:	75 3a                	jne    c000cb30 <VCache::write(unsigned long long, int, void*)+0xa0>
c000caf6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000cafb:	75 33                	jne    c000cb30 <VCache::write(unsigned long long, int, void*)+0xa0>
c000cafd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb00:	89 ef                	mov    edi,ebp
c000cb02:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb08:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb0c:	0f af f9             	imul   edi,ecx
c000cb0f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000cb12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb14:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000cb17:	40                   	inc    eax
c000cb18:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000cb1b:	83 f8 40             	cmp    eax,0x40
c000cb1e:	75 60                	jne    c000cb80 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cb20:	83 ec 0c             	sub    esp,0xc
c000cb23:	53                   	push   ebx
c000cb24:	e8 9f fe ff ff       	call   c000c9c8 <VCache::writeWriteBuffer()>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	eb 52                	jmp    c000cb80 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cb2e:	66 90                	xchg   ax,ax
c000cb30:	83 ec 0c             	sub    esp,0xc
c000cb33:	53                   	push   ebx
c000cb34:	e8 8f fe ff ff       	call   c000c9c8 <VCache::writeWriteBuffer()>
c000cb39:	83 c4 10             	add    esp,0x10
c000cb3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb3f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000cb44:	7f 22                	jg     c000cb68 <VCache::write(unsigned long long, int, void*)+0xd8>
c000cb46:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000cb49:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000cb4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb50:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000cb54:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000cb57:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000cb5a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb60:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb66:	eb 18                	jmp    c000cb80 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cb68:	83 ec 0c             	sub    esp,0xc
c000cb6b:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb75:	57                   	push   edi
c000cb76:	56                   	push   esi
c000cb77:	50                   	push   eax
c000cb78:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000cb7b:	83 c4 20             	add    esp,0x20
c000cb7e:	66 90                	xchg   ax,ax
c000cb80:	83 c4 0c             	add    esp,0xc
c000cb83:	31 c0                	xor    eax,eax
c000cb85:	5b                   	pop    ebx
c000cb86:	5e                   	pop    esi
c000cb87:	5f                   	pop    edi
c000cb88:	5d                   	pop    ebp
c000cb89:	c3                   	ret    

c000cb8a <VCache::read(unsigned long long, int, void*)>:
c000cb8a:	55                   	push   ebp
c000cb8b:	31 c0                	xor    eax,eax
c000cb8d:	57                   	push   edi
c000cb8e:	56                   	push   esi
c000cb8f:	53                   	push   ebx
c000cb90:	83 ec 1c             	sub    esp,0x1c
c000cb93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000cb97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cb9b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cb9f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000cba3:	90                   	nop
c000cba4:	39 e8                	cmp    eax,ebp
c000cba6:	7d 18                	jge    c000cbc0 <VCache::read(unsigned long long, int, void*)+0x36>
c000cba8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cbab:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cbb1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cbb5:	0f af c8             	imul   ecx,eax
c000cbb8:	01 ca                	add    edx,ecx
c000cbba:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cbbc:	40                   	inc    eax
c000cbbd:	eb e5                	jmp    c000cba4 <VCache::read(unsigned long long, int, void*)+0x1a>
c000cbbf:	90                   	nop
c000cbc0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000cbc4:	74 0e                	je     c000cbd4 <VCache::read(unsigned long long, int, void*)+0x4a>
c000cbc6:	83 ec 0c             	sub    esp,0xc
c000cbc9:	53                   	push   ebx
c000cbca:	e8 f9 fd ff ff       	call   c000c9c8 <VCache::writeWriteBuffer()>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	66 90                	xchg   ax,ax
c000cbd4:	83 fd 01             	cmp    ebp,0x1
c000cbd7:	0f 85 87 00 00 00    	jne    c000cc64 <VCache::read(unsigned long long, int, void*)+0xda>
c000cbdd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cbe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbe4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000cbeb:	75 77                	jne    c000cc64 <VCache::read(unsigned long long, int, void*)+0xda>
c000cbed:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000cbf0:	89 e9                	mov    ecx,ebp
c000cbf2:	f7 d9                	neg    ecx
c000cbf4:	89 c8                	mov    eax,ecx
c000cbf6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cbfa:	c1 f8 1f             	sar    eax,0x1f
c000cbfd:	21 f1                	and    ecx,esi
c000cbff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc03:	89 c8                	mov    eax,ecx
c000cc05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc09:	21 f9                	and    ecx,edi
c000cc0b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000cc0f:	89 ca                	mov    edx,ecx
c000cc11:	74 0d                	je     c000cc20 <VCache::read(unsigned long long, int, void*)+0x96>
c000cc13:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000cc16:	75 08                	jne    c000cc20 <VCache::read(unsigned long long, int, void*)+0x96>
c000cc18:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000cc1b:	74 27                	je     c000cc44 <VCache::read(unsigned long long, int, void*)+0xba>
c000cc1d:	8d 76 00             	lea    esi,[esi+0x0]
c000cc20:	83 ec 0c             	sub    esp,0xc
c000cc23:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000cc27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cc2b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000cc2e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc31:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cc33:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cc36:	55                   	push   ebp
c000cc37:	52                   	push   edx
c000cc38:	50                   	push   eax
c000cc39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cc3d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000cc40:	83 c4 20             	add    esp,0x20
c000cc43:	90                   	nop
c000cc44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cc47:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cc4b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cc51:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000cc54:	48                   	dec    eax
c000cc55:	21 c6                	and    esi,eax
c000cc57:	0f af f1             	imul   esi,ecx
c000cc5a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000cc5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc5f:	eb 23                	jmp    c000cc84 <VCache::read(unsigned long long, int, void*)+0xfa>
c000cc61:	8d 76 00             	lea    esi,[esi+0x0]
c000cc64:	83 ec 0c             	sub    esp,0xc
c000cc67:	53                   	push   ebx
c000cc68:	e8 4b fd ff ff       	call   c000c9b8 <VCache::invalidateReadBuffer()>
c000cc6d:	5a                   	pop    edx
c000cc6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cc71:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc73:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc77:	55                   	push   ebp
c000cc78:	57                   	push   edi
c000cc79:	56                   	push   esi
c000cc7a:	50                   	push   eax
c000cc7b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	8d 76 00             	lea    esi,[esi+0x0]
c000cc84:	83 c4 1c             	add    esp,0x1c
c000cc87:	31 c0                	xor    eax,eax
c000cc89:	5b                   	pop    ebx
c000cc8a:	5e                   	pop    esi
c000cc8b:	5f                   	pop    edi
c000cc8c:	5d                   	pop    ebp
c000cc8d:	c3                   	ret    

c000cc8e <Video::putrect(int, int, int, int, unsigned int)>:
c000cc8e:	55                   	push   ebp
c000cc8f:	57                   	push   edi
c000cc90:	56                   	push   esi
c000cc91:	53                   	push   ebx
c000cc92:	83 ec 1c             	sub    esp,0x1c
c000cc95:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cc99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cc9d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cca1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000cca5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cca9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ccad:	01 df                	add    edi,ebx
c000ccaf:	39 fb                	cmp    ebx,edi
c000ccb1:	7d 1f                	jge    c000ccd2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ccb3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ccb7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ccbb:	7d 12                	jge    c000cccf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ccbd:	8b 16                	mov    edx,DWORD PTR [esi]
c000ccbf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ccc3:	53                   	push   ebx
c000ccc4:	55                   	push   ebp
c000ccc5:	45                   	inc    ebp
c000ccc6:	56                   	push   esi
c000ccc7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ccca:	83 c4 10             	add    esp,0x10
c000cccd:	eb e8                	jmp    c000ccb7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cccf:	43                   	inc    ebx
c000ccd0:	eb dd                	jmp    c000ccaf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ccd2:	83 c4 1c             	add    esp,0x1c
c000ccd5:	5b                   	pop    ebx
c000ccd6:	5e                   	pop    esi
c000ccd7:	5f                   	pop    edi
c000ccd8:	5d                   	pop    ebp
c000ccd9:	c3                   	ret    

c000ccda <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ccda:	55                   	push   ebp
c000ccdb:	57                   	push   edi
c000ccdc:	31 ff                	xor    edi,edi
c000ccde:	56                   	push   esi
c000ccdf:	53                   	push   ebx
c000cce0:	83 ec 1c             	sub    esp,0x1c
c000cce3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000cce7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cceb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ccf2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ccf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccfb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ccff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cd03:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000cd06:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cd0a:	01 f9                	add    ecx,edi
c000cd0c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000cd10:	7d 2f                	jge    c000cd41 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000cd12:	31 f6                	xor    esi,esi
c000cd14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cd18:	01 f2                	add    edx,esi
c000cd1a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cd1e:	7d 1a                	jge    c000cd3a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cd20:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cd23:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000cd26:	46                   	inc    esi
c000cd27:	51                   	push   ecx
c000cd28:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd2c:	52                   	push   edx
c000cd2d:	55                   	push   ebp
c000cd2e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cd31:	83 c4 10             	add    esp,0x10
c000cd34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cd38:	eb da                	jmp    c000cd14 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cd3a:	47                   	inc    edi
c000cd3b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cd3f:	eb c5                	jmp    c000cd06 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cd41:	83 c4 1c             	add    esp,0x1c
c000cd44:	5b                   	pop    ebx
c000cd45:	5e                   	pop    esi
c000cd46:	5f                   	pop    edi
c000cd47:	5d                   	pop    ebp
c000cd48:	c3                   	ret    
c000cd49:	90                   	nop

c000cd4a <Video::blit(unsigned int*, int, int, int, int)>:
c000cd4a:	55                   	push   ebp
c000cd4b:	57                   	push   edi
c000cd4c:	56                   	push   esi
c000cd4d:	53                   	push   ebx
c000cd4e:	83 ec 1c             	sub    esp,0x1c
c000cd51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cd59:	85 c0                	test   eax,eax
c000cd5b:	79 02                	jns    c000cd5f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cd5d:	31 c0                	xor    eax,eax
c000cd5f:	c1 e0 02             	shl    eax,0x2
c000cd62:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cd66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cd6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cd6e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cd72:	39 d8                	cmp    eax,ebx
c000cd74:	7e 49                	jle    c000cdbf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cd76:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cd7c:	7c 41                	jl     c000cdbf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cd7e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cd82:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cd86:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cd8a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cd8e:	39 f9                	cmp    ecx,edi
c000cd90:	7e 22                	jle    c000cdb4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cd92:	83 c5 04             	add    ebp,0x4
c000cd95:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cd9b:	7c 14                	jl     c000cdb1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000cd9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000cd9f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000cda2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cda6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cdaa:	56                   	push   esi
c000cdab:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000cdae:	83 c4 10             	add    esp,0x10
c000cdb1:	47                   	inc    edi
c000cdb2:	eb d2                	jmp    c000cd86 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000cdb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdb8:	43                   	inc    ebx
c000cdb9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cdbd:	eb ab                	jmp    c000cd6a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cdbf:	83 c4 1c             	add    esp,0x1c
c000cdc2:	5b                   	pop    ebx
c000cdc3:	5e                   	pop    esi
c000cdc4:	5f                   	pop    edi
c000cdc5:	5d                   	pop    ebp
c000cdc6:	c3                   	ret    
c000cdc7:	90                   	nop

c000cdc8 <Video::clearScreen(unsigned int)>:
c000cdc8:	57                   	push   edi
c000cdc9:	56                   	push   esi
c000cdca:	53                   	push   ebx
c000cdcb:	31 db                	xor    ebx,ebx
c000cdcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdd1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cdd7:	7e 1f                	jle    c000cdf8 <Video::clearScreen(unsigned int)+0x30>
c000cdd9:	31 ff                	xor    edi,edi
c000cddb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cde1:	7e 12                	jle    c000cdf5 <Video::clearScreen(unsigned int)+0x2d>
c000cde3:	8b 06                	mov    eax,DWORD PTR [esi]
c000cde5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cde9:	53                   	push   ebx
c000cdea:	57                   	push   edi
c000cdeb:	47                   	inc    edi
c000cdec:	56                   	push   esi
c000cded:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cdf0:	83 c4 10             	add    esp,0x10
c000cdf3:	eb e6                	jmp    c000cddb <Video::clearScreen(unsigned int)+0x13>
c000cdf5:	43                   	inc    ebx
c000cdf6:	eb d9                	jmp    c000cdd1 <Video::clearScreen(unsigned int)+0x9>
c000cdf8:	5b                   	pop    ebx
c000cdf9:	5e                   	pop    esi
c000cdfa:	5f                   	pop    edi
c000cdfb:	c3                   	ret    

c000cdfc <Video::putpixel(int, int, unsigned int)>:
c000cdfc:	c7 44 24 04 d4 d8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d8d4
c000ce04:	e9 5e 27 00 00       	jmp    c000f567 <Krnl::panic(char const*)>
c000ce09:	90                   	nop

c000ce0a <Video::Video(char const*)>:
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce11:	83 ec 08             	sub    esp,0x8
c000ce14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce18:	50                   	push   eax
c000ce19:	e8 ce e1 ff ff       	call   c000afec <Device::Device(char const*)>
c000ce1e:	83 c4 10             	add    esp,0x10
c000ce21:	ba 44 d9 01 c0       	mov    edx,0xc001d944
c000ce26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2a:	89 10                	mov    DWORD PTR [eax],edx
c000ce2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce30:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ce3a:	90                   	nop
c000ce3b:	83 c4 0c             	add    esp,0xc
c000ce3e:	c3                   	ret    
c000ce3f:	90                   	nop

c000ce40 <Video::~Video()>:
c000ce40:	83 ec 0c             	sub    esp,0xc
c000ce43:	ba 44 d9 01 c0       	mov    edx,0xc001d944
c000ce48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4c:	89 10                	mov    DWORD PTR [eax],edx
c000ce4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce52:	83 ec 0c             	sub    esp,0xc
c000ce55:	50                   	push   eax
c000ce56:	e8 fb de ff ff       	call   c000ad56 <Device::~Device()>
c000ce5b:	83 c4 10             	add    esp,0x10
c000ce5e:	90                   	nop
c000ce5f:	83 c4 0c             	add    esp,0xc
c000ce62:	c3                   	ret    
c000ce63:	90                   	nop

c000ce64 <Video::~Video()>:
c000ce64:	83 ec 0c             	sub    esp,0xc
c000ce67:	83 ec 0c             	sub    esp,0xc
c000ce6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6e:	e8 cd ff ff ff       	call   c000ce40 <Video::~Video()>
c000ce73:	83 c4 10             	add    esp,0x10
c000ce76:	83 ec 08             	sub    esp,0x8
c000ce79:	68 64 01 00 00       	push   0x164
c000ce7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce82:	e8 97 ca ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c000ce87:	83 c4 10             	add    esp,0x10
c000ce8a:	83 c4 0c             	add    esp,0xc
c000ce8d:	c3                   	ret    

c000ce8e <Video::isMonochrome()>:
c000ce8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce92:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ce98:	c3                   	ret    
c000ce99:	90                   	nop

c000ce9a <Video::getWidth()>:
c000ce9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cea4:	c3                   	ret    
c000cea5:	90                   	nop

c000cea6 <Video::getHeight()>:
c000cea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceaa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ceb0:	c3                   	ret    
c000ceb1:	90                   	nop

c000ceb2 <Video::drawCursor(int, int, unsigned char*, int)>:
c000ceb2:	55                   	push   ebp
c000ceb3:	57                   	push   edi
c000ceb4:	56                   	push   esi
c000ceb5:	53                   	push   ebx
c000ceb6:	83 ec 2c             	sub    esp,0x2c
c000ceb9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cebd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cec1:	83 f8 01             	cmp    eax,0x1
c000cec4:	19 c9                	sbb    ecx,ecx
c000cec6:	31 db                	xor    ebx,ebx
c000cec8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cecc:	89 cd                	mov    ebp,ecx
c000cece:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ced6:	f7 d5                	not    ebp
c000ced8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cede:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cee2:	01 d8                	add    eax,ebx
c000cee4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cee8:	56                   	push   esi
c000cee9:	e8 b8 ff ff ff       	call   c000cea6 <Video::getHeight()>
c000ceee:	59                   	pop    ecx
c000ceef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cef3:	7e 70                	jle    c000cf65 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cef5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cef9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cefd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cf00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cf08:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cf0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf13:	89 f8                	mov    eax,edi
c000cf15:	83 c0 20             	add    eax,0x20
c000cf18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cf1c:	56                   	push   esi
c000cf1d:	e8 78 ff ff ff       	call   c000ce9a <Video::getWidth()>
c000cf22:	5a                   	pop    edx
c000cf23:	39 c7                	cmp    edi,eax
c000cf25:	7d 34                	jge    c000cf5b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000cf27:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000cf2c:	74 05                	je     c000cf33 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000cf2e:	8b 06                	mov    eax,DWORD PTR [esi]
c000cf30:	55                   	push   ebp
c000cf31:	eb 0d                	jmp    c000cf40 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000cf33:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000cf38:	74 12                	je     c000cf4c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000cf3a:	8b 06                	mov    eax,DWORD PTR [esi]
c000cf3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cf44:	57                   	push   edi
c000cf45:	56                   	push   esi
c000cf46:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000cf50:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000cf54:	47                   	inc    edi
c000cf55:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000cf59:	75 c1                	jne    c000cf1c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000cf5b:	43                   	inc    ebx
c000cf5c:	83 fb 20             	cmp    ebx,0x20
c000cf5f:	0f 85 79 ff ff ff    	jne    c000cede <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000cf65:	83 c4 2c             	add    esp,0x2c
c000cf68:	5b                   	pop    ebx
c000cf69:	5e                   	pop    esi
c000cf6a:	5f                   	pop    edi
c000cf6b:	5d                   	pop    ebp
c000cf6c:	c3                   	ret    
c000cf6d:	90                   	nop

c000cf6e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000cf6e:	55                   	push   ebp
c000cf6f:	57                   	push   edi
c000cf70:	56                   	push   esi
c000cf71:	53                   	push   ebx
c000cf72:	83 ec 28             	sub    esp,0x28
c000cf75:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000cf79:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000cf7d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000cf81:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000cf85:	c1 e6 08             	shl    esi,0x8
c000cf88:	01 c6                	add    esi,eax
c000cf8a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000cf8e:	c1 e0 08             	shl    eax,0x8
c000cf91:	01 d0                	add    eax,edx
c000cf93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf9b:	0f af c6             	imul   eax,esi
c000cf9e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000cfa5:	50                   	push   eax
c000cfa6:	e8 a6 9c ff ff       	call   c0006c51 <malloc>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 c7                	mov    edi,eax
c000cfb0:	85 c0                	test   eax,eax
c000cfb2:	75 10                	jne    c000cfc4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000cfb4:	83 ec 0c             	sub    esp,0xc
c000cfb7:	68 f5 d8 01 c0       	push   0xc001d8f5
c000cfbc:	e8 a6 25 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000cfc1:	83 c4 10             	add    esp,0x10
c000cfc4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000cfc7:	ba 12 00 00 00       	mov    edx,0x12
c000cfcc:	84 c0                	test   al,al
c000cfce:	74 11                	je     c000cfe1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000cfd0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000cfd4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000cfd8:	c1 fa 03             	sar    edx,0x3
c000cfdb:	0f af d1             	imul   edx,ecx
c000cfde:	83 c2 12             	add    edx,0x12
c000cfe1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cfe5:	74 04                	je     c000cfeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cfe7:	85 f6                	test   esi,esi
c000cfe9:	75 12                	jne    c000cffd <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cfeb:	83 ec 0c             	sub    esp,0xc
c000cfee:	68 05 d9 01 c0       	push   0xc001d905
c000cff3:	e8 1c ca ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000cff8:	e9 b8 00 00 00       	jmp    c000d0b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000cffd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000d001:	80 f9 02             	cmp    cl,0x2
c000d004:	0f 85 96 00 00 00    	jne    c000d0a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000d00a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000d00f:	75 0e                	jne    c000d01f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000d011:	84 c0                	test   al,al
c000d013:	75 0a                	jne    c000d01f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000d015:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000d018:	83 e8 18             	sub    eax,0x18
c000d01b:	a8 f7                	test   al,0xf7
c000d01d:	74 0a                	je     c000d029 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000d01f:	83 ec 0c             	sub    esp,0xc
c000d022:	68 1a d9 01 c0       	push   0xc001d91a
c000d027:	eb 7f                	jmp    c000d0a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000d029:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d031:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000d039:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000d03d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d045:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000d049:	75 0c                	jne    c000d057 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000d04b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000d050:	c1 e0 18             	shl    eax,0x18
c000d053:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d057:	45                   	inc    ebp
c000d058:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000d05d:	c1 e1 10             	shl    ecx,0x10
c000d060:	89 c8                	mov    eax,ecx
c000d062:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000d067:	c1 e1 08             	shl    ecx,0x8
c000d06a:	09 c1                	or     ecx,eax
c000d06c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000d070:	09 c1                	or     ecx,eax
c000d072:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000d076:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000d07a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000d07e:	c1 f8 03             	sar    eax,0x3
c000d081:	01 c2                	add    edx,eax
c000d083:	89 e8                	mov    eax,ebp
c000d085:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000d089:	39 c6                	cmp    esi,eax
c000d08b:	7f b0                	jg     c000d03d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000d08d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d091:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d095:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000d098:	7e 22                	jle    c000d0bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000d09a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000d09e:	eb 99                	jmp    c000d039 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000d0a0:	50                   	push   eax
c000d0a1:	50                   	push   eax
c000d0a2:	51                   	push   ecx
c000d0a3:	68 28 d9 01 c0       	push   0xc001d928
c000d0a8:	e8 67 c9 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000d0ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d0b0:	e8 ac 9b ff ff       	call   c0006c61 <free>
c000d0b5:	83 c4 10             	add    esp,0x10
c000d0b8:	31 ff                	xor    edi,edi
c000d0ba:	eb 0f                	jmp    c000d0cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000d0bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d0c0:	89 30                	mov    DWORD PTR [eax],esi
c000d0c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0c6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0c9:	89 30                	mov    DWORD PTR [eax],esi
c000d0cb:	83 c4 1c             	add    esp,0x1c
c000d0ce:	89 f8                	mov    eax,edi
c000d0d0:	5b                   	pop    ebx
c000d0d1:	5e                   	pop    esi
c000d0d2:	5f                   	pop    edi
c000d0d3:	5d                   	pop    ebp
c000d0d4:	c3                   	ret    
c000d0d5:	90                   	nop

c000d0d6 <Video::putTGA(int, int, unsigned char*, int)>:
c000d0d6:	55                   	push   ebp
c000d0d7:	57                   	push   edi
c000d0d8:	56                   	push   esi
c000d0d9:	53                   	push   ebx
c000d0da:	83 ec 28             	sub    esp,0x28
c000d0dd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000d0e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d0e5:	50                   	push   eax
c000d0e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d0ea:	50                   	push   eax
c000d0eb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d0ef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d0f3:	56                   	push   esi
c000d0f4:	e8 75 fe ff ff       	call   c000cf6e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000d0f9:	83 c4 20             	add    esp,0x20
c000d0fc:	85 c0                	test   eax,eax
c000d0fe:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d102:	74 35                	je     c000d139 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d104:	89 c7                	mov    edi,eax
c000d106:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d10a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d10e:	39 d8                	cmp    eax,ebx
c000d110:	7e 27                	jle    c000d139 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d112:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d116:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d11a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d11e:	39 e8                	cmp    eax,ebp
c000d120:	7e 14                	jle    c000d136 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000d122:	8b 06                	mov    eax,DWORD PTR [esi]
c000d124:	83 c7 04             	add    edi,0x4
c000d127:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000d12a:	53                   	push   ebx
c000d12b:	55                   	push   ebp
c000d12c:	45                   	inc    ebp
c000d12d:	56                   	push   esi
c000d12e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d131:	83 c4 10             	add    esp,0x10
c000d134:	eb e0                	jmp    c000d116 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000d136:	43                   	inc    ebx
c000d137:	eb cd                	jmp    c000d106 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000d139:	83 c4 1c             	add    esp,0x1c
c000d13c:	5b                   	pop    ebx
c000d13d:	5e                   	pop    esi
c000d13e:	5f                   	pop    edi
c000d13f:	5d                   	pop    ebp
c000d140:	c3                   	ret    
c000d141:	66 90                	xchg   ax,ax
c000d143:	90                   	nop

c000d144 <ACPI::close(int, int, void*)>:
c000d144:	83 ec 1c             	sub    esp,0x1c
c000d147:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000d14f:	74 0b                	je     c000d15c <ACPI::close(int, int, void*)+0x18>
c000d151:	b8 00 00 00 00       	mov    eax,0x0
c000d156:	e9 9d 00 00 00       	jmp    c000d1f8 <ACPI::close(int, int, void*)+0xb4>
c000d15b:	90                   	nop
c000d15c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d161:	75 29                	jne    c000d18c <ACPI::close(int, int, void*)+0x48>
c000d163:	a1 a8 1b 02 c0       	mov    eax,ds:0xc0021ba8
c000d168:	85 c0                	test   eax,eax
c000d16a:	74 08                	je     c000d174 <ACPI::close(int, int, void*)+0x30>
c000d16c:	a1 a8 1b 02 c0       	mov    eax,ds:0xc0021ba8
c000d171:	ff d0                	call   eax
c000d173:	90                   	nop
c000d174:	83 ec 0c             	sub    esp,0xc
c000d177:	68 84 d9 01 c0       	push   0xc001d984
c000d17c:	e8 e6 23 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000d181:	83 c4 10             	add    esp,0x10
c000d184:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d189:	eb 6d                	jmp    c000d1f8 <ACPI::close(int, int, void*)+0xb4>
c000d18b:	90                   	nop
c000d18c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d191:	75 5d                	jne    c000d1f0 <ACPI::close(int, int, void*)+0xac>
c000d193:	a1 a4 1b 02 c0       	mov    eax,ds:0xc0021ba4
c000d198:	85 c0                	test   eax,eax
c000d19a:	74 08                	je     c000d1a4 <ACPI::close(int, int, void*)+0x60>
c000d19c:	a1 a4 1b 02 c0       	mov    eax,ds:0xc0021ba4
c000d1a1:	ff d0                	call   eax
c000d1a3:	90                   	nop
c000d1a4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d1a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d1b0:	25 ff 00 00 00       	and    eax,0xff
c000d1b5:	83 e0 02             	and    eax,0x2
c000d1b8:	74 1e                	je     c000d1d8 <ACPI::close(int, int, void*)+0x94>
c000d1ba:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d1c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d1c5:	89 c2                	mov    edx,eax
c000d1c7:	ec                   	in     al,dx
c000d1c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d1cc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d1d0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d1d4:	eb d6                	jmp    c000d1ac <ACPI::close(int, int, void*)+0x68>
c000d1d6:	66 90                	xchg   ax,ax
c000d1d8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d1df:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d1e4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d1e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ec:	ee                   	out    dx,al
c000d1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d1f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d1f8:	83 c4 1c             	add    esp,0x1c
c000d1fb:	c3                   	ret    

c000d1fc <findRSDP()>:
c000d1fc:	83 ec 1c             	sub    esp,0x1c
c000d1ff:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d204:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d20a:	83 e0 04             	and    eax,0x4
c000d20d:	84 c0                	test   al,al
c000d20f:	75 07                	jne    c000d218 <findRSDP()+0x1c>
c000d211:	b8 00 00 00 00       	mov    eax,0x0
c000d216:	eb 70                	jmp    c000d288 <findRSDP()+0x8c>
c000d218:	a1 d8 f5 01 c0       	mov    eax,ds:0xc001f5d8
c000d21d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d222:	7f 1c                	jg     c000d240 <findRSDP()+0x44>
c000d224:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d229:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d22f:	83 e2 fb             	and    edx,0xfffffffb
c000d232:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d238:	b8 00 00 00 00       	mov    eax,0x0
c000d23d:	eb 49                	jmp    c000d288 <findRSDP()+0x8c>
c000d23f:	90                   	nop
c000d240:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d248:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d250:	77 2e                	ja     c000d280 <findRSDP()+0x84>
c000d252:	83 ec 04             	sub    esp,0x4
c000d255:	6a 08                	push   0x8
c000d257:	68 1f da 01 c0       	push   0xc001da1f
c000d25c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d260:	e8 4b 31 ff ff       	call   c00003b0 <memcmp>
c000d265:	83 c4 10             	add    esp,0x10
c000d268:	85 c0                	test   eax,eax
c000d26a:	0f 94 c0             	sete   al
c000d26d:	84 c0                	test   al,al
c000d26f:	74 07                	je     c000d278 <findRSDP()+0x7c>
c000d271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d275:	eb 11                	jmp    c000d288 <findRSDP()+0x8c>
c000d277:	90                   	nop
c000d278:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d27d:	eb c9                	jmp    c000d248 <findRSDP()+0x4c>
c000d27f:	90                   	nop
c000d280:	b8 00 00 00 00       	mov    eax,0x0
c000d285:	8d 76 00             	lea    esi,[esi+0x0]
c000d288:	83 c4 1c             	add    esp,0x1c
c000d28b:	c3                   	ret    

c000d28c <loadACPITables(unsigned char*)>:
c000d28c:	57                   	push   edi
c000d28d:	56                   	push   esi
c000d28e:	53                   	push   ebx
c000d28f:	83 ec 60             	sub    esp,0x60
c000d292:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d297:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d29d:	83 e0 04             	and    eax,0x4
c000d2a0:	84 c0                	test   al,al
c000d2a2:	0f 84 3c 02 00 00    	je     c000d4e4 <loadACPITables(unsigned char*)+0x258>
c000d2a8:	a0 c0 1d 02 c0       	mov    al,ds:0xc0021dc0
c000d2ad:	84 c0                	test   al,al
c000d2af:	74 77                	je     c000d328 <loadACPITables(unsigned char*)+0x9c>
c000d2b1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d2b5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d2bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d2c0:	83 e8 24             	sub    eax,0x24
c000d2c3:	c1 e8 03             	shr    eax,0x3
c000d2c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d2ca:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d2d2:	66 90                	xchg   ax,ax
c000d2d4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d2d8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d2dc:	0f 8d b6 00 00 00    	jge    c000d398 <loadACPITables(unsigned char*)+0x10c>
c000d2e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d2e6:	83 c0 24             	add    eax,0x24
c000d2e9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d2ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d2f1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d2f5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d2f9:	c1 e0 03             	shl    eax,0x3
c000d2fc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d300:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d304:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d307:	8b 00                	mov    eax,DWORD PTR [eax]
c000d309:	89 c1                	mov    ecx,eax
c000d30b:	a1 ac 1b 02 c0       	mov    eax,ds:0xc0021bac
c000d310:	8d 50 01             	lea    edx,[eax+0x1]
c000d313:	89 15 ac 1b 02 c0    	mov    DWORD PTR ds:0xc0021bac,edx
c000d319:	89 ca                	mov    edx,ecx
c000d31b:	89 14 c5 c4 1b 02 c0 	mov    DWORD PTR [eax*8-0x3ffde43c],edx
c000d322:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d326:	eb ac                	jmp    c000d2d4 <loadACPITables(unsigned char*)+0x48>
c000d328:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d32c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d330:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d337:	83 e8 24             	sub    eax,0x24
c000d33a:	c1 e8 02             	shr    eax,0x2
c000d33d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d341:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d349:	8d 76 00             	lea    esi,[esi+0x0]
c000d34c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d350:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d354:	7d 42                	jge    c000d398 <loadACPITables(unsigned char*)+0x10c>
c000d356:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d35a:	83 c0 24             	add    eax,0x24
c000d35d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d361:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d365:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d369:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d36d:	c1 e0 02             	shl    eax,0x2
c000d370:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d374:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d378:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d37a:	a1 ac 1b 02 c0       	mov    eax,ds:0xc0021bac
c000d37f:	8d 50 01             	lea    edx,[eax+0x1]
c000d382:	89 15 ac 1b 02 c0    	mov    DWORD PTR ds:0xc0021bac,edx
c000d388:	89 ca                	mov    edx,ecx
c000d38a:	89 14 c5 c4 1b 02 c0 	mov    DWORD PTR [eax*8-0x3ffde43c],edx
c000d391:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d395:	eb b5                	jmp    c000d34c <loadACPITables(unsigned char*)+0xc0>
c000d397:	90                   	nop
c000d398:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d3a0:	a1 ac 1b 02 c0       	mov    eax,ds:0xc0021bac
c000d3a5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d3a9:	0f 8d 39 01 00 00    	jge    c000d4e8 <loadACPITables(unsigned char*)+0x25c>
c000d3af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d3b3:	8b 04 c5 c4 1b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde43c]
c000d3ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d3c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3ca:	25 ff 0f 00 00       	and    eax,0xfff
c000d3cf:	89 c6                	mov    esi,eax
c000d3d1:	8b 1d 94 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f694
c000d3d7:	83 ec 0c             	sub    esp,0xc
c000d3da:	6a 01                	push   0x1
c000d3dc:	e8 ac b3 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d3e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d3ee:	83 ec 0c             	sub    esp,0xc
c000d3f1:	6a 01                	push   0x1
c000d3f3:	6a 01                	push   0x1
c000d3f5:	50                   	push   eax
c000d3f6:	52                   	push   edx
c000d3f7:	53                   	push   ebx
c000d3f8:	e8 e3 bc ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d3fd:	83 c4 20             	add    esp,0x20
c000d400:	09 f0                	or     eax,esi
c000d402:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d406:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d40a:	c1 e0 03             	shl    eax,0x3
c000d40d:	05 c0 1b 02 c0       	add    eax,0xc0021bc0
c000d412:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d41a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d41e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d42e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d432:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d436:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d43a:	89 c6                	mov    esi,eax
c000d43c:	89 d7                	mov    edi,edx
c000d43e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d440:	89 c8                	mov    eax,ecx
c000d442:	89 fa                	mov    edx,edi
c000d444:	89 f3                	mov    ebx,esi
c000d446:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d44a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d44e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d452:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d459:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d45d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d461:	05 00 10 00 00       	add    eax,0x1000
c000d466:	c1 e8 0c             	shr    eax,0xc
c000d469:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d46d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d471:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d475:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d479:	25 ff 0f 00 00       	and    eax,0xfff
c000d47e:	89 c6                	mov    esi,eax
c000d480:	8b 1d 94 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f694
c000d486:	83 ec 0c             	sub    esp,0xc
c000d489:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d48d:	e8 fb b2 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c000d492:	83 c4 10             	add    esp,0x10
c000d495:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d499:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d49f:	83 ec 0c             	sub    esp,0xc
c000d4a2:	6a 01                	push   0x1
c000d4a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4a8:	50                   	push   eax
c000d4a9:	52                   	push   edx
c000d4aa:	53                   	push   ebx
c000d4ab:	e8 30 bc ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d4b0:	83 c4 20             	add    esp,0x20
c000d4b3:	09 f0                	or     eax,esi
c000d4b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bd:	83 ec 0c             	sub    esp,0xc
c000d4c0:	50                   	push   eax
c000d4c1:	e8 bb b5 ff ff       	call   c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d4cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d4d1:	89 14 c5 c4 1b 02 c0 	mov    DWORD PTR [eax*8-0x3ffde43c],edx
c000d4d8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d4dc:	e9 bf fe ff ff       	jmp    c000d3a0 <loadACPITables(unsigned char*)+0x114>
c000d4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4e4:	90                   	nop
c000d4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4e8:	83 c4 60             	add    esp,0x60
c000d4eb:	5b                   	pop    ebx
c000d4ec:	5e                   	pop    esi
c000d4ed:	5f                   	pop    edi
c000d4ee:	c3                   	ret    
c000d4ef:	90                   	nop

c000d4f0 <findRSDT(unsigned char*)>:
c000d4f0:	57                   	push   edi
c000d4f1:	56                   	push   esi
c000d4f2:	53                   	push   ebx
c000d4f3:	83 ec 50             	sub    esp,0x50
c000d4f6:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d4fb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d501:	83 e0 04             	and    eax,0x4
c000d504:	84 c0                	test   al,al
c000d506:	75 0c                	jne    c000d514 <findRSDT(unsigned char*)+0x24>
c000d508:	b8 00 00 00 00       	mov    eax,0x0
c000d50d:	e9 26 01 00 00       	jmp    c000d638 <findRSDT(unsigned char*)+0x148>
c000d512:	66 90                	xchg   ax,ax
c000d514:	89 e0                	mov    eax,esp
c000d516:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d51a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d51e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d522:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d52a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d52e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d532:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d536:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d53a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d53e:	89 c6                	mov    esi,eax
c000d540:	89 d7                	mov    edi,edx
c000d542:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d544:	89 c8                	mov    eax,ecx
c000d546:	89 fa                	mov    edx,edi
c000d548:	89 f3                	mov    ebx,esi
c000d54a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d54e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d552:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d556:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d55a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d55e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d566:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d56a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d56e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d576:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d57a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d57e:	25 ff 0f 00 00       	and    eax,0xfff
c000d583:	89 c6                	mov    esi,eax
c000d585:	8b 1d 94 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f694
c000d58b:	83 ec 0c             	sub    esp,0xc
c000d58e:	6a 02                	push   0x2
c000d590:	e8 f8 b1 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c000d595:	83 c4 10             	add    esp,0x10
c000d598:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d59c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d5a2:	83 ec 0c             	sub    esp,0xc
c000d5a5:	6a 01                	push   0x1
c000d5a7:	6a 02                	push   0x2
c000d5a9:	50                   	push   eax
c000d5aa:	52                   	push   edx
c000d5ab:	53                   	push   ebx
c000d5ac:	e8 2f bb ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d5b1:	83 c4 20             	add    esp,0x20
c000d5b4:	09 f0                	or     eax,esi
c000d5b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d5ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d5be:	25 ff 0f 00 00       	and    eax,0xfff
c000d5c3:	89 c6                	mov    esi,eax
c000d5c5:	8b 1d 94 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f694
c000d5cb:	83 ec 0c             	sub    esp,0xc
c000d5ce:	6a 02                	push   0x2
c000d5d0:	e8 b8 b1 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c000d5d5:	83 c4 10             	add    esp,0x10
c000d5d8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d5dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d5e2:	83 ec 0c             	sub    esp,0xc
c000d5e5:	6a 01                	push   0x1
c000d5e7:	6a 02                	push   0x2
c000d5e9:	50                   	push   eax
c000d5ea:	52                   	push   edx
c000d5eb:	53                   	push   ebx
c000d5ec:	e8 ef ba ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d5f1:	83 c4 20             	add    esp,0x20
c000d5f4:	09 f0                	or     eax,esi
c000d5f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d5fa:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d5ff:	75 13                	jne    c000d614 <findRSDT(unsigned char*)+0x124>
c000d601:	c6 05 c0 1d 02 c0 00 	mov    BYTE PTR ds:0xc0021dc0,0x0
c000d608:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d60c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d610:	eb 22                	jmp    c000d634 <findRSDT(unsigned char*)+0x144>
c000d612:	66 90                	xchg   ax,ax
c000d614:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d619:	75 11                	jne    c000d62c <findRSDT(unsigned char*)+0x13c>
c000d61b:	c6 05 c0 1d 02 c0 01 	mov    BYTE PTR ds:0xc0021dc0,0x1
c000d622:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d626:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d62a:	eb 08                	jmp    c000d634 <findRSDT(unsigned char*)+0x144>
c000d62c:	b8 00 00 00 00       	mov    eax,0x0
c000d631:	eb 05                	jmp    c000d638 <findRSDT(unsigned char*)+0x148>
c000d633:	90                   	nop
c000d634:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d638:	83 c4 50             	add    esp,0x50
c000d63b:	5b                   	pop    ebx
c000d63c:	5e                   	pop    esi
c000d63d:	5f                   	pop    edi
c000d63e:	c3                   	ret    
c000d63f:	90                   	nop

c000d640 <findDataTable(unsigned char*, char*)>:
c000d640:	83 ec 1c             	sub    esp,0x1c
c000d643:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d648:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d64e:	83 e0 04             	and    eax,0x4
c000d651:	84 c0                	test   al,al
c000d653:	75 07                	jne    c000d65c <findDataTable(unsigned char*, char*)+0x1c>
c000d655:	b8 00 00 00 00       	mov    eax,0x0
c000d65a:	eb 58                	jmp    c000d6b4 <findDataTable(unsigned char*, char*)+0x74>
c000d65c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d664:	a1 ac 1b 02 c0       	mov    eax,ds:0xc0021bac
c000d669:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d66d:	7d 3d                	jge    c000d6ac <findDataTable(unsigned char*, char*)+0x6c>
c000d66f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d673:	c1 e0 03             	shl    eax,0x3
c000d676:	05 c0 1b 02 c0       	add    eax,0xc0021bc0
c000d67b:	83 ec 04             	sub    esp,0x4
c000d67e:	6a 04                	push   0x4
c000d680:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d684:	50                   	push   eax
c000d685:	e8 26 2d ff ff       	call   c00003b0 <memcmp>
c000d68a:	83 c4 10             	add    esp,0x10
c000d68d:	85 c0                	test   eax,eax
c000d68f:	0f 94 c0             	sete   al
c000d692:	84 c0                	test   al,al
c000d694:	74 0e                	je     c000d6a4 <findDataTable(unsigned char*, char*)+0x64>
c000d696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d69a:	8b 04 c5 c4 1b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde43c]
c000d6a1:	eb 11                	jmp    c000d6b4 <findDataTable(unsigned char*, char*)+0x74>
c000d6a3:	90                   	nop
c000d6a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d6a8:	eb ba                	jmp    c000d664 <findDataTable(unsigned char*, char*)+0x24>
c000d6aa:	66 90                	xchg   ax,ax
c000d6ac:	b8 00 00 00 00       	mov    eax,0x0
c000d6b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d6b4:	83 c4 1c             	add    esp,0x1c
c000d6b7:	c3                   	ret    

c000d6b8 <scanMADT()>:
c000d6b8:	53                   	push   ebx
c000d6b9:	83 ec 38             	sub    esp,0x38
c000d6bc:	a1 c0 f5 01 c0       	mov    eax,ds:0xc001f5c0
c000d6c1:	25 00 04 00 00       	and    eax,0x400
c000d6c6:	74 14                	je     c000d6dc <scanMADT()+0x24>
c000d6c8:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d6cd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d6d3:	83 e2 fb             	and    edx,0xfffffffb
c000d6d6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d6dc:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d6e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d6e7:	83 e0 04             	and    eax,0x4
c000d6ea:	84 c0                	test   al,al
c000d6ec:	0f 84 8a 04 00 00    	je     c000db7c <scanMADT()+0x4c4>
c000d6f2:	e8 05 fb ff ff       	call   c000d1fc <findRSDP()>
c000d6f7:	a3 cc 1d 02 c0       	mov    ds:0xc0021dcc,eax
c000d6fc:	a1 cc 1d 02 c0       	mov    eax,ds:0xc0021dcc
c000d701:	85 c0                	test   eax,eax
c000d703:	75 1b                	jne    c000d720 <scanMADT()+0x68>
c000d705:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d70a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d710:	83 e2 fb             	and    edx,0xfffffffb
c000d713:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d719:	e9 66 04 00 00       	jmp    c000db84 <scanMADT()+0x4cc>
c000d71e:	66 90                	xchg   ax,ax
c000d720:	a1 cc 1d 02 c0       	mov    eax,ds:0xc0021dcc
c000d725:	83 ec 0c             	sub    esp,0xc
c000d728:	50                   	push   eax
c000d729:	e8 c2 fd ff ff       	call   c000d4f0 <findRSDT(unsigned char*)>
c000d72e:	83 c4 10             	add    esp,0x10
c000d731:	a3 c8 1d 02 c0       	mov    ds:0xc0021dc8,eax
c000d736:	a1 c8 1d 02 c0       	mov    eax,ds:0xc0021dc8
c000d73b:	85 c0                	test   eax,eax
c000d73d:	75 19                	jne    c000d758 <scanMADT()+0xa0>
c000d73f:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d744:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d74a:	83 e2 fb             	and    edx,0xfffffffb
c000d74d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d753:	e9 2c 04 00 00       	jmp    c000db84 <scanMADT()+0x4cc>
c000d758:	a1 c8 1d 02 c0       	mov    eax,ds:0xc0021dc8
c000d75d:	83 ec 0c             	sub    esp,0xc
c000d760:	50                   	push   eax
c000d761:	e8 26 fb ff ff       	call   c000d28c <loadACPITables(unsigned char*)>
c000d766:	83 c4 10             	add    esp,0x10
c000d769:	a1 c8 1d 02 c0       	mov    eax,ds:0xc0021dc8
c000d76e:	83 ec 08             	sub    esp,0x8
c000d771:	68 28 da 01 c0       	push   0xc001da28
c000d776:	50                   	push   eax
c000d777:	e8 c4 fe ff ff       	call   c000d640 <findDataTable(unsigned char*, char*)>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d783:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d788:	75 1a                	jne    c000d7a4 <scanMADT()+0xec>
c000d78a:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000d78f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d795:	83 e2 fe             	and    edx,0xfffffffe
c000d798:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d79e:	e9 e1 03 00 00       	jmp    c000db84 <scanMADT()+0x4cc>
c000d7a3:	90                   	nop
c000d7a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d7ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7b3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d7b7:	0f 87 c7 03 00 00    	ja     c000db84 <scanMADT()+0x4cc>
c000d7bd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d7c5:	0f 87 b9 03 00 00    	ja     c000db84 <scanMADT()+0x4cc>
c000d7cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d7d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7d7:	8d 50 01             	lea    edx,[eax+0x1]
c000d7da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d7e6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d7ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7ee:	8d 50 01             	lea    edx,[eax+0x1]
c000d7f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d7fd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d801:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d806:	0f 86 74 03 00 00    	jbe    c000db80 <scanMADT()+0x4c8>
c000d80c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d811:	75 5d                	jne    c000d870 <scanMADT()+0x1b8>
c000d813:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d817:	8d 50 01             	lea    edx,[eax+0x1]
c000d81a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d81e:	8a 15 c0 1f 02 c0    	mov    dl,BYTE PTR ds:0xc0021fc0
c000d824:	81 e2 ff 00 00 00    	and    edx,0xff
c000d82a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d82e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d832:	88 82 00 20 02 c0    	mov    BYTE PTR [edx-0x3ffde000],al
c000d838:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d83c:	8d 42 01             	lea    eax,[edx+0x1]
c000d83f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d843:	a0 c0 1f 02 c0       	mov    al,ds:0xc0021fc0
c000d848:	8d 48 01             	lea    ecx,[eax+0x1]
c000d84b:	88 0d c0 1f 02 c0    	mov    BYTE PTR ds:0xc0021fc0,cl
c000d851:	25 ff 00 00 00       	and    eax,0xff
c000d856:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d85a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000d85e:	88 90 e0 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde020],dl
c000d864:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d869:	e9 f6 02 00 00       	jmp    c000db64 <scanMADT()+0x4ac>
c000d86e:	66 90                	xchg   ax,ax
c000d870:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d875:	0f 85 29 01 00 00    	jne    c000d9a4 <scanMADT()+0x2ec>
c000d87b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d87f:	8d 50 01             	lea    edx,[eax+0x1]
c000d882:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d886:	8a 15 80 1e 02 c0    	mov    dl,BYTE PTR ds:0xc0021e80
c000d88c:	81 e2 ff 00 00 00    	and    edx,0xff
c000d892:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d896:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d89a:	88 82 a0 1e 02 c0    	mov    BYTE PTR [edx-0x3ffde160],al
c000d8a0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d8a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8ac:	01 d0                	add    eax,edx
c000d8ae:	83 c0 2c             	add    eax,0x2c
c000d8b1:	8a 00                	mov    al,BYTE PTR [eax]
c000d8b3:	31 d2                	xor    edx,edx
c000d8b5:	88 c2                	mov    dl,al
c000d8b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8bb:	8d 48 01             	lea    ecx,[eax+0x1]
c000d8be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d8c6:	25 ff 00 00 00       	and    eax,0xff
c000d8cb:	c1 e0 08             	shl    eax,0x8
c000d8ce:	89 d1                	mov    ecx,edx
c000d8d0:	09 c1                	or     ecx,eax
c000d8d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8d6:	8d 50 02             	lea    edx,[eax+0x2]
c000d8d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8dd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8e1:	25 ff 00 00 00       	and    eax,0xff
c000d8e6:	c1 e0 10             	shl    eax,0x10
c000d8e9:	09 c1                	or     ecx,eax
c000d8eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8ef:	8d 50 03             	lea    edx,[eax+0x3]
c000d8f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8fa:	25 ff 00 00 00       	and    eax,0xff
c000d8ff:	c1 e0 18             	shl    eax,0x18
c000d902:	09 c1                	or     ecx,eax
c000d904:	89 ca                	mov    edx,ecx
c000d906:	a0 80 1e 02 c0       	mov    al,ds:0xc0021e80
c000d90b:	25 ff 00 00 00       	and    eax,0xff
c000d910:	89 14 85 c0 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde140],edx
c000d917:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d91c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d920:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d924:	01 d0                	add    eax,edx
c000d926:	83 c0 2c             	add    eax,0x2c
c000d929:	8a 00                	mov    al,BYTE PTR [eax]
c000d92b:	31 d2                	xor    edx,edx
c000d92d:	88 c2                	mov    dl,al
c000d92f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d933:	8d 48 01             	lea    ecx,[eax+0x1]
c000d936:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d93a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d93e:	25 ff 00 00 00       	and    eax,0xff
c000d943:	c1 e0 08             	shl    eax,0x8
c000d946:	89 d1                	mov    ecx,edx
c000d948:	09 c1                	or     ecx,eax
c000d94a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d94e:	8d 50 02             	lea    edx,[eax+0x2]
c000d951:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d955:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d959:	25 ff 00 00 00       	and    eax,0xff
c000d95e:	c1 e0 10             	shl    eax,0x10
c000d961:	09 c1                	or     ecx,eax
c000d963:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d967:	8d 50 03             	lea    edx,[eax+0x3]
c000d96a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d96e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d972:	25 ff 00 00 00       	and    eax,0xff
c000d977:	c1 e0 18             	shl    eax,0x18
c000d97a:	09 c1                	or     ecx,eax
c000d97c:	89 ca                	mov    edx,ecx
c000d97e:	a0 80 1e 02 c0       	mov    al,ds:0xc0021e80
c000d983:	25 ff 00 00 00       	and    eax,0xff
c000d988:	89 14 85 40 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0c0],edx
c000d98f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d994:	a0 80 1e 02 c0       	mov    al,ds:0xc0021e80
c000d999:	40                   	inc    eax
c000d99a:	a2 80 1e 02 c0       	mov    ds:0xc0021e80,al
c000d99f:	e9 c0 01 00 00       	jmp    c000db64 <scanMADT()+0x4ac>
c000d9a4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d9a9:	0f 85 fd 00 00 00    	jne    c000daac <scanMADT()+0x3f4>
c000d9af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d9b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9c2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d9c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9ca:	8d 50 01             	lea    edx,[eax+0x1]
c000d9cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9d9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d9dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9e5:	01 d0                	add    eax,edx
c000d9e7:	83 c0 2c             	add    eax,0x2c
c000d9ea:	8a 00                	mov    al,BYTE PTR [eax]
c000d9ec:	31 d2                	xor    edx,edx
c000d9ee:	88 c2                	mov    dl,al
c000d9f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9f4:	8d 48 01             	lea    ecx,[eax+0x1]
c000d9f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9fb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d9ff:	25 ff 00 00 00       	and    eax,0xff
c000da04:	c1 e0 08             	shl    eax,0x8
c000da07:	89 d1                	mov    ecx,edx
c000da09:	09 c1                	or     ecx,eax
c000da0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da0f:	8d 50 02             	lea    edx,[eax+0x2]
c000da12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da16:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000da1a:	25 ff 00 00 00       	and    eax,0xff
c000da1f:	c1 e0 10             	shl    eax,0x10
c000da22:	09 c1                	or     ecx,eax
c000da24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da28:	8d 50 03             	lea    edx,[eax+0x3]
c000da2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da2f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000da33:	25 ff 00 00 00       	and    eax,0xff
c000da38:	c1 e0 18             	shl    eax,0x18
c000da3b:	09 c8                	or     eax,ecx
c000da3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da41:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000da46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da4e:	01 d0                	add    eax,edx
c000da50:	83 c0 2c             	add    eax,0x2c
c000da53:	8a 00                	mov    al,BYTE PTR [eax]
c000da55:	25 ff 00 00 00       	and    eax,0xff
c000da5a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000da5e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da65:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000da69:	81 e2 ff 00 00 00    	and    edx,0xff
c000da6f:	c1 e2 08             	shl    edx,0x8
c000da72:	09 d0                	or     eax,edx
c000da74:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000da79:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000da7e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000da82:	25 ff 00 00 00       	and    eax,0xff
c000da87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da8b:	88 90 60 ef 01 c0    	mov    BYTE PTR [eax-0x3ffe10a0],dl
c000da91:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000da95:	31 d2                	xor    edx,edx
c000da97:	88 c2                	mov    dl,al
c000da99:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000da9e:	66 89 84 12 60 1e 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffde1a0],ax
c000daa6:	e9 b9 00 00 00       	jmp    c000db64 <scanMADT()+0x4ac>
c000daab:	90                   	nop
c000daac:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000dab1:	0f 85 a1 00 00 00    	jne    c000db58 <scanMADT()+0x4a0>
c000dab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dabb:	8d 50 01             	lea    edx,[eax+0x1]
c000dabe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dac2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dac6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000daca:	25 ff 00 00 00       	and    eax,0xff
c000dacf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dad3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dad7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dadb:	01 d0                	add    eax,edx
c000dadd:	83 c0 2c             	add    eax,0x2c
c000dae0:	8a 00                	mov    al,BYTE PTR [eax]
c000dae2:	31 d2                	xor    edx,edx
c000dae4:	88 c2                	mov    dl,al
c000dae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000daea:	8d 48 01             	lea    ecx,[eax+0x1]
c000daed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000daf1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000daf5:	25 ff 00 00 00       	and    eax,0xff
c000dafa:	c1 e0 08             	shl    eax,0x8
c000dafd:	09 d0                	or     eax,edx
c000daff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db03:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000db08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db0c:	8d 50 01             	lea    edx,[eax+0x1]
c000db0f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000db13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000db17:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000db1b:	25 ff 00 00 00       	and    eax,0xff
c000db20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db28:	c1 e0 08             	shl    eax,0x8
c000db2b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000db2f:	89 c1                	mov    ecx,eax
c000db31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db35:	c1 e0 18             	shl    eax,0x18
c000db38:	89 c3                	mov    ebx,eax
c000db3a:	a1 d0 1d 02 c0       	mov    eax,ds:0xc0021dd0
c000db3f:	8d 50 01             	lea    edx,[eax+0x1]
c000db42:	89 15 d0 1d 02 c0    	mov    DWORD PTR ds:0xc0021dd0,edx
c000db48:	09 d9                	or     ecx,ebx
c000db4a:	89 ca                	mov    edx,ecx
c000db4c:	89 14 85 e0 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde220],edx
c000db53:	eb 0f                	jmp    c000db64 <scanMADT()+0x4ac>
c000db55:	8d 76 00             	lea    esi,[esi+0x0]
c000db58:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000db5d:	75 05                	jne    c000db64 <scanMADT()+0x4ac>
c000db5f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000db64:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000db68:	31 d2                	xor    edx,edx
c000db6a:	88 c2                	mov    dl,al
c000db6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db70:	01 d0                	add    eax,edx
c000db72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000db76:	e9 31 fc ff ff       	jmp    c000d7ac <scanMADT()+0xf4>
c000db7b:	90                   	nop
c000db7c:	90                   	nop
c000db7d:	eb 05                	jmp    c000db84 <scanMADT()+0x4cc>
c000db7f:	90                   	nop
c000db80:	90                   	nop
c000db81:	8d 76 00             	lea    esi,[esi+0x0]
c000db84:	83 c4 38             	add    esp,0x38
c000db87:	5b                   	pop    ebx
c000db88:	c3                   	ret    
c000db89:	90                   	nop
c000db8a:	66 90                	xchg   ax,ax

c000db8c <ACPI::ACPI()>:
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db93:	83 ec 08             	sub    esp,0x8
c000db96:	68 2d da 01 c0       	push   0xc001da2d
c000db9b:	50                   	push   eax
c000db9c:	e8 4b d4 ff ff       	call   c000afec <Device::Device(char const*)>
c000dba1:	83 c4 10             	add    esp,0x10
c000dba4:	ba 64 db 01 c0       	mov    edx,0xc001db64
c000dba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbad:	89 10                	mov    DWORD PTR [eax],edx
c000dbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000dbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000dbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbcc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000dbd6:	e8 dd fa ff ff       	call   c000d6b8 <scanMADT()>
c000dbdb:	90                   	nop
c000dbdc:	83 c4 0c             	add    esp,0xc
c000dbdf:	c3                   	ret    

c000dbe0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000dbe0:	83 ec 2c             	sub    esp,0x2c
c000dbe3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dbe7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dbeb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dbef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000dbf3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000dbf8:	88 d0                	mov    al,dl
c000dbfa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dbfe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dc03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dc0b:	90                   	nop
c000dc0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc10:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc16:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000dc1a:	0f 8d 9c 00 00 00    	jge    c000dcbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000dc20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc28:	83 c2 2a             	add    edx,0x2a
c000dc2b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000dc2f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000dc34:	75 7a                	jne    c000dcb0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dc36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc3a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc3e:	83 c2 2a             	add    edx,0x2a
c000dc41:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000dc45:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000dc49:	75 65                	jne    c000dcb0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dc4b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dc50:	74 3a                	je     c000dc8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000dc52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc5a:	83 c2 2a             	add    edx,0x2a
c000dc5d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000dc61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc68:	39 c2                	cmp    edx,eax
c000dc6a:	74 10                	je     c000dc7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000dc6c:	83 ec 0c             	sub    esp,0xc
c000dc6f:	68 a8 d9 01 c0       	push   0xc001d9a8
c000dc74:	e8 ee 18 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000dc79:	83 c4 10             	add    esp,0x10
c000dc7c:	83 ec 0c             	sub    esp,0xc
c000dc7f:	68 32 da 01 c0       	push   0xc001da32
c000dc84:	e8 de 18 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000dc89:	83 c4 10             	add    esp,0x10
c000dc8c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000dc90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc98:	83 c2 2a             	add    edx,0x2a
c000dc9b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000dc9f:	8b 02                	mov    eax,DWORD PTR [edx]
c000dca1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dca4:	89 01                	mov    DWORD PTR [ecx],eax
c000dca6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000dca9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcae:	66 90                	xchg   ax,ax
c000dcb0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000dcb4:	e9 53 ff ff ff       	jmp    c000dc0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000dcb9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcbc:	90                   	nop
c000dcbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dcc1:	83 c4 2c             	add    esp,0x2c
c000dcc4:	c2 04 00             	ret    0x4
c000dcc7:	90                   	nop

c000dcc8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000dcc8:	83 ec 1c             	sub    esp,0x1c
c000dccb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dccf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dcd3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dcd7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000dcdc:	88 c8                	mov    al,cl
c000dcde:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000dce2:	88 d0                	mov    al,dl
c000dce4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcec:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dcf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcf6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dcf9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000dcfd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000dd01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd05:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd0f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dd12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd16:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dd1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd25:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dd29:	8d 48 01             	lea    ecx,[eax+0x1]
c000dd2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd30:	83 c2 2a             	add    edx,0x2a
c000dd33:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000dd37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd3b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd45:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dd48:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd4c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000dd50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd54:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd5a:	8d 50 01             	lea    edx,[eax+0x1]
c000dd5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd61:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd71:	3d 00 02 00 00       	cmp    eax,0x200
c000dd76:	75 10                	jne    c000dd88 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dd78:	83 ec 0c             	sub    esp,0xc
c000dd7b:	68 41 da 01 c0       	push   0xc001da41
c000dd80:	e8 e2 17 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000dd85:	83 c4 10             	add    esp,0x10
c000dd88:	90                   	nop
c000dd89:	83 c4 1c             	add    esp,0x1c
c000dd8c:	c3                   	ret    
c000dd8d:	90                   	nop
c000dd8e:	66 90                	xchg   ax,ax

c000dd90 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dd90:	b8 00 00 00 00       	mov    eax,0x0
c000dd95:	c3                   	ret    
c000dd96:	66 90                	xchg   ax,ax

c000dd98 <ACPI::detectPCI()>:
c000dd98:	53                   	push   ebx
c000dd99:	83 ec 28             	sub    esp,0x28
c000dd9c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dda1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000dda6:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000ddab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000ddb1:	83 e0 04             	and    eax,0x4
c000ddb4:	84 c0                	test   al,al
c000ddb6:	74 2c                	je     c000dde4 <ACPI::detectPCI()+0x4c>
c000ddb8:	a1 c8 1d 02 c0       	mov    eax,ds:0xc0021dc8
c000ddbd:	83 ec 08             	sub    esp,0x8
c000ddc0:	68 5e da 01 c0       	push   0xc001da5e
c000ddc5:	50                   	push   eax
c000ddc6:	e8 75 f8 ff ff       	call   c000d640 <findDataTable(unsigned char*, char*)>
c000ddcb:	83 c4 10             	add    esp,0x10
c000ddce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddd2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ddd7:	74 0b                	je     c000dde4 <ACPI::detectPCI()+0x4c>
c000ddd9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ddde:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dde3:	90                   	nop
c000dde4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ddec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddf0:	8a 00                	mov    al,BYTE PTR [eax]
c000ddf2:	3c 01                	cmp    al,0x1
c000ddf4:	75 0e                	jne    c000de04 <ACPI::detectPCI()+0x6c>
c000ddf6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ddfb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000de00:	eb 2a                	jmp    c000de2c <ACPI::detectPCI()+0x94>
c000de02:	66 90                	xchg   ax,ax
c000de04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de08:	8a 00                	mov    al,BYTE PTR [eax]
c000de0a:	3c 02                	cmp    al,0x2
c000de0c:	75 1e                	jne    c000de2c <ACPI::detectPCI()+0x94>
c000de0e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de13:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000de18:	74 12                	je     c000de2c <ACPI::detectPCI()+0x94>
c000de1a:	83 ec 0c             	sub    esp,0xc
c000de1d:	68 d8 d9 01 c0       	push   0xc001d9d8
c000de22:	e8 40 17 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000de27:	83 c4 10             	add    esp,0x10
c000de2a:	66 90                	xchg   ax,ax
c000de2c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000de30:	83 f0 01             	xor    eax,0x1
c000de33:	84 c0                	test   al,al
c000de35:	74 41                	je     c000de78 <ACPI::detectPCI()+0xe0>
c000de37:	e8 14 23 ff ff       	call   c0000150 <manualPCIProbe>
c000de3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de40:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000de45:	75 0d                	jne    c000de54 <ACPI::detectPCI()+0xbc>
c000de47:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de4c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000de51:	eb 25                	jmp    c000de78 <ACPI::detectPCI()+0xe0>
c000de53:	90                   	nop
c000de54:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000de59:	75 1d                	jne    c000de78 <ACPI::detectPCI()+0xe0>
c000de5b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de60:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000de65:	74 11                	je     c000de78 <ACPI::detectPCI()+0xe0>
c000de67:	83 ec 0c             	sub    esp,0xc
c000de6a:	68 d8 d9 01 c0       	push   0xc001d9d8
c000de6f:	e8 f3 16 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000de74:	83 c4 10             	add    esp,0x10
c000de77:	90                   	nop
c000de78:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000de7d:	0f 84 85 00 00 00    	je     c000df08 <ACPI::detectPCI()+0x170>
c000de83:	83 ec 0c             	sub    esp,0xc
c000de86:	68 63 da 01 c0       	push   0xc001da63
c000de8b:	e8 1b 8e ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000de9b:	83 ec 0c             	sub    esp,0xc
c000de9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dea2:	e8 aa 8d ff ff       	call   c0006c51 <malloc>
c000dea7:	83 c4 10             	add    esp,0x10
c000deaa:	89 c3                	mov    ebx,eax
c000deac:	83 ec 0c             	sub    esp,0xc
c000deaf:	53                   	push   ebx
c000deb0:	e8 09 9c 00 00       	call   c0017abe <PCI::PCI()>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000debc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dec0:	83 ec 08             	sub    esp,0x8
c000dec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dec7:	50                   	push   eax
c000dec8:	e8 87 cf ff ff       	call   c000ae54 <Device::addChild(Device*)>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ded4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ded6:	83 c0 08             	add    eax,0x8
c000ded9:	8b 00                	mov    eax,DWORD PTR [eax]
c000dedb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dee0:	74 0a                	je     c000deec <ACPI::detectPCI()+0x154>
c000dee2:	ba 01 00 00 00       	mov    edx,0x1
c000dee7:	eb 0b                	jmp    c000def4 <ACPI::detectPCI()+0x15c>
c000dee9:	8d 76 00             	lea    esi,[esi+0x0]
c000deec:	ba 02 00 00 00       	mov    edx,0x2
c000def1:	8d 76 00             	lea    esi,[esi+0x0]
c000def4:	6a 00                	push   0x0
c000def6:	6a 00                	push   0x0
c000def8:	52                   	push   edx
c000def9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000defd:	ff d0                	call   eax
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	e9 91 00 00 00       	jmp    c000df98 <ACPI::detectPCI()+0x200>
c000df07:	90                   	nop
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	68 7b da 01 c0       	push   0xc001da7b
c000df10:	e8 96 8d ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000df15:	83 c4 10             	add    esp,0x10
c000df18:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000df1f:	83 ec 0c             	sub    esp,0xc
c000df22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df26:	e8 26 8d ff ff       	call   c0006c51 <malloc>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	89 c3                	mov    ebx,eax
c000df30:	83 ec 0c             	sub    esp,0xc
c000df33:	53                   	push   ebx
c000df34:	e8 b1 a6 00 00       	call   c00185ea <IDE::IDE()>
c000df39:	83 c4 10             	add    esp,0x10
c000df3c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000df40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df44:	83 ec 08             	sub    esp,0x8
c000df47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df4b:	50                   	push   eax
c000df4c:	e8 03 cf ff ff       	call   c000ae54 <Device::addChild(Device*)>
c000df51:	83 c4 10             	add    esp,0x10
c000df54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df58:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000df62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df66:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000df6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df73:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000df7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df80:	8b 00                	mov    eax,DWORD PTR [eax]
c000df82:	83 c0 08             	add    eax,0x8
c000df85:	8b 00                	mov    eax,DWORD PTR [eax]
c000df87:	6a 00                	push   0x0
c000df89:	6a 00                	push   0x0
c000df8b:	6a 00                	push   0x0
c000df8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df91:	ff d0                	call   eax
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	66 90                	xchg   ax,ax
c000df98:	90                   	nop
c000df99:	83 c4 28             	add    esp,0x28
c000df9c:	5b                   	pop    ebx
c000df9d:	c3                   	ret    
c000df9e:	66 90                	xchg   ax,ax

c000dfa0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000dfa0:	83 ec 1c             	sub    esp,0x1c
c000dfa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dfa7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dfaa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dfae:	8b 15 a8 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5a8
c000dfb4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfb8:	25 ff 00 00 00       	and    eax,0xff
c000dfbd:	83 ec 08             	sub    esp,0x8
c000dfc0:	50                   	push   eax
c000dfc1:	52                   	push   edx
c000dfc2:	e8 0b 83 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dfce:	8b 15 a8 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5a8
c000dfd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfd8:	25 ff 00 00 00       	and    eax,0xff
c000dfdd:	83 ec 04             	sub    esp,0x4
c000dfe0:	6a 01                	push   0x1
c000dfe2:	50                   	push   eax
c000dfe3:	52                   	push   edx
c000dfe4:	e8 ff 83 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c000dfe9:	83 c4 10             	add    esp,0x10
c000dfec:	90                   	nop
c000dfed:	83 c4 1c             	add    esp,0x1c
c000dff0:	c3                   	ret    
c000dff1:	90                   	nop
c000dff2:	66 90                	xchg   ax,ax

c000dff4 <ACPI::sleep()>:
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	a1 a0 1b 02 c0       	mov    eax,ds:0xc0021ba0
c000dffc:	85 c0                	test   eax,eax
c000dffe:	74 08                	je     c000e008 <ACPI::sleep()+0x14>
c000e000:	a1 a0 1b 02 c0       	mov    eax,ds:0xc0021ba0
c000e005:	ff d0                	call   eax
c000e007:	90                   	nop
c000e008:	90                   	nop
c000e009:	83 c4 0c             	add    esp,0xc
c000e00c:	c3                   	ret    
c000e00d:	90                   	nop
c000e00e:	66 90                	xchg   ax,ax

c000e010 <ACPI::open(int, int, void*)>:
c000e010:	57                   	push   edi
c000e011:	56                   	push   esi
c000e012:	53                   	push   ebx
c000e013:	81 ec 70 01 00 00    	sub    esp,0x170
c000e019:	83 ec 0c             	sub    esp,0xc
c000e01c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e023:	e8 70 fd ff ff       	call   c000dd98 <ACPI::detectPCI()>
c000e028:	83 c4 10             	add    esp,0x10
c000e02b:	83 ec 0c             	sub    esp,0xc
c000e02e:	68 00 da 01 c0       	push   0xc001da00
c000e033:	e8 73 8c ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000e038:	83 c4 10             	add    esp,0x10
c000e03b:	83 ec 0c             	sub    esp,0xc
c000e03e:	68 90 da 01 c0       	push   0xc001da90
c000e043:	e8 95 35 00 00       	call   c00115dd <Thr::loadKernelSymbolTable(char const*)>
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000e053:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000e05e:	83 ec 0c             	sub    esp,0xc
c000e061:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e068:	e8 e4 8b ff ff       	call   c0006c51 <malloc>
c000e06d:	83 c4 10             	add    esp,0x10
c000e070:	89 c3                	mov    ebx,eax
c000e072:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c000e077:	83 ec 04             	sub    esp,0x4
c000e07a:	50                   	push   eax
c000e07b:	68 ae da 01 c0       	push   0xc001daae
c000e080:	53                   	push   ebx
c000e081:	e8 04 bf ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000e090:	83 ec 08             	sub    esp,0x8
c000e093:	6a 01                	push   0x1
c000e095:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e09c:	e8 a9 bf ff ff       	call   c000a04a <File::open(FileOpenMode)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000e0ab:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000e0b3:	75 17                	jne    c000e0cc <ACPI::open(int, int, void*)+0xbc>
c000e0b5:	83 ec 0c             	sub    esp,0xc
c000e0b8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e0bf:	e8 e4 bf ff ff       	call   c000a0a8 <File::close()>
c000e0c4:	83 c4 10             	add    esp,0x10
c000e0c7:	eb 0b                	jmp    c000e0d4 <ACPI::open(int, int, void*)+0xc4>
c000e0c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e0cc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000e0d4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000e0dc:	74 1e                	je     c000e0fc <ACPI::open(int, int, void*)+0xec>
c000e0de:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000e0e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0e7:	83 c0 08             	add    eax,0x8
c000e0ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0ec:	83 ec 0c             	sub    esp,0xc
c000e0ef:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e0f6:	ff d0                	call   eax
c000e0f8:	83 c4 10             	add    esp,0x10
c000e0fb:	90                   	nop
c000e0fc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000e103:	83 f0 01             	xor    eax,0x1
c000e106:	84 c0                	test   al,al
c000e108:	74 42                	je     c000e14c <ACPI::open(int, int, void*)+0x13c>
c000e10a:	83 ec 0c             	sub    esp,0xc
c000e10d:	68 cc da 01 c0       	push   0xc001dacc
c000e112:	e8 94 8b ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	83 ec 04             	sub    esp,0x4
c000e11d:	6a 0c                	push   0xc
c000e11f:	68 e7 da 01 c0       	push   0xc001dae7
c000e124:	68 f8 da 01 c0       	push   0xc001daf8
c000e129:	e8 ae 1c 00 00       	call   c000fddc <Reg::readIntWithDefault(char*, char*, int)>
c000e12e:	83 c4 10             	add    esp,0x10
c000e131:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000e138:	83 ec 0c             	sub    esp,0xc
c000e13b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000e142:	e8 50 a8 ff ff       	call   c0008997 <Virt::setupPageSwapping(int)>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	66 90                	xchg   ax,ax
c000e14c:	83 ec 0c             	sub    esp,0xc
c000e14f:	68 6f cb 01 c0       	push   0xc001cb6f
c000e154:	e8 52 8b ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000e159:	83 c4 10             	add    esp,0x10
c000e15c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000e163:	83 ec 08             	sub    esp,0x8
c000e166:	6a 12                	push   0x12
c000e168:	50                   	push   eax
c000e169:	e8 fe cf ff ff       	call   c000b16c <getDevicesOfType(DeviceType)>
c000e16e:	83 c4 0c             	add    esp,0xc
c000e171:	8d 76 00             	lea    esi,[esi+0x0]
c000e174:	83 ec 0c             	sub    esp,0xc
c000e177:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e17e:	50                   	push   eax
c000e17f:	e8 f8 dd 00 00       	call   c001bf7c <LinkedList<Device>::isEmpty()>
c000e184:	83 c4 10             	add    esp,0x10
c000e187:	83 f0 01             	xor    eax,0x1
c000e18a:	84 c0                	test   al,al
c000e18c:	0f 84 46 01 00 00    	je     c000e2d8 <ACPI::open(int, int, void*)+0x2c8>
c000e192:	83 ec 0c             	sub    esp,0xc
c000e195:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e19c:	50                   	push   eax
c000e19d:	e8 f6 dd 00 00       	call   c001bf98 <LinkedList<Device>::getFirstElement()>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e1ac:	83 ec 0c             	sub    esp,0xc
c000e1af:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e1b6:	50                   	push   eax
c000e1b7:	e8 e4 dd 00 00       	call   c001bfa0 <LinkedList<Device>::removeFirst()>
c000e1bc:	83 c4 10             	add    esp,0x10
c000e1bf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e1c6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e1cd:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e1d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1d8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e1de:	ba 09 00 00 00       	mov    edx,0x9
c000e1e3:	fc                   	cld    
c000e1e4:	89 c7                	mov    edi,eax
c000e1e6:	89 de                	mov    esi,ebx
c000e1e8:	89 d1                	mov    ecx,edx
c000e1ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e1ec:	83 ec 08             	sub    esp,0x8
c000e1ef:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e1f3:	50                   	push   eax
c000e1f4:	83 ec 24             	sub    esp,0x24
c000e1f7:	89 e0                	mov    eax,esp
c000e1f9:	89 c3                	mov    ebx,eax
c000e1fb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e1ff:	ba 09 00 00 00       	mov    edx,0x9
c000e204:	89 df                	mov    edi,ebx
c000e206:	89 c6                	mov    esi,eax
c000e208:	89 d1                	mov    ecx,edx
c000e20a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e20c:	e8 8f 9d 00 00       	call   c0017fa0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e211:	83 c4 30             	add    esp,0x30
c000e214:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e21b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e223:	0f 84 4b ff ff ff    	je     c000e174 <ACPI::open(int, int, void*)+0x164>
c000e229:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e234:	83 ec 0c             	sub    esp,0xc
c000e237:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e23e:	e8 0e 8a ff ff       	call   c0006c51 <malloc>
c000e243:	83 c4 10             	add    esp,0x10
c000e246:	89 c3                	mov    ebx,eax
c000e248:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c000e24d:	83 ec 04             	sub    esp,0x4
c000e250:	50                   	push   eax
c000e251:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e258:	53                   	push   ebx
c000e259:	e8 2c bd ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e268:	83 ec 0c             	sub    esp,0xc
c000e26b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e272:	e8 41 c0 ff ff       	call   c000a2b8 <File::exists()>
c000e277:	83 c4 10             	add    esp,0x10
c000e27a:	84 c0                	test   al,al
c000e27c:	74 2a                	je     c000e2a8 <ACPI::open(int, int, void*)+0x298>
c000e27e:	83 ec 08             	sub    esp,0x8
c000e281:	6a 01                	push   0x1
c000e283:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e28a:	e8 c5 3d 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000e28f:	83 c4 10             	add    esp,0x10
c000e292:	83 ec 08             	sub    esp,0x8
c000e295:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e29c:	50                   	push   eax
c000e29d:	e8 e3 3f 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000e2a2:	83 c4 10             	add    esp,0x10
c000e2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2a8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e2b0:	0f 84 be fe ff ff    	je     c000e174 <ACPI::open(int, int, void*)+0x164>
c000e2b6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e2bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2bf:	83 c0 08             	add    eax,0x8
c000e2c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e2ce:	ff d0                	call   eax
c000e2d0:	83 c4 10             	add    esp,0x10
c000e2d3:	e9 9c fe ff ff       	jmp    c000e174 <ACPI::open(int, int, void*)+0x164>
c000e2d8:	83 ec 0c             	sub    esp,0xc
c000e2db:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e2e2:	50                   	push   eax
c000e2e3:	e8 90 dc 00 00       	call   c001bf78 <LinkedList<Device>::~LinkedList()>
c000e2e8:	83 c4 10             	add    esp,0x10
c000e2eb:	8b 1d a8 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5a8
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	6a 01                	push   0x1
c000e2f6:	68 ff da 01 c0       	push   0xc001daff
c000e2fb:	e8 54 3d 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000e300:	83 c4 10             	add    esp,0x10
c000e303:	83 ec 08             	sub    esp,0x8
c000e306:	53                   	push   ebx
c000e307:	50                   	push   eax
c000e308:	e8 78 3f 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000e30d:	83 c4 10             	add    esp,0x10
c000e310:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000e315:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000e31b:	83 e0 04             	and    eax,0x4
c000e31e:	84 c0                	test   al,al
c000e320:	0f 84 16 01 00 00    	je     c000e43c <ACPI::open(int, int, void*)+0x42c>
c000e326:	83 ec 0c             	sub    esp,0xc
c000e329:	68 1c db 01 c0       	push   0xc001db1c
c000e32e:	e8 78 89 ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000e333:	83 c4 10             	add    esp,0x10
c000e336:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e341:	83 ec 0c             	sub    esp,0xc
c000e344:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e34b:	e8 01 89 ff ff       	call   c0006c51 <malloc>
c000e350:	83 c4 10             	add    esp,0x10
c000e353:	89 c3                	mov    ebx,eax
c000e355:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c000e35a:	83 ec 04             	sub    esp,0x4
c000e35d:	50                   	push   eax
c000e35e:	68 39 db 01 c0       	push   0xc001db39
c000e363:	53                   	push   ebx
c000e364:	e8 21 bc ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000e369:	83 c4 10             	add    esp,0x10
c000e36c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e373:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e37b:	74 1b                	je     c000e398 <ACPI::open(int, int, void*)+0x388>
c000e37d:	83 ec 0c             	sub    esp,0xc
c000e380:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e387:	e8 2c bf ff ff       	call   c000a2b8 <File::exists()>
c000e38c:	83 c4 10             	add    esp,0x10
c000e38f:	84 c0                	test   al,al
c000e391:	74 05                	je     c000e398 <ACPI::open(int, int, void*)+0x388>
c000e393:	b0 01                	mov    al,0x1
c000e395:	eb 05                	jmp    c000e39c <ACPI::open(int, int, void*)+0x38c>
c000e397:	90                   	nop
c000e398:	b0 00                	mov    al,0x0
c000e39a:	66 90                	xchg   ax,ax
c000e39c:	84 c0                	test   al,al
c000e39e:	74 28                	je     c000e3c8 <ACPI::open(int, int, void*)+0x3b8>
c000e3a0:	83 ec 08             	sub    esp,0x8
c000e3a3:	6a 01                	push   0x1
c000e3a5:	68 39 db 01 c0       	push   0xc001db39
c000e3aa:	e8 a5 3c 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	83 ec 08             	sub    esp,0x8
c000e3b5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e3bc:	50                   	push   eax
c000e3bd:	e8 c3 3e 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000e3c2:	83 c4 10             	add    esp,0x10
c000e3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e3d0:	74 2a                	je     c000e3fc <ACPI::open(int, int, void*)+0x3ec>
c000e3d2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e3da:	74 20                	je     c000e3fc <ACPI::open(int, int, void*)+0x3ec>
c000e3dc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e3e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3e5:	83 c0 08             	add    eax,0x8
c000e3e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3ea:	83 ec 0c             	sub    esp,0xc
c000e3ed:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e3f4:	ff d0                	call   eax
c000e3f6:	83 c4 10             	add    esp,0x10
c000e3f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3fc:	a1 c8 1d 02 c0       	mov    eax,ds:0xc0021dc8
c000e401:	83 ec 08             	sub    esp,0x8
c000e404:	68 56 db 01 c0       	push   0xc001db56
c000e409:	50                   	push   eax
c000e40a:	e8 31 f2 ff ff       	call   c000d640 <findDataTable(unsigned char*, char*)>
c000e40f:	83 c4 10             	add    esp,0x10
c000e412:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e419:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e421:	74 19                	je     c000e43c <ACPI::open(int, int, void*)+0x42c>
c000e423:	83 ec 08             	sub    esp,0x8
c000e426:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e42d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e434:	e8 67 fb ff ff       	call   c000dfa0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e439:	83 c4 10             	add    esp,0x10
c000e43c:	b8 00 00 00 00       	mov    eax,0x0
c000e441:	81 c4 70 01 00 00    	add    esp,0x170
c000e447:	5b                   	pop    ebx
c000e448:	5e                   	pop    esi
c000e449:	5f                   	pop    edi
c000e44a:	c3                   	ret    
c000e44b:	90                   	nop

c000e44c <CPU::close(int, int, void*)>:
c000e44c:	31 c0                	xor    eax,eax
c000e44e:	c3                   	ret    
c000e44f:	90                   	nop

c000e450 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e450:	60                   	pusha  
c000e451:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e455:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e459:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e45d:	9c                   	pushf  
c000e45e:	fa                   	cli    
c000e45f:	0f 09                	wbinvd 
c000e461:	0f 30                	wrmsr  
c000e463:	9d                   	popf   
c000e464:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e468:	89 02                	mov    DWORD PTR [edx],eax
c000e46a:	61                   	popa   
c000e46b:	c3                   	ret    

c000e46c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e46c:	60                   	pusha  
c000e46d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e471:	9c                   	pushf  
c000e472:	fa                   	cli    
c000e473:	0f 09                	wbinvd 
c000e475:	31 c0                	xor    eax,eax
c000e477:	31 d2                	xor    edx,edx
c000e479:	0f 32                	rdmsr  
c000e47b:	9d                   	popf   
c000e47c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e480:	89 02                	mov    DWORD PTR [edx],eax
c000e482:	61                   	popa   
c000e483:	c3                   	ret    

c000e484 <CPU::AMD_K6_writeback(int, int, int)>:
c000e484:	56                   	push   esi
c000e485:	53                   	push   ebx
c000e486:	83 ec 10             	sub    esp,0x10
c000e489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e48d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e492:	75 5d                	jne    c000e4f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e494:	83 f8 08             	cmp    eax,0x8
c000e497:	75 09                	jne    c000e4a2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e499:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e49e:	7e 13                	jle    c000e4b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e4a0:	eb 30                	jmp    c000e4d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e4a2:	83 f8 06             	cmp    eax,0x6
c000e4a5:	7c 4a                	jl     c000e4f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e4a7:	83 f8 07             	cmp    eax,0x7
c000e4aa:	7e 07                	jle    c000e4b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e4ac:	83 f8 09             	cmp    eax,0x9
c000e4af:	74 21                	je     c000e4d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e4b1:	eb 3e                	jmp    c000e4f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e4b3:	89 e6                	mov    esi,esp
c000e4b5:	8b 1d cc f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5cc
c000e4bb:	56                   	push   esi
c000e4bc:	c1 eb 15             	shr    ebx,0x15
c000e4bf:	68 82 00 00 c0       	push   0xc0000082
c000e4c4:	83 e3 7e             	and    ebx,0x7e
c000e4c7:	e8 a0 ff ff ff       	call   c000e46c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e4cc:	56                   	push   esi
c000e4cd:	6a 00                	push   0x0
c000e4cf:	53                   	push   ebx
c000e4d0:	eb 12                	jmp    c000e4e4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e4d2:	89 e3                	mov    ebx,esp
c000e4d4:	53                   	push   ebx
c000e4d5:	68 82 00 00 c0       	push   0xc0000082
c000e4da:	e8 8d ff ff ff       	call   c000e46c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e4df:	53                   	push   ebx
c000e4e0:	6a 00                	push   0x0
c000e4e2:	6a 00                	push   0x0
c000e4e4:	68 82 00 00 c0       	push   0xc0000082
c000e4e9:	e8 62 ff ff ff       	call   c000e450 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e4ee:	83 c4 18             	add    esp,0x18
c000e4f1:	83 c4 10             	add    esp,0x10
c000e4f4:	5b                   	pop    ebx
c000e4f5:	5e                   	pop    esi
c000e4f6:	c3                   	ret    
c000e4f7:	90                   	nop

c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e4f8:	55                   	push   ebp
c000e4f9:	57                   	push   edi
c000e4fa:	56                   	push   esi
c000e4fb:	53                   	push   ebx
c000e4fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e500:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e504:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e508:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e50c:	39 05 70 ef 01 c0    	cmp    DWORD PTR ds:0xc001ef70,eax
c000e512:	75 23                	jne    c000e537 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e514:	a1 2c 20 02 c0       	mov    eax,ds:0xc002202c
c000e519:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e51d:	89 06                	mov    DWORD PTR [esi],eax
c000e51f:	a1 28 20 02 c0       	mov    eax,ds:0xc0022028
c000e524:	89 07                	mov    DWORD PTR [edi],eax
c000e526:	a1 24 20 02 c0       	mov    eax,ds:0xc0022024
c000e52b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e52e:	a1 20 20 02 c0       	mov    eax,ds:0xc0022020
c000e533:	89 02                	mov    DWORD PTR [edx],eax
c000e535:	eb 3f                	jmp    c000e576 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e537:	31 c9                	xor    ecx,ecx
c000e539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e53d:	0f a2                	cpuid  
c000e53f:	89 06                	mov    DWORD PTR [esi],eax
c000e541:	89 1f                	mov    DWORD PTR [edi],ebx
c000e543:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e547:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e54a:	89 10                	mov    DWORD PTR [eax],edx
c000e54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e550:	a3 70 ef 01 c0       	mov    ds:0xc001ef70,eax
c000e555:	8b 06                	mov    eax,DWORD PTR [esi]
c000e557:	a3 2c 20 02 c0       	mov    ds:0xc002202c,eax
c000e55c:	8b 07                	mov    eax,DWORD PTR [edi]
c000e55e:	a3 28 20 02 c0       	mov    ds:0xc0022028,eax
c000e563:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e566:	a3 24 20 02 c0       	mov    ds:0xc0022024,eax
c000e56b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e56f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e571:	a3 20 20 02 c0       	mov    ds:0xc0022020,eax
c000e576:	5b                   	pop    ebx
c000e577:	5e                   	pop    esi
c000e578:	5f                   	pop    edi
c000e579:	5d                   	pop    ebp
c000e57a:	c3                   	ret    
c000e57b:	90                   	nop

c000e57c <CPU::cpuidCheckEDX(unsigned int)>:
c000e57c:	83 ec 10             	sub    esp,0x10
c000e57f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e583:	50                   	push   eax
c000e584:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e588:	50                   	push   eax
c000e589:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e58d:	50                   	push   eax
c000e58e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e592:	50                   	push   eax
c000e593:	6a 01                	push   0x1
c000e595:	e8 5e ff ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e59a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e59e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e5a2:	0f 95 c0             	setne  al
c000e5a5:	83 c4 24             	add    esp,0x24
c000e5a8:	c3                   	ret    
c000e5a9:	90                   	nop

c000e5aa <CPU::cpuidCheckECX(unsigned int)>:
c000e5aa:	83 ec 10             	sub    esp,0x10
c000e5ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5b1:	50                   	push   eax
c000e5b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5b6:	50                   	push   eax
c000e5b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5bb:	50                   	push   eax
c000e5bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5c0:	50                   	push   eax
c000e5c1:	6a 01                	push   0x1
c000e5c3:	e8 30 ff ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e5c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e5d0:	0f 95 c0             	setne  al
c000e5d3:	83 c4 24             	add    esp,0x24
c000e5d6:	c3                   	ret    
c000e5d7:	90                   	nop

c000e5d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e5d8:	83 ec 10             	sub    esp,0x10
c000e5db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5df:	50                   	push   eax
c000e5e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5e4:	50                   	push   eax
c000e5e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5e9:	50                   	push   eax
c000e5ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5ee:	50                   	push   eax
c000e5ef:	6a 07                	push   0x7
c000e5f1:	e8 02 ff ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e5f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5fa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e5fe:	0f 95 c0             	setne  al
c000e601:	83 c4 24             	add    esp,0x24
c000e604:	c3                   	ret    
c000e605:	90                   	nop

c000e606 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e606:	83 ec 10             	sub    esp,0x10
c000e609:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e60d:	50                   	push   eax
c000e60e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e612:	50                   	push   eax
c000e613:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e617:	50                   	push   eax
c000e618:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e61c:	50                   	push   eax
c000e61d:	6a 07                	push   0x7
c000e61f:	e8 d4 fe ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e624:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e628:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e62c:	0f 95 c0             	setne  al
c000e62f:	83 c4 24             	add    esp,0x24
c000e632:	c3                   	ret    
c000e633:	90                   	nop

c000e634 <CPU::CPU()>:
c000e634:	83 ec 0c             	sub    esp,0xc
c000e637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63b:	83 ec 08             	sub    esp,0x8
c000e63e:	68 79 dc 01 c0       	push   0xc001dc79
c000e643:	50                   	push   eax
c000e644:	e8 a3 c9 ff ff       	call   c000afec <Device::Device(char const*)>
c000e649:	83 c4 10             	add    esp,0x10
c000e64c:	ba 00 dd 01 c0       	mov    edx,0xc001dd00
c000e651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e655:	89 10                	mov    DWORD PTR [eax],edx
c000e657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e669:	05 78 01 00 00       	add    eax,0x178
c000e66e:	83 ec 0c             	sub    esp,0xc
c000e671:	50                   	push   eax
c000e672:	e8 5b 7e ff ff       	call   c00064d2 <GDT::GDT()>
c000e677:	83 c4 10             	add    esp,0x10
c000e67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67e:	05 7c 09 00 00       	add    eax,0x97c
c000e683:	83 ec 0c             	sub    esp,0xc
c000e686:	50                   	push   eax
c000e687:	e8 c0 80 ff ff       	call   c000674c <IDT::IDT()>
c000e68c:	83 c4 10             	add    esp,0x10
c000e68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e693:	05 7c 11 00 00       	add    eax,0x117c
c000e698:	83 ec 0c             	sub    esp,0xc
c000e69b:	50                   	push   eax
c000e69c:	e8 2f 9a ff ff       	call   c00080d0 <TSS::TSS()>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e6bd:	90                   	nop
c000e6be:	83 c4 0c             	add    esp,0xc
c000e6c1:	c3                   	ret    

c000e6c2 <CPU::displayFeatures()>:
c000e6c2:	c3                   	ret    
c000e6c3:	90                   	nop

c000e6c4 <CPU::detectFeatures()>:
c000e6c4:	55                   	push   ebp
c000e6c5:	57                   	push   edi
c000e6c6:	56                   	push   esi
c000e6c7:	53                   	push   ebx
c000e6c8:	83 ec 30             	sub    esp,0x30
c000e6cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e6cf:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e6d9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e6e0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e6e6:	6a 0d                	push   0xd
c000e6e8:	6a 00                	push   0x0
c000e6ea:	55                   	push   ebp
c000e6eb:	e8 00 1e ff ff       	call   c00004f0 <memset>
c000e6f0:	83 c4 10             	add    esp,0x10
c000e6f3:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000e6f8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c000e6ff:	0f 84 d5 05 00 00    	je     c000ecda <CPU::detectFeatures()+0x616>
c000e705:	83 ec 0c             	sub    esp,0xc
c000e708:	89 ef                	mov    edi,ebp
c000e70a:	6a 10                	push   0x10
c000e70c:	e8 6b fe ff ff       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c000e711:	83 e0 01             	and    eax,0x1
c000e714:	8d 14 00             	lea    edx,[eax+eax*1]
c000e717:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e71d:	83 e0 fd             	and    eax,0xfffffffd
c000e720:	09 d0                	or     eax,edx
c000e722:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e728:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e72f:	e8 48 fe ff ff       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c000e734:	83 e0 01             	and    eax,0x1
c000e737:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e73e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e744:	83 e0 fb             	and    eax,0xfffffffb
c000e747:	09 d0                	or     eax,edx
c000e749:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e74f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e756:	e8 21 fe ff ff       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c000e75b:	83 e0 01             	and    eax,0x1
c000e75e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e765:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e76b:	83 e0 f7             	and    eax,0xfffffff7
c000e76e:	09 d0                	or     eax,edx
c000e770:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e776:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e77d:	e8 fa fd ff ff       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c000e782:	83 e0 01             	and    eax,0x1
c000e785:	c1 e0 04             	shl    eax,0x4
c000e788:	88 c2                	mov    dl,al
c000e78a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e790:	83 e0 ef             	and    eax,0xffffffef
c000e793:	09 d0                	or     eax,edx
c000e795:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e79b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e7a2:	e8 d5 fd ff ff       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c000e7a7:	83 e0 01             	and    eax,0x1
c000e7aa:	c1 e0 05             	shl    eax,0x5
c000e7ad:	88 c2                	mov    dl,al
c000e7af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e7b5:	83 e0 df             	and    eax,0xffffffdf
c000e7b8:	09 d0                	or     eax,edx
c000e7ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e7c0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e7c7:	e8 b0 fd ff ff       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c000e7cc:	83 e0 01             	and    eax,0x1
c000e7cf:	8d 14 00             	lea    edx,[eax+eax*1]
c000e7d2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e7d8:	83 e0 fd             	and    eax,0xfffffffd
c000e7db:	09 d0                	or     eax,edx
c000e7dd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e7e3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e7ea:	e8 8d fd ff ff       	call   c000e57c <CPU::cpuidCheckEDX(unsigned int)>
c000e7ef:	83 e0 01             	and    eax,0x1
c000e7f2:	c1 e0 06             	shl    eax,0x6
c000e7f5:	88 c2                	mov    dl,al
c000e7f7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e7fd:	83 e0 bf             	and    eax,0xffffffbf
c000e800:	09 d0                	or     eax,edx
c000e802:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e808:	58                   	pop    eax
c000e809:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e80d:	50                   	push   eax
c000e80e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e812:	50                   	push   eax
c000e813:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e817:	56                   	push   esi
c000e818:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e81c:	50                   	push   eax
c000e81d:	6a 00                	push   0x0
c000e81f:	e8 d4 fc ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e824:	b8 04 00 00 00       	mov    eax,0x4
c000e829:	89 c1                	mov    ecx,eax
c000e82b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e82d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e833:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e837:	89 c1                	mov    ecx,eax
c000e839:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e83b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e841:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e845:	89 c1                	mov    ecx,eax
c000e847:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e849:	83 c4 18             	add    esp,0x18
c000e84c:	68 88 db 01 c0       	push   0xc001db88
c000e851:	55                   	push   ebp
c000e852:	e8 a9 1e ff ff       	call   c0000700 <strcmp>
c000e857:	83 c4 10             	add    esp,0x10
c000e85a:	85 c0                	test   eax,eax
c000e85c:	75 0f                	jne    c000e86d <CPU::detectFeatures()+0x1a9>
c000e85e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e868:	e9 22 02 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e86d:	50                   	push   eax
c000e86e:	50                   	push   eax
c000e86f:	68 95 db 01 c0       	push   0xc001db95
c000e874:	55                   	push   ebp
c000e875:	e8 86 1e ff ff       	call   c0000700 <strcmp>
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	85 c0                	test   eax,eax
c000e87f:	74 dd                	je     c000e85e <CPU::detectFeatures()+0x19a>
c000e881:	50                   	push   eax
c000e882:	50                   	push   eax
c000e883:	68 a2 db 01 c0       	push   0xc001dba2
c000e888:	55                   	push   ebp
c000e889:	e8 72 1e ff ff       	call   c0000700 <strcmp>
c000e88e:	83 c4 10             	add    esp,0x10
c000e891:	85 c0                	test   eax,eax
c000e893:	74 2a                	je     c000e8bf <CPU::detectFeatures()+0x1fb>
c000e895:	50                   	push   eax
c000e896:	50                   	push   eax
c000e897:	68 af db 01 c0       	push   0xc001dbaf
c000e89c:	55                   	push   ebp
c000e89d:	e8 5e 1e ff ff       	call   c0000700 <strcmp>
c000e8a2:	83 c4 10             	add    esp,0x10
c000e8a5:	85 c0                	test   eax,eax
c000e8a7:	74 16                	je     c000e8bf <CPU::detectFeatures()+0x1fb>
c000e8a9:	50                   	push   eax
c000e8aa:	50                   	push   eax
c000e8ab:	68 bc db 01 c0       	push   0xc001dbbc
c000e8b0:	55                   	push   ebp
c000e8b1:	e8 4a 1e ff ff       	call   c0000700 <strcmp>
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	85 c0                	test   eax,eax
c000e8bb:	74 48                	je     c000e905 <CPU::detectFeatures()+0x241>
c000e8bd:	eb 0f                	jmp    c000e8ce <CPU::detectFeatures()+0x20a>
c000e8bf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e8c9:	e9 c1 01 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e8ce:	50                   	push   eax
c000e8cf:	50                   	push   eax
c000e8d0:	68 c9 db 01 c0       	push   0xc001dbc9
c000e8d5:	55                   	push   ebp
c000e8d6:	e8 25 1e ff ff       	call   c0000700 <strcmp>
c000e8db:	83 c4 10             	add    esp,0x10
c000e8de:	85 c0                	test   eax,eax
c000e8e0:	74 23                	je     c000e905 <CPU::detectFeatures()+0x241>
c000e8e2:	57                   	push   edi
c000e8e3:	57                   	push   edi
c000e8e4:	68 d6 db 01 c0       	push   0xc001dbd6
c000e8e9:	55                   	push   ebp
c000e8ea:	e8 11 1e ff ff       	call   c0000700 <strcmp>
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	85 c0                	test   eax,eax
c000e8f4:	75 1e                	jne    c000e914 <CPU::detectFeatures()+0x250>
c000e8f6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e900:	e9 8a 01 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e905:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e90f:	e9 7b 01 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e914:	56                   	push   esi
c000e915:	56                   	push   esi
c000e916:	68 e3 db 01 c0       	push   0xc001dbe3
c000e91b:	55                   	push   ebp
c000e91c:	e8 df 1d ff ff       	call   c0000700 <strcmp>
c000e921:	83 c4 10             	add    esp,0x10
c000e924:	85 c0                	test   eax,eax
c000e926:	75 0f                	jne    c000e937 <CPU::detectFeatures()+0x273>
c000e928:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e932:	e9 58 01 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e937:	51                   	push   ecx
c000e938:	51                   	push   ecx
c000e939:	68 a2 db 01 c0       	push   0xc001dba2
c000e93e:	55                   	push   ebp
c000e93f:	e8 bc 1d ff ff       	call   c0000700 <strcmp>
c000e944:	83 c4 10             	add    esp,0x10
c000e947:	85 c0                	test   eax,eax
c000e949:	75 0f                	jne    c000e95a <CPU::detectFeatures()+0x296>
c000e94b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e955:	e9 35 01 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e95a:	52                   	push   edx
c000e95b:	52                   	push   edx
c000e95c:	68 f0 db 01 c0       	push   0xc001dbf0
c000e961:	55                   	push   ebp
c000e962:	e8 99 1d ff ff       	call   c0000700 <strcmp>
c000e967:	83 c4 10             	add    esp,0x10
c000e96a:	85 c0                	test   eax,eax
c000e96c:	75 0f                	jne    c000e97d <CPU::detectFeatures()+0x2b9>
c000e96e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e978:	e9 12 01 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e97d:	50                   	push   eax
c000e97e:	50                   	push   eax
c000e97f:	68 fd db 01 c0       	push   0xc001dbfd
c000e984:	55                   	push   ebp
c000e985:	e8 76 1d ff ff       	call   c0000700 <strcmp>
c000e98a:	83 c4 10             	add    esp,0x10
c000e98d:	85 c0                	test   eax,eax
c000e98f:	75 0f                	jne    c000e9a0 <CPU::detectFeatures()+0x2dc>
c000e991:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e99b:	e9 ef 00 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e9a0:	50                   	push   eax
c000e9a1:	50                   	push   eax
c000e9a2:	68 0a dc 01 c0       	push   0xc001dc0a
c000e9a7:	55                   	push   ebp
c000e9a8:	e8 53 1d ff ff       	call   c0000700 <strcmp>
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	85 c0                	test   eax,eax
c000e9b2:	75 0f                	jne    c000e9c3 <CPU::detectFeatures()+0x2ff>
c000e9b4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e9be:	e9 cc 00 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e9c3:	50                   	push   eax
c000e9c4:	50                   	push   eax
c000e9c5:	68 17 dc 01 c0       	push   0xc001dc17
c000e9ca:	55                   	push   ebp
c000e9cb:	e8 30 1d ff ff       	call   c0000700 <strcmp>
c000e9d0:	83 c4 10             	add    esp,0x10
c000e9d3:	85 c0                	test   eax,eax
c000e9d5:	75 0f                	jne    c000e9e6 <CPU::detectFeatures()+0x322>
c000e9d7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e9e1:	e9 a9 00 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000e9e6:	50                   	push   eax
c000e9e7:	50                   	push   eax
c000e9e8:	68 24 dc 01 c0       	push   0xc001dc24
c000e9ed:	55                   	push   ebp
c000e9ee:	e8 0d 1d ff ff       	call   c0000700 <strcmp>
c000e9f3:	83 c4 10             	add    esp,0x10
c000e9f6:	85 c0                	test   eax,eax
c000e9f8:	75 0f                	jne    c000ea09 <CPU::detectFeatures()+0x345>
c000e9fa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000ea04:	e9 86 00 00 00       	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000ea09:	50                   	push   eax
c000ea0a:	50                   	push   eax
c000ea0b:	68 31 dc 01 c0       	push   0xc001dc31
c000ea10:	55                   	push   ebp
c000ea11:	e8 ea 1c ff ff       	call   c0000700 <strcmp>
c000ea16:	83 c4 10             	add    esp,0x10
c000ea19:	85 c0                	test   eax,eax
c000ea1b:	75 0c                	jne    c000ea29 <CPU::detectFeatures()+0x365>
c000ea1d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000ea27:	eb 66                	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000ea29:	50                   	push   eax
c000ea2a:	50                   	push   eax
c000ea2b:	68 3e dc 01 c0       	push   0xc001dc3e
c000ea30:	55                   	push   ebp
c000ea31:	e8 ca 1c ff ff       	call   c0000700 <strcmp>
c000ea36:	83 c4 10             	add    esp,0x10
c000ea39:	85 c0                	test   eax,eax
c000ea3b:	75 0c                	jne    c000ea49 <CPU::detectFeatures()+0x385>
c000ea3d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000ea47:	eb 46                	jmp    c000ea8f <CPU::detectFeatures()+0x3cb>
c000ea49:	57                   	push   edi
c000ea4a:	57                   	push   edi
c000ea4b:	68 4b dc 01 c0       	push   0xc001dc4b
c000ea50:	55                   	push   ebp
c000ea51:	e8 aa 1c ff ff       	call   c0000700 <strcmp>
c000ea56:	83 c4 10             	add    esp,0x10
c000ea59:	85 c0                	test   eax,eax
c000ea5b:	74 e0                	je     c000ea3d <CPU::detectFeatures()+0x379>
c000ea5d:	56                   	push   esi
c000ea5e:	56                   	push   esi
c000ea5f:	68 58 dc 01 c0       	push   0xc001dc58
c000ea64:	55                   	push   ebp
c000ea65:	e8 96 1c ff ff       	call   c0000700 <strcmp>
c000ea6a:	83 c4 10             	add    esp,0x10
c000ea6d:	85 c0                	test   eax,eax
c000ea6f:	74 cc                	je     c000ea3d <CPU::detectFeatures()+0x379>
c000ea71:	51                   	push   ecx
c000ea72:	51                   	push   ecx
c000ea73:	68 65 dc 01 c0       	push   0xc001dc65
c000ea78:	55                   	push   ebp
c000ea79:	e8 82 1c ff ff       	call   c0000700 <strcmp>
c000ea7e:	83 c4 10             	add    esp,0x10
c000ea81:	85 c0                	test   eax,eax
c000ea83:	74 b8                	je     c000ea3d <CPU::detectFeatures()+0x379>
c000ea85:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000ea8f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000ea94:	0f 86 be 00 00 00    	jbe    c000eb58 <CPU::detectFeatures()+0x494>
c000ea9a:	83 ec 0c             	sub    esp,0xc
c000ea9d:	68 80 00 00 00       	push   0x80
c000eaa2:	e8 31 fb ff ff       	call   c000e5d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eaa7:	83 e0 01             	and    eax,0x1
c000eaaa:	c1 e0 06             	shl    eax,0x6
c000eaad:	88 c2                	mov    dl,al
c000eaaf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000eab5:	83 e0 bf             	and    eax,0xffffffbf
c000eab8:	09 d0                	or     eax,edx
c000eaba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000eac0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000eac7:	e8 0c fb ff ff       	call   c000e5d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eacc:	83 e0 01             	and    eax,0x1
c000eacf:	c1 e0 04             	shl    eax,0x4
c000ead2:	88 c2                	mov    dl,al
c000ead4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eada:	83 e0 ef             	and    eax,0xffffffef
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eae5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000eaec:	e8 e7 fa ff ff       	call   c000e5d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eaf1:	c1 e0 07             	shl    eax,0x7
c000eaf4:	88 c2                	mov    dl,al
c000eaf6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000eafc:	83 e0 7f             	and    eax,0x7f
c000eaff:	09 d0                	or     eax,edx
c000eb01:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000eb07:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb0e:	e8 f3 fa ff ff       	call   c000e606 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000eb13:	83 e0 01             	and    eax,0x1
c000eb16:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000eb1d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eb23:	83 e0 f7             	and    eax,0xfffffff7
c000eb26:	09 d0                	or     eax,edx
c000eb28:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eb2e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000eb35:	e8 cc fa ff ff       	call   c000e606 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000eb3a:	83 c4 10             	add    esp,0x10
c000eb3d:	83 e0 01             	and    eax,0x1
c000eb40:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eb47:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000eb4d:	83 e0 fb             	and    eax,0xfffffffb
c000eb50:	09 d0                	or     eax,edx
c000eb52:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000eb58:	83 ec 0c             	sub    esp,0xc
c000eb5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb5f:	50                   	push   eax
c000eb60:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb64:	50                   	push   eax
c000eb65:	8d 74 24 28          	lea    esi,[esp+0x28]
c000eb69:	56                   	push   esi
c000eb6a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb6e:	50                   	push   eax
c000eb6f:	6a 01                	push   0x1
c000eb71:	e8 82 f9 ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb76:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eb7a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000eb80:	88 ca                	mov    dl,cl
c000eb82:	83 e0 f0             	and    eax,0xfffffff0
c000eb85:	83 e2 0f             	and    edx,0xf
c000eb88:	09 d0                	or     eax,edx
c000eb8a:	88 ca                	mov    dl,cl
c000eb8c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000eb92:	c0 ea 04             	shr    dl,0x4
c000eb95:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000eb99:	0f b6 c2             	movzx  eax,dl
c000eb9c:	83 c4 20             	add    esp,0x20
c000eb9f:	c1 e0 06             	shl    eax,0x6
c000eba2:	89 c7                	mov    edi,eax
c000eba4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ebaa:	66 25 3f c0          	and    ax,0xc03f
c000ebae:	09 f8                	or     eax,edi
c000ebb0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000ebb7:	89 c8                	mov    eax,ecx
c000ebb9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000ebc0:	c1 e8 08             	shr    eax,0x8
c000ebc3:	83 e5 3f             	and    ebp,0x3f
c000ebc6:	83 e0 0f             	and    eax,0xf
c000ebc9:	89 c7                	mov    edi,eax
c000ebcb:	c1 e7 06             	shl    edi,0x6
c000ebce:	09 ef                	or     edi,ebp
c000ebd0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000ebd7:	89 fa                	mov    edx,edi
c000ebd9:	83 e5 c0             	and    ebp,0xffffffc0
c000ebdc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000ebe2:	88 c2                	mov    dl,al
c000ebe4:	c0 ea 02             	shr    dl,0x2
c000ebe7:	89 d7                	mov    edi,edx
c000ebe9:	09 ef                	or     edi,ebp
c000ebeb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000ebf1:	89 fa                	mov    edx,edi
c000ebf3:	83 e5 cf             	and    ebp,0xffffffcf
c000ebf6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000ebfc:	89 cf                	mov    edi,ecx
c000ebfe:	c1 ef 0c             	shr    edi,0xc
c000ec01:	83 e7 03             	and    edi,0x3
c000ec04:	c1 e7 04             	shl    edi,0x4
c000ec07:	09 ef                	or     edi,ebp
c000ec09:	3c 06                	cmp    al,0x6
c000ec0b:	89 fa                	mov    edx,edi
c000ec0d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ec13:	74 04                	je     c000ec19 <CPU::detectFeatures()+0x555>
c000ec15:	3c 0f                	cmp    al,0xf
c000ec17:	75 5c                	jne    c000ec75 <CPU::detectFeatures()+0x5b1>
c000ec19:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ec1d:	89 cf                	mov    edi,ecx
c000ec1f:	c1 ef 10             	shr    edi,0x10
c000ec22:	c1 e7 04             	shl    edi,0x4
c000ec25:	09 fa                	or     edx,edi
c000ec27:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000ec2d:	0f b6 d2             	movzx  edx,dl
c000ec30:	66 81 e7 3f c0       	and    di,0xc03f
c000ec35:	c1 e2 06             	shl    edx,0x6
c000ec38:	09 fa                	or     edx,edi
c000ec3a:	3c 0f                	cmp    al,0xf
c000ec3c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000ec43:	75 30                	jne    c000ec75 <CPU::detectFeatures()+0x5b1>
c000ec45:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000ec4b:	c1 e9 14             	shr    ecx,0x14
c000ec4e:	83 e0 3f             	and    eax,0x3f
c000ec51:	83 c1 0f             	add    ecx,0xf
c000ec54:	88 ca                	mov    dl,cl
c000ec56:	c0 e9 02             	shr    cl,0x2
c000ec59:	c1 e2 06             	shl    edx,0x6
c000ec5c:	09 d0                	or     eax,edx
c000ec5e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000ec64:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000ec6a:	83 e0 c0             	and    eax,0xffffffc0
c000ec6d:	09 c1                	or     ecx,eax
c000ec6f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000ec75:	83 ec 0c             	sub    esp,0xc
c000ec78:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000ec7f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ec83:	50                   	push   eax
c000ec84:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000ec88:	55                   	push   ebp
c000ec89:	56                   	push   esi
c000ec8a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ec8e:	57                   	push   edi
c000ec8f:	68 00 00 00 80       	push   0x80000000
c000ec94:	e8 5f f8 ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ec99:	83 c4 20             	add    esp,0x20
c000ec9c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000eca4:	76 22                	jbe    c000ecc8 <CPU::detectFeatures()+0x604>
c000eca6:	83 ec 0c             	sub    esp,0xc
c000eca9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ecad:	50                   	push   eax
c000ecae:	55                   	push   ebp
c000ecaf:	56                   	push   esi
c000ecb0:	57                   	push   edi
c000ecb1:	68 01 00 00 80       	push   0x80000001
c000ecb6:	e8 3d f8 ff ff       	call   c000e4f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecbb:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ecc5:	83 c4 20             	add    esp,0x20
c000ecc8:	52                   	push   edx
c000ecc9:	52                   	push   edx
c000ecca:	68 71 dc 01 c0       	push   0xc001dc71
c000eccf:	53                   	push   ebx
c000ecd0:	e8 09 c3 ff ff       	call   c000afde <Device::setName(char const*)>
c000ecd5:	83 c4 10             	add    esp,0x10
c000ecd8:	eb 67                	jmp    c000ed41 <CPU::detectFeatures()+0x67d>
c000ecda:	50                   	push   eax
c000ecdb:	50                   	push   eax
c000ecdc:	68 d6 db 01 c0       	push   0xc001dbd6
c000ece1:	55                   	push   ebp
c000ece2:	e8 39 19 ff ff       	call   c0000620 <strcpy>
c000ece7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ecf1:	e8 ed 14 ff ff       	call   c00001e3 <is486>
c000ecf6:	83 c4 10             	add    esp,0x10
c000ecf9:	85 c0                	test   eax,eax
c000ecfb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ed01:	74 1d                	je     c000ed20 <CPU::detectFeatures()+0x65c>
c000ed03:	83 c8 07             	or     eax,0x7
c000ed06:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ed0c:	0f 20 c0             	mov    eax,cr0
c000ed0f:	83 e0 14             	and    eax,0x14
c000ed12:	83 f8 04             	cmp    eax,0x4
c000ed15:	75 0e                	jne    c000ed25 <CPU::detectFeatures()+0x661>
c000ed17:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ed1e:	eb 21                	jmp    c000ed41 <CPU::detectFeatures()+0x67d>
c000ed20:	83 e0 f8             	and    eax,0xfffffff8
c000ed23:	eb e1                	jmp    c000ed06 <CPU::detectFeatures()+0x642>
c000ed25:	e8 94 14 ff ff       	call   c00001be <hasLegacyFPU>
c000ed2a:	83 e0 01             	and    eax,0x1
c000ed2d:	8d 14 00             	lea    edx,[eax+eax*1]
c000ed30:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ed36:	83 e0 fd             	and    eax,0xfffffffd
c000ed39:	09 d0                	or     eax,edx
c000ed3b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ed41:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ed48:	74 0e                	je     c000ed58 <CPU::detectFeatures()+0x694>
c000ed4a:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000ed4f:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c000ed56:	eb 20                	jmp    c000ed78 <CPU::detectFeatures()+0x6b4>
c000ed58:	e8 61 14 ff ff       	call   c00001be <hasLegacyFPU>
c000ed5d:	83 e0 01             	and    eax,0x1
c000ed60:	8d 14 00             	lea    edx,[eax+eax*1]
c000ed63:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ed69:	83 e0 fd             	and    eax,0xfffffffd
c000ed6c:	09 d0                	or     eax,edx
c000ed6e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ed74:	a8 02                	test   al,0x2
c000ed76:	75 d2                	jne    c000ed4a <CPU::detectFeatures()+0x686>
c000ed78:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ed7f:	83 c4 2c             	add    esp,0x2c
c000ed82:	5b                   	pop    ebx
c000ed83:	5e                   	pop    esi
c000ed84:	5f                   	pop    edi
c000ed85:	5d                   	pop    ebp
c000ed86:	c3                   	ret    
c000ed87:	90                   	nop

c000ed88 <CPU::setupSMEP()>:
c000ed88:	0f 20 e0             	mov    eax,cr4
c000ed8b:	0d 00 00 10 00       	or     eax,0x100000
c000ed90:	0f 22 e0             	mov    cr4,eax
c000ed93:	c3                   	ret    

c000ed94 <CPU::setupUMIP()>:
c000ed94:	0f 20 e0             	mov    eax,cr4
c000ed97:	80 cc 08             	or     ah,0x8
c000ed9a:	0f 22 e0             	mov    cr4,eax
c000ed9d:	c3                   	ret    

c000ed9e <CPU::setupTSC()>:
c000ed9e:	0f 20 e0             	mov    eax,cr4
c000eda1:	83 c8 04             	or     eax,0x4
c000eda4:	0f 22 e0             	mov    cr4,eax
c000eda7:	c3                   	ret    

c000eda8 <CPU::setupLargePages()>:
c000eda8:	0f 20 e0             	mov    eax,cr4
c000edab:	83 c8 10             	or     eax,0x10
c000edae:	0f 22 e0             	mov    cr4,eax
c000edb1:	c3                   	ret    

c000edb2 <CPU::setupPAT()>:
c000edb2:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c000edb7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edbe:	74 2c                	je     c000edec <CPU::setupPAT()+0x3a>
c000edc0:	53                   	push   ebx
c000edc1:	83 ec 10             	sub    esp,0x10
c000edc4:	68 77 02 00 00       	push   0x277
c000edc9:	50                   	push   eax
c000edca:	e8 4f 74 ff ff       	call   c000621e <Computer::rdmsr(unsigned int)>
c000edcf:	83 e2 f8             	and    edx,0xfffffff8
c000edd2:	83 ca 01             	or     edx,0x1
c000edd5:	52                   	push   edx
c000edd6:	50                   	push   eax
c000edd7:	68 77 02 00 00       	push   0x277
c000eddc:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000ede2:	e8 63 74 ff ff       	call   c000624a <Computer::wrmsr(unsigned int, unsigned long long)>
c000ede7:	83 c4 28             	add    esp,0x28
c000edea:	5b                   	pop    ebx
c000edeb:	c3                   	ret    
c000edec:	c3                   	ret    
c000eded:	90                   	nop

c000edee <CPU::setupMTRR()>:
c000edee:	c3                   	ret    
c000edef:	90                   	nop

c000edf0 <CPU::setupGlobalPages()>:
c000edf0:	0f 20 e0             	mov    eax,cr4
c000edf3:	0c 80                	or     al,0x80
c000edf5:	0f 22 e0             	mov    cr4,eax
c000edf8:	c3                   	ret    
c000edf9:	90                   	nop

c000edfa <CPU::allowUsermodeDataAccess()>:
c000edfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edfe:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ee05:	74 03                	je     c000ee0a <CPU::allowUsermodeDataAccess()+0x10>
c000ee07:	0f 01 cb             	stac   
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <CPU::prohibitUsermodeDataAccess()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ee17:	74 03                	je     c000ee1c <CPU::prohibitUsermodeDataAccess()+0x10>
c000ee19:	0f 01 ca             	clac   
c000ee1c:	c3                   	ret    
c000ee1d:	90                   	nop

c000ee1e <CPU::setupSMAP()>:
c000ee1e:	0f 20 e0             	mov    eax,cr4
c000ee21:	0d 00 00 20 00       	or     eax,0x200000
c000ee26:	0f 22 e0             	mov    cr4,eax
c000ee29:	eb e1                	jmp    c000ee0c <CPU::prohibitUsermodeDataAccess()>
c000ee2b:	90                   	nop

c000ee2c <CPU::setupFeatures()>:
c000ee2c:	53                   	push   ebx
c000ee2d:	83 ec 08             	sub    esp,0x8
c000ee30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee34:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ee3b:	74 18                	je     c000ee55 <CPU::setupFeatures()+0x29>
c000ee3d:	83 ec 0c             	sub    esp,0xc
c000ee40:	68 7d dc 01 c0       	push   0xc001dc7d
c000ee45:	e8 ca ab ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000ee4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee4d:	e8 42 ff ff ff       	call   c000ed94 <CPU::setupUMIP()>
c000ee52:	83 c4 10             	add    esp,0x10
c000ee55:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ee5c:	74 18                	je     c000ee76 <CPU::setupFeatures()+0x4a>
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	68 87 dc 01 c0       	push   0xc001dc87
c000ee66:	e8 a9 ab ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000ee6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee6e:	e8 2b ff ff ff       	call   c000ed9e <CPU::setupTSC()>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ee7d:	74 18                	je     c000ee97 <CPU::setupFeatures()+0x6b>
c000ee7f:	83 ec 0c             	sub    esp,0xc
c000ee82:	68 90 dc 01 c0       	push   0xc001dc90
c000ee87:	e8 88 ab ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000ee8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee8f:	e8 14 ff ff ff       	call   c000eda8 <CPU::setupLargePages()>
c000ee94:	83 c4 10             	add    esp,0x10
c000ee97:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ee9e:	74 18                	je     c000eeb8 <CPU::setupFeatures()+0x8c>
c000eea0:	83 ec 0c             	sub    esp,0xc
c000eea3:	68 99 dc 01 c0       	push   0xc001dc99
c000eea8:	e8 67 ab ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000eead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eeb0:	e8 3b ff ff ff       	call   c000edf0 <CPU::setupGlobalPages()>
c000eeb5:	83 c4 10             	add    esp,0x10
c000eeb8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000eebf:	74 18                	je     c000eed9 <CPU::setupFeatures()+0xad>
c000eec1:	83 ec 0c             	sub    esp,0xc
c000eec4:	68 ab dc 01 c0       	push   0xc001dcab
c000eec9:	e8 46 ab ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000eece:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed1:	e8 dc fe ff ff       	call   c000edb2 <CPU::setupPAT()>
c000eed6:	83 c4 10             	add    esp,0x10
c000eed9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000eee0:	74 11                	je     c000eef3 <CPU::setupFeatures()+0xc7>
c000eee2:	c7 44 24 10 b4 dc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dcb4
c000eeea:	83 c4 08             	add    esp,0x8
c000eeed:	5b                   	pop    ebx
c000eeee:	e9 21 ab ff ff       	jmp    c0009a14 <Dbg::kprintf(char const*, ...)>
c000eef3:	83 c4 08             	add    esp,0x8
c000eef6:	5b                   	pop    ebx
c000eef7:	c3                   	ret    

c000eef8 <CPU::open(int, int, void*)>:
c000eef8:	57                   	push   edi
c000eef9:	56                   	push   esi
c000eefa:	53                   	push   ebx
c000eefb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eeff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ef03:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ef09:	83 ec 0c             	sub    esp,0xc
c000ef0c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ef12:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ef18:	50                   	push   eax
c000ef19:	e8 16 76 ff ff       	call   c0006534 <GDT::setup()>
c000ef1e:	83 c4 0c             	add    esp,0xc
c000ef21:	6a 00                	push   0x0
c000ef23:	68 ef be ad de       	push   0xdeadbeef
c000ef28:	57                   	push   edi
c000ef29:	e8 e6 91 ff ff       	call   c0008114 <TSS::setup(unsigned long, unsigned long)>
c000ef2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ef31:	e8 be 91 ff ff       	call   c00080f4 <TSS::flush()>
c000ef36:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ef3c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef3f:	e8 7e 78 ff ff       	call   c00067c2 <IDT::setup()>
c000ef44:	b8 00 04 00 00       	mov    eax,0x400
c000ef49:	0f 23 f8             	mov    db7,eax
c000ef4c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ef56:	e8 c3 80 ff ff       	call   c000701e <Phys::allocatePage()>
c000ef5b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ef61:	89 30                	mov    DWORD PTR [eax],esi
c000ef63:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ef69:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ef6c:	58                   	pop    eax
c000ef6d:	5a                   	pop    edx
c000ef6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ef74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef78:	e8 45 a1 ff ff       	call   c00090c2 <VAS::setCPUSpecific(unsigned long)>
c000ef7d:	c7 04 24 be dc 01 c0 	mov    DWORD PTR [esp],0xc001dcbe
c000ef84:	e8 22 7d ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000ef89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef8c:	e8 33 f7 ff ff       	call   c000e6c4 <CPU::detectFeatures()>
c000ef91:	c7 04 24 e1 dc 01 c0 	mov    DWORD PTR [esp],0xc001dce1
c000ef98:	e8 0e 7d ff ff       	call   c0006cab <Krnl::setBootMessage(char const*)>
c000ef9d:	e8 24 58 00 00       	call   c00147c6 <HalInitialise()>
c000efa2:	a1 c0 f5 01 c0       	mov    eax,ds:0xc001f5c0
c000efa7:	83 e0 10             	and    eax,0x10
c000efaa:	83 f8 01             	cmp    eax,0x1
c000efad:	19 c0                	sbb    eax,eax
c000efaf:	83 e0 46             	and    eax,0x46
c000efb2:	83 c0 1e             	add    eax,0x1e
c000efb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000efb8:	e8 f0 d6 ff ff       	call   c000c6ad <setupTimer(int)>
c000efbd:	83 c4 10             	add    esp,0x10
c000efc0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000efc6:	f6 05 c0 f5 01 c0 20 	test   BYTE PTR ds:0xc001f5c0,0x20
c000efcd:	74 0c                	je     c000efdb <CPU::open(int, int, void*)+0xe3>
c000efcf:	83 ec 0c             	sub    esp,0xc
c000efd2:	53                   	push   ebx
c000efd3:	e8 54 fe ff ff       	call   c000ee2c <CPU::setupFeatures()>
c000efd8:	83 c4 10             	add    esp,0x10
c000efdb:	5b                   	pop    ebx
c000efdc:	31 c0                	xor    eax,eax
c000efde:	5e                   	pop    esi
c000efdf:	5f                   	pop    edi
c000efe0:	c3                   	ret    

c000efe1 <Krnl::smpEntry()>:
c000efe1:	eb fe                	jmp    c000efe1 <Krnl::smpEntry()>

c000efe3 <Krnl::startCPU(int)>:
c000efe3:	c3                   	ret    

c000efe4 <Krnl::startCPUs()>:
c000efe4:	c3                   	ret    
c000efe5:	90                   	nop

c000efe6 <EnvVarContainer::getEnv(char const*)>:
c000efe6:	57                   	push   edi
c000efe7:	56                   	push   esi
c000efe8:	53                   	push   ebx
c000efe9:	31 db                	xor    ebx,ebx
c000efeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000efef:	39 1e                	cmp    DWORD PTR [esi],ebx
c000eff1:	7e 2b                	jle    c000f01e <EnvVarContainer::getEnv(char const*)+0x38>
c000eff3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000effa:	50                   	push   eax
c000effb:	50                   	push   eax
c000effc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000efff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000f002:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f006:	e8 f5 16 ff ff       	call   c0000700 <strcmp>
c000f00b:	83 c4 10             	add    esp,0x10
c000f00e:	85 c0                	test   eax,eax
c000f010:	75 09                	jne    c000f01b <EnvVarContainer::getEnv(char const*)+0x35>
c000f012:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f015:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000f019:	eb 05                	jmp    c000f020 <EnvVarContainer::getEnv(char const*)+0x3a>
c000f01b:	43                   	inc    ebx
c000f01c:	eb d1                	jmp    c000efef <EnvVarContainer::getEnv(char const*)+0x9>
c000f01e:	31 c0                	xor    eax,eax
c000f020:	5b                   	pop    ebx
c000f021:	5e                   	pop    esi
c000f022:	5f                   	pop    edi
c000f023:	c3                   	ret    

c000f024 <EnvVarContainer::setEnv(char const*, char const*)>:
c000f024:	55                   	push   ebp
c000f025:	57                   	push   edi
c000f026:	56                   	push   esi
c000f027:	53                   	push   ebx
c000f028:	83 ec 28             	sub    esp,0x28
c000f02b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000f02f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f033:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f037:	56                   	push   esi
c000f038:	e8 23 15 ff ff       	call   c0000560 <strlen>
c000f03d:	40                   	inc    eax
c000f03e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f041:	e8 0b 7c ff ff       	call   c0006c51 <malloc>
c000f046:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f049:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f04d:	e8 0e 15 ff ff       	call   c0000560 <strlen>
c000f052:	40                   	inc    eax
c000f053:	89 04 24             	mov    DWORD PTR [esp],eax
c000f056:	e8 f6 7b ff ff       	call   c0006c51 <malloc>
c000f05b:	89 34 24             	mov    DWORD PTR [esp],esi
c000f05e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f062:	e8 f9 14 ff ff       	call   c0000560 <strlen>
c000f067:	83 c4 0c             	add    esp,0xc
c000f06a:	40                   	inc    eax
c000f06b:	50                   	push   eax
c000f06c:	6a 00                	push   0x0
c000f06e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f072:	e8 79 14 ff ff       	call   c00004f0 <memset>
c000f077:	89 34 24             	mov    DWORD PTR [esp],esi
c000f07a:	e8 e1 14 ff ff       	call   c0000560 <strlen>
c000f07f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000f083:	8d 48 01             	lea    ecx,[eax+0x1]
c000f086:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f08b:	89 de                	mov    esi,ebx
c000f08d:	e8 ce 14 ff ff       	call   c0000560 <strlen>
c000f092:	83 c4 0c             	add    esp,0xc
c000f095:	40                   	inc    eax
c000f096:	50                   	push   eax
c000f097:	6a 00                	push   0x0
c000f099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f09d:	e8 4e 14 ff ff       	call   c00004f0 <memset>
c000f0a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0a5:	e8 b6 14 ff ff       	call   c0000560 <strlen>
c000f0aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f0ae:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0b6:	40                   	inc    eax
c000f0b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f0ba:	c1 e0 03             	shl    eax,0x3
c000f0bd:	5a                   	pop    edx
c000f0be:	59                   	pop    ecx
c000f0bf:	50                   	push   eax
c000f0c0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f0c3:	e8 75 7b ff ff       	call   c0006c3d <realloc>
c000f0c8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f0cc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f0cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f0d2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f0d6:	b9 08 00 00 00       	mov    ecx,0x8
c000f0db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0dd:	83 c4 2c             	add    esp,0x2c
c000f0e0:	5b                   	pop    ebx
c000f0e1:	5e                   	pop    esi
c000f0e2:	5f                   	pop    edi
c000f0e3:	5d                   	pop    ebp
c000f0e4:	c3                   	ret    
c000f0e5:	90                   	nop

c000f0e6 <EnvVarContainer::deleteEnv(char const*)>:
c000f0e6:	c3                   	ret    
c000f0e7:	90                   	nop

c000f0e8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000f0e8:	55                   	push   ebp
c000f0e9:	57                   	push   edi
c000f0ea:	56                   	push   esi
c000f0eb:	53                   	push   ebx
c000f0ec:	81 ec 38 01 00 00    	sub    esp,0x138
c000f0f2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000f0f9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000f100:	68 14 01 00 00       	push   0x114
c000f105:	e8 47 7b ff ff       	call   c0006c51 <malloc>
c000f10a:	83 c4 0c             	add    esp,0xc
c000f10d:	89 c3                	mov    ebx,eax
c000f10f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f112:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f119:	50                   	push   eax
c000f11a:	e8 6b ae ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000f11f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f122:	e8 91 b1 ff ff       	call   c000a2b8 <File::exists()>
c000f127:	83 c4 10             	add    esp,0x10
c000f12a:	84 c0                	test   al,al
c000f12c:	75 31                	jne    c000f15f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f12e:	50                   	push   eax
c000f12f:	50                   	push   eax
c000f130:	6a 12                	push   0x12
c000f132:	53                   	push   ebx
c000f133:	e8 12 af ff ff       	call   c000a04a <File::open(FileOpenMode)>
c000f138:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f13a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f13d:	89 34 24             	mov    DWORD PTR [esp],esi
c000f140:	e8 1b 14 ff ff       	call   c0000560 <strlen>
c000f145:	5a                   	pop    edx
c000f146:	31 d2                	xor    edx,edx
c000f148:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f14c:	51                   	push   ecx
c000f14d:	56                   	push   esi
c000f14e:	52                   	push   edx
c000f14f:	50                   	push   eax
c000f150:	53                   	push   ebx
c000f151:	ff d7                	call   edi
c000f153:	83 c4 14             	add    esp,0x14
c000f156:	53                   	push   ebx
c000f157:	e8 4c af ff ff       	call   c000a0a8 <File::close()>
c000f15c:	83 c4 10             	add    esp,0x10
c000f15f:	56                   	push   esi
c000f160:	31 f6                	xor    esi,esi
c000f162:	68 00 01 00 00       	push   0x100
c000f167:	6a 00                	push   0x0
c000f169:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f16d:	50                   	push   eax
c000f16e:	e8 7d 13 ff ff       	call   c00004f0 <memset>
c000f173:	5f                   	pop    edi
c000f174:	58                   	pop    eax
c000f175:	6a 01                	push   0x1
c000f177:	53                   	push   ebx
c000f178:	e8 cd ae ff ff       	call   c000a04a <File::open(FileOpenMode)>
c000f17d:	83 c4 10             	add    esp,0x10
c000f180:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f188:	83 ec 0c             	sub    esp,0xc
c000f18b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f18d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f191:	51                   	push   ecx
c000f192:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f196:	52                   	push   edx
c000f197:	6a 00                	push   0x0
c000f199:	6a 01                	push   0x1
c000f19b:	53                   	push   ebx
c000f19c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f19f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f1a3:	83 c4 20             	add    esp,0x20
c000f1a6:	3c 0d                	cmp    al,0xd
c000f1a8:	0f 84 09 01 00 00    	je     c000f2b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f1ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f1b3:	0f 84 ef 00 00 00    	je     c000f2a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f1b9:	3c 0a                	cmp    al,0xa
c000f1bb:	74 13                	je     c000f1d0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f1bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f1c2:	74 0c                	je     c000f1d0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f1c4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f1ca:	0f 8e d8 00 00 00    	jle    c000f2a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f1d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1d4:	83 ec 0c             	sub    esp,0xc
c000f1d7:	8d 78 01             	lea    edi,[eax+0x1]
c000f1da:	57                   	push   edi
c000f1db:	e8 71 7a ff ff       	call   c0006c51 <malloc>
c000f1e0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f1e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1e8:	8d 56 04             	lea    edx,[esi+0x4]
c000f1eb:	89 14 24             	mov    DWORD PTR [esp],edx
c000f1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f1f2:	e8 5a 7a ff ff       	call   c0006c51 <malloc>
c000f1f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1fb:	83 c4 0c             	add    esp,0xc
c000f1fe:	57                   	push   edi
c000f1ff:	6a 00                	push   0x0
c000f201:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f205:	e8 e6 12 ff ff       	call   c00004f0 <memset>
c000f20a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f20e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f212:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f216:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f218:	83 c4 0c             	add    esp,0xc
c000f21b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f21f:	52                   	push   edx
c000f220:	6a 00                	push   0x0
c000f222:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f226:	e8 c5 12 ff ff       	call   c00004f0 <memset>
c000f22b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f22f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f233:	89 34 24             	mov    DWORD PTR [esp],esi
c000f236:	e8 25 13 ff ff       	call   c0000560 <strlen>
c000f23b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f23f:	89 c1                	mov    ecx,eax
c000f241:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f243:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f246:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f249:	40                   	inc    eax
c000f24a:	83 c4 10             	add    esp,0x10
c000f24d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f250:	85 d2                	test   edx,edx
c000f252:	75 0c                	jne    c000f260 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f254:	83 ec 0c             	sub    esp,0xc
c000f257:	6a 08                	push   0x8
c000f259:	e8 f3 79 ff ff       	call   c0006c51 <malloc>
c000f25e:	eb 0c                	jmp    c000f26c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f260:	c1 e0 03             	shl    eax,0x3
c000f263:	51                   	push   ecx
c000f264:	51                   	push   ecx
c000f265:	50                   	push   eax
c000f266:	52                   	push   edx
c000f267:	e8 d1 79 ff ff       	call   c0006c3d <realloc>
c000f26c:	83 c4 10             	add    esp,0x10
c000f26f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f272:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f275:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f278:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f27c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f280:	b9 08 00 00 00       	mov    ecx,0x8
c000f285:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f287:	31 f6                	xor    esi,esi
c000f289:	50                   	push   eax
c000f28a:	68 00 01 00 00       	push   0x100
c000f28f:	6a 00                	push   0x0
c000f291:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f295:	50                   	push   eax
c000f296:	e8 55 12 ff ff       	call   c00004f0 <memset>
c000f29b:	83 c4 10             	add    esp,0x10
c000f29e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f2a6:	eb 0f                	jmp    c000f2b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f2a8:	3c 3d                	cmp    al,0x3d
c000f2aa:	74 07                	je     c000f2b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f2ac:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f2b0:	46                   	inc    esi
c000f2b1:	eb 04                	jmp    c000f2b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f2b3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f2b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f2bc:	0f 85 c6 fe ff ff    	jne    c000f188 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f2c2:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f2c8:	5b                   	pop    ebx
c000f2c9:	5e                   	pop    esi
c000f2ca:	5f                   	pop    edi
c000f2cb:	5d                   	pop    ebp
c000f2cc:	c3                   	ret    
c000f2cd:	90                   	nop

c000f2ce <EnvVarContainer::__loadSystem()>:
c000f2ce:	83 ec 10             	sub    esp,0x10
c000f2d1:	68 80 ef 01 c0       	push   0xc001ef80
c000f2d6:	68 24 dd 01 c0       	push   0xc001dd24
c000f2db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2df:	e8 04 fe ff ff       	call   c000f0e8 <EnvVarContainer::loadFrom(char const*, char const*)>
c000f2e4:	83 c4 1c             	add    esp,0x1c
c000f2e7:	c3                   	ret    

c000f2e8 <EnvVarContainer::__loadUser()>:
c000f2e8:	c3                   	ret    
c000f2e9:	90                   	nop

c000f2ea <EnvVarContainer::EnvVarContainer(Process*)>:
c000f2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f2ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f303:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f30a:	90                   	nop
c000f30b:	c3                   	ret    

c000f30c <EnvVarContainer::~EnvVarContainer()>:
c000f30c:	83 ec 0c             	sub    esp,0xc
c000f30f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f313:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f316:	85 c0                	test   eax,eax
c000f318:	74 1d                	je     c000f337 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f31e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f320:	85 c0                	test   eax,eax
c000f322:	74 13                	je     c000f337 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f328:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f32b:	83 ec 0c             	sub    esp,0xc
c000f32e:	50                   	push   eax
c000f32f:	e8 2d 79 ff ff       	call   c0006c61 <free>
c000f334:	83 c4 10             	add    esp,0x10
c000f337:	90                   	nop
c000f338:	83 c4 0c             	add    esp,0xc
c000f33b:	c3                   	ret    

c000f33c <Krnl::getEnv(Process*, char const*)>:
c000f33c:	53                   	push   ebx
c000f33d:	83 ec 08             	sub    esp,0x8
c000f340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f344:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f348:	39 05 b0 2a 02 c0    	cmp    DWORD PTR ds:0xc0022ab0,eax
c000f34e:	74 04                	je     c000f354 <Krnl::getEnv(Process*, char const*)+0x18>
c000f350:	85 c0                	test   eax,eax
c000f352:	75 0b                	jne    c000f35f <Krnl::getEnv(Process*, char const*)+0x23>
c000f354:	a1 34 20 02 c0       	mov    eax,ds:0xc0022034
c000f359:	85 c0                	test   eax,eax
c000f35b:	75 19                	jne    c000f376 <Krnl::getEnv(Process*, char const*)+0x3a>
c000f35d:	eb 27                	jmp    c000f386 <Krnl::getEnv(Process*, char const*)+0x4a>
c000f35f:	52                   	push   edx
c000f360:	52                   	push   edx
c000f361:	53                   	push   ebx
c000f362:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f368:	e8 79 fc ff ff       	call   c000efe6 <EnvVarContainer::getEnv(char const*)>
c000f36d:	83 c4 10             	add    esp,0x10
c000f370:	85 c0                	test   eax,eax
c000f372:	75 28                	jne    c000f39c <Krnl::getEnv(Process*, char const*)+0x60>
c000f374:	eb de                	jmp    c000f354 <Krnl::getEnv(Process*, char const*)+0x18>
c000f376:	52                   	push   edx
c000f377:	52                   	push   edx
c000f378:	53                   	push   ebx
c000f379:	50                   	push   eax
c000f37a:	e8 67 fc ff ff       	call   c000efe6 <EnvVarContainer::getEnv(char const*)>
c000f37f:	83 c4 10             	add    esp,0x10
c000f382:	85 c0                	test   eax,eax
c000f384:	75 16                	jne    c000f39c <Krnl::getEnv(Process*, char const*)+0x60>
c000f386:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f38a:	a1 38 20 02 c0       	mov    eax,ds:0xc0022038
c000f38f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f393:	83 c4 08             	add    esp,0x8
c000f396:	5b                   	pop    ebx
c000f397:	e9 4a fc ff ff       	jmp    c000efe6 <EnvVarContainer::getEnv(char const*)>
c000f39c:	83 c4 08             	add    esp,0x8
c000f39f:	5b                   	pop    ebx
c000f3a0:	c3                   	ret    

c000f3a1 <Krnl::setEnvSystem(char const*, char const*)>:
c000f3a1:	83 ec 10             	sub    esp,0x10
c000f3a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3ac:	ff 35 38 20 02 c0    	push   DWORD PTR ds:0xc0022038
c000f3b2:	e8 6d fc ff ff       	call   c000f024 <EnvVarContainer::setEnv(char const*, char const*)>
c000f3b7:	83 c4 1c             	add    esp,0x1c
c000f3ba:	c3                   	ret    

c000f3bb <Krnl::setEnvUser(char const*, char const*)>:
c000f3bb:	a1 34 20 02 c0       	mov    eax,ds:0xc0022034
c000f3c0:	85 c0                	test   eax,eax
c000f3c2:	74 15                	je     c000f3d9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f3c4:	83 ec 10             	sub    esp,0x10
c000f3c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3cf:	50                   	push   eax
c000f3d0:	e8 4f fc ff ff       	call   c000f024 <EnvVarContainer::setEnv(char const*, char const*)>
c000f3d5:	83 c4 1c             	add    esp,0x1c
c000f3d8:	c3                   	ret    
c000f3d9:	c3                   	ret    

c000f3da <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f3da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3de:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f3e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f3e8:	e9 37 fc ff ff       	jmp    c000f024 <EnvVarContainer::setEnv(char const*, char const*)>

c000f3ed <Krnl::deleteEnvSystem(char const*)>:
c000f3ed:	c3                   	ret    

c000f3ee <Krnl::deleteEnvUser(char const*)>:
c000f3ee:	c3                   	ret    

c000f3ef <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f3ef:	c3                   	ret    

c000f3f0 <Krnl::newProcessEnv(Process*)>:
c000f3f0:	83 ec 28             	sub    esp,0x28
c000f3f3:	6a 0c                	push   0xc
c000f3f5:	e8 57 78 ff ff       	call   c0006c51 <malloc>
c000f3fa:	5a                   	pop    edx
c000f3fb:	59                   	pop    ecx
c000f3fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f400:	50                   	push   eax
c000f401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f405:	e8 e0 fe ff ff       	call   c000f2ea <EnvVarContainer::EnvVarContainer(Process*)>
c000f40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f40e:	83 c4 2c             	add    esp,0x2c
c000f411:	c3                   	ret    

c000f412 <Krnl::copyProcessEnv(Process*, Process*)>:
c000f412:	57                   	push   edi
c000f413:	56                   	push   esi
c000f414:	53                   	push   ebx
c000f415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f419:	83 ec 0c             	sub    esp,0xc
c000f41c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f422:	6a 0c                	push   0xc
c000f424:	e8 28 78 ff ff       	call   c0006c51 <malloc>
c000f429:	89 c3                	mov    ebx,eax
c000f42b:	58                   	pop    eax
c000f42c:	5a                   	pop    edx
c000f42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f431:	53                   	push   ebx
c000f432:	e8 b3 fe ff ff       	call   c000f2ea <EnvVarContainer::EnvVarContainer(Process*)>
c000f437:	8b 07                	mov    eax,DWORD PTR [edi]
c000f439:	89 03                	mov    DWORD PTR [ebx],eax
c000f43b:	c1 e0 03             	shl    eax,0x3
c000f43e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f441:	e8 0b 78 ff ff       	call   c0006c51 <malloc>
c000f446:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f449:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f44b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f44e:	c1 e1 03             	shl    ecx,0x3
c000f451:	89 c7                	mov    edi,eax
c000f453:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f455:	83 c4 10             	add    esp,0x10
c000f458:	89 d8                	mov    eax,ebx
c000f45a:	5b                   	pop    ebx
c000f45b:	5e                   	pop    esi
c000f45c:	5f                   	pop    edi
c000f45d:	c3                   	ret    

c000f45e <Krnl::loadSystemEnv()>:
c000f45e:	53                   	push   ebx
c000f45f:	83 ec 14             	sub    esp,0x14
c000f462:	6a 0c                	push   0xc
c000f464:	e8 e8 77 ff ff       	call   c0006c51 <malloc>
c000f469:	89 c3                	mov    ebx,eax
c000f46b:	58                   	pop    eax
c000f46c:	5a                   	pop    edx
c000f46d:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c000f473:	53                   	push   ebx
c000f474:	e8 71 fe ff ff       	call   c000f2ea <EnvVarContainer::EnvVarContainer(Process*)>
c000f479:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f47c:	89 1d 38 20 02 c0    	mov    DWORD PTR ds:0xc0022038,ebx
c000f482:	e8 47 fe ff ff       	call   c000f2ce <EnvVarContainer::__loadSystem()>
c000f487:	83 c4 18             	add    esp,0x18
c000f48a:	5b                   	pop    ebx
c000f48b:	c3                   	ret    

c000f48c <Krnl::loadUserEnv()>:
c000f48c:	53                   	push   ebx
c000f48d:	83 ec 14             	sub    esp,0x14
c000f490:	6a 0c                	push   0xc
c000f492:	e8 ba 77 ff ff       	call   c0006c51 <malloc>
c000f497:	89 c3                	mov    ebx,eax
c000f499:	58                   	pop    eax
c000f49a:	5a                   	pop    edx
c000f49b:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c000f4a1:	53                   	push   ebx
c000f4a2:	e8 43 fe ff ff       	call   c000f2ea <EnvVarContainer::EnvVarContainer(Process*)>
c000f4a7:	89 1d 34 20 02 c0    	mov    DWORD PTR ds:0xc0022034,ebx
c000f4ad:	83 c4 18             	add    esp,0x18
c000f4b0:	5b                   	pop    ebx
c000f4b1:	c3                   	ret    

c000f4b2 <Krnl::flushEnv()>:
c000f4b2:	c3                   	ret    

c000f4b3 <Krnl::getProcessTotalEnvCount(Process*)>:
c000f4b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4b7:	8b 15 34 20 02 c0    	mov    edx,DWORD PTR ds:0xc0022034
c000f4bd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f4c3:	a1 38 20 02 c0       	mov    eax,ds:0xc0022038
c000f4c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ca:	03 01                	add    eax,DWORD PTR [ecx]
c000f4cc:	85 d2                	test   edx,edx
c000f4ce:	74 02                	je     c000f4d2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f4d0:	03 02                	add    eax,DWORD PTR [edx]
c000f4d2:	c3                   	ret    

c000f4d3 <Krnl::getProcessEnvPair(Process*, int)>:
c000f4d3:	57                   	push   edi
c000f4d4:	56                   	push   esi
c000f4d5:	8b 35 34 20 02 c0    	mov    esi,DWORD PTR ds:0xc0022034
c000f4db:	53                   	push   ebx
c000f4dc:	85 f6                	test   esi,esi
c000f4de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f4e6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f4ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f4f0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f4f2:	75 16                	jne    c000f50a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f4f4:	39 c2                	cmp    edx,eax
c000f4f6:	7c 16                	jl     c000f50e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f4f8:	8b 0d 38 20 02 c0    	mov    ecx,DWORD PTR ds:0xc0022038
c000f4fe:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f500:	01 c6                	add    esi,eax
c000f502:	39 d6                	cmp    esi,edx
c000f504:	7e 3c                	jle    c000f542 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f506:	29 c2                	sub    edx,eax
c000f508:	eb 04                	jmp    c000f50e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f50a:	39 c2                	cmp    edx,eax
c000f50c:	7d 05                	jge    c000f513 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f50e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f511:	eb 20                	jmp    c000f533 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f513:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f515:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f518:	39 d1                	cmp    ecx,edx
c000f51a:	7e 04                	jle    c000f520 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f51c:	29 c2                	sub    edx,eax
c000f51e:	eb 10                	jmp    c000f530 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f520:	8b 35 38 20 02 c0    	mov    esi,DWORD PTR ds:0xc0022038
c000f526:	03 0e                	add    ecx,DWORD PTR [esi]
c000f528:	39 d1                	cmp    ecx,edx
c000f52a:	7e 16                	jle    c000f542 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f52c:	29 c2                	sub    edx,eax
c000f52e:	29 fa                	sub    edx,edi
c000f530:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f533:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f536:	8b 02                	mov    eax,DWORD PTR [edx]
c000f538:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f53b:	89 03                	mov    DWORD PTR [ebx],eax
c000f53d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f540:	eb 1d                	jmp    c000f55f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f542:	83 ec 0c             	sub    esp,0xc
c000f545:	68 46 dd 01 c0       	push   0xc001dd46
c000f54a:	e8 18 00 00 00       	call   c000f567 <Krnl::panic(char const*)>
c000f54f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f555:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f55c:	83 c4 10             	add    esp,0x10
c000f55f:	89 d8                	mov    eax,ebx
c000f561:	5b                   	pop    ebx
c000f562:	5e                   	pop    esi
c000f563:	5f                   	pop    edi
c000f564:	c2 04 00             	ret    0x4

c000f567 <Krnl::panic(char const*)>:
c000f567:	53                   	push   ebx
c000f568:	83 ec 10             	sub    esp,0x10
c000f56b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f56f:	fa                   	cli    
c000f570:	c6 05 44 20 02 c0 01 	mov    BYTE PTR ds:0xc0022044,0x1
c000f577:	53                   	push   ebx
c000f578:	68 60 dd 01 c0       	push   0xc001dd60
c000f57d:	e8 92 a4 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c000f582:	83 c4 0c             	add    esp,0xc
c000f585:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f58a:	6a 01                	push   0x1
c000f58c:	6a 0f                	push   0xf
c000f58e:	50                   	push   eax
c000f58f:	e8 40 82 ff ff       	call   c00077d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f594:	58                   	pop    eax
c000f595:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f59a:	50                   	push   eax
c000f59b:	e8 2c 84 ff ff       	call   c00079cc <VgaText::clearScreen()>
c000f5a0:	58                   	pop    eax
c000f5a1:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f5a7:	5a                   	pop    edx
c000f5a8:	68 b7 dd 01 c0       	push   0xc001ddb7
c000f5ad:	51                   	push   ecx
c000f5ae:	e8 59 82 ff ff       	call   c000780c <VgaText::setTitle(char*)>
c000f5b3:	83 c4 0c             	add    esp,0xc
c000f5b6:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f5bb:	6a 01                	push   0x1
c000f5bd:	6a 0f                	push   0xf
c000f5bf:	50                   	push   eax
c000f5c0:	e8 0f 82 ff ff       	call   c00077d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f5c5:	58                   	pop    eax
c000f5c6:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f5cc:	5a                   	pop    edx
c000f5cd:	68 79 dd 01 c0       	push   0xc001dd79
c000f5d2:	51                   	push   ecx
c000f5d3:	e8 e8 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f5d8:	58                   	pop    eax
c000f5d9:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f5df:	5a                   	pop    edx
c000f5e0:	68 00 de 01 c0       	push   0xc001de00
c000f5e5:	51                   	push   ecx
c000f5e6:	e8 d5 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f5eb:	58                   	pop    eax
c000f5ec:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f5f2:	5a                   	pop    edx
c000f5f3:	68 95 dd 01 c0       	push   0xc001dd95
c000f5f8:	51                   	push   ecx
c000f5f9:	e8 c2 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f5fe:	58                   	pop    eax
c000f5ff:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f605:	5a                   	pop    edx
c000f606:	53                   	push   ebx
c000f607:	51                   	push   ecx
c000f608:	e8 b3 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f60d:	5b                   	pop    ebx
c000f60e:	58                   	pop    eax
c000f60f:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f614:	68 b5 dd 01 c0       	push   0xc001ddb5
c000f619:	50                   	push   eax
c000f61a:	e8 a1 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f61f:	58                   	pop    eax
c000f620:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f624:	50                   	push   eax
c000f625:	e8 d9 29 00 00       	call   c0012003 <Thr::getDriverNameFromAddress(unsigned long)>
c000f62a:	83 c4 10             	add    esp,0x10
c000f62d:	85 c0                	test   eax,eax
c000f62f:	0f 84 59 01 00 00    	je     c000f78e <Krnl::panic(char const*)+0x227>
c000f635:	83 ec 08             	sub    esp,0x8
c000f638:	89 c3                	mov    ebx,eax
c000f63a:	68 3c de 01 c0       	push   0xc001de3c
c000f63f:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f644:	50                   	push   eax
c000f645:	e8 76 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f64a:	58                   	pop    eax
c000f64b:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f651:	5a                   	pop    edx
c000f652:	68 95 dd 01 c0       	push   0xc001dd95
c000f657:	51                   	push   ecx
c000f658:	e8 63 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f65d:	58                   	pop    eax
c000f65e:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f664:	5a                   	pop    edx
c000f665:	53                   	push   ebx
c000f666:	51                   	push   ecx
c000f667:	e8 54 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f66c:	83 c4 10             	add    esp,0x10
c000f66f:	83 ec 08             	sub    esp,0x8
c000f672:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f677:	68 b4 dd 01 c0       	push   0xc001ddb4
c000f67c:	50                   	push   eax
c000f67d:	e8 3e 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f682:	5a                   	pop    edx
c000f683:	8b 1d f4 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5f4
c000f689:	59                   	pop    ecx
c000f68a:	68 94 de 01 c0       	push   0xc001de94
c000f68f:	53                   	push   ebx
c000f690:	e8 2b 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f695:	58                   	pop    eax
c000f696:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f69c:	5a                   	pop    edx
c000f69d:	68 d4 de 01 c0       	push   0xc001ded4
c000f6a2:	51                   	push   ecx
c000f6a3:	e8 18 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f6a8:	5b                   	pop    ebx
c000f6a9:	58                   	pop    eax
c000f6aa:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f6af:	68 a0 dd 01 c0       	push   0xc001dda0
c000f6b4:	50                   	push   eax
c000f6b5:	e8 06 86 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f6ba:	58                   	pop    eax
c000f6bb:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f6c1:	5a                   	pop    edx
c000f6c2:	68 18 df 01 c0       	push   0xc001df18
c000f6c7:	51                   	push   ecx
c000f6c8:	e8 f3 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f6cd:	5b                   	pop    ebx
c000f6ce:	58                   	pop    eax
c000f6cf:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f6d4:	68 b8 dd 01 c0       	push   0xc001ddb8
c000f6d9:	50                   	push   eax
c000f6da:	e8 e1 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f6df:	0f 20 c0             	mov    eax,cr0
c000f6e2:	8b 1d f4 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5f4
c000f6e8:	5a                   	pop    edx
c000f6e9:	59                   	pop    ecx
c000f6ea:	50                   	push   eax
c000f6eb:	53                   	push   ebx
c000f6ec:	e8 89 85 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c000f6f1:	58                   	pop    eax
c000f6f2:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f6f8:	5a                   	pop    edx
c000f6f9:	68 c2 dd 01 c0       	push   0xc001ddc2
c000f6fe:	51                   	push   ecx
c000f6ff:	e8 bc 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f704:	0f 20 d0             	mov    eax,cr2
c000f707:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f70d:	5b                   	pop    ebx
c000f70e:	5a                   	pop    edx
c000f70f:	50                   	push   eax
c000f710:	51                   	push   ecx
c000f711:	e8 64 85 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c000f716:	5b                   	pop    ebx
c000f717:	58                   	pop    eax
c000f718:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f71d:	68 cc dd 01 c0       	push   0xc001ddcc
c000f722:	50                   	push   eax
c000f723:	e8 98 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f728:	0f 20 d8             	mov    eax,cr3
c000f72b:	8b 1d f4 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f5f4
c000f731:	5a                   	pop    edx
c000f732:	59                   	pop    ecx
c000f733:	50                   	push   eax
c000f734:	53                   	push   ebx
c000f735:	e8 40 85 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c000f73a:	58                   	pop    eax
c000f73b:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f741:	5a                   	pop    edx
c000f742:	68 df dd 01 c0       	push   0xc001dddf
c000f747:	51                   	push   ecx
c000f748:	e8 73 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f74d:	0f 20 e0             	mov    eax,cr4
c000f750:	8b 0d f4 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5f4
c000f756:	5b                   	pop    ebx
c000f757:	5a                   	pop    edx
c000f758:	50                   	push   eax
c000f759:	51                   	push   ecx
c000f75a:	e8 1b 85 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c000f75f:	5b                   	pop    ebx
c000f760:	58                   	pop    eax
c000f761:	a1 f4 f5 01 c0       	mov    eax,ds:0xc001f5f4
c000f766:	68 e9 dd 01 c0       	push   0xc001dde9
c000f76b:	50                   	push   eax
c000f76c:	e8 4f 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f771:	83 c4 10             	add    esp,0x10
c000f774:	b2 fe                	mov    dl,0xfe
c000f776:	e4 60                	in     al,0x60
c000f778:	3c 1c                	cmp    al,0x1c
c000f77a:	74 04                	je     c000f780 <Krnl::panic(char const*)+0x219>
c000f77c:	3c 5a                	cmp    al,0x5a
c000f77e:	75 f6                	jne    c000f776 <Krnl::panic(char const*)+0x20f>
c000f780:	e4 64                	in     al,0x64
c000f782:	a8 02                	test   al,0x2
c000f784:	75 fa                	jne    c000f780 <Krnl::panic(char const*)+0x219>
c000f786:	88 d0                	mov    al,dl
c000f788:	e6 64                	out    0x64,al
c000f78a:	fa                   	cli    
c000f78b:	f4                   	hlt    
c000f78c:	eb e8                	jmp    c000f776 <Krnl::panic(char const*)+0x20f>
c000f78e:	50                   	push   eax
c000f78f:	50                   	push   eax
c000f790:	68 68 de 01 c0       	push   0xc001de68
c000f795:	ff 35 f4 f5 01 c0    	push   DWORD PTR ds:0xc001f5f4
c000f79b:	e8 20 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f7a0:	58                   	pop    eax
c000f7a1:	5a                   	pop    edx
c000f7a2:	68 95 dd 01 c0       	push   0xc001dd95
c000f7a7:	ff 35 f4 f5 01 c0    	push   DWORD PTR ds:0xc001f5f4
c000f7ad:	e8 0e 85 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f7b2:	59                   	pop    ecx
c000f7b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7b8:	5b                   	pop    ebx
c000f7b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f7bc:	83 c0 0c             	add    eax,0xc
c000f7bf:	50                   	push   eax
c000f7c0:	ff 35 f4 f5 01 c0    	push   DWORD PTR ds:0xc001f5f4
c000f7c6:	e8 f5 84 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c000f7cb:	83 c4 10             	add    esp,0x10
c000f7ce:	e9 9c fe ff ff       	jmp    c000f66f <Krnl::panic(char const*)+0x108>

c000f7d3 <Krnl::powerThread(void*)>:
c000f7d3:	53                   	push   ebx
c000f7d4:	83 ec 08             	sub    esp,0x8
c000f7d7:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000f7dc:	48                   	dec    eax
c000f7dd:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c000f7e2:	75 01                	jne    c000f7e5 <Krnl::powerThread(void*)+0x12>
c000f7e4:	fb                   	sti    
c000f7e5:	83 ec 0c             	sub    esp,0xc
c000f7e8:	8b 1d 94 20 02 c0    	mov    ebx,DWORD PTR ds:0xc0022094
c000f7ee:	6a 0a                	push   0xa
c000f7f0:	c6 05 60 20 02 c0 00 	mov    BYTE PTR ds:0xc0022060,0x0
c000f7f7:	e8 5c 35 00 00       	call   c0012d58 <sleep(unsigned int)>
c000f7fc:	a1 a4 20 02 c0       	mov    eax,ds:0xc00220a4
c000f801:	83 c4 10             	add    esp,0x10
c000f804:	83 c0 0a             	add    eax,0xa
c000f807:	85 db                	test   ebx,ebx
c000f809:	a3 a4 20 02 c0       	mov    ds:0xc00220a4,eax
c000f80e:	74 d5                	je     c000f7e5 <Krnl::powerThread(void*)+0x12>
c000f810:	39 d8                	cmp    eax,ebx
c000f812:	7e d1                	jle    c000f7e5 <Krnl::powerThread(void*)+0x12>
c000f814:	83 ec 0c             	sub    esp,0xc
c000f817:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000f81d:	e8 90 6a ff ff       	call   c00062b2 <Computer::sleep()>
c000f822:	83 c4 10             	add    esp,0x10
c000f825:	eb be                	jmp    c000f7e5 <Krnl::powerThread(void*)+0x12>

c000f827 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f827:	57                   	push   edi
c000f828:	b9 09 00 00 00       	mov    ecx,0x9
c000f82d:	56                   	push   esi
c000f82e:	bf 80 20 02 c0       	mov    edi,0xc0022080
c000f833:	fc                   	cld    
c000f834:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f838:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f83a:	5e                   	pop    esi
c000f83b:	5f                   	pop    edi
c000f83c:	c3                   	ret    

c000f83d <Krnl::userIOReceived()>:
c000f83d:	c7 05 a4 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00220a4,0x0
c000f847:	c3                   	ret    

c000f848 <Krnl::handlePowerButton()>:
c000f848:	83 ec 0c             	sub    esp,0xc
c000f84b:	a1 80 20 02 c0       	mov    eax,ds:0xc0022080
c000f850:	83 f8 02             	cmp    eax,0x2
c000f853:	75 10                	jne    c000f865 <Krnl::handlePowerButton()+0x1d>
c000f855:	83 ec 0c             	sub    esp,0xc
c000f858:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000f85e:	e8 1f 6a ff ff       	call   c0006282 <Computer::shutdown()>
c000f863:	eb 11                	jmp    c000f876 <Krnl::handlePowerButton()+0x2e>
c000f865:	48                   	dec    eax
c000f866:	75 11                	jne    c000f879 <Krnl::handlePowerButton()+0x31>
c000f868:	83 ec 0c             	sub    esp,0xc
c000f86b:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000f871:	e8 3c 6a ff ff       	call   c00062b2 <Computer::sleep()>
c000f876:	83 c4 10             	add    esp,0x10
c000f879:	83 c4 0c             	add    esp,0xc
c000f87c:	c3                   	ret    

c000f87d <Krnl::handleSleepButton()>:
c000f87d:	83 ec 0c             	sub    esp,0xc
c000f880:	a1 84 20 02 c0       	mov    eax,ds:0xc0022084
c000f885:	83 f8 02             	cmp    eax,0x2
c000f888:	75 10                	jne    c000f89a <Krnl::handleSleepButton()+0x1d>
c000f88a:	83 ec 0c             	sub    esp,0xc
c000f88d:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000f893:	e8 ea 69 ff ff       	call   c0006282 <Computer::shutdown()>
c000f898:	eb 11                	jmp    c000f8ab <Krnl::handleSleepButton()+0x2e>
c000f89a:	48                   	dec    eax
c000f89b:	75 11                	jne    c000f8ae <Krnl::handleSleepButton()+0x31>
c000f89d:	83 ec 0c             	sub    esp,0xc
c000f8a0:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000f8a6:	e8 07 6a ff ff       	call   c00062b2 <Computer::sleep()>
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	83 c4 0c             	add    esp,0xc
c000f8b1:	c3                   	ret    

c000f8b2 <Krnl::setupPowerManager()>:
c000f8b2:	83 ec 0c             	sub    esp,0xc
c000f8b5:	c7 05 a4 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00220a4,0x0
c000f8bf:	68 f0 00 00 00       	push   0xf0
c000f8c4:	c6 05 60 20 02 c0 00 	mov    BYTE PTR ds:0xc0022060,0x0
c000f8cb:	6a 00                	push   0x0
c000f8cd:	68 d3 f7 00 c0       	push   0xc000f7d3
c000f8d2:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c000f8d8:	e8 4b 2f 00 00       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c000f8dd:	c7 05 80 20 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022080,0x2
c000f8e7:	c7 05 84 20 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022084,0x1
c000f8f1:	c7 05 88 20 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022088,0x3
c000f8fb:	c7 05 8c 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002208c,0x0
c000f905:	c7 05 98 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022098,0x0
c000f90f:	c7 05 90 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022090,0x0
c000f919:	c7 05 9c 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002209c,0x0
c000f923:	c7 05 94 20 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022094,0x3c
c000f92d:	c7 05 a0 20 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00220a0,0x3c
c000f937:	83 c4 1c             	add    esp,0x1c
c000f93a:	c3                   	ret    

c000f93b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f93b:	55                   	push   ebp
c000f93c:	57                   	push   edi
c000f93d:	56                   	push   esi
c000f93e:	53                   	push   ebx
c000f93f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f945:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f94c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f94e:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f951:	80 fb 40             	cmp    bl,0x40
c000f954:	75 1b                	jne    c000f971 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f956:	8a 16                	mov    dl,BYTE PTR [esi]
c000f958:	84 d2                	test   dl,dl
c000f95a:	0f 84 f1 00 00 00    	je     c000fa51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f960:	8d 46 01             	lea    eax,[esi+0x1]
c000f963:	80 fa 3a             	cmp    dl,0x3a
c000f966:	74 04                	je     c000f96c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f968:	89 c6                	mov    esi,eax
c000f96a:	eb ea                	jmp    c000f956 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f96c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f96f:	89 c6                	mov    esi,eax
c000f971:	50                   	push   eax
c000f972:	6a 40                	push   0x40
c000f974:	6a 00                	push   0x0
c000f976:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f97a:	50                   	push   eax
c000f97b:	e8 70 0b ff ff       	call   c00004f0 <memset>
c000f980:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f987:	31 c0                	xor    eax,eax
c000f989:	83 c4 10             	add    esp,0x10
c000f98c:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f98e:	84 c9                	test   cl,cl
c000f990:	0f 84 bb 00 00 00    	je     c000fa51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f996:	3d c7 00 00 00       	cmp    eax,0xc7
c000f99b:	0f 8f b0 00 00 00    	jg     c000fa51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f9a1:	80 f9 0a             	cmp    cl,0xa
c000f9a4:	0f 85 98 00 00 00    	jne    c000fa42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f9aa:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f9af:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f9b3:	a8 df                	test   al,0xdf
c000f9b5:	0f 94 c1             	sete   cl
c000f9b8:	3c 23                	cmp    al,0x23
c000f9ba:	0f 94 c2             	sete   dl
c000f9bd:	08 d1                	or     cl,dl
c000f9bf:	75 4a                	jne    c000fa0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f9c1:	8d 50 f7             	lea    edx,[eax-0x9]
c000f9c4:	80 fa 01             	cmp    dl,0x1
c000f9c7:	76 42                	jbe    c000fa0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f9c9:	3c 5b                	cmp    al,0x5b
c000f9cb:	75 42                	jne    c000fa0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f9cd:	80 fb 40             	cmp    bl,0x40
c000f9d0:	75 39                	jne    c000fa0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f9d9:	52                   	push   edx
c000f9da:	e8 81 0b ff ff       	call   c0000560 <strlen>
c000f9df:	83 c4 10             	add    esp,0x10
c000f9e2:	83 f8 3f             	cmp    eax,0x3f
c000f9e5:	77 6a                	ja     c000fa51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f9e7:	50                   	push   eax
c000f9e8:	50                   	push   eax
c000f9e9:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f9ed:	52                   	push   edx
c000f9ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f9f2:	52                   	push   edx
c000f9f3:	e8 28 0c ff ff       	call   c0000620 <strcpy>
c000f9f8:	58                   	pop    eax
c000f9f9:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f9fd:	52                   	push   edx
c000f9fe:	e8 5d 0b ff ff       	call   c0000560 <strlen>
c000fa03:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000fa08:	83 c4 10             	add    esp,0x10
c000fa0b:	31 d2                	xor    edx,edx
c000fa0d:	eb 3a                	jmp    c000fa49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000fa0f:	80 fb 40             	cmp    bl,0x40
c000fa12:	74 06                	je     c000fa1a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000fa14:	8d 44 24 58          	lea    eax,[esp+0x58]
c000fa18:	eb 20                	jmp    c000fa3a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000fa1a:	50                   	push   eax
c000fa1b:	50                   	push   eax
c000fa1c:	55                   	push   ebp
c000fa1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000fa21:	50                   	push   eax
c000fa22:	e8 d9 0c ff ff       	call   c0000700 <strcmp>
c000fa27:	83 c4 10             	add    esp,0x10
c000fa2a:	85 c0                	test   eax,eax
c000fa2c:	75 dd                	jne    c000fa0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fa2e:	eb e4                	jmp    c000fa14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000fa30:	8d 50 01             	lea    edx,[eax+0x1]
c000fa33:	80 f9 3d             	cmp    cl,0x3d
c000fa36:	74 1d                	je     c000fa55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000fa38:	89 d0                	mov    eax,edx
c000fa3a:	8a 08                	mov    cl,BYTE PTR [eax]
c000fa3c:	84 c9                	test   cl,cl
c000fa3e:	75 f0                	jne    c000fa30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000fa40:	eb 0f                	jmp    c000fa51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fa42:	8d 50 01             	lea    edx,[eax+0x1]
c000fa45:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000fa49:	47                   	inc    edi
c000fa4a:	89 d0                	mov    eax,edx
c000fa4c:	e9 3b ff ff ff       	jmp    c000f98c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000fa51:	31 c0                	xor    eax,eax
c000fa53:	eb 33                	jmp    c000fa88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000fa55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa5c:	50                   	push   eax
c000fa5d:	50                   	push   eax
c000fa5e:	8d 44 24 60          	lea    eax,[esp+0x60]
c000fa62:	50                   	push   eax
c000fa63:	56                   	push   esi
c000fa64:	e8 97 0c ff ff       	call   c0000700 <strcmp>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	85 c0                	test   eax,eax
c000fa6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa72:	75 97                	jne    c000fa0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fa74:	51                   	push   ecx
c000fa75:	51                   	push   ecx
c000fa76:	52                   	push   edx
c000fa77:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000fa7e:	e8 9d 0b ff ff       	call   c0000620 <strcpy>
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	b0 01                	mov    al,0x1
c000fa88:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fa8e:	5b                   	pop    ebx
c000fa8f:	5e                   	pop    esi
c000fa90:	5f                   	pop    edi
c000fa91:	5d                   	pop    ebp
c000fa92:	c3                   	ret    

c000fa93 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000fa93:	57                   	push   edi
c000fa94:	56                   	push   esi
c000fa95:	53                   	push   ebx
c000fa96:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000fa9c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000faa3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000faaa:	53                   	push   ebx
c000faab:	e8 b0 0a ff ff       	call   c0000560 <strlen>
c000fab0:	89 34 24             	mov    DWORD PTR [esp],esi
c000fab3:	89 c7                	mov    edi,eax
c000fab5:	e8 a6 0a ff ff       	call   c0000560 <strlen>
c000faba:	83 c4 10             	add    esp,0x10
c000fabd:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000fac1:	3d ff 00 00 00       	cmp    eax,0xff
c000fac6:	0f 87 d3 00 00 00    	ja     c000fb9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000facc:	57                   	push   edi
c000facd:	57                   	push   edi
c000face:	56                   	push   esi
c000facf:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fad3:	56                   	push   esi
c000fad4:	e8 47 0b ff ff       	call   c0000620 <strcpy>
c000fad9:	58                   	pop    eax
c000fada:	5a                   	pop    edx
c000fadb:	68 23 e2 01 c0       	push   0xc001e223
c000fae0:	56                   	push   esi
c000fae1:	e8 fa 0c ff ff       	call   c00007e0 <strcat>
c000fae6:	59                   	pop    ecx
c000fae7:	5f                   	pop    edi
c000fae8:	53                   	push   ebx
c000fae9:	56                   	push   esi
c000faea:	e8 f1 0c ff ff       	call   c00007e0 <strcat>
c000faef:	58                   	pop    eax
c000faf0:	5a                   	pop    edx
c000faf1:	68 3e df 01 c0       	push   0xc001df3e
c000faf6:	56                   	push   esi
c000faf7:	e8 e4 0c ff ff       	call   c00007e0 <strcat>
c000fafc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000fb03:	e8 49 71 ff ff       	call   c0006c51 <malloc>
c000fb08:	83 c4 0c             	add    esp,0xc
c000fb0b:	89 c3                	mov    ebx,eax
c000fb0d:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c000fb13:	56                   	push   esi
c000fb14:	50                   	push   eax
c000fb15:	e8 70 a4 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000fb1a:	83 c4 10             	add    esp,0x10
c000fb1d:	85 db                	test   ebx,ebx
c000fb1f:	74 7e                	je     c000fb9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fb21:	51                   	push   ecx
c000fb22:	51                   	push   ecx
c000fb23:	6a 01                	push   0x1
c000fb25:	53                   	push   ebx
c000fb26:	e8 1f a5 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c000fb2b:	83 c4 10             	add    esp,0x10
c000fb2e:	85 c0                	test   eax,eax
c000fb30:	74 08                	je     c000fb3a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb37:	53                   	push   ebx
c000fb38:	eb 5f                	jmp    c000fb99 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000fb3a:	52                   	push   edx
c000fb3b:	8d 44 24 17          	lea    eax,[esp+0x17]
c000fb3f:	50                   	push   eax
c000fb40:	8d 44 24 20          	lea    eax,[esp+0x20]
c000fb44:	50                   	push   eax
c000fb45:	53                   	push   ebx
c000fb46:	e8 ab a7 ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c000fb4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	89 c1                	mov    ecx,eax
c000fb54:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000fb58:	74 31                	je     c000fb8b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fb5a:	83 ec 0c             	sub    esp,0xc
c000fb5d:	50                   	push   eax
c000fb5e:	e8 ee 70 ff ff       	call   c0006c51 <malloc>
c000fb63:	89 c6                	mov    esi,eax
c000fb65:	58                   	pop    eax
c000fb66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb68:	8d 54 24 20          	lea    edx,[esp+0x20]
c000fb6c:	52                   	push   edx
c000fb6d:	56                   	push   esi
c000fb6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fb72:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fb76:	53                   	push   ebx
c000fb77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fb7a:	83 c4 20             	add    esp,0x20
c000fb7d:	85 c0                	test   eax,eax
c000fb7f:	75 0a                	jne    c000fb8b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fb81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb85:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fb89:	74 18                	je     c000fba3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000fb8b:	83 ec 0c             	sub    esp,0xc
c000fb8e:	53                   	push   ebx
c000fb8f:	e8 14 a5 ff ff       	call   c000a0a8 <File::close()>
c000fb94:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	31 c0                	xor    eax,eax
c000fba1:	eb 3b                	jmp    c000fbde <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000fba3:	83 ec 0c             	sub    esp,0xc
c000fba6:	53                   	push   ebx
c000fba7:	e8 fc a4 ff ff       	call   c000a0a8 <File::close()>
c000fbac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fbb4:	83 c4 0c             	add    esp,0xc
c000fbb7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fbbe:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fbc5:	56                   	push   esi
c000fbc6:	e8 70 fd ff ff       	call   c000f93b <Reg::findLineFromLoadedData(char*, char*, char*)>
c000fbcb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbce:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fbd2:	e8 8a 70 ff ff       	call   c0006c61 <free>
c000fbd7:	83 c4 10             	add    esp,0x10
c000fbda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fbde:	81 c4 20 01 00 00    	add    esp,0x120
c000fbe4:	5b                   	pop    ebx
c000fbe5:	5e                   	pop    esi
c000fbe6:	5f                   	pop    edi
c000fbe7:	c3                   	ret    

c000fbe8 <Reg::getLine(char*, char*, char*)>:
c000fbe8:	57                   	push   edi
c000fbe9:	56                   	push   esi
c000fbea:	53                   	push   ebx
c000fbeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fbf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbf7:	57                   	push   edi
c000fbf8:	56                   	push   esi
c000fbf9:	53                   	push   ebx
c000fbfa:	68 43 df 01 c0       	push   0xc001df43
c000fbff:	e8 8f fe ff ff       	call   c000fa93 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	84 c0                	test   al,al
c000fc09:	75 10                	jne    c000fc1b <Reg::getLine(char*, char*, char*)+0x33>
c000fc0b:	57                   	push   edi
c000fc0c:	56                   	push   esi
c000fc0d:	53                   	push   ebx
c000fc0e:	68 68 df 01 c0       	push   0xc001df68
c000fc13:	e8 7b fe ff ff       	call   c000fa93 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	5b                   	pop    ebx
c000fc1c:	5e                   	pop    esi
c000fc1d:	5f                   	pop    edi
c000fc1e:	c3                   	ret    

c000fc1f <Reg::readInt(char*, char*, int*)>:
c000fc1f:	55                   	push   ebp
c000fc20:	57                   	push   edi
c000fc21:	56                   	push   esi
c000fc22:	53                   	push   ebx
c000fc23:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fc29:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000fc2d:	57                   	push   edi
c000fc2e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fc35:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fc3c:	e8 a7 ff ff ff       	call   c000fbe8 <Reg::getLine(char*, char*, char*)>
c000fc41:	83 c4 10             	add    esp,0x10
c000fc44:	84 c0                	test   al,al
c000fc46:	0f 84 b3 00 00 00    	je     c000fcff <Reg::readInt(char*, char*, int*)+0xe0>
c000fc4c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000fc50:	80 fa 2b             	cmp    dl,0x2b
c000fc53:	74 0c                	je     c000fc61 <Reg::readInt(char*, char*, int*)+0x42>
c000fc55:	80 fa 2d             	cmp    dl,0x2d
c000fc58:	75 0e                	jne    c000fc68 <Reg::readInt(char*, char*, int*)+0x49>
c000fc5a:	ba 01 00 00 00       	mov    edx,0x1
c000fc5f:	eb 0b                	jmp    c000fc6c <Reg::readInt(char*, char*, int*)+0x4d>
c000fc61:	ba 01 00 00 00       	mov    edx,0x1
c000fc66:	eb 02                	jmp    c000fc6a <Reg::readInt(char*, char*, int*)+0x4b>
c000fc68:	31 d2                	xor    edx,edx
c000fc6a:	31 c0                	xor    eax,eax
c000fc6c:	be 0a 00 00 00       	mov    esi,0xa
c000fc71:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000fc76:	75 20                	jne    c000fc98 <Reg::readInt(char*, char*, int*)+0x79>
c000fc78:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000fc7c:	80 f9 78             	cmp    cl,0x78
c000fc7f:	75 0a                	jne    c000fc8b <Reg::readInt(char*, char*, int*)+0x6c>
c000fc81:	83 c2 02             	add    edx,0x2
c000fc84:	be 10 00 00 00       	mov    esi,0x10
c000fc89:	eb 0d                	jmp    c000fc98 <Reg::readInt(char*, char*, int*)+0x79>
c000fc8b:	80 f9 62             	cmp    cl,0x62
c000fc8e:	75 08                	jne    c000fc98 <Reg::readInt(char*, char*, int*)+0x79>
c000fc90:	83 c2 02             	add    edx,0x2
c000fc93:	be 02 00 00 00       	mov    esi,0x2
c000fc98:	01 d7                	add    edi,edx
c000fc9a:	31 d2                	xor    edx,edx
c000fc9c:	8a 1f                	mov    bl,BYTE PTR [edi]
c000fc9e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000fca2:	80 fb 0d             	cmp    bl,0xd
c000fca5:	0f 94 c3             	sete   bl
c000fca8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000fcad:	0f 94 c1             	sete   cl
c000fcb0:	08 cb                	or     bl,cl
c000fcb2:	75 3a                	jne    c000fcee <Reg::readInt(char*, char*, int*)+0xcf>
c000fcb4:	0f af d6             	imul   edx,esi
c000fcb7:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000fcbc:	83 fe 10             	cmp    esi,0x10
c000fcbf:	75 26                	jne    c000fce7 <Reg::readInt(char*, char*, int*)+0xc8>
c000fcc1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fcc5:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000fcc8:	89 e9                	mov    ecx,ebp
c000fcca:	80 f9 05             	cmp    cl,0x5
c000fccd:	77 06                	ja     c000fcd5 <Reg::readInt(char*, char*, int*)+0xb6>
c000fccf:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fcd3:	eb 16                	jmp    c000fceb <Reg::readInt(char*, char*, int*)+0xcc>
c000fcd5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fcd9:	83 e9 61             	sub    ecx,0x61
c000fcdc:	80 f9 05             	cmp    cl,0x5
c000fcdf:	77 06                	ja     c000fce7 <Reg::readInt(char*, char*, int*)+0xc8>
c000fce1:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fce5:	eb 04                	jmp    c000fceb <Reg::readInt(char*, char*, int*)+0xcc>
c000fce7:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fceb:	47                   	inc    edi
c000fcec:	eb ae                	jmp    c000fc9c <Reg::readInt(char*, char*, int*)+0x7d>
c000fcee:	84 c0                	test   al,al
c000fcf0:	74 02                	je     c000fcf4 <Reg::readInt(char*, char*, int*)+0xd5>
c000fcf2:	f7 da                	neg    edx
c000fcf4:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fcfb:	89 10                	mov    DWORD PTR [eax],edx
c000fcfd:	88 d8                	mov    al,bl
c000fcff:	81 c4 ec 00 00 00    	add    esp,0xec
c000fd05:	5b                   	pop    ebx
c000fd06:	5e                   	pop    esi
c000fd07:	5f                   	pop    edi
c000fd08:	5d                   	pop    ebp
c000fd09:	c3                   	ret    

c000fd0a <Reg::readString(char*, char*, char*, int)>:
c000fd0a:	57                   	push   edi
c000fd0b:	56                   	push   esi
c000fd0c:	53                   	push   ebx
c000fd0d:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fd13:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fd1a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fd1e:	57                   	push   edi
c000fd1f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fd26:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fd2d:	e8 b6 fe ff ff       	call   c000fbe8 <Reg::getLine(char*, char*, char*)>
c000fd32:	83 c4 10             	add    esp,0x10
c000fd35:	89 c6                	mov    esi,eax
c000fd37:	84 c0                	test   al,al
c000fd39:	74 44                	je     c000fd7f <Reg::readString(char*, char*, char*, int)+0x75>
c000fd3b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fd42:	31 c0                	xor    eax,eax
c000fd44:	4a                   	dec    edx
c000fd45:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fd48:	84 c9                	test   cl,cl
c000fd4a:	74 0f                	je     c000fd5b <Reg::readString(char*, char*, char*, int)+0x51>
c000fd4c:	39 c2                	cmp    edx,eax
c000fd4e:	7e 0b                	jle    c000fd5b <Reg::readString(char*, char*, char*, int)+0x51>
c000fd50:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fd53:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fd58:	40                   	inc    eax
c000fd59:	eb ea                	jmp    c000fd45 <Reg::readString(char*, char*, char*, int)+0x3b>
c000fd5b:	83 ec 0c             	sub    esp,0xc
c000fd5e:	53                   	push   ebx
c000fd5f:	e8 fc 07 ff ff       	call   c0000560 <strlen>
c000fd64:	83 c4 10             	add    esp,0x10
c000fd67:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fd6c:	75 11                	jne    c000fd7f <Reg::readString(char*, char*, char*, int)+0x75>
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	53                   	push   ebx
c000fd72:	e8 e9 07 ff ff       	call   c0000560 <strlen>
c000fd77:	83 c4 10             	add    esp,0x10
c000fd7a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fd7f:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fd85:	89 f0                	mov    eax,esi
c000fd87:	5b                   	pop    ebx
c000fd88:	5e                   	pop    esi
c000fd89:	5f                   	pop    edi
c000fd8a:	c3                   	ret    

c000fd8b <Reg::readBool(char*, char*, bool*)>:
c000fd8b:	83 ec 20             	sub    esp,0x20
c000fd8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fd92:	50                   	push   eax
c000fd93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd9b:	e8 7f fe ff ff       	call   c000fc1f <Reg::readInt(char*, char*, int*)>
c000fda0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fda5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fda9:	0f 95 02             	setne  BYTE PTR [edx]
c000fdac:	83 c4 2c             	add    esp,0x2c
c000fdaf:	c3                   	ret    

c000fdb0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fdb0:	53                   	push   ebx
c000fdb1:	83 ec 1c             	sub    esp,0x1c
c000fdb4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fdb8:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fdbc:	50                   	push   eax
c000fdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdc5:	e8 c1 ff ff ff       	call   c000fd8b <Reg::readBool(char*, char*, bool*)>
c000fdca:	83 c4 10             	add    esp,0x10
c000fdcd:	84 c0                	test   al,al
c000fdcf:	74 04                	je     c000fdd5 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fdd1:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fdd5:	88 d8                	mov    al,bl
c000fdd7:	83 c4 18             	add    esp,0x18
c000fdda:	5b                   	pop    ebx
c000fddb:	c3                   	ret    

c000fddc <Reg::readIntWithDefault(char*, char*, int)>:
c000fddc:	53                   	push   ebx
c000fddd:	83 ec 1c             	sub    esp,0x1c
c000fde0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fde4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fde8:	50                   	push   eax
c000fde9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdf1:	e8 29 fe ff ff       	call   c000fc1f <Reg::readInt(char*, char*, int*)>
c000fdf6:	83 c4 10             	add    esp,0x10
c000fdf9:	84 c0                	test   al,al
c000fdfb:	74 04                	je     c000fe01 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fdfd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fe01:	89 d8                	mov    eax,ebx
c000fe03:	83 c4 18             	add    esp,0x18
c000fe06:	5b                   	pop    ebx
c000fe07:	c3                   	ret    

c000fe08 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fe08:	57                   	push   edi
c000fe09:	56                   	push   esi
c000fe0a:	56                   	push   esi
c000fe0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe0f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fe13:	56                   	push   esi
c000fe14:	57                   	push   edi
c000fe15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe1d:	e8 e8 fe ff ff       	call   c000fd0a <Reg::readString(char*, char*, char*, int)>
c000fe22:	83 c4 10             	add    esp,0x10
c000fe25:	84 c0                	test   al,al
c000fe27:	75 1a                	jne    c000fe43 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fe29:	51                   	push   ecx
c000fe2a:	56                   	push   esi
c000fe2b:	6a 00                	push   0x0
c000fe2d:	57                   	push   edi
c000fe2e:	e8 bd 06 ff ff       	call   c00004f0 <memset>
c000fe33:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fe36:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fe3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fe43:	89 f8                	mov    eax,edi
c000fe45:	5a                   	pop    edx
c000fe46:	5e                   	pop    esi
c000fe47:	5f                   	pop    edi
c000fe48:	c3                   	ret    

c000fe49 <Sys::eject(regs*)>:
c000fe49:	83 ec 0c             	sub    esp,0xc
c000fe4c:	83 ca ff             	or     edx,0xffffffff
c000fe4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe53:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fe56:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fe5b:	83 e9 41             	sub    ecx,0x41
c000fe5e:	83 f9 19             	cmp    ecx,0x19
c000fe61:	77 18                	ja     c000fe7b <Sys::eject(regs*)+0x32>
c000fe63:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c000fe6a:	85 c9                	test   ecx,ecx
c000fe6c:	74 0d                	je     c000fe7b <Sys::eject(regs*)+0x32>
c000fe6e:	83 ec 0c             	sub    esp,0xc
c000fe71:	51                   	push   ecx
c000fe72:	e8 1b c2 ff ff       	call   c000c092 <LogicalDisk::eject()>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	99                   	cdq    
c000fe7b:	83 c4 0c             	add    esp,0xc
c000fe7e:	c3                   	ret    

c000fe7f <Sys::exit(regs*)>:
c000fe7f:	83 ec 18             	sub    esp,0x18
c000fe82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe86:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fe89:	e8 de 34 00 00       	call   c001336c <terminateTask(int)>
c000fe8e:	83 c8 ff             	or     eax,0xffffffff
c000fe91:	83 c4 1c             	add    esp,0x1c
c000fe94:	89 c2                	mov    edx,eax
c000fe96:	c3                   	ret    

c000fe97 <Sys::getCwd(regs*)>:
c000fe97:	83 ec 10             	sub    esp,0x10
c000fe9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe9e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fea1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fea9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000feac:	e8 db 9e ff ff       	call   c0009d8c <Fs::getcwd(Process*, char*, int)>
c000feb1:	83 c4 1c             	add    esp,0x1c
c000feb4:	99                   	cdq    
c000feb5:	c3                   	ret    

c000feb6 <Sys::getPID(regs*)>:
c000feb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000febb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000febe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec0:	99                   	cdq    
c000fec1:	c3                   	ret    

c000fec2 <Sys::getRAMData(regs*)>:
c000fec2:	8b 0d d8 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f5d8
c000fec8:	69 05 d4 f5 01 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc001f5d4,0xc8
c000fed2:	99                   	cdq    
c000fed3:	f7 f9                	idiv   ecx
c000fed5:	c1 e0 18             	shl    eax,0x18
c000fed8:	09 c8                	or     eax,ecx
c000feda:	99                   	cdq    
c000fedb:	c3                   	ret    

c000fedc <Sys::getVGAPtr(regs*)>:
c000fedc:	55                   	push   ebp
c000fedd:	57                   	push   edi
c000fede:	56                   	push   esi
c000fedf:	53                   	push   ebx
c000fee0:	83 ec 18             	sub    esp,0x18
c000fee3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fee7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000feea:	e8 7d 2f 00 00       	call   c0012e6c <Thr::processFromPID(int)>
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	89 c1                	mov    ecx,eax
c000fef4:	b8 01 00 00 00       	mov    eax,0x1
c000fef9:	85 c9                	test   ecx,ecx
c000fefb:	74 57                	je     c000ff54 <Sys::getVGAPtr(regs*)+0x78>
c000fefd:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000ff03:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000ff07:	74 0c                	je     c000ff15 <Sys::getVGAPtr(regs*)+0x39>
c000ff09:	83 ec 0c             	sub    esp,0xc
c000ff0c:	55                   	push   ebp
c000ff0d:	e8 6f 7a ff ff       	call   c0007981 <setActiveTerminal(VgaText*)>
c000ff12:	83 c4 10             	add    esp,0x10
c000ff15:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000ff18:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000ff1b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000ff20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff22:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000ff25:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff28:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000ff2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff31:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000ff34:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000ff3a:	50                   	push   eax
c000ff3b:	50                   	push   eax
c000ff3c:	68 83 df 01 c0       	push   0xc001df83
c000ff41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff44:	05 a8 0f 00 00       	add    eax,0xfa8
c000ff49:	50                   	push   eax
c000ff4a:	e8 d1 06 ff ff       	call   c0000620 <strcpy>
c000ff4f:	83 c4 10             	add    esp,0x10
c000ff52:	31 c0                	xor    eax,eax
c000ff54:	83 c4 0c             	add    esp,0xc
c000ff57:	31 d2                	xor    edx,edx
c000ff59:	5b                   	pop    ebx
c000ff5a:	5e                   	pop    esi
c000ff5b:	5f                   	pop    edi
c000ff5c:	5d                   	pop    ebp
c000ff5d:	c3                   	ret    

c000ff5e <Sys::loadDLL(regs*)>:
c000ff5e:	56                   	push   esi
c000ff5f:	53                   	push   ebx
c000ff60:	31 d2                	xor    edx,edx
c000ff62:	51                   	push   ecx
c000ff63:	b8 01 00 00 00       	mov    eax,0x1
c000ff68:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff6c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000ff70:	0f 84 8c 00 00 00    	je     c0010002 <Sys::loadDLL(regs*)+0xa4>
c000ff76:	83 ec 0c             	sub    esp,0xc
c000ff79:	68 14 01 00 00       	push   0x114
c000ff7e:	e8 ce 6c ff ff       	call   c0006c51 <malloc>
c000ff83:	83 c4 0c             	add    esp,0xc
c000ff86:	89 c3                	mov    ebx,eax
c000ff88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff8d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000ff90:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ff93:	53                   	push   ebx
c000ff94:	e8 f1 9f ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	31 d2                	xor    edx,edx
c000ff9e:	b8 02 00 00 00       	mov    eax,0x2
c000ffa3:	85 db                	test   ebx,ebx
c000ffa5:	74 5b                	je     c0010002 <Sys::loadDLL(regs*)+0xa4>
c000ffa7:	83 ec 0c             	sub    esp,0xc
c000ffaa:	53                   	push   ebx
c000ffab:	e8 08 a3 ff ff       	call   c000a2b8 <File::exists()>
c000ffb0:	83 c4 10             	add    esp,0x10
c000ffb3:	84 c0                	test   al,al
c000ffb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ffb7:	75 11                	jne    c000ffca <Sys::loadDLL(regs*)+0x6c>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	53                   	push   ebx
c000ffbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ffc0:	83 c4 10             	add    esp,0x10
c000ffc3:	b8 03 00 00 00       	mov    eax,0x3
c000ffc8:	eb 36                	jmp    c0010000 <Sys::loadDLL(regs*)+0xa2>
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	53                   	push   ebx
c000ffce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ffd1:	58                   	pop    eax
c000ffd2:	5a                   	pop    edx
c000ffd3:	6a 00                	push   0x0
c000ffd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ffd8:	e8 77 20 00 00       	call   c0012054 <Thr::loadDLL(char const*, bool)>
c000ffdd:	83 c4 10             	add    esp,0x10
c000ffe0:	89 c1                	mov    ecx,eax
c000ffe2:	31 d2                	xor    edx,edx
c000ffe4:	b8 04 00 00 00       	mov    eax,0x4
c000ffe9:	85 c9                	test   ecx,ecx
c000ffeb:	74 15                	je     c0010002 <Sys::loadDLL(regs*)+0xa4>
c000ffed:	53                   	push   ebx
c000ffee:	53                   	push   ebx
c000ffef:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c000fff5:	51                   	push   ecx
c000fff6:	e8 8a 22 00 00       	call   c0012285 <Thr::executeDLL(unsigned long, void*)>
c000fffb:	83 c4 10             	add    esp,0x10
c000fffe:	31 c0                	xor    eax,eax
c0010000:	31 d2                	xor    edx,edx
c0010002:	59                   	pop    ecx
c0010003:	5b                   	pop    ebx
c0010004:	5e                   	pop    esi
c0010005:	c3                   	ret    

c0010006 <Sys::read(regs*)>:
c0010006:	57                   	push   edi
c0010007:	56                   	push   esi
c0010008:	53                   	push   ebx
c0010009:	83 ec 10             	sub    esp,0x10
c001000c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010010:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010013:	83 f8 02             	cmp    eax,0x2
c0010016:	77 10                	ja     c0010028 <Sys::read(regs*)+0x22>
c0010018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001001d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010020:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010026:	eb 0e                	jmp    c0010036 <Sys::read(regs*)+0x30>
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	50                   	push   eax
c001002c:	e8 06 86 ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c0010031:	83 c4 10             	add    esp,0x10
c0010034:	89 c1                	mov    ecx,eax
c0010036:	83 c8 ff             	or     eax,0xffffffff
c0010039:	85 c9                	test   ecx,ecx
c001003b:	89 c2                	mov    edx,eax
c001003d:	74 28                	je     c0010067 <Sys::read(regs*)+0x61>
c001003f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010047:	31 ff                	xor    edi,edi
c0010049:	83 ec 0c             	sub    esp,0xc
c001004c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001004e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010052:	52                   	push   edx
c0010053:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010056:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010059:	57                   	push   edi
c001005a:	56                   	push   esi
c001005b:	51                   	push   ecx
c001005c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001005f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010063:	83 c4 20             	add    esp,0x20
c0010066:	99                   	cdq    
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	5b                   	pop    ebx
c001006b:	5e                   	pop    esi
c001006c:	5f                   	pop    edi
c001006d:	c3                   	ret    

c001006e <Sys::sbrk(regs*)>:
c001006e:	56                   	push   esi
c001006f:	53                   	push   ebx
c0010070:	50                   	push   eax
c0010071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010076:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001007a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001007d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0010080:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0010086:	85 db                	test   ebx,ebx
c0010088:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001008b:	74 02                	je     c001008f <Sys::sbrk(regs*)+0x21>
c001008d:	79 06                	jns    c0010095 <Sys::sbrk(regs*)+0x27>
c001008f:	89 f0                	mov    eax,esi
c0010091:	31 d2                	xor    edx,edx
c0010093:	eb 2a                	jmp    c00100bf <Sys::sbrk(regs*)+0x51>
c0010095:	83 c8 ff             	or     eax,0xffffffff
c0010098:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001009e:	89 c2                	mov    edx,eax
c00100a0:	77 1d                	ja     c00100bf <Sys::sbrk(regs*)+0x51>
c00100a2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00100a8:	50                   	push   eax
c00100a9:	c1 ea 0c             	shr    edx,0xc
c00100ac:	68 07 0c 00 00       	push   0xc07
c00100b1:	52                   	push   edx
c00100b2:	51                   	push   ecx
c00100b3:	e8 32 8e ff ff       	call   c0008eea <VAS::allocatePages(int, int)>
c00100b8:	89 f0                	mov    eax,esi
c00100ba:	31 d2                	xor    edx,edx
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	59                   	pop    ecx
c00100c0:	5b                   	pop    ebx
c00100c1:	5e                   	pop    esi
c00100c2:	c3                   	ret    

c00100c3 <Sys::setCwd(regs*)>:
c00100c3:	83 ec 14             	sub    esp,0x14
c00100c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100ca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00100cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100d2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00100d5:	e8 7d a2 ff ff       	call   c000a357 <Fs::setcwd(Process*, char*)>
c00100da:	83 c4 1c             	add    esp,0x1c
c00100dd:	99                   	cdq    
c00100de:	c3                   	ret    

c00100df <Sys::setTime(regs*)>:
c00100df:	55                   	push   ebp
c00100e0:	31 c9                	xor    ecx,ecx
c00100e2:	57                   	push   edi
c00100e3:	bd 0c 00 00 00       	mov    ebp,0xc
c00100e8:	56                   	push   esi
c00100e9:	53                   	push   ebx
c00100ea:	31 db                	xor    ebx,ebx
c00100ec:	83 ec 10             	sub    esp,0x10
c00100ef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00100f3:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00100f6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00100f9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00100fc:	89 c2                	mov    edx,eax
c00100fe:	66 81 ef 6c 07       	sub    di,0x76c
c0010103:	83 e2 1f             	and    edx,0x1f
c0010106:	c1 e7 10             	shl    edi,0x10
c0010109:	42                   	inc    edx
c001010a:	c1 e8 05             	shr    eax,0x5
c001010d:	88 d1                	mov    cl,dl
c001010f:	31 d2                	xor    edx,edx
c0010111:	f7 f5                	div    ebp
c0010113:	89 dd                	mov    ebp,ebx
c0010115:	88 d5                	mov    ch,dl
c0010117:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001011d:	0f b7 c1             	movzx  eax,cx
c0010120:	31 d2                	xor    edx,edx
c0010122:	09 f8                	or     eax,edi
c0010124:	bf 3c 00 00 00       	mov    edi,0x3c
c0010129:	89 c1                	mov    ecx,eax
c001012b:	89 f0                	mov    eax,esi
c001012d:	f7 f7                	div    edi
c001012f:	c1 e2 10             	shl    edx,0x10
c0010132:	09 d5                	or     ebp,edx
c0010134:	31 d2                	xor    edx,edx
c0010136:	89 eb                	mov    ebx,ebp
c0010138:	f7 f7                	div    edi
c001013a:	bf 10 0e 00 00       	mov    edi,0xe10
c001013f:	88 d7                	mov    bh,dl
c0010141:	89 f0                	mov    eax,esi
c0010143:	31 d2                	xor    edx,edx
c0010145:	f7 f7                	div    edi
c0010147:	bf 18 00 00 00       	mov    edi,0x18
c001014c:	31 d2                	xor    edx,edx
c001014e:	f7 f7                	div    edi
c0010150:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0010155:	88 d3                	mov    bl,dl
c0010157:	53                   	push   ebx
c0010158:	51                   	push   ecx
c0010159:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001015f:	e8 04 aa ff ff       	call   c000ab68 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0010164:	83 c4 1c             	add    esp,0x1c
c0010167:	83 f0 01             	xor    eax,0x1
c001016a:	5b                   	pop    ebx
c001016b:	0f b6 c0             	movzx  eax,al
c001016e:	5e                   	pop    esi
c001016f:	31 d2                	xor    edx,edx
c0010171:	5f                   	pop    edi
c0010172:	5d                   	pop    ebp
c0010173:	c3                   	ret    

c0010174 <Sys::timezone(regs*)>:
c0010174:	53                   	push   ebx
c0010175:	83 ec 08             	sub    esp,0x8
c0010178:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001017c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0010180:	75 17                	jne    c0010199 <Sys::timezone(regs*)+0x25>
c0010182:	83 ec 0c             	sub    esp,0xc
c0010185:	68 8d df 01 c0       	push   0xc001df8d
c001018a:	e8 85 98 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001018f:	83 c8 ff             	or     eax,0xffffffff
c0010192:	83 c4 10             	add    esp,0x10
c0010195:	89 c2                	mov    edx,eax
c0010197:	eb 20                	jmp    c00101b9 <Sys::timezone(regs*)+0x45>
c0010199:	83 ec 0c             	sub    esp,0xc
c001019c:	68 a2 df 01 c0       	push   0xc001dfa2
c00101a1:	e8 6e 98 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00101a6:	58                   	pop    eax
c00101a7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00101aa:	e8 15 a7 ff ff       	call   c000a8c4 <User::loadClockSettings(int)>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	b8 01 00 00 00       	mov    eax,0x1
c00101b7:	31 d2                	xor    edx,edx
c00101b9:	83 c4 08             	add    esp,0x8
c00101bc:	5b                   	pop    ebx
c00101bd:	c3                   	ret    

c00101be <Sys::write(regs*)>:
c00101be:	57                   	push   edi
c00101bf:	56                   	push   esi
c00101c0:	53                   	push   ebx
c00101c1:	83 ec 10             	sub    esp,0x10
c00101c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00101cb:	83 f8 02             	cmp    eax,0x2
c00101ce:	77 10                	ja     c00101e0 <Sys::write(regs*)+0x22>
c00101d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00101d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00101d8:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00101de:	eb 0e                	jmp    c00101ee <Sys::write(regs*)+0x30>
c00101e0:	83 ec 0c             	sub    esp,0xc
c00101e3:	50                   	push   eax
c00101e4:	e8 4e 84 ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c00101e9:	83 c4 10             	add    esp,0x10
c00101ec:	89 c1                	mov    ecx,eax
c00101ee:	83 c8 ff             	or     eax,0xffffffff
c00101f1:	85 c9                	test   ecx,ecx
c00101f3:	89 c2                	mov    edx,eax
c00101f5:	74 28                	je     c001021f <Sys::write(regs*)+0x61>
c00101f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101ff:	31 ff                	xor    edi,edi
c0010201:	83 ec 0c             	sub    esp,0xc
c0010204:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010206:	8d 54 24 18          	lea    edx,[esp+0x18]
c001020a:	52                   	push   edx
c001020b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001020e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010211:	57                   	push   edi
c0010212:	56                   	push   esi
c0010213:	51                   	push   ecx
c0010214:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010217:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001021b:	83 c4 20             	add    esp,0x20
c001021e:	99                   	cdq    
c001021f:	83 c4 10             	add    esp,0x10
c0010222:	5b                   	pop    ebx
c0010223:	5e                   	pop    esi
c0010224:	5f                   	pop    edi
c0010225:	c3                   	ret    

c0010226 <Sys::wsbe(regs*)>:
c0010226:	57                   	push   edi
c0010227:	b9 0b 00 00 00       	mov    ecx,0xb
c001022c:	56                   	push   esi
c001022d:	be e1 df 01 c0       	mov    esi,0xc001dfe1
c0010232:	53                   	push   ebx
c0010233:	83 ec 30             	sub    esp,0x30
c0010236:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001023a:	fc                   	cld    
c001023b:	83 ec 0c             	sub    esp,0xc
c001023e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010240:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0010244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010249:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001024c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0010252:	8b 06                	mov    eax,DWORD PTR [esi]
c0010254:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0010257:	57                   	push   edi
c0010258:	e8 03 03 ff ff       	call   c0000560 <strlen>
c001025d:	5a                   	pop    edx
c001025e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0010262:	52                   	push   edx
c0010263:	31 d2                	xor    edx,edx
c0010265:	57                   	push   edi
c0010266:	52                   	push   edx
c0010267:	50                   	push   eax
c0010268:	56                   	push   esi
c0010269:	ff d3                	call   ebx
c001026b:	83 c4 14             	add    esp,0x14
c001026e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010272:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010275:	e8 f2 30 00 00       	call   c001336c <terminateTask(int)>
c001027a:	83 c4 40             	add    esp,0x40
c001027d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010282:	5b                   	pop    ebx
c0010283:	31 d2                	xor    edx,edx
c0010285:	5e                   	pop    esi
c0010286:	5f                   	pop    edi
c0010287:	c3                   	ret    

c0010288 <Sys::yield(regs*)>:
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	fa                   	cli    
c001028c:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0010292:	e8 b1 27 00 00       	call   c0012a48 <schedule()>
c0010297:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c001029c:	48                   	dec    eax
c001029d:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00102a2:	75 01                	jne    c00102a5 <Sys::yield(regs*)+0x1d>
c00102a4:	fb                   	sti    
c00102a5:	31 c0                	xor    eax,eax
c00102a7:	31 d2                	xor    edx,edx
c00102a9:	83 c4 0c             	add    esp,0xc
c00102ac:	c3                   	ret    

c00102ad <sysCallSeekDir(regs*)>:
c00102ad:	31 c0                	xor    eax,eax
c00102af:	31 d2                	xor    edx,edx
c00102b1:	c3                   	ret    

c00102b2 <sysCallTellDir(regs*)>:
c00102b2:	31 c0                	xor    eax,eax
c00102b4:	31 d2                	xor    edx,edx
c00102b6:	c3                   	ret    

c00102b7 <sysCallVerify(regs*)>:
c00102b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102bb:	31 d2                	xor    edx,edx
c00102bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00102c0:	c3                   	ret    

c00102c1 <sysCallGetArgc(regs*)>:
c00102c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00102c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00102c9:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00102cf:	99                   	cdq    
c00102d0:	c3                   	ret    

c00102d1 <sysCallTTYName(regs*)>:
c00102d1:	b8 01 00 00 00       	mov    eax,0x1
c00102d6:	31 d2                	xor    edx,edx
c00102d8:	c3                   	ret    

c00102d9 <sysFormatDisk(regs*)>:
c00102d9:	56                   	push   esi
c00102da:	53                   	push   ebx
c00102db:	50                   	push   eax
c00102dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102e0:	8b 1d 98 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f698
c00102e6:	eb 28                	jmp    c0010310 <sysFormatDisk(regs*)+0x37>
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00102ee:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00102f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00102f3:	51                   	push   ecx
c00102f4:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00102f7:	51                   	push   ecx
c00102f8:	50                   	push   eax
c00102f9:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c0010300:	50                   	push   eax
c0010301:	53                   	push   ebx
c0010302:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010305:	83 c4 20             	add    esp,0x20
c0010308:	83 f8 08             	cmp    eax,0x8
c001030b:	75 12                	jne    c001031f <sysFormatDisk(regs*)+0x46>
c001030d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010310:	85 db                	test   ebx,ebx
c0010312:	75 d4                	jne    c00102e8 <sysFormatDisk(regs*)+0xf>
c0010314:	59                   	pop    ecx
c0010315:	b8 03 00 00 00       	mov    eax,0x3
c001031a:	31 d2                	xor    edx,edx
c001031c:	5b                   	pop    ebx
c001031d:	5e                   	pop    esi
c001031e:	c3                   	ret    
c001031f:	85 c0                	test   eax,eax
c0010321:	74 1b                	je     c001033e <sysFormatDisk(regs*)+0x65>
c0010323:	83 f8 09             	cmp    eax,0x9
c0010326:	74 0b                	je     c0010333 <sysFormatDisk(regs*)+0x5a>
c0010328:	59                   	pop    ecx
c0010329:	b8 02 00 00 00       	mov    eax,0x2
c001032e:	31 d2                	xor    edx,edx
c0010330:	5b                   	pop    ebx
c0010331:	5e                   	pop    esi
c0010332:	c3                   	ret    
c0010333:	59                   	pop    ecx
c0010334:	b8 01 00 00 00       	mov    eax,0x1
c0010339:	31 d2                	xor    edx,edx
c001033b:	5b                   	pop    ebx
c001033c:	5e                   	pop    esi
c001033d:	c3                   	ret    
c001033e:	59                   	pop    ecx
c001033f:	31 c0                	xor    eax,eax
c0010341:	31 d2                	xor    edx,edx
c0010343:	5b                   	pop    ebx
c0010344:	5e                   	pop    esi
c0010345:	c3                   	ret    

c0010346 <sysSetDiskVolumeLabel(regs*)>:
c0010346:	56                   	push   esi
c0010347:	53                   	push   ebx
c0010348:	53                   	push   ebx
c0010349:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001034d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010350:	83 f8 19             	cmp    eax,0x19
c0010353:	77 2d                	ja     c0010382 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010355:	8b 0c 85 20 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4e0]
c001035c:	85 c9                	test   ecx,ecx
c001035e:	74 22                	je     c0010382 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010360:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010363:	85 db                	test   ebx,ebx
c0010365:	74 1b                	je     c0010382 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010367:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001036d:	85 d2                	test   edx,edx
c001036f:	74 11                	je     c0010382 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010371:	8b 32                	mov    esi,DWORD PTR [edx]
c0010373:	53                   	push   ebx
c0010374:	50                   	push   eax
c0010375:	51                   	push   ecx
c0010376:	52                   	push   edx
c0010377:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	99                   	cdq    
c001037e:	59                   	pop    ecx
c001037f:	5b                   	pop    ebx
c0010380:	5e                   	pop    esi
c0010381:	c3                   	ret    
c0010382:	59                   	pop    ecx
c0010383:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010388:	ba ff ff ff ff       	mov    edx,0xffffffff
c001038d:	5b                   	pop    ebx
c001038e:	5e                   	pop    esi
c001038f:	c3                   	ret    

c0010390 <sysGetDiskVolumeLabel(regs*)>:
c0010390:	57                   	push   edi
c0010391:	56                   	push   esi
c0010392:	53                   	push   ebx
c0010393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010397:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001039a:	83 fa 19             	cmp    edx,0x19
c001039d:	77 38                	ja     c00103d7 <sysGetDiskVolumeLabel(regs*)+0x47>
c001039f:	8b 0c 95 20 1b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffde4e0]
c00103a6:	85 c9                	test   ecx,ecx
c00103a8:	74 2d                	je     c00103d7 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103aa:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00103ad:	85 db                	test   ebx,ebx
c00103af:	74 26                	je     c00103d7 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103b1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00103b4:	85 f6                	test   esi,esi
c00103b6:	74 1f                	je     c00103d7 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103b8:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00103be:	85 c0                	test   eax,eax
c00103c0:	74 15                	je     c00103d7 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103c2:	83 ec 0c             	sub    esp,0xc
c00103c5:	8b 38                	mov    edi,DWORD PTR [eax]
c00103c7:	56                   	push   esi
c00103c8:	53                   	push   ebx
c00103c9:	52                   	push   edx
c00103ca:	51                   	push   ecx
c00103cb:	50                   	push   eax
c00103cc:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00103cf:	83 c4 20             	add    esp,0x20
c00103d2:	99                   	cdq    
c00103d3:	5b                   	pop    ebx
c00103d4:	5e                   	pop    esi
c00103d5:	5f                   	pop    edi
c00103d6:	c3                   	ret    
c00103d7:	5b                   	pop    ebx
c00103d8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00103dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103e2:	5e                   	pop    esi
c00103e3:	5f                   	pop    edi
c00103e4:	c3                   	ret    

c00103e5 <sysShutdown(regs*)>:
c00103e5:	83 ec 0c             	sub    esp,0xc
c00103e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00103ef:	85 c0                	test   eax,eax
c00103f1:	74 18                	je     c001040b <sysShutdown(regs*)+0x26>
c00103f3:	83 f8 01             	cmp    eax,0x1
c00103f6:	74 38                	je     c0010430 <sysShutdown(regs*)+0x4b>
c00103f8:	83 f8 02             	cmp    eax,0x2
c00103fb:	74 24                	je     c0010421 <sysShutdown(regs*)+0x3c>
c00103fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010402:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010407:	83 c4 0c             	add    esp,0xc
c001040a:	c3                   	ret    
c001040b:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0010410:	8b 10                	mov    edx,DWORD PTR [eax]
c0010412:	6a 00                	push   0x0
c0010414:	6a 00                	push   0x0
c0010416:	6a 00                	push   0x0
c0010418:	50                   	push   eax
c0010419:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	eb dc                	jmp    c00103fd <sysShutdown(regs*)+0x18>
c0010421:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0010426:	8b 10                	mov    edx,DWORD PTR [eax]
c0010428:	6a 00                	push   0x0
c001042a:	6a 00                	push   0x0
c001042c:	6a 01                	push   0x1
c001042e:	eb e8                	jmp    c0010418 <sysShutdown(regs*)+0x33>
c0010430:	a1 a0 1b 02 c0       	mov    eax,ds:0xc0021ba0
c0010435:	85 c0                	test   eax,eax
c0010437:	74 02                	je     c001043b <sysShutdown(regs*)+0x56>
c0010439:	ff d0                	call   eax
c001043b:	31 c0                	xor    eax,eax
c001043d:	31 d2                	xor    edx,edx
c001043f:	83 c4 0c             	add    esp,0xc
c0010442:	c3                   	ret    

c0010443 <sysCallRealpath(regs*)>:
c0010443:	83 ec 0c             	sub    esp,0xc
c0010446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001044d:	85 d2                	test   edx,edx
c001044f:	74 07                	je     c0010458 <sysCallRealpath(regs*)+0x15>
c0010451:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010454:	85 c0                	test   eax,eax
c0010456:	75 0b                	jne    c0010463 <sysCallRealpath(regs*)+0x20>
c0010458:	b8 01 00 00 00       	mov    eax,0x1
c001045d:	31 d2                	xor    edx,edx
c001045f:	83 c4 0c             	add    esp,0xc
c0010462:	c3                   	ret    
c0010463:	51                   	push   ecx
c0010464:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001046a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001046d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010473:	51                   	push   ecx
c0010474:	52                   	push   edx
c0010475:	50                   	push   eax
c0010476:	e8 65 99 ff ff       	call   c0009de0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001047b:	83 c4 10             	add    esp,0x10
c001047e:	31 c0                	xor    eax,eax
c0010480:	31 d2                	xor    edx,edx
c0010482:	83 c4 0c             	add    esp,0xc
c0010485:	c3                   	ret    

c0010486 <sysCallReadDir(regs*)>:
c0010486:	53                   	push   ebx
c0010487:	83 ec 18             	sub    esp,0x18
c001048a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001048e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010491:	83 f8 02             	cmp    eax,0x2
c0010494:	76 61                	jbe    c00104f7 <sysCallReadDir(regs*)+0x71>
c0010496:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001049d:	77 49                	ja     c00104e8 <sysCallReadDir(regs*)+0x62>
c001049f:	83 ec 0c             	sub    esp,0xc
c00104a2:	50                   	push   eax
c00104a3:	e8 8f 81 ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c00104a8:	83 c4 10             	add    esp,0x10
c00104ab:	85 c0                	test   eax,eax
c00104ad:	74 39                	je     c00104e8 <sysCallReadDir(regs*)+0x62>
c00104af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00104b7:	83 ec 0c             	sub    esp,0xc
c00104ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00104bc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00104c0:	51                   	push   ecx
c00104c1:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00104c4:	51                   	push   ecx
c00104c5:	6a 00                	push   0x0
c00104c7:	68 10 01 00 00       	push   0x110
c00104cc:	50                   	push   eax
c00104cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00104d0:	83 c4 20             	add    esp,0x20
c00104d3:	85 c0                	test   eax,eax
c00104d5:	74 29                	je     c0010500 <sysCallReadDir(regs*)+0x7a>
c00104d7:	83 f8 07             	cmp    eax,0x7
c00104da:	74 1b                	je     c00104f7 <sysCallReadDir(regs*)+0x71>
c00104dc:	b8 02 00 00 00       	mov    eax,0x2
c00104e1:	31 d2                	xor    edx,edx
c00104e3:	83 c4 18             	add    esp,0x18
c00104e6:	5b                   	pop    ebx
c00104e7:	c3                   	ret    
c00104e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104f2:	83 c4 18             	add    esp,0x18
c00104f5:	5b                   	pop    ebx
c00104f6:	c3                   	ret    
c00104f7:	b8 01 00 00 00       	mov    eax,0x1
c00104fc:	31 d2                	xor    edx,edx
c00104fe:	eb e3                	jmp    c00104e3 <sysCallReadDir(regs*)+0x5d>
c0010500:	31 c0                	xor    eax,eax
c0010502:	31 d2                	xor    edx,edx
c0010504:	eb dd                	jmp    c00104e3 <sysCallReadDir(regs*)+0x5d>

c0010506 <sysCallIsATTY(regs*)>:
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010510:	83 f8 02             	cmp    eax,0x2
c0010513:	76 07                	jbe    c001051c <sysCallIsATTY(regs*)+0x16>
c0010515:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001051a:	75 28                	jne    c0010544 <sysCallIsATTY(regs*)+0x3e>
c001051c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010521:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010524:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001052a:	85 c0                	test   eax,eax
c001052c:	74 26                	je     c0010554 <sysCallIsATTY(regs*)+0x4e>
c001052e:	83 ec 0c             	sub    esp,0xc
c0010531:	8b 10                	mov    edx,DWORD PTR [eax]
c0010533:	50                   	push   eax
c0010534:	ff 12                	call   DWORD PTR [edx]
c0010536:	31 d2                	xor    edx,edx
c0010538:	25 ff 00 00 00       	and    eax,0xff
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	83 c4 0c             	add    esp,0xc
c0010543:	c3                   	ret    
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	50                   	push   eax
c0010548:	e8 ea 80 ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c001054d:	83 c4 10             	add    esp,0x10
c0010550:	85 c0                	test   eax,eax
c0010552:	75 da                	jne    c001052e <sysCallIsATTY(regs*)+0x28>
c0010554:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010559:	ba ff ff ff ff       	mov    edx,0xffffffff
c001055e:	83 c4 0c             	add    esp,0xc
c0010561:	c3                   	ret    

c0010562 <sysCallSeek(regs*)>:
c0010562:	53                   	push   ebx
c0010563:	83 ec 08             	sub    esp,0x8
c0010566:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001056a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001056d:	8d 50 fd             	lea    edx,[eax-0x3]
c0010570:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010576:	77 34                	ja     c00105ac <sysCallSeek(regs*)+0x4a>
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	50                   	push   eax
c001057c:	e8 b6 80 ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c0010581:	83 c4 0c             	add    esp,0xc
c0010584:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010587:	31 db                	xor    ebx,ebx
c0010589:	53                   	push   ebx
c001058a:	51                   	push   ecx
c001058b:	50                   	push   eax
c001058c:	e8 77 9b ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0010591:	83 c4 10             	add    esp,0x10
c0010594:	85 c0                	test   eax,eax
c0010596:	0f 95 c0             	setne  al
c0010599:	31 d2                	xor    edx,edx
c001059b:	25 ff 00 00 00       	and    eax,0xff
c00105a0:	f7 d8                	neg    eax
c00105a2:	83 d2 00             	adc    edx,0x0
c00105a5:	83 c4 08             	add    esp,0x8
c00105a8:	f7 da                	neg    edx
c00105aa:	5b                   	pop    ebx
c00105ab:	c3                   	ret    
c00105ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105b6:	83 c4 08             	add    esp,0x8
c00105b9:	5b                   	pop    ebx
c00105ba:	c3                   	ret    

c00105bb <sysCallTell(regs*)>:
c00105bb:	53                   	push   ebx
c00105bc:	83 ec 08             	sub    esp,0x8
c00105bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00105c6:	83 f8 02             	cmp    eax,0x2
c00105c9:	76 50                	jbe    c001061b <sysCallTell(regs*)+0x60>
c00105cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00105d0:	76 19                	jbe    c00105eb <sysCallTell(regs*)+0x30>
c00105d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00105d5:	31 d2                	xor    edx,edx
c00105d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105e4:	31 c0                	xor    eax,eax
c00105e6:	83 c4 08             	add    esp,0x8
c00105e9:	5b                   	pop    ebx
c00105ea:	c3                   	ret    
c00105eb:	83 ec 0c             	sub    esp,0xc
c00105ee:	50                   	push   eax
c00105ef:	e8 43 80 ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c00105f4:	5a                   	pop    edx
c00105f5:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00105f8:	59                   	pop    ecx
c00105f9:	53                   	push   ebx
c00105fa:	50                   	push   eax
c00105fb:	e8 5e 9b ff ff       	call   c000a15e <File::tell(unsigned long long*)>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	85 c0                	test   eax,eax
c0010605:	0f 95 c0             	setne  al
c0010608:	31 d2                	xor    edx,edx
c001060a:	25 ff 00 00 00       	and    eax,0xff
c001060f:	f7 d8                	neg    eax
c0010611:	83 d2 00             	adc    edx,0x0
c0010614:	83 c4 08             	add    esp,0x8
c0010617:	f7 da                	neg    edx
c0010619:	5b                   	pop    ebx
c001061a:	c3                   	ret    
c001061b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010620:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010625:	83 c4 08             	add    esp,0x8
c0010628:	5b                   	pop    ebx
c0010629:	c3                   	ret    

c001062a <sysCallSize(regs*)>:
c001062a:	53                   	push   ebx
c001062b:	83 ec 18             	sub    esp,0x18
c001062e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010632:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010635:	83 f8 02             	cmp    eax,0x2
c0010638:	76 56                	jbe    c0010690 <sysCallSize(regs*)+0x66>
c001063a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001063f:	76 19                	jbe    c001065a <sysCallSize(regs*)+0x30>
c0010641:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010644:	31 d2                	xor    edx,edx
c0010646:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001064c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010653:	31 c0                	xor    eax,eax
c0010655:	83 c4 18             	add    esp,0x18
c0010658:	5b                   	pop    ebx
c0010659:	c3                   	ret    
c001065a:	83 ec 0c             	sub    esp,0xc
c001065d:	50                   	push   eax
c001065e:	e8 d4 7f ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c0010663:	83 c4 0c             	add    esp,0xc
c0010666:	8d 54 24 13          	lea    edx,[esp+0x13]
c001066a:	52                   	push   edx
c001066b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001066e:	52                   	push   edx
c001066f:	50                   	push   eax
c0010670:	e8 81 9c ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c0010675:	83 c4 10             	add    esp,0x10
c0010678:	85 c0                	test   eax,eax
c001067a:	0f 95 c0             	setne  al
c001067d:	31 d2                	xor    edx,edx
c001067f:	25 ff 00 00 00       	and    eax,0xff
c0010684:	f7 d8                	neg    eax
c0010686:	83 d2 00             	adc    edx,0x0
c0010689:	83 c4 18             	add    esp,0x18
c001068c:	f7 da                	neg    edx
c001068e:	5b                   	pop    ebx
c001068f:	c3                   	ret    
c0010690:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010695:	ba ff ff ff ff       	mov    edx,0xffffffff
c001069a:	83 c4 18             	add    esp,0x18
c001069d:	5b                   	pop    ebx
c001069e:	c3                   	ret    

c001069f <sysCallSizeFromFilename(regs*)>:
c001069f:	57                   	push   edi
c00106a0:	56                   	push   esi
c00106a1:	53                   	push   ebx
c00106a2:	83 ec 20             	sub    esp,0x20
c00106a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00106a9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00106ac:	83 fb 02             	cmp    ebx,0x2
c00106af:	0f 86 8c 00 00 00    	jbe    c0010741 <sysCallSizeFromFilename(regs*)+0xa2>
c00106b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00106bb:	76 1b                	jbe    c00106d8 <sysCallSizeFromFilename(regs*)+0x39>
c00106bd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00106c0:	31 d2                	xor    edx,edx
c00106c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106cf:	83 c4 20             	add    esp,0x20
c00106d2:	31 c0                	xor    eax,eax
c00106d4:	5b                   	pop    ebx
c00106d5:	5e                   	pop    esi
c00106d6:	5f                   	pop    edi
c00106d7:	c3                   	ret    
c00106d8:	83 ec 0c             	sub    esp,0xc
c00106db:	68 14 01 00 00       	push   0x114
c00106e0:	e8 6c 65 ff ff       	call   c0006c51 <malloc>
c00106e5:	83 c4 0c             	add    esp,0xc
c00106e8:	89 c7                	mov    edi,eax
c00106ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106f2:	50                   	push   eax
c00106f3:	53                   	push   ebx
c00106f4:	57                   	push   edi
c00106f5:	e8 90 98 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c00106fa:	83 c4 0c             	add    esp,0xc
c00106fd:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010701:	50                   	push   eax
c0010702:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010705:	52                   	push   edx
c0010706:	57                   	push   edi
c0010707:	e8 ea 9b ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c001070c:	83 c4 10             	add    esp,0x10
c001070f:	85 ff                	test   edi,edi
c0010711:	74 14                	je     c0010727 <sysCallSizeFromFilename(regs*)+0x88>
c0010713:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010717:	8b 17                	mov    edx,DWORD PTR [edi]
c0010719:	83 ec 0c             	sub    esp,0xc
c001071c:	57                   	push   edi
c001071d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010720:	83 c4 10             	add    esp,0x10
c0010723:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010727:	85 c0                	test   eax,eax
c0010729:	0f 95 c0             	setne  al
c001072c:	31 d2                	xor    edx,edx
c001072e:	25 ff 00 00 00       	and    eax,0xff
c0010733:	f7 d8                	neg    eax
c0010735:	83 d2 00             	adc    edx,0x0
c0010738:	83 c4 20             	add    esp,0x20
c001073b:	f7 da                	neg    edx
c001073d:	5b                   	pop    ebx
c001073e:	5e                   	pop    esi
c001073f:	5f                   	pop    edi
c0010740:	c3                   	ret    
c0010741:	83 c4 20             	add    esp,0x20
c0010744:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010749:	5b                   	pop    ebx
c001074a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001074f:	5e                   	pop    esi
c0010750:	5f                   	pop    edi
c0010751:	c3                   	ret    

c0010752 <sysCallClose(regs*)>:
c0010752:	53                   	push   ebx
c0010753:	83 ec 08             	sub    esp,0x8
c0010756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001075d:	83 f8 02             	cmp    eax,0x2
c0010760:	76 41                	jbe    c00107a3 <sysCallClose(regs*)+0x51>
c0010762:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010768:	83 fa 01             	cmp    edx,0x1
c001076b:	76 2d                	jbe    c001079a <sysCallClose(regs*)+0x48>
c001076d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010772:	77 2f                	ja     c00107a3 <sysCallClose(regs*)+0x51>
c0010774:	83 ec 0c             	sub    esp,0xc
c0010777:	50                   	push   eax
c0010778:	e8 ba 7e ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c001077d:	89 c3                	mov    ebx,eax
c001077f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010782:	e8 21 99 ff ff       	call   c000a0a8 <File::close()>
c0010787:	83 c4 10             	add    esp,0x10
c001078a:	85 db                	test   ebx,ebx
c001078c:	74 0c                	je     c001079a <sysCallClose(regs*)+0x48>
c001078e:	83 ec 0c             	sub    esp,0xc
c0010791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010793:	53                   	push   ebx
c0010794:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010797:	83 c4 10             	add    esp,0x10
c001079a:	31 c0                	xor    eax,eax
c001079c:	31 d2                	xor    edx,edx
c001079e:	83 c4 08             	add    esp,0x8
c00107a1:	5b                   	pop    ebx
c00107a2:	c3                   	ret    
c00107a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107ad:	83 c4 08             	add    esp,0x8
c00107b0:	5b                   	pop    ebx
c00107b1:	c3                   	ret    

c00107b2 <sysCallOpenDir(regs*)>:
c00107b2:	56                   	push   esi
c00107b3:	53                   	push   ebx
c00107b4:	50                   	push   eax
c00107b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107bc:	85 c0                	test   eax,eax
c00107be:	74 5b                	je     c001081b <sysCallOpenDir(regs*)+0x69>
c00107c0:	83 ec 0c             	sub    esp,0xc
c00107c3:	68 14 01 00 00       	push   0x114
c00107c8:	e8 84 64 ff ff       	call   c0006c51 <malloc>
c00107cd:	83 c4 0c             	add    esp,0xc
c00107d0:	89 c6                	mov    esi,eax
c00107d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107da:	50                   	push   eax
c00107db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00107de:	50                   	push   eax
c00107df:	56                   	push   esi
c00107e0:	e8 cf 9c ff ff       	call   c000a4b4 <Directory::Directory(char const*, Process*)>
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	85 f6                	test   esi,esi
c00107ea:	74 2f                	je     c001081b <sysCallOpenDir(regs*)+0x69>
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	56                   	push   esi
c00107f0:	e8 7f 9d ff ff       	call   c000a574 <Directory::open()>
c00107f5:	83 c4 10             	add    esp,0x10
c00107f8:	85 c0                	test   eax,eax
c00107fa:	75 1f                	jne    c001081b <sysCallOpenDir(regs*)+0x69>
c00107fc:	83 ec 0c             	sub    esp,0xc
c00107ff:	56                   	push   esi
c0010800:	e8 3d 7b ff ff       	call   c0008342 <UnixFile::getFileDescriptor()>
c0010805:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010808:	83 c4 10             	add    esp,0x10
c001080b:	89 02                	mov    DWORD PTR [edx],eax
c001080d:	c1 f8 1f             	sar    eax,0x1f
c0010810:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010813:	31 c0                	xor    eax,eax
c0010815:	59                   	pop    ecx
c0010816:	31 d2                	xor    edx,edx
c0010818:	5b                   	pop    ebx
c0010819:	5e                   	pop    esi
c001081a:	c3                   	ret    
c001081b:	59                   	pop    ecx
c001081c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010821:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010826:	5b                   	pop    ebx
c0010827:	5e                   	pop    esi
c0010828:	c3                   	ret    

c0010829 <sysCallCloseDir(regs*)>:
c0010829:	53                   	push   ebx
c001082a:	83 ec 08             	sub    esp,0x8
c001082d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010831:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010834:	8d 50 fd             	lea    edx,[eax-0x3]
c0010837:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001083d:	77 2f                	ja     c001086e <sysCallCloseDir(regs*)+0x45>
c001083f:	83 ec 0c             	sub    esp,0xc
c0010842:	50                   	push   eax
c0010843:	e8 ef 7d ff ff       	call   c0008637 <getFromFileDescriptor(int)>
c0010848:	89 c3                	mov    ebx,eax
c001084a:	89 04 24             	mov    DWORD PTR [esp],eax
c001084d:	e8 7e 9d ff ff       	call   c000a5d0 <Directory::close()>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	85 db                	test   ebx,ebx
c0010857:	74 0c                	je     c0010865 <sysCallCloseDir(regs*)+0x3c>
c0010859:	83 ec 0c             	sub    esp,0xc
c001085c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001085e:	53                   	push   ebx
c001085f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010862:	83 c4 10             	add    esp,0x10
c0010865:	31 c0                	xor    eax,eax
c0010867:	31 d2                	xor    edx,edx
c0010869:	83 c4 08             	add    esp,0x8
c001086c:	5b                   	pop    ebx
c001086d:	c3                   	ret    
c001086e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010873:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010878:	83 c4 08             	add    esp,0x8
c001087b:	5b                   	pop    ebx
c001087c:	c3                   	ret    

c001087d <sysCallMakeDir(regs*)>:
c001087d:	56                   	push   esi
c001087e:	53                   	push   ebx
c001087f:	83 ec 10             	sub    esp,0x10
c0010882:	68 14 01 00 00       	push   0x114
c0010887:	e8 c5 63 ff ff       	call   c0006c51 <malloc>
c001088c:	83 c4 0c             	add    esp,0xc
c001088f:	89 c3                	mov    ebx,eax
c0010891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010896:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010899:	56                   	push   esi
c001089a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001089e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108a1:	50                   	push   eax
c00108a2:	53                   	push   ebx
c00108a3:	e8 0c 9c ff ff       	call   c000a4b4 <Directory::Directory(char const*, Process*)>
c00108a8:	83 c4 10             	add    esp,0x10
c00108ab:	85 db                	test   ebx,ebx
c00108ad:	74 32                	je     c00108e1 <sysCallMakeDir(regs*)+0x64>
c00108af:	83 ec 0c             	sub    esp,0xc
c00108b2:	53                   	push   ebx
c00108b3:	e8 9c 9e ff ff       	call   c000a754 <Directory::create()>
c00108b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108bb:	89 c6                	mov    esi,eax
c00108bd:	e8 0e 9d ff ff       	call   c000a5d0 <Directory::close()>
c00108c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	31 c0                	xor    eax,eax
c00108cf:	59                   	pop    ecx
c00108d0:	85 f6                	test   esi,esi
c00108d2:	5b                   	pop    ebx
c00108d3:	0f 95 c0             	setne  al
c00108d6:	5e                   	pop    esi
c00108d7:	31 d2                	xor    edx,edx
c00108d9:	f7 d8                	neg    eax
c00108db:	83 d2 00             	adc    edx,0x0
c00108de:	f7 da                	neg    edx
c00108e0:	c3                   	ret    
c00108e1:	59                   	pop    ecx
c00108e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108ec:	5b                   	pop    ebx
c00108ed:	5e                   	pop    esi
c00108ee:	c3                   	ret    

c00108ef <sysCallWait(regs*)>:
c00108ef:	83 ec 10             	sub    esp,0x10
c00108f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00108f9:	52                   	push   edx
c00108fa:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00108fd:	51                   	push   ecx
c00108fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010901:	50                   	push   eax
c0010902:	e8 6d 23 00 00       	call   c0012c74 <waitTask(int, int*, int)>
c0010907:	83 c4 1c             	add    esp,0x1c
c001090a:	99                   	cdq    
c001090b:	c3                   	ret    

c001090c <sysCallNotImpl(regs*)>:
c001090c:	83 ec 18             	sub    esp,0x18
c001090f:	68 0d e0 01 c0       	push   0xc001e00d
c0010914:	e8 4e ec ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0010919:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001091e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010923:	83 c4 1c             	add    esp,0x1c
c0010926:	c3                   	ret    

c0010927 <sysPanic(regs*)>:
c0010927:	83 ec 18             	sub    esp,0x18
c001092a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001092e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010931:	50                   	push   eax
c0010932:	e8 30 ec ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0010937:	b8 01 00 00 00       	mov    eax,0x1
c001093c:	31 d2                	xor    edx,edx
c001093e:	83 c4 1c             	add    esp,0x1c
c0010941:	c3                   	ret    

c0010942 <sysCallRmdir(regs*)>:
c0010942:	56                   	push   esi
c0010943:	53                   	push   ebx
c0010944:	83 ec 20             	sub    esp,0x20
c0010947:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001094b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001094e:	68 14 01 00 00       	push   0x114
c0010953:	e8 f9 62 ff ff       	call   c0006c51 <malloc>
c0010958:	83 c4 0c             	add    esp,0xc
c001095b:	89 c3                	mov    ebx,eax
c001095d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010962:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010965:	50                   	push   eax
c0010966:	56                   	push   esi
c0010967:	53                   	push   ebx
c0010968:	e8 1d 96 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c001096d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010970:	e8 4d 98 ff ff       	call   c000a1c2 <File::unlink()>
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	85 db                	test   ebx,ebx
c001097a:	74 14                	je     c0010990 <sysCallRmdir(regs*)+0x4e>
c001097c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010980:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010982:	83 ec 0c             	sub    esp,0xc
c0010985:	53                   	push   ebx
c0010986:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010989:	83 c4 10             	add    esp,0x10
c001098c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010990:	85 c0                	test   eax,eax
c0010992:	0f 95 c0             	setne  al
c0010995:	31 d2                	xor    edx,edx
c0010997:	25 ff 00 00 00       	and    eax,0xff
c001099c:	f7 d8                	neg    eax
c001099e:	83 d2 00             	adc    edx,0x0
c00109a1:	83 c4 14             	add    esp,0x14
c00109a4:	f7 da                	neg    edx
c00109a6:	5b                   	pop    ebx
c00109a7:	5e                   	pop    esi
c00109a8:	c3                   	ret    

c00109a9 <sysCallUnlink(regs*)>:
c00109a9:	56                   	push   esi
c00109aa:	53                   	push   ebx
c00109ab:	83 ec 20             	sub    esp,0x20
c00109ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00109b2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00109b5:	68 14 01 00 00       	push   0x114
c00109ba:	e8 92 62 ff ff       	call   c0006c51 <malloc>
c00109bf:	83 c4 0c             	add    esp,0xc
c00109c2:	89 c3                	mov    ebx,eax
c00109c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109cc:	50                   	push   eax
c00109cd:	56                   	push   esi
c00109ce:	53                   	push   ebx
c00109cf:	e8 b6 95 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c00109d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109d7:	e8 e6 97 ff ff       	call   c000a1c2 <File::unlink()>
c00109dc:	83 c4 10             	add    esp,0x10
c00109df:	85 db                	test   ebx,ebx
c00109e1:	74 14                	je     c00109f7 <sysCallUnlink(regs*)+0x4e>
c00109e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00109e9:	83 ec 0c             	sub    esp,0xc
c00109ec:	53                   	push   ebx
c00109ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00109f0:	83 c4 10             	add    esp,0x10
c00109f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109f7:	85 c0                	test   eax,eax
c00109f9:	0f 95 c0             	setne  al
c00109fc:	31 d2                	xor    edx,edx
c00109fe:	25 ff 00 00 00       	and    eax,0xff
c0010a03:	f7 d8                	neg    eax
c0010a05:	83 d2 00             	adc    edx,0x0
c0010a08:	83 c4 14             	add    esp,0x14
c0010a0b:	f7 da                	neg    edx
c0010a0d:	5b                   	pop    ebx
c0010a0e:	5e                   	pop    esi
c0010a0f:	c3                   	ret    

c0010a10 <sysCallGetArgv(regs*)>:
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a17:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a1a:	85 c0                	test   eax,eax
c0010a1c:	78 2c                	js     c0010a4a <sysCallGetArgv(regs*)+0x3a>
c0010a1e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a24:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a27:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010a2d:	7d 1b                	jge    c0010a4a <sysCallGetArgv(regs*)+0x3a>
c0010a2f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010a36:	85 c0                	test   eax,eax
c0010a38:	74 18                	je     c0010a52 <sysCallGetArgv(regs*)+0x42>
c0010a3a:	83 ec 08             	sub    esp,0x8
c0010a3d:	50                   	push   eax
c0010a3e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010a41:	50                   	push   eax
c0010a42:	e8 d9 fb fe ff       	call   c0000620 <strcpy>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	31 c0                	xor    eax,eax
c0010a4c:	31 d2                	xor    edx,edx
c0010a4e:	83 c4 0c             	add    esp,0xc
c0010a51:	c3                   	ret    
c0010a52:	b8 01 00 00 00       	mov    eax,0x1
c0010a57:	31 d2                	xor    edx,edx
c0010a59:	83 c4 0c             	add    esp,0xc
c0010a5c:	c3                   	ret    

c0010a5d <sysCallUSleep(regs*)>:
c0010a5d:	83 ec 1c             	sub    esp,0x1c
c0010a60:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a64:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010a67:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010a6a:	6a 00                	push   0x0
c0010a6c:	6a 64                	push   0x64
c0010a6e:	52                   	push   edx
c0010a6f:	50                   	push   eax
c0010a70:	e8 2b ad 00 00       	call   c001b7a0 <__udivdi3>
c0010a75:	83 c4 14             	add    esp,0x14
c0010a78:	50                   	push   eax
c0010a79:	e8 ca 22 00 00       	call   c0012d48 <milliTenthSleep(unsigned int)>
c0010a7e:	31 c0                	xor    eax,eax
c0010a80:	31 d2                	xor    edx,edx
c0010a82:	83 c4 1c             	add    esp,0x1c
c0010a85:	c3                   	ret    

c0010a86 <sysCallSpawn(regs*)>:
c0010a86:	56                   	push   esi
c0010a87:	53                   	push   ebx
c0010a88:	50                   	push   eax
c0010a89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a8d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a90:	85 c0                	test   eax,eax
c0010a92:	75 08                	jne    c0010a9c <sysCallSpawn(regs*)+0x16>
c0010a94:	59                   	pop    ecx
c0010a95:	31 c0                	xor    eax,eax
c0010a97:	31 d2                	xor    edx,edx
c0010a99:	5b                   	pop    ebx
c0010a9a:	5e                   	pop    esi
c0010a9b:	c3                   	ret    
c0010a9c:	83 ec 0c             	sub    esp,0xc
c0010a9f:	68 1f 07 00 00       	push   0x71f
c0010aa4:	e8 a8 61 ff ff       	call   c0006c51 <malloc>
c0010aa9:	83 c4 10             	add    esp,0x10
c0010aac:	89 c6                	mov    esi,eax
c0010aae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ab1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ab4:	85 c0                	test   eax,eax
c0010ab6:	75 33                	jne    c0010aeb <sysCallSpawn(regs*)+0x65>
c0010ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010abd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ac0:	52                   	push   edx
c0010ac1:	50                   	push   eax
c0010ac2:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010ac5:	53                   	push   ebx
c0010ac6:	56                   	push   esi
c0010ac7:	e8 60 19 00 00       	call   c001242c <Process::Process(char const*, Process*, char**)>
c0010acc:	83 c4 10             	add    esp,0x10
c0010acf:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010ad6:	75 bc                	jne    c0010a94 <sysCallSpawn(regs*)+0xe>
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 3f 1e 00 00       	call   c0012920 <Process::createUserThread()>
c0010ae1:	8b 06                	mov    eax,DWORD PTR [esi]
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	99                   	cdq    
c0010ae7:	59                   	pop    ecx
c0010ae8:	5b                   	pop    ebx
c0010ae9:	5e                   	pop    esi
c0010aea:	c3                   	ret    
c0010aeb:	31 c0                	xor    eax,eax
c0010aed:	eb d1                	jmp    c0010ac0 <sysCallSpawn(regs*)+0x3a>

c0010aef <sysCallGetEnv(regs*)>:
c0010aef:	57                   	push   edi
c0010af0:	56                   	push   esi
c0010af1:	53                   	push   ebx
c0010af2:	83 ec 1c             	sub    esp,0x1c
c0010af5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010af9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010afe:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010b01:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010b04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b07:	50                   	push   eax
c0010b08:	e8 a6 e9 ff ff       	call   c000f4b3 <Krnl::getProcessTotalEnvCount(Process*)>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	39 c7                	cmp    edi,eax
c0010b12:	7c 14                	jl     c0010b28 <sysCallGetEnv(regs*)+0x39>
c0010b14:	85 f6                	test   esi,esi
c0010b16:	75 0b                	jne    c0010b23 <sysCallGetEnv(regs*)+0x34>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	31 c0                	xor    eax,eax
c0010b1d:	5b                   	pop    ebx
c0010b1e:	31 d2                	xor    edx,edx
c0010b20:	5e                   	pop    esi
c0010b21:	5f                   	pop    edi
c0010b22:	c3                   	ret    
c0010b23:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010b26:	eb f0                	jmp    c0010b18 <sysCallGetEnv(regs*)+0x29>
c0010b28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010b2c:	52                   	push   edx
c0010b2d:	57                   	push   edi
c0010b2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b34:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010b37:	51                   	push   ecx
c0010b38:	50                   	push   eax
c0010b39:	e8 95 e9 ff ff       	call   c000f4d3 <Krnl::getProcessEnvPair(Process*, int)>
c0010b3e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010b49:	83 c4 0c             	add    esp,0xc
c0010b4c:	85 db                	test   ebx,ebx
c0010b4e:	75 23                	jne    c0010b73 <sysCallGetEnv(regs*)+0x84>
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	50                   	push   eax
c0010b54:	e8 07 fa fe ff       	call   c0000560 <strlen>
c0010b59:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b5c:	89 c3                	mov    ebx,eax
c0010b5e:	e8 fd f9 fe ff       	call   c0000560 <strlen>
c0010b63:	31 d2                	xor    edx,edx
c0010b65:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	83 c4 10             	add    esp,0x10
c0010b6f:	5b                   	pop    ebx
c0010b70:	5e                   	pop    esi
c0010b71:	5f                   	pop    edi
c0010b72:	c3                   	ret    
c0010b73:	83 ec 08             	sub    esp,0x8
c0010b76:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010b79:	50                   	push   eax
c0010b7a:	56                   	push   esi
c0010b7b:	e8 a0 fa fe ff       	call   c0000620 <strcpy>
c0010b80:	58                   	pop    eax
c0010b81:	5a                   	pop    edx
c0010b82:	68 27 e0 01 c0       	push   0xc001e027
c0010b87:	56                   	push   esi
c0010b88:	e8 53 fc fe ff       	call   c00007e0 <strcat>
c0010b8d:	59                   	pop    ecx
c0010b8e:	5b                   	pop    ebx
c0010b8f:	57                   	push   edi
c0010b90:	56                   	push   esi
c0010b91:	e8 4a fc fe ff       	call   c00007e0 <strcat>
c0010b96:	83 c4 10             	add    esp,0x10
c0010b99:	e9 7a ff ff ff       	jmp    c0010b18 <sysCallGetEnv(regs*)+0x29>

c0010b9e <sysSetFatAttrib(regs*)>:
c0010b9e:	57                   	push   edi
c0010b9f:	56                   	push   esi
c0010ba0:	53                   	push   ebx
c0010ba1:	83 ec 1c             	sub    esp,0x1c
c0010ba4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010ba8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010bab:	68 14 01 00 00       	push   0x114
c0010bb0:	e8 9c 60 ff ff       	call   c0006c51 <malloc>
c0010bb5:	83 c4 0c             	add    esp,0xc
c0010bb8:	89 c3                	mov    ebx,eax
c0010bba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bbf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bc2:	50                   	push   eax
c0010bc3:	57                   	push   edi
c0010bc4:	53                   	push   ebx
c0010bc5:	e8 c0 93 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0010bca:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010bcd:	83 c4 0c             	add    esp,0xc
c0010bd0:	0f b6 d4             	movzx  edx,ah
c0010bd3:	25 ff 00 00 00       	and    eax,0xff
c0010bd8:	52                   	push   edx
c0010bd9:	50                   	push   eax
c0010bda:	53                   	push   ebx
c0010bdb:	e8 7c 96 ff ff       	call   c000a25c <File::chfatattr(unsigned char, unsigned char)>
c0010be0:	83 c4 10             	add    esp,0x10
c0010be3:	85 db                	test   ebx,ebx
c0010be5:	74 14                	je     c0010bfb <sysSetFatAttrib(regs*)+0x5d>
c0010be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010beb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010bed:	83 ec 0c             	sub    esp,0xc
c0010bf0:	53                   	push   ebx
c0010bf1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bf4:	83 c4 10             	add    esp,0x10
c0010bf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bfb:	85 c0                	test   eax,eax
c0010bfd:	0f 95 c0             	setne  al
c0010c00:	31 d2                	xor    edx,edx
c0010c02:	25 ff 00 00 00       	and    eax,0xff
c0010c07:	f7 d8                	neg    eax
c0010c09:	83 d2 00             	adc    edx,0x0
c0010c0c:	83 c4 10             	add    esp,0x10
c0010c0f:	f7 da                	neg    edx
c0010c11:	5b                   	pop    ebx
c0010c12:	5e                   	pop    esi
c0010c13:	5f                   	pop    edi
c0010c14:	c3                   	ret    

c0010c15 <sysPipe(regs*)>:
c0010c15:	57                   	push   edi
c0010c16:	56                   	push   esi
c0010c17:	53                   	push   ebx
c0010c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1c:	83 ec 0c             	sub    esp,0xc
c0010c1f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010c22:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010c25:	6a 20                	push   0x20
c0010c27:	e8 25 60 ff ff       	call   c0006c51 <malloc>
c0010c2c:	89 c3                	mov    ebx,eax
c0010c2e:	58                   	pop    eax
c0010c2f:	5a                   	pop    edx
c0010c30:	68 00 50 00 00       	push   0x5000
c0010c35:	53                   	push   ebx
c0010c36:	e8 0d 6a ff ff       	call   c0007648 <Pipe::Pipe(int)>
c0010c3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c3e:	e8 ff 76 ff ff       	call   c0008342 <UnixFile::getFileDescriptor()>
c0010c43:	89 07                	mov    DWORD PTR [edi],eax
c0010c45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c48:	e8 f5 76 ff ff       	call   c0008342 <UnixFile::getFileDescriptor()>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	89 06                	mov    DWORD PTR [esi],eax
c0010c52:	31 d2                	xor    edx,edx
c0010c54:	5b                   	pop    ebx
c0010c55:	31 c0                	xor    eax,eax
c0010c57:	5e                   	pop    esi
c0010c58:	5f                   	pop    edi
c0010c59:	c3                   	ret    

c0010c5a <sysGetUnixTime(regs*)>:
c0010c5a:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0010c5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010c65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c69:	e9 2c 9d ff ff       	jmp    c000a99a <Clock::timeInSecondsLocal()>

c0010c6e <string_ends_with(char const*, char const*)>:
c0010c6e:	57                   	push   edi
c0010c6f:	56                   	push   esi
c0010c70:	53                   	push   ebx
c0010c71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c75:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010c79:	83 ec 0c             	sub    esp,0xc
c0010c7c:	53                   	push   ebx
c0010c7d:	e8 de f8 fe ff       	call   c0000560 <strlen>
c0010c82:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c85:	89 c6                	mov    esi,eax
c0010c87:	e8 d4 f8 fe ff       	call   c0000560 <strlen>
c0010c8c:	83 c4 10             	add    esp,0x10
c0010c8f:	39 c6                	cmp    esi,eax
c0010c91:	7d 06                	jge    c0010c99 <string_ends_with(char const*, char const*)+0x2b>
c0010c93:	5b                   	pop    ebx
c0010c94:	31 c0                	xor    eax,eax
c0010c96:	5e                   	pop    esi
c0010c97:	5f                   	pop    edi
c0010c98:	c3                   	ret    
c0010c99:	83 ec 08             	sub    esp,0x8
c0010c9c:	29 c6                	sub    esi,eax
c0010c9e:	57                   	push   edi
c0010c9f:	01 f3                	add    ebx,esi
c0010ca1:	53                   	push   ebx
c0010ca2:	e8 59 fa fe ff       	call   c0000700 <strcmp>
c0010ca7:	83 c4 10             	add    esp,0x10
c0010caa:	85 c0                	test   eax,eax
c0010cac:	5b                   	pop    ebx
c0010cad:	0f 94 c0             	sete   al
c0010cb0:	5e                   	pop    esi
c0010cb1:	25 ff 00 00 00       	and    eax,0xff
c0010cb6:	5f                   	pop    edi
c0010cb7:	c3                   	ret    

c0010cb8 <sysCallOpen(regs*)>:
c0010cb8:	56                   	push   esi
c0010cb9:	53                   	push   ebx
c0010cba:	81 ec 04 01 00 00    	sub    esp,0x104
c0010cc0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010cc7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010cca:	85 c9                	test   ecx,ecx
c0010ccc:	0f 84 b9 01 00 00    	je     c0010e8b <sysCallOpen(regs*)+0x1d3>
c0010cd2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cd5:	85 c0                	test   eax,eax
c0010cd7:	0f 84 ae 01 00 00    	je     c0010e8b <sysCallOpen(regs*)+0x1d3>
c0010cdd:	52                   	push   edx
c0010cde:	68 29 e0 01 c0       	push   0xc001e029
c0010ce3:	50                   	push   eax
c0010ce4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010ce8:	56                   	push   esi
c0010ce9:	e8 f2 90 ff ff       	call   c0009de0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010cee:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cf1:	e8 6a f8 fe ff       	call   c0000560 <strlen>
c0010cf6:	83 c4 10             	add    esp,0x10
c0010cf9:	48                   	dec    eax
c0010cfa:	74 1d                	je     c0010d19 <sysCallOpen(regs*)+0x61>
c0010cfc:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010cff:	eb 0f                	jmp    c0010d10 <sysCallOpen(regs*)+0x58>
c0010d01:	80 fa 3a             	cmp    dl,0x3a
c0010d04:	74 0f                	je     c0010d15 <sysCallOpen(regs*)+0x5d>
c0010d06:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010d0a:	48                   	dec    eax
c0010d0b:	74 0c                	je     c0010d19 <sysCallOpen(regs*)+0x61>
c0010d0d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010d10:	80 fa 2e             	cmp    dl,0x2e
c0010d13:	75 ec                	jne    c0010d01 <sysCallOpen(regs*)+0x49>
c0010d15:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010d19:	83 ec 08             	sub    esp,0x8
c0010d1c:	68 2d e0 01 c0       	push   0xc001e02d
c0010d21:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d24:	50                   	push   eax
c0010d25:	e8 44 ff ff ff       	call   c0010c6e <string_ends_with(char const*, char const*)>
c0010d2a:	83 c4 10             	add    esp,0x10
c0010d2d:	85 c0                	test   eax,eax
c0010d2f:	74 1d                	je     c0010d4e <sysCallOpen(regs*)+0x96>
c0010d31:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d34:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010d3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d41:	81 c4 04 01 00 00    	add    esp,0x104
c0010d47:	31 c0                	xor    eax,eax
c0010d49:	31 d2                	xor    edx,edx
c0010d4b:	5b                   	pop    ebx
c0010d4c:	5e                   	pop    esi
c0010d4d:	c3                   	ret    
c0010d4e:	83 ec 08             	sub    esp,0x8
c0010d51:	68 32 e0 01 c0       	push   0xc001e032
c0010d56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d59:	50                   	push   eax
c0010d5a:	e8 0f ff ff ff       	call   c0010c6e <string_ends_with(char const*, char const*)>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	85 c0                	test   eax,eax
c0010d64:	75 cb                	jne    c0010d31 <sysCallOpen(regs*)+0x79>
c0010d66:	83 ec 08             	sub    esp,0x8
c0010d69:	68 2e e0 01 c0       	push   0xc001e02e
c0010d6e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d71:	50                   	push   eax
c0010d72:	e8 89 f9 fe ff       	call   c0000700 <strcmp>
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	85 c0                	test   eax,eax
c0010d7c:	74 b3                	je     c0010d31 <sysCallOpen(regs*)+0x79>
c0010d7e:	83 ec 08             	sub    esp,0x8
c0010d81:	68 2d e0 01 c0       	push   0xc001e02d
c0010d86:	56                   	push   esi
c0010d87:	e8 e2 fe ff ff       	call   c0010c6e <string_ends_with(char const*, char const*)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	85 c0                	test   eax,eax
c0010d91:	75 9e                	jne    c0010d31 <sysCallOpen(regs*)+0x79>
c0010d93:	83 ec 08             	sub    esp,0x8
c0010d96:	68 37 e0 01 c0       	push   0xc001e037
c0010d9b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d9e:	50                   	push   eax
c0010d9f:	e8 ca fe ff ff       	call   c0010c6e <string_ends_with(char const*, char const*)>
c0010da4:	83 c4 10             	add    esp,0x10
c0010da7:	85 c0                	test   eax,eax
c0010da9:	0f 85 ef 00 00 00    	jne    c0010e9e <sysCallOpen(regs*)+0x1e6>
c0010daf:	83 ec 08             	sub    esp,0x8
c0010db2:	68 3c e0 01 c0       	push   0xc001e03c
c0010db7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dba:	50                   	push   eax
c0010dbb:	e8 ae fe ff ff       	call   c0010c6e <string_ends_with(char const*, char const*)>
c0010dc0:	83 c4 10             	add    esp,0x10
c0010dc3:	85 c0                	test   eax,eax
c0010dc5:	0f 85 d3 00 00 00    	jne    c0010e9e <sysCallOpen(regs*)+0x1e6>
c0010dcb:	83 ec 08             	sub    esp,0x8
c0010dce:	68 38 e0 01 c0       	push   0xc001e038
c0010dd3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010dd6:	51                   	push   ecx
c0010dd7:	e8 24 f9 fe ff       	call   c0000700 <strcmp>
c0010ddc:	83 c4 10             	add    esp,0x10
c0010ddf:	85 c0                	test   eax,eax
c0010de1:	0f 84 b7 00 00 00    	je     c0010e9e <sysCallOpen(regs*)+0x1e6>
c0010de7:	83 ec 08             	sub    esp,0x8
c0010dea:	68 37 e0 01 c0       	push   0xc001e037
c0010def:	56                   	push   esi
c0010df0:	e8 79 fe ff ff       	call   c0010c6e <string_ends_with(char const*, char const*)>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	85 c0                	test   eax,eax
c0010dfa:	0f 85 9e 00 00 00    	jne    c0010e9e <sysCallOpen(regs*)+0x1e6>
c0010e00:	83 ec 0c             	sub    esp,0xc
c0010e03:	68 14 01 00 00       	push   0x114
c0010e08:	e8 44 5e ff ff       	call   c0006c51 <malloc>
c0010e0d:	83 c4 0c             	add    esp,0xc
c0010e10:	89 c6                	mov    esi,eax
c0010e12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e1a:	50                   	push   eax
c0010e1b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010e1e:	52                   	push   edx
c0010e1f:	56                   	push   esi
c0010e20:	e8 65 91 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	85 f6                	test   esi,esi
c0010e2a:	74 5f                	je     c0010e8b <sysCallOpen(regs*)+0x1d3>
c0010e2c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010e2f:	89 d0                	mov    eax,edx
c0010e31:	25 ff 00 00 00       	and    eax,0xff
c0010e36:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010e39:	89 d0                	mov    eax,edx
c0010e3b:	83 e0 01             	and    eax,0x1
c0010e3e:	f6 c2 02             	test   dl,0x2
c0010e41:	74 03                	je     c0010e46 <sysCallOpen(regs*)+0x18e>
c0010e43:	83 c8 02             	or     eax,0x2
c0010e46:	f6 c2 04             	test   dl,0x4
c0010e49:	74 03                	je     c0010e4e <sysCallOpen(regs*)+0x196>
c0010e4b:	83 c8 04             	or     eax,0x4
c0010e4e:	f6 c2 08             	test   dl,0x8
c0010e51:	74 03                	je     c0010e56 <sysCallOpen(regs*)+0x19e>
c0010e53:	83 c8 0a             	or     eax,0xa
c0010e56:	83 e2 10             	and    edx,0x10
c0010e59:	74 03                	je     c0010e5e <sysCallOpen(regs*)+0x1a6>
c0010e5b:	83 c8 12             	or     eax,0x12
c0010e5e:	83 ec 08             	sub    esp,0x8
c0010e61:	50                   	push   eax
c0010e62:	56                   	push   esi
c0010e63:	e8 e2 91 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c0010e68:	83 c4 10             	add    esp,0x10
c0010e6b:	85 c0                	test   eax,eax
c0010e6d:	75 1c                	jne    c0010e8b <sysCallOpen(regs*)+0x1d3>
c0010e6f:	83 ec 0c             	sub    esp,0xc
c0010e72:	56                   	push   esi
c0010e73:	e8 ca 74 ff ff       	call   c0008342 <UnixFile::getFileDescriptor()>
c0010e78:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 02                	mov    DWORD PTR [edx],eax
c0010e80:	c1 f8 1f             	sar    eax,0x1f
c0010e83:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e86:	e9 b6 fe ff ff       	jmp    c0010d41 <sysCallOpen(regs*)+0x89>
c0010e8b:	81 c4 04 01 00 00    	add    esp,0x104
c0010e91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e96:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e9b:	5b                   	pop    ebx
c0010e9c:	5e                   	pop    esi
c0010e9d:	c3                   	ret    
c0010e9e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ea1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010ea7:	e9 8e fe ff ff       	jmp    c0010d3a <sysCallOpen(regs*)+0x82>

c0010eac <Sys::loadSyscalls()>:
c0010eac:	c7 05 c0 20 02 c0 88 02 01 c0 	mov    DWORD PTR ds:0xc00220c0,0xc0010288
c0010eb6:	c7 05 c4 20 02 c0 7f fe 00 c0 	mov    DWORD PTR ds:0xc00220c4,0xc000fe7f
c0010ec0:	c7 05 c8 20 02 c0 6e 00 01 c0 	mov    DWORD PTR ds:0xc00220c8,0xc001006e
c0010eca:	c7 05 cc 20 02 c0 be 01 01 c0 	mov    DWORD PTR ds:0xc00220cc,0xc00101be
c0010ed4:	c7 05 d0 20 02 c0 06 00 01 c0 	mov    DWORD PTR ds:0xc00220d0,0xc0010006
c0010ede:	c7 05 d4 20 02 c0 b6 fe 00 c0 	mov    DWORD PTR ds:0xc00220d4,0xc000feb6
c0010ee8:	c7 05 d8 20 02 c0 97 fe 00 c0 	mov    DWORD PTR ds:0xc00220d8,0xc000fe97
c0010ef2:	c7 05 dc 20 02 c0 c3 00 01 c0 	mov    DWORD PTR ds:0xc00220dc,0xc00100c3
c0010efc:	c7 05 e4 20 02 c0 52 07 01 c0 	mov    DWORD PTR ds:0xc00220e4,0xc0010752
c0010f06:	c7 05 e0 20 02 c0 b8 0c 01 c0 	mov    DWORD PTR ds:0xc00220e0,0xc0010cb8
c0010f10:	c7 05 e8 20 02 c0 b2 07 01 c0 	mov    DWORD PTR ds:0xc00220e8,0xc00107b2
c0010f1a:	c7 05 ec 20 02 c0 86 04 01 c0 	mov    DWORD PTR ds:0xc00220ec,0xc0010486
c0010f24:	c7 05 f0 20 02 c0 ad 02 01 c0 	mov    DWORD PTR ds:0xc00220f0,0xc00102ad
c0010f2e:	c7 05 f4 20 02 c0 b2 02 01 c0 	mov    DWORD PTR ds:0xc00220f4,0xc00102b2
c0010f38:	c7 05 f8 20 02 c0 7d 08 01 c0 	mov    DWORD PTR ds:0xc00220f8,0xc001087d
c0010f42:	c7 05 fc 20 02 c0 29 08 01 c0 	mov    DWORD PTR ds:0xc00220fc,0xc0010829
c0010f4c:	c7 05 00 21 02 c0 62 05 01 c0 	mov    DWORD PTR ds:0xc0022100,0xc0010562
c0010f56:	c7 05 04 21 02 c0 bb 05 01 c0 	mov    DWORD PTR ds:0xc0022104,0xc00105bb
c0010f60:	c7 05 08 21 02 c0 2a 06 01 c0 	mov    DWORD PTR ds:0xc0022108,0xc001062a
c0010f6a:	c7 05 0c 21 02 c0 b7 02 01 c0 	mov    DWORD PTR ds:0xc002210c,0xc00102b7
c0010f74:	c7 05 10 21 02 c0 ef 08 01 c0 	mov    DWORD PTR ds:0xc0022110,0xc00108ef
c0010f7e:	c7 05 14 21 02 c0 0c 09 01 c0 	mov    DWORD PTR ds:0xc0022114,0xc001090c
c0010f88:	c7 05 18 21 02 c0 0c 09 01 c0 	mov    DWORD PTR ds:0xc0022118,0xc001090c
c0010f92:	c7 05 1c 21 02 c0 42 09 01 c0 	mov    DWORD PTR ds:0xc002211c,0xc0010942
c0010f9c:	c7 05 20 21 02 c0 a9 09 01 c0 	mov    DWORD PTR ds:0xc0022120,0xc00109a9
c0010fa6:	c7 05 24 21 02 c0 c1 02 01 c0 	mov    DWORD PTR ds:0xc0022124,0xc00102c1
c0010fb0:	c7 05 28 21 02 c0 10 0a 01 c0 	mov    DWORD PTR ds:0xc0022128,0xc0010a10
c0010fba:	c7 05 2c 21 02 c0 43 04 01 c0 	mov    DWORD PTR ds:0xc002212c,0xc0010443
c0010fc4:	c7 05 30 21 02 c0 d1 02 01 c0 	mov    DWORD PTR ds:0xc0022130,0xc00102d1
c0010fce:	c7 05 34 21 02 c0 06 05 01 c0 	mov    DWORD PTR ds:0xc0022134,0xc0010506
c0010fd8:	c7 05 38 21 02 c0 5d 0a 01 c0 	mov    DWORD PTR ds:0xc0022138,0xc0010a5d
c0010fe2:	c7 05 3c 21 02 c0 9f 06 01 c0 	mov    DWORD PTR ds:0xc002213c,0xc001069f
c0010fec:	c7 05 40 21 02 c0 86 0a 01 c0 	mov    DWORD PTR ds:0xc0022140,0xc0010a86
c0010ff6:	c7 05 44 21 02 c0 ef 0a 01 c0 	mov    DWORD PTR ds:0xc0022144,0xc0010aef
c0011000:	c7 05 4c 21 02 c0 d9 02 01 c0 	mov    DWORD PTR ds:0xc002214c,0xc00102d9
c001100a:	c7 05 50 21 02 c0 46 03 01 c0 	mov    DWORD PTR ds:0xc0022150,0xc0010346
c0011014:	c7 05 54 21 02 c0 90 03 01 c0 	mov    DWORD PTR ds:0xc0022154,0xc0010390
c001101e:	c7 05 58 21 02 c0 9e 0b 01 c0 	mov    DWORD PTR ds:0xc0022158,0xc0010b9e
c0011028:	c7 05 5c 21 02 c0 27 09 01 c0 	mov    DWORD PTR ds:0xc002215c,0xc0010927
c0011032:	c7 05 60 21 02 c0 e5 03 01 c0 	mov    DWORD PTR ds:0xc0022160,0xc00103e5
c001103c:	c7 05 64 21 02 c0 15 0c 01 c0 	mov    DWORD PTR ds:0xc0022164,0xc0010c15
c0011046:	c7 05 68 21 02 c0 5a 0c 01 c0 	mov    DWORD PTR ds:0xc0022168,0xc0010c5a
c0011050:	c7 05 6c 21 02 c0 5e ff 00 c0 	mov    DWORD PTR ds:0xc002216c,0xc000ff5e
c001105a:	c7 05 70 21 02 c0 df 00 01 c0 	mov    DWORD PTR ds:0xc0022170,0xc00100df
c0011064:	c7 05 74 21 02 c0 74 01 01 c0 	mov    DWORD PTR ds:0xc0022174,0xc0010174
c001106e:	c7 05 78 21 02 c0 49 fe 00 c0 	mov    DWORD PTR ds:0xc0022178,0xc000fe49
c0011078:	c7 05 7c 21 02 c0 26 02 01 c0 	mov    DWORD PTR ds:0xc002217c,0xc0010226
c0011082:	c7 05 80 21 02 c0 c2 fe 00 c0 	mov    DWORD PTR ds:0xc0022180,0xc000fec2
c001108c:	c7 05 84 21 02 c0 dc fe 00 c0 	mov    DWORD PTR ds:0xc0022184,0xc000fedc
c0011096:	c3                   	ret    

c0011097 <Sys::systemCall(regs*, void*)>:
c0011097:	53                   	push   ebx
c0011098:	83 ec 08             	sub    esp,0x8
c001109b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001109f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00110a2:	83 f8 7f             	cmp    eax,0x7f
c00110a5:	77 16                	ja     c00110bd <Sys::systemCall(regs*, void*)+0x26>
c00110a7:	8b 14 85 c0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf40]
c00110ae:	85 d2                	test   edx,edx
c00110b0:	74 0b                	je     c00110bd <Sys::systemCall(regs*, void*)+0x26>
c00110b2:	83 ec 0c             	sub    esp,0xc
c00110b5:	53                   	push   ebx
c00110b6:	ff d2                	call   edx
c00110b8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00110bb:	eb 0d                	jmp    c00110ca <Sys::systemCall(regs*, void*)+0x33>
c00110bd:	52                   	push   edx
c00110be:	52                   	push   edx
c00110bf:	50                   	push   eax
c00110c0:	68 41 e0 01 c0       	push   0xc001e041
c00110c5:	e8 4a 89 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00110d2:	31 d2                	xor    edx,edx
c00110d4:	83 c4 08             	add    esp,0x8
c00110d7:	5b                   	pop    ebx
c00110d8:	c3                   	ret    

c00110d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00110d9:	55                   	push   ebp
c00110da:	57                   	push   edi
c00110db:	56                   	push   esi
c00110dc:	53                   	push   ebx
c00110dd:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00110e3:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00110eb:	0f 95 c2             	setne  dl
c00110ee:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00110f6:	0f 94 c0             	sete   al
c00110f9:	84 c2                	test   dl,al
c00110fb:	74 34                	je     c0011131 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00110fd:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011108:	74 27                	je     c0011131 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c001110a:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011111:	05 00 10 00 00       	add    eax,0x1000
c0011116:	89 c1                	mov    ecx,eax
c0011118:	25 00 f0 ff ff       	and    eax,0xfffff000
c001111d:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011123:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001112a:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011131:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011138:	83 ec 0c             	sub    esp,0xc
c001113b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011141:	6a 01                	push   0x1
c0011143:	e8 45 76 ff ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	89 c3                	mov    ebx,eax
c001114d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011153:	0f 86 25 01 00 00    	jbe    c001127e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011159:	c1 ee 0c             	shr    esi,0xc
c001115c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011163:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011167:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001116f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011176:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001117a:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011181:	29 ef                	sub    edi,ebp
c0011183:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011187:	0f 83 f8 00 00 00    	jae    c0011285 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c001118d:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011193:	76 05                	jbe    c001119a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011195:	bf 00 10 00 00       	mov    edi,0x1000
c001119a:	83 ec 0c             	sub    esp,0xc
c001119d:	31 d2                	xor    edx,edx
c001119f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00111a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00111a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00111ac:	50                   	push   eax
c00111ad:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111b1:	56                   	push   esi
c00111b2:	52                   	push   edx
c00111b3:	57                   	push   edi
c00111b4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00111bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00111be:	83 c4 20             	add    esp,0x20
c00111c1:	85 c0                	test   eax,eax
c00111c3:	75 06                	jne    c00111cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00111c5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00111c9:	74 13                	je     c00111de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00111cb:	83 ec 0c             	sub    esp,0xc
c00111ce:	53                   	push   ebx
c00111cf:	e8 ad 78 ff ff       	call   c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>
c00111d4:	83 c4 10             	add    esp,0x10
c00111d7:	31 c0                	xor    eax,eax
c00111d9:	e9 7c 01 00 00       	jmp    c001135a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00111de:	fa                   	cli    
c00111df:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00111e5:	e8 34 5e ff ff       	call   c000701e <Phys::allocatePage()>
c00111ea:	6a 07                	push   0x7
c00111ec:	89 c7                	mov    edi,eax
c00111ee:	53                   	push   ebx
c00111ef:	50                   	push   eax
c00111f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00111fe:	e8 e3 7b ff ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011203:	83 c4 0c             	add    esp,0xc
c0011206:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001120d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011213:	6a 00                	push   0x0
c0011215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001121a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001121d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011223:	e8 30 7a ff ff       	call   c0008c58 <VAS::mapOtherVASIn(bool, VAS*)>
c0011228:	58                   	pop    eax
c0011229:	5a                   	pop    edx
c001122a:	68 07 0c 00 00       	push   0xc07
c001122f:	55                   	push   ebp
c0011230:	57                   	push   edi
c0011231:	89 df                	mov    edi,ebx
c0011233:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001123a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011240:	6a 00                	push   0x0
c0011242:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011247:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001124a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011250:	e8 51 7f ff ff       	call   c00091a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011255:	b9 00 10 00 00       	mov    ecx,0x1000
c001125a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001125c:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0011261:	83 c4 20             	add    esp,0x20
c0011264:	48                   	dec    eax
c0011265:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c001126a:	85 c0                	test   eax,eax
c001126c:	75 01                	jne    c001126f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c001126e:	fb                   	sti    
c001126f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011275:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011279:	e9 f1 fe ff ff       	jmp    c001116f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c001127e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011285:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001128c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011292:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011298:	0f 86 ae 00 00 00    	jbe    c001134c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001129e:	fa                   	cli    
c001129f:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00112a5:	c1 ee 0c             	shr    esi,0xc
c00112a8:	51                   	push   ecx
c00112a9:	31 ff                	xor    edi,edi
c00112ab:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00112b2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00112b8:	6a 00                	push   0x0
c00112ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112c2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00112c8:	e8 8b 79 ff ff       	call   c0008c58 <VAS::mapOtherVASIn(bool, VAS*)>
c00112cd:	83 c4 10             	add    esp,0x10
c00112d0:	e8 49 5d ff ff       	call   c000701e <Phys::allocatePage()>
c00112d5:	47                   	inc    edi
c00112d6:	6a 07                	push   0x7
c00112d8:	53                   	push   ebx
c00112d9:	50                   	push   eax
c00112da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00112de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00112e4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00112e7:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00112ed:	e8 f4 7a ff ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00112f2:	58                   	pop    eax
c00112f3:	5a                   	pop    edx
c00112f4:	68 07 0c 00 00       	push   0xc07
c00112f9:	55                   	push   ebp
c00112fa:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011300:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011304:	50                   	push   eax
c0011305:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001130c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011312:	6a 00                	push   0x0
c0011314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011319:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001131c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011322:	e8 7f 7e ff ff       	call   c00091a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011327:	83 c4 1c             	add    esp,0x1c
c001132a:	68 00 10 00 00       	push   0x1000
c001132f:	6a 00                	push   0x0
c0011331:	53                   	push   ebx
c0011332:	e8 b9 f1 fe ff       	call   c00004f0 <memset>
c0011337:	83 c4 10             	add    esp,0x10
c001133a:	39 fe                	cmp    esi,edi
c001133c:	77 92                	ja     c00112d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001133e:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0011343:	48                   	dec    eax
c0011344:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0011349:	75 01                	jne    c001134c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001134b:	fb                   	sti    
c001134c:	83 ec 0c             	sub    esp,0xc
c001134f:	53                   	push   ebx
c0011350:	e8 2c 77 ff ff       	call   c0008a81 <Virt::freeKernelVirtualPages(unsigned long)>
c0011355:	83 c4 10             	add    esp,0x10
c0011358:	b0 01                	mov    al,0x1
c001135a:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011360:	5b                   	pop    ebx
c0011361:	5e                   	pop    esi
c0011362:	5f                   	pop    edi
c0011363:	5d                   	pop    ebp
c0011364:	c3                   	ret    

c0011365 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011365:	55                   	push   ebp
c0011366:	57                   	push   edi
c0011367:	56                   	push   esi
c0011368:	53                   	push   ebx
c0011369:	83 ec 48             	sub    esp,0x48
c001136c:	68 14 01 00 00       	push   0x114
c0011371:	e8 db 58 ff ff       	call   c0006c51 <malloc>
c0011376:	83 c4 0c             	add    esp,0xc
c0011379:	89 c6                	mov    esi,eax
c001137b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001137f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011383:	50                   	push   eax
c0011384:	e8 01 8c ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0011389:	58                   	pop    eax
c001138a:	5a                   	pop    edx
c001138b:	6a 01                	push   0x1
c001138d:	56                   	push   esi
c001138e:	e8 b7 8c ff ff       	call   c000a04a <File::open(FileOpenMode)>
c0011393:	83 c4 10             	add    esp,0x10
c0011396:	85 c0                	test   eax,eax
c0011398:	0f 85 47 01 00 00    	jne    c00114e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001139e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	6a 34                	push   0x34
c00113ab:	e8 a1 58 ff ff       	call   c0006c51 <malloc>
c00113b0:	89 c3                	mov    ebx,eax
c00113b2:	58                   	pop    eax
c00113b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00113b5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00113b9:	57                   	push   edi
c00113ba:	53                   	push   ebx
c00113bb:	6a 00                	push   0x0
c00113bd:	6a 34                	push   0x34
c00113bf:	56                   	push   esi
c00113c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00113c3:	83 c4 20             	add    esp,0x20
c00113c6:	85 c0                	test   eax,eax
c00113c8:	0f 85 17 01 00 00    	jne    c00114e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00113ce:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00113d4:	0f 85 0b 01 00 00    	jne    c00114e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00113da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113dd:	85 c0                	test   eax,eax
c00113df:	0f 84 00 01 00 00    	je     c00114e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00113e5:	31 d2                	xor    edx,edx
c00113e7:	55                   	push   ebp
c00113e8:	52                   	push   edx
c00113e9:	50                   	push   eax
c00113ea:	56                   	push   esi
c00113eb:	e8 18 8d ff ff       	call   c000a108 <File::seek(unsigned long long)>
c00113f0:	83 c4 10             	add    esp,0x10
c00113f3:	85 c0                	test   eax,eax
c00113f5:	0f 85 ea 00 00 00    	jne    c00114e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00113fb:	83 ec 0c             	sub    esp,0xc
c00113fe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011401:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011405:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011409:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001140d:	0f af c2             	imul   eax,edx
c0011410:	50                   	push   eax
c0011411:	e8 3b 58 ff ff       	call   c0006c51 <malloc>
c0011416:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011418:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001141c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001141f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011423:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011427:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001142b:	0f af c2             	imul   eax,edx
c001142e:	99                   	cdq    
c001142f:	52                   	push   edx
c0011430:	50                   	push   eax
c0011431:	56                   	push   esi
c0011432:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011435:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011438:	83 c4 20             	add    esp,0x20
c001143b:	85 c0                	test   eax,eax
c001143d:	0f 84 a2 00 00 00    	je     c00114e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011443:	31 d2                	xor    edx,edx
c0011445:	51                   	push   ecx
c0011446:	52                   	push   edx
c0011447:	50                   	push   eax
c0011448:	56                   	push   esi
c0011449:	e8 ba 8c ff ff       	call   c000a108 <File::seek(unsigned long long)>
c001144e:	83 c4 10             	add    esp,0x10
c0011451:	85 c0                	test   eax,eax
c0011453:	0f 85 8c 00 00 00    	jne    c00114e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011459:	83 ec 0c             	sub    esp,0xc
c001145c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011460:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011464:	31 ed                	xor    ebp,ebp
c0011466:	0f af c2             	imul   eax,edx
c0011469:	50                   	push   eax
c001146a:	e8 e2 57 ff ff       	call   c0006c51 <malloc>
c001146f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011475:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011480:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011484:	0f af c2             	imul   eax,edx
c0011487:	99                   	cdq    
c0011488:	52                   	push   edx
c0011489:	50                   	push   eax
c001148a:	56                   	push   esi
c001148b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001148e:	83 c4 20             	add    esp,0x20
c0011491:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011499:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001149d:	0f 86 80 00 00 00    	jbe    c0011523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00114a3:	0f b7 fd             	movzx  edi,bp
c00114a6:	c1 e7 05             	shl    edi,0x5
c00114a9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00114ad:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00114b0:	75 6b                	jne    c001151d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00114b2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00114b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00114b9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00114bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00114c0:	52                   	push   edx
c00114c1:	31 d2                	xor    edx,edx
c00114c3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00114c6:	52                   	push   edx
c00114c7:	50                   	push   eax
c00114c8:	56                   	push   esi
c00114c9:	e8 3a 8c ff ff       	call   c000a108 <File::seek(unsigned long long)>
c00114ce:	83 c4 10             	add    esp,0x10
c00114d1:	85 c0                	test   eax,eax
c00114d3:	74 17                	je     c00114ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00114d5:	83 ec 0c             	sub    esp,0xc
c00114d8:	68 55 e0 01 c0       	push   0xc001e055
c00114dd:	e8 32 85 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	31 c0                	xor    eax,eax
c00114e7:	e9 87 00 00 00       	jmp    c0011573 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00114f2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00114f5:	50                   	push   eax
c00114f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00114fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114fe:	56                   	push   esi
c00114ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011503:	e8 d1 fb ff ff       	call   c00110d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011508:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001150c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011510:	83 c4 20             	add    esp,0x20
c0011513:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011517:	73 04                	jae    c001151d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001151d:	45                   	inc    ebp
c001151e:	e9 76 ff ff ff       	jmp    c0011499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011523:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011527:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001152b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001152f:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011535:	83 ec 0c             	sub    esp,0xc
c0011538:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001153e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011543:	05 00 10 00 00       	add    eax,0x1000
c0011548:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001154b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154f:	e8 0d 57 ff ff       	call   c0006c61 <free>
c0011554:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011557:	e8 05 57 ff ff       	call   c0006c61 <free>
c001155c:	58                   	pop    eax
c001155d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011561:	e8 fb 56 ff ff       	call   c0006c61 <free>
c0011566:	89 34 24             	mov    DWORD PTR [esp],esi
c0011569:	e8 3a 8b ff ff       	call   c000a0a8 <File::close()>
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	b0 01                	mov    al,0x1
c0011573:	83 c4 3c             	add    esp,0x3c
c0011576:	5b                   	pop    ebx
c0011577:	5e                   	pop    esi
c0011578:	5f                   	pop    edi
c0011579:	5d                   	pop    ebp
c001157a:	c3                   	ret    

c001157b <Thr::runtimeReferenceHelper()>:
c001157b:	83 ec 18             	sub    esp,0x18
c001157e:	68 5d e0 01 c0       	push   0xc001e05d
c0011583:	e8 8c 84 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0011588:	fa                   	cli    
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	eb fe                	jmp    c001158c <Thr::runtimeReferenceHelper()+0x11>

c001158e <Thr::getAddressOfKernelSymbol(char const*)>:
c001158e:	57                   	push   edi
c001158f:	56                   	push   esi
c0011590:	53                   	push   ebx
c0011591:	31 db                	xor    ebx,ebx
c0011593:	39 1d 60 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a60,ebx
c0011599:	7e 3c                	jle    c00115d7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001159b:	8b 34 9d e0 29 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdd620]
c00115a2:	31 ff                	xor    edi,edi
c00115a4:	39 3c 9d e0 28 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdd720],edi
c00115ab:	7e 27                	jle    c00115d4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00115ad:	50                   	push   eax
c00115ae:	50                   	push   eax
c00115af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00115b5:	03 04 9d 60 29 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdd6a0]
c00115bc:	50                   	push   eax
c00115bd:	e8 3e f1 fe ff       	call   c0000700 <strcmp>
c00115c2:	83 c4 10             	add    esp,0x10
c00115c5:	85 c0                	test   eax,eax
c00115c7:	75 05                	jne    c00115ce <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00115c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00115cc:	eb 0b                	jmp    c00115d9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00115ce:	83 c6 10             	add    esi,0x10
c00115d1:	47                   	inc    edi
c00115d2:	eb d0                	jmp    c00115a4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00115d4:	43                   	inc    ebx
c00115d5:	eb bc                	jmp    c0011593 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00115d7:	31 c0                	xor    eax,eax
c00115d9:	5b                   	pop    ebx
c00115da:	5e                   	pop    esi
c00115db:	5f                   	pop    edi
c00115dc:	c3                   	ret    

c00115dd <Thr::loadKernelSymbolTable(char const*)>:
c00115dd:	55                   	push   ebp
c00115de:	57                   	push   edi
c00115df:	56                   	push   esi
c00115e0:	53                   	push   ebx
c00115e1:	83 ec 68             	sub    esp,0x68
c00115e4:	8b 35 b0 2a 02 c0    	mov    esi,DWORD PTR ds:0xc0022ab0
c00115ea:	68 14 01 00 00       	push   0x114
c00115ef:	e8 5d 56 ff ff       	call   c0006c51 <malloc>
c00115f4:	83 c4 0c             	add    esp,0xc
c00115f7:	89 c3                	mov    ebx,eax
c00115f9:	56                   	push   esi
c00115fa:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00115fe:	50                   	push   eax
c00115ff:	e8 86 89 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0011604:	5e                   	pop    esi
c0011605:	5f                   	pop    edi
c0011606:	6a 01                	push   0x1
c0011608:	53                   	push   ebx
c0011609:	e8 3c 8a ff ff       	call   c000a04a <File::open(FileOpenMode)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	85 c0                	test   eax,eax
c0011613:	74 0a                	je     c001161f <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011615:	83 ec 0c             	sub    esp,0xc
c0011618:	68 7f e0 01 c0       	push   0xc001e07f
c001161d:	eb 34                	jmp    c0011653 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001161f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011627:	83 ec 0c             	sub    esp,0xc
c001162a:	6a 34                	push   0x34
c001162c:	e8 20 56 ff ff       	call   c0006c51 <malloc>
c0011631:	59                   	pop    ecx
c0011632:	89 c7                	mov    edi,eax
c0011634:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011638:	8b 03                	mov    eax,DWORD PTR [ebx]
c001163a:	56                   	push   esi
c001163b:	57                   	push   edi
c001163c:	6a 00                	push   0x0
c001163e:	6a 34                	push   0x34
c0011640:	53                   	push   ebx
c0011641:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011644:	83 c4 20             	add    esp,0x20
c0011647:	85 c0                	test   eax,eax
c0011649:	74 17                	je     c0011662 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001164b:	83 ec 0c             	sub    esp,0xc
c001164e:	68 96 e0 01 c0       	push   0xc001e096
c0011653:	e8 0f df ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0011658:	83 c4 10             	add    esp,0x10
c001165b:	31 c0                	xor    eax,eax
c001165d:	e9 31 02 00 00       	jmp    c0011893 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011662:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011668:	75 e1                	jne    c001164b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001166a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001166d:	85 c0                	test   eax,eax
c001166f:	74 da                	je     c001164b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011671:	52                   	push   edx
c0011672:	31 d2                	xor    edx,edx
c0011674:	52                   	push   edx
c0011675:	50                   	push   eax
c0011676:	53                   	push   ebx
c0011677:	e8 8c 8a ff ff       	call   c000a108 <File::seek(unsigned long long)>
c001167c:	83 c4 10             	add    esp,0x10
c001167f:	85 c0                	test   eax,eax
c0011681:	75 c8                	jne    c001164b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001168a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001168e:	31 ed                	xor    ebp,ebp
c0011690:	0f af c2             	imul   eax,edx
c0011693:	50                   	push   eax
c0011694:	e8 b8 55 ff ff       	call   c0006c51 <malloc>
c0011699:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001169b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001169f:	89 34 24             	mov    DWORD PTR [esp],esi
c00116a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116a6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00116aa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00116ae:	0f af c2             	imul   eax,edx
c00116b1:	99                   	cdq    
c00116b2:	52                   	push   edx
c00116b3:	50                   	push   eax
c00116b4:	53                   	push   ebx
c00116b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116b8:	83 c4 20             	add    esp,0x20
c00116bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00116c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00116cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00116d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116db:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00116df:	0f 86 aa 00 00 00    	jbe    c001178f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00116e5:	0f b7 f5             	movzx  esi,bp
c00116e8:	6b f6 28             	imul   esi,esi,0x28
c00116eb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00116ef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00116f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116f6:	50                   	push   eax
c00116f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116fb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00116ff:	8b 16                	mov    edx,DWORD PTR [esi]
c0011701:	6b c0 28             	imul   eax,eax,0x28
c0011704:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011708:	89 d0                	mov    eax,edx
c001170a:	31 d2                	xor    edx,edx
c001170c:	52                   	push   edx
c001170d:	50                   	push   eax
c001170e:	53                   	push   ebx
c001170f:	e8 f4 89 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0011714:	83 c4 0c             	add    esp,0xc
c0011717:	6a 20                	push   0x20
c0011719:	6a 00                	push   0x0
c001171b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001171f:	52                   	push   edx
c0011720:	e8 cb ed fe ff       	call   c00004f0 <memset>
c0011725:	58                   	pop    eax
c0011726:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011728:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001172c:	51                   	push   ecx
c001172d:	8d 54 24 40          	lea    edx,[esp+0x40]
c0011731:	52                   	push   edx
c0011732:	6a 00                	push   0x0
c0011734:	6a 1f                	push   0x1f
c0011736:	53                   	push   ebx
c0011737:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001173a:	83 c4 18             	add    esp,0x18
c001173d:	68 ad e0 01 c0       	push   0xc001e0ad
c0011742:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011746:	52                   	push   edx
c0011747:	e8 b4 ef fe ff       	call   c0000700 <strcmp>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	85 c0                	test   eax,eax
c0011751:	75 0f                	jne    c0011762 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0011753:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011756:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001175a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001175e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011762:	50                   	push   eax
c0011763:	50                   	push   eax
c0011764:	68 b5 e0 01 c0       	push   0xc001e0b5
c0011769:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001176d:	50                   	push   eax
c001176e:	e8 8d ef fe ff       	call   c0000700 <strcmp>
c0011773:	83 c4 10             	add    esp,0x10
c0011776:	85 c0                	test   eax,eax
c0011778:	75 0f                	jne    c0011789 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001177a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001177d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011781:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011785:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011789:	45                   	inc    ebp
c001178a:	e9 4c ff ff ff       	jmp    c00116db <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001178f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011794:	75 10                	jne    c00117a6 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0011796:	83 ec 0c             	sub    esp,0xc
c0011799:	68 bd e0 01 c0       	push   0xc001e0bd
c001179e:	e8 c4 dd ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00117a3:	83 c4 10             	add    esp,0x10
c00117a6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00117ab:	75 10                	jne    c00117bd <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00117ad:	83 ec 0c             	sub    esp,0xc
c00117b0:	68 bd e0 01 c0       	push   0xc001e0bd
c00117b5:	e8 ad dd ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00117ba:	83 c4 10             	add    esp,0x10
c00117bd:	31 d2                	xor    edx,edx
c00117bf:	50                   	push   eax
c00117c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c4:	52                   	push   edx
c00117c5:	50                   	push   eax
c00117c6:	53                   	push   ebx
c00117c7:	e8 3c 89 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c00117cc:	5a                   	pop    edx
c00117cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117d1:	e8 7b 54 ff ff       	call   c0006c51 <malloc>
c00117d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117de:	31 c9                	xor    ecx,ecx
c00117e0:	5e                   	pop    esi
c00117e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117e3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00117e7:	55                   	push   ebp
c00117e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ec:	51                   	push   ecx
c00117ed:	52                   	push   edx
c00117ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00117f2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00117f6:	53                   	push   ebx
c00117f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00117fa:	83 c4 14             	add    esp,0x14
c00117fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011801:	e8 4b 54 ff ff       	call   c0006c51 <malloc>
c0011806:	89 c6                	mov    esi,eax
c0011808:	8b 03                	mov    eax,DWORD PTR [ebx]
c001180a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001180d:	56                   	push   esi
c001180e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011812:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011816:	51                   	push   ecx
c0011817:	52                   	push   edx
c0011818:	53                   	push   ebx
c0011819:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011820:	8b 15 60 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a60
c0011826:	83 c4 1c             	add    esp,0x1c
c0011829:	c1 e8 04             	shr    eax,0x4
c001182c:	89 04 95 e0 28 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd720],eax
c0011833:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011837:	31 d2                	xor    edx,edx
c0011839:	52                   	push   edx
c001183a:	50                   	push   eax
c001183b:	53                   	push   ebx
c001183c:	e8 c7 88 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0011841:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011843:	31 d2                	xor    edx,edx
c0011845:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011848:	56                   	push   esi
c0011849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001184d:	52                   	push   edx
c001184e:	50                   	push   eax
c001184f:	53                   	push   ebx
c0011850:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011853:	83 c4 14             	add    esp,0x14
c0011856:	53                   	push   ebx
c0011857:	e8 4c 88 ff ff       	call   c000a0a8 <File::close()>
c001185c:	5d                   	pop    ebp
c001185d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011861:	e8 fb 53 ff ff       	call   c0006c61 <free>
c0011866:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011869:	e8 f3 53 ff ff       	call   c0006c61 <free>
c001186e:	a1 60 2a 02 c0       	mov    eax,ds:0xc0022a60
c0011873:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011877:	8d 50 01             	lea    edx,[eax+0x1]
c001187a:	89 0c 85 e0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd620],ecx
c0011881:	89 34 85 60 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd6a0],esi
c0011888:	89 15 60 2a 02 c0    	mov    DWORD PTR ds:0xc0022a60,edx
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	b0 01                	mov    al,0x1
c0011893:	83 c4 5c             	add    esp,0x5c
c0011896:	5b                   	pop    ebx
c0011897:	5e                   	pop    esi
c0011898:	5f                   	pop    edi
c0011899:	5d                   	pop    ebp
c001189a:	c3                   	ret    

c001189b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001189b:	55                   	push   ebp
c001189c:	57                   	push   edi
c001189d:	56                   	push   esi
c001189e:	53                   	push   ebx
c001189f:	81 ec 68 03 00 00    	sub    esp,0x368
c00118a5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00118ac:	8b 1d b0 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ab0
c00118b2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00118b6:	68 14 01 00 00       	push   0x114
c00118bb:	e8 91 53 ff ff       	call   c0006c51 <malloc>
c00118c0:	83 c4 0c             	add    esp,0xc
c00118c3:	89 c5                	mov    ebp,eax
c00118c5:	53                   	push   ebx
c00118c6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00118cd:	50                   	push   eax
c00118ce:	e8 b7 86 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c00118d3:	5e                   	pop    esi
c00118d4:	5f                   	pop    edi
c00118d5:	6a 01                	push   0x1
c00118d7:	55                   	push   ebp
c00118d8:	e8 6d 87 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c00118dd:	83 c4 10             	add    esp,0x10
c00118e0:	85 c0                	test   eax,eax
c00118e2:	0f 85 a7 06 00 00    	jne    c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00118e8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00118f0:	83 ec 0c             	sub    esp,0xc
c00118f3:	6a 34                	push   0x34
c00118f5:	e8 57 53 ff ff       	call   c0006c51 <malloc>
c00118fa:	5b                   	pop    ebx
c00118fb:	89 c7                	mov    edi,eax
c00118fd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011901:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011904:	53                   	push   ebx
c0011905:	57                   	push   edi
c0011906:	6a 00                	push   0x0
c0011908:	6a 34                	push   0x34
c001190a:	55                   	push   ebp
c001190b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001190e:	83 c4 20             	add    esp,0x20
c0011911:	85 c0                	test   eax,eax
c0011913:	0f 85 76 06 00 00    	jne    c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011919:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001191f:	0f 85 6a 06 00 00    	jne    c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011925:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011928:	85 c0                	test   eax,eax
c001192a:	0f 84 5f 06 00 00    	je     c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011930:	31 d2                	xor    edx,edx
c0011932:	51                   	push   ecx
c0011933:	52                   	push   edx
c0011934:	50                   	push   eax
c0011935:	55                   	push   ebp
c0011936:	e8 cd 87 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	85 c0                	test   eax,eax
c0011940:	0f 85 49 06 00 00    	jne    c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011946:	83 ec 0c             	sub    esp,0xc
c0011949:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001194c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011950:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011954:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011958:	0f af c2             	imul   eax,edx
c001195b:	50                   	push   eax
c001195c:	e8 f0 52 ff ff       	call   c0006c51 <malloc>
c0011961:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011968:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001196b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001196f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011973:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011977:	0f af c2             	imul   eax,edx
c001197a:	99                   	cdq    
c001197b:	52                   	push   edx
c001197c:	50                   	push   eax
c001197d:	55                   	push   ebp
c001197e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011981:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0011984:	83 c4 20             	add    esp,0x20
c0011987:	85 c0                	test   eax,eax
c0011989:	0f 84 00 06 00 00    	je     c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001198f:	52                   	push   edx
c0011990:	31 d2                	xor    edx,edx
c0011992:	52                   	push   edx
c0011993:	50                   	push   eax
c0011994:	55                   	push   ebp
c0011995:	e8 6e 87 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	85 c0                	test   eax,eax
c001199f:	0f 85 ea 05 00 00    	jne    c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00119a5:	83 ec 0c             	sub    esp,0xc
c00119a8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00119ac:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00119b0:	31 f6                	xor    esi,esi
c00119b2:	0f af c2             	imul   eax,edx
c00119b5:	50                   	push   eax
c00119b6:	e8 96 52 ff ff       	call   c0006c51 <malloc>
c00119bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00119be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00119c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00119c9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00119cd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00119d1:	0f af c2             	imul   eax,edx
c00119d4:	99                   	cdq    
c00119d5:	52                   	push   edx
c00119d6:	50                   	push   eax
c00119d7:	55                   	push   ebp
c00119d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00119db:	83 c4 20             	add    esp,0x20
c00119de:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00119e2:	0f 86 8a 00 00 00    	jbe    c0011a72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00119e8:	0f b7 de             	movzx  ebx,si
c00119eb:	c1 e3 05             	shl    ebx,0x5
c00119ee:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00119f2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00119f5:	75 75                	jne    c0011a6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00119f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00119fa:	31 d2                	xor    edx,edx
c00119fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a00:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0011a03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a07:	50                   	push   eax
c0011a08:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011a0b:	52                   	push   edx
c0011a0c:	50                   	push   eax
c0011a0d:	55                   	push   ebp
c0011a0e:	e8 f5 86 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	85 c0                	test   eax,eax
c0011a18:	0f 85 71 05 00 00    	jne    c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011a1e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0011a25:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011a28:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0011a2c:	31 d2                	xor    edx,edx
c0011a2e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0011a32:	83 ec 0c             	sub    esp,0xc
c0011a35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a39:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a40:	50                   	push   eax
c0011a41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a49:	52                   	push   edx
c0011a4a:	50                   	push   eax
c0011a4b:	55                   	push   ebp
c0011a4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a4f:	83 c4 1c             	add    esp,0x1c
c0011a52:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011a55:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0011a58:	50                   	push   eax
c0011a59:	6a 00                	push   0x0
c0011a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a5f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0011a63:	50                   	push   eax
c0011a64:	e8 87 ea fe ff       	call   c00004f0 <memset>
c0011a69:	83 c4 10             	add    esp,0x10
c0011a6c:	46                   	inc    esi
c0011a6d:	e9 6c ff ff ff       	jmp    c00119de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0011a72:	53                   	push   ebx
c0011a73:	31 db                	xor    ebx,ebx
c0011a75:	68 00 01 00 00       	push   0x100
c0011a7a:	6a 00                	push   0x0
c0011a7c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0011a80:	50                   	push   eax
c0011a81:	e8 6a ea fe ff       	call   c00004f0 <memset>
c0011a86:	83 c4 0c             	add    esp,0xc
c0011a89:	68 00 01 00 00       	push   0x100
c0011a8e:	6a 00                	push   0x0
c0011a90:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0011a97:	50                   	push   eax
c0011a98:	e8 53 ea fe ff       	call   c00004f0 <memset>
c0011a9d:	83 c4 10             	add    esp,0x10
c0011aa0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011aa8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011ab0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011ab8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ac0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ac8:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0011acc:	0f 86 30 01 00 00    	jbe    c0011c02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0011ad2:	0f b7 f3             	movzx  esi,bx
c0011ad5:	6b f6 28             	imul   esi,esi,0x28
c0011ad8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011adc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011adf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ae3:	52                   	push   edx
c0011ae4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ae8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0011aec:	8b 06                	mov    eax,DWORD PTR [esi]
c0011aee:	6b d2 28             	imul   edx,edx,0x28
c0011af1:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0011af5:	31 d2                	xor    edx,edx
c0011af7:	52                   	push   edx
c0011af8:	50                   	push   eax
c0011af9:	55                   	push   ebp
c0011afa:	e8 09 86 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0011aff:	83 c4 0c             	add    esp,0xc
c0011b02:	6a 20                	push   0x20
c0011b04:	6a 00                	push   0x0
c0011b06:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011b0d:	51                   	push   ecx
c0011b0e:	e8 dd e9 fe ff       	call   c00004f0 <memset>
c0011b13:	59                   	pop    ecx
c0011b14:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011b17:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011b1b:	52                   	push   edx
c0011b1c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0011b23:	51                   	push   ecx
c0011b24:	6a 00                	push   0x0
c0011b26:	6a 1f                	push   0x1f
c0011b28:	55                   	push   ebp
c0011b29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b2c:	83 c4 1c             	add    esp,0x1c
c0011b2f:	6a 09                	push   0x9
c0011b31:	68 d7 e0 01 c0       	push   0xc001e0d7
c0011b36:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011b3d:	51                   	push   ecx
c0011b3e:	e8 6d e8 fe ff       	call   c00003b0 <memcmp>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	85 c0                	test   eax,eax
c0011b48:	75 21                	jne    c0011b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b52:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011b56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011b5a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011b5d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011b64:	89 d0                	mov    eax,edx
c0011b66:	40                   	inc    eax
c0011b67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b6b:	50                   	push   eax
c0011b6c:	6a 09                	push   0x9
c0011b6e:	68 e1 e0 01 c0       	push   0xc001e0e1
c0011b73:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011b7a:	50                   	push   eax
c0011b7b:	e8 30 e8 fe ff       	call   c00003b0 <memcmp>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	85 c0                	test   eax,eax
c0011b85:	75 21                	jne    c0011ba8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b8f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011b93:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011b97:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011b9a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011ba1:	89 d0                	mov    eax,edx
c0011ba3:	40                   	inc    eax
c0011ba4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ba8:	50                   	push   eax
c0011ba9:	50                   	push   eax
c0011baa:	68 ad e0 01 c0       	push   0xc001e0ad
c0011baf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011bb6:	50                   	push   eax
c0011bb7:	e8 44 eb fe ff       	call   c0000700 <strcmp>
c0011bbc:	83 c4 10             	add    esp,0x10
c0011bbf:	85 c0                	test   eax,eax
c0011bc1:	75 0f                	jne    c0011bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011bc3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011bc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011bd2:	50                   	push   eax
c0011bd3:	50                   	push   eax
c0011bd4:	68 b5 e0 01 c0       	push   0xc001e0b5
c0011bd9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011be0:	50                   	push   eax
c0011be1:	e8 1a eb fe ff       	call   c0000700 <strcmp>
c0011be6:	83 c4 10             	add    esp,0x10
c0011be9:	85 c0                	test   eax,eax
c0011beb:	75 0f                	jne    c0011bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0011bed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011bf0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011bf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bf8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011bfc:	43                   	inc    ebx
c0011bfd:	e9 c6 fe ff ff       	jmp    c0011ac8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011c02:	31 d2                	xor    edx,edx
c0011c04:	50                   	push   eax
c0011c05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c09:	52                   	push   edx
c0011c0a:	50                   	push   eax
c0011c0b:	55                   	push   ebp
c0011c0c:	e8 f7 84 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0011c11:	58                   	pop    eax
c0011c12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c16:	e8 36 50 ff ff       	call   c0006c51 <malloc>
c0011c1b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011c1e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011c22:	31 d2                	xor    edx,edx
c0011c24:	58                   	pop    eax
c0011c25:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011c29:	53                   	push   ebx
c0011c2a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011c2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c32:	52                   	push   edx
c0011c33:	50                   	push   eax
c0011c34:	55                   	push   ebp
c0011c35:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011c38:	83 c4 14             	add    esp,0x14
c0011c3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c3f:	e8 0d 50 ff ff       	call   c0006c51 <malloc>
c0011c44:	31 d2                	xor    edx,edx
c0011c46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c4a:	83 c4 0c             	add    esp,0xc
c0011c4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c51:	52                   	push   edx
c0011c52:	50                   	push   eax
c0011c53:	55                   	push   ebp
c0011c54:	e8 af 84 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0011c59:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011c5c:	31 d2                	xor    edx,edx
c0011c5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c61:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011c65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c69:	52                   	push   edx
c0011c6a:	50                   	push   eax
c0011c6b:	55                   	push   ebp
c0011c6c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011c6f:	83 c4 20             	add    esp,0x20
c0011c72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011c7e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011c82:	0f 84 0b 03 00 00    	je     c0011f93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011c88:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011c8f:	31 d2                	xor    edx,edx
c0011c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c95:	c1 e8 03             	shr    eax,0x3
c0011c98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011c9c:	51                   	push   ecx
c0011c9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ca1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011ca5:	52                   	push   edx
c0011ca6:	50                   	push   eax
c0011ca7:	55                   	push   ebp
c0011ca8:	e8 5b 84 ff ff       	call   c000a108 <File::seek(unsigned long long)>
c0011cad:	5b                   	pop    ebx
c0011cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cb2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011cb9:	e8 93 4f ff ff       	call   c0006c51 <malloc>
c0011cbe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011cc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cc5:	31 d2                	xor    edx,edx
c0011cc7:	5e                   	pop    esi
c0011cc8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011ccc:	50                   	push   eax
c0011ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cd5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011cdc:	52                   	push   edx
c0011cdd:	50                   	push   eax
c0011cde:	55                   	push   ebp
c0011cdf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ce2:	83 c4 20             	add    esp,0x20
c0011ce5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011ced:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cf1:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011cf5:	0f 8d 7c 02 00 00    	jge    c0011f77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011cfb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d03:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011d08:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011d0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d13:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011d17:	89 d8                	mov    eax,ebx
c0011d19:	c1 e8 08             	shr    eax,0x8
c0011d1c:	89 c6                	mov    esi,eax
c0011d1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d22:	c1 e6 04             	shl    esi,0x4
c0011d25:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011d29:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011d2c:	85 d2                	test   edx,edx
c0011d2e:	0f 85 bf 00 00 00    	jne    c0011df3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011d34:	83 ec 0c             	sub    esp,0xc
c0011d37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011d3b:	03 06                	add    eax,DWORD PTR [esi]
c0011d3d:	50                   	push   eax
c0011d3e:	e8 4b f8 ff ff       	call   c001158e <Thr::getAddressOfKernelSymbol(char const*)>
c0011d43:	83 c4 10             	add    esp,0x10
c0011d46:	89 c2                	mov    edx,eax
c0011d48:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011d4d:	85 c0                	test   eax,eax
c0011d4f:	0f 85 9e 00 00 00    	jne    c0011df3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011d55:	83 ec 0c             	sub    esp,0xc
c0011d58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011d5c:	03 06                	add    eax,DWORD PTR [esi]
c0011d5e:	50                   	push   eax
c0011d5f:	e8 a0 3e ff ff       	call   c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	89 c2                	mov    edx,eax
c0011d69:	85 c0                	test   eax,eax
c0011d6b:	0f 85 82 00 00 00    	jne    c0011df3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011d71:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011d75:	50                   	push   eax
c0011d76:	50                   	push   eax
c0011d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d7b:	03 06                	add    eax,DWORD PTR [esi]
c0011d7d:	50                   	push   eax
c0011d7e:	68 eb e0 01 c0       	push   0xc001e0eb
c0011d83:	e8 8c 7c ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0011d88:	58                   	pop    eax
c0011d89:	5a                   	pop    edx
c0011d8a:	68 05 e1 01 c0       	push   0xc001e105
c0011d8f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011d96:	50                   	push   eax
c0011d97:	e8 84 e8 fe ff       	call   c0000620 <strcpy>
c0011d9c:	59                   	pop    ecx
c0011d9d:	58                   	pop    eax
c0011d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011da2:	03 06                	add    eax,DWORD PTR [esi]
c0011da4:	50                   	push   eax
c0011da5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011dac:	50                   	push   eax
c0011dad:	e8 2e ea fe ff       	call   c00007e0 <strcat>
c0011db2:	58                   	pop    eax
c0011db3:	5a                   	pop    edx
c0011db4:	68 9b e1 01 c0       	push   0xc001e19b
c0011db9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011dc0:	50                   	push   eax
c0011dc1:	e8 1a ea fe ff       	call   c00007e0 <strcat>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011dce:	0f 84 5d 01 00 00    	je     c0011f31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011dd4:	83 ec 0c             	sub    esp,0xc
c0011dd7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011dde:	50                   	push   eax
c0011ddf:	e8 83 d7 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011deb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011def:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011df3:	80 fb 01             	cmp    bl,0x1
c0011df6:	0f 85 88 00 00 00    	jne    c0011e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011dfc:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011e03:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011e07:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011e0b:	01 ce                	add    esi,ecx
c0011e0d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011e13:	0f 94 c0             	sete   al
c0011e16:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011e1c:	0f 94 c3             	sete   bl
c0011e1f:	09 c3                	or     ebx,eax
c0011e21:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e23:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011e28:	74 41                	je     c0011e6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011e2a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011e2d:	84 db                	test   bl,bl
c0011e2f:	75 15                	jne    c0011e46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011e31:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011e35:	66 83 f8 0c          	cmp    ax,0xc
c0011e39:	76 05                	jbe    c0011e40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011e3b:	b8 0c 00 00 00       	mov    eax,0xc
c0011e40:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011e44:	76 37                	jbe    c0011e7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011e46:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011e4a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e4f:	0f 84 dc 00 00 00    	je     c0011f31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011e55:	83 ec 0c             	sub    esp,0xc
c0011e58:	68 1c e1 01 c0       	push   0xc001e11c
c0011e5d:	e8 05 d7 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e69:	eb 12                	jmp    c0011e7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011e6b:	01 c1                	add    ecx,eax
c0011e6d:	84 db                	test   bl,bl
c0011e6f:	75 0c                	jne    c0011e7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011e71:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011e75:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011e79:	77 02                	ja     c0011e7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011e7b:	01 d1                	add    ecx,edx
c0011e7d:	89 0e                	mov    DWORD PTR [esi],ecx
c0011e7f:	e9 ea 00 00 00       	jmp    c0011f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011e84:	80 fb 02             	cmp    bl,0x2
c0011e87:	75 7c                	jne    c0011f05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011e89:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011e90:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011e94:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011e98:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011e9e:	74 20                	je     c0011ec0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011ea0:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011ea6:	74 18                	je     c0011ec0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011ea8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011eac:	b9 0a 00 00 00       	mov    ecx,0xa
c0011eb1:	66 83 f8 0e          	cmp    ax,0xe
c0011eb5:	77 03                	ja     c0011eba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011eb7:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011eba:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011ebe:	76 1f                	jbe    c0011edf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011ec0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011ec4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011ec9:	74 66                	je     c0011f31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011ecb:	83 ec 0c             	sub    esp,0xc
c0011ece:	68 38 e1 01 c0       	push   0xc001e138
c0011ed3:	e8 8f d6 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011edf:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ee1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011ee6:	74 13                	je     c0011efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011ee8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011eec:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011ef3:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011ef7:	01 c8                	add    eax,ecx
c0011ef9:	eb 04                	jmp    c0011eff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011efb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011eff:	01 c2                	add    edx,eax
c0011f01:	89 16                	mov    DWORD PTR [esi],edx
c0011f03:	eb 69                	jmp    c0011f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011f05:	0f b6 db             	movzx  ebx,bl
c0011f08:	50                   	push   eax
c0011f09:	50                   	push   eax
c0011f0a:	53                   	push   ebx
c0011f0b:	68 54 e1 01 c0       	push   0xc001e154
c0011f10:	e8 ff 7a ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0011f15:	83 c4 10             	add    esp,0x10
c0011f18:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011f1d:	74 12                	je     c0011f31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011f1f:	83 ec 0c             	sub    esp,0xc
c0011f22:	68 5f e1 01 c0       	push   0xc001e15f
c0011f27:	e8 3b d6 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0011f2c:	83 c4 10             	add    esp,0x10
c0011f2f:	eb 3d                	jmp    c0011f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011f31:	83 ec 0c             	sub    esp,0xc
c0011f34:	55                   	push   ebp
c0011f35:	e8 6e 81 ff ff       	call   c000a0a8 <File::close()>
c0011f3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011f3d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011f40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f43:	59                   	pop    ecx
c0011f44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f48:	e8 14 4d ff ff       	call   c0006c61 <free>
c0011f4d:	5b                   	pop    ebx
c0011f4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011f52:	e8 0a 4d ff ff       	call   c0006c61 <free>
c0011f57:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f5a:	e8 02 4d ff ff       	call   c0006c61 <free>
c0011f5f:	5e                   	pop    esi
c0011f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f64:	e8 f8 4c ff ff       	call   c0006c61 <free>
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	eb 21                	jmp    c0011f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011f6e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011f72:	e9 76 fd ff ff       	jmp    c0011ced <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011f77:	83 ec 0c             	sub    esp,0xc
c0011f7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f7e:	e8 de 4c ff ff       	call   c0006c61 <free>
c0011f83:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	e9 eb fc ff ff       	jmp    c0011c7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011f8f:	31 c0                	xor    eax,eax
c0011f91:	eb 33                	jmp    c0011fc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011f93:	83 ec 0c             	sub    esp,0xc
c0011f96:	55                   	push   ebp
c0011f97:	e8 0c 81 ff ff       	call   c000a0a8 <File::close()>
c0011f9c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011f9f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011fa2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fa5:	58                   	pop    eax
c0011fa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011faa:	e8 b2 4c ff ff       	call   c0006c61 <free>
c0011faf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011fb2:	e8 aa 4c ff ff       	call   c0006c61 <free>
c0011fb7:	5a                   	pop    edx
c0011fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fbc:	e8 a0 4c ff ff       	call   c0006c61 <free>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	b0 01                	mov    al,0x1
c0011fc6:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011fcc:	5b                   	pop    ebx
c0011fcd:	5e                   	pop    esi
c0011fce:	5f                   	pop    edi
c0011fcf:	5d                   	pop    ebp
c0011fd0:	c3                   	ret    

c0011fd1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011fd1:	56                   	push   esi
c0011fd2:	31 d2                	xor    edx,edx
c0011fd4:	53                   	push   ebx
c0011fd5:	8b 1d c0 22 02 c0    	mov    ebx,DWORD PTR ds:0xc00222c0
c0011fdb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011fdf:	39 d3                	cmp    ebx,edx
c0011fe1:	7e 1b                	jle    c0011ffe <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011fe3:	8b 04 95 e0 24 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddb20]
c0011fea:	39 c8                	cmp    eax,ecx
c0011fec:	77 0d                	ja     c0011ffb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011fee:	8b 34 95 e0 22 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffddd20]
c0011ff5:	01 c6                	add    esi,eax
c0011ff7:	39 ce                	cmp    esi,ecx
c0011ff9:	77 05                	ja     c0012000 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011ffb:	42                   	inc    edx
c0011ffc:	eb e1                	jmp    c0011fdf <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011ffe:	31 c0                	xor    eax,eax
c0012000:	5b                   	pop    ebx
c0012001:	5e                   	pop    esi
c0012002:	c3                   	ret    

c0012003 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012003:	53                   	push   ebx
c0012004:	31 c0                	xor    eax,eax
c0012006:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001200a:	8b 1d c0 22 02 c0    	mov    ebx,DWORD PTR ds:0xc00222c0
c0012010:	39 c3                	cmp    ebx,eax
c0012012:	7e 22                	jle    c0012036 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012014:	8b 14 85 e0 24 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddb20]
c001201b:	39 ca                	cmp    edx,ecx
c001201d:	77 14                	ja     c0012033 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001201f:	03 14 85 e0 22 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffddd20]
c0012026:	39 ca                	cmp    edx,ecx
c0012028:	76 09                	jbe    c0012033 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001202a:	8b 04 85 e0 26 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd920]
c0012031:	eb 05                	jmp    c0012038 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012033:	40                   	inc    eax
c0012034:	eb da                	jmp    c0012010 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012036:	31 c0                	xor    eax,eax
c0012038:	5b                   	pop    ebx
c0012039:	c3                   	ret    

c001203a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001203a:	53                   	push   ebx
c001203b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001203f:	53                   	push   ebx
c0012040:	e8 8c ff ff ff       	call   c0011fd1 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012045:	5a                   	pop    edx
c0012046:	31 d2                	xor    edx,edx
c0012048:	85 c0                	test   eax,eax
c001204a:	74 04                	je     c0012050 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001204c:	89 da                	mov    edx,ebx
c001204e:	29 c2                	sub    edx,eax
c0012050:	89 d0                	mov    eax,edx
c0012052:	5b                   	pop    ebx
c0012053:	c3                   	ret    

c0012054 <Thr::loadDLL(char const*, bool)>:
c0012054:	55                   	push   ebp
c0012055:	57                   	push   edi
c0012056:	56                   	push   esi
c0012057:	53                   	push   ebx
c0012058:	81 ec 34 01 00 00    	sub    esp,0x134
c001205e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012065:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001206c:	56                   	push   esi
c001206d:	68 77 e1 01 c0       	push   0xc001e177
c0012072:	e8 9d 79 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0012077:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001207e:	e8 ce 4b ff ff       	call   c0006c51 <malloc>
c0012083:	83 c4 0c             	add    esp,0xc
c0012086:	89 c3                	mov    ebx,eax
c0012088:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c001208e:	56                   	push   esi
c001208f:	50                   	push   eax
c0012090:	e8 f5 7e ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0012095:	83 c4 10             	add    esp,0x10
c0012098:	85 db                	test   ebx,ebx
c001209a:	75 3c                	jne    c00120d8 <Thr::loadDLL(char const*, bool)+0x84>
c001209c:	89 f8                	mov    eax,edi
c001209e:	84 c0                	test   al,al
c00120a0:	0f 84 d2 01 00 00    	je     c0012278 <Thr::loadDLL(char const*, bool)+0x224>
c00120a6:	55                   	push   ebp
c00120a7:	55                   	push   ebp
c00120a8:	68 88 e1 01 c0       	push   0xc001e188
c00120ad:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00120b1:	55                   	push   ebp
c00120b2:	e8 69 e5 fe ff       	call   c0000620 <strcpy>
c00120b7:	58                   	pop    eax
c00120b8:	5a                   	pop    edx
c00120b9:	56                   	push   esi
c00120ba:	55                   	push   ebp
c00120bb:	e8 20 e7 fe ff       	call   c00007e0 <strcat>
c00120c0:	59                   	pop    ecx
c00120c1:	58                   	pop    eax
c00120c2:	68 9b e1 01 c0       	push   0xc001e19b
c00120c7:	55                   	push   ebp
c00120c8:	e8 13 e7 fe ff       	call   c00007e0 <strcat>
c00120cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00120d0:	e8 92 d4 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	51                   	push   ecx
c00120d9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00120dd:	50                   	push   eax
c00120de:	8d 44 24 20          	lea    eax,[esp+0x20]
c00120e2:	50                   	push   eax
c00120e3:	53                   	push   ebx
c00120e4:	e8 0d 82 ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	85 db                	test   ebx,ebx
c00120ee:	74 0c                	je     c00120fc <Thr::loadDLL(char const*, bool)+0xa8>
c00120f0:	83 ec 0c             	sub    esp,0xc
c00120f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120f5:	53                   	push   ebx
c00120f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012101:	75 0a                	jne    c001210d <Thr::loadDLL(char const*, bool)+0xb9>
c0012103:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012107:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001210b:	75 3c                	jne    c0012149 <Thr::loadDLL(char const*, bool)+0xf5>
c001210d:	89 f8                	mov    eax,edi
c001210f:	84 c0                	test   al,al
c0012111:	0f 84 49 01 00 00    	je     c0012260 <Thr::loadDLL(char const*, bool)+0x20c>
c0012117:	51                   	push   ecx
c0012118:	51                   	push   ecx
c0012119:	68 88 e1 01 c0       	push   0xc001e188
c001211e:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012122:	53                   	push   ebx
c0012123:	e8 f8 e4 fe ff       	call   c0000620 <strcpy>
c0012128:	5d                   	pop    ebp
c0012129:	58                   	pop    eax
c001212a:	56                   	push   esi
c001212b:	53                   	push   ebx
c001212c:	e8 af e6 fe ff       	call   c00007e0 <strcat>
c0012131:	58                   	pop    eax
c0012132:	5a                   	pop    edx
c0012133:	68 9b e1 01 c0       	push   0xc001e19b
c0012138:	53                   	push   ebx
c0012139:	e8 a2 e6 fe ff       	call   c00007e0 <strcat>
c001213e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012141:	e8 21 d4 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0012146:	83 c4 10             	add    esp,0x10
c0012149:	52                   	push   edx
c001214a:	6a 03                	push   0x3
c001214c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012150:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012154:	05 ff 0f 00 00       	add    eax,0xfff
c0012159:	83 d2 00             	adc    edx,0x0
c001215c:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012160:	50                   	push   eax
c0012161:	ff 35 94 f6 01 c0    	push   DWORD PTR ds:0xc001f694
c0012167:	e8 7e 6d ff ff       	call   c0008eea <VAS::allocatePages(int, int)>
c001216c:	59                   	pop    ecx
c001216d:	89 c3                	mov    ebx,eax
c001216f:	5d                   	pop    ebp
c0012170:	50                   	push   eax
c0012171:	68 0e ce 01 c0       	push   0xc001ce0e
c0012176:	e8 99 78 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001217b:	89 34 24             	mov    DWORD PTR [esp],esi
c001217e:	e8 dd e3 fe ff       	call   c0000560 <strlen>
c0012183:	8b 2d c0 22 02 c0    	mov    ebp,DWORD PTR ds:0xc00222c0
c0012189:	40                   	inc    eax
c001218a:	89 04 24             	mov    DWORD PTR [esp],eax
c001218d:	e8 bf 4a ff ff       	call   c0006c51 <malloc>
c0012192:	89 04 ad e0 26 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdd920],eax
c0012199:	58                   	pop    eax
c001219a:	a1 c0 22 02 c0       	mov    eax,ds:0xc00222c0
c001219f:	5a                   	pop    edx
c00121a0:	56                   	push   esi
c00121a1:	ff 34 85 e0 26 02 c0 	push   DWORD PTR [eax*4-0x3ffdd920]
c00121a8:	e8 73 e4 fe ff       	call   c0000620 <strcpy>
c00121ad:	a1 c0 22 02 c0       	mov    eax,ds:0xc00222c0
c00121b2:	8d 50 01             	lea    edx,[eax+0x1]
c00121b5:	89 1c 85 e0 24 02 c0 	mov    DWORD PTR [eax*4-0x3ffddb20],ebx
c00121bc:	89 15 c0 22 02 c0    	mov    DWORD PTR ds:0xc00222c0,edx
c00121c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121c6:	83 c4 0c             	add    esp,0xc
c00121c9:	89 14 85 e0 22 02 c0 	mov    DWORD PTR [eax*4-0x3ffddd20],edx
c00121d0:	6a 01                	push   0x1
c00121d2:	53                   	push   ebx
c00121d3:	56                   	push   esi
c00121d4:	e8 c2 f6 ff ff       	call   c001189b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00121d9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121e5:	0f 85 89 00 00 00    	jne    c0012274 <Thr::loadDLL(char const*, bool)+0x220>
c00121eb:	89 f8                	mov    eax,edi
c00121ed:	84 c0                	test   al,al
c00121ef:	74 73                	je     c0012264 <Thr::loadDLL(char const*, bool)+0x210>
c00121f1:	83 ec 0c             	sub    esp,0xc
c00121f4:	68 9d e1 01 c0       	push   0xc001e19d
c00121f9:	e8 69 d3 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00121fe:	83 c4 10             	add    esp,0x10
c0012201:	eb 61                	jmp    c0012264 <Thr::loadDLL(char const*, bool)+0x210>
c0012203:	50                   	push   eax
c0012204:	50                   	push   eax
c0012205:	89 e8                	mov    eax,ebp
c0012207:	c1 e0 0c             	shl    eax,0xc
c001220a:	01 d8                	add    eax,ebx
c001220c:	50                   	push   eax
c001220d:	ff 35 94 f6 01 c0    	push   DWORD PTR ds:0xc001f694
c0012213:	e8 4a 68 ff ff       	call   c0008a62 <VAS::getPageTableEntry(unsigned long)>
c0012218:	83 c4 10             	add    esp,0x10
c001221b:	8b 00                	mov    eax,DWORD PTR [eax]
c001221d:	a8 60                	test   al,0x60
c001221f:	75 11                	jne    c0012232 <Thr::loadDLL(char const*, bool)+0x1de>
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012229:	50                   	push   eax
c001222a:	e8 8d 4d ff ff       	call   c0006fbc <Phys::freePage(unsigned long)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	45                   	inc    ebp
c0012233:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012237:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001223b:	05 ff 0f 00 00       	add    eax,0xfff
c0012240:	bf 00 00 00 00       	mov    edi,0x0
c0012245:	83 d2 00             	adc    edx,0x0
c0012248:	0f ac d0 0c          	shrd   eax,edx,0xc
c001224c:	c1 ea 0c             	shr    edx,0xc
c001224f:	39 c5                	cmp    ebp,eax
c0012251:	89 d1                	mov    ecx,edx
c0012253:	89 f8                	mov    eax,edi
c0012255:	19 c8                	sbb    eax,ecx
c0012257:	72 aa                	jb     c0012203 <Thr::loadDLL(char const*, bool)+0x1af>
c0012259:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001225e:	75 18                	jne    c0012278 <Thr::loadDLL(char const*, bool)+0x224>
c0012260:	31 db                	xor    ebx,ebx
c0012262:	eb 14                	jmp    c0012278 <Thr::loadDLL(char const*, bool)+0x224>
c0012264:	83 ec 0c             	sub    esp,0xc
c0012267:	68 bc e1 01 c0       	push   0xc001e1bc
c001226c:	e8 f6 d2 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0012271:	83 c4 10             	add    esp,0x10
c0012274:	31 ed                	xor    ebp,ebp
c0012276:	eb bb                	jmp    c0012233 <Thr::loadDLL(char const*, bool)+0x1df>
c0012278:	81 c4 2c 01 00 00    	add    esp,0x12c
c001227e:	89 d8                	mov    eax,ebx
c0012280:	5b                   	pop    ebx
c0012281:	5e                   	pop    esi
c0012282:	5f                   	pop    edi
c0012283:	5d                   	pop    ebp
c0012284:	c3                   	ret    

c0012285 <Thr::executeDLL(unsigned long, void*)>:
c0012285:	56                   	push   esi
c0012286:	53                   	push   ebx
c0012287:	52                   	push   edx
c0012288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001228c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012290:	85 db                	test   ebx,ebx
c0012292:	75 10                	jne    c00122a4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012294:	83 ec 0c             	sub    esp,0xc
c0012297:	68 d8 e1 01 c0       	push   0xc001e1d8
c001229c:	e8 c6 d2 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00122a1:	83 c4 10             	add    esp,0x10
c00122a4:	50                   	push   eax
c00122a5:	50                   	push   eax
c00122a6:	53                   	push   ebx
c00122a7:	68 02 e2 01 c0       	push   0xc001e202
c00122ac:	e8 63 77 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00122b1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00122b5:	89 d8                	mov    eax,ebx
c00122b7:	83 c4 14             	add    esp,0x14
c00122ba:	5b                   	pop    ebx
c00122bb:	5e                   	pop    esi
c00122bc:	ff e0                	jmp    eax
c00122be:	66 90                	xchg   ax,ax

c00122c0 <userModeEntryPoint(void*)>:
c00122c0:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00122c5:	48                   	dec    eax
c00122c6:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00122cb:	75 03                	jne    c00122d0 <userModeEntryPoint(void*)+0x10>
c00122cd:	fb                   	sti    
c00122ce:	66 90                	xchg   ax,ax
c00122d0:	fb                   	sti    
c00122d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122d9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00122df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122e3:	e9 77 df fe ff       	jmp    c000025f <goToUsermode>

c00122e8 <changeTSS>:
c00122e8:	83 ec 14             	sub    esp,0x14
c00122eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00122f3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00122f8:	c1 e2 15             	shl    edx,0x15
c00122fb:	29 d0                	sub    eax,edx
c00122fd:	50                   	push   eax
c00122fe:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0012303:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012309:	05 7c 11 00 00       	add    eax,0x117c
c001230e:	50                   	push   eax
c001230f:	e8 cc 5d ff ff       	call   c00080e0 <TSS::setESP(unsigned long)>
c0012314:	83 c4 1c             	add    esp,0x1c
c0012317:	c3                   	ret    

c0012318 <switchToThread(ThreadControlBlock*)>:
c0012318:	57                   	push   edi
c0012319:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c001231e:	56                   	push   esi
c001231f:	85 c0                	test   eax,eax
c0012321:	53                   	push   ebx
c0012322:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012326:	0f 85 90 00 00 00    	jne    c00123bc <switchToThread(ThreadControlBlock*)+0xa4>
c001232c:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001232f:	80 fa ff             	cmp    dl,0xff
c0012332:	0f 84 80 00 00 00    	je     c00123b8 <switchToThread(ThreadControlBlock*)+0xa0>
c0012338:	81 e2 ff 00 00 00    	and    edx,0xff
c001233e:	b8 00 04 00 00       	mov    eax,0x400
c0012343:	29 d0                	sub    eax,edx
c0012345:	d1 f8                	sar    eax,1
c0012347:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001234a:	66 90                	xchg   ax,ax
c001234c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001234f:	e8 57 24 00 00       	call   c00147ab <HalQueryPerformanceCounter()>
c0012354:	a3 c8 2a 02 c0       	mov    ds:0xc0022ac8,eax
c0012359:	89 15 cc 2a 02 c0    	mov    DWORD PTR ds:0xc0022acc,edx
c001235f:	89 c6                	mov    esi,eax
c0012361:	89 d7                	mov    edi,edx
c0012363:	2b 35 b8 2a 02 c0    	sub    esi,DWORD PTR ds:0xc0022ab8
c0012369:	a3 b8 2a 02 c0       	mov    ds:0xc0022ab8,eax
c001236e:	1b 3d bc 2a 02 c0    	sbb    edi,DWORD PTR ds:0xc0022abc
c0012374:	89 35 c0 2a 02 c0    	mov    DWORD PTR ds:0xc0022ac0,esi
c001237a:	89 3d c4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ac4,edi
c0012380:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012386:	89 15 bc 2a 02 c0    	mov    DWORD PTR ds:0xc0022abc,edx
c001238c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001238f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012392:	01 c6                	add    esi,eax
c0012394:	11 d7                	adc    edi,edx
c0012396:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012399:	83 ec 0c             	sub    esp,0xc
c001239c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001239f:	53                   	push   ebx
c00123a0:	e8 f2 de fe ff       	call   c0000297 <switchToThreadASM>
c00123a5:	0f 20 c0             	mov    eax,cr0
c00123a8:	83 c8 08             	or     eax,0x8
c00123ab:	0f 22 c0             	mov    cr0,eax
c00123ae:	83 c4 10             	add    esp,0x10
c00123b1:	5b                   	pop    ebx
c00123b2:	5e                   	pop    esi
c00123b3:	5f                   	pop    edi
c00123b4:	c3                   	ret    
c00123b5:	8d 76 00             	lea    esi,[esi+0x0]
c00123b8:	31 c0                	xor    eax,eax
c00123ba:	eb 90                	jmp    c001234c <switchToThread(ThreadControlBlock*)+0x34>
c00123bc:	5b                   	pop    ebx
c00123bd:	c7 05 80 2a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x1
c00123c7:	5e                   	pop    esi
c00123c8:	5f                   	pop    edi
c00123c9:	c3                   	ret    
c00123ca:	66 90                	xchg   ax,ax

c00123cc <Process::addArgs(char**)>:
c00123cc:	57                   	push   edi
c00123cd:	56                   	push   esi
c00123ce:	53                   	push   ebx
c00123cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00123d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00123d7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00123e1:	85 ff                	test   edi,edi
c00123e3:	74 43                	je     c0012428 <Process::addArgs(char**)+0x5c>
c00123e5:	8b 07                	mov    eax,DWORD PTR [edi]
c00123e7:	85 c0                	test   eax,eax
c00123e9:	74 3d                	je     c0012428 <Process::addArgs(char**)+0x5c>
c00123eb:	31 db                	xor    ebx,ebx
c00123ed:	8d 76 00             	lea    esi,[esi+0x0]
c00123f0:	83 ec 0c             	sub    esp,0xc
c00123f3:	50                   	push   eax
c00123f4:	e8 67 e1 fe ff       	call   c0000560 <strlen>
c00123f9:	40                   	inc    eax
c00123fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00123fd:	e8 4f 48 ff ff       	call   c0006c51 <malloc>
c0012402:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012409:	5a                   	pop    edx
c001240a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001240d:	59                   	pop    ecx
c001240e:	43                   	inc    ebx
c001240f:	52                   	push   edx
c0012410:	50                   	push   eax
c0012411:	e8 0a e2 fe ff       	call   c0000620 <strcpy>
c0012416:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001241c:	83 c4 10             	add    esp,0x10
c001241f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012422:	85 c0                	test   eax,eax
c0012424:	75 ca                	jne    c00123f0 <Process::addArgs(char**)+0x24>
c0012426:	66 90                	xchg   ax,ax
c0012428:	5b                   	pop    ebx
c0012429:	5e                   	pop    esi
c001242a:	5f                   	pop    edi
c001242b:	c3                   	ret    

c001242c <Process::Process(char const*, Process*, char**)>:
c001242c:	56                   	push   esi
c001242d:	53                   	push   ebx
c001242e:	83 ec 14             	sub    esp,0x14
c0012431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012435:	05 0c 02 00 00       	add    eax,0x20c
c001243a:	bb 07 00 00 00       	mov    ebx,0x7
c001243f:	89 c6                	mov    esi,eax
c0012441:	8d 76 00             	lea    esi,[esi+0x0]
c0012444:	85 db                	test   ebx,ebx
c0012446:	78 14                	js     c001245c <Process::Process(char const*, Process*, char**)+0x30>
c0012448:	83 ec 0c             	sub    esp,0xc
c001244b:	56                   	push   esi
c001244c:	e8 5b 9c 00 00       	call   c001c0ac <ThreadControlBlock::ThreadControlBlock()>
c0012451:	83 c4 10             	add    esp,0x10
c0012454:	83 c6 5f             	add    esi,0x5f
c0012457:	4b                   	dec    ebx
c0012458:	eb ea                	jmp    c0012444 <Process::Process(char const*, Process*, char**)+0x18>
c001245a:	66 90                	xchg   ax,ax
c001245c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012460:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012467:	83 ec 0c             	sub    esp,0xc
c001246a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001246e:	e8 7d cf ff ff       	call   c000f3f0 <Krnl::newProcessEnv(Process*)>
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	89 c2                	mov    edx,eax
c0012478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001247c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012486:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001248f:	a1 d0 ef 01 c0       	mov    eax,ds:0xc001efd0
c0012494:	8d 50 01             	lea    edx,[eax+0x1]
c0012497:	89 15 d0 ef 01 c0    	mov    DWORD PTR ds:0xc001efd0,edx
c001249d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00124a1:	89 02                	mov    DWORD PTR [edx],eax
c00124a3:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00124ab:	83 ec 0c             	sub    esp,0xc
c00124ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124b2:	e8 9a 47 ff ff       	call   c0006c51 <malloc>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	89 c3                	mov    ebx,eax
c00124bc:	83 ec 08             	sub    esp,0x8
c00124bf:	6a 00                	push   0x0
c00124c1:	53                   	push   ebx
c00124c2:	e8 cd 6d ff ff       	call   c0009294 <VAS::VAS(bool)>
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124ce:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00124d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124d8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00124e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124ea:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00124f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124f4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00124fa:	85 c0                	test   eax,eax
c00124fc:	74 42                	je     c0012540 <Process::Process(char const*, Process*, char**)+0x114>
c00124fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012502:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012508:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001250e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012512:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001251c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012522:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001252c:	05 0c 01 00 00       	add    eax,0x10c
c0012531:	83 ec 08             	sub    esp,0x8
c0012534:	52                   	push   edx
c0012535:	50                   	push   eax
c0012536:	e8 e5 e0 fe ff       	call   c0000620 <strcpy>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	eb 64                	jmp    c00125a4 <Process::Process(char const*, Process*, char**)+0x178>
c0012540:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012548:	83 ec 0c             	sub    esp,0xc
c001254b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001254f:	e8 fd 46 ff ff       	call   c0006c51 <malloc>
c0012554:	83 c4 10             	add    esp,0x10
c0012557:	89 c3                	mov    ebx,eax
c0012559:	83 ec 08             	sub    esp,0x8
c001255c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012560:	53                   	push   ebx
c0012561:	e8 1e 59 ff ff       	call   c0007e84 <VgaText::VgaText(char const*)>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001256d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012577:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001257d:	83 ec 0c             	sub    esp,0xc
c0012580:	50                   	push   eax
c0012581:	e8 9e 51 ff ff       	call   c0007724 <addToTerminalCycle(VgaText*)>
c0012586:	83 c4 10             	add    esp,0x10
c0012589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001258d:	05 0c 01 00 00       	add    eax,0x10c
c0012592:	83 ec 08             	sub    esp,0x8
c0012595:	68 21 e2 01 c0       	push   0xc001e221
c001259a:	50                   	push   eax
c001259b:	e8 80 e0 fe ff       	call   c0000620 <strcpy>
c00125a0:	83 c4 10             	add    esp,0x10
c00125a3:	90                   	nop
c00125a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125a8:	83 c0 0c             	add    eax,0xc
c00125ab:	83 ec 08             	sub    esp,0x8
c00125ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125b2:	50                   	push   eax
c00125b3:	e8 68 e0 fe ff       	call   c0000620 <strcpy>
c00125b8:	83 c4 10             	add    esp,0x10
c00125bb:	83 ec 08             	sub    esp,0x8
c00125be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00125c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125c6:	e8 01 fe ff ff       	call   c00123cc <Process::addArgs(char**)>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	83 ec 08             	sub    esp,0x8
c00125d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125d9:	e8 87 ed ff ff       	call   c0011365 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00125de:	83 c4 10             	add    esp,0x10
c00125e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00125e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125e9:	83 f0 01             	xor    eax,0x1
c00125ec:	88 c2                	mov    dl,al
c00125ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125f2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00125f8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125fc:	25 ff 00 00 00       	and    eax,0xff
c0012601:	83 ec 08             	sub    esp,0x8
c0012604:	50                   	push   eax
c0012605:	68 78 e2 01 c0       	push   0xc001e278
c001260a:	e8 05 74 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001260f:	83 c4 10             	add    esp,0x10
c0012612:	90                   	nop
c0012613:	83 c4 14             	add    esp,0x14
c0012616:	5b                   	pop    ebx
c0012617:	5e                   	pop    esi
c0012618:	c3                   	ret    
c0012619:	90                   	nop
c001261a:	66 90                	xchg   ax,ax

c001261c <Process::Process(bool, char const*, Process*, char**)>:
c001261c:	56                   	push   esi
c001261d:	53                   	push   ebx
c001261e:	83 ec 24             	sub    esp,0x24
c0012621:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012625:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001262d:	05 0c 02 00 00       	add    eax,0x20c
c0012632:	bb 07 00 00 00       	mov    ebx,0x7
c0012637:	89 c6                	mov    esi,eax
c0012639:	8d 76 00             	lea    esi,[esi+0x0]
c001263c:	85 db                	test   ebx,ebx
c001263e:	78 14                	js     c0012654 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012640:	83 ec 0c             	sub    esp,0xc
c0012643:	56                   	push   esi
c0012644:	e8 63 9a 00 00       	call   c001c0ac <ThreadControlBlock::ThreadControlBlock()>
c0012649:	83 c4 10             	add    esp,0x10
c001264c:	83 c6 5f             	add    esi,0x5f
c001264f:	4b                   	dec    ebx
c0012650:	eb ea                	jmp    c001263c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012652:	66 90                	xchg   ax,ax
c0012654:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012658:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001265f:	83 ec 0c             	sub    esp,0xc
c0012662:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012666:	e8 85 cd ff ff       	call   c000f3f0 <Krnl::newProcessEnv(Process*)>
c001266b:	83 c4 10             	add    esp,0x10
c001266e:	89 c2                	mov    edx,eax
c0012670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012674:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001267a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001267e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012687:	a1 d0 ef 01 c0       	mov    eax,ds:0xc001efd0
c001268c:	8d 50 01             	lea    edx,[eax+0x1]
c001268f:	89 15 d0 ef 01 c0    	mov    DWORD PTR ds:0xc001efd0,edx
c0012695:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012699:	89 02                	mov    DWORD PTR [edx],eax
c001269b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00126a3:	83 ec 0c             	sub    esp,0xc
c00126a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00126aa:	e8 a2 45 ff ff       	call   c0006c51 <malloc>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	89 c3                	mov    ebx,eax
c00126b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00126b8:	25 ff 00 00 00       	and    eax,0xff
c00126bd:	83 ec 08             	sub    esp,0x8
c00126c0:	50                   	push   eax
c00126c1:	53                   	push   ebx
c00126c2:	e8 cd 6b ff ff       	call   c0009294 <VAS::VAS(bool)>
c00126c7:	83 c4 10             	add    esp,0x10
c00126ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ce:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00126d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00126e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00126ea:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00126f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00126fa:	85 c0                	test   eax,eax
c00126fc:	74 42                	je     c0012740 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00126fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012702:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012708:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001270e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012712:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001271c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012722:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012728:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272c:	05 0c 01 00 00       	add    eax,0x10c
c0012731:	83 ec 08             	sub    esp,0x8
c0012734:	52                   	push   edx
c0012735:	50                   	push   eax
c0012736:	e8 e5 de fe ff       	call   c0000620 <strcpy>
c001273b:	83 c4 10             	add    esp,0x10
c001273e:	eb 64                	jmp    c00127a4 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0012740:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012748:	83 ec 0c             	sub    esp,0xc
c001274b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001274f:	e8 fd 44 ff ff       	call   c0006c51 <malloc>
c0012754:	83 c4 10             	add    esp,0x10
c0012757:	89 c3                	mov    ebx,eax
c0012759:	83 ec 08             	sub    esp,0x8
c001275c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012760:	53                   	push   ebx
c0012761:	e8 1e 57 ff ff       	call   c0007e84 <VgaText::VgaText(char const*)>
c0012766:	83 c4 10             	add    esp,0x10
c0012769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001276d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001277d:	83 ec 0c             	sub    esp,0xc
c0012780:	50                   	push   eax
c0012781:	e8 9e 4f ff ff       	call   c0007724 <addToTerminalCycle(VgaText*)>
c0012786:	83 c4 10             	add    esp,0x10
c0012789:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278d:	05 0c 01 00 00       	add    eax,0x10c
c0012792:	83 ec 08             	sub    esp,0x8
c0012795:	68 21 e2 01 c0       	push   0xc001e221
c001279a:	50                   	push   eax
c001279b:	e8 80 de fe ff       	call   c0000620 <strcpy>
c00127a0:	83 c4 10             	add    esp,0x10
c00127a3:	90                   	nop
c00127a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a8:	83 c0 0c             	add    eax,0xc
c00127ab:	83 ec 08             	sub    esp,0x8
c00127ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127b2:	50                   	push   eax
c00127b3:	e8 68 de fe ff       	call   c0000620 <strcpy>
c00127b8:	83 c4 10             	add    esp,0x10
c00127bb:	83 ec 08             	sub    esp,0x8
c00127be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00127c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127c6:	e8 01 fc ff ff       	call   c00123cc <Process::addArgs(char**)>
c00127cb:	83 c4 10             	add    esp,0x10
c00127ce:	90                   	nop
c00127cf:	83 c4 24             	add    esp,0x24
c00127d2:	5b                   	pop    ebx
c00127d3:	5e                   	pop    esi
c00127d4:	c3                   	ret    
c00127d5:	8d 76 00             	lea    esi,[esi+0x0]

c00127d8 <taskStartupFunction>:
c00127d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127dd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00127e0:	c3                   	ret    
c00127e1:	90                   	nop
c00127e2:	66 90                	xchg   ax,ax

c00127e4 <Semaphore::Semaphore(int)>:
c00127e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127ec:	89 10                	mov    DWORD PTR [eax],edx
c00127ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00127f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012808:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001280f:	90                   	nop
c0012810:	c3                   	ret    
c0012811:	90                   	nop
c0012812:	66 90                	xchg   ax,ax

c0012814 <Mutex::Mutex()>:
c0012814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012818:	6a 01                	push   0x1
c001281a:	50                   	push   eax
c001281b:	e8 c4 ff ff ff       	call   c00127e4 <Semaphore::Semaphore(int)>
c0012820:	83 c4 08             	add    esp,0x8
c0012823:	90                   	nop
c0012824:	c3                   	ret    
c0012825:	90                   	nop
c0012826:	66 90                	xchg   ax,ax

c0012828 <Process::createThread(void (*)(void*), void*, int)>:
c0012828:	57                   	push   edi
c0012829:	31 c9                	xor    ecx,ecx
c001282b:	56                   	push   esi
c001282c:	53                   	push   ebx
c001282d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012831:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0012838:	89 f2                	mov    edx,esi
c001283a:	66 90                	xchg   ax,ax
c001283c:	31 c0                	xor    eax,eax
c001283e:	66 89 d0             	mov    ax,dx
c0012841:	83 e2 01             	and    edx,0x1
c0012844:	74 12                	je     c0012858 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0012846:	d1 f8                	sar    eax,1
c0012848:	41                   	inc    ecx
c0012849:	89 c2                	mov    edx,eax
c001284b:	83 f9 10             	cmp    ecx,0x10
c001284e:	75 ec                	jne    c001283c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0012850:	31 db                	xor    ebx,ebx
c0012852:	89 d8                	mov    eax,ebx
c0012854:	5b                   	pop    ebx
c0012855:	5e                   	pop    esi
c0012856:	5f                   	pop    edi
c0012857:	c3                   	ret    
c0012858:	b8 01 00 00 00       	mov    eax,0x1
c001285d:	d3 e0                	shl    eax,cl
c001285f:	09 c6                	or     esi,eax
c0012861:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012864:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001286b:	01 c0                	add    eax,eax
c001286d:	01 c8                	add    eax,ecx
c001286f:	8d 04 80             	lea    eax,[eax+eax*4]
c0012872:	01 d8                	add    eax,ebx
c0012874:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001287b:	75 0b                	jne    c0012888 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001287d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0012887:	90                   	nop
c0012888:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001288e:	83 ec 08             	sub    esp,0x8
c0012891:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012894:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012897:	01 c0                	add    eax,eax
c0012899:	01 c8                	add    eax,ecx
c001289b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001289e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00128a1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00128a7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00128ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00128b1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00128b7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00128bd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00128c4:	89 ca                	mov    edx,ecx
c00128c6:	f7 da                	neg    edx
c00128c8:	c1 e2 15             	shl    edx,0x15
c00128cb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00128d1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00128d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00128db:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00128e5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00128eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128ef:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00128f5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00128ff:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0012909:	53                   	push   ebx
c001290a:	68 a4 2a 02 c0       	push   0xc0022aa4
c001290f:	e8 38 95 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012914:	83 c4 10             	add    esp,0x10
c0012917:	89 d8                	mov    eax,ebx
c0012919:	5b                   	pop    ebx
c001291a:	5e                   	pop    esi
c001291b:	5f                   	pop    edi
c001291c:	c3                   	ret    
c001291d:	90                   	nop
c001291e:	66 90                	xchg   ax,ax

c0012920 <Process::createUserThread()>:
c0012920:	83 ec 0c             	sub    esp,0xc
c0012923:	68 80 00 00 00       	push   0x80
c0012928:	6a 00                	push   0x0
c001292a:	68 c0 22 01 c0       	push   0xc00122c0
c001292f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012933:	50                   	push   eax
c0012934:	e8 ef fe ff ff       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c0012939:	83 c4 1c             	add    esp,0x1c
c001293c:	c3                   	ret    
c001293d:	8d 76 00             	lea    esi,[esi+0x0]

c0012940 <setupMultitasking(void (*)())>:
c0012940:	56                   	push   esi
c0012941:	53                   	push   ebx
c0012942:	53                   	push   ebx
c0012943:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012947:	eb 13                	jmp    c001295c <setupMultitasking(void (*)())+0x1c>
c0012949:	8d 76 00             	lea    esi,[esi+0x0]
c001294c:	83 ec 0c             	sub    esp,0xc
c001294f:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012954:	e8 3b 94 00 00       	call   c001bd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012964:	e8 07 94 00 00       	call   c001bd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	84 c0                	test   al,al
c001296e:	74 dc                	je     c001294c <setupMultitasking(void (*)())+0xc>
c0012970:	83 ec 0c             	sub    esp,0xc
c0012973:	68 1f 07 00 00       	push   0x71f
c0012978:	e8 d4 42 ff ff       	call   c0006c51 <malloc>
c001297d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0012984:	89 c3                	mov    ebx,eax
c0012986:	6a 00                	push   0x0
c0012988:	68 25 e2 01 c0       	push   0xc001e225
c001298d:	6a 01                	push   0x1
c001298f:	50                   	push   eax
c0012990:	e8 87 fc ff ff       	call   c001261c <Process::Process(bool, char const*, Process*, char**)>
c0012995:	83 c4 14             	add    esp,0x14
c0012998:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001299e:	89 1d b0 2a 02 c0    	mov    DWORD PTR ds:0xc0022ab0,ebx
c00129a4:	50                   	push   eax
c00129a5:	e8 d7 4f ff ff       	call   c0007981 <setActiveTerminal(VgaText*)>
c00129aa:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00129b2:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00129bc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00129c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00129c5:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00129cf:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00129d5:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00129db:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00129e5:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00129ef:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00129f9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00129ff:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0012a05:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0012a0f:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0012a15:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0012a1f:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0012a25:	5a                   	pop    edx
c0012a26:	59                   	pop    ecx
c0012a27:	68 21 e2 01 c0       	push   0xc001e221
c0012a2c:	50                   	push   eax
c0012a2d:	e8 ee db fe ff       	call   c0000620 <strcpy>
c0012a32:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0012a39:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012a3d:	83 c4 14             	add    esp,0x14
c0012a40:	5b                   	pop    ebx
c0012a41:	5e                   	pop    esi
c0012a42:	e9 42 d8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0012a47:	90                   	nop

c0012a48 <schedule()>:
c0012a48:	8b 15 84 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a84
c0012a4e:	85 d2                	test   edx,edx
c0012a50:	74 0e                	je     c0012a60 <schedule()+0x18>
c0012a52:	c7 05 80 2a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x1
c0012a5c:	c3                   	ret    
c0012a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a60:	53                   	push   ebx
c0012a61:	83 ec 14             	sub    esp,0x14
c0012a64:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012a69:	e8 02 93 00 00       	call   c001bd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	84 c0                	test   al,al
c0012a73:	75 3b                	jne    c0012ab0 <schedule()+0x68>
c0012a75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a7a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0012a7d:	4a                   	dec    edx
c0012a7e:	74 38                	je     c0012ab8 <schedule()+0x70>
c0012a80:	83 ec 0c             	sub    esp,0xc
c0012a83:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012a88:	e8 ff 92 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012a8d:	c7 04 24 a4 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aa4
c0012a94:	89 c3                	mov    ebx,eax
c0012a96:	e8 f9 92 00 00       	call   c001bd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012a9b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0012aa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012aa5:	e8 6e f8 ff ff       	call   c0012318 <switchToThread(ThreadControlBlock*)>
c0012aaa:	83 c4 10             	add    esp,0x10
c0012aad:	8d 76 00             	lea    esi,[esi+0x0]
c0012ab0:	83 c4 08             	add    esp,0x8
c0012ab3:	5b                   	pop    ebx
c0012ab4:	c3                   	ret    
c0012ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ab8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012abf:	83 ec 08             	sub    esp,0x8
c0012ac2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ac7:	50                   	push   eax
c0012ac8:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012acd:	e8 7a 93 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012ad2:	83 c4 10             	add    esp,0x10
c0012ad5:	eb a9                	jmp    c0012a80 <schedule()+0x38>
c0012ad7:	90                   	nop

c0012ad8 <Semaphore::tryAcquire()>:
c0012ad8:	53                   	push   ebx
c0012ad9:	83 ec 08             	sub    esp,0x8
c0012adc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ae0:	fa                   	cli    
c0012ae1:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012ae6:	8d 50 01             	lea    edx,[eax+0x1]
c0012ae9:	89 15 88 2a 02 c0    	mov    DWORD PTR ds:0xc0022a88,edx
c0012aef:	8b 15 84 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a84
c0012af5:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012af8:	89 1d 84 2a 02 c0    	mov    DWORD PTR ds:0xc0022a84,ebx
c0012afe:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0012b01:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0012b03:	7c 33                	jl     c0012b38 <Semaphore::tryAcquire()+0x60>
c0012b05:	89 15 84 2a 02 c0    	mov    DWORD PTR ds:0xc0022a84,edx
c0012b0b:	85 d2                	test   edx,edx
c0012b0d:	75 0d                	jne    c0012b1c <Semaphore::tryAcquire()+0x44>
c0012b0f:	8b 15 80 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a80
c0012b15:	85 d2                	test   edx,edx
c0012b17:	75 6b                	jne    c0012b84 <Semaphore::tryAcquire()+0xac>
c0012b19:	8d 76 00             	lea    esi,[esi+0x0]
c0012b1c:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012b21:	85 c0                	test   eax,eax
c0012b23:	74 0b                	je     c0012b30 <Semaphore::tryAcquire()+0x58>
c0012b25:	8d 76 00             	lea    esi,[esi+0x0]
c0012b28:	31 c0                	xor    eax,eax
c0012b2a:	83 c4 08             	add    esp,0x8
c0012b2d:	5b                   	pop    ebx
c0012b2e:	c3                   	ret    
c0012b2f:	90                   	nop
c0012b30:	fb                   	sti    
c0012b31:	83 c4 08             	add    esp,0x8
c0012b34:	5b                   	pop    ebx
c0012b35:	c3                   	ret    
c0012b36:	66 90                	xchg   ax,ax
c0012b38:	43                   	inc    ebx
c0012b39:	89 15 84 2a 02 c0    	mov    DWORD PTR ds:0xc0022a84,edx
c0012b3f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0012b42:	85 d2                	test   edx,edx
c0012b44:	75 22                	jne    c0012b68 <Semaphore::tryAcquire()+0x90>
c0012b46:	8b 0d 80 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a80
c0012b4c:	85 c9                	test   ecx,ecx
c0012b4e:	74 18                	je     c0012b68 <Semaphore::tryAcquire()+0x90>
c0012b50:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c0012b5a:	e8 e9 fe ff ff       	call   c0012a48 <schedule()>
c0012b5f:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012b64:	48                   	dec    eax
c0012b65:	8d 76 00             	lea    esi,[esi+0x0]
c0012b68:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012b6d:	85 c0                	test   eax,eax
c0012b6f:	75 0b                	jne    c0012b7c <Semaphore::tryAcquire()+0xa4>
c0012b71:	fb                   	sti    
c0012b72:	b0 01                	mov    al,0x1
c0012b74:	83 c4 08             	add    esp,0x8
c0012b77:	5b                   	pop    ebx
c0012b78:	c3                   	ret    
c0012b79:	8d 76 00             	lea    esi,[esi+0x0]
c0012b7c:	b0 01                	mov    al,0x1
c0012b7e:	83 c4 08             	add    esp,0x8
c0012b81:	5b                   	pop    ebx
c0012b82:	c3                   	ret    
c0012b83:	90                   	nop
c0012b84:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c0012b8e:	e8 b5 fe ff ff       	call   c0012a48 <schedule()>
c0012b93:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012b98:	48                   	dec    eax
c0012b99:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012b9e:	85 c0                	test   eax,eax
c0012ba0:	75 86                	jne    c0012b28 <Semaphore::tryAcquire()+0x50>
c0012ba2:	eb 8c                	jmp    c0012b30 <Semaphore::tryAcquire()+0x58>

c0012ba4 <Semaphore::assertLocked(char const*)>:
c0012ba4:	83 ec 0c             	sub    esp,0xc
c0012ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bab:	fa                   	cli    
c0012bac:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0012bb2:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0012bb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0012bba:	89 0d 84 2a 02 c0    	mov    DWORD PTR ds:0xc0022a84,ecx
c0012bc0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012bc2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012bc5:	7c 29                	jl     c0012bf0 <Semaphore::assertLocked(char const*)+0x4c>
c0012bc7:	90                   	nop
c0012bc8:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c0012bcd:	85 c0                	test   eax,eax
c0012bcf:	75 0b                	jne    c0012bdc <Semaphore::assertLocked(char const*)+0x38>
c0012bd1:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c0012bd6:	85 c0                	test   eax,eax
c0012bd8:	75 2e                	jne    c0012c08 <Semaphore::assertLocked(char const*)+0x64>
c0012bda:	66 90                	xchg   ax,ax
c0012bdc:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012be1:	48                   	dec    eax
c0012be2:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012be7:	75 03                	jne    c0012bec <Semaphore::assertLocked(char const*)+0x48>
c0012be9:	fb                   	sti    
c0012bea:	66 90                	xchg   ax,ax
c0012bec:	83 c4 0c             	add    esp,0xc
c0012bef:	c3                   	ret    
c0012bf0:	83 ec 0c             	sub    esp,0xc
c0012bf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012bf7:	52                   	push   edx
c0012bf8:	e8 6a c9 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0012bfd:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0012c02:	83 c4 10             	add    esp,0x10
c0012c05:	48                   	dec    eax
c0012c06:	eb c0                	jmp    c0012bc8 <Semaphore::assertLocked(char const*)+0x24>
c0012c08:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c0012c12:	e8 31 fe ff ff       	call   c0012a48 <schedule()>
c0012c17:	eb c3                	jmp    c0012bdc <Semaphore::assertLocked(char const*)+0x38>
c0012c19:	8d 76 00             	lea    esi,[esi+0x0]

c0012c1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012c1c:	83 ec 0c             	sub    esp,0xc
c0012c1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c28:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012c2b:	e8 18 fe ff ff       	call   c0012a48 <schedule()>
c0012c30:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012c35:	48                   	dec    eax
c0012c36:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012c3b:	75 03                	jne    c0012c40 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012c3d:	fb                   	sti    
c0012c3e:	66 90                	xchg   ax,ax
c0012c40:	83 c4 0c             	add    esp,0xc
c0012c43:	c3                   	ret    

c0012c44 <blockTask(TaskState)>:
c0012c44:	83 ec 0c             	sub    esp,0xc
c0012c47:	fa                   	cli    
c0012c48:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0012c4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c57:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012c5a:	e8 e9 fd ff ff       	call   c0012a48 <schedule()>
c0012c5f:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012c64:	48                   	dec    eax
c0012c65:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012c6a:	75 04                	jne    c0012c70 <blockTask(TaskState)+0x2c>
c0012c6c:	fb                   	sti    
c0012c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c70:	83 c4 0c             	add    esp,0xc
c0012c73:	c3                   	ret    

c0012c74 <waitTask(int, int*, int)>:
c0012c74:	83 ec 18             	sub    esp,0x18
c0012c77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c80:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012c83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012c87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c8c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012c8f:	6a 07                	push   0x7
c0012c91:	e8 ae ff ff ff       	call   c0012c44 <blockTask(TaskState)>
c0012c96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012ca1:	85 d2                	test   edx,edx
c0012ca3:	74 0b                	je     c0012cb0 <waitTask(int, int*, int)+0x3c>
c0012ca5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012ca8:	89 02                	mov    DWORD PTR [edx],eax
c0012caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012caf:	90                   	nop
c0012cb0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012cb3:	83 c4 0c             	add    esp,0xc
c0012cb6:	c3                   	ret    
c0012cb7:	90                   	nop

c0012cb8 <milliTenthSleepUntil(unsigned int)>:
c0012cb8:	83 ec 0c             	sub    esp,0xc
c0012cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cbf:	39 05 8c 1b 02 c0    	cmp    DWORD PTR ds:0xc0021b8c,eax
c0012cc5:	76 05                	jbe    c0012ccc <milliTenthSleepUntil(unsigned int)+0x14>
c0012cc7:	90                   	nop
c0012cc8:	83 c4 0c             	add    esp,0xc
c0012ccb:	c3                   	ret    
c0012ccc:	fa                   	cli    
c0012ccd:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0012cd3:	83 ec 08             	sub    esp,0x8
c0012cd6:	ff 05 84 2a 02 c0    	inc    DWORD PTR ds:0xc0022a84
c0012cdc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012ce2:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012ce5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012ceb:	52                   	push   edx
c0012cec:	68 98 2a 02 c0       	push   0xc0022a98
c0012cf1:	e8 56 91 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012cf6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012cfd:	e8 42 ff ff ff       	call   c0012c44 <blockTask(TaskState)>
c0012d02:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	48                   	dec    eax
c0012d0b:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c0012d10:	85 c0                	test   eax,eax
c0012d12:	75 0c                	jne    c0012d20 <milliTenthSleepUntil(unsigned int)+0x68>
c0012d14:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c0012d19:	85 c0                	test   eax,eax
c0012d1b:	75 17                	jne    c0012d34 <milliTenthSleepUntil(unsigned int)+0x7c>
c0012d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d20:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012d25:	48                   	dec    eax
c0012d26:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012d2b:	75 9b                	jne    c0012cc8 <milliTenthSleepUntil(unsigned int)+0x10>
c0012d2d:	fb                   	sti    
c0012d2e:	83 c4 0c             	add    esp,0xc
c0012d31:	c3                   	ret    
c0012d32:	66 90                	xchg   ax,ax
c0012d34:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c0012d3e:	e8 05 fd ff ff       	call   c0012a48 <schedule()>
c0012d43:	eb db                	jmp    c0012d20 <milliTenthSleepUntil(unsigned int)+0x68>
c0012d45:	8d 76 00             	lea    esi,[esi+0x0]

c0012d48 <milliTenthSleep(unsigned int)>:
c0012d48:	a1 8c 1b 02 c0       	mov    eax,ds:0xc0021b8c
c0012d4d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012d51:	e9 62 ff ff ff       	jmp    c0012cb8 <milliTenthSleepUntil(unsigned int)>
c0012d56:	66 90                	xchg   ax,ax

c0012d58 <sleep(unsigned int)>:
c0012d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d5c:	8d 04 80             	lea    eax,[eax+eax*4]
c0012d5f:	8d 04 80             	lea    eax,[eax+eax*4]
c0012d62:	8d 04 80             	lea    eax,[eax+eax*4]
c0012d65:	8d 04 80             	lea    eax,[eax+eax*4]
c0012d68:	c1 e0 04             	shl    eax,0x4
c0012d6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d6f:	eb d7                	jmp    c0012d48 <milliTenthSleep(unsigned int)>
c0012d71:	90                   	nop
c0012d72:	66 90                	xchg   ax,ax

c0012d74 <Semaphore::acquire()>:
c0012d74:	83 ec 0c             	sub    esp,0xc
c0012d77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d7b:	fa                   	cli    
c0012d7c:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0012d81:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0012d87:	8d 48 01             	lea    ecx,[eax+0x1]
c0012d8a:	89 0d 84 2a 02 c0    	mov    DWORD PTR ds:0xc0022a84,ecx
c0012d90:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012d93:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012d95:	7d 2d                	jge    c0012dc4 <Semaphore::acquire()+0x50>
c0012d97:	41                   	inc    ecx
c0012d98:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012d9b:	90                   	nop
c0012d9c:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c0012da1:	85 c0                	test   eax,eax
c0012da3:	75 0b                	jne    c0012db0 <Semaphore::acquire()+0x3c>
c0012da5:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c0012daa:	85 c0                	test   eax,eax
c0012dac:	75 62                	jne    c0012e10 <Semaphore::acquire()+0x9c>
c0012dae:	66 90                	xchg   ax,ax
c0012db0:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012db5:	48                   	dec    eax
c0012db6:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012dbb:	75 03                	jne    c0012dc0 <Semaphore::acquire()+0x4c>
c0012dbd:	fb                   	sti    
c0012dbe:	66 90                	xchg   ax,ax
c0012dc0:	83 c4 0c             	add    esp,0xc
c0012dc3:	c3                   	ret    
c0012dc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dc9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012dd0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012dd3:	85 c9                	test   ecx,ecx
c0012dd5:	74 4d                	je     c0012e24 <Semaphore::acquire()+0xb0>
c0012dd7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012dda:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012de0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012de3:	90                   	nop
c0012de4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012def:	68 a0 e2 01 c0       	push   0xc001e2a0
c0012df4:	e8 1b 6c ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0012df9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012e00:	e8 3f fe ff ff       	call   c0012c44 <blockTask(TaskState)>
c0012e05:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	48                   	dec    eax
c0012e0e:	eb 8c                	jmp    c0012d9c <Semaphore::acquire()+0x28>
c0012e10:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c0012e1a:	e8 29 fc ff ff       	call   c0012a48 <schedule()>
c0012e1f:	eb 8f                	jmp    c0012db0 <Semaphore::acquire()+0x3c>
c0012e21:	8d 76 00             	lea    esi,[esi+0x0]
c0012e24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e29:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012e2c:	eb b6                	jmp    c0012de4 <Semaphore::acquire()+0x70>
c0012e2e:	66 90                	xchg   ax,ax

c0012e30 <taskReturned>:
c0012e30:	83 ec 18             	sub    esp,0x18
c0012e33:	68 c0 e2 01 c0       	push   0xc001e2c0
c0012e38:	e8 2a c7 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0012e3d:	83 c4 10             	add    esp,0x10
c0012e40:	83 ec 0c             	sub    esp,0xc
c0012e43:	6a 02                	push   0x2
c0012e45:	e8 fa fd ff ff       	call   c0012c44 <blockTask(TaskState)>
c0012e4a:	fa                   	cli    
c0012e4b:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0012e51:	e8 f2 fb ff ff       	call   c0012a48 <schedule()>
c0012e56:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012e5b:	83 c4 10             	add    esp,0x10
c0012e5e:	48                   	dec    eax
c0012e5f:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012e64:	85 c0                	test   eax,eax
c0012e66:	75 d8                	jne    c0012e40 <taskReturned+0x10>
c0012e68:	fb                   	sti    
c0012e69:	eb d5                	jmp    c0012e40 <taskReturned+0x10>
c0012e6b:	90                   	nop

c0012e6c <Thr::processFromPID(int)>:
c0012e6c:	57                   	push   edi
c0012e6d:	56                   	push   esi
c0012e6e:	53                   	push   ebx
c0012e6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e73:	fa                   	cli    
c0012e74:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0012e7a:	83 ec 0c             	sub    esp,0xc
c0012e7d:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012e82:	e8 05 8f 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e87:	83 c4 10             	add    esp,0x10
c0012e8a:	89 c7                	mov    edi,eax
c0012e8c:	eb 16                	jmp    c0012ea4 <Thr::processFromPID(int)+0x38>
c0012e8e:	66 90                	xchg   ax,ax
c0012e90:	83 ec 0c             	sub    esp,0xc
c0012e93:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012e98:	e8 ef 8e 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e9d:	83 c4 10             	add    esp,0x10
c0012ea0:	39 f8                	cmp    eax,edi
c0012ea2:	74 4c                	je     c0012ef0 <Thr::processFromPID(int)+0x84>
c0012ea4:	83 ec 0c             	sub    esp,0xc
c0012ea7:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012eac:	e8 db 8e 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012eb1:	c7 04 24 a4 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aa4
c0012eb8:	89 c3                	mov    ebx,eax
c0012eba:	e8 d5 8e 00 00       	call   c001bd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012ebf:	58                   	pop    eax
c0012ec0:	5a                   	pop    edx
c0012ec1:	53                   	push   ebx
c0012ec2:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012ec7:	e8 80 8f 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012ecc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012ecf:	83 c4 10             	add    esp,0x10
c0012ed2:	39 30                	cmp    DWORD PTR [eax],esi
c0012ed4:	75 ba                	jne    c0012e90 <Thr::processFromPID(int)+0x24>
c0012ed6:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012edb:	48                   	dec    eax
c0012edc:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012ee1:	74 09                	je     c0012eec <Thr::processFromPID(int)+0x80>
c0012ee3:	90                   	nop
c0012ee4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012ee7:	5b                   	pop    ebx
c0012ee8:	5e                   	pop    esi
c0012ee9:	5f                   	pop    edi
c0012eea:	c3                   	ret    
c0012eeb:	90                   	nop
c0012eec:	fb                   	sti    
c0012eed:	eb f5                	jmp    c0012ee4 <Thr::processFromPID(int)+0x78>
c0012eef:	90                   	nop
c0012ef0:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012ef5:	48                   	dec    eax
c0012ef6:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012efb:	75 07                	jne    c0012f04 <Thr::processFromPID(int)+0x98>
c0012efd:	fb                   	sti    
c0012efe:	5b                   	pop    ebx
c0012eff:	5e                   	pop    esi
c0012f00:	5f                   	pop    edi
c0012f01:	c3                   	ret    
c0012f02:	66 90                	xchg   ax,ax
c0012f04:	5b                   	pop    ebx
c0012f05:	31 c0                	xor    eax,eax
c0012f07:	5e                   	pop    esi
c0012f08:	5f                   	pop    edi
c0012f09:	c3                   	ret    
c0012f0a:	66 90                	xchg   ax,ax

c0012f0c <unblockTask(ThreadControlBlock*)>:
c0012f0c:	53                   	push   ebx
c0012f0d:	83 ec 08             	sub    esp,0x8
c0012f10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f14:	fa                   	cli    
c0012f15:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0012f1b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012f1e:	85 c0                	test   eax,eax
c0012f20:	74 66                	je     c0012f88 <unblockTask(ThreadControlBlock*)+0x7c>
c0012f22:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012f25:	48                   	dec    eax
c0012f26:	74 38                	je     c0012f60 <unblockTask(ThreadControlBlock*)+0x54>
c0012f28:	83 ec 0c             	sub    esp,0xc
c0012f2b:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012f30:	e8 57 8e 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f35:	83 c4 10             	add    esp,0x10
c0012f38:	85 c0                	test   eax,eax
c0012f3a:	75 1c                	jne    c0012f58 <unblockTask(ThreadControlBlock*)+0x4c>
c0012f3c:	eb 5e                	jmp    c0012f9c <unblockTask(ThreadControlBlock*)+0x90>
c0012f3e:	66 90                	xchg   ax,ax
c0012f40:	83 ec 08             	sub    esp,0x8
c0012f43:	50                   	push   eax
c0012f44:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012f49:	e8 ee 91 00 00       	call   c001c13c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012f4e:	83 c4 10             	add    esp,0x10
c0012f51:	85 c0                	test   eax,eax
c0012f53:	74 47                	je     c0012f9c <unblockTask(ThreadControlBlock*)+0x90>
c0012f55:	8d 76 00             	lea    esi,[esi+0x0]
c0012f58:	39 c3                	cmp    ebx,eax
c0012f5a:	75 e4                	jne    c0012f40 <unblockTask(ThreadControlBlock*)+0x34>
c0012f5c:	eb 12                	jmp    c0012f70 <unblockTask(ThreadControlBlock*)+0x64>
c0012f5e:	66 90                	xchg   ax,ax
c0012f60:	83 ec 0c             	sub    esp,0xc
c0012f63:	68 43 e2 01 c0       	push   0xc001e243
c0012f68:	e8 a7 6a ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0012f75:	48                   	dec    eax
c0012f76:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0012f7b:	75 03                	jne    c0012f80 <unblockTask(ThreadControlBlock*)+0x74>
c0012f7d:	fb                   	sti    
c0012f7e:	66 90                	xchg   ax,ax
c0012f80:	83 c4 08             	add    esp,0x8
c0012f83:	5b                   	pop    ebx
c0012f84:	c3                   	ret    
c0012f85:	8d 76 00             	lea    esi,[esi+0x0]
c0012f88:	83 ec 0c             	sub    esp,0xc
c0012f8b:	68 2c e2 01 c0       	push   0xc001e22c
c0012f90:	e8 7f 6a ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0012f95:	83 c4 10             	add    esp,0x10
c0012f98:	eb d6                	jmp    c0012f70 <unblockTask(ThreadControlBlock*)+0x64>
c0012f9a:	66 90                	xchg   ax,ax
c0012f9c:	83 ec 08             	sub    esp,0x8
c0012f9f:	53                   	push   ebx
c0012fa0:	68 a4 2a 02 c0       	push   0xc0022aa4
c0012fa5:	e8 a2 8e 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	eb c1                	jmp    c0012f70 <unblockTask(ThreadControlBlock*)+0x64>
c0012faf:	90                   	nop

c0012fb0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012fb0:	55                   	push   ebp
c0012fb1:	57                   	push   edi
c0012fb2:	56                   	push   esi
c0012fb3:	53                   	push   ebx
c0012fb4:	83 ec 1c             	sub    esp,0x1c
c0012fb7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012fbb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012fbe:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0012fc4:	85 ed                	test   ebp,ebp
c0012fc6:	7e 24                	jle    c0012fec <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012fc8:	31 f6                	xor    esi,esi
c0012fca:	66 90                	xchg   ax,ax
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0012fd6:	46                   	inc    esi
c0012fd7:	57                   	push   edi
c0012fd8:	e8 84 3c ff ff       	call   c0006c61 <free>
c0012fdd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012fe0:	83 c4 10             	add    esp,0x10
c0012fe3:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012fe9:	7f e1                	jg     c0012fcc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012feb:	90                   	nop
c0012fec:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012ff6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012ffb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012ffe:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013001:	d3 c0                	rol    eax,cl
c0013003:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001300a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001300d:	89 f7                	mov    edi,esi
c001300f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013017:	0f 85 77 01 00 00    	jne    c0013194 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001301d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013023:	85 ed                	test   ebp,ebp
c0013025:	74 1d                	je     c0013044 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013027:	83 ec 0c             	sub    esp,0xc
c001302a:	55                   	push   ebp
c001302b:	e8 dc c2 ff ff       	call   c000f30c <EnvVarContainer::~EnvVarContainer()>
c0013030:	59                   	pop    ecx
c0013031:	5e                   	pop    esi
c0013032:	6a 0c                	push   0xc
c0013034:	55                   	push   ebp
c0013035:	e8 e4 68 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c001303a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	89 f7                	mov    edi,esi
c0013042:	66 90                	xchg   ax,ax
c0013044:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001304a:	85 c0                	test   eax,eax
c001304c:	0f 84 b6 00 00 00    	je     c0013108 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013052:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013055:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013059:	31 c9                	xor    ecx,ecx
c001305b:	eb 17                	jmp    c0013074 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001305d:	8d 76 00             	lea    esi,[esi+0x0]
c0013060:	41                   	inc    ecx
c0013061:	83 f9 10             	cmp    ecx,0x10
c0013064:	0f 84 9e 00 00 00    	je     c0013108 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001306a:	66 90                	xchg   ax,ax
c001306c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013072:	66 90                	xchg   ax,ax
c0013074:	31 d2                	xor    edx,edx
c0013076:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c001307d:	d3 fa                	sar    edx,cl
c001307f:	83 e2 01             	and    edx,0x1
c0013082:	74 dc                	je     c0013060 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013084:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013087:	01 d2                	add    edx,edx
c0013089:	01 ca                	add    edx,ecx
c001308b:	8d 14 92             	lea    edx,[edx+edx*4]
c001308e:	01 d0                	add    eax,edx
c0013090:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013096:	83 fd 07             	cmp    ebp,0x7
c0013099:	75 c5                	jne    c0013060 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001309b:	05 40 02 00 00       	add    eax,0x240
c00130a0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00130a3:	83 fd ff             	cmp    ebp,0xffffffff
c00130a6:	0f 8c f0 00 00 00    	jl     c001319c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00130ac:	0f 84 ae 01 00 00    	je     c0013260 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00130b2:	85 ed                	test   ebp,ebp
c00130b4:	0f 84 92 01 00 00    	je     c001324c <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00130ba:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00130bc:	75 a2                	jne    c0013060 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00130be:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00130c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00130c8:	01 d0                	add    eax,edx
c00130ca:	66 90                	xchg   ax,ax
c00130cc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00130d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00130dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00130e2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00130e9:	50                   	push   eax
c00130ea:	e8 1d fe ff ff       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00130f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00130f9:	89 f7                	mov    edi,esi
c00130fb:	41                   	inc    ecx
c00130fc:	83 f9 10             	cmp    ecx,0x10
c00130ff:	0f 85 67 ff ff ff    	jne    c001306c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013105:	8d 76 00             	lea    esi,[esi+0x0]
c0013108:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001310e:	85 c0                	test   eax,eax
c0013110:	74 62                	je     c0013174 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013112:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013118:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001311e:	74 54                	je     c0013174 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	68 a4 2a 02 c0       	push   0xc0022aa4
c0013128:	e8 5f 8c 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001312d:	c7 04 24 a4 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aa4
c0013134:	89 c7                	mov    edi,eax
c0013136:	e8 35 8c 00 00       	call   c001bd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	84 c0                	test   al,al
c0013140:	0f 84 ce 00 00 00    	je     c0013214 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013146:	66 90                	xchg   ax,ax
c0013148:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001314b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013151:	85 d2                	test   edx,edx
c0013153:	74 0f                	je     c0013164 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013155:	83 ec 0c             	sub    esp,0xc
c0013158:	8b 02                	mov    eax,DWORD PTR [edx]
c001315a:	52                   	push   edx
c001315b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001315e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001316e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013171:	8d 76 00             	lea    esi,[esi+0x0]
c0013174:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001317a:	85 db                	test   ebx,ebx
c001317c:	74 16                	je     c0013194 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001317e:	83 ec 0c             	sub    esp,0xc
c0013181:	53                   	push   ebx
c0013182:	e8 fb 5a ff ff       	call   c0008c82 <VAS::~VAS()>
c0013187:	58                   	pop    eax
c0013188:	5a                   	pop    edx
c0013189:	6a 14                	push   0x14
c001318b:	53                   	push   ebx
c001318c:	e8 8d 67 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	83 c4 1c             	add    esp,0x1c
c0013197:	5b                   	pop    ebx
c0013198:	5e                   	pop    esi
c0013199:	5f                   	pop    edi
c001319a:	5d                   	pop    ebp
c001319b:	c3                   	ret    
c001319c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	68 f4 e2 01 c0       	push   0xc001e2f4
c00131a8:	e8 ba c3 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00131ad:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00131b0:	83 c4 10             	add    esp,0x10
c00131b3:	89 f7                	mov    edi,esi
c00131b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00131b9:	e9 a2 fe ff ff       	jmp    c0013060 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00131be:	66 90                	xchg   ax,ax
c00131c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00131c6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00131cc:	75 1e                	jne    c00131ec <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00131ce:	83 ec 0c             	sub    esp,0xc
c00131d1:	68 5c e3 01 c0       	push   0xc001e35c
c00131d6:	e8 39 68 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00131db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00131e2:	e8 5d fa ff ff       	call   c0012c44 <blockTask(TaskState)>
c00131e7:	83 c4 10             	add    esp,0x10
c00131ea:	66 90                	xchg   ax,ax
c00131ec:	83 ec 08             	sub    esp,0x8
c00131ef:	56                   	push   esi
c00131f0:	68 a4 2a 02 c0       	push   0xc0022aa4
c00131f5:	e8 52 8c 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00131fa:	c7 04 24 a4 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aa4
c0013201:	e8 86 8b 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013206:	83 c4 10             	add    esp,0x10
c0013209:	39 f8                	cmp    eax,edi
c001320b:	0f 84 37 ff ff ff    	je     c0013148 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013211:	8d 76 00             	lea    esi,[esi+0x0]
c0013214:	83 ec 0c             	sub    esp,0xc
c0013217:	68 a4 2a 02 c0       	push   0xc0022aa4
c001321c:	e8 6b 8b 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013221:	c7 04 24 a4 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aa4
c0013228:	89 c6                	mov    esi,eax
c001322a:	e8 65 8b 00 00       	call   c001bd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	39 f3                	cmp    ebx,esi
c0013234:	74 b6                	je     c00131ec <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013236:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013239:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001323c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013242:	75 a8                	jne    c00131ec <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013244:	e9 77 ff ff ff       	jmp    c00131c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013249:	8d 76 00             	lea    esi,[esi+0x0]
c001324c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	68 28 e3 01 c0       	push   0xc001e328
c0013258:	e9 4b ff ff ff       	jmp    c00131a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001325d:	8d 76 00             	lea    esi,[esi+0x0]
c0013260:	8b 36                	mov    esi,DWORD PTR [esi]
c0013262:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013266:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013269:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001326c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013272:	01 d7                	add    edi,edx
c0013274:	89 f8                	mov    eax,edi
c0013276:	e9 51 fe ff ff       	jmp    c00130cc <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001327b:	90                   	nop

c001327c <cleanerTaskFunction(void*)>:
c001327c:	53                   	push   ebx
c001327d:	83 ec 08             	sub    esp,0x8
c0013280:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0013285:	48                   	dec    eax
c0013286:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c001328b:	75 03                	jne    c0013290 <cleanerTaskFunction(void*)+0x14>
c001328d:	fb                   	sti    
c001328e:	66 90                	xchg   ax,ax
c0013290:	fa                   	cli    
c0013291:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0013296:	80 3d 6c 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022a6c,0x0
c001329d:	8d 50 01             	lea    edx,[eax+0x1]
c00132a0:	89 15 88 2a 02 c0    	mov    DWORD PTR ds:0xc0022a88,edx
c00132a6:	0f 84 ac 00 00 00    	je     c0013358 <cleanerTaskFunction(void*)+0xdc>
c00132ac:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00132b1:	85 c0                	test   eax,eax
c00132b3:	75 03                	jne    c00132b8 <cleanerTaskFunction(void*)+0x3c>
c00132b5:	fb                   	sti    
c00132b6:	66 90                	xchg   ax,ax
c00132b8:	c6 05 6c 2a 02 c0 00 	mov    BYTE PTR ds:0xc0022a6c,0x0
c00132bf:	fa                   	cli    
c00132c0:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00132c6:	ff 05 84 2a 02 c0    	inc    DWORD PTR ds:0xc0022a84
c00132cc:	fa                   	cli    
c00132cd:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00132d3:	eb 2b                	jmp    c0013300 <cleanerTaskFunction(void*)+0x84>
c00132d5:	8d 76 00             	lea    esi,[esi+0x0]
c00132d8:	83 ec 0c             	sub    esp,0xc
c00132db:	68 8c 2a 02 c0       	push   0xc0022a8c
c00132e0:	e8 a7 8a 00 00       	call   c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00132e5:	c7 04 24 8c 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a8c
c00132ec:	89 c3                	mov    ebx,eax
c00132ee:	e8 a1 8a 00 00       	call   c001bd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00132f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00132f6:	e8 b5 fc ff ff       	call   c0012fb0 <cleanupTerminatedTask(ThreadControlBlock*)>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	66 90                	xchg   ax,ax
c0013300:	83 ec 0c             	sub    esp,0xc
c0013303:	68 8c 2a 02 c0       	push   0xc0022a8c
c0013308:	e8 63 8a 00 00       	call   c001bd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	84 c0                	test   al,al
c0013312:	74 c4                	je     c00132d8 <cleanerTaskFunction(void*)+0x5c>
c0013314:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0013319:	48                   	dec    eax
c001331a:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c001331f:	75 03                	jne    c0013324 <cleanerTaskFunction(void*)+0xa8>
c0013321:	fb                   	sti    
c0013322:	66 90                	xchg   ax,ax
c0013324:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0013329:	48                   	dec    eax
c001332a:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c001332f:	0f 85 4b ff ff ff    	jne    c0013280 <cleanerTaskFunction(void*)+0x4>
c0013335:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c001333a:	85 c0                	test   eax,eax
c001333c:	0f 84 3e ff ff ff    	je     c0013280 <cleanerTaskFunction(void*)+0x4>
c0013342:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c001334c:	e8 f7 f6 ff ff       	call   c0012a48 <schedule()>
c0013351:	e9 2a ff ff ff       	jmp    c0013280 <cleanerTaskFunction(void*)+0x4>
c0013356:	66 90                	xchg   ax,ax
c0013358:	83 ec 0c             	sub    esp,0xc
c001335b:	6a 02                	push   0x2
c001335d:	e8 ba f8 ff ff       	call   c0012c1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013362:	83 c4 10             	add    esp,0x10
c0013365:	e9 4e ff ff ff       	jmp    c00132b8 <cleanerTaskFunction(void*)+0x3c>
c001336a:	66 90                	xchg   ax,ax

c001336c <terminateTask(int)>:
c001336c:	83 ec 14             	sub    esp,0x14
c001336f:	fa                   	cli    
c0013370:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0013376:	ff 05 84 2a 02 c0    	inc    DWORD PTR ds:0xc0022a84
c001337c:	fa                   	cli    
c001337d:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0013383:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001338c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001338f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013394:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013397:	50                   	push   eax
c0013398:	68 8c 2a 02 c0       	push   0xc0022a8c
c001339d:	e8 aa 8a 00 00       	call   c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00133a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00133b1:	a1 68 2a 02 c0       	mov    eax,ds:0xc0022a68
c00133b6:	85 c0                	test   eax,eax
c00133b8:	74 5e                	je     c0013418 <terminateTask(int)+0xac>
c00133ba:	83 ec 0c             	sub    esp,0xc
c00133bd:	c6 05 6c 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a6c,0x1
c00133c4:	50                   	push   eax
c00133c5:	e8 42 fb ff ff       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c00133ca:	83 c4 10             	add    esp,0x10
c00133cd:	8d 76 00             	lea    esi,[esi+0x0]
c00133d0:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00133d5:	48                   	dec    eax
c00133d6:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00133db:	75 03                	jne    c00133e0 <terminateTask(int)+0x74>
c00133dd:	fb                   	sti    
c00133de:	66 90                	xchg   ax,ax
c00133e0:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c00133e5:	48                   	dec    eax
c00133e6:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c00133eb:	75 0b                	jne    c00133f8 <terminateTask(int)+0x8c>
c00133ed:	83 3d 80 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a80,0x0
c00133f4:	75 36                	jne    c001342c <terminateTask(int)+0xc0>
c00133f6:	66 90                	xchg   ax,ax
c00133f8:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00133fd:	48                   	dec    eax
c00133fe:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0013403:	75 03                	jne    c0013408 <terminateTask(int)+0x9c>
c0013405:	fb                   	sti    
c0013406:	66 90                	xchg   ax,ax
c0013408:	fa                   	cli    
c0013409:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c001340f:	90                   	nop
c0013410:	e8 33 f6 ff ff       	call   c0012a48 <schedule()>
c0013415:	eb e1                	jmp    c00133f8 <terminateTask(int)+0x8c>
c0013417:	90                   	nop
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	68 5a e2 01 c0       	push   0xc001e25a
c0013420:	e8 ef 65 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	eb a6                	jmp    c00133d0 <terminateTask(int)+0x64>
c001342a:	66 90                	xchg   ax,ax
c001342c:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c0013436:	eb d8                	jmp    c0013410 <terminateTask(int)+0xa4>

c0013438 <Thr::terminateFromIRQ(int)>:
c0013438:	83 ec 18             	sub    esp,0x18
c001343b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001343f:	50                   	push   eax
c0013440:	e8 27 ff ff ff       	call   c001336c <terminateTask(int)>
c0013445:	90                   	nop
c0013446:	66 90                	xchg   ax,ax

c0013448 <Semaphore::release()>:
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001344f:	fa                   	cli    
c0013450:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c0013455:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c001345b:	8d 48 01             	lea    ecx,[eax+0x1]
c001345e:	89 0d 84 2a 02 c0    	mov    DWORD PTR ds:0xc0022a84,ecx
c0013464:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013467:	85 c9                	test   ecx,ecx
c0013469:	74 41                	je     c00134ac <Semaphore::release()+0x64>
c001346b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001346e:	83 ec 0c             	sub    esp,0xc
c0013471:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013474:	51                   	push   ecx
c0013475:	e8 92 fa ff ff       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c001347a:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	48                   	dec    eax
c0013483:	90                   	nop
c0013484:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c0013489:	85 c0                	test   eax,eax
c001348b:	75 0b                	jne    c0013498 <Semaphore::release()+0x50>
c001348d:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c0013492:	85 c0                	test   eax,eax
c0013494:	75 1e                	jne    c00134b4 <Semaphore::release()+0x6c>
c0013496:	66 90                	xchg   ax,ax
c0013498:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c001349d:	48                   	dec    eax
c001349e:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00134a3:	75 03                	jne    c00134a8 <Semaphore::release()+0x60>
c00134a5:	fb                   	sti    
c00134a6:	66 90                	xchg   ax,ax
c00134a8:	83 c4 0c             	add    esp,0xc
c00134ab:	c3                   	ret    
c00134ac:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00134af:	eb d3                	jmp    c0013484 <Semaphore::release()+0x3c>
c00134b1:	8d 76 00             	lea    esi,[esi+0x0]
c00134b4:	c7 05 80 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a80,0x0
c00134be:	e8 85 f5 ff ff       	call   c0012a48 <schedule()>
c00134c3:	eb d3                	jmp    c0013498 <Semaphore::release()+0x50>
c00134c5:	8d 76 00             	lea    esi,[esi+0x0]

c00134c8 <__static_initialization_and_destruction_0(int, int)>:
c00134c8:	83 ec 0c             	sub    esp,0xc
c00134cb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00134d0:	0f 85 8e 00 00 00    	jne    c0013564 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00134d6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00134de:	0f 85 80 00 00 00    	jne    c0013564 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	68 a4 2a 02 c0       	push   0xc0022aa4
c00134ec:	e8 07 8c 00 00       	call   c001c0f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	83 ec 04             	sub    esp,0x4
c00134f7:	68 74 ed 01 c0       	push   0xc001ed74
c00134fc:	68 a4 2a 02 c0       	push   0xc0022aa4
c0013501:	68 a8 c0 01 c0       	push   0xc001c0a8
c0013506:	e8 c3 63 ff ff       	call   c00098ce <__cxa_atexit>
c001350b:	83 c4 10             	add    esp,0x10
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	68 98 2a 02 c0       	push   0xc0022a98
c0013516:	e8 dd 8b 00 00       	call   c001c0f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	83 ec 04             	sub    esp,0x4
c0013521:	68 74 ed 01 c0       	push   0xc001ed74
c0013526:	68 98 2a 02 c0       	push   0xc0022a98
c001352b:	68 a8 c0 01 c0       	push   0xc001c0a8
c0013530:	e8 99 63 ff ff       	call   c00098ce <__cxa_atexit>
c0013535:	83 c4 10             	add    esp,0x10
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	68 8c 2a 02 c0       	push   0xc0022a8c
c0013540:	e8 b3 8b 00 00       	call   c001c0f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	83 ec 04             	sub    esp,0x4
c001354b:	68 74 ed 01 c0       	push   0xc001ed74
c0013550:	68 8c 2a 02 c0       	push   0xc0022a8c
c0013555:	68 a8 c0 01 c0       	push   0xc001c0a8
c001355a:	e8 6f 63 ff ff       	call   c00098ce <__cxa_atexit>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	66 90                	xchg   ax,ax
c0013564:	90                   	nop
c0013565:	83 c4 0c             	add    esp,0xc
c0013568:	c3                   	ret    
c0013569:	8d 76 00             	lea    esi,[esi+0x0]

c001356c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001356c:	83 ec 0c             	sub    esp,0xc
c001356f:	83 ec 08             	sub    esp,0x8
c0013572:	68 ff ff 00 00       	push   0xffff
c0013577:	6a 01                	push   0x1
c0013579:	e8 4a ff ff ff       	call   c00134c8 <__static_initialization_and_destruction_0(int, int)>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	83 c4 0c             	add    esp,0xc
c0013584:	c3                   	ret    

c0013585 <Vm::inbv(unsigned short)>:
c0013585:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013589:	66 81 fa fe fe       	cmp    dx,0xfefe
c001358e:	75 06                	jne    c0013596 <Vm::inbv(unsigned short)+0x11>
c0013590:	a0 ec 2a 02 c0       	mov    al,ds:0xc0022aec
c0013595:	c3                   	ret    
c0013596:	ec                   	in     al,dx
c0013597:	c3                   	ret    

c0013598 <Vm::outbv(unsigned short, unsigned char)>:
c0013598:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001359c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135a0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00135a5:	75 25                	jne    c00135cc <Vm::outbv(unsigned short, unsigned char)+0x34>
c00135a7:	8b 0d ec 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022aec
c00135ad:	8d 51 01             	lea    edx,[ecx+0x1]
c00135b0:	88 81 00 2b 02 c0    	mov    BYTE PTR [ecx-0x3ffdd500],al
c00135b6:	89 15 ec 2a 02 c0    	mov    DWORD PTR ds:0xc0022aec,edx
c00135bc:	83 fa 20             	cmp    edx,0x20
c00135bf:	75 0c                	jne    c00135cd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00135c1:	c7 05 ec 2a 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0022aec,0x1f
c00135cb:	c3                   	ret    
c00135cc:	ee                   	out    dx,al
c00135cd:	c3                   	ret    

c00135ce <Vm::realToLinear(unsigned short, unsigned short)>:
c00135ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00135d8:	c1 e0 04             	shl    eax,0x4
c00135db:	01 d0                	add    eax,edx
c00135dd:	c3                   	ret    

c00135de <Vm::getSegment(unsigned int)>:
c00135de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e2:	c1 e8 10             	shr    eax,0x10
c00135e5:	c3                   	ret    

c00135e6 <Vm::getOffset(unsigned int)>:
c00135e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135ea:	c3                   	ret    

c00135eb <Vm::mainloop2()>:
c00135eb:	83 ec 18             	sub    esp,0x18
c00135ee:	fa                   	cli    
c00135ef:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00135f5:	6a 02                	push   0x2
c00135f7:	c6 05 e5 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022ae5,0x1
c00135fe:	e8 19 f6 ff ff       	call   c0012c1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013608:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001360c:	52                   	push   edx
c001360d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013611:	52                   	push   edx
c0013612:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013616:	52                   	push   edx
c0013617:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001361b:	50                   	push   eax
c001361c:	e8 0e cc fe ff       	call   c000022f <goToVM86>
c0013621:	83 c4 2c             	add    esp,0x2c
c0013624:	c3                   	ret    

c0013625 <Vm::mainVm8086Loop(void*)>:
c0013625:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c001362a:	48                   	dec    eax
c001362b:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0013630:	75 01                	jne    c0013633 <Vm::mainVm8086Loop(void*)+0xe>
c0013632:	fb                   	sti    
c0013633:	eb b6                	jmp    c00135eb <Vm::mainloop2()>

c0013635 <Vm::mainloop3(unsigned long)>:
c0013635:	83 ec 18             	sub    esp,0x18
c0013638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001363c:	fa                   	cli    
c001363d:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0013643:	6a 02                	push   0x2
c0013645:	c6 05 e4 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022ae4,0x1
c001364c:	a3 e0 2a 02 c0       	mov    ds:0xc0022ae0,eax
c0013651:	e8 c6 f5 ff ff       	call   c0012c1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013656:	83 c4 1c             	add    esp,0x1c
c0013659:	eb 90                	jmp    c00135eb <Vm::mainloop2()>

c001365b <Vm::initialise8086()>:
c001365b:	83 ec 0c             	sub    esp,0xc
c001365e:	68 80 00 00 00       	push   0x80
c0013663:	6a 00                	push   0x0
c0013665:	68 25 36 01 c0       	push   0xc0013625
c001366a:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c0013670:	e8 b3 f1 ff ff       	call   c0012828 <Process::createThread(void (*)(void*), void*, int)>
c0013675:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001367c:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0013681:	68 00 01 00 00       	push   0x100
c0013686:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c001368b:	6a 00                	push   0x0
c001368d:	6a 00                	push   0x0
c001368f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013695:	e8 46 5a ff ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001369a:	83 c4 2c             	add    esp,0x2c
c001369d:	c3                   	ret    

c001369e <Vm::finish8086()>:
c001369e:	53                   	push   ebx
c001369f:	83 ec 08             	sub    esp,0x8
c00136a2:	fa                   	cli    
c00136a3:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00136a9:	80 3d e4 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022ae4,0x0
c00136b0:	75 15                	jne    c00136c7 <Vm::finish8086()+0x29>
c00136b2:	e8 91 f3 ff ff       	call   c0012a48 <schedule()>
c00136b7:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00136bc:	48                   	dec    eax
c00136bd:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00136c2:	75 de                	jne    c00136a2 <Vm::finish8086()+0x4>
c00136c4:	fb                   	sti    
c00136c5:	eb db                	jmp    c00136a2 <Vm::finish8086()+0x4>
c00136c7:	83 ec 0c             	sub    esp,0xc
c00136ca:	8b 1d e0 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ae0
c00136d0:	ff 35 e8 2a 02 c0    	push   DWORD PTR ds:0xc0022ae8
c00136d6:	c6 05 e4 2a 02 c0 00 	mov    BYTE PTR ds:0xc0022ae4,0x0
c00136dd:	e8 2a f8 ff ff       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c00136e2:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00136e7:	83 c4 10             	add    esp,0x10
c00136ea:	8d 50 ff             	lea    edx,[eax-0x1]
c00136ed:	89 15 88 2a 02 c0    	mov    DWORD PTR ds:0xc0022a88,edx
c00136f3:	85 d2                	test   edx,edx
c00136f5:	75 01                	jne    c00136f8 <Vm::finish8086()+0x5a>
c00136f7:	fb                   	sti    
c00136f8:	89 d8                	mov    eax,ebx
c00136fa:	83 c4 08             	add    esp,0x8
c00136fd:	5b                   	pop    ebx
c00136fe:	c3                   	ret    

c00136ff <Vm::getOutput8086(unsigned char*)>:
c00136ff:	57                   	push   edi
c0013700:	8b 0d ec 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022aec
c0013706:	56                   	push   esi
c0013707:	be 00 2b 02 c0       	mov    esi,0xc0022b00
c001370c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013710:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013712:	a1 ec 2a 02 c0       	mov    eax,ds:0xc0022aec
c0013717:	5e                   	pop    esi
c0013718:	c7 05 ec 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022aec,0x0
c0013722:	5f                   	pop    edi
c0013723:	c3                   	ret    

c0013724 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013724:	55                   	push   ebp
c0013725:	57                   	push   edi
c0013726:	56                   	push   esi
c0013727:	53                   	push   ebx
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001372f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013733:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013737:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001373b:	fa                   	cli    
c001373c:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c0013742:	80 3d e5 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022ae5,0x0
c0013749:	75 15                	jne    c0013760 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001374b:	e8 f8 f2 ff ff       	call   c0012a48 <schedule()>
c0013750:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0013755:	48                   	dec    eax
c0013756:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c001375b:	75 de                	jne    c001373b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001375d:	fb                   	sti    
c001375e:	eb db                	jmp    c001373b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013760:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0013765:	c7 05 ec 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022aec,0x0
c001376f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0013773:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0013777:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001377b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001377f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013783:	0f b7 ff             	movzx  edi,di
c0013786:	0f b7 f6             	movzx  esi,si
c0013789:	50                   	push   eax
c001378a:	6a 20                	push   0x20
c001378c:	6a 00                	push   0x0
c001378e:	68 00 2b 02 c0       	push   0xc0022b00
c0013793:	e8 58 cd fe ff       	call   c00004f0 <memset>
c0013798:	5a                   	pop    edx
c0013799:	59                   	pop    ecx
c001379a:	57                   	push   edi
c001379b:	56                   	push   esi
c001379c:	e8 2d fe ff ff       	call   c00135ce <Vm::realToLinear(unsigned short, unsigned short)>
c00137a1:	83 c4 10             	add    esp,0x10
c00137a4:	89 c7                	mov    edi,eax
c00137a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00137aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00137ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137b0:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00137b5:	c6 05 e5 2a 02 c0 00 	mov    BYTE PTR ds:0xc0022ae5,0x0
c00137bc:	48                   	dec    eax
c00137bd:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00137c2:	75 01                	jne    c00137c5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00137c4:	fb                   	sti    
c00137c5:	83 ec 0c             	sub    esp,0xc
c00137c8:	ff 35 e8 2a 02 c0    	push   DWORD PTR ds:0xc0022ae8
c00137ce:	e8 39 f7 ff ff       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c00137d3:	83 c4 1c             	add    esp,0x1c
c00137d6:	b0 01                	mov    al,0x1
c00137d8:	5b                   	pop    ebx
c00137d9:	5e                   	pop    esi
c00137da:	5f                   	pop    edi
c00137db:	5d                   	pop    ebp
c00137dc:	c3                   	ret    

c00137dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00137dd:	55                   	push   ebp
c00137de:	57                   	push   edi
c00137df:	56                   	push   esi
c00137e0:	53                   	push   ebx
c00137e1:	83 ec 2c             	sub    esp,0x2c
c00137e4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00137e8:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00137ec:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00137f0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00137f4:	fa                   	cli    
c00137f5:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c00137fb:	0f b6 35 e5 2a 02 c0 	movzx  esi,BYTE PTR ds:0xc0022ae5
c0013802:	89 f0                	mov    eax,esi
c0013804:	84 c0                	test   al,al
c0013806:	75 1d                	jne    c0013825 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0013808:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001380c:	e8 37 f2 ff ff       	call   c0012a48 <schedule()>
c0013811:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0013816:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001381a:	48                   	dec    eax
c001381b:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0013820:	75 d2                	jne    c00137f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013822:	fb                   	sti    
c0013823:	eb cf                	jmp    c00137f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013825:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001382a:	c7 05 ec 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022aec,0x0
c0013834:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0013838:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001383c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0013840:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0013844:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013848:	50                   	push   eax
c0013849:	6a 20                	push   0x20
c001384b:	6a 00                	push   0x0
c001384d:	68 00 2b 02 c0       	push   0xc0022b00
c0013852:	e8 99 cc fe ff       	call   c00004f0 <memset>
c0013857:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001385e:	e8 ee 33 ff ff       	call   c0006c51 <malloc>
c0013863:	83 c4 0c             	add    esp,0xc
c0013866:	89 c3                	mov    ebx,eax
c0013868:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c001386e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013872:	50                   	push   eax
c0013873:	e8 12 67 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0013878:	83 c4 10             	add    esp,0x10
c001387b:	85 db                	test   ebx,ebx
c001387d:	75 0a                	jne    c0013889 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001387f:	83 ec 0c             	sub    esp,0xc
c0013882:	68 84 e3 01 c0       	push   0xc001e384
c0013887:	eb 3e                	jmp    c00138c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013889:	50                   	push   eax
c001388a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001388e:	50                   	push   eax
c001388f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013893:	50                   	push   eax
c0013894:	53                   	push   ebx
c0013895:	e8 5c 6a ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00138a2:	74 0a                	je     c00138ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00138a4:	83 ec 0c             	sub    esp,0xc
c00138a7:	68 98 e3 01 c0       	push   0xc001e398
c00138ac:	eb 19                	jmp    c00138c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00138ae:	51                   	push   ecx
c00138af:	51                   	push   ecx
c00138b0:	6a 01                	push   0x1
c00138b2:	53                   	push   ebx
c00138b3:	e8 92 67 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c00138b8:	83 c4 10             	add    esp,0x10
c00138bb:	85 c0                	test   eax,eax
c00138bd:	74 24                	je     c00138e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00138bf:	83 ec 0c             	sub    esp,0xc
c00138c2:	68 b1 e3 01 c0       	push   0xc001e3b1
c00138c7:	e8 9b bc ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00138cc:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00138d1:	83 c4 10             	add    esp,0x10
c00138d4:	48                   	dec    eax
c00138d5:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00138da:	85 c0                	test   eax,eax
c00138dc:	75 01                	jne    c00138df <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00138de:	fb                   	sti    
c00138df:	31 f6                	xor    esi,esi
c00138e1:	eb 58                	jmp    c001393b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00138e3:	0f b7 ed             	movzx  ebp,bp
c00138e6:	50                   	push   eax
c00138e7:	0f b7 ff             	movzx  edi,di
c00138ea:	50                   	push   eax
c00138eb:	55                   	push   ebp
c00138ec:	57                   	push   edi
c00138ed:	e8 dc fc ff ff       	call   c00135ce <Vm::realToLinear(unsigned short, unsigned short)>
c00138f2:	5a                   	pop    edx
c00138f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00138f5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00138f9:	51                   	push   ecx
c00138fa:	50                   	push   eax
c00138fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00138ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013903:	53                   	push   ebx
c0013904:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013907:	83 c4 14             	add    esp,0x14
c001390a:	53                   	push   ebx
c001390b:	e8 98 67 ff ff       	call   c000a0a8 <File::close()>
c0013910:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0013915:	83 c4 10             	add    esp,0x10
c0013918:	48                   	dec    eax
c0013919:	c6 05 e5 2a 02 c0 00 	mov    BYTE PTR ds:0xc0022ae5,0x0
c0013920:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0013925:	85 c0                	test   eax,eax
c0013927:	75 01                	jne    c001392a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0013929:	fb                   	sti    
c001392a:	83 ec 0c             	sub    esp,0xc
c001392d:	ff 35 e8 2a 02 c0    	push   DWORD PTR ds:0xc0022ae8
c0013933:	e8 d4 f5 ff ff       	call   c0012f0c <unblockTask(ThreadControlBlock*)>
c0013938:	83 c4 10             	add    esp,0x10
c001393b:	83 c4 2c             	add    esp,0x2c
c001393e:	89 f0                	mov    eax,esi
c0013940:	5b                   	pop    ebx
c0013941:	5e                   	pop    esi
c0013942:	5f                   	pop    edi
c0013943:	5d                   	pop    ebp
c0013944:	c3                   	ret    

c0013945 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0013945:	57                   	push   edi
c0013946:	56                   	push   esi
c0013947:	53                   	push   ebx
c0013948:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001394c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013950:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013954:	83 e8 06             	sub    eax,0x6
c0013957:	0f b7 c0             	movzx  eax,ax
c001395a:	50                   	push   eax
c001395b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0013960:	50                   	push   eax
c0013961:	e8 68 fc ff ff       	call   c00135ce <Vm::realToLinear(unsigned short, unsigned short)>
c0013966:	5a                   	pop    edx
c0013967:	5e                   	pop    esi
c0013968:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001396b:	8d 56 fa             	lea    edx,[esi-0x6]
c001396e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0013974:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0013977:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001397a:	83 c2 02             	add    edx,0x2
c001397d:	66 89 10             	mov    WORD PTR [eax],dx
c0013980:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0013983:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013987:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001398a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001398e:	89 d6                	mov    esi,edx
c0013990:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0013996:	66 81 e6 ff fd       	and    si,0xfdff
c001399b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001399f:	74 07                	je     c00139a8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00139a1:	89 d6                	mov    esi,edx
c00139a3:	66 81 ce 00 02       	or     si,0x200
c00139a8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00139ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139b1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00139b5:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00139bd:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00139c0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00139c8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00139cb:	5b                   	pop    ebx
c00139cc:	5e                   	pop    esi
c00139cd:	5f                   	pop    edi
c00139ce:	c3                   	ret    

c00139cf <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00139cf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00139d4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00139d9:	c1 e0 04             	shl    eax,0x4
c00139dc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00139df:	c3                   	ret    

c00139e0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00139e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00139e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00139ea:	c1 e0 04             	shl    eax,0x4
c00139ed:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00139f1:	c3                   	ret    

c00139f2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00139f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00139f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00139fc:	c1 e0 04             	shl    eax,0x4
c00139ff:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0013a02:	c3                   	ret    

c0013a03 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0013a03:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a08:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a0d:	c1 e0 04             	shl    eax,0x4
c0013a10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a14:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0013a17:	c3                   	ret    

c0013a18 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0013a18:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a1d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a22:	c1 e0 04             	shl    eax,0x4
c0013a25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a29:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013a2d:	c3                   	ret    

c0013a2e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0013a2e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a33:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a38:	c1 e0 04             	shl    eax,0x4
c0013a3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a3f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0013a42:	c3                   	ret    

c0013a43 <Vm::faultHandler(regs*)>:
c0013a43:	55                   	push   ebp
c0013a44:	57                   	push   edi
c0013a45:	56                   	push   esi
c0013a46:	53                   	push   ebx
c0013a47:	83 ec 1c             	sub    esp,0x1c
c0013a4a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013a4e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a51:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0013a55:	0f b7 f8             	movzx  edi,ax
c0013a58:	52                   	push   edx
c0013a59:	0f b7 c0             	movzx  eax,ax
c0013a5c:	50                   	push   eax
c0013a5d:	e8 6c fb ff ff       	call   c00135ce <Vm::realToLinear(unsigned short, unsigned short)>
c0013a62:	5a                   	pop    edx
c0013a63:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0013a66:	59                   	pop    ecx
c0013a67:	89 c1                	mov    ecx,eax
c0013a69:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a70:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a79:	0f b7 c5             	movzx  eax,bp
c0013a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a80:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0013a84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a88:	e8 41 fb ff ff       	call   c00135ce <Vm::realToLinear(unsigned short, unsigned short)>
c0013a8d:	5e                   	pop    esi
c0013a8e:	be 06 00 00 00       	mov    esi,0x6
c0013a93:	5a                   	pop    edx
c0013a94:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0013a99:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0013a9e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0013aa1:	80 fa 9d             	cmp    dl,0x9d
c0013aa4:	0f 84 2c 02 00 00    	je     c0013cd6 <Vm::faultHandler(regs*)+0x293>
c0013aaa:	0f 87 91 00 00 00    	ja     c0013b41 <Vm::faultHandler(regs*)+0xfe>
c0013ab0:	80 fa 66             	cmp    dl,0x66
c0013ab3:	0f 84 98 01 00 00    	je     c0013c51 <Vm::faultHandler(regs*)+0x20e>
c0013ab9:	77 47                	ja     c0013b02 <Vm::faultHandler(regs*)+0xbf>
c0013abb:	80 fa 36             	cmp    dl,0x36
c0013abe:	0f 84 80 01 00 00    	je     c0013c44 <Vm::faultHandler(regs*)+0x201>
c0013ac4:	77 1a                	ja     c0013ae0 <Vm::faultHandler(regs*)+0x9d>
c0013ac6:	80 fa 26             	cmp    dl,0x26
c0013ac9:	0f 84 4e 01 00 00    	je     c0013c1d <Vm::faultHandler(regs*)+0x1da>
c0013acf:	80 fa 2e             	cmp    dl,0x2e
c0013ad2:	0f 85 e2 05 00 00    	jne    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013ad8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013adb:	31 f6                	xor    esi,esi
c0013add:	41                   	inc    ecx
c0013ade:	eb be                	jmp    c0013a9e <Vm::faultHandler(regs*)+0x5b>
c0013ae0:	80 fa 64             	cmp    dl,0x64
c0013ae3:	0f 84 41 01 00 00    	je     c0013c2a <Vm::faultHandler(regs*)+0x1e7>
c0013ae9:	0f 87 48 01 00 00    	ja     c0013c37 <Vm::faultHandler(regs*)+0x1f4>
c0013aef:	80 fa 3e             	cmp    dl,0x3e
c0013af2:	0f 85 c2 05 00 00    	jne    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013af8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013afb:	be 01 00 00 00       	mov    esi,0x1
c0013b00:	eb db                	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013b02:	80 fa 6d             	cmp    dl,0x6d
c0013b05:	0f 84 ec 02 00 00    	je     c0013df7 <Vm::faultHandler(regs*)+0x3b4>
c0013b0b:	77 17                	ja     c0013b24 <Vm::faultHandler(regs*)+0xe1>
c0013b0d:	80 fa 67             	cmp    dl,0x67
c0013b10:	0f 84 48 01 00 00    	je     c0013c5e <Vm::faultHandler(regs*)+0x21b>
c0013b16:	80 fa 6c             	cmp    dl,0x6c
c0013b19:	0f 84 69 02 00 00    	je     c0013d88 <Vm::faultHandler(regs*)+0x345>
c0013b1f:	e9 96 05 00 00       	jmp    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013b24:	80 fa 6f             	cmp    dl,0x6f
c0013b27:	0f 84 f4 03 00 00    	je     c0013f21 <Vm::faultHandler(regs*)+0x4de>
c0013b2d:	0f 82 59 03 00 00    	jb     c0013e8c <Vm::faultHandler(regs*)+0x449>
c0013b33:	80 fa 9c             	cmp    dl,0x9c
c0013b36:	0f 84 2f 01 00 00    	je     c0013c6b <Vm::faultHandler(regs*)+0x228>
c0013b3c:	e9 79 05 00 00       	jmp    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013b41:	80 fa ec             	cmp    dl,0xec
c0013b44:	0f 84 14 05 00 00    	je     c001405e <Vm::faultHandler(regs*)+0x61b>
c0013b4a:	77 7b                	ja     c0013bc7 <Vm::faultHandler(regs*)+0x184>
c0013b4c:	80 fa e4             	cmp    dl,0xe4
c0013b4f:	0f 84 93 04 00 00    	je     c0013fe8 <Vm::faultHandler(regs*)+0x5a5>
c0013b55:	77 53                	ja     c0013baa <Vm::faultHandler(regs*)+0x167>
c0013b57:	80 fa cd             	cmp    dl,0xcd
c0013b5a:	0f 84 d9 01 00 00    	je     c0013d39 <Vm::faultHandler(regs*)+0x2f6>
c0013b60:	80 fa cf             	cmp    dl,0xcf
c0013b63:	0f 85 51 05 00 00    	jne    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013b69:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013b6c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013b6f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0013b73:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0013b76:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0013b7a:	81 ca 00 02 02 00    	or     edx,0x20200
c0013b80:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013b83:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013b87:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b8d:	66 c1 e8 09          	shr    ax,0x9
c0013b91:	83 e0 01             	and    eax,0x1
c0013b94:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013b97:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013b9a:	83 c0 06             	add    eax,0x6
c0013b9d:	25 ff ff 00 00       	and    eax,0xffff
c0013ba2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013ba5:	e9 0c 05 00 00       	jmp    c00140b6 <Vm::faultHandler(regs*)+0x673>
c0013baa:	80 fa e6             	cmp    dl,0xe6
c0013bad:	0f 84 7f 04 00 00    	je     c0014032 <Vm::faultHandler(regs*)+0x5ef>
c0013bb3:	0f 82 4b 04 00 00    	jb     c0014004 <Vm::faultHandler(regs*)+0x5c1>
c0013bb9:	80 fa e7             	cmp    dl,0xe7
c0013bbc:	0f 84 87 04 00 00    	je     c0014049 <Vm::faultHandler(regs*)+0x606>
c0013bc2:	e9 f3 04 00 00       	jmp    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013bc7:	80 fa ef             	cmp    dl,0xef
c0013bca:	0f 84 d1 04 00 00    	je     c00140a1 <Vm::faultHandler(regs*)+0x65e>
c0013bd0:	77 28                	ja     c0013bfa <Vm::faultHandler(regs*)+0x1b7>
c0013bd2:	80 fa ed             	cmp    dl,0xed
c0013bd5:	0f 84 9f 04 00 00    	je     c001407a <Vm::faultHandler(regs*)+0x637>
c0013bdb:	80 fa ee             	cmp    dl,0xee
c0013bde:	0f 85 d6 04 00 00    	jne    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013be4:	50                   	push   eax
c0013be5:	50                   	push   eax
c0013be6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013bea:	50                   	push   eax
c0013beb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013bef:	50                   	push   eax
c0013bf0:	e8 a3 f9 ff ff       	call   c0013598 <Vm::outbv(unsigned short, unsigned char)>
c0013bf5:	e9 9f 04 00 00       	jmp    c0014099 <Vm::faultHandler(regs*)+0x656>
c0013bfa:	80 fa fa             	cmp    dl,0xfa
c0013bfd:	0f 84 69 01 00 00    	je     c0013d6c <Vm::faultHandler(regs*)+0x329>
c0013c03:	80 fa fb             	cmp    dl,0xfb
c0013c06:	0f 84 6e 01 00 00    	je     c0013d7a <Vm::faultHandler(regs*)+0x337>
c0013c0c:	80 fa f3             	cmp    dl,0xf3
c0013c0f:	0f 85 a5 04 00 00    	jne    c00140ba <Vm::faultHandler(regs*)+0x677>
c0013c15:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c18:	e9 c0 fe ff ff       	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013c1d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c20:	be 02 00 00 00       	mov    esi,0x2
c0013c25:	e9 b3 fe ff ff       	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013c2a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c2d:	be 03 00 00 00       	mov    esi,0x3
c0013c32:	e9 a6 fe ff ff       	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013c37:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c3a:	be 04 00 00 00       	mov    esi,0x4
c0013c3f:	e9 99 fe ff ff       	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013c44:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c47:	be 05 00 00 00       	mov    esi,0x5
c0013c4c:	e9 8c fe ff ff       	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013c51:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c54:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013c59:	e9 7f fe ff ff       	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013c5e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c61:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013c66:	e9 72 fe ff ff       	jmp    c0013add <Vm::faultHandler(regs*)+0x9a>
c0013c6b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013c6e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013c72:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013c77:	74 30                	je     c0013ca9 <Vm::faultHandler(regs*)+0x266>
c0013c79:	83 e9 04             	sub    ecx,0x4
c0013c7c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013c82:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013c88:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013c8b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013c8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013c94:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013c98:	0f 84 15 04 00 00    	je     c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013c9e:	80 ce 02             	or     dh,0x2
c0013ca1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013ca4:	e9 0a 04 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013ca9:	83 e9 02             	sub    ecx,0x2
c0013cac:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013cb2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013cb5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013cb9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013cbf:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013cc3:	74 05                	je     c0013cca <Vm::faultHandler(regs*)+0x287>
c0013cc5:	80 ce 02             	or     dh,0x2
c0013cc8:	eb 03                	jmp    c0013ccd <Vm::faultHandler(regs*)+0x28a>
c0013cca:	80 e6 fd             	and    dh,0xfd
c0013ccd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013cd1:	e9 dd 03 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013cd6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013cdb:	74 2a                	je     c0013d07 <Vm::faultHandler(regs*)+0x2c4>
c0013cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cdf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013ce5:	81 ca 00 02 02 00    	or     edx,0x20200
c0013ceb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cf0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013cf6:	c1 e8 09             	shr    eax,0x9
c0013cf9:	83 e0 01             	and    eax,0x1
c0013cfc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013cff:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013d02:	83 c0 04             	add    eax,0x4
c0013d05:	eb 25                	jmp    c0013d2c <Vm::faultHandler(regs*)+0x2e9>
c0013d07:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013d0a:	81 ca 00 02 02 00    	or     edx,0x20200
c0013d10:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013d13:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013d16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d1c:	66 c1 e8 09          	shr    ax,0x9
c0013d20:	83 e0 01             	and    eax,0x1
c0013d23:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013d26:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013d29:	83 c0 02             	add    eax,0x2
c0013d2c:	25 ff ff 00 00       	and    eax,0xffff
c0013d31:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013d34:	e9 7a 03 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013d39:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d3d:	3c ee                	cmp    al,0xee
c0013d3f:	75 10                	jne    c0013d51 <Vm::faultHandler(regs*)+0x30e>
c0013d41:	83 ec 0c             	sub    esp,0xc
c0013d44:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013d47:	e8 e9 f8 ff ff       	call   c0013635 <Vm::mainloop3(unsigned long)>
c0013d4c:	e9 4b 03 00 00       	jmp    c001409c <Vm::faultHandler(regs*)+0x659>
c0013d51:	83 ec 0c             	sub    esp,0xc
c0013d54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d5c:	51                   	push   ecx
c0013d5d:	50                   	push   eax
c0013d5e:	53                   	push   ebx
c0013d5f:	e8 e1 fb ff ff       	call   c0013945 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013d64:	83 c4 20             	add    esp,0x20
c0013d67:	e9 4a 03 00 00       	jmp    c00140b6 <Vm::faultHandler(regs*)+0x673>
c0013d6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d71:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013d75:	e9 39 03 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013d7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d7f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013d83:	e9 2b 03 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013d88:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013d8b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013d90:	74 2b                	je     c0013dbd <Vm::faultHandler(regs*)+0x37a>
c0013d92:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013d99:	76 22                	jbe    c0013dbd <Vm::faultHandler(regs*)+0x37a>
c0013d9b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013d9f:	50                   	push   eax
c0013da0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013da4:	50                   	push   eax
c0013da5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013da9:	50                   	push   eax
c0013daa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013dae:	50                   	push   eax
c0013daf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013db3:	50                   	push   eax
c0013db4:	6a 6c                	push   0x6c
c0013db6:	6a 6c                	push   0x6c
c0013db8:	e9 b9 01 00 00       	jmp    c0013f76 <Vm::faultHandler(regs*)+0x533>
c0013dbd:	83 ec 0c             	sub    esp,0xc
c0013dc0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013dc4:	0f b7 f6             	movzx  esi,si
c0013dc7:	50                   	push   eax
c0013dc8:	e8 b8 f7 ff ff       	call   c0013585 <Vm::inbv(unsigned short)>
c0013dcd:	83 c4 0c             	add    esp,0xc
c0013dd0:	0f b6 c0             	movzx  eax,al
c0013dd3:	50                   	push   eax
c0013dd4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013dd8:	50                   	push   eax
c0013dd9:	56                   	push   esi
c0013dda:	e8 24 fc ff ff       	call   c0013a03 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013de5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013de9:	74 03                	je     c0013dee <Vm::faultHandler(regs*)+0x3ab>
c0013deb:	48                   	dec    eax
c0013dec:	eb 01                	jmp    c0013def <Vm::faultHandler(regs*)+0x3ac>
c0013dee:	40                   	inc    eax
c0013def:	0f b7 c0             	movzx  eax,ax
c0013df2:	e9 8d 00 00 00       	jmp    c0013e84 <Vm::faultHandler(regs*)+0x441>
c0013df7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013dfa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013dfd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013e02:	74 29                	je     c0013e2d <Vm::faultHandler(regs*)+0x3ea>
c0013e04:	3d ff ff 00 00       	cmp    eax,0xffff
c0013e09:	76 22                	jbe    c0013e2d <Vm::faultHandler(regs*)+0x3ea>
c0013e0b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013e0f:	50                   	push   eax
c0013e10:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013e14:	50                   	push   eax
c0013e15:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013e19:	50                   	push   eax
c0013e1a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013e1e:	50                   	push   eax
c0013e1f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e23:	50                   	push   eax
c0013e24:	6a 6d                	push   0x6d
c0013e26:	6a 6d                	push   0x6d
c0013e28:	e9 49 01 00 00       	jmp    c0013f76 <Vm::faultHandler(regs*)+0x533>
c0013e2d:	0f b7 c8             	movzx  ecx,ax
c0013e30:	0f b7 f6             	movzx  esi,si
c0013e33:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013e36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e3b:	74 20                	je     c0013e5d <Vm::faultHandler(regs*)+0x41a>
c0013e3d:	ed                   	in     eax,dx
c0013e3e:	55                   	push   ebp
c0013e3f:	50                   	push   eax
c0013e40:	51                   	push   ecx
c0013e41:	56                   	push   esi
c0013e42:	e8 e7 fb ff ff       	call   c0013a2e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013e4d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013e51:	74 05                	je     c0013e58 <Vm::faultHandler(regs*)+0x415>
c0013e53:	83 e8 04             	sub    eax,0x4
c0013e56:	eb 27                	jmp    c0013e7f <Vm::faultHandler(regs*)+0x43c>
c0013e58:	83 c0 04             	add    eax,0x4
c0013e5b:	eb 22                	jmp    c0013e7f <Vm::faultHandler(regs*)+0x43c>
c0013e5d:	66 ed                	in     ax,dx
c0013e5f:	0f b7 c0             	movzx  eax,ax
c0013e62:	57                   	push   edi
c0013e63:	50                   	push   eax
c0013e64:	51                   	push   ecx
c0013e65:	56                   	push   esi
c0013e66:	e8 ad fb ff ff       	call   c0013a18 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013e6b:	83 c4 10             	add    esp,0x10
c0013e6e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013e71:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013e75:	74 05                	je     c0013e7c <Vm::faultHandler(regs*)+0x439>
c0013e77:	83 e8 02             	sub    eax,0x2
c0013e7a:	eb 03                	jmp    c0013e7f <Vm::faultHandler(regs*)+0x43c>
c0013e7c:	83 c0 02             	add    eax,0x2
c0013e7f:	25 ff ff 00 00       	and    eax,0xffff
c0013e84:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013e87:	e9 27 02 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013e8c:	8d 46 ff             	lea    eax,[esi-0x1]
c0013e8f:	3c 05                	cmp    al,0x5
c0013e91:	77 24                	ja     c0013eb7 <Vm::faultHandler(regs*)+0x474>
c0013e93:	0f b6 c0             	movzx  eax,al
c0013e96:	ff 24 85 24 e4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1bdc]
c0013e9d:	0f b7 fd             	movzx  edi,bp
c0013ea0:	eb 15                	jmp    c0013eb7 <Vm::faultHandler(regs*)+0x474>
c0013ea2:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013ea6:	eb 0f                	jmp    c0013eb7 <Vm::faultHandler(regs*)+0x474>
c0013ea8:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013eac:	eb 09                	jmp    c0013eb7 <Vm::faultHandler(regs*)+0x474>
c0013eae:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013eb2:	eb 03                	jmp    c0013eb7 <Vm::faultHandler(regs*)+0x474>
c0013eb4:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013eb7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013eba:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013ebf:	74 29                	je     c0013eea <Vm::faultHandler(regs*)+0x4a7>
c0013ec1:	3d ff ff 00 00       	cmp    eax,0xffff
c0013ec6:	76 22                	jbe    c0013eea <Vm::faultHandler(regs*)+0x4a7>
c0013ec8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013ecc:	50                   	push   eax
c0013ecd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013ed1:	50                   	push   eax
c0013ed2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013ed6:	50                   	push   eax
c0013ed7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013edb:	50                   	push   eax
c0013edc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ee0:	50                   	push   eax
c0013ee1:	6a 6e                	push   0x6e
c0013ee3:	6a 6e                	push   0x6e
c0013ee5:	e9 8c 00 00 00       	jmp    c0013f76 <Vm::faultHandler(regs*)+0x533>
c0013eea:	0f b7 c0             	movzx  eax,ax
c0013eed:	52                   	push   edx
c0013eee:	52                   	push   edx
c0013eef:	50                   	push   eax
c0013ef0:	57                   	push   edi
c0013ef1:	e8 d9 fa ff ff       	call   c00139cf <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013ef6:	59                   	pop    ecx
c0013ef7:	0f b6 c0             	movzx  eax,al
c0013efa:	5e                   	pop    esi
c0013efb:	50                   	push   eax
c0013efc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013f00:	50                   	push   eax
c0013f01:	e8 92 f6 ff ff       	call   c0013598 <Vm::outbv(unsigned short, unsigned char)>
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013f0c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013f10:	74 03                	je     c0013f15 <Vm::faultHandler(regs*)+0x4d2>
c0013f12:	48                   	dec    eax
c0013f13:	eb 01                	jmp    c0013f16 <Vm::faultHandler(regs*)+0x4d3>
c0013f15:	40                   	inc    eax
c0013f16:	0f b7 c0             	movzx  eax,ax
c0013f19:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013f1c:	e9 92 01 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013f21:	8d 46 ff             	lea    eax,[esi-0x1]
c0013f24:	3c 05                	cmp    al,0x5
c0013f26:	77 1f                	ja     c0013f47 <Vm::faultHandler(regs*)+0x504>
c0013f28:	0f b6 c0             	movzx  eax,al
c0013f2b:	ff 24 85 3c e4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1bc4]
c0013f32:	89 ef                	mov    edi,ebp
c0013f34:	eb 11                	jmp    c0013f47 <Vm::faultHandler(regs*)+0x504>
c0013f36:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013f39:	eb 0c                	jmp    c0013f47 <Vm::faultHandler(regs*)+0x504>
c0013f3b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013f3e:	eb 07                	jmp    c0013f47 <Vm::faultHandler(regs*)+0x504>
c0013f40:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013f43:	eb 02                	jmp    c0013f47 <Vm::faultHandler(regs*)+0x504>
c0013f45:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013f47:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013f4a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013f4f:	74 37                	je     c0013f88 <Vm::faultHandler(regs*)+0x545>
c0013f51:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013f57:	76 2f                	jbe    c0013f88 <Vm::faultHandler(regs*)+0x545>
c0013f59:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013f5d:	50                   	push   eax
c0013f5e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013f62:	50                   	push   eax
c0013f63:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013f67:	50                   	push   eax
c0013f68:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013f6c:	50                   	push   eax
c0013f6d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f71:	50                   	push   eax
c0013f72:	6a 6f                	push   0x6f
c0013f74:	6a 6f                	push   0x6f
c0013f76:	68 ca e3 01 c0       	push   0xc001e3ca
c0013f7b:	e8 94 5a ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0013f80:	83 c4 20             	add    esp,0x20
c0013f83:	e9 86 01 00 00       	jmp    c001410e <Vm::faultHandler(regs*)+0x6cb>
c0013f88:	0f b7 d7             	movzx  edx,di
c0013f8b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013f8e:	0f b7 c6             	movzx  eax,si
c0013f91:	81 e1 00 04 00 00    	and    ecx,0x400
c0013f97:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013f9a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f9f:	74 1d                	je     c0013fbe <Vm::faultHandler(regs*)+0x57b>
c0013fa1:	55                   	push   ebp
c0013fa2:	55                   	push   ebp
c0013fa3:	50                   	push   eax
c0013fa4:	52                   	push   edx
c0013fa5:	e8 48 fa ff ff       	call   c00139f2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013faa:	83 c4 10             	add    esp,0x10
c0013fad:	89 fa                	mov    edx,edi
c0013faf:	ef                   	out    dx,eax
c0013fb0:	85 c9                	test   ecx,ecx
c0013fb2:	74 05                	je     c0013fb9 <Vm::faultHandler(regs*)+0x576>
c0013fb4:	83 ee 04             	sub    esi,0x4
c0013fb7:	eb 21                	jmp    c0013fda <Vm::faultHandler(regs*)+0x597>
c0013fb9:	83 c6 04             	add    esi,0x4
c0013fbc:	eb 1c                	jmp    c0013fda <Vm::faultHandler(regs*)+0x597>
c0013fbe:	55                   	push   ebp
c0013fbf:	55                   	push   ebp
c0013fc0:	50                   	push   eax
c0013fc1:	52                   	push   edx
c0013fc2:	e8 19 fa ff ff       	call   c00139e0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013fc7:	83 c4 10             	add    esp,0x10
c0013fca:	89 fa                	mov    edx,edi
c0013fcc:	66 ef                	out    dx,ax
c0013fce:	85 c9                	test   ecx,ecx
c0013fd0:	74 05                	je     c0013fd7 <Vm::faultHandler(regs*)+0x594>
c0013fd2:	83 ee 02             	sub    esi,0x2
c0013fd5:	eb 03                	jmp    c0013fda <Vm::faultHandler(regs*)+0x597>
c0013fd7:	83 c6 02             	add    esi,0x2
c0013fda:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013fe0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013fe3:	e9 cb 00 00 00       	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0013fe8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013fef:	83 ec 0c             	sub    esp,0xc
c0013ff2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ff6:	50                   	push   eax
c0013ff7:	e8 89 f5 ff ff       	call   c0013585 <Vm::inbv(unsigned short)>
c0013ffc:	0f b6 c0             	movzx  eax,al
c0013fff:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014002:	eb 3f                	jmp    c0014043 <Vm::faultHandler(regs*)+0x600>
c0014004:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014009:	74 07                	je     c0014012 <Vm::faultHandler(regs*)+0x5cf>
c001400b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001400f:	ed                   	in     eax,dx
c0014010:	eb 14                	jmp    c0014026 <Vm::faultHandler(regs*)+0x5e3>
c0014012:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014015:	66 31 f6             	xor    si,si
c0014018:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001401b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001401f:	66 ed                	in     ax,dx
c0014021:	0f b7 c0             	movzx  eax,ax
c0014024:	09 f0                	or     eax,esi
c0014026:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014029:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001402d:	e9 84 00 00 00       	jmp    c00140b6 <Vm::faultHandler(regs*)+0x673>
c0014032:	52                   	push   edx
c0014033:	52                   	push   edx
c0014034:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014038:	50                   	push   eax
c0014039:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001403d:	50                   	push   eax
c001403e:	e8 55 f5 ff ff       	call   c0013598 <Vm::outbv(unsigned short, unsigned char)>
c0014043:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014047:	eb 53                	jmp    c001409c <Vm::faultHandler(regs*)+0x659>
c0014049:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001404c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014050:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014055:	74 03                	je     c001405a <Vm::faultHandler(regs*)+0x617>
c0014057:	ef                   	out    dx,eax
c0014058:	eb cf                	jmp    c0014029 <Vm::faultHandler(regs*)+0x5e6>
c001405a:	66 ef                	out    dx,ax
c001405c:	eb cb                	jmp    c0014029 <Vm::faultHandler(regs*)+0x5e6>
c001405e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014065:	83 ec 0c             	sub    esp,0xc
c0014068:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001406c:	50                   	push   eax
c001406d:	e8 13 f5 ff ff       	call   c0013585 <Vm::inbv(unsigned short)>
c0014072:	0f b6 c0             	movzx  eax,al
c0014075:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014078:	eb 1f                	jmp    c0014099 <Vm::faultHandler(regs*)+0x656>
c001407a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001407d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014082:	74 03                	je     c0014087 <Vm::faultHandler(regs*)+0x644>
c0014084:	ed                   	in     eax,dx
c0014085:	eb 0d                	jmp    c0014094 <Vm::faultHandler(regs*)+0x651>
c0014087:	66 ed                	in     ax,dx
c0014089:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001408c:	0f b7 c0             	movzx  eax,ax
c001408f:	66 31 d2             	xor    dx,dx
c0014092:	09 d0                	or     eax,edx
c0014094:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014097:	eb 1a                	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c0014099:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001409c:	83 c4 10             	add    esp,0x10
c001409f:	eb 15                	jmp    c00140b6 <Vm::faultHandler(regs*)+0x673>
c00140a1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00140a4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00140a7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00140ac:	74 03                	je     c00140b1 <Vm::faultHandler(regs*)+0x66e>
c00140ae:	ef                   	out    dx,eax
c00140af:	eb 02                	jmp    c00140b3 <Vm::faultHandler(regs*)+0x670>
c00140b1:	66 ef                	out    dx,ax
c00140b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00140b6:	b0 01                	mov    al,0x1
c00140b8:	eb 56                	jmp    c0014110 <Vm::faultHandler(regs*)+0x6cd>
c00140ba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00140be:	50                   	push   eax
c00140bf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00140c3:	50                   	push   eax
c00140c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00140c8:	50                   	push   eax
c00140c9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00140cd:	50                   	push   eax
c00140ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00140d2:	50                   	push   eax
c00140d3:	52                   	push   edx
c00140d4:	52                   	push   edx
c00140d5:	68 f7 e3 01 c0       	push   0xc001e3f7
c00140da:	e8 35 59 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00140df:	83 c4 20             	add    esp,0x20
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	6a 60                	push   0x60
c00140e7:	e8 99 f4 ff ff       	call   c0013585 <Vm::inbv(unsigned short)>
c00140ec:	83 c4 10             	add    esp,0x10
c00140ef:	3c 1c                	cmp    al,0x1c
c00140f1:	74 04                	je     c00140f7 <Vm::faultHandler(regs*)+0x6b4>
c00140f3:	3c 5a                	cmp    al,0x5a
c00140f5:	75 eb                	jne    c00140e2 <Vm::faultHandler(regs*)+0x69f>
c00140f7:	3c 5a                	cmp    al,0x5a
c00140f9:	74 04                	je     c00140ff <Vm::faultHandler(regs*)+0x6bc>
c00140fb:	3c 1c                	cmp    al,0x1c
c00140fd:	75 0f                	jne    c001410e <Vm::faultHandler(regs*)+0x6cb>
c00140ff:	83 ec 0c             	sub    esp,0xc
c0014102:	6a 60                	push   0x60
c0014104:	e8 7c f4 ff ff       	call   c0013585 <Vm::inbv(unsigned short)>
c0014109:	83 c4 10             	add    esp,0x10
c001410c:	eb e9                	jmp    c00140f7 <Vm::faultHandler(regs*)+0x6b4>
c001410e:	31 c0                	xor    eax,eax
c0014110:	83 c4 1c             	add    esp,0x1c
c0014113:	5b                   	pop    ebx
c0014114:	5e                   	pop    esi
c0014115:	5f                   	pop    edi
c0014116:	5d                   	pop    ebp
c0014117:	c3                   	ret    

c0014118 <noCopro(unsigned long)>:
c0014118:	c3                   	ret    

c0014119 <nmiHandler(regs*, void*)>:
c0014119:	83 ec 0c             	sub    esp,0xc
c001411c:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0014121:	83 ec 0c             	sub    esp,0xc
c0014124:	50                   	push   eax
c0014125:	e8 dc 22 ff ff       	call   c0006406 <Computer::handleNMI()>
c001412a:	83 c4 10             	add    esp,0x10
c001412d:	90                   	nop
c001412e:	83 c4 0c             	add    esp,0xc
c0014131:	c3                   	ret    

c0014132 <doubleFault(regs*, void*)>:
c0014132:	55                   	push   ebp
c0014133:	89 e5                	mov    ebp,esp
c0014135:	83 ec 08             	sub    esp,0x8
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	68 54 e4 01 c0       	push   0xc001e454
c0014140:	e8 22 b4 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	90                   	nop
c0014149:	c9                   	leave  
c001414a:	c3                   	ret    

c001414b <displayDebugInfo(regs*)>:
c001414b:	83 ec 1c             	sub    esp,0x1c
c001414e:	0f 20 c0             	mov    eax,cr0
c0014151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014155:	0f 20 d0             	mov    eax,cr2
c0014158:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001415c:	0f 20 d8             	mov    eax,cr3
c001415f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014163:	0f 20 e0             	mov    eax,cr4
c0014166:	89 04 24             	mov    DWORD PTR [esp],eax
c0014169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001416d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014170:	83 ec 08             	sub    esp,0x8
c0014173:	50                   	push   eax
c0014174:	68 70 e4 01 c0       	push   0xc001e470
c0014179:	e8 96 58 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001417e:	83 c4 10             	add    esp,0x10
c0014181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014185:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014188:	83 ec 08             	sub    esp,0x8
c001418b:	50                   	push   eax
c001418c:	68 61 e4 01 c0       	push   0xc001e461
c0014191:	e8 7e 58 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0014196:	83 c4 10             	add    esp,0x10
c0014199:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001419d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00141a0:	83 ec 08             	sub    esp,0x8
c00141a3:	50                   	push   eax
c00141a4:	68 6c e4 01 c0       	push   0xc001e46c
c00141a9:	e8 66 58 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00141ae:	83 c4 10             	add    esp,0x10
c00141b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00141b8:	83 ec 08             	sub    esp,0x8
c00141bb:	50                   	push   eax
c00141bc:	68 7b e4 01 c0       	push   0xc001e47b
c00141c1:	e8 4e 58 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00141c6:	83 c4 10             	add    esp,0x10
c00141c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141cd:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00141d0:	83 ec 08             	sub    esp,0x8
c00141d3:	50                   	push   eax
c00141d4:	68 86 e4 01 c0       	push   0xc001e486
c00141d9:	e8 36 58 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00141de:	83 c4 10             	add    esp,0x10
c00141e1:	83 ec 08             	sub    esp,0x8
c00141e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141e8:	68 91 e4 01 c0       	push   0xc001e491
c00141ed:	e8 22 58 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00141f2:	83 c4 10             	add    esp,0x10
c00141f5:	83 ec 08             	sub    esp,0x8
c00141f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00141fc:	68 9c e4 01 c0       	push   0xc001e49c
c0014201:	e8 0e 58 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c001420e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	50                   	push   eax
c0014218:	e8 64 37 ff ff       	call   c0007981 <setActiveTerminal(VgaText*)>
c001421d:	83 c4 10             	add    esp,0x10
c0014220:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014225:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001422b:	83 ec 08             	sub    esp,0x8
c001422e:	68 a7 e4 01 c0       	push   0xc001e4a7
c0014233:	50                   	push   eax
c0014234:	e8 87 3a ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c0014239:	83 c4 10             	add    esp,0x10
c001423c:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014241:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014247:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001424c:	8b 12                	mov    edx,DWORD PTR [edx]
c001424e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014251:	83 c2 0c             	add    edx,0xc
c0014254:	83 ec 08             	sub    esp,0x8
c0014257:	52                   	push   edx
c0014258:	50                   	push   eax
c0014259:	e8 62 3a ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014266:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001426c:	83 ec 08             	sub    esp,0x8
c001426f:	68 b0 e4 01 c0       	push   0xc001e4b0
c0014274:	50                   	push   eax
c0014275:	e8 46 3a ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c001427a:	83 c4 10             	add    esp,0x10
c001427d:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014282:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014288:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001428c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001428f:	83 ec 08             	sub    esp,0x8
c0014292:	52                   	push   edx
c0014293:	50                   	push   eax
c0014294:	e8 e1 39 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00142a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142a7:	83 ec 08             	sub    esp,0x8
c00142aa:	68 b8 e4 01 c0       	push   0xc001e4b8
c00142af:	50                   	push   eax
c00142b0:	e8 0b 3a ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c00142b5:	83 c4 10             	add    esp,0x10
c00142b8:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00142bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142c7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00142ca:	83 ec 08             	sub    esp,0x8
c00142cd:	52                   	push   edx
c00142ce:	50                   	push   eax
c00142cf:	e8 a6 39 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c00142d4:	83 c4 10             	add    esp,0x10
c00142d7:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00142dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142e2:	83 ec 08             	sub    esp,0x8
c00142e5:	68 c0 e4 01 c0       	push   0xc001e4c0
c00142ea:	50                   	push   eax
c00142eb:	e8 d0 39 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00142f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014302:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014305:	83 ec 08             	sub    esp,0x8
c0014308:	52                   	push   edx
c0014309:	50                   	push   eax
c001430a:	e8 6b 39 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014317:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001431d:	83 ec 08             	sub    esp,0x8
c0014320:	68 c8 e4 01 c0       	push   0xc001e4c8
c0014325:	50                   	push   eax
c0014326:	e8 95 39 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c001432b:	83 c4 10             	add    esp,0x10
c001432e:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014333:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014339:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001433d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014340:	83 ec 08             	sub    esp,0x8
c0014343:	52                   	push   edx
c0014344:	50                   	push   eax
c0014345:	e8 30 39 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c001434a:	83 c4 10             	add    esp,0x10
c001434d:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014352:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014358:	83 ec 08             	sub    esp,0x8
c001435b:	68 d0 e4 01 c0       	push   0xc001e4d0
c0014360:	50                   	push   eax
c0014361:	e8 5a 39 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c0014366:	83 c4 10             	add    esp,0x10
c0014369:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c001436e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014374:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014378:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001437b:	83 ec 08             	sub    esp,0x8
c001437e:	52                   	push   edx
c001437f:	50                   	push   eax
c0014380:	e8 f5 38 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c0014385:	83 c4 10             	add    esp,0x10
c0014388:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c001438d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014393:	83 ec 08             	sub    esp,0x8
c0014396:	68 d8 e4 01 c0       	push   0xc001e4d8
c001439b:	50                   	push   eax
c001439c:	e8 1f 39 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c00143a1:	83 c4 10             	add    esp,0x10
c00143a4:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00143a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00143b3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00143b6:	83 ec 08             	sub    esp,0x8
c00143b9:	52                   	push   edx
c00143ba:	50                   	push   eax
c00143bb:	e8 ba 38 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00143c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143ce:	83 ec 08             	sub    esp,0x8
c00143d1:	68 e0 e4 01 c0       	push   0xc001e4e0
c00143d6:	50                   	push   eax
c00143d7:	e8 e4 38 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00143e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143ea:	83 ec 08             	sub    esp,0x8
c00143ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00143f1:	50                   	push   eax
c00143f2:	e8 83 38 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c00143f7:	83 c4 10             	add    esp,0x10
c00143fa:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c00143ff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014405:	83 ec 08             	sub    esp,0x8
c0014408:	68 e9 e4 01 c0       	push   0xc001e4e9
c001440d:	50                   	push   eax
c001440e:	e8 ad 38 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c0014413:	83 c4 10             	add    esp,0x10
c0014416:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c001441b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014421:	83 ec 08             	sub    esp,0x8
c0014424:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014428:	50                   	push   eax
c0014429:	e8 4c 38 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c001442e:	83 c4 10             	add    esp,0x10
c0014431:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014436:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001443c:	83 ec 08             	sub    esp,0x8
c001443f:	68 f1 e4 01 c0       	push   0xc001e4f1
c0014444:	50                   	push   eax
c0014445:	e8 76 38 ff ff       	call   c0007cc0 <VgaText::puts(char const*)>
c001444a:	83 c4 10             	add    esp,0x10
c001444d:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0014452:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014458:	83 ec 08             	sub    esp,0x8
c001445b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001445f:	50                   	push   eax
c0014460:	e8 15 38 ff ff       	call   c0007c7a <VgaText::putx(unsigned int)>
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	fa                   	cli    
c0014469:	f4                   	hlt    
c001446a:	eb fe                	jmp    c001446a <displayDebugInfo(regs*)+0x31f>

c001446c <displayProgramFault(char const*)>:
c001446c:	83 ec 0c             	sub    esp,0xc
c001446f:	83 ec 0c             	sub    esp,0xc
c0014472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014476:	e8 99 55 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001447b:	83 c4 10             	add    esp,0x10
c001447e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014483:	8b 00                	mov    eax,DWORD PTR [eax]
c0014485:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014488:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001448e:	85 c0                	test   eax,eax
c0014490:	74 21                	je     c00144b3 <displayProgramFault(char const*)+0x47>
c0014492:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014497:	8b 00                	mov    eax,DWORD PTR [eax]
c0014499:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001449c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00144a2:	6a 04                	push   0x4
c00144a4:	6a 0f                	push   0xf
c00144a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144aa:	50                   	push   eax
c00144ab:	e8 82 38 ff ff       	call   c0007d32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	90                   	nop
c00144b4:	83 c4 0c             	add    esp,0xc
c00144b7:	c3                   	ret    

c00144b8 <gpFault(regs*, void*)>:
c00144b8:	83 ec 1c             	sub    esp,0x1c
c00144bb:	c7 05 30 2b 02 c0 43 3a 01 c0 	mov    DWORD PTR ds:0xc0022b30,0xc0013a43
c00144c5:	a1 30 2b 02 c0       	mov    eax,ds:0xc0022b30
c00144ca:	85 c0                	test   eax,eax
c00144cc:	74 1c                	je     c00144ea <gpFault(regs*, void*)+0x32>
c00144ce:	a1 30 2b 02 c0       	mov    eax,ds:0xc0022b30
c00144d3:	83 ec 0c             	sub    esp,0xc
c00144d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144da:	ff d0                	call   eax
c00144dc:	83 c4 10             	add    esp,0x10
c00144df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00144e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00144e8:	75 2e                	jne    c0014518 <gpFault(regs*, void*)+0x60>
c00144ea:	83 ec 0c             	sub    esp,0xc
c00144ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144f1:	e8 55 fc ff ff       	call   c001414b <displayDebugInfo(regs*)>
c00144f6:	83 c4 10             	add    esp,0x10
c00144f9:	83 ec 0c             	sub    esp,0xc
c00144fc:	68 f9 e4 01 c0       	push   0xc001e4f9
c0014501:	e8 66 ff ff ff       	call   c001446c <displayProgramFault(char const*)>
c0014506:	83 c4 10             	add    esp,0x10
c0014509:	83 ec 0c             	sub    esp,0xc
c001450c:	6a 00                	push   0x0
c001450e:	e8 25 ef ff ff       	call   c0013438 <Thr::terminateFromIRQ(int)>
c0014513:	83 c4 10             	add    esp,0x10
c0014516:	eb 01                	jmp    c0014519 <gpFault(regs*, void*)+0x61>
c0014518:	90                   	nop
c0014519:	83 c4 1c             	add    esp,0x1c
c001451c:	c3                   	ret    

c001451d <pgFault(regs*, void*)>:
c001451d:	83 ec 1c             	sub    esp,0x1c
c0014520:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014525:	8b 00                	mov    eax,DWORD PTR [eax]
c0014527:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001452a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014530:	0f 20 d2             	mov    edx,cr2
c0014533:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014537:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001453b:	83 ec 08             	sub    esp,0x8
c001453e:	52                   	push   edx
c001453f:	50                   	push   eax
c0014540:	e8 01 51 ff ff       	call   c0009646 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014545:	83 c4 10             	add    esp,0x10
c0014548:	84 c0                	test   al,al
c001454a:	75 2e                	jne    c001457a <pgFault(regs*, void*)+0x5d>
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014553:	e8 f3 fb ff ff       	call   c001414b <displayDebugInfo(regs*)>
c0014558:	83 c4 10             	add    esp,0x10
c001455b:	83 ec 0c             	sub    esp,0xc
c001455e:	68 12 e5 01 c0       	push   0xc001e512
c0014563:	e8 04 ff ff ff       	call   c001446c <displayProgramFault(char const*)>
c0014568:	83 c4 10             	add    esp,0x10
c001456b:	83 ec 0c             	sub    esp,0xc
c001456e:	6a 00                	push   0x0
c0014570:	e8 c3 ee ff ff       	call   c0013438 <Thr::terminateFromIRQ(int)>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	eb 01                	jmp    c001457b <pgFault(regs*, void*)+0x5e>
c001457a:	90                   	nop
c001457b:	83 c4 1c             	add    esp,0x1c
c001457e:	c3                   	ret    

c001457f <otherISRHandler(regs*, void*)>:
c001457f:	83 ec 0c             	sub    esp,0xc
c0014582:	83 ec 0c             	sub    esp,0xc
c0014585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014589:	e8 bd fb ff ff       	call   c001414b <displayDebugInfo(regs*)>
c001458e:	83 c4 10             	add    esp,0x10
c0014591:	83 ec 0c             	sub    esp,0xc
c0014594:	68 64 e5 01 c0       	push   0xc001e564
c0014599:	e8 ce fe ff ff       	call   c001446c <displayProgramFault(char const*)>
c001459e:	83 c4 10             	add    esp,0x10
c00145a1:	83 ec 0c             	sub    esp,0xc
c00145a4:	6a 00                	push   0x0
c00145a6:	e8 8d ee ff ff       	call   c0013438 <Thr::terminateFromIRQ(int)>
c00145ab:	83 c4 10             	add    esp,0x10
c00145ae:	90                   	nop
c00145af:	83 c4 0c             	add    esp,0xc
c00145b2:	c3                   	ret    

c00145b3 <opcodeFault(regs*, void*)>:
c00145b3:	55                   	push   ebp
c00145b4:	89 e5                	mov    ebp,esp
c00145b6:	83 ec 08             	sub    esp,0x8
c00145b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145bf:	83 ec 08             	sub    esp,0x8
c00145c2:	50                   	push   eax
c00145c3:	68 1d e5 01 c0       	push   0xc001e51d
c00145c8:	e8 47 54 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00145cd:	83 c4 10             	add    esp,0x10
c00145d0:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00145d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145db:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00145e1:	84 c0                	test   al,al
c00145e3:	74 21                	je     c0014606 <opcodeFault(regs*, void*)+0x53>
c00145e5:	83 ec 0c             	sub    esp,0xc
c00145e8:	68 8c e5 01 c0       	push   0xc001e58c
c00145ed:	e8 22 54 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00145f2:	83 c4 10             	add    esp,0x10
c00145f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145fb:	8d 50 19             	lea    edx,[eax+0x19]
c00145fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014601:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014604:	eb 2b                	jmp    c0014631 <opcodeFault(regs*, void*)+0x7e>
c0014606:	83 ec 0c             	sub    esp,0xc
c0014609:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001460c:	e8 3a fb ff ff       	call   c001414b <displayDebugInfo(regs*)>
c0014611:	83 c4 10             	add    esp,0x10
c0014614:	83 ec 0c             	sub    esp,0xc
c0014617:	68 2b e5 01 c0       	push   0xc001e52b
c001461c:	e8 4b fe ff ff       	call   c001446c <displayProgramFault(char const*)>
c0014621:	83 c4 10             	add    esp,0x10
c0014624:	83 ec 0c             	sub    esp,0xc
c0014627:	6a 00                	push   0x0
c0014629:	e8 0a ee ff ff       	call   c0013438 <Thr::terminateFromIRQ(int)>
c001462e:	83 c4 10             	add    esp,0x10
c0014631:	c9                   	leave  
c0014632:	c3                   	ret    

c0014633 <i386SaveCoprocessor(void*)>:
c0014633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014637:	83 c0 3f             	add    eax,0x3f
c001463a:	83 e0 c0             	and    eax,0xffffffc0
c001463d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014641:	ff 25 2c 2b 02 c0    	jmp    DWORD PTR ds:0xc0022b2c

c0014647 <i386LoadCoprocessor(void*)>:
c0014647:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001464b:	83 c0 3f             	add    eax,0x3f
c001464e:	83 e0 c0             	and    eax,0xffffffc0
c0014651:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014655:	ff 25 28 2b 02 c0    	jmp    DWORD PTR ds:0xc0022b28

c001465b <x87EmulHandler(regs*, void*)>:
c001465b:	53                   	push   ebx
c001465c:	83 ec 08             	sub    esp,0x8
c001465f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014664:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0014668:	74 10                	je     c001467a <x87EmulHandler(regs*, void*)+0x1f>
c001466a:	83 ec 0c             	sub    esp,0xc
c001466d:	68 38 e5 01 c0       	push   0xc001e538
c0014672:	e8 f0 ae ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0014677:	83 c4 10             	add    esp,0x10
c001467a:	0f 20 c0             	mov    eax,cr0
c001467d:	a8 08                	test   al,0x8
c001467f:	74 59                	je     c00146da <x87EmulHandler(regs*, void*)+0x7f>
c0014681:	0f 06                	clts   
c0014683:	a1 24 2b 02 c0       	mov    eax,ds:0xc0022b24
c0014688:	85 c0                	test   eax,eax
c001468a:	74 0e                	je     c001469a <x87EmulHandler(regs*, void*)+0x3f>
c001468c:	83 ec 0c             	sub    esp,0xc
c001468f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014692:	e8 9c ff ff ff       	call   c0014633 <i386SaveCoprocessor(void*)>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00146a0:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00146a4:	75 12                	jne    c00146b8 <x87EmulHandler(regs*, void*)+0x5d>
c00146a6:	83 ec 0c             	sub    esp,0xc
c00146a9:	68 40 02 00 00       	push   0x240
c00146ae:	e8 9e 25 ff ff       	call   c0006c51 <malloc>
c00146b3:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00146b6:	eb 10                	jmp    c00146c8 <x87EmulHandler(regs*, void*)+0x6d>
c00146b8:	83 ec 0c             	sub    esp,0xc
c00146bb:	a1 24 2b 02 c0       	mov    eax,ds:0xc0022b24
c00146c0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00146c3:	e8 7f ff ff ff       	call   c0014647 <i386LoadCoprocessor(void*)>
c00146c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146cd:	83 c4 10             	add    esp,0x10
c00146d0:	a3 24 2b 02 c0       	mov    ds:0xc0022b24,eax
c00146d5:	83 c4 08             	add    esp,0x8
c00146d8:	5b                   	pop    ebx
c00146d9:	c3                   	ret    
c00146da:	83 ec 0c             	sub    esp,0xc
c00146dd:	68 4c e5 01 c0       	push   0xc001e54c
c00146e2:	e8 2d 53 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c00146e7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00146ef:	83 c4 18             	add    esp,0x18
c00146f2:	5b                   	pop    ebx
c00146f3:	e9 40 ed ff ff       	jmp    c0013438 <Thr::terminateFromIRQ(int)>

c00146f8 <HalInitialiseCoprocessor()>:
c00146f8:	83 ec 10             	sub    esp,0x10
c00146fb:	c7 05 24 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022b24,0x0
c0014705:	6a 00                	push   0x0
c0014707:	68 5b 46 01 c0       	push   0xc001465b
c001470c:	6a 07                	push   0x7
c001470e:	e8 75 6c ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014713:	e8 88 6a 00 00       	call   c001b1a0 <avxDetect>
c0014718:	83 c4 10             	add    esp,0x10
c001471b:	85 c0                	test   eax,eax
c001471d:	74 1c                	je     c001473b <HalInitialiseCoprocessor()+0x43>
c001471f:	c7 05 2c 2b 02 c0 ca b1 01 c0 	mov    DWORD PTR ds:0xc0022b2c,0xc001b1ca
c0014729:	c7 05 28 2b 02 c0 db b1 01 c0 	mov    DWORD PTR ds:0xc0022b28,0xc001b1db
c0014733:	83 c4 0c             	add    esp,0xc
c0014736:	e9 b1 6a 00 00       	jmp    c001b1ec <avxInit>
c001473b:	e8 e0 6c 00 00       	call   c001b420 <absolutelyNoChanceInHell>
c0014740:	85 c0                	test   eax,eax
c0014742:	74 1c                	je     c0014760 <HalInitialiseCoprocessor()+0x68>
c0014744:	c7 05 2c 2b 02 c0 38 b4 01 c0 	mov    DWORD PTR ds:0xc0022b2c,0xc001b438
c001474e:	c7 05 28 2b 02 c0 40 b4 01 c0 	mov    DWORD PTR ds:0xc0022b28,0xc001b440
c0014758:	83 c4 0c             	add    esp,0xc
c001475b:	e9 e8 6c 00 00       	jmp    c001b448 <sseInit>
c0014760:	e8 01 6d 00 00       	call   c001b466 <x87Detect>
c0014765:	85 c0                	test   eax,eax
c0014767:	74 1c                	je     c0014785 <HalInitialiseCoprocessor()+0x8d>
c0014769:	c7 05 2c 2b 02 c0 81 b4 01 c0 	mov    DWORD PTR ds:0xc0022b2c,0xc001b481
c0014773:	c7 05 28 2b 02 c0 88 b4 01 c0 	mov    DWORD PTR ds:0xc0022b28,0xc001b488
c001477d:	83 c4 0c             	add    esp,0xc
c0014780:	e9 0a 6d 00 00       	jmp    c001b48f <x87Init>
c0014785:	c7 05 2c 2b 02 c0 18 41 01 c0 	mov    DWORD PTR ds:0xc0022b2c,0xc0014118
c001478f:	c7 05 28 2b 02 c0 18 41 01 c0 	mov    DWORD PTR ds:0xc0022b28,0xc0014118
c0014799:	0f 20 c0             	mov    eax,cr0
c001479c:	83 c8 04             	or     eax,0x4
c001479f:	0f 22 c0             	mov    cr0,eax
c00147a2:	83 c4 0c             	add    esp,0xc
c00147a5:	c3                   	ret    

c00147a6 <HalPanic(char const*)>:
c00147a6:	e9 bc ad ff ff       	jmp    c000f567 <Krnl::panic(char const*)>

c00147ab <HalQueryPerformanceCounter()>:
c00147ab:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00147b0:	31 d2                	xor    edx,edx
c00147b2:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00147b8:	31 c0                	xor    eax,eax
c00147ba:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00147c1:	74 02                	je     c00147c5 <HalQueryPerformanceCounter()+0x1a>
c00147c3:	0f 31                	rdtsc  
c00147c5:	c3                   	ret    

c00147c6 <HalInitialise()>:
c00147c6:	53                   	push   ebx
c00147c7:	83 ec 08             	sub    esp,0x8
c00147ca:	e8 ec 6d ff ff       	call   c000b5bb <setupINTS()>
c00147cf:	80 3d 80 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021e80,0x0
c00147d6:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00147db:	75 07                	jne    c00147e4 <HalInitialise()+0x1e>
c00147dd:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c00147e4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00147ea:	83 e0 01             	and    eax,0x1
c00147ed:	a2 20 2b 02 c0       	mov    ds:0xc0022b20,al
c00147f2:	e8 a9 02 00 00       	call   c0014aa0 <picOpen()>
c00147f7:	80 3d 20 2b 02 c0 00 	cmp    BYTE PTR ds:0xc0022b20,0x0
c00147fe:	74 0a                	je     c001480a <HalInitialise()+0x44>
c0014800:	e8 e3 01 00 00       	call   c00149e8 <picDisable()>
c0014805:	e8 08 63 00 00       	call   c001ab12 <apicOpen()>
c001480a:	bb 0f 00 00 00       	mov    ebx,0xf
c001480f:	50                   	push   eax
c0014810:	6a 00                	push   0x0
c0014812:	68 7f 45 01 c0       	push   0xc001457f
c0014817:	6a 00                	push   0x0
c0014819:	e8 6a 6b ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001481e:	83 c4 0c             	add    esp,0xc
c0014821:	6a 00                	push   0x0
c0014823:	68 7f 45 01 c0       	push   0xc001457f
c0014828:	6a 01                	push   0x1
c001482a:	e8 59 6b ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001482f:	83 c4 0c             	add    esp,0xc
c0014832:	6a 00                	push   0x0
c0014834:	68 19 41 01 c0       	push   0xc0014119
c0014839:	6a 02                	push   0x2
c001483b:	e8 48 6b ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014840:	83 c4 0c             	add    esp,0xc
c0014843:	6a 00                	push   0x0
c0014845:	68 7f 45 01 c0       	push   0xc001457f
c001484a:	6a 03                	push   0x3
c001484c:	e8 37 6b ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014851:	83 c4 0c             	add    esp,0xc
c0014854:	6a 00                	push   0x0
c0014856:	68 7f 45 01 c0       	push   0xc001457f
c001485b:	6a 04                	push   0x4
c001485d:	e8 26 6b ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014862:	83 c4 0c             	add    esp,0xc
c0014865:	6a 00                	push   0x0
c0014867:	68 7f 45 01 c0       	push   0xc001457f
c001486c:	6a 05                	push   0x5
c001486e:	e8 15 6b ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014873:	83 c4 0c             	add    esp,0xc
c0014876:	6a 00                	push   0x0
c0014878:	68 b3 45 01 c0       	push   0xc00145b3
c001487d:	6a 06                	push   0x6
c001487f:	e8 04 6b ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014884:	83 c4 0c             	add    esp,0xc
c0014887:	6a 00                	push   0x0
c0014889:	68 32 41 01 c0       	push   0xc0014132
c001488e:	6a 08                	push   0x8
c0014890:	e8 f3 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014895:	83 c4 0c             	add    esp,0xc
c0014898:	6a 00                	push   0x0
c001489a:	68 7f 45 01 c0       	push   0xc001457f
c001489f:	6a 09                	push   0x9
c00148a1:	e8 e2 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148a6:	83 c4 0c             	add    esp,0xc
c00148a9:	6a 00                	push   0x0
c00148ab:	68 7f 45 01 c0       	push   0xc001457f
c00148b0:	6a 0a                	push   0xa
c00148b2:	e8 d1 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148b7:	83 c4 0c             	add    esp,0xc
c00148ba:	6a 00                	push   0x0
c00148bc:	68 7f 45 01 c0       	push   0xc001457f
c00148c1:	6a 0b                	push   0xb
c00148c3:	e8 c0 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148c8:	83 c4 0c             	add    esp,0xc
c00148cb:	6a 00                	push   0x0
c00148cd:	68 b8 44 01 c0       	push   0xc00144b8
c00148d2:	6a 0d                	push   0xd
c00148d4:	e8 af 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148d9:	83 c4 0c             	add    esp,0xc
c00148dc:	6a 00                	push   0x0
c00148de:	68 1d 45 01 c0       	push   0xc001451d
c00148e3:	6a 0e                	push   0xe
c00148e5:	e8 9e 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148ea:	83 c4 10             	add    esp,0x10
c00148ed:	50                   	push   eax
c00148ee:	6a 00                	push   0x0
c00148f0:	68 7f 45 01 c0       	push   0xc001457f
c00148f5:	53                   	push   ebx
c00148f6:	43                   	inc    ebx
c00148f7:	e8 8c 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148fc:	83 c4 10             	add    esp,0x10
c00148ff:	83 fb 1e             	cmp    ebx,0x1e
c0014902:	75 e9                	jne    c00148ed <HalInitialise()+0x127>
c0014904:	50                   	push   eax
c0014905:	6a 00                	push   0x0
c0014907:	68 97 10 01 c0       	push   0xc0011097
c001490c:	6a 60                	push   0x60
c001490e:	e8 75 6a ff ff       	call   c000b388 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014913:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0014918:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014922:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0014929:	e8 23 23 ff ff       	call   c0006c51 <malloc>
c001492e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014931:	89 c3                	mov    ebx,eax
c0014933:	e8 30 09 00 00       	call   c0015268 <RTC::RTC()>
c0014938:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0014942:	5a                   	pop    edx
c0014943:	59                   	pop    ecx
c0014944:	53                   	push   ebx
c0014945:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c001494b:	e8 04 65 ff ff       	call   c000ae54 <Device::addChild(Device*)>
c0014950:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014952:	6a 00                	push   0x0
c0014954:	6a 00                	push   0x0
c0014956:	6a 00                	push   0x0
c0014958:	53                   	push   ebx
c0014959:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001495c:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0014961:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0014967:	83 c4 28             	add    esp,0x28
c001496a:	5b                   	pop    ebx
c001496b:	c3                   	ret    

c001496c <HalMakeBeep(int)>:
c001496c:	53                   	push   ebx
c001496d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014971:	85 db                	test   ebx,ebx
c0014973:	75 07                	jne    c001497c <HalMakeBeep(int)+0x10>
c0014975:	e4 61                	in     al,0x61
c0014977:	83 e0 fc             	and    eax,0xfffffffc
c001497a:	eb 26                	jmp    c00149a2 <HalMakeBeep(int)+0x36>
c001497c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0014981:	99                   	cdq    
c0014982:	f7 fb                	idiv   ebx
c0014984:	89 c1                	mov    ecx,eax
c0014986:	b0 b6                	mov    al,0xb6
c0014988:	e6 43                	out    0x43,al
c001498a:	88 c8                	mov    al,cl
c001498c:	e6 42                	out    0x42,al
c001498e:	89 c8                	mov    eax,ecx
c0014990:	c1 e8 08             	shr    eax,0x8
c0014993:	e6 42                	out    0x42,al
c0014995:	e4 61                	in     al,0x61
c0014997:	88 c2                	mov    dl,al
c0014999:	83 ca 03             	or     edx,0x3
c001499c:	38 c2                	cmp    dl,al
c001499e:	74 04                	je     c00149a4 <HalMakeBeep(int)+0x38>
c00149a0:	88 d0                	mov    al,dl
c00149a2:	e6 61                	out    0x61,al
c00149a4:	5b                   	pop    ebx
c00149a5:	c3                   	ret    

c00149a6 <HalGetRand()>:
c00149a6:	31 c0                	xor    eax,eax
c00149a8:	c3                   	ret    

c00149a9 <HalEndOfInterrupt(int)>:
c00149a9:	80 3d 20 2b 02 c0 00 	cmp    BYTE PTR ds:0xc0022b20,0x0
c00149b0:	74 23                	je     c00149d5 <HalEndOfInterrupt(int)+0x2c>
c00149b2:	83 ec 14             	sub    esp,0x14
c00149b5:	6a 1b                	push   0x1b
c00149b7:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c00149bd:	e8 5c 18 ff ff       	call   c000621e <Computer::rdmsr(unsigned int)>
c00149c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00149c7:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00149d1:	83 c4 1c             	add    esp,0x1c
c00149d4:	c3                   	ret    
c00149d5:	e9 56 02 00 00       	jmp    c0014c30 <picEOI(int)>

c00149da <HalRestart()>:
c00149da:	c3                   	ret    

c00149db <HalShutdown()>:
c00149db:	c3                   	ret    

c00149dc <HalSleep()>:
c00149dc:	c3                   	ret    
c00149dd:	66 90                	xchg   ax,ax
c00149df:	90                   	nop

c00149e0 <picIoWait()>:
c00149e0:	eb 00                	jmp    c00149e2 <picIoWait()+0x2>
c00149e2:	eb 00                	jmp    c00149e4 <picIoWait()+0x4>
c00149e4:	90                   	nop
c00149e5:	c3                   	ret    
c00149e6:	66 90                	xchg   ax,ax

c00149e8 <picDisable()>:
c00149e8:	83 ec 10             	sub    esp,0x10
c00149eb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00149f2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00149f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00149fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014a00:	ee                   	out    dx,al
c0014a01:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0014a08:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0014a0d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014a11:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014a16:	ee                   	out    dx,al
c0014a17:	90                   	nop
c0014a18:	83 c4 10             	add    esp,0x10
c0014a1b:	c3                   	ret    

c0014a1c <picGetIRQReg(int)>:
c0014a1c:	83 ec 10             	sub    esp,0x10
c0014a1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a23:	25 ff 00 00 00       	and    eax,0xff
c0014a28:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014a2f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0014a33:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014a37:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014a3c:	ee                   	out    dx,al
c0014a3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a41:	25 ff 00 00 00       	and    eax,0xff
c0014a46:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014a4d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0014a51:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014a55:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014a5a:	ee                   	out    dx,al
c0014a5b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0014a62:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014a67:	89 c2                	mov    edx,eax
c0014a69:	ec                   	in     al,dx
c0014a6a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0014a6e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014a72:	25 ff 00 00 00       	and    eax,0xff
c0014a77:	c1 e0 08             	shl    eax,0x8
c0014a7a:	89 c1                	mov    ecx,eax
c0014a7c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0014a83:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014a88:	89 c2                	mov    edx,eax
c0014a8a:	ec                   	in     al,dx
c0014a8b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0014a8f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014a93:	25 ff 00 00 00       	and    eax,0xff
c0014a98:	09 c8                	or     eax,ecx
c0014a9a:	83 c4 10             	add    esp,0x10
c0014a9d:	c3                   	ret    
c0014a9e:	66 90                	xchg   ax,ax

c0014aa0 <picOpen()>:
c0014aa0:	83 ec 50             	sub    esp,0x50
c0014aa3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0014aaa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0014aaf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ab3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ab7:	ee                   	out    dx,al
c0014ab8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0014abf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0014ac4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0014ac8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014acc:	ee                   	out    dx,al
c0014acd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0014ad5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0014add:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0014ae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ae8:	89 c2                	mov    edx,eax
c0014aea:	ec                   	in     al,dx
c0014aeb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014aef:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014af3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014af7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0014afe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b02:	89 c2                	mov    edx,eax
c0014b04:	ec                   	in     al,dx
c0014b05:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014b09:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0014b0d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0014b11:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0014b18:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0014b1d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0014b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b25:	ee                   	out    dx,al
c0014b26:	e8 b5 fe ff ff       	call   c00149e0 <picIoWait()>
c0014b2b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0014b32:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0014b37:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0014b3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014b3f:	ee                   	out    dx,al
c0014b40:	e8 9b fe ff ff       	call   c00149e0 <picIoWait()>
c0014b45:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014b49:	25 ff 00 00 00       	and    eax,0xff
c0014b4e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0014b55:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0014b59:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0014b5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b61:	ee                   	out    dx,al
c0014b62:	e8 79 fe ff ff       	call   c00149e0 <picIoWait()>
c0014b67:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014b6b:	25 ff 00 00 00       	and    eax,0xff
c0014b70:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0014b77:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014b7b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0014b7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014b83:	ee                   	out    dx,al
c0014b84:	e8 57 fe ff ff       	call   c00149e0 <picIoWait()>
c0014b89:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0014b90:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0014b95:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0014b99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014b9d:	ee                   	out    dx,al
c0014b9e:	e8 3d fe ff ff       	call   c00149e0 <picIoWait()>
c0014ba3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0014baa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0014baf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014bb3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bb7:	ee                   	out    dx,al
c0014bb8:	e8 23 fe ff ff       	call   c00149e0 <picIoWait()>
c0014bbd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0014bc4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0014bc9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014bcd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014bd1:	ee                   	out    dx,al
c0014bd2:	e8 09 fe ff ff       	call   c00149e0 <picIoWait()>
c0014bd7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0014bde:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0014be3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014be7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014beb:	ee                   	out    dx,al
c0014bec:	e8 ef fd ff ff       	call   c00149e0 <picIoWait()>
c0014bf1:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0014bf5:	25 ff 00 00 00       	and    eax,0xff
c0014bfa:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0014c01:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0014c05:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0014c09:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014c0d:	ee                   	out    dx,al
c0014c0e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0014c12:	25 ff 00 00 00       	and    eax,0xff
c0014c17:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0014c1e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014c22:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0014c26:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014c2a:	ee                   	out    dx,al
c0014c2b:	90                   	nop
c0014c2c:	83 c4 50             	add    esp,0x50
c0014c2f:	c3                   	ret    

c0014c30 <picEOI(int)>:
c0014c30:	83 ec 10             	sub    esp,0x10
c0014c33:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014c38:	75 22                	jne    c0014c5c <picEOI(int)+0x2c>
c0014c3a:	6a 0b                	push   0xb
c0014c3c:	e8 db fd ff ff       	call   c0014a1c <picGetIRQReg(int)>
c0014c41:	83 c4 04             	add    esp,0x4
c0014c44:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014c49:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014c4e:	25 ff ff 00 00       	and    eax,0xffff
c0014c53:	25 80 00 00 00       	and    eax,0x80
c0014c58:	74 72                	je     c0014ccc <picEOI(int)+0x9c>
c0014c5a:	66 90                	xchg   ax,ax
c0014c5c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c61:	75 31                	jne    c0014c94 <picEOI(int)+0x64>
c0014c63:	6a 0b                	push   0xb
c0014c65:	e8 b2 fd ff ff       	call   c0014a1c <picGetIRQReg(int)>
c0014c6a:	83 c4 04             	add    esp,0x4
c0014c6d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014c72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c76:	66 85 c0             	test   ax,ax
c0014c79:	78 19                	js     c0014c94 <picEOI(int)+0x64>
c0014c7b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0014c82:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0014c87:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014c8b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014c90:	ee                   	out    dx,al
c0014c91:	eb 3d                	jmp    c0014cd0 <picEOI(int)+0xa0>
c0014c93:	90                   	nop
c0014c94:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014c99:	7e 19                	jle    c0014cb4 <picEOI(int)+0x84>
c0014c9b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014ca2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0014ca7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014cab:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014cb0:	ee                   	out    dx,al
c0014cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cb4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014cbb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0014cc0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014cc4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014cc9:	ee                   	out    dx,al
c0014cca:	eb 04                	jmp    c0014cd0 <picEOI(int)+0xa0>
c0014ccc:	90                   	nop
c0014ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0014cd0:	83 c4 10             	add    esp,0x10
c0014cd3:	c3                   	ret    

c0014cd4 <RTC::open(int, int, void*)>:
c0014cd4:	31 c0                	xor    eax,eax
c0014cd6:	c3                   	ret    
c0014cd7:	90                   	nop

c0014cd8 <RTC::close(int, int, void*)>:
c0014cd8:	31 c0                	xor    eax,eax
c0014cda:	c3                   	ret    
c0014cdb:	90                   	nop

c0014cdc <RTC::timeInSecondsUTC()>:
c0014cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ce0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0014ce6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014cec:	c3                   	ret    
c0014ced:	90                   	nop

c0014cee <RTC::timeInDatetimeUTC()>:
c0014cee:	53                   	push   ebx
c0014cef:	83 ec 14             	sub    esp,0x14
c0014cf2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0014cfc:	50                   	push   eax
c0014cfd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014d00:	83 c4 0c             	add    esp,0xc
c0014d03:	52                   	push   edx
c0014d04:	50                   	push   eax
c0014d05:	53                   	push   ebx
c0014d06:	e8 bd 5e ff ff       	call   c000abc8 <secondsToDatetime(unsigned long long)>
c0014d0b:	89 d8                	mov    eax,ebx
c0014d0d:	83 c4 14             	add    esp,0x14
c0014d10:	5b                   	pop    ebx
c0014d11:	c2 04 00             	ret    0x4

c0014d14 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0014d14:	56                   	push   esi
c0014d15:	53                   	push   ebx
c0014d16:	83 ec 14             	sub    esp,0x14
c0014d19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014d1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d1f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0014d22:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014d26:	52                   	push   edx
c0014d27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d2f:	50                   	push   eax
c0014d30:	e8 93 5e ff ff       	call   c000abc8 <secondsToDatetime(unsigned long long)>
c0014d35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014d3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014d41:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0014d45:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d49:	89 f0                	mov    eax,esi
c0014d4b:	83 c4 20             	add    esp,0x20
c0014d4e:	5b                   	pop    ebx
c0014d4f:	5e                   	pop    esi
c0014d50:	ff e0                	jmp    eax

c0014d52 <RTC::~RTC()>:
c0014d52:	83 ec 0c             	sub    esp,0xc
c0014d55:	ba cc e5 01 c0       	mov    edx,0xc001e5cc
c0014d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d5e:	89 10                	mov    DWORD PTR [eax],edx
c0014d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d64:	83 ec 0c             	sub    esp,0xc
c0014d67:	50                   	push   eax
c0014d68:	e8 df 5b ff ff       	call   c000a94c <Clock::~Clock()>
c0014d6d:	83 c4 10             	add    esp,0x10
c0014d70:	90                   	nop
c0014d71:	83 c4 0c             	add    esp,0xc
c0014d74:	c3                   	ret    
c0014d75:	90                   	nop

c0014d76 <RTC::~RTC()>:
c0014d76:	83 ec 0c             	sub    esp,0xc
c0014d79:	83 ec 0c             	sub    esp,0xc
c0014d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d80:	e8 cd ff ff ff       	call   c0014d52 <RTC::~RTC()>
c0014d85:	83 c4 10             	add    esp,0x10
c0014d88:	83 ec 08             	sub    esp,0x8
c0014d8b:	68 60 01 00 00       	push   0x160
c0014d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d94:	e8 85 4b ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c0014d99:	83 c4 10             	add    esp,0x10
c0014d9c:	83 c4 0c             	add    esp,0xc
c0014d9f:	c3                   	ret    

c0014da0 <RTC::get_update_in_progress_flag()>:
c0014da0:	83 ec 14             	sub    esp,0x14
c0014da3:	6a 0a                	push   0xa
c0014da5:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014dab:	e8 22 15 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014db0:	83 c4 1c             	add    esp,0x1c
c0014db3:	c0 e8 07             	shr    al,0x7
c0014db6:	c3                   	ret    
c0014db7:	90                   	nop

c0014db8 <RTC::completeRTCRefresh()>:
c0014db8:	55                   	push   ebp
c0014db9:	57                   	push   edi
c0014dba:	56                   	push   esi
c0014dbb:	53                   	push   ebx
c0014dbc:	83 ec 2c             	sub    esp,0x2c
c0014dbf:	8b 1d 8c 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021b8c
c0014dc5:	83 ec 0c             	sub    esp,0xc
c0014dc8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014dcc:	e8 cf ff ff ff       	call   c0014da0 <RTC::get_update_in_progress_flag()>
c0014dd1:	83 c4 10             	add    esp,0x10
c0014dd4:	84 c0                	test   al,al
c0014dd6:	74 0e                	je     c0014de6 <RTC::completeRTCRefresh()+0x2e>
c0014dd8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014dde:	3b 05 8c 1b 02 c0    	cmp    eax,DWORD PTR ds:0xc0021b8c
c0014de4:	73 df                	jae    c0014dc5 <RTC::completeRTCRefresh()+0xd>
c0014de6:	55                   	push   ebp
c0014de7:	55                   	push   ebp
c0014de8:	6a 00                	push   0x0
c0014dea:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014df0:	e8 dd 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014df5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014df9:	58                   	pop    eax
c0014dfa:	5a                   	pop    edx
c0014dfb:	6a 02                	push   0x2
c0014dfd:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014e03:	e8 ca 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014e08:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0014e0c:	59                   	pop    ecx
c0014e0d:	5b                   	pop    ebx
c0014e0e:	6a 04                	push   0x4
c0014e10:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014e16:	e8 b7 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014e1b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0014e1f:	5e                   	pop    esi
c0014e20:	5f                   	pop    edi
c0014e21:	6a 07                	push   0x7
c0014e23:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014e29:	e8 a4 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014e2e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0014e32:	5d                   	pop    ebp
c0014e33:	58                   	pop    eax
c0014e34:	6a 08                	push   0x8
c0014e36:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014e3c:	e8 91 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014e41:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0014e45:	58                   	pop    eax
c0014e46:	5a                   	pop    edx
c0014e47:	6a 09                	push   0x9
c0014e49:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014e4f:	e8 7e 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014e54:	83 c4 10             	add    esp,0x10
c0014e57:	0f b6 e8             	movzx  ebp,al
c0014e5a:	8b 1d 8c 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021b8c
c0014e60:	83 ec 0c             	sub    esp,0xc
c0014e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014e67:	e8 34 ff ff ff       	call   c0014da0 <RTC::get_update_in_progress_flag()>
c0014e6c:	83 c4 10             	add    esp,0x10
c0014e6f:	84 c0                	test   al,al
c0014e71:	74 0e                	je     c0014e81 <RTC::completeRTCRefresh()+0xc9>
c0014e73:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014e79:	3b 05 8c 1b 02 c0    	cmp    eax,DWORD PTR ds:0xc0021b8c
c0014e7f:	73 df                	jae    c0014e60 <RTC::completeRTCRefresh()+0xa8>
c0014e81:	50                   	push   eax
c0014e82:	50                   	push   eax
c0014e83:	6a 00                	push   0x0
c0014e85:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014e8b:	e8 42 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014e90:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0014e94:	58                   	pop    eax
c0014e95:	5a                   	pop    edx
c0014e96:	6a 02                	push   0x2
c0014e98:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014e9e:	e8 2f 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014ea3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014ea7:	59                   	pop    ecx
c0014ea8:	5b                   	pop    ebx
c0014ea9:	6a 04                	push   0x4
c0014eab:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014eb1:	e8 1c 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014eb6:	5e                   	pop    esi
c0014eb7:	88 c3                	mov    bl,al
c0014eb9:	5f                   	pop    edi
c0014eba:	6a 07                	push   0x7
c0014ebc:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014ec2:	e8 0b 14 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014ec7:	89 c6                	mov    esi,eax
c0014ec9:	58                   	pop    eax
c0014eca:	5a                   	pop    edx
c0014ecb:	6a 08                	push   0x8
c0014ecd:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014ed3:	e8 fa 13 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014ed8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014edc:	59                   	pop    ecx
c0014edd:	5f                   	pop    edi
c0014ede:	6a 09                	push   0x9
c0014ee0:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014ee6:	e8 e7 13 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014eeb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014eef:	0f b6 f8             	movzx  edi,al
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0014ef9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014efd:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0014f01:	89 f1                	mov    ecx,esi
c0014f03:	0f 94 c0             	sete   al
c0014f06:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0014f0a:	0f 94 c2             	sete   dl
c0014f0d:	21 d0                	and    eax,edx
c0014f0f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0014f13:	0f 94 c2             	sete   dl
c0014f16:	21 c2                	and    edx,eax
c0014f18:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0014f1c:	0f 94 c0             	sete   al
c0014f1f:	21 d0                	and    eax,edx
c0014f21:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014f25:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0014f29:	0f 94 c1             	sete   cl
c0014f2c:	84 c8                	test   al,cl
c0014f2e:	75 29                	jne    c0014f59 <RTC::completeRTCRefresh()+0x1a1>
c0014f30:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014f34:	89 fd                	mov    ebp,edi
c0014f36:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f3a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0014f3e:	89 f0                	mov    eax,esi
c0014f40:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0014f44:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014f48:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014f4c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014f50:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014f54:	e9 01 ff ff ff       	jmp    c0014e5a <RTC::completeRTCRefresh()+0xa2>
c0014f59:	39 fd                	cmp    ebp,edi
c0014f5b:	75 d3                	jne    c0014f30 <RTC::completeRTCRefresh()+0x178>
c0014f5d:	55                   	push   ebp
c0014f5e:	55                   	push   ebp
c0014f5f:	6a 0b                	push   0xb
c0014f61:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0014f67:	e8 66 13 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0014f6c:	83 c4 10             	add    esp,0x10
c0014f6f:	89 c5                	mov    ebp,eax
c0014f71:	a8 04                	test   al,0x4
c0014f73:	75 78                	jne    c0014fed <RTC::completeRTCRefresh()+0x235>
c0014f75:	b1 0a                	mov    cl,0xa
c0014f77:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0014f7b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014f7f:	83 e2 0f             	and    edx,0xf
c0014f82:	c0 e8 04             	shr    al,0x4
c0014f85:	c1 ef 04             	shr    edi,0x4
c0014f88:	f6 e1                	mul    cl
c0014f8a:	6b ff 0a             	imul   edi,edi,0xa
c0014f8d:	01 d0                	add    eax,edx
c0014f8f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014f93:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014f97:	83 e2 0f             	and    edx,0xf
c0014f9a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014f9e:	c0 e8 04             	shr    al,0x4
c0014fa1:	f6 e1                	mul    cl
c0014fa3:	01 d0                	add    eax,edx
c0014fa5:	88 da                	mov    dl,bl
c0014fa7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014fab:	83 e2 0f             	and    edx,0xf
c0014fae:	88 d8                	mov    al,bl
c0014fb0:	83 e3 80             	and    ebx,0xffffff80
c0014fb3:	c0 e8 04             	shr    al,0x4
c0014fb6:	83 e0 07             	and    eax,0x7
c0014fb9:	f6 e1                	mul    cl
c0014fbb:	01 d0                	add    eax,edx
c0014fbd:	89 f2                	mov    edx,esi
c0014fbf:	09 c3                	or     ebx,eax
c0014fc1:	83 e2 0f             	and    edx,0xf
c0014fc4:	89 f0                	mov    eax,esi
c0014fc6:	c0 e8 04             	shr    al,0x4
c0014fc9:	f6 e1                	mul    cl
c0014fcb:	8d 34 02             	lea    esi,[edx+eax*1]
c0014fce:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014fd2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014fd6:	83 e2 0f             	and    edx,0xf
c0014fd9:	c0 e8 04             	shr    al,0x4
c0014fdc:	f6 e1                	mul    cl
c0014fde:	01 d0                	add    eax,edx
c0014fe0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0014fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014fe8:	83 e0 0f             	and    eax,0xf
c0014feb:	01 c7                	add    edi,eax
c0014fed:	83 e5 02             	and    ebp,0x2
c0014ff0:	75 14                	jne    c0015006 <RTC::completeRTCRefresh()+0x24e>
c0014ff2:	84 db                	test   bl,bl
c0014ff4:	79 10                	jns    c0015006 <RTC::completeRTCRefresh()+0x24e>
c0014ff6:	83 e3 7f             	and    ebx,0x7f
c0014ff9:	b9 18 00 00 00       	mov    ecx,0x18
c0014ffe:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015001:	99                   	cdq    
c0015002:	f7 f9                	idiv   ecx
c0015004:	88 d3                	mov    bl,dl
c0015006:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001500c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015012:	77 06                	ja     c001501a <RTC::completeRTCRefresh()+0x262>
c0015014:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001501a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001501f:	31 d2                	xor    edx,edx
c0015021:	c1 e1 10             	shl    ecx,0x10
c0015024:	89 d7                	mov    edi,edx
c0015026:	c1 e5 10             	shl    ebp,0x10
c0015029:	31 c0                	xor    eax,eax
c001502b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015031:	09 cf                	or     edi,ecx
c0015033:	89 fa                	mov    edx,edi
c0015035:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015039:	88 da                	mov    dl,bl
c001503b:	89 f3                	mov    ebx,esi
c001503d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015041:	88 d8                	mov    al,bl
c0015043:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015047:	0f b7 c8             	movzx  ecx,ax
c001504a:	09 e9                	or     ecx,ebp
c001504c:	89 c8                	mov    eax,ecx
c001504e:	51                   	push   ecx
c001504f:	51                   	push   ecx
c0015050:	52                   	push   edx
c0015051:	50                   	push   eax
c0015052:	e8 e4 59 ff ff       	call   c000aa3b <datetimeToSeconds(datetime_t)>
c0015057:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001505b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015061:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015067:	83 c4 3c             	add    esp,0x3c
c001506a:	5b                   	pop    ebx
c001506b:	5e                   	pop    esi
c001506c:	5f                   	pop    edi
c001506d:	5d                   	pop    ebp
c001506e:	c3                   	ret    
c001506f:	90                   	nop

c0015070 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015070:	55                   	push   ebp
c0015071:	57                   	push   edi
c0015072:	56                   	push   esi
c0015073:	53                   	push   ebx
c0015074:	83 ec 30             	sub    esp,0x30
c0015077:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001507b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001507f:	6a 00                	push   0x0
c0015081:	6a 00                	push   0x0
c0015083:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0015089:	e8 5a 13 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001508e:	83 c4 0c             	add    esp,0xc
c0015091:	6a 00                	push   0x0
c0015093:	6a 02                	push   0x2
c0015095:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c001509b:	e8 48 13 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00150a0:	31 d2                	xor    edx,edx
c00150a2:	89 f9                	mov    ecx,edi
c00150a4:	89 f8                	mov    eax,edi
c00150a6:	c1 e9 10             	shr    ecx,0x10
c00150a9:	0f b6 c4             	movzx  eax,ah
c00150ac:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00150b0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00150b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150b8:	b9 64 00 00 00       	mov    ecx,0x64
c00150bd:	89 f0                	mov    eax,esi
c00150bf:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00150c3:	89 f0                	mov    eax,esi
c00150c5:	0f b6 c4             	movzx  eax,ah
c00150c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00150cc:	89 f0                	mov    eax,esi
c00150ce:	c1 e8 10             	shr    eax,0x10
c00150d1:	66 f7 f1             	div    cx
c00150d4:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00150d9:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00150de:	59                   	pop    ecx
c00150df:	5b                   	pop    ebx
c00150e0:	89 fb                	mov    ebx,edi
c00150e2:	6a 0b                	push   0xb
c00150e4:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c00150ea:	e8 e3 11 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c00150ef:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00150fb:	75 74                	jne    c0015171 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c00150fd:	b2 0a                	mov    dl,0xa
c00150ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015103:	0f b6 c1             	movzx  eax,cl
c0015106:	f6 f2                	div    dl
c0015108:	88 c3                	mov    bl,al
c001510a:	88 e0                	mov    al,ah
c001510c:	c1 e3 04             	shl    ebx,0x4
c001510f:	09 c3                	or     ebx,eax
c0015111:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015116:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001511a:	f6 f2                	div    dl
c001511c:	88 c1                	mov    cl,al
c001511e:	88 e0                	mov    al,ah
c0015120:	c1 e1 04             	shl    ecx,0x4
c0015123:	09 c1                	or     ecx,eax
c0015125:	89 f8                	mov    eax,edi
c0015127:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001512b:	0f b6 c0             	movzx  eax,al
c001512e:	f6 f2                	div    dl
c0015130:	88 c3                	mov    bl,al
c0015132:	88 e0                	mov    al,ah
c0015134:	c1 e3 04             	shl    ebx,0x4
c0015137:	09 c3                	or     ebx,eax
c0015139:	89 f0                	mov    eax,esi
c001513b:	0f b6 c0             	movzx  eax,al
c001513e:	f6 f2                	div    dl
c0015140:	88 c1                	mov    cl,al
c0015142:	88 e0                	mov    al,ah
c0015144:	c1 e1 04             	shl    ecx,0x4
c0015147:	09 c1                	or     ecx,eax
c0015149:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001514e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015152:	f6 f2                	div    dl
c0015154:	88 c1                	mov    cl,al
c0015156:	88 e0                	mov    al,ah
c0015158:	c1 e1 04             	shl    ecx,0x4
c001515b:	09 c1                	or     ecx,eax
c001515d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015162:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015166:	f6 f2                	div    dl
c0015168:	89 c5                	mov    ebp,eax
c001516a:	88 e0                	mov    al,ah
c001516c:	c1 e5 04             	shl    ebp,0x4
c001516f:	09 c5                	or     ebp,eax
c0015171:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015176:	75 17                	jne    c001518f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015178:	80 fb 0b             	cmp    bl,0xb
c001517b:	76 0c                	jbe    c0015189 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c001517d:	80 eb 0c             	sub    bl,0xc
c0015180:	75 02                	jne    c0015184 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015182:	b3 0c                	mov    bl,0xc
c0015184:	83 cb 80             	or     ebx,0xffffff80
c0015187:	eb 06                	jmp    c001518f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015189:	84 db                	test   bl,bl
c001518b:	75 02                	jne    c001518f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001518d:	b3 0c                	mov    bl,0xc
c001518f:	0f b6 db             	movzx  ebx,bl
c0015192:	50                   	push   eax
c0015193:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015198:	50                   	push   eax
c0015199:	6a 00                	push   0x0
c001519b:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c00151a1:	e8 42 12 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00151a6:	83 c4 0c             	add    esp,0xc
c00151a9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00151ae:	50                   	push   eax
c00151af:	6a 02                	push   0x2
c00151b1:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c00151b7:	e8 2c 12 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00151bc:	83 c4 0c             	add    esp,0xc
c00151bf:	53                   	push   ebx
c00151c0:	6a 04                	push   0x4
c00151c2:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c00151c8:	e8 1b 12 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00151cd:	83 c4 0c             	add    esp,0xc
c00151d0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00151d5:	50                   	push   eax
c00151d6:	6a 07                	push   0x7
c00151d8:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c00151de:	e8 05 12 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00151e3:	83 c4 0c             	add    esp,0xc
c00151e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00151eb:	50                   	push   eax
c00151ec:	6a 08                	push   0x8
c00151ee:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c00151f4:	e8 ef 11 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00151f9:	83 c4 0c             	add    esp,0xc
c00151fc:	89 e8                	mov    eax,ebp
c00151fe:	0f b6 e8             	movzx  ebp,al
c0015201:	55                   	push   ebp
c0015202:	6a 09                	push   0x9
c0015204:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c001520a:	e8 d9 11 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001520f:	5a                   	pop    edx
c0015210:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015214:	e8 9f fb ff ff       	call   c0014db8 <RTC::completeRTCRefresh()>
c0015219:	83 c4 3c             	add    esp,0x3c
c001521c:	b0 01                	mov    al,0x1
c001521e:	5b                   	pop    ebx
c001521f:	5e                   	pop    esi
c0015220:	5f                   	pop    edi
c0015221:	5d                   	pop    ebp
c0015222:	c3                   	ret    

c0015223 <rtcIRQHandler(regs*, void*)>:
c0015223:	53                   	push   ebx
c0015224:	83 ec 10             	sub    esp,0x10
c0015227:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001522b:	6a 0c                	push   0xc
c001522d:	ff 35 a8 f5 01 c0    	push   DWORD PTR ds:0xc001f5a8
c0015233:	e8 9a 10 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	84 c0                	test   al,al
c001523d:	79 24                	jns    c0015263 <rtcIRQHandler(regs*, void*)+0x40>
c001523f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015246:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001524d:	66 ff 05 34 2b 02 c0 	inc    WORD PTR ds:0xc0022b34
c0015254:	75 0d                	jne    c0015263 <rtcIRQHandler(regs*, void*)+0x40>
c0015256:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001525a:	83 c4 08             	add    esp,0x8
c001525d:	5b                   	pop    ebx
c001525e:	e9 55 fb ff ff       	jmp    c0014db8 <RTC::completeRTCRefresh()>
c0015263:	83 c4 08             	add    esp,0x8
c0015266:	5b                   	pop    ebx
c0015267:	c3                   	ret    

c0015268 <RTC::RTC()>:
c0015268:	83 ec 1c             	sub    esp,0x1c
c001526b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001526f:	83 ec 08             	sub    esp,0x8
c0015272:	68 af e5 01 c0       	push   0xc001e5af
c0015277:	50                   	push   eax
c0015278:	e8 99 56 ff ff       	call   c000a916 <Clock::Clock(char const*)>
c001527d:	83 c4 10             	add    esp,0x10
c0015280:	ba cc e5 01 c0       	mov    edx,0xc001e5cc
c0015285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015289:	89 10                	mov    DWORD PTR [eax],edx
c001528b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001528f:	83 ec 0c             	sub    esp,0xc
c0015292:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015296:	6a 01                	push   0x1
c0015298:	68 23 52 01 c0       	push   0xc0015223
c001529d:	6a 08                	push   0x8
c001529f:	50                   	push   eax
c00152a0:	e8 5b 5b ff ff       	call   c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00152a5:	83 c4 20             	add    esp,0x20
c00152a8:	89 c2                	mov    edx,eax
c00152aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ae:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00152b4:	fa                   	cli    
c00152b5:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c00152ba:	40                   	inc    eax
c00152bb:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c00152c0:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00152c5:	83 ec 08             	sub    esp,0x8
c00152c8:	6a 0b                	push   0xb
c00152ca:	50                   	push   eax
c00152cb:	e8 02 10 ff ff       	call   c00062d2 <Computer::readCMOS(unsigned char)>
c00152d0:	83 c4 10             	add    esp,0x10
c00152d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152d7:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c00152dc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00152e0:	83 ca 10             	or     edx,0x10
c00152e3:	81 e2 ff 00 00 00    	and    edx,0xff
c00152e9:	83 ec 04             	sub    esp,0x4
c00152ec:	52                   	push   edx
c00152ed:	6a 0b                	push   0xb
c00152ef:	50                   	push   eax
c00152f0:	e8 f3 10 ff ff       	call   c00063e8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00152f5:	83 c4 10             	add    esp,0x10
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152ff:	e8 b4 fa ff ff       	call   c0014db8 <RTC::completeRTCRefresh()>
c0015304:	83 c4 10             	add    esp,0x10
c0015307:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c001530c:	48                   	dec    eax
c001530d:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c0015312:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c0015317:	85 c0                	test   eax,eax
c0015319:	75 01                	jne    c001531c <RTC::RTC()+0xb4>
c001531b:	fb                   	sti    
c001531c:	90                   	nop
c001531d:	83 c4 1c             	add    esp,0x1c
c0015320:	c3                   	ret    
c0015321:	66 90                	xchg   ax,ax
c0015323:	90                   	nop

c0015324 <HalConsoleScroll(int, int)>:
c0015324:	83 ec 10             	sub    esp,0x10
c0015327:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001532f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015337:	90                   	nop
c0015338:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001533d:	0f 8f e1 00 00 00    	jg     c0015424 <HalConsoleScroll(int, int)+0x100>
c0015343:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001534b:	90                   	nop
c001534c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015354:	0f 8f be 00 00 00    	jg     c0015418 <HalConsoleScroll(int, int)+0xf4>
c001535a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001535e:	89 d0                	mov    eax,edx
c0015360:	c1 e0 02             	shl    eax,0x2
c0015363:	01 d0                	add    eax,edx
c0015365:	c1 e0 05             	shl    eax,0x5
c0015368:	89 c2                	mov    edx,eax
c001536a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001536e:	01 d0                	add    eax,edx
c0015370:	89 c2                	mov    edx,eax
c0015372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015376:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015379:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001537d:	89 d0                	mov    eax,edx
c001537f:	c1 e0 02             	shl    eax,0x2
c0015382:	01 d0                	add    eax,edx
c0015384:	c1 e0 05             	shl    eax,0x5
c0015387:	89 c2                	mov    edx,eax
c0015389:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001538d:	01 d0                	add    eax,edx
c001538f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015395:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015399:	01 c2                	add    edx,eax
c001539b:	8a 01                	mov    al,BYTE PTR [ecx]
c001539d:	88 02                	mov    BYTE PTR [edx],al
c001539f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00153a4:	75 66                	jne    c001540c <HalConsoleScroll(int, int)+0xe8>
c00153a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153aa:	83 e0 01             	and    eax,0x1
c00153ad:	74 39                	je     c00153e8 <HalConsoleScroll(int, int)+0xc4>
c00153af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00153b3:	83 e0 0f             	and    eax,0xf
c00153b6:	88 c2                	mov    dl,al
c00153b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153bc:	c1 e0 04             	shl    eax,0x4
c00153bf:	88 d1                	mov    cl,dl
c00153c1:	09 c1                	or     ecx,eax
c00153c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153c7:	89 d0                	mov    eax,edx
c00153c9:	c1 e0 02             	shl    eax,0x2
c00153cc:	01 d0                	add    eax,edx
c00153ce:	c1 e0 05             	shl    eax,0x5
c00153d1:	89 c2                	mov    edx,eax
c00153d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153d7:	01 d0                	add    eax,edx
c00153d9:	89 c2                	mov    edx,eax
c00153db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153df:	01 d0                	add    eax,edx
c00153e1:	88 ca                	mov    dl,cl
c00153e3:	88 10                	mov    BYTE PTR [eax],dl
c00153e5:	eb 25                	jmp    c001540c <HalConsoleScroll(int, int)+0xe8>
c00153e7:	90                   	nop
c00153e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153ec:	89 d0                	mov    eax,edx
c00153ee:	c1 e0 02             	shl    eax,0x2
c00153f1:	01 d0                	add    eax,edx
c00153f3:	c1 e0 05             	shl    eax,0x5
c00153f6:	89 c2                	mov    edx,eax
c00153f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153fc:	01 d0                	add    eax,edx
c00153fe:	89 c2                	mov    edx,eax
c0015400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015404:	01 d0                	add    eax,edx
c0015406:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015409:	8d 76 00             	lea    esi,[esi+0x0]
c001540c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015410:	e9 37 ff ff ff       	jmp    c001534c <HalConsoleScroll(int, int)+0x28>
c0015415:	8d 76 00             	lea    esi,[esi+0x0]
c0015418:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001541c:	e9 17 ff ff ff       	jmp    c0015338 <HalConsoleScroll(int, int)+0x14>
c0015421:	8d 76 00             	lea    esi,[esi+0x0]
c0015424:	90                   	nop
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	c3                   	ret    
c0015429:	8d 76 00             	lea    esi,[esi+0x0]

c001542c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001542c:	83 ec 14             	sub    esp,0x14
c001542f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015433:	88 04 24             	mov    BYTE PTR [esp],al
c0015436:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015439:	25 ff 00 00 00       	and    eax,0xff
c001543e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015442:	89 d1                	mov    ecx,edx
c0015444:	83 e1 0f             	and    ecx,0xf
c0015447:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001544b:	c1 e2 04             	shl    edx,0x4
c001544e:	81 e2 ff 00 00 00    	and    edx,0xff
c0015454:	09 ca                	or     edx,ecx
c0015456:	c1 e2 08             	shl    edx,0x8
c0015459:	09 d0                	or     eax,edx
c001545b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015460:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015468:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001546c:	89 d0                	mov    eax,edx
c001546e:	c1 e0 02             	shl    eax,0x2
c0015471:	01 d0                	add    eax,edx
c0015473:	c1 e0 04             	shl    eax,0x4
c0015476:	89 c2                	mov    edx,eax
c0015478:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001547c:	01 d0                	add    eax,edx
c001547e:	01 c0                	add    eax,eax
c0015480:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015484:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015488:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001548d:	66 89 02             	mov    WORD PTR [edx],ax
c0015490:	90                   	nop
c0015491:	83 c4 14             	add    esp,0x14
c0015494:	c3                   	ret    
c0015495:	8d 76 00             	lea    esi,[esi+0x0]

c0015498 <HalConsoleCursorUpdate(int, int)>:
c0015498:	83 ec 20             	sub    esp,0x20
c001549b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001549f:	89 c2                	mov    edx,eax
c00154a1:	89 d0                	mov    eax,edx
c00154a3:	c1 e0 02             	shl    eax,0x2
c00154a6:	01 d0                	add    eax,edx
c00154a8:	c1 e0 04             	shl    eax,0x4
c00154ab:	89 c2                	mov    edx,eax
c00154ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154b1:	01 d0                	add    eax,edx
c00154b3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00154b8:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00154bf:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00154c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00154c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154cc:	ee                   	out    dx,al
c00154cd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00154d2:	25 ff 00 00 00       	and    eax,0xff
c00154d7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00154de:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00154e2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00154e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00154ea:	ee                   	out    dx,al
c00154eb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00154f2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00154f7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00154fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154ff:	ee                   	out    dx,al
c0015500:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015505:	66 c1 e8 08          	shr    ax,0x8
c0015509:	25 ff 00 00 00       	and    eax,0xff
c001550e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015515:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015519:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001551d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015521:	ee                   	out    dx,al
c0015522:	90                   	nop
c0015523:	83 c4 20             	add    esp,0x20
c0015526:	c3                   	ret    
c0015527:	90                   	nop

c0015528 <FAT::getName()>:
c0015528:	b8 00 e6 01 c0       	mov    eax,0xc001e600
c001552d:	c3                   	ret    
c001552e:	66 90                	xchg   ax,ax

c0015530 <FAT::tell(void*, unsigned long long*)>:
c0015530:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015535:	75 09                	jne    c0015540 <FAT::tell(void*, unsigned long long*)+0x10>
c0015537:	b8 04 00 00 00       	mov    eax,0x4
c001553c:	c3                   	ret    
c001553d:	8d 76 00             	lea    esi,[esi+0x0]
c0015540:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015545:	75 09                	jne    c0015550 <FAT::tell(void*, unsigned long long*)+0x20>
c0015547:	b8 04 00 00 00       	mov    eax,0x4
c001554c:	c3                   	ret    
c001554d:	8d 76 00             	lea    esi,[esi+0x0]
c0015550:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015554:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015557:	ba 00 00 00 00       	mov    edx,0x0
c001555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015560:	89 01                	mov    DWORD PTR [ecx],eax
c0015562:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015565:	b8 00 00 00 00       	mov    eax,0x0
c001556a:	c3                   	ret    
c001556b:	90                   	nop

c001556c <FAT::stat(void*, unsigned long long*)>:
c001556c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015571:	75 09                	jne    c001557c <FAT::stat(void*, unsigned long long*)+0x10>
c0015573:	b8 04 00 00 00       	mov    eax,0x4
c0015578:	c3                   	ret    
c0015579:	8d 76 00             	lea    esi,[esi+0x0]
c001557c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015581:	75 09                	jne    c001558c <FAT::stat(void*, unsigned long long*)+0x20>
c0015583:	b8 04 00 00 00       	mov    eax,0x4
c0015588:	c3                   	ret    
c0015589:	8d 76 00             	lea    esi,[esi+0x0]
c001558c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015590:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015593:	ba 00 00 00 00       	mov    edx,0x0
c0015598:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001559c:	89 01                	mov    DWORD PTR [ecx],eax
c001559e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00155a1:	b8 00 00 00 00       	mov    eax,0x0
c00155a6:	c3                   	ret    
c00155a7:	90                   	nop

c00155a8 <FAT::~FAT()>:
c00155a8:	83 ec 0c             	sub    esp,0xc
c00155ab:	ba 4c e6 01 c0       	mov    edx,0xc001e64c
c00155b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155b4:	89 10                	mov    DWORD PTR [eax],edx
c00155b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155ba:	83 ec 0c             	sub    esp,0xc
c00155bd:	50                   	push   eax
c00155be:	e8 97 47 ff ff       	call   c0009d5a <Filesystem::~Filesystem()>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	90                   	nop
c00155c7:	83 c4 0c             	add    esp,0xc
c00155ca:	c3                   	ret    
c00155cb:	90                   	nop

c00155cc <FAT::~FAT()>:
c00155cc:	83 ec 0c             	sub    esp,0xc
c00155cf:	83 ec 0c             	sub    esp,0xc
c00155d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155d6:	e8 cd ff ff ff       	call   c00155a8 <FAT::~FAT()>
c00155db:	83 c4 10             	add    esp,0x10
c00155de:	83 ec 08             	sub    esp,0x8
c00155e1:	6a 08                	push   0x8
c00155e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155e7:	e8 32 43 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c00155ec:	83 c4 10             	add    esp,0x10
c00155ef:	83 c4 0c             	add    esp,0xc
c00155f2:	c3                   	ret    
c00155f3:	90                   	nop

c00155f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00155f4:	83 ec 1c             	sub    esp,0x1c
c00155f7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00155fe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015607:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c001560e:	83 f8 ff             	cmp    eax,0xffffffff
c0015611:	75 35                	jne    c0015648 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0015613:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015617:	88 c2                	mov    dl,al
c0015619:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c001561e:	01 d0                	add    eax,edx
c0015620:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015624:	8b 15 40 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022b40
c001562a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001562e:	89 14 85 60 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd4a0],edx
c0015635:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c001563a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001563e:	89 14 85 e0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd420],edx
c0015645:	eb 19                	jmp    c0015660 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0015647:	90                   	nop
c0015648:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001564c:	88 c2                	mov    dl,al
c001564e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015652:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c0015659:	01 d0                	add    eax,edx
c001565b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001565f:	90                   	nop
c0015660:	83 ec 04             	sub    esp,0x4
c0015663:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015667:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001566b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001566f:	50                   	push   eax
c0015670:	e8 0c f6 fe ff       	call   c0004c81 <f_getlabel>
c0015675:	83 c4 10             	add    esp,0x10
c0015678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001567c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015681:	75 09                	jne    c001568c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0015683:	b8 00 00 00 00       	mov    eax,0x0
c0015688:	eb 0a                	jmp    c0015694 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001568a:	66 90                	xchg   ax,ax
c001568c:	b8 01 00 00 00       	mov    eax,0x1
c0015691:	8d 76 00             	lea    esi,[esi+0x0]
c0015694:	83 c4 1c             	add    esp,0x1c
c0015697:	c3                   	ret    

c0015698 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0015698:	57                   	push   edi
c0015699:	83 ec 58             	sub    esp,0x58
c001569c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00156a4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00156a8:	b8 00 00 00 00       	mov    eax,0x0
c00156ad:	b9 0f 00 00 00       	mov    ecx,0xf
c00156b2:	fc                   	cld    
c00156b3:	89 d7                	mov    edi,edx
c00156b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00156b7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00156bb:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c00156c2:	83 f8 ff             	cmp    eax,0xffffffff
c00156c5:	75 35                	jne    c00156fc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00156c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00156cb:	88 c2                	mov    dl,al
c00156cd:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c00156d2:	01 d0                	add    eax,edx
c00156d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00156d8:	8b 15 40 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022b40
c00156de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00156e2:	89 14 85 60 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd4a0],edx
c00156e9:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c00156ee:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00156f2:	89 14 85 e0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd420],edx
c00156f9:	eb 19                	jmp    c0015714 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00156fb:	90                   	nop
c00156fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015700:	88 c2                	mov    dl,al
c0015702:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015706:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c001570d:	01 d0                	add    eax,edx
c001570f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015713:	90                   	nop
c0015714:	83 ec 08             	sub    esp,0x8
c0015717:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001571b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001571f:	50                   	push   eax
c0015720:	e8 bb b0 fe ff       	call   c00007e0 <strcat>
c0015725:	83 c4 10             	add    esp,0x10
c0015728:	83 ec 0c             	sub    esp,0xc
c001572b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001572f:	50                   	push   eax
c0015730:	e8 9d f6 fe ff       	call   c0004dd2 <f_setlabel>
c0015735:	83 c4 10             	add    esp,0x10
c0015738:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001573c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0015741:	75 09                	jne    c001574c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0015743:	b8 00 00 00 00       	mov    eax,0x0
c0015748:	eb 0a                	jmp    c0015754 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001574a:	66 90                	xchg   ax,ax
c001574c:	b8 01 00 00 00       	mov    eax,0x1
c0015751:	8d 76 00             	lea    esi,[esi+0x0]
c0015754:	83 c4 58             	add    esp,0x58
c0015757:	5f                   	pop    edi
c0015758:	c3                   	ret    
c0015759:	90                   	nop
c001575a:	66 90                	xchg   ax,ax

c001575c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001575c:	83 ec 2c             	sub    esp,0x2c
c001575f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015767:	83 ec 08             	sub    esp,0x8
c001576a:	68 24 e6 01 c0       	push   0xc001e624
c001576f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015773:	e8 88 af fe ff       	call   c0000700 <strcmp>
c0015778:	83 c4 10             	add    esp,0x10
c001577b:	85 c0                	test   eax,eax
c001577d:	0f 94 c0             	sete   al
c0015780:	84 c0                	test   al,al
c0015782:	74 10                	je     c0015794 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0015784:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001578c:	e9 b3 00 00 00       	jmp    c0015844 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015791:	8d 76 00             	lea    esi,[esi+0x0]
c0015794:	83 ec 08             	sub    esp,0x8
c0015797:	68 16 e6 01 c0       	push   0xc001e616
c001579c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157a0:	e8 5b af fe ff       	call   c0000700 <strcmp>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	85 c0                	test   eax,eax
c00157aa:	0f 94 c0             	sete   al
c00157ad:	84 c0                	test   al,al
c00157af:	74 0f                	je     c00157c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00157b1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00157b9:	e9 86 00 00 00       	jmp    c0015844 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00157be:	66 90                	xchg   ax,ax
c00157c0:	83 ec 08             	sub    esp,0x8
c00157c3:	68 1c e6 01 c0       	push   0xc001e61c
c00157c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157cc:	e8 2f af fe ff       	call   c0000700 <strcmp>
c00157d1:	83 c4 10             	add    esp,0x10
c00157d4:	85 c0                	test   eax,eax
c00157d6:	0f 94 c0             	sete   al
c00157d9:	84 c0                	test   al,al
c00157db:	74 0b                	je     c00157e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00157dd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00157e5:	eb 5d                	jmp    c0015844 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00157e7:	90                   	nop
c00157e8:	83 ec 08             	sub    esp,0x8
c00157eb:	68 9c c5 01 c0       	push   0xc001c59c
c00157f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157f4:	e8 07 af fe ff       	call   c0000700 <strcmp>
c00157f9:	83 c4 10             	add    esp,0x10
c00157fc:	85 c0                	test   eax,eax
c00157fe:	0f 94 c0             	sete   al
c0015801:	84 c0                	test   al,al
c0015803:	74 0b                	je     c0015810 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0015805:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001580d:	eb 35                	jmp    c0015844 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001580f:	90                   	nop
c0015810:	83 ec 08             	sub    esp,0x8
c0015813:	68 22 e6 01 c0       	push   0xc001e622
c0015818:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001581c:	e8 df ae fe ff       	call   c0000700 <strcmp>
c0015821:	83 c4 10             	add    esp,0x10
c0015824:	85 c0                	test   eax,eax
c0015826:	0f 94 c0             	sete   al
c0015829:	84 c0                	test   al,al
c001582b:	74 0b                	je     c0015838 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001582d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0015835:	eb 0d                	jmp    c0015844 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015837:	90                   	nop
c0015838:	b8 08 00 00 00       	mov    eax,0x8
c001583d:	e9 ea 00 00 00       	jmp    c001592c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015842:	66 90                	xchg   ax,ax
c0015844:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001584b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015850:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015854:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c001585b:	83 f8 ff             	cmp    eax,0xffffffff
c001585e:	75 34                	jne    c0015894 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0015860:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0015864:	88 c2                	mov    dl,al
c0015866:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c001586b:	01 d0                	add    eax,edx
c001586d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0015871:	8b 15 40 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022b40
c0015877:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001587b:	89 14 85 60 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd4a0],edx
c0015882:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c0015887:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001588b:	89 14 85 e0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd420],edx
c0015892:	eb 18                	jmp    c00158ac <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0015894:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0015898:	88 c2                	mov    dl,al
c001589a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001589e:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c00158a5:	01 d0                	add    eax,edx
c00158a7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00158ab:	90                   	nop
c00158ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158b0:	88 04 24             	mov    BYTE PTR [esp],al
c00158b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00158b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00158c3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00158c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00158d0:	83 ec 0c             	sub    esp,0xc
c00158d3:	68 00 20 00 00       	push   0x2000
c00158d8:	e8 74 13 ff ff       	call   c0006c51 <malloc>
c00158dd:	83 c4 10             	add    esp,0x10
c00158e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00158e4:	68 00 20 00 00       	push   0x2000
c00158e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c00158f1:	50                   	push   eax
c00158f2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00158f6:	50                   	push   eax
c00158f7:	e8 c6 f7 fe ff       	call   c00050c2 <f_mkfs>
c00158fc:	83 c4 10             	add    esp,0x10
c00158ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015903:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015908:	75 0a                	jne    c0015914 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001590a:	b8 00 00 00 00       	mov    eax,0x0
c001590f:	eb 1b                	jmp    c001592c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015911:	8d 76 00             	lea    esi,[esi+0x0]
c0015914:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0015919:	75 09                	jne    c0015924 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001591b:	b8 09 00 00 00       	mov    eax,0x9
c0015920:	eb 0a                	jmp    c001592c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015922:	66 90                	xchg   ax,ax
c0015924:	b8 01 00 00 00       	mov    eax,0x1
c0015929:	8d 76 00             	lea    esi,[esi+0x0]
c001592c:	83 c4 2c             	add    esp,0x2c
c001592f:	c3                   	ret    

c0015930 <FAT::tryMount(LogicalDisk*, int)>:
c0015930:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0015936:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c001593b:	83 f8 14             	cmp    eax,0x14
c001593e:	75 18                	jne    c0015958 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	68 28 e6 01 c0       	push   0xc001e628
c0015948:	e8 1a 9c ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	b0 00                	mov    al,0x0
c0015952:	e9 e9 01 00 00       	jmp    c0015b40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015957:	90                   	nop
c0015958:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001595f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015965:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001596b:	3d 00 02 00 00       	cmp    eax,0x200
c0015970:	74 0a                	je     c001597c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0015972:	b0 00                	mov    al,0x0
c0015974:	e9 c7 01 00 00       	jmp    c0015b40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015979:	8d 76 00             	lea    esi,[esi+0x0]
c001597c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0015984:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001598b:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c0015992:	83 f8 ff             	cmp    eax,0xffffffff
c0015995:	74 09                	je     c00159a0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0015997:	b0 01                	mov    al,0x1
c0015999:	e9 a2 01 00 00       	jmp    c0015b40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001599e:	66 90                	xchg   ax,ax
c00159a0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00159aa:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00159b2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00159b9:	88 c2                	mov    dl,al
c00159bb:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c00159c0:	01 d0                	add    eax,edx
c00159c2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00159c9:	8b 15 40 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022b40
c00159cf:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00159d6:	89 14 85 60 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd4a0],edx
c00159dd:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c00159e2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00159e9:	89 14 85 e0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd420],edx
c00159f0:	83 ec 0c             	sub    esp,0xc
c00159f3:	68 34 02 00 00       	push   0x234
c00159f8:	e8 54 12 ff ff       	call   c0006c51 <malloc>
c00159fd:	83 c4 10             	add    esp,0x10
c0015a00:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0015a07:	83 ec 04             	sub    esp,0x4
c0015a0a:	6a 00                	push   0x0
c0015a0c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015a13:	50                   	push   eax
c0015a14:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015a1b:	e8 c8 de fe ff       	call   c00038e8 <f_mount>
c0015a20:	83 c4 10             	add    esp,0x10
c0015a23:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0015a2a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0015a32:	74 1c                	je     c0015a50 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015a3e:	e8 2e 12 ff ff       	call   c0006c71 <rfree>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	b0 00                	mov    al,0x0
c0015a48:	e9 f3 00 00 00       	jmp    c0015b40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a50:	83 ec 04             	sub    esp,0x4
c0015a53:	68 00 01 00 00       	push   0x100
c0015a58:	6a 00                	push   0x0
c0015a5a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015a61:	50                   	push   eax
c0015a62:	e8 89 aa fe ff       	call   c00004f0 <memset>
c0015a67:	83 c4 10             	add    esp,0x10
c0015a6a:	83 ec 08             	sub    esp,0x8
c0015a6d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015a74:	50                   	push   eax
c0015a75:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015a7c:	50                   	push   eax
c0015a7d:	e8 5e ad fe ff       	call   c00007e0 <strcat>
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	83 ec 08             	sub    esp,0x8
c0015a88:	68 36 e6 01 c0       	push   0xc001e636
c0015a8d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015a94:	50                   	push   eax
c0015a95:	e8 46 ad fe ff       	call   c00007e0 <strcat>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	83 ec 04             	sub    esp,0x4
c0015aa0:	6a 01                	push   0x1
c0015aa2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0015aa9:	50                   	push   eax
c0015aaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015aae:	50                   	push   eax
c0015aaf:	e8 96 de fe ff       	call   c000394a <f_open>
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0015abe:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0015ac5:	85 c0                	test   eax,eax
c0015ac7:	74 0b                	je     c0015ad4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0015ac9:	78 31                	js     c0015afc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015acb:	83 e8 04             	sub    eax,0x4
c0015ace:	83 f8 01             	cmp    eax,0x1
c0015ad1:	77 29                	ja     c0015afc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015ad3:	90                   	nop
c0015ad4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0015adc:	83 ec 0c             	sub    esp,0xc
c0015adf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015ae3:	50                   	push   eax
c0015ae4:	e8 14 e6 fe ff       	call   c00040fd <f_close>
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	90                   	nop
c0015aed:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0015af5:	74 41                	je     c0015b38 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0015af7:	eb 33                	jmp    c0015b2c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0015af9:	8d 76 00             	lea    esi,[esi+0x0]
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015b06:	e8 66 11 ff ff       	call   c0006c71 <rfree>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	83 ec 04             	sub    esp,0x4
c0015b11:	6a 00                	push   0x0
c0015b13:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015b1a:	50                   	push   eax
c0015b1b:	6a 00                	push   0x0
c0015b1d:	e8 c6 dd fe ff       	call   c00038e8 <f_mount>
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	b0 00                	mov    al,0x0
c0015b27:	eb 17                	jmp    c0015b40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015b29:	8d 76 00             	lea    esi,[esi+0x0]
c0015b2c:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c0015b31:	40                   	inc    eax
c0015b32:	a3 40 2b 02 c0       	mov    ds:0xc0022b40,eax
c0015b37:	90                   	nop
c0015b38:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0015b3f:	90                   	nop
c0015b40:	81 c4 4c 03 00 00    	add    esp,0x34c
c0015b46:	c3                   	ret    
c0015b47:	90                   	nop

c0015b48 <FAT::allocateSwapfile(char const*, int)>:
c0015b48:	55                   	push   ebp
c0015b49:	57                   	push   edi
c0015b4a:	56                   	push   esi
c0015b4b:	53                   	push   ebx
c0015b4c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0015b52:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0015b5d:	83 ec 0c             	sub    esp,0xc
c0015b60:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0015b67:	e8 e5 10 ff ff       	call   c0006c51 <malloc>
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	89 c7                	mov    edi,eax
c0015b71:	a1 b0 2a 02 c0       	mov    eax,ds:0xc0022ab0
c0015b76:	83 ec 04             	sub    esp,0x4
c0015b79:	50                   	push   eax
c0015b7a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0015b81:	57                   	push   edi
c0015b82:	e8 03 44 ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0015b91:	83 ec 04             	sub    esp,0x4
c0015b94:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015b98:	50                   	push   eax
c0015b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015b9d:	50                   	push   eax
c0015b9e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015ba5:	e8 4c 47 ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c0015baa:	83 c4 10             	add    esp,0x10
c0015bad:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015bb4:	c1 e0 14             	shl    eax,0x14
c0015bb7:	89 c7                	mov    edi,eax
c0015bb9:	89 c5                	mov    ebp,eax
c0015bbb:	c1 fd 1f             	sar    ebp,0x1f
c0015bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015bc6:	89 f9                	mov    ecx,edi
c0015bc8:	31 c1                	xor    ecx,eax
c0015bca:	89 cb                	mov    ebx,ecx
c0015bcc:	89 e9                	mov    ecx,ebp
c0015bce:	31 d1                	xor    ecx,edx
c0015bd0:	89 ce                	mov    esi,ecx
c0015bd2:	89 f0                	mov    eax,esi
c0015bd4:	09 d8                	or     eax,ebx
c0015bd6:	0f 84 9c 00 00 00    	je     c0015c78 <FAT::allocateSwapfile(char const*, int)+0x130>
c0015bdc:	83 ec 0c             	sub    esp,0xc
c0015bdf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015be6:	e8 d7 45 ff ff       	call   c000a1c2 <File::unlink()>
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	83 ec 08             	sub    esp,0x8
c0015bf1:	6a 12                	push   0x12
c0015bf3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015bfa:	e8 4b 44 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015c09:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015c0f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015c16:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015c1d:	c1 e0 14             	shl    eax,0x14
c0015c20:	83 ec 04             	sub    esp,0x4
c0015c23:	6a 01                	push   0x1
c0015c25:	50                   	push   eax
c0015c26:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0015c2d:	e8 30 f3 fe ff       	call   c0004f62 <f_expand>
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3e:	83 c0 10             	add    eax,0x10
c0015c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c43:	83 ec 0c             	sub    esp,0xc
c0015c46:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015c4a:	52                   	push   edx
c0015c4b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0015c4f:	52                   	push   edx
c0015c50:	6a 00                	push   0x0
c0015c52:	68 00 04 00 00       	push   0x400
c0015c57:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015c5e:	ff d0                	call   eax
c0015c60:	83 c4 20             	add    esp,0x20
c0015c63:	83 ec 0c             	sub    esp,0xc
c0015c66:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015c6d:	e8 36 44 ff ff       	call   c000a0a8 <File::close()>
c0015c72:	83 c4 10             	add    esp,0x10
c0015c75:	8d 76 00             	lea    esi,[esi+0x0]
c0015c78:	83 ec 08             	sub    esp,0x8
c0015c7b:	6a 01                	push   0x1
c0015c7d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015c84:	e8 c1 43 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c95:	83 c0 0c             	add    eax,0xc
c0015c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9a:	83 ec 0c             	sub    esp,0xc
c0015c9d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015ca1:	52                   	push   edx
c0015ca2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0015ca6:	52                   	push   edx
c0015ca7:	6a 00                	push   0x0
c0015ca9:	6a 04                	push   0x4
c0015cab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015cb2:	ff d0                	call   eax
c0015cb4:	83 c4 20             	add    esp,0x20
c0015cb7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015cbe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015cc4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015ccb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0015cd2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015cd5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015ce6:	e8 bd 43 ff ff       	call   c000a0a8 <File::close()>
c0015ceb:	83 c4 10             	add    esp,0x10
c0015cee:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0015cf5:	ba 00 00 00 00       	mov    edx,0x0
c0015cfa:	81 c4 3c 04 00 00    	add    esp,0x43c
c0015d00:	5b                   	pop    ebx
c0015d01:	5e                   	pop    esi
c0015d02:	5f                   	pop    edi
c0015d03:	5d                   	pop    ebp
c0015d04:	c3                   	ret    
c0015d05:	90                   	nop
c0015d06:	66 90                	xchg   ax,ax

c0015d08 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0015d08:	57                   	push   edi
c0015d09:	56                   	push   esi
c0015d0a:	53                   	push   ebx
c0015d0b:	81 ec 50 02 00 00    	sub    esp,0x250
c0015d11:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0015d19:	74 0d                	je     c0015d28 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0015d1b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0015d23:	75 0f                	jne    c0015d34 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0015d25:	8d 76 00             	lea    esi,[esi+0x0]
c0015d28:	b8 04 00 00 00       	mov    eax,0x4
c0015d2d:	e9 36 01 00 00       	jmp    c0015e68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015d32:	66 90                	xchg   ax,ax
c0015d34:	83 ec 08             	sub    esp,0x8
c0015d37:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015d3e:	50                   	push   eax
c0015d3f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0015d46:	e8 75 e6 fe ff       	call   c00043c0 <f_readdir>
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0015d55:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0015d66:	83 c0 16             	add    eax,0x16
c0015d69:	50                   	push   eax
c0015d6a:	e8 f1 a7 fe ff       	call   c0000560 <strlen>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	ba 00 00 00 00       	mov    edx,0x0
c0015d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d7b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015d7f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0015d86:	25 ff 00 00 00       	and    eax,0xff
c0015d8b:	83 e0 10             	and    eax,0x10
c0015d8e:	74 08                	je     c0015d98 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0015d90:	b8 02 00 00 00       	mov    eax,0x2
c0015d95:	eb 09                	jmp    c0015da0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0015d97:	90                   	nop
c0015d98:	b8 01 00 00 00       	mov    eax,0x1
c0015d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015da0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015da4:	83 ec 08             	sub    esp,0x8
c0015da7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015dae:	83 c0 16             	add    eax,0x16
c0015db1:	50                   	push   eax
c0015db2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015db6:	83 c0 10             	add    eax,0x10
c0015db9:	50                   	push   eax
c0015dba:	e8 61 a8 fe ff       	call   c0000620 <strcpy>
c0015dbf:	83 c4 10             	add    esp,0x10
c0015dc2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0015dc9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0015dd0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015dd4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0015ddb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0015de2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0015de9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0015df0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0015df7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0015dfe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0015e05:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0015e0c:	89 c6                	mov    esi,eax
c0015e0e:	89 d7                	mov    edi,edx
c0015e10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e12:	89 c8                	mov    eax,ecx
c0015e14:	89 fa                	mov    edx,edi
c0015e16:	89 f3                	mov    ebx,esi
c0015e18:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0015e1f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0015e26:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0015e2d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0015e34:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0015e3a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0015e41:	84 c0                	test   al,al
c0015e43:	75 07                	jne    c0015e4c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0015e45:	b8 07 00 00 00       	mov    eax,0x7
c0015e4a:	eb 1c                	jmp    c0015e68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015e4c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0015e53:	85 c0                	test   eax,eax
c0015e55:	75 09                	jne    c0015e60 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0015e57:	b8 00 00 00 00       	mov    eax,0x0
c0015e5c:	eb 0a                	jmp    c0015e68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015e5e:	66 90                	xchg   ax,ax
c0015e60:	b8 01 00 00 00       	mov    eax,0x1
c0015e65:	8d 76 00             	lea    esi,[esi+0x0]
c0015e68:	81 c4 50 02 00 00    	add    esp,0x250
c0015e6e:	5b                   	pop    ebx
c0015e6f:	5e                   	pop    esi
c0015e70:	5f                   	pop    edi
c0015e71:	c3                   	ret    
c0015e72:	66 90                	xchg   ax,ax

c0015e74 <FAT::read(void*, unsigned long, void*, int*)>:
c0015e74:	83 ec 1c             	sub    esp,0x1c
c0015e77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e7c:	74 0a                	je     c0015e88 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0015e7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015e83:	75 0b                	jne    c0015e90 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0015e85:	8d 76 00             	lea    esi,[esi+0x0]
c0015e88:	b8 04 00 00 00       	mov    eax,0x4
c0015e8d:	eb 41                	jmp    c0015ed0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015e8f:	90                   	nop
c0015e90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015e94:	50                   	push   eax
c0015e95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015e9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ea1:	e8 6f dd fe ff       	call   c0003c15 <f_read>
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ead:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eb1:	89 c2                	mov    edx,eax
c0015eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eb7:	89 10                	mov    DWORD PTR [eax],edx
c0015eb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ebd:	85 c0                	test   eax,eax
c0015ebf:	75 07                	jne    c0015ec8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0015ec1:	b8 00 00 00 00       	mov    eax,0x0
c0015ec6:	eb 08                	jmp    c0015ed0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015ec8:	b8 01 00 00 00       	mov    eax,0x1
c0015ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed0:	83 c4 1c             	add    esp,0x1c
c0015ed3:	c3                   	ret    

c0015ed4 <FAT::write(void*, unsigned long, void*, int*)>:
c0015ed4:	83 ec 1c             	sub    esp,0x1c
c0015ed7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015edc:	74 0a                	je     c0015ee8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0015ede:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015ee3:	75 0b                	jne    c0015ef0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0015ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ee8:	b8 04 00 00 00       	mov    eax,0x4
c0015eed:	eb 41                	jmp    c0015f30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015eef:	90                   	nop
c0015ef0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ef4:	50                   	push   eax
c0015ef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ef9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015efd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f01:	e8 0e df fe ff       	call   c0003e14 <f_write>
c0015f06:	83 c4 10             	add    esp,0x10
c0015f09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f11:	89 c2                	mov    edx,eax
c0015f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f17:	89 10                	mov    DWORD PTR [eax],edx
c0015f19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f1d:	85 c0                	test   eax,eax
c0015f1f:	75 07                	jne    c0015f28 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0015f21:	b8 00 00 00 00       	mov    eax,0x0
c0015f26:	eb 08                	jmp    c0015f30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015f28:	b8 01 00 00 00       	mov    eax,0x1
c0015f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f30:	83 c4 1c             	add    esp,0x1c
c0015f33:	c3                   	ret    

c0015f34 <FAT::close(void*)>:
c0015f34:	83 ec 1c             	sub    esp,0x1c
c0015f37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f3c:	75 0a                	jne    c0015f48 <FAT::close(void*)+0x14>
c0015f3e:	b8 04 00 00 00       	mov    eax,0x4
c0015f43:	eb 3f                	jmp    c0015f84 <FAT::close(void*)+0x50>
c0015f45:	8d 76 00             	lea    esi,[esi+0x0]
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f4f:	e8 a9 e1 fe ff       	call   c00040fd <f_close>
c0015f54:	83 c4 10             	add    esp,0x10
c0015f57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f5b:	83 ec 0c             	sub    esp,0xc
c0015f5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f62:	e8 fa 0c ff ff       	call   c0006c61 <free>
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f6e:	85 c0                	test   eax,eax
c0015f70:	75 0a                	jne    c0015f7c <FAT::close(void*)+0x48>
c0015f72:	b8 00 00 00 00       	mov    eax,0x0
c0015f77:	eb 0b                	jmp    c0015f84 <FAT::close(void*)+0x50>
c0015f79:	8d 76 00             	lea    esi,[esi+0x0]
c0015f7c:	b8 01 00 00 00       	mov    eax,0x1
c0015f81:	8d 76 00             	lea    esi,[esi+0x0]
c0015f84:	83 c4 1c             	add    esp,0x1c
c0015f87:	c3                   	ret    

c0015f88 <FAT::closeDir(void*)>:
c0015f88:	83 ec 1c             	sub    esp,0x1c
c0015f8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f90:	75 0a                	jne    c0015f9c <FAT::closeDir(void*)+0x14>
c0015f92:	b8 04 00 00 00       	mov    eax,0x4
c0015f97:	eb 3f                	jmp    c0015fd8 <FAT::closeDir(void*)+0x50>
c0015f99:	8d 76 00             	lea    esi,[esi+0x0]
c0015f9c:	83 ec 0c             	sub    esp,0xc
c0015f9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fa3:	e8 f6 e3 fe ff       	call   c000439e <f_closedir>
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015faf:	83 ec 0c             	sub    esp,0xc
c0015fb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb6:	e8 a6 0c ff ff       	call   c0006c61 <free>
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fc2:	85 c0                	test   eax,eax
c0015fc4:	75 0a                	jne    c0015fd0 <FAT::closeDir(void*)+0x48>
c0015fc6:	b8 00 00 00 00       	mov    eax,0x0
c0015fcb:	eb 0b                	jmp    c0015fd8 <FAT::closeDir(void*)+0x50>
c0015fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fd0:	b8 01 00 00 00       	mov    eax,0x1
c0015fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015fd8:	83 c4 1c             	add    esp,0x1c
c0015fdb:	c3                   	ret    

c0015fdc <FAT::seek(void*, unsigned long long)>:
c0015fdc:	83 ec 2c             	sub    esp,0x2c
c0015fdf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fe7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0015ff4:	75 0a                	jne    c0016000 <FAT::seek(void*, unsigned long long)+0x24>
c0015ff6:	b8 04 00 00 00       	mov    eax,0x4
c0015ffb:	eb 33                	jmp    c0016030 <FAT::seek(void*, unsigned long long)+0x54>
c0015ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0016000:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016004:	83 ec 08             	sub    esp,0x8
c0016007:	50                   	push   eax
c0016008:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001600c:	e8 1b e1 fe ff       	call   c000412c <f_lseek>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001601c:	85 c0                	test   eax,eax
c001601e:	75 08                	jne    c0016028 <FAT::seek(void*, unsigned long long)+0x4c>
c0016020:	b8 00 00 00 00       	mov    eax,0x0
c0016025:	eb 09                	jmp    c0016030 <FAT::seek(void*, unsigned long long)+0x54>
c0016027:	90                   	nop
c0016028:	b8 01 00 00 00       	mov    eax,0x1
c001602d:	8d 76 00             	lea    esi,[esi+0x0]
c0016030:	83 c4 2c             	add    esp,0x2c
c0016033:	c3                   	ret    

c0016034 <fatWrapperReadDisk>:
c0016034:	53                   	push   ebx
c0016035:	83 ec 18             	sub    esp,0x18
c0016038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001603c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016040:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016044:	25 ff 00 00 00       	and    eax,0xff
c0016049:	8b 0c 85 20 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4e0]
c0016050:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016054:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016058:	ba 00 00 00 00       	mov    edx,0x0
c001605d:	83 ec 0c             	sub    esp,0xc
c0016060:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016064:	53                   	push   ebx
c0016065:	52                   	push   edx
c0016066:	50                   	push   eax
c0016067:	51                   	push   ecx
c0016068:	e8 8f 60 ff ff       	call   c000c0fc <LogicalDisk::read(unsigned long long, int, void*)>
c001606d:	83 c4 20             	add    esp,0x20
c0016070:	83 c4 18             	add    esp,0x18
c0016073:	5b                   	pop    ebx
c0016074:	c3                   	ret    
c0016075:	8d 76 00             	lea    esi,[esi+0x0]

c0016078 <fatWrapperWriteDisk>:
c0016078:	53                   	push   ebx
c0016079:	83 ec 18             	sub    esp,0x18
c001607c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016080:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016084:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016088:	25 ff 00 00 00       	and    eax,0xff
c001608d:	8b 0c 85 20 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4e0]
c0016094:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016098:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001609c:	ba 00 00 00 00       	mov    edx,0x0
c00160a1:	83 ec 0c             	sub    esp,0xc
c00160a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00160a8:	53                   	push   ebx
c00160a9:	52                   	push   edx
c00160aa:	50                   	push   eax
c00160ab:	51                   	push   ecx
c00160ac:	e8 b7 60 ff ff       	call   c000c168 <LogicalDisk::write(unsigned long long, int, void*)>
c00160b1:	83 c4 20             	add    esp,0x20
c00160b4:	83 c4 18             	add    esp,0x18
c00160b7:	5b                   	pop    ebx
c00160b8:	c3                   	ret    
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]

c00160bc <fatWrapperIoctl>:
c00160bc:	53                   	push   ebx
c00160bd:	83 ec 28             	sub    esp,0x28
c00160c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00160c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00160cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00160d0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00160d5:	75 35                	jne    c001610c <fatWrapperIoctl+0x50>
c00160d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160df:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00160e3:	25 ff 00 00 00       	and    eax,0xff
c00160e8:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c00160ef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00160f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00160ff:	66 89 02             	mov    WORD PTR [edx],ax
c0016102:	b8 00 00 00 00       	mov    eax,0x0
c0016107:	e9 c4 00 00 00       	jmp    c00161d0 <fatWrapperIoctl+0x114>
c001610c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016111:	75 75                	jne    c0016188 <fatWrapperIoctl+0xcc>
c0016113:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016117:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001611b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001611f:	25 ff 00 00 00       	and    eax,0xff
c0016124:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c001612b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016131:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016137:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001613d:	89 c8                	mov    eax,ecx
c001613f:	89 da                	mov    edx,ebx
c0016141:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016145:	c1 e0 0a             	shl    eax,0xa
c0016148:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001614c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016152:	8b 0c 8d 20 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde4e0]
c0016159:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001615f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016165:	89 cb                	mov    ebx,ecx
c0016167:	c1 fb 1f             	sar    ebx,0x1f
c001616a:	53                   	push   ebx
c001616b:	51                   	push   ecx
c001616c:	52                   	push   edx
c001616d:	50                   	push   eax
c001616e:	e8 2d 56 00 00       	call   c001b7a0 <__udivdi3>
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	89 c2                	mov    edx,eax
c0016178:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001617c:	89 10                	mov    DWORD PTR [eax],edx
c001617e:	b8 00 00 00 00       	mov    eax,0x0
c0016183:	eb 4b                	jmp    c00161d0 <fatWrapperIoctl+0x114>
c0016185:	8d 76 00             	lea    esi,[esi+0x0]
c0016188:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001618d:	75 09                	jne    c0016198 <fatWrapperIoctl+0xdc>
c001618f:	b8 00 00 00 00       	mov    eax,0x0
c0016194:	eb 3a                	jmp    c00161d0 <fatWrapperIoctl+0x114>
c0016196:	66 90                	xchg   ax,ax
c0016198:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001619d:	75 19                	jne    c00161b8 <fatWrapperIoctl+0xfc>
c001619f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00161a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00161ab:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00161b1:	b8 00 00 00 00       	mov    eax,0x0
c00161b6:	eb 18                	jmp    c00161d0 <fatWrapperIoctl+0x114>
c00161b8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00161bd:	75 09                	jne    c00161c8 <fatWrapperIoctl+0x10c>
c00161bf:	b8 00 00 00 00       	mov    eax,0x0
c00161c4:	eb 0a                	jmp    c00161d0 <fatWrapperIoctl+0x114>
c00161c6:	66 90                	xchg   ax,ax
c00161c8:	b8 04 00 00 00       	mov    eax,0x4
c00161cd:	8d 76 00             	lea    esi,[esi+0x0]
c00161d0:	83 c4 28             	add    esp,0x28
c00161d3:	5b                   	pop    ebx
c00161d4:	c3                   	ret    
c00161d5:	90                   	nop
c00161d6:	66 90                	xchg   ax,ax

c00161d8 <FAT::FAT()>:
c00161d8:	83 ec 1c             	sub    esp,0x1c
c00161db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161df:	83 ec 0c             	sub    esp,0xc
c00161e2:	50                   	push   eax
c00161e3:	e8 4e 3b ff ff       	call   c0009d36 <Filesystem::Filesystem()>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	ba 4c e6 01 c0       	mov    edx,0xc001e64c
c00161f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161f4:	89 10                	mov    DWORD PTR [eax],edx
c00161f6:	c7 05 40 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022b40,0x0
c0016200:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016208:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001620d:	7f 15                	jg     c0016224 <FAT::FAT()+0x4c>
c001620f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016213:	c7 04 85 60 2b 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdd4a0],0xffffffff
c001621e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016222:	eb e4                	jmp    c0016208 <FAT::FAT()+0x30>
c0016224:	90                   	nop
c0016225:	83 c4 1c             	add    esp,0x1c
c0016228:	c3                   	ret    
c0016229:	90                   	nop
c001622a:	66 90                	xchg   ax,ax

c001622c <FAT::fixFilepath(char*)>:
c001622c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016230:	8a 00                	mov    al,BYTE PTR [eax]
c0016232:	3c 40                	cmp    al,0x40
c0016234:	7e 2e                	jle    c0016264 <FAT::fixFilepath(char*)+0x38>
c0016236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001623a:	8a 00                	mov    al,BYTE PTR [eax]
c001623c:	83 e8 41             	sub    eax,0x41
c001623f:	88 c2                	mov    dl,al
c0016241:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016245:	88 10                	mov    BYTE PTR [eax],dl
c0016247:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001624b:	8a 00                	mov    al,BYTE PTR [eax]
c001624d:	0f be c0             	movsx  eax,al
c0016250:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c0016257:	83 c0 30             	add    eax,0x30
c001625a:	88 c2                	mov    dl,al
c001625c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016260:	88 10                	mov    BYTE PTR [eax],dl
c0016262:	66 90                	xchg   ax,ax
c0016264:	90                   	nop
c0016265:	c3                   	ret    
c0016266:	66 90                	xchg   ax,ax

c0016268 <FAT::open(char const*, void**, FileOpenMode)>:
c0016268:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001626e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016276:	74 0c                	je     c0016284 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016278:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016280:	75 0e                	jne    c0016290 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016282:	66 90                	xchg   ax,ax
c0016284:	b8 04 00 00 00       	mov    eax,0x4
c0016289:	e9 0a 01 00 00       	jmp    c0016398 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001628e:	66 90                	xchg   ax,ax
c0016290:	83 ec 08             	sub    esp,0x8
c0016293:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001629a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001629e:	50                   	push   eax
c001629f:	e8 7c a3 fe ff       	call   c0000620 <strcpy>
c00162a4:	83 c4 10             	add    esp,0x10
c00162a7:	83 ec 08             	sub    esp,0x8
c00162aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00162ae:	50                   	push   eax
c00162af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00162b6:	e8 71 ff ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c00162bb:	83 c4 10             	add    esp,0x10
c00162be:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00162c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00162cd:	83 e0 01             	and    eax,0x1
c00162d0:	74 0a                	je     c00162dc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00162d2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00162da:	66 90                	xchg   ax,ax
c00162dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00162e3:	83 e0 04             	and    eax,0x4
c00162e6:	74 10                	je     c00162f8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00162e8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00162f0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00162f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00162ff:	83 e0 02             	and    eax,0x2
c0016302:	74 08                	je     c001630c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016304:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001630c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016313:	83 e0 08             	and    eax,0x8
c0016316:	74 08                	je     c0016320 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016318:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016320:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016327:	83 e0 10             	and    eax,0x10
c001632a:	74 08                	je     c0016334 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001632c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	68 28 02 00 00       	push   0x228
c001633c:	e8 10 09 ff ff       	call   c0006c51 <malloc>
c0016341:	83 c4 10             	add    esp,0x10
c0016344:	89 c2                	mov    edx,eax
c0016346:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001634d:	89 10                	mov    DWORD PTR [eax],edx
c001634f:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016356:	31 d2                	xor    edx,edx
c0016358:	88 c2                	mov    dl,al
c001635a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016361:	8b 00                	mov    eax,DWORD PTR [eax]
c0016363:	83 ec 04             	sub    esp,0x4
c0016366:	52                   	push   edx
c0016367:	8d 54 24 10          	lea    edx,[esp+0x10]
c001636b:	52                   	push   edx
c001636c:	50                   	push   eax
c001636d:	e8 d8 d5 fe ff       	call   c000394a <f_open>
c0016372:	83 c4 10             	add    esp,0x10
c0016375:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001637c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016384:	74 0a                	je     c0016390 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016386:	b8 01 00 00 00       	mov    eax,0x1
c001638b:	eb 0b                	jmp    c0016398 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001638d:	8d 76 00             	lea    esi,[esi+0x0]
c0016390:	b8 00 00 00 00       	mov    eax,0x0
c0016395:	8d 76 00             	lea    esi,[esi+0x0]
c0016398:	81 c4 1c 01 00 00    	add    esp,0x11c
c001639e:	c3                   	ret    
c001639f:	90                   	nop

c00163a0 <FAT::openDir(char const*, void**)>:
c00163a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00163a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00163ae:	74 0c                	je     c00163bc <FAT::openDir(char const*, void**)+0x1c>
c00163b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00163b8:	75 0e                	jne    c00163c8 <FAT::openDir(char const*, void**)+0x28>
c00163ba:	66 90                	xchg   ax,ax
c00163bc:	b8 04 00 00 00       	mov    eax,0x4
c00163c1:	e9 82 00 00 00       	jmp    c0016448 <FAT::openDir(char const*, void**)+0xa8>
c00163c6:	66 90                	xchg   ax,ax
c00163c8:	83 ec 08             	sub    esp,0x8
c00163cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00163d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00163d6:	50                   	push   eax
c00163d7:	e8 44 a2 fe ff       	call   c0000620 <strcpy>
c00163dc:	83 c4 10             	add    esp,0x10
c00163df:	83 ec 08             	sub    esp,0x8
c00163e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00163e6:	50                   	push   eax
c00163e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00163ee:	e8 39 fe ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c00163f3:	83 c4 10             	add    esp,0x10
c00163f6:	83 ec 0c             	sub    esp,0xc
c00163f9:	6a 30                	push   0x30
c00163fb:	e8 51 08 ff ff       	call   c0006c51 <malloc>
c0016400:	83 c4 10             	add    esp,0x10
c0016403:	89 c2                	mov    edx,eax
c0016405:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001640c:	89 10                	mov    DWORD PTR [eax],edx
c001640e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016415:	8b 00                	mov    eax,DWORD PTR [eax]
c0016417:	83 ec 08             	sub    esp,0x8
c001641a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001641e:	52                   	push   edx
c001641f:	50                   	push   eax
c0016420:	e8 ae de fe ff       	call   c00042d3 <f_opendir>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001642f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016437:	74 07                	je     c0016440 <FAT::openDir(char const*, void**)+0xa0>
c0016439:	b8 01 00 00 00       	mov    eax,0x1
c001643e:	eb 08                	jmp    c0016448 <FAT::openDir(char const*, void**)+0xa8>
c0016440:	b8 00 00 00 00       	mov    eax,0x0
c0016445:	8d 76 00             	lea    esi,[esi+0x0]
c0016448:	81 c4 1c 01 00 00    	add    esp,0x11c
c001644e:	c3                   	ret    
c001644f:	90                   	nop

c0016450 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016450:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016456:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001645e:	75 0c                	jne    c001646c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016460:	b8 04 00 00 00       	mov    eax,0x4
c0016465:	e9 d6 00 00 00       	jmp    c0016540 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001646a:	66 90                	xchg   ax,ax
c001646c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016474:	75 0a                	jne    c0016480 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016476:	b8 04 00 00 00       	mov    eax,0x4
c001647b:	e9 c0 00 00 00       	jmp    c0016540 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016480:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016488:	75 0a                	jne    c0016494 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001648a:	b8 04 00 00 00       	mov    eax,0x4
c001648f:	e9 ac 00 00 00       	jmp    c0016540 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016494:	83 ec 08             	sub    esp,0x8
c0016497:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001649e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00164a5:	50                   	push   eax
c00164a6:	e8 75 a1 fe ff       	call   c0000620 <strcpy>
c00164ab:	83 c4 10             	add    esp,0x10
c00164ae:	83 ec 08             	sub    esp,0x8
c00164b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00164b8:	50                   	push   eax
c00164b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00164c0:	e8 67 fd ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	83 ec 08             	sub    esp,0x8
c00164cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00164cf:	50                   	push   eax
c00164d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00164d7:	50                   	push   eax
c00164d8:	e8 75 df fe ff       	call   c0004452 <f_stat>
c00164dd:	83 c4 10             	add    esp,0x10
c00164e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00164e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00164ee:	85 c0                	test   eax,eax
c00164f0:	74 0a                	je     c00164fc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00164f2:	83 f8 04             	cmp    eax,0x4
c00164f5:	74 39                	je     c0016530 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00164f7:	eb 3f                	jmp    c0016538 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00164f9:	8d 76 00             	lea    esi,[esi+0x0]
c00164fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016500:	25 ff 00 00 00       	and    eax,0xff
c0016505:	83 e0 10             	and    eax,0x10
c0016508:	0f 95 c2             	setne  dl
c001650b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016512:	88 10                	mov    BYTE PTR [eax],dl
c0016514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016518:	ba 00 00 00 00       	mov    edx,0x0
c001651d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016524:	89 01                	mov    DWORD PTR [ecx],eax
c0016526:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016529:	b8 00 00 00 00       	mov    eax,0x0
c001652e:	eb 10                	jmp    c0016540 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016530:	b8 02 00 00 00       	mov    eax,0x2
c0016535:	eb 09                	jmp    c0016540 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016537:	90                   	nop
c0016538:	b8 01 00 00 00       	mov    eax,0x1
c001653d:	8d 76 00             	lea    esi,[esi+0x0]
c0016540:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016546:	c3                   	ret    
c0016547:	90                   	nop

c0016548 <FAT::unlink(char const*)>:
c0016548:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001654e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016556:	75 08                	jne    c0016560 <FAT::unlink(char const*)+0x18>
c0016558:	b8 04 00 00 00       	mov    eax,0x4
c001655d:	eb 61                	jmp    c00165c0 <FAT::unlink(char const*)+0x78>
c001655f:	90                   	nop
c0016560:	83 ec 08             	sub    esp,0x8
c0016563:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001656a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001656e:	50                   	push   eax
c001656f:	e8 ac a0 fe ff       	call   c0000620 <strcpy>
c0016574:	83 c4 10             	add    esp,0x10
c0016577:	83 ec 08             	sub    esp,0x8
c001657a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001657e:	50                   	push   eax
c001657f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016586:	e8 a1 fc ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	83 ec 0c             	sub    esp,0xc
c0016591:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016595:	50                   	push   eax
c0016596:	e8 1c e1 fe ff       	call   c00046b7 <f_unlink>
c001659b:	83 c4 10             	add    esp,0x10
c001659e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00165a5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00165ac:	85 c0                	test   eax,eax
c00165ae:	75 08                	jne    c00165b8 <FAT::unlink(char const*)+0x70>
c00165b0:	b8 00 00 00 00       	mov    eax,0x0
c00165b5:	eb 09                	jmp    c00165c0 <FAT::unlink(char const*)+0x78>
c00165b7:	90                   	nop
c00165b8:	b8 01 00 00 00       	mov    eax,0x1
c00165bd:	8d 76 00             	lea    esi,[esi+0x0]
c00165c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00165c6:	c3                   	ret    
c00165c7:	90                   	nop

c00165c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00165c8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00165ce:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00165d5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00165dc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00165e0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00165e4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00165ec:	75 0a                	jne    c00165f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00165ee:	b8 04 00 00 00       	mov    eax,0x4
c00165f3:	e9 54 01 00 00       	jmp    c001674c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00165f8:	83 ec 08             	sub    esp,0x8
c00165fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016602:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016606:	50                   	push   eax
c0016607:	e8 14 a0 fe ff       	call   c0000620 <strcpy>
c001660c:	83 c4 10             	add    esp,0x10
c001660f:	83 ec 08             	sub    esp,0x8
c0016612:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016616:	50                   	push   eax
c0016617:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001661e:	e8 09 fc ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001662e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0016636:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001663a:	25 ff 00 00 00       	and    eax,0xff
c001663f:	83 e0 01             	and    eax,0x1
c0016642:	74 08                	je     c001664c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0016644:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001664c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016650:	25 ff 00 00 00       	and    eax,0xff
c0016655:	83 e0 02             	and    eax,0x2
c0016658:	74 0a                	je     c0016664 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001665a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0016662:	66 90                	xchg   ax,ax
c0016664:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016668:	25 ff 00 00 00       	and    eax,0xff
c001666d:	83 e0 04             	and    eax,0x4
c0016670:	74 0a                	je     c001667c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0016672:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001667a:	66 90                	xchg   ax,ax
c001667c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016680:	25 ff 00 00 00       	and    eax,0xff
c0016685:	83 e0 08             	and    eax,0x8
c0016688:	74 0a                	je     c0016694 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001668a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0016692:	66 90                	xchg   ax,ax
c0016694:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016698:	25 ff 00 00 00       	and    eax,0xff
c001669d:	83 e0 01             	and    eax,0x1
c00166a0:	74 0a                	je     c00166ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00166a2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00166aa:	66 90                	xchg   ax,ax
c00166ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166b0:	25 ff 00 00 00       	and    eax,0xff
c00166b5:	83 e0 02             	and    eax,0x2
c00166b8:	74 0a                	je     c00166c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00166ba:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00166c2:	66 90                	xchg   ax,ax
c00166c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166c8:	25 ff 00 00 00       	and    eax,0xff
c00166cd:	83 e0 04             	and    eax,0x4
c00166d0:	74 0a                	je     c00166dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00166d2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00166da:	66 90                	xchg   ax,ax
c00166dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166e0:	25 ff 00 00 00       	and    eax,0xff
c00166e5:	83 e0 08             	and    eax,0x8
c00166e8:	74 0a                	je     c00166f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00166ea:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00166f2:	66 90                	xchg   ax,ax
c00166f4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00166fb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0016702:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0016709:	31 d2                	xor    edx,edx
c001670b:	88 c2                	mov    dl,al
c001670d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0016714:	25 ff 00 00 00       	and    eax,0xff
c0016719:	83 ec 04             	sub    esp,0x4
c001671c:	52                   	push   edx
c001671d:	50                   	push   eax
c001671e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016722:	50                   	push   eax
c0016723:	e8 02 e4 fe ff       	call   c0004b2a <f_chmod>
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0016732:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0016739:	85 c0                	test   eax,eax
c001673b:	75 07                	jne    c0016744 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001673d:	b8 00 00 00 00       	mov    eax,0x0
c0016742:	eb 08                	jmp    c001674c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016744:	b8 01 00 00 00       	mov    eax,0x1
c0016749:	8d 76 00             	lea    esi,[esi+0x0]
c001674c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016752:	c3                   	ret    
c0016753:	90                   	nop

c0016754 <FAT::rename(char const*, char const*)>:
c0016754:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001675a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0016762:	74 0c                	je     c0016770 <FAT::rename(char const*, char const*)+0x1c>
c0016764:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001676c:	75 0e                	jne    c001677c <FAT::rename(char const*, char const*)+0x28>
c001676e:	66 90                	xchg   ax,ax
c0016770:	b8 04 00 00 00       	mov    eax,0x4
c0016775:	e9 9e 00 00 00       	jmp    c0016818 <FAT::rename(char const*, char const*)+0xc4>
c001677a:	66 90                	xchg   ax,ax
c001677c:	83 ec 08             	sub    esp,0x8
c001677f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0016786:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001678d:	50                   	push   eax
c001678e:	e8 8d 9e fe ff       	call   c0000620 <strcpy>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	83 ec 08             	sub    esp,0x8
c0016799:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00167a0:	50                   	push   eax
c00167a1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00167a8:	e8 7f fa ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c00167ad:	83 c4 10             	add    esp,0x10
c00167b0:	83 ec 08             	sub    esp,0x8
c00167b3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00167ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167be:	50                   	push   eax
c00167bf:	e8 5c 9e fe ff       	call   c0000620 <strcpy>
c00167c4:	83 c4 10             	add    esp,0x10
c00167c7:	83 ec 08             	sub    esp,0x8
c00167ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00167ce:	50                   	push   eax
c00167cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00167d6:	e8 51 fa ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	83 ec 08             	sub    esp,0x8
c00167e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00167e5:	50                   	push   eax
c00167e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00167ed:	50                   	push   eax
c00167ee:	e8 81 e1 fe ff       	call   c0004974 <f_rename>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00167fd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0016804:	85 c0                	test   eax,eax
c0016806:	75 08                	jne    c0016810 <FAT::rename(char const*, char const*)+0xbc>
c0016808:	b8 00 00 00 00       	mov    eax,0x0
c001680d:	eb 09                	jmp    c0016818 <FAT::rename(char const*, char const*)+0xc4>
c001680f:	90                   	nop
c0016810:	b8 01 00 00 00       	mov    eax,0x1
c0016815:	8d 76 00             	lea    esi,[esi+0x0]
c0016818:	81 c4 1c 02 00 00    	add    esp,0x21c
c001681e:	c3                   	ret    
c001681f:	90                   	nop

c0016820 <FAT::mkdir(char const*)>:
c0016820:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016826:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001682e:	75 08                	jne    c0016838 <FAT::mkdir(char const*)+0x18>
c0016830:	b8 04 00 00 00       	mov    eax,0x4
c0016835:	eb 61                	jmp    c0016898 <FAT::mkdir(char const*)+0x78>
c0016837:	90                   	nop
c0016838:	83 ec 08             	sub    esp,0x8
c001683b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016842:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016846:	50                   	push   eax
c0016847:	e8 d4 9d fe ff       	call   c0000620 <strcpy>
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	83 ec 08             	sub    esp,0x8
c0016852:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016856:	50                   	push   eax
c0016857:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001685e:	e8 c9 f9 ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c0016863:	83 c4 10             	add    esp,0x10
c0016866:	83 ec 0c             	sub    esp,0xc
c0016869:	8d 44 24 18          	lea    eax,[esp+0x18]
c001686d:	50                   	push   eax
c001686e:	e8 66 df fe ff       	call   c00047d9 <f_mkdir>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001687d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016884:	85 c0                	test   eax,eax
c0016886:	75 08                	jne    c0016890 <FAT::mkdir(char const*)+0x70>
c0016888:	b8 00 00 00 00       	mov    eax,0x0
c001688d:	eb 09                	jmp    c0016898 <FAT::mkdir(char const*)+0x78>
c001688f:	90                   	nop
c0016890:	b8 01 00 00 00       	mov    eax,0x1
c0016895:	8d 76 00             	lea    esi,[esi+0x0]
c0016898:	81 c4 1c 01 00 00    	add    esp,0x11c
c001689e:	c3                   	ret    
c001689f:	90                   	nop

c00168a0 <FAT::exists(char const*)>:
c00168a0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00168a6:	83 ec 08             	sub    esp,0x8
c00168a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00168b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00168b4:	50                   	push   eax
c00168b5:	e8 66 9d fe ff       	call   c0000620 <strcpy>
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	83 ec 08             	sub    esp,0x8
c00168c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00168c4:	50                   	push   eax
c00168c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00168cc:	e8 5b f9 ff ff       	call   c001622c <FAT::fixFilepath(char*)>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	83 ec 08             	sub    esp,0x8
c00168d7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00168de:	50                   	push   eax
c00168df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00168e3:	50                   	push   eax
c00168e4:	e8 69 db fe ff       	call   c0004452 <f_stat>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00168f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00168fa:	85 c0                	test   eax,eax
c00168fc:	75 06                	jne    c0016904 <FAT::exists(char const*)+0x64>
c00168fe:	b0 01                	mov    al,0x1
c0016900:	eb 06                	jmp    c0016908 <FAT::exists(char const*)+0x68>
c0016902:	66 90                	xchg   ax,ax
c0016904:	b0 00                	mov    al,0x0
c0016906:	66 90                	xchg   ax,ax
c0016908:	81 c4 2c 02 00 00    	add    esp,0x22c
c001690e:	c3                   	ret    
c001690f:	90                   	nop

c0016910 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0016910:	b8 08 00 00 00       	mov    eax,0x8
c0016915:	c3                   	ret    

c0016916 <ISO9660::seek(void*, unsigned long long)>:
c0016916:	53                   	push   ebx
c0016917:	b8 04 00 00 00       	mov    eax,0x4
c001691c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016920:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016924:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016928:	85 d2                	test   edx,edx
c001692a:	74 17                	je     c0016943 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001692c:	89 c8                	mov    eax,ecx
c001692e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0016931:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0016934:	b8 01 00 00 00       	mov    eax,0x1
c0016939:	73 08                	jae    c0016943 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001693b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001693e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0016941:	31 c0                	xor    eax,eax
c0016943:	5b                   	pop    ebx
c0016944:	c3                   	ret    
c0016945:	90                   	nop

c0016946 <ISO9660::tell(void*, unsigned long long*)>:
c0016946:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001694a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001694e:	85 d2                	test   edx,edx
c0016950:	74 12                	je     c0016964 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0016952:	85 c0                	test   eax,eax
c0016954:	74 0e                	je     c0016964 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0016956:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0016959:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001695c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001695f:	89 10                	mov    DWORD PTR [eax],edx
c0016961:	31 c0                	xor    eax,eax
c0016963:	c3                   	ret    
c0016964:	b8 04 00 00 00       	mov    eax,0x4
c0016969:	c3                   	ret    

c001696a <ISO9660::getName()>:
c001696a:	b8 ac e6 01 c0       	mov    eax,0xc001e6ac
c001696f:	c3                   	ret    

c0016970 <ISO9660::stat(void*, unsigned long long*)>:
c0016970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016974:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016978:	85 d2                	test   edx,edx
c001697a:	74 12                	je     c001698e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001697c:	85 c0                	test   eax,eax
c001697e:	74 0e                	je     c001698e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0016980:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016983:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0016986:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0016989:	89 10                	mov    DWORD PTR [eax],edx
c001698b:	31 c0                	xor    eax,eax
c001698d:	c3                   	ret    
c001698e:	b8 04 00 00 00       	mov    eax,0x4
c0016993:	c3                   	ret    

c0016994 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0016994:	b8 01 00 00 00       	mov    eax,0x1
c0016999:	c3                   	ret    

c001699a <ISO9660::unlink(char const*)>:
c001699a:	b8 01 00 00 00       	mov    eax,0x1
c001699f:	c3                   	ret    

c00169a0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00169a0:	b8 01 00 00 00       	mov    eax,0x1
c00169a5:	c3                   	ret    

c00169a6 <ISO9660::rename(char const*, char const*)>:
c00169a6:	b8 01 00 00 00       	mov    eax,0x1
c00169ab:	c3                   	ret    

c00169ac <ISO9660::mkdir(char const*)>:
c00169ac:	b8 01 00 00 00       	mov    eax,0x1
c00169b1:	c3                   	ret    

c00169b2 <ISO9660::close(void*)>:
c00169b2:	83 ec 0c             	sub    esp,0xc
c00169b5:	b8 04 00 00 00       	mov    eax,0x4
c00169ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169be:	85 d2                	test   edx,edx
c00169c0:	74 0e                	je     c00169d0 <ISO9660::close(void*)+0x1e>
c00169c2:	83 ec 0c             	sub    esp,0xc
c00169c5:	52                   	push   edx
c00169c6:	e8 96 02 ff ff       	call   c0006c61 <free>
c00169cb:	83 c4 10             	add    esp,0x10
c00169ce:	31 c0                	xor    eax,eax
c00169d0:	83 c4 0c             	add    esp,0xc
c00169d3:	c3                   	ret    

c00169d4 <ISO9660::closeDir(void*)>:
c00169d4:	83 ec 0c             	sub    esp,0xc
c00169d7:	b8 04 00 00 00       	mov    eax,0x4
c00169dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169e0:	85 d2                	test   edx,edx
c00169e2:	74 0e                	je     c00169f2 <ISO9660::closeDir(void*)+0x1e>
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	52                   	push   edx
c00169e8:	e8 74 02 ff ff       	call   c0006c61 <free>
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	31 c0                	xor    eax,eax
c00169f2:	83 c4 0c             	add    esp,0xc
c00169f5:	c3                   	ret    

c00169f6 <ISO9660::~ISO9660()>:
c00169f6:	83 ec 0c             	sub    esp,0xc
c00169f9:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c00169fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a02:	89 10                	mov    DWORD PTR [eax],edx
c0016a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	50                   	push   eax
c0016a0c:	e8 49 33 ff ff       	call   c0009d5a <Filesystem::~Filesystem()>
c0016a11:	83 c4 10             	add    esp,0x10
c0016a14:	90                   	nop
c0016a15:	83 c4 0c             	add    esp,0xc
c0016a18:	c3                   	ret    
c0016a19:	90                   	nop

c0016a1a <ISO9660::~ISO9660()>:
c0016a1a:	83 ec 0c             	sub    esp,0xc
c0016a1d:	83 ec 0c             	sub    esp,0xc
c0016a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a24:	e8 cd ff ff ff       	call   c00169f6 <ISO9660::~ISO9660()>
c0016a29:	83 c4 10             	add    esp,0x10
c0016a2c:	83 ec 08             	sub    esp,0x8
c0016a2f:	6a 08                	push   0x8
c0016a31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a35:	e8 e4 2e ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c0016a3a:	83 c4 10             	add    esp,0x10
c0016a3d:	83 c4 0c             	add    esp,0xc
c0016a40:	c3                   	ret    

c0016a41 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0016a41:	55                   	push   ebp
c0016a42:	31 c9                	xor    ecx,ecx
c0016a44:	57                   	push   edi
c0016a45:	56                   	push   esi
c0016a46:	53                   	push   ebx
c0016a47:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0016a4b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016a4f:	89 eb                	mov    ebx,ebp
c0016a51:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0016a55:	39 ce                	cmp    esi,ecx
c0016a57:	7e 17                	jle    c0016a70 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0016a59:	31 d2                	xor    edx,edx
c0016a5b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0016a5f:	7d 13                	jge    c0016a74 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0016a61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016a65:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016a68:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0016a6b:	75 0d                	jne    c0016a7a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0016a6d:	42                   	inc    edx
c0016a6e:	eb eb                	jmp    c0016a5b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0016a70:	31 c0                	xor    eax,eax
c0016a72:	eb 0a                	jmp    c0016a7e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0016a74:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0016a78:	eb 04                	jmp    c0016a7e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0016a7a:	41                   	inc    ecx
c0016a7b:	43                   	inc    ebx
c0016a7c:	eb d7                	jmp    c0016a55 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0016a7e:	5b                   	pop    ebx
c0016a7f:	5e                   	pop    esi
c0016a80:	5f                   	pop    edi
c0016a81:	5d                   	pop    ebp
c0016a82:	c3                   	ret    

c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0016a83:	57                   	push   edi
c0016a84:	56                   	push   esi
c0016a85:	53                   	push   ebx
c0016a86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a8a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a8e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016a92:	39 35 40 2c 02 c0    	cmp    DWORD PTR ds:0xc0022c40,esi
c0016a98:	75 08                	jne    c0016aa2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0016a9a:	38 1d d4 ef 01 c0    	cmp    BYTE PTR ds:0xc001efd4,bl
c0016aa0:	74 4a                	je     c0016aec <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	31 d2                	xor    edx,edx
c0016aa7:	68 60 2c 02 c0       	push   0xc0022c60
c0016aac:	0f be c3             	movsx  eax,bl
c0016aaf:	6a 01                	push   0x1
c0016ab1:	52                   	push   edx
c0016ab2:	56                   	push   esi
c0016ab3:	ff 34 85 1c 1a 02 c0 	push   DWORD PTR [eax*4-0x3ffde5e4]
c0016aba:	e8 3d 56 ff ff       	call   c000c0fc <LogicalDisk::read(unsigned long long, int, void*)>
c0016abf:	83 c4 20             	add    esp,0x20
c0016ac2:	85 c0                	test   eax,eax
c0016ac4:	75 0e                	jne    c0016ad4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0016ac6:	89 35 40 2c 02 c0    	mov    DWORD PTR ds:0xc0022c40,esi
c0016acc:	88 1d d4 ef 01 c0    	mov    BYTE PTR ds:0xc001efd4,bl
c0016ad2:	eb 18                	jmp    c0016aec <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016ad4:	50                   	push   eax
c0016ad5:	68 00 08 00 00       	push   0x800
c0016ada:	6a 00                	push   0x0
c0016adc:	57                   	push   edi
c0016add:	e8 0e 9a fe ff       	call   c00004f0 <memset>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	b8 01 00 00 00       	mov    eax,0x1
c0016aea:	eb 0e                	jmp    c0016afa <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0016aec:	be 60 2c 02 c0       	mov    esi,0xc0022c60
c0016af1:	b9 00 08 00 00       	mov    ecx,0x800
c0016af6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016af8:	31 c0                	xor    eax,eax
c0016afa:	5b                   	pop    ebx
c0016afb:	5e                   	pop    esi
c0016afc:	5f                   	pop    edi
c0016afd:	c3                   	ret    

c0016afe <ISO9660::tryMount(LogicalDisk*, int)>:
c0016afe:	81 ec 10 08 00 00    	sub    esp,0x810
c0016b04:	c7 05 40 2c 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0022c40,0xdeadbeef
c0016b0e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0016b15:	83 c0 41             	add    eax,0x41
c0016b18:	0f be c0             	movsx  eax,al
c0016b1b:	50                   	push   eax
c0016b1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016b20:	50                   	push   eax
c0016b21:	6a 10                	push   0x10
c0016b23:	e8 5b ff ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016b28:	83 c4 10             	add    esp,0x10
c0016b2b:	31 d2                	xor    edx,edx
c0016b2d:	85 c0                	test   eax,eax
c0016b2f:	75 24                	jne    c0016b55 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b31:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0016b36:	75 1d                	jne    c0016b55 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b38:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0016b3d:	75 16                	jne    c0016b55 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b3f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0016b44:	75 0f                	jne    c0016b55 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b46:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0016b4b:	75 08                	jne    c0016b55 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b4d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0016b52:	0f 94 c2             	sete   dl
c0016b55:	88 d0                	mov    al,dl
c0016b57:	81 c4 0c 08 00 00    	add    esp,0x80c
c0016b5d:	c3                   	ret    

c0016b5e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0016b5e:	55                   	push   ebp
c0016b5f:	57                   	push   edi
c0016b60:	56                   	push   esi
c0016b61:	53                   	push   ebx
c0016b62:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0016b68:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0016b6f:	85 ed                	test   ebp,ebp
c0016b71:	0f 84 da 01 00 00    	je     c0016d51 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016b77:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0016b7f:	0f 84 cc 01 00 00    	je     c0016d51 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016b85:	b8 01 00 00 00       	mov    eax,0x1
c0016b8a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0016b8e:	0f 85 c2 01 00 00    	jne    c0016d56 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016b94:	31 d2                	xor    edx,edx
c0016b96:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0016b9d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016ba0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016ba3:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016ba6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ba9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bad:	01 c8                	add    eax,ecx
c0016baf:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016bb2:	11 da                	adc    edx,ebx
c0016bb4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0016bb8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016bbc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016bc0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016bc4:	19 d7                	sbb    edi,edx
c0016bc6:	72 11                	jb     c0016bd9 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0016bc8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016bcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bd7:	eb 0c                	jmp    c0016be5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0016bd9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0016bdd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016be1:	29 ce                	sub    esi,ecx
c0016be3:	19 df                	sbb    edi,ebx
c0016be5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016be8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0016beb:	0f a4 c2 0b          	shld   edx,eax,0xb
c0016bef:	c1 e0 0b             	shl    eax,0xb
c0016bf2:	01 c8                	add    eax,ecx
c0016bf4:	11 da                	adc    edx,ebx
c0016bf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bf9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bfd:	51                   	push   ecx
c0016bfe:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016c02:	50                   	push   eax
c0016c03:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0016c07:	53                   	push   ebx
c0016c08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c10:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016c14:	50                   	push   eax
c0016c15:	e8 69 fe ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016c1a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0016c1d:	b8 00 08 00 00       	mov    eax,0x800
c0016c22:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0016c28:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0016c2c:	29 d0                	sub    eax,edx
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	89 f9                	mov    ecx,edi
c0016c33:	39 c6                	cmp    esi,eax
c0016c35:	83 d9 00             	sbb    ecx,0x0
c0016c38:	7d 1b                	jge    c0016c55 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0016c3a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016c3f:	75 12                	jne    c0016c53 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0016c41:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016c48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016c4e:	e9 fa 00 00 00       	jmp    c0016d4d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0016c53:	89 f0                	mov    eax,esi
c0016c55:	01 d3                	add    ebx,edx
c0016c57:	31 d2                	xor    edx,edx
c0016c59:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016c5d:	39 c2                	cmp    edx,eax
c0016c5f:	7d 14                	jge    c0016c75 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0016c61:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0016c68:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c6c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0016c6f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0016c72:	42                   	inc    edx
c0016c73:	eb e8                	jmp    c0016c5d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0016c75:	89 c2                	mov    edx,eax
c0016c77:	85 c0                	test   eax,eax
c0016c79:	79 02                	jns    c0016c7d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0016c7b:	31 d2                	xor    edx,edx
c0016c7d:	01 c2                	add    edx,eax
c0016c7f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c82:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0016c89:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0016c8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016c91:	99                   	cdq    
c0016c92:	01 c1                	add    ecx,eax
c0016c94:	11 d3                	adc    ebx,edx
c0016c96:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0016c9a:	29 c6                	sub    esi,eax
c0016c9c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0016ca0:	19 d7                	sbb    edi,edx
c0016ca2:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ca5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0016ca9:	b8 ff 07 00 00       	mov    eax,0x7ff
c0016cae:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0016cb1:	b8 00 00 00 00       	mov    eax,0x0
c0016cb6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0016cba:	7d 43                	jge    c0016cff <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0016cbc:	52                   	push   edx
c0016cbd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016cc1:	50                   	push   eax
c0016cc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016cce:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016cd2:	50                   	push   eax
c0016cd3:	e8 ab fd ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016cd8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0016ce0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0016ce5:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0016ced:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0016cf5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	eb aa                	jmp    c0016ca9 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0016cff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d03:	0b 04 24             	or     eax,DWORD PTR [esp]
c0016d06:	74 2a                	je     c0016d32 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0016d08:	50                   	push   eax
c0016d09:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016d0d:	50                   	push   eax
c0016d0e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016d12:	56                   	push   esi
c0016d13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016d1b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0016d1f:	51                   	push   ecx
c0016d20:	e8 5e fd ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016d25:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016d29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016d2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016d39:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016d3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d41:	89 18                	mov    DWORD PTR [eax],ebx
c0016d43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d47:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016d4a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016d4d:	31 c0                	xor    eax,eax
c0016d4f:	eb 05                	jmp    c0016d56 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016d51:	b8 04 00 00 00       	mov    eax,0x4
c0016d56:	81 c4 2c 08 00 00    	add    esp,0x82c
c0016d5c:	5b                   	pop    ebx
c0016d5d:	5e                   	pop    esi
c0016d5e:	5f                   	pop    edi
c0016d5f:	5d                   	pop    ebp
c0016d60:	c3                   	ret    
c0016d61:	90                   	nop

c0016d62 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0016d62:	55                   	push   ebp
c0016d63:	57                   	push   edi
c0016d64:	56                   	push   esi
c0016d65:	53                   	push   ebx
c0016d66:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0016d6c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0016d73:	85 ed                	test   ebp,ebp
c0016d75:	0f 84 4f 02 00 00    	je     c0016fca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016d7b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0016d83:	0f 84 41 02 00 00    	je     c0016fca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016d89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016d8c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0016d8f:	75 0a                	jne    c0016d9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0016d91:	b8 07 00 00 00       	mov    eax,0x7
c0016d96:	e9 34 02 00 00       	jmp    c0016fcf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016d9b:	50                   	push   eax
c0016d9c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016da0:	50                   	push   eax
c0016da1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016da8:	53                   	push   ebx
c0016da9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dac:	c1 e0 0b             	shl    eax,0xb
c0016daf:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0016db2:	c1 e8 0b             	shr    eax,0xb
c0016db5:	50                   	push   eax
c0016db6:	e8 c8 fc ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016dbb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016dbe:	83 c4 10             	add    esp,0x10
c0016dc1:	89 c1                	mov    ecx,eax
c0016dc3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016dc6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016dcc:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0016dcf:	84 db                	test   bl,bl
c0016dd1:	0f 85 8b 00 00 00    	jne    c0016e62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0016dd7:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0016ddd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016de0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0016de6:	29 c6                	sub    esi,eax
c0016de8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016dec:	89 f3                	mov    ebx,esi
c0016dee:	89 f1                	mov    ecx,esi
c0016df0:	c1 fb 1f             	sar    ebx,0x1f
c0016df3:	01 f0                	add    eax,esi
c0016df5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016df8:	11 da                	adc    edx,ebx
c0016dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dfd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e01:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016e04:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016e07:	89 d8                	mov    eax,ebx
c0016e09:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0016e0d:	ba 00 00 00 00       	mov    edx,0x0
c0016e12:	19 f8                	sbb    eax,edi
c0016e14:	b8 00 00 00 00       	mov    eax,0x0
c0016e19:	73 08                	jae    c0016e23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0016e1b:	89 f0                	mov    eax,esi
c0016e1d:	89 fa                	mov    edx,edi
c0016e1f:	29 c8                	sub    eax,ecx
c0016e21:	19 da                	sbb    edx,ebx
c0016e23:	89 d7                	mov    edi,edx
c0016e25:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016e28:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016e2b:	09 c7                	or     edi,eax
c0016e2d:	0f 84 5e ff ff ff    	je     c0016d91 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0016e33:	57                   	push   edi
c0016e34:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016e38:	50                   	push   eax
c0016e39:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016e40:	53                   	push   ebx
c0016e41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e44:	c1 e0 0b             	shl    eax,0xb
c0016e47:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016e4b:	c1 e8 0b             	shr    eax,0xb
c0016e4e:	50                   	push   eax
c0016e4f:	e8 2f fc ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016e54:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e57:	83 c4 10             	add    esp,0x10
c0016e5a:	25 ff 07 00 00       	and    eax,0x7ff
c0016e5f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0016e62:	31 ff                	xor    edi,edi
c0016e64:	56                   	push   esi
c0016e65:	6a 28                	push   0x28
c0016e67:	6a 00                	push   0x0
c0016e69:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016e6d:	50                   	push   eax
c0016e6e:	e8 7d 96 fe ff       	call   c00004f0 <memset>
c0016e73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e76:	25 ff 07 00 00       	and    eax,0x7ff
c0016e7b:	89 c6                	mov    esi,eax
c0016e7d:	83 c6 21             	add    esi,0x21
c0016e80:	83 d7 00             	adc    edi,0x0
c0016e83:	83 c4 10             	add    esp,0x10
c0016e86:	31 c9                	xor    ecx,ecx
c0016e88:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0016e8f:	83 f9 28             	cmp    ecx,0x28
c0016e92:	88 04 24             	mov    BYTE PTR [esp],al
c0016e95:	0f 94 c2             	sete   dl
c0016e98:	88 d0                	mov    al,dl
c0016e9a:	ba ff 07 00 00       	mov    edx,0x7ff
c0016e9f:	39 f2                	cmp    edx,esi
c0016ea1:	ba 00 00 00 00       	mov    edx,0x0
c0016ea6:	19 fa                	sbb    edx,edi
c0016ea8:	0f 92 c2             	setb   dl
c0016eab:	09 c2                	or     edx,eax
c0016ead:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0016eb1:	0f 94 c0             	sete   al
c0016eb4:	08 d0                	or     al,dl
c0016eb6:	75 16                	jne    c0016ece <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016eb8:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0016ebc:	74 10                	je     c0016ece <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016ebe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016ec1:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0016ec5:	41                   	inc    ecx
c0016ec6:	83 c6 01             	add    esi,0x1
c0016ec9:	83 d7 00             	adc    edi,0x0
c0016ecc:	eb ba                	jmp    c0016e88 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0016ece:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0016ed5:	83 ec 0c             	sub    esp,0xc
c0016ed8:	8d 74 24 24          	lea    esi,[esp+0x24]
c0016edc:	56                   	push   esi
c0016edd:	e8 7e 96 fe ff       	call   c0000560 <strlen>
c0016ee2:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0016ee9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016eed:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0016ef5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016ef8:	5a                   	pop    edx
c0016ef9:	25 ff 07 00 00       	and    eax,0x7ff
c0016efe:	59                   	pop    ecx
c0016eff:	01 f8                	add    eax,edi
c0016f01:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0016f08:	0f 95 c0             	setne  al
c0016f0b:	0f b6 c0             	movzx  eax,al
c0016f0e:	40                   	inc    eax
c0016f0f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016f13:	56                   	push   esi
c0016f14:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f18:	50                   	push   eax
c0016f19:	e8 02 97 fe ff       	call   c0000620 <strcpy>
c0016f1e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0016f22:	83 c4 10             	add    esp,0x10
c0016f25:	84 c0                	test   al,al
c0016f27:	75 21                	jne    c0016f4a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0016f29:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0016f31:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016f39:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016f41:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0016f48:	eb 28                	jmp    c0016f72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016f4a:	fe c8                	dec    al
c0016f4c:	75 24                	jne    c0016f72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016f4e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0016f56:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016f5e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016f66:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0016f6d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0016f72:	8d 74 24 40          	lea    esi,[esp+0x40]
c0016f76:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0016f7d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0016f84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f86:	0f b6 f3             	movzx  esi,bl
c0016f89:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0016f90:	31 db                	xor    ebx,ebx
c0016f92:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016f98:	89 df                	mov    edi,ebx
c0016f9a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0016f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016fa0:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0016fa3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0016fa6:	39 c6                	cmp    esi,eax
c0016fa8:	19 d7                	sbb    edi,edx
c0016faa:	72 10                	jb     c0016fbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0016fac:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0016fb3:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0016fba:	eb 0a                	jmp    c0016fc6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0016fbc:	29 f0                	sub    eax,esi
c0016fbe:	19 da                	sbb    edx,ebx
c0016fc0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016fc3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016fc6:	31 c0                	xor    eax,eax
c0016fc8:	eb 05                	jmp    c0016fcf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016fca:	b8 04 00 00 00       	mov    eax,0x4
c0016fcf:	81 c4 5c 09 00 00    	add    esp,0x95c
c0016fd5:	5b                   	pop    ebx
c0016fd6:	5e                   	pop    esi
c0016fd7:	5f                   	pop    edi
c0016fd8:	5d                   	pop    ebp
c0016fd9:	c3                   	ret    

c0016fda <readRoot(unsigned int*, unsigned int*, char)>:
c0016fda:	57                   	push   edi
c0016fdb:	56                   	push   esi
c0016fdc:	81 ec 38 08 00 00    	sub    esp,0x838
c0016fe2:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0016fea:	50                   	push   eax
c0016feb:	8d 44 24 38          	lea    eax,[esp+0x38]
c0016fef:	50                   	push   eax
c0016ff0:	6a 10                	push   0x10
c0016ff2:	e8 8c fa ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016ff7:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0016ffe:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0017002:	b9 22 00 00 00       	mov    ecx,0x22
c0017007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017009:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017010:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017014:	89 10                	mov    DWORD PTR [eax],edx
c0017016:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001701d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017021:	89 10                	mov    DWORD PTR [eax],edx
c0017023:	81 c4 44 08 00 00    	add    esp,0x844
c0017029:	b0 01                	mov    al,0x1
c001702b:	5e                   	pop    esi
c001702c:	5f                   	pop    edi
c001702d:	c3                   	ret    

c001702e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001702e:	55                   	push   ebp
c001702f:	57                   	push   edi
c0017030:	56                   	push   esi
c0017031:	53                   	push   ebx
c0017032:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017038:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001703f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017046:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001704a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001704e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017052:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017056:	75 03                	jne    c001705b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0017058:	83 c3 02             	add    ebx,0x2
c001705b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001705e:	75 03                	jne    c0017063 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0017060:	43                   	inc    ebx
c0017061:	eb f8                	jmp    c001705b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0017063:	52                   	push   edx
c0017064:	68 00 01 00 00       	push   0x100
c0017069:	6a 00                	push   0x0
c001706b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001706f:	50                   	push   eax
c0017070:	e8 7b 94 fe ff       	call   c00004f0 <memset>
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	31 d2                	xor    edx,edx
c001707a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001707d:	84 c0                	test   al,al
c001707f:	74 21                	je     c00170a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0017081:	3c 2f                	cmp    al,0x2f
c0017083:	75 0b                	jne    c0017090 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0017085:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0017089:	bd 01 00 00 00       	mov    ebp,0x1
c001708e:	eb 14                	jmp    c00170a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0017090:	8d 48 9f             	lea    ecx,[eax-0x61]
c0017093:	80 f9 19             	cmp    cl,0x19
c0017096:	77 03                	ja     c001709b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0017098:	83 e8 20             	sub    eax,0x20
c001709b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001709f:	42                   	inc    edx
c00170a0:	eb d8                	jmp    c001707a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00170a2:	31 ed                	xor    ebp,ebp
c00170a4:	83 ec 0c             	sub    esp,0xc
c00170a7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00170ae:	e8 9e fb fe ff       	call   c0006c51 <malloc>
c00170b3:	89 c6                	mov    esi,eax
c00170b5:	89 c2                	mov    edx,eax
c00170b7:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00170be:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00170c4:	c1 ef 0b             	shr    edi,0xb
c00170c7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00170ce:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00170d2:	83 c4 10             	add    esp,0x10
c00170d5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00170da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170de:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c00170e5:	74 29                	je     c0017110 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c00170e7:	50                   	push   eax
c00170e8:	57                   	push   edi
c00170e9:	52                   	push   edx
c00170ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00170ee:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00170f5:	e8 89 f9 ff ff       	call   c0016a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00170fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00170fe:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0017105:	81 c2 00 08 00 00    	add    edx,0x800
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	eb ca                	jmp    c00170da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017117:	57                   	push   edi
c0017118:	e8 43 94 fe ff       	call   c0000560 <strlen>
c001711d:	50                   	push   eax
c001711e:	57                   	push   edi
c001711f:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0017126:	56                   	push   esi
c0017127:	e8 15 f9 ff ff       	call   c0016a41 <__memmem(unsigned char*, int, unsigned char*, int)>
c001712c:	83 c4 20             	add    esp,0x20
c001712f:	85 c0                	test   eax,eax
c0017131:	75 13                	jne    c0017146 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	56                   	push   esi
c0017137:	e8 25 fb fe ff       	call   c0006c61 <free>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	31 c0                	xor    eax,eax
c0017141:	e9 b3 00 00 00       	jmp    c00171f9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c0017146:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001714a:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001714e:	c1 e7 08             	shl    edi,0x8
c0017151:	c1 e2 10             	shl    edx,0x10
c0017154:	09 d7                	or     edi,edx
c0017156:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001715a:	09 d7                	or     edi,edx
c001715c:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0017160:	c1 e2 18             	shl    edx,0x18
c0017163:	09 d7                	or     edi,edx
c0017165:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0017169:	89 d1                	mov    ecx,edx
c001716b:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001716f:	c1 e1 08             	shl    ecx,0x8
c0017172:	c1 e2 10             	shl    edx,0x10
c0017175:	09 ca                	or     edx,ecx
c0017177:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001717b:	09 ca                	or     edx,ecx
c001717d:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0017181:	c1 e1 18             	shl    ecx,0x18
c0017184:	09 ca                	or     edx,ecx
c0017186:	89 e9                	mov    ecx,ebp
c0017188:	84 c9                	test   cl,cl
c001718a:	74 3c                	je     c00171c8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001718c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017190:	83 ec 0c             	sub    esp,0xc
c0017193:	56                   	push   esi
c0017194:	e8 c8 fa fe ff       	call   c0006c61 <free>
c0017199:	83 c4 0c             	add    esp,0xc
c001719c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00171a3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00171a8:	50                   	push   eax
c00171a9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00171b0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00171b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171bb:	52                   	push   edx
c00171bc:	57                   	push   edi
c00171bd:	53                   	push   ebx
c00171be:	e8 6b fe ff ff       	call   c001702e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00171c3:	83 c4 20             	add    esp,0x20
c00171c6:	eb 31                	jmp    c00171f9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c00171c8:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00171cb:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00171d2:	d0 e8                	shr    al,1
c00171d4:	89 3b                	mov    DWORD PTR [ebx],edi
c00171d6:	83 e0 01             	and    eax,0x1
c00171d9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00171e0:	83 ec 0c             	sub    esp,0xc
c00171e3:	89 13                	mov    DWORD PTR [ebx],edx
c00171e5:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00171ec:	89 03                	mov    DWORD PTR [ebx],eax
c00171ee:	56                   	push   esi
c00171ef:	e8 6d fa fe ff       	call   c0006c61 <free>
c00171f4:	83 c4 10             	add    esp,0x10
c00171f7:	b0 01                	mov    al,0x1
c00171f9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00171ff:	5b                   	pop    ebx
c0017200:	5e                   	pop    esi
c0017201:	5f                   	pop    edi
c0017202:	5d                   	pop    ebp
c0017203:	c3                   	ret    

c0017204 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0017204:	55                   	push   ebp
c0017205:	57                   	push   edi
c0017206:	56                   	push   esi
c0017207:	53                   	push   ebx
c0017208:	83 ec 20             	sub    esp,0x20
c001720b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001720f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017213:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0017217:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001721f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017227:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001722c:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0017232:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0017238:	57                   	push   edi
c0017239:	8d 44 24 14          	lea    eax,[esp+0x14]
c001723d:	50                   	push   eax
c001723e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017242:	50                   	push   eax
c0017243:	e8 92 fd ff ff       	call   c0016fda <readRoot(unsigned int*, unsigned int*, char)>
c0017248:	5a                   	pop    edx
c0017249:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001724d:	e8 0e 93 fe ff       	call   c0000560 <strlen>
c0017252:	83 c4 10             	add    esp,0x10
c0017255:	83 f8 03             	cmp    eax,0x3
c0017258:	77 17                	ja     c0017271 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001725a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001725e:	89 03                	mov    DWORD PTR [ebx],eax
c0017260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017264:	89 06                	mov    DWORD PTR [esi],eax
c0017266:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001726d:	b0 01                	mov    al,0x1
c001726f:	eb 19                	jmp    c001728a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0017271:	50                   	push   eax
c0017272:	55                   	push   ebp
c0017273:	57                   	push   edi
c0017274:	56                   	push   esi
c0017275:	53                   	push   ebx
c0017276:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001727a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001727e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017282:	e8 a7 fd ff ff       	call   c001702e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017287:	83 c4 20             	add    esp,0x20
c001728a:	83 c4 1c             	add    esp,0x1c
c001728d:	5b                   	pop    ebx
c001728e:	5e                   	pop    esi
c001728f:	5f                   	pop    edi
c0017290:	5d                   	pop    ebp
c0017291:	c3                   	ret    

c0017292 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017292:	57                   	push   edi
c0017293:	56                   	push   esi
c0017294:	53                   	push   ebx
c0017295:	83 ec 10             	sub    esp,0x10
c0017298:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001729c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00172a0:	85 ff                	test   edi,edi
c00172a2:	0f 84 8b 00 00 00    	je     c0017333 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00172a8:	85 f6                	test   esi,esi
c00172aa:	0f 84 83 00 00 00    	je     c0017333 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00172b0:	b8 03 00 00 00       	mov    eax,0x3
c00172b5:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00172ba:	75 7c                	jne    c0017338 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00172bc:	83 ec 0c             	sub    esp,0xc
c00172bf:	6a 1c                	push   0x1c
c00172c1:	e8 8b f9 fe ff       	call   c0006c51 <malloc>
c00172c6:	89 07                	mov    DWORD PTR [edi],eax
c00172c8:	89 c3                	mov    ebx,eax
c00172ca:	58                   	pop    eax
c00172cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172cf:	50                   	push   eax
c00172d0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00172d3:	50                   	push   eax
c00172d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172d8:	50                   	push   eax
c00172d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172dd:	50                   	push   eax
c00172de:	56                   	push   esi
c00172df:	e8 20 ff ff ff       	call   c0017204 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00172e4:	83 c4 20             	add    esp,0x20
c00172e7:	84 c0                	test   al,al
c00172e9:	74 07                	je     c00172f2 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00172eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00172f0:	74 0b                	je     c00172fd <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00172f2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00172f6:	b8 01 00 00 00       	mov    eax,0x1
c00172fb:	eb 3b                	jmp    c0017338 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00172fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017301:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0017305:	89 03                	mov    DWORD PTR [ebx],eax
c0017307:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001730e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017312:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017319:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017320:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017323:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001732a:	8a 06                	mov    al,BYTE PTR [esi]
c001732c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001732f:	31 c0                	xor    eax,eax
c0017331:	eb 05                	jmp    c0017338 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017333:	b8 04 00 00 00       	mov    eax,0x4
c0017338:	83 c4 10             	add    esp,0x10
c001733b:	5b                   	pop    ebx
c001733c:	5e                   	pop    esi
c001733d:	5f                   	pop    edi
c001733e:	c3                   	ret    
c001733f:	90                   	nop

c0017340 <ISO9660::exists(char const*)>:
c0017340:	83 ec 28             	sub    esp,0x28
c0017343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017347:	8d 54 24 18          	lea    edx,[esp+0x18]
c001734b:	52                   	push   edx
c001734c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001734f:	52                   	push   edx
c0017350:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0017354:	52                   	push   edx
c0017355:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0017359:	52                   	push   edx
c001735a:	50                   	push   eax
c001735b:	e8 a4 fe ff ff       	call   c0017204 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017360:	83 c4 3c             	add    esp,0x3c
c0017363:	c3                   	ret    

c0017364 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017364:	56                   	push   esi
c0017365:	53                   	push   ebx
c0017366:	83 ec 14             	sub    esp,0x14
c0017369:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001736d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017371:	85 db                	test   ebx,ebx
c0017373:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017377:	0f 94 c2             	sete   dl
c001737a:	85 f6                	test   esi,esi
c001737c:	0f 94 c0             	sete   al
c001737f:	08 c2                	or     dl,al
c0017381:	75 68                	jne    c00173eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0017383:	85 c9                	test   ecx,ecx
c0017385:	74 64                	je     c00173eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0017387:	83 ec 0c             	sub    esp,0xc
c001738a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001738d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017391:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0017397:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001739e:	50                   	push   eax
c001739f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00173a2:	50                   	push   eax
c00173a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00173a7:	50                   	push   eax
c00173a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00173ac:	50                   	push   eax
c00173ad:	51                   	push   ecx
c00173ae:	e8 51 fe ff ff       	call   c0017204 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00173b3:	83 c4 20             	add    esp,0x20
c00173b6:	ba 01 00 00 00       	mov    edx,0x1
c00173bb:	84 c0                	test   al,al
c00173bd:	74 31                	je     c00173f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00173bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00173ca:	89 03                	mov    DWORD PTR [ebx],eax
c00173cc:	ba 00 00 00 00       	mov    edx,0x0
c00173d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173d5:	85 c0                	test   eax,eax
c00173d7:	0f 95 06             	setne  BYTE PTR [esi]
c00173da:	74 14                	je     c00173f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00173dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00173e2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00173e9:	eb 05                	jmp    c00173f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00173eb:	ba 04 00 00 00       	mov    edx,0x4
c00173f0:	83 c4 14             	add    esp,0x14
c00173f3:	89 d0                	mov    eax,edx
c00173f5:	5b                   	pop    ebx
c00173f6:	5e                   	pop    esi
c00173f7:	c3                   	ret    

c00173f8 <ISO9660::openDir(char const*, void**)>:
c00173f8:	57                   	push   edi
c00173f9:	56                   	push   esi
c00173fa:	53                   	push   ebx
c00173fb:	83 ec 10             	sub    esp,0x10
c00173fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017402:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017406:	85 ff                	test   edi,edi
c0017408:	74 7b                	je     c0017485 <ISO9660::openDir(char const*, void**)+0x8d>
c001740a:	85 f6                	test   esi,esi
c001740c:	74 77                	je     c0017485 <ISO9660::openDir(char const*, void**)+0x8d>
c001740e:	83 ec 0c             	sub    esp,0xc
c0017411:	6a 1c                	push   0x1c
c0017413:	e8 39 f8 fe ff       	call   c0006c51 <malloc>
c0017418:	89 07                	mov    DWORD PTR [edi],eax
c001741a:	89 c3                	mov    ebx,eax
c001741c:	58                   	pop    eax
c001741d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017421:	50                   	push   eax
c0017422:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017425:	50                   	push   eax
c0017426:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001742a:	50                   	push   eax
c001742b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001742f:	50                   	push   eax
c0017430:	56                   	push   esi
c0017431:	e8 ce fd ff ff       	call   c0017204 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017436:	83 c4 20             	add    esp,0x20
c0017439:	84 c0                	test   al,al
c001743b:	74 07                	je     c0017444 <ISO9660::openDir(char const*, void**)+0x4c>
c001743d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017442:	75 0b                	jne    c001744f <ISO9660::openDir(char const*, void**)+0x57>
c0017444:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0017448:	b8 01 00 00 00       	mov    eax,0x1
c001744d:	eb 3b                	jmp    c001748a <ISO9660::openDir(char const*, void**)+0x92>
c001744f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017453:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0017457:	89 03                	mov    DWORD PTR [ebx],eax
c0017459:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017460:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017464:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001746b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017472:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017475:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001747c:	8a 06                	mov    al,BYTE PTR [esi]
c001747e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017481:	31 c0                	xor    eax,eax
c0017483:	eb 05                	jmp    c001748a <ISO9660::openDir(char const*, void**)+0x92>
c0017485:	b8 04 00 00 00       	mov    eax,0x4
c001748a:	83 c4 10             	add    esp,0x10
c001748d:	5b                   	pop    ebx
c001748e:	5e                   	pop    esi
c001748f:	5f                   	pop    edi
c0017490:	c3                   	ret    
c0017491:	90                   	nop

c0017492 <ISO9660::ISO9660()>:
c0017492:	83 ec 0c             	sub    esp,0xc
c0017495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017499:	83 ec 0c             	sub    esp,0xc
c001749c:	50                   	push   eax
c001749d:	e8 94 28 ff ff       	call   c0009d36 <Filesystem::Filesystem()>
c00174a2:	83 c4 10             	add    esp,0x10
c00174a5:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c00174aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ae:	89 10                	mov    DWORD PTR [eax],edx
c00174b0:	90                   	nop
c00174b1:	83 c4 0c             	add    esp,0xc
c00174b4:	c3                   	ret    
c00174b5:	90                   	nop

c00174b6 <SoundCard::beginPlayback()>:
c00174b6:	c7 44 24 04 30 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e730
c00174be:	e9 a4 80 ff ff       	jmp    c000f567 <Krnl::panic(char const*)>
c00174c3:	90                   	nop

c00174c4 <SoundCard::stopPlayback()>:
c00174c4:	c7 44 24 04 30 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e730
c00174cc:	e9 96 80 ff ff       	jmp    c000f567 <Krnl::panic(char const*)>
c00174d1:	90                   	nop

c00174d2 <SoundCard::SoundCard(char const*)>:
c00174d2:	83 ec 1c             	sub    esp,0x1c
c00174d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174d9:	83 ec 08             	sub    esp,0x8
c00174dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174e0:	50                   	push   eax
c00174e1:	e8 06 3b ff ff       	call   c000afec <Device::Device(char const*)>
c00174e6:	83 c4 10             	add    esp,0x10
c00174e9:	ba 7c e7 01 c0       	mov    edx,0xc001e77c
c00174ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174f2:	89 10                	mov    DWORD PTR [eax],edx
c00174f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174f8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00174ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017503:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001750d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017511:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001751b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001751f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001752d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017537:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001753f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017544:	7f 19                	jg     c001755f <SoundCard::SoundCard(char const*)+0x8d>
c0017546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001754a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001754e:	83 c2 54             	add    edx,0x54
c0017551:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017559:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001755d:	eb e0                	jmp    c001753f <SoundCard::SoundCard(char const*)+0x6d>
c001755f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017563:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001756a:	90                   	nop
c001756b:	83 c4 1c             	add    esp,0x1c
c001756e:	c3                   	ret    
c001756f:	90                   	nop

c0017570 <SoundCard::~SoundCard()>:
c0017570:	83 ec 0c             	sub    esp,0xc
c0017573:	ba 7c e7 01 c0       	mov    edx,0xc001e77c
c0017578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001757c:	89 10                	mov    DWORD PTR [eax],edx
c001757e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017582:	83 ec 0c             	sub    esp,0xc
c0017585:	50                   	push   eax
c0017586:	e8 cb 37 ff ff       	call   c000ad56 <Device::~Device()>
c001758b:	83 c4 10             	add    esp,0x10
c001758e:	90                   	nop
c001758f:	83 c4 0c             	add    esp,0xc
c0017592:	c3                   	ret    
c0017593:	90                   	nop

c0017594 <SoundCard::~SoundCard()>:
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	83 ec 0c             	sub    esp,0xc
c001759a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001759e:	e8 cd ff ff ff       	call   c0017570 <SoundCard::~SoundCard()>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	83 ec 08             	sub    esp,0x8
c00175a9:	68 e8 01 00 00       	push   0x1e8
c00175ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b2:	e8 67 23 ff ff       	call   c000991e <operator delete(void*, unsigned long)>
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	83 c4 0c             	add    esp,0xc
c00175bd:	c3                   	ret    

c00175be <SoundCard::configureRates(int, int, int)>:
c00175be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00175c2:	31 c0                	xor    eax,eax
c00175c4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00175cb:	75 20                	jne    c00175ed <SoundCard::configureRates(int, int, int)+0x2f>
c00175cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00175d1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00175d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175db:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00175e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00175eb:	b0 01                	mov    al,0x1
c00175ed:	c3                   	ret    

c00175ee <SoundCard::getSamples16(int, short*)>:
c00175ee:	55                   	push   ebp
c00175ef:	57                   	push   edi
c00175f0:	31 ff                	xor    edi,edi
c00175f2:	56                   	push   esi
c00175f3:	53                   	push   ebx
c00175f4:	31 db                	xor    ebx,ebx
c00175f6:	83 ec 10             	sub    esp,0x10
c00175f9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00175fd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017601:	8d 04 36             	lea    eax,[esi+esi*1]
c0017604:	50                   	push   eax
c0017605:	6a 00                	push   0x0
c0017607:	55                   	push   ebp
c0017608:	e8 e3 8e fe ff       	call   c00004f0 <memset>
c001760d:	83 c4 10             	add    esp,0x10
c0017610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017614:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001761b:	85 c0                	test   eax,eax
c001761d:	74 1b                	je     c001763a <SoundCard::getSamples16(int, short*)+0x4c>
c001761f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017623:	75 15                	jne    c001763a <SoundCard::getSamples16(int, short*)+0x4c>
c0017625:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017629:	55                   	push   ebp
c001762a:	56                   	push   esi
c001762b:	50                   	push   eax
c001762c:	e8 ef 02 00 00       	call   c0017920 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	39 c7                	cmp    edi,eax
c0017636:	7d 02                	jge    c001763a <SoundCard::getSamples16(int, short*)+0x4c>
c0017638:	89 c7                	mov    edi,eax
c001763a:	43                   	inc    ebx
c001763b:	83 fb 20             	cmp    ebx,0x20
c001763e:	75 d0                	jne    c0017610 <SoundCard::getSamples16(int, short*)+0x22>
c0017640:	83 c4 0c             	add    esp,0xc
c0017643:	89 f8                	mov    eax,edi
c0017645:	5b                   	pop    ebx
c0017646:	5e                   	pop    esi
c0017647:	5f                   	pop    edi
c0017648:	5d                   	pop    ebp
c0017649:	c3                   	ret    

c001764a <SoundCard::getSamples32(int, int*)>:
c001764a:	55                   	push   ebp
c001764b:	57                   	push   edi
c001764c:	31 ff                	xor    edi,edi
c001764e:	56                   	push   esi
c001764f:	31 f6                	xor    esi,esi
c0017651:	53                   	push   ebx
c0017652:	83 ec 10             	sub    esp,0x10
c0017655:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017659:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001765d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017661:	c1 e0 02             	shl    eax,0x2
c0017664:	50                   	push   eax
c0017665:	6a 00                	push   0x0
c0017667:	55                   	push   ebp
c0017668:	e8 83 8e fe ff       	call   c00004f0 <memset>
c001766d:	83 c4 10             	add    esp,0x10
c0017670:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017677:	85 c0                	test   eax,eax
c0017679:	74 1b                	je     c0017696 <SoundCard::getSamples32(int, int*)+0x4c>
c001767b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001767f:	75 15                	jne    c0017696 <SoundCard::getSamples32(int, int*)+0x4c>
c0017681:	53                   	push   ebx
c0017682:	55                   	push   ebp
c0017683:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017687:	50                   	push   eax
c0017688:	e8 57 03 00 00       	call   c00179e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	39 c6                	cmp    esi,eax
c0017692:	7d 02                	jge    c0017696 <SoundCard::getSamples32(int, int*)+0x4c>
c0017694:	89 c6                	mov    esi,eax
c0017696:	47                   	inc    edi
c0017697:	83 ff 20             	cmp    edi,0x20
c001769a:	75 d4                	jne    c0017670 <SoundCard::getSamples32(int, int*)+0x26>
c001769c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00176a2:	85 f6                	test   esi,esi
c00176a4:	75 0f                	jne    c00176b5 <SoundCard::getSamples32(int, int*)+0x6b>
c00176a6:	84 c0                	test   al,al
c00176a8:	74 1b                	je     c00176c5 <SoundCard::getSamples32(int, int*)+0x7b>
c00176aa:	83 ec 0c             	sub    esp,0xc
c00176ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176af:	53                   	push   ebx
c00176b0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00176b3:	eb 0d                	jmp    c00176c2 <SoundCard::getSamples32(int, int*)+0x78>
c00176b5:	84 c0                	test   al,al
c00176b7:	75 0c                	jne    c00176c5 <SoundCard::getSamples32(int, int*)+0x7b>
c00176b9:	83 ec 0c             	sub    esp,0xc
c00176bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176be:	53                   	push   ebx
c00176bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176c2:	83 c4 10             	add    esp,0x10
c00176c5:	83 c4 0c             	add    esp,0xc
c00176c8:	89 f0                	mov    eax,esi
c00176ca:	5b                   	pop    ebx
c00176cb:	5e                   	pop    esi
c00176cc:	5f                   	pop    edi
c00176cd:	5d                   	pop    ebp
c00176ce:	c3                   	ret    
c00176cf:	90                   	nop

c00176d0 <SoundCard::addChannel(SoundPort*)>:
c00176d0:	83 ec 0c             	sub    esp,0xc
c00176d3:	31 c0                	xor    eax,eax
c00176d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176d9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00176e1:	74 1b                	je     c00176fe <SoundCard::addChannel(SoundPort*)+0x2e>
c00176e3:	40                   	inc    eax
c00176e4:	83 f8 20             	cmp    eax,0x20
c00176e7:	75 f0                	jne    c00176d9 <SoundCard::addChannel(SoundPort*)+0x9>
c00176e9:	83 ec 0c             	sub    esp,0xc
c00176ec:	68 55 e7 01 c0       	push   0xc001e755
c00176f1:	e8 71 7e ff ff       	call   c000f567 <Krnl::panic(char const*)>
c00176f6:	83 c4 10             	add    esp,0x10
c00176f9:	83 c8 ff             	or     eax,0xffffffff
c00176fc:	eb 0b                	jmp    c0017709 <SoundCard::addChannel(SoundPort*)+0x39>
c00176fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017702:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017709:	83 c4 0c             	add    esp,0xc
c001770c:	c3                   	ret    
c001770d:	90                   	nop

c001770e <SoundCard::removeChannel(int)>:
c001770e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017712:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017716:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017721:	c3                   	ret    
c0017722:	66 90                	xchg   ax,ax

c0017724 <SoundPort::SoundPort(int, int, int, int)>:
c0017724:	83 ec 0c             	sub    esp,0xc
c0017727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001772b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017736:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001773a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001773e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017742:	89 10                	mov    DWORD PTR [eax],edx
c0017744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017748:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001774c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001774f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017753:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017757:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001775a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001775f:	75 13                	jne    c0017774 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017765:	8b 00                	mov    eax,DWORD PTR [eax]
c0017767:	05 a0 0f 00 00       	add    eax,0xfa0
c001776c:	01 c0                	add    eax,eax
c001776e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017772:	66 90                	xchg   ax,ax
c0017774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017778:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001777c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001777f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017783:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001778a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001778e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017791:	c1 e0 02             	shl    eax,0x2
c0017794:	83 ec 0c             	sub    esp,0xc
c0017797:	50                   	push   eax
c0017798:	e8 b4 f4 fe ff       	call   c0006c51 <malloc>
c001779d:	83 c4 10             	add    esp,0x10
c00177a0:	89 c2                	mov    edx,eax
c00177a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00177a9:	90                   	nop
c00177aa:	83 c4 0c             	add    esp,0xc
c00177ad:	c3                   	ret    
c00177ae:	66 90                	xchg   ax,ax

c00177b0 <SoundPort::~SoundPort()>:
c00177b0:	83 ec 0c             	sub    esp,0xc
c00177b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00177ba:	85 c0                	test   eax,eax
c00177bc:	74 1e                	je     c00177dc <SoundPort::~SoundPort()+0x2c>
c00177be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00177c5:	83 ec 0c             	sub    esp,0xc
c00177c8:	50                   	push   eax
c00177c9:	e8 93 f4 fe ff       	call   c0006c61 <free>
c00177ce:	83 c4 10             	add    esp,0x10
c00177d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177d5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00177dc:	90                   	nop
c00177dd:	83 c4 0c             	add    esp,0xc
c00177e0:	c3                   	ret    
c00177e1:	90                   	nop
c00177e2:	66 90                	xchg   ax,ax

c00177e4 <SoundPort::unpause()>:
c00177e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177e8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00177ec:	c3                   	ret    
c00177ed:	90                   	nop
c00177ee:	66 90                	xchg   ax,ax

c00177f0 <SoundPort::pause()>:
c00177f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177f4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00177f8:	c3                   	ret    
c00177f9:	90                   	nop
c00177fa:	66 90                	xchg   ax,ax

c00177fc <SoundPort::getBufferUsed()>:
c00177fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017800:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017803:	c3                   	ret    

c0017804 <SoundPort::getBufferSize()>:
c0017804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017808:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001780b:	c3                   	ret    

c001780c <SoundPort::buffer16(short*, int)>:
c001780c:	55                   	push   ebp
c001780d:	57                   	push   edi
c001780e:	56                   	push   esi
c001780f:	53                   	push   ebx
c0017810:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017814:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017818:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001781b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001781e:	74 68                	je     c0017888 <SoundPort::buffer16(short*, int)+0x7c>
c0017820:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017824:	85 c9                	test   ecx,ecx
c0017826:	7e 60                	jle    c0017888 <SoundPort::buffer16(short*, int)+0x7c>
c0017828:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001782c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001782f:	c1 e1 0f             	shl    ecx,0xf
c0017832:	8d 70 01             	lea    esi,[eax+0x1]
c0017835:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017838:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001783b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001783e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017841:	74 4d                	je     c0017890 <SoundPort::buffer16(short*, int)+0x84>
c0017843:	31 f6                	xor    esi,esi
c0017845:	eb 21                	jmp    c0017868 <SoundPort::buffer16(short*, int)+0x5c>
c0017847:	90                   	nop
c0017848:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001784d:	8d 79 01             	lea    edi,[ecx+0x1]
c0017850:	c1 e3 0f             	shl    ebx,0xf
c0017853:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017856:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017859:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001785c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001785f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017862:	74 1c                	je     c0017880 <SoundPort::buffer16(short*, int)+0x74>
c0017864:	89 c6                	mov    esi,eax
c0017866:	66 90                	xchg   ax,ax
c0017868:	8d 46 01             	lea    eax,[esi+0x1]
c001786b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001786f:	75 d7                	jne    c0017848 <SoundPort::buffer16(short*, int)+0x3c>
c0017871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017875:	8d 76 00             	lea    esi,[esi+0x0]
c0017878:	5b                   	pop    ebx
c0017879:	5e                   	pop    esi
c001787a:	5f                   	pop    edi
c001787b:	5d                   	pop    ebp
c001787c:	c3                   	ret    
c001787d:	8d 76 00             	lea    esi,[esi+0x0]
c0017880:	5b                   	pop    ebx
c0017881:	8d 46 02             	lea    eax,[esi+0x2]
c0017884:	5e                   	pop    esi
c0017885:	5f                   	pop    edi
c0017886:	5d                   	pop    ebp
c0017887:	c3                   	ret    
c0017888:	5b                   	pop    ebx
c0017889:	31 c0                	xor    eax,eax
c001788b:	5e                   	pop    esi
c001788c:	5f                   	pop    edi
c001788d:	5d                   	pop    ebp
c001788e:	c3                   	ret    
c001788f:	90                   	nop
c0017890:	b8 01 00 00 00       	mov    eax,0x1
c0017895:	eb e1                	jmp    c0017878 <SoundPort::buffer16(short*, int)+0x6c>
c0017897:	90                   	nop

c0017898 <SoundPort::buffer32(int*, int)>:
c0017898:	55                   	push   ebp
c0017899:	57                   	push   edi
c001789a:	56                   	push   esi
c001789b:	53                   	push   ebx
c001789c:	51                   	push   ecx
c001789d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00178a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00178ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00178af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00178b2:	74 5c                	je     c0017910 <SoundPort::buffer32(int*, int)+0x78>
c00178b4:	85 c0                	test   eax,eax
c00178b6:	7e 58                	jle    c0017910 <SoundPort::buffer32(int*, int)+0x78>
c00178b8:	8d 71 01             	lea    esi,[ecx+0x1]
c00178bb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00178be:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00178c1:	8b 37                	mov    esi,DWORD PTR [edi]
c00178c3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00178c6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00178c9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00178cc:	74 4a                	je     c0017918 <SoundPort::buffer32(int*, int)+0x80>
c00178ce:	31 f6                	xor    esi,esi
c00178d0:	eb 1e                	jmp    c00178f0 <SoundPort::buffer32(int*, int)+0x58>
c00178d2:	66 90                	xchg   ax,ax
c00178d4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00178d7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00178da:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00178dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178e0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00178e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00178e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00178ea:	74 18                	je     c0017904 <SoundPort::buffer32(int*, int)+0x6c>
c00178ec:	89 de                	mov    esi,ebx
c00178ee:	66 90                	xchg   ax,ax
c00178f0:	8d 5e 01             	lea    ebx,[esi+0x1]
c00178f3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00178f6:	75 dc                	jne    c00178d4 <SoundPort::buffer32(int*, int)+0x3c>
c00178f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00178fb:	90                   	nop
c00178fc:	5a                   	pop    edx
c00178fd:	5b                   	pop    ebx
c00178fe:	5e                   	pop    esi
c00178ff:	5f                   	pop    edi
c0017900:	5d                   	pop    ebp
c0017901:	c3                   	ret    
c0017902:	66 90                	xchg   ax,ax
c0017904:	5a                   	pop    edx
c0017905:	8d 46 02             	lea    eax,[esi+0x2]
c0017908:	5b                   	pop    ebx
c0017909:	5e                   	pop    esi
c001790a:	5f                   	pop    edi
c001790b:	5d                   	pop    ebp
c001790c:	c3                   	ret    
c001790d:	8d 76 00             	lea    esi,[esi+0x0]
c0017910:	5a                   	pop    edx
c0017911:	31 c0                	xor    eax,eax
c0017913:	5b                   	pop    ebx
c0017914:	5e                   	pop    esi
c0017915:	5f                   	pop    edi
c0017916:	5d                   	pop    ebp
c0017917:	c3                   	ret    
c0017918:	b8 01 00 00 00       	mov    eax,0x1
c001791d:	eb dd                	jmp    c00178fc <SoundPort::buffer32(int*, int)+0x64>
c001791f:	90                   	nop

c0017920 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017920:	57                   	push   edi
c0017921:	56                   	push   esi
c0017922:	53                   	push   ebx
c0017923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017927:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001792b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017931:	39 03                	cmp    DWORD PTR [ebx],eax
c0017933:	74 13                	je     c0017948 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017935:	83 ec 0c             	sub    esp,0xc
c0017938:	68 a8 e7 01 c0       	push   0xc001e7a8
c001793d:	e8 25 7c ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017942:	83 c4 10             	add    esp,0x10
c0017945:	8d 76 00             	lea    esi,[esi+0x0]
c0017948:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001794e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017951:	74 11                	je     c0017964 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017953:	83 ec 0c             	sub    esp,0xc
c0017956:	68 e7 e7 01 c0       	push   0xc001e7e7
c001795b:	e8 07 7c ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017960:	83 c4 10             	add    esp,0x10
c0017963:	90                   	nop
c0017964:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001796a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001796d:	74 11                	je     c0017980 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001796f:	83 ec 0c             	sub    esp,0xc
c0017972:	68 e7 e7 01 c0       	push   0xc001e7e7
c0017977:	e8 eb 7b ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001797c:	83 c4 10             	add    esp,0x10
c001797f:	90                   	nop
c0017980:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017983:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017987:	7e 07                	jle    c0017990 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017989:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001798d:	8d 76 00             	lea    esi,[esi+0x0]
c0017990:	85 f6                	test   esi,esi
c0017992:	7e 2c                	jle    c00179c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017994:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017998:	8d 3c 36             	lea    edi,[esi+esi*1]
c001799b:	31 c9                	xor    ecx,ecx
c001799d:	01 d7                	add    edi,edx
c001799f:	90                   	nop
c00179a0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00179a3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00179a6:	85 c0                	test   eax,eax
c00179a8:	79 06                	jns    c00179b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00179aa:	05 ff 7f 00 00       	add    eax,0x7fff
c00179af:	90                   	nop
c00179b0:	c1 f8 0f             	sar    eax,0xf
c00179b3:	83 c1 04             	add    ecx,0x4
c00179b6:	66 01 02             	add    WORD PTR [edx],ax
c00179b9:	83 c2 02             	add    edx,0x2
c00179bc:	39 d7                	cmp    edi,edx
c00179be:	75 e0                	jne    c00179a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00179c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00179c3:	50                   	push   eax
c00179c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00179c7:	29 f0                	sub    eax,esi
c00179c9:	c1 e0 02             	shl    eax,0x2
c00179cc:	50                   	push   eax
c00179cd:	8d 04 b2             	lea    eax,[edx+esi*4]
c00179d0:	50                   	push   eax
c00179d1:	52                   	push   edx
c00179d2:	e8 29 8a fe ff       	call   c0000400 <memmove>
c00179d7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00179da:	83 c4 10             	add    esp,0x10
c00179dd:	89 f0                	mov    eax,esi
c00179df:	5b                   	pop    ebx
c00179e0:	5e                   	pop    esi
c00179e1:	5f                   	pop    edi
c00179e2:	c3                   	ret    
c00179e3:	90                   	nop

c00179e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00179e4:	57                   	push   edi
c00179e5:	56                   	push   esi
c00179e6:	53                   	push   ebx
c00179e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00179eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00179ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00179f3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00179f9:	39 06                	cmp    DWORD PTR [esi],eax
c00179fb:	74 13                	je     c0017a10 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	68 c8 e7 01 c0       	push   0xc001e7c8
c0017a05:	e8 5d 7b ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017a0a:	83 c4 10             	add    esp,0x10
c0017a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017a10:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017a16:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017a19:	74 11                	je     c0017a2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017a1b:	83 ec 0c             	sub    esp,0xc
c0017a1e:	68 03 e8 01 c0       	push   0xc001e803
c0017a23:	e8 3f 7b ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	90                   	nop
c0017a2c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017a32:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017a35:	74 11                	je     c0017a48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017a37:	83 ec 0c             	sub    esp,0xc
c0017a3a:	68 03 e8 01 c0       	push   0xc001e803
c0017a3f:	e8 23 7b ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017a44:	83 c4 10             	add    esp,0x10
c0017a47:	90                   	nop
c0017a48:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017a4b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017a4f:	7e 07                	jle    c0017a58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017a51:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017a55:	8d 76 00             	lea    esi,[esi+0x0]
c0017a58:	85 ff                	test   edi,edi
c0017a5a:	7e 1c                	jle    c0017a78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017a5c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017a63:	31 c0                	xor    eax,eax
c0017a65:	8d 76 00             	lea    esi,[esi+0x0]
c0017a68:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017a6b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017a6e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017a71:	83 c0 04             	add    eax,0x4
c0017a74:	39 c1                	cmp    ecx,eax
c0017a76:	75 f0                	jne    c0017a68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017a78:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017a7b:	50                   	push   eax
c0017a7c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a7f:	29 f8                	sub    eax,edi
c0017a81:	c1 e0 02             	shl    eax,0x2
c0017a84:	50                   	push   eax
c0017a85:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017a88:	50                   	push   eax
c0017a89:	52                   	push   edx
c0017a8a:	e8 71 89 fe ff       	call   c0000400 <memmove>
c0017a8f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017a92:	83 c4 10             	add    esp,0x10
c0017a95:	89 f8                	mov    eax,edi
c0017a97:	5b                   	pop    ebx
c0017a98:	5e                   	pop    esi
c0017a99:	5f                   	pop    edi
c0017a9a:	c3                   	ret    
c0017a9b:	90                   	nop

c0017a9c <PCI::open(int, int, void*)>:
c0017a9c:	83 ec 18             	sub    esp,0x18
c0017a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017aa3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aa7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017aad:	8b 10                	mov    edx,DWORD PTR [eax]
c0017aaf:	50                   	push   eax
c0017ab0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017ab3:	31 c0                	xor    eax,eax
c0017ab5:	83 c4 1c             	add    esp,0x1c
c0017ab8:	c3                   	ret    
c0017ab9:	90                   	nop

c0017aba <PCI::close(int, int, void*)>:
c0017aba:	31 c0                	xor    eax,eax
c0017abc:	c3                   	ret    
c0017abd:	90                   	nop

c0017abe <PCI::PCI()>:
c0017abe:	83 ec 0c             	sub    esp,0xc
c0017ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac5:	83 ec 08             	sub    esp,0x8
c0017ac8:	68 1f e8 01 c0       	push   0xc001e81f
c0017acd:	50                   	push   eax
c0017ace:	e8 d5 2c ff ff       	call   c000a7a8 <Bus::Bus(char const*)>
c0017ad3:	83 c4 10             	add    esp,0x10
c0017ad6:	ba c8 e8 01 c0       	mov    edx,0xc001e8c8
c0017adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017adf:	89 10                	mov    DWORD PTR [eax],edx
c0017ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af3:	a3 60 34 02 c0       	mov    ds:0xc0023460,eax
c0017af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017afc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017b02:	31 d2                	xor    edx,edx
c0017b04:	88 c2                	mov    dl,al
c0017b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b0a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0017b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b15:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017b1b:	31 d2                	xor    edx,edx
c0017b1d:	88 c2                	mov    dl,al
c0017b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b23:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0017b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b2c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017b32:	8d 50 01             	lea    edx,[eax+0x1]
c0017b35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017b39:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0017b3f:	31 d2                	xor    edx,edx
c0017b41:	88 c2                	mov    dl,al
c0017b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b47:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0017b4b:	83 c9 c0             	or     ecx,0xffffffc0
c0017b4e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0017b52:	90                   	nop
c0017b53:	83 c4 0c             	add    esp,0xc
c0017b56:	c3                   	ret    
c0017b57:	90                   	nop

c0017b58 <PCI::readBAR8(unsigned int, int)>:
c0017b58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b60:	f6 c2 01             	test   dl,0x1
c0017b63:	74 07                	je     c0017b6c <PCI::readBAR8(unsigned int, int)+0x14>
c0017b65:	83 e2 fc             	and    edx,0xfffffffc
c0017b68:	01 c2                	add    edx,eax
c0017b6a:	ec                   	in     al,dx
c0017b6b:	c3                   	ret    
c0017b6c:	83 e2 f0             	and    edx,0xfffffff0
c0017b6f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0017b72:	c3                   	ret    
c0017b73:	90                   	nop

c0017b74 <PCI::readBAR16(unsigned int, int)>:
c0017b74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b7c:	f6 c2 01             	test   dl,0x1
c0017b7f:	74 08                	je     c0017b89 <PCI::readBAR16(unsigned int, int)+0x15>
c0017b81:	83 e2 fc             	and    edx,0xfffffffc
c0017b84:	01 c2                	add    edx,eax
c0017b86:	66 ed                	in     ax,dx
c0017b88:	c3                   	ret    
c0017b89:	83 e2 f0             	and    edx,0xfffffff0
c0017b8c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0017b90:	c3                   	ret    
c0017b91:	90                   	nop

c0017b92 <PCI::readBAR32(unsigned int, int)>:
c0017b92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b9a:	f6 c2 01             	test   dl,0x1
c0017b9d:	74 07                	je     c0017ba6 <PCI::readBAR32(unsigned int, int)+0x14>
c0017b9f:	83 e2 fc             	and    edx,0xfffffffc
c0017ba2:	01 c2                	add    edx,eax
c0017ba4:	ed                   	in     eax,dx
c0017ba5:	c3                   	ret    
c0017ba6:	83 e2 f0             	and    edx,0xfffffff0
c0017ba9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0017bac:	c3                   	ret    
c0017bad:	90                   	nop

c0017bae <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0017bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017bba:	f6 c2 01             	test   dl,0x1
c0017bbd:	74 07                	je     c0017bc6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0017bbf:	83 e2 fc             	and    edx,0xfffffffc
c0017bc2:	01 ca                	add    edx,ecx
c0017bc4:	ee                   	out    dx,al
c0017bc5:	c3                   	ret    
c0017bc6:	83 e2 f0             	and    edx,0xfffffff0
c0017bc9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0017bcc:	c3                   	ret    
c0017bcd:	90                   	nop

c0017bce <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0017bce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017bda:	f6 c2 01             	test   dl,0x1
c0017bdd:	74 08                	je     c0017be7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0017bdf:	83 e2 fc             	and    edx,0xfffffffc
c0017be2:	01 ca                	add    edx,ecx
c0017be4:	66 ef                	out    dx,ax
c0017be6:	c3                   	ret    
c0017be7:	83 e2 f0             	and    edx,0xfffffff0
c0017bea:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0017bee:	c3                   	ret    
c0017bef:	90                   	nop

c0017bf0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0017bf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017bfc:	f6 c2 01             	test   dl,0x1
c0017bff:	74 07                	je     c0017c08 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0017c01:	83 e2 fc             	and    edx,0xfffffffc
c0017c04:	01 ca                	add    edx,ecx
c0017c06:	ef                   	out    dx,eax
c0017c07:	c3                   	ret    
c0017c08:	83 e2 f0             	and    edx,0xfffffff0
c0017c0b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0017c0e:	c3                   	ret    
c0017c0f:	90                   	nop

c0017c10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017c10:	55                   	push   ebp
c0017c11:	57                   	push   edi
c0017c12:	56                   	push   esi
c0017c13:	53                   	push   ebx
c0017c14:	83 ec 0c             	sub    esp,0xc
c0017c17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017c1b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0017c1f:	89 f0                	mov    eax,esi
c0017c21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017c25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017c29:	3c 07                	cmp    al,0x7
c0017c2b:	76 10                	jbe    c0017c3d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0017c2d:	83 ec 0c             	sub    esp,0xc
c0017c30:	68 27 e8 01 c0       	push   0xc001e827
c0017c35:	e8 2d 79 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017c3a:	83 c4 10             	add    esp,0x10
c0017c3d:	80 fb 0f             	cmp    bl,0xf
c0017c40:	76 10                	jbe    c0017c52 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0017c42:	83 ec 0c             	sub    esp,0xc
c0017c45:	68 57 e8 01 c0       	push   0xc001e857
c0017c4a:	e8 18 79 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	8d 04 36             	lea    eax,[esi+esi*1]
c0017c55:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017c5a:	83 c8 f0             	or     eax,0xfffffff0
c0017c5d:	ee                   	out    dx,al
c0017c5e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0017c63:	89 e8                	mov    eax,ebp
c0017c65:	ee                   	out    dx,al
c0017c66:	83 c4 0c             	add    esp,0xc
c0017c69:	89 d8                	mov    eax,ebx
c0017c6b:	66 81 e7 fc 00       	and    di,0xfc
c0017c70:	5b                   	pop    ebx
c0017c71:	c1 e0 08             	shl    eax,0x8
c0017c74:	5e                   	pop    esi
c0017c75:	09 f8                	or     eax,edi
c0017c77:	5f                   	pop    edi
c0017c78:	66 0d 00 c0          	or     ax,0xc000
c0017c7c:	5d                   	pop    ebp
c0017c7d:	c3                   	ret    

c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017c7e:	57                   	push   edi
c0017c7f:	56                   	push   esi
c0017c80:	53                   	push   ebx
c0017c81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017c85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c89:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0017c8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017c97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017c9b:	83 ff 01             	cmp    edi,0x1
c0017c9e:	75 3e                	jne    c0017cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0017ca0:	89 de                	mov    esi,ebx
c0017ca2:	0f b6 c0             	movzx  eax,al
c0017ca5:	81 e6 fc 00 00 00    	and    esi,0xfc
c0017cab:	c1 e0 10             	shl    eax,0x10
c0017cae:	0f b6 c9             	movzx  ecx,cl
c0017cb1:	09 f0                	or     eax,esi
c0017cb3:	c1 e1 08             	shl    ecx,0x8
c0017cb6:	0f b6 d2             	movzx  edx,dl
c0017cb9:	09 c8                	or     eax,ecx
c0017cbb:	c1 e2 0b             	shl    edx,0xb
c0017cbe:	09 d0                	or     eax,edx
c0017cc0:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017cc5:	0d 00 00 00 80       	or     eax,0x80000000
c0017cca:	ef                   	out    dx,eax
c0017ccb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017cd0:	ed                   	in     eax,dx
c0017cd1:	83 e3 02             	and    ebx,0x2
c0017cd4:	0f b6 cb             	movzx  ecx,bl
c0017cd7:	c1 e1 03             	shl    ecx,0x3
c0017cda:	d3 e8                	shr    eax,cl
c0017cdc:	eb 43                	jmp    c0017d21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017cde:	83 ff 02             	cmp    edi,0x2
c0017ce1:	75 2c                	jne    c0017d0f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0017ce3:	83 ec 0c             	sub    esp,0xc
c0017ce6:	0f b6 c9             	movzx  ecx,cl
c0017ce9:	0f b6 d2             	movzx  edx,dl
c0017cec:	0f b6 fb             	movzx  edi,bl
c0017cef:	0f b6 c0             	movzx  eax,al
c0017cf2:	57                   	push   edi
c0017cf3:	51                   	push   ecx
c0017cf4:	52                   	push   edx
c0017cf5:	50                   	push   eax
c0017cf6:	56                   	push   esi
c0017cf7:	e8 14 ff ff ff       	call   c0017c10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cfc:	89 c2                	mov    edx,eax
c0017cfe:	ed                   	in     eax,dx
c0017cff:	83 e3 02             	and    ebx,0x2
c0017d02:	83 c4 20             	add    esp,0x20
c0017d05:	0f b6 cb             	movzx  ecx,bl
c0017d08:	c1 e1 03             	shl    ecx,0x3
c0017d0b:	d3 e8                	shr    eax,cl
c0017d0d:	eb 12                	jmp    c0017d21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017d0f:	83 ec 0c             	sub    esp,0xc
c0017d12:	68 87 e8 01 c0       	push   0xc001e887
c0017d17:	e8 4b 78 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0017d1c:	83 c4 10             	add    esp,0x10
c0017d1f:	31 c0                	xor    eax,eax
c0017d21:	5b                   	pop    ebx
c0017d22:	5e                   	pop    esi
c0017d23:	5f                   	pop    edi
c0017d24:	c3                   	ret    
c0017d25:	90                   	nop

c0017d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0017d26:	83 ec 18             	sub    esp,0x18
c0017d29:	6a 00                	push   0x0
c0017d2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d30:	50                   	push   eax
c0017d31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d36:	50                   	push   eax
c0017d37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d3c:	50                   	push   eax
c0017d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d41:	e8 38 ff ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d46:	83 c4 2c             	add    esp,0x2c
c0017d49:	c3                   	ret    

c0017d4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0017d4a:	83 ec 18             	sub    esp,0x18
c0017d4d:	6a 0e                	push   0xe
c0017d4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d54:	50                   	push   eax
c0017d55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d5a:	50                   	push   eax
c0017d5b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d60:	50                   	push   eax
c0017d61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d65:	e8 14 ff ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d6a:	83 c4 2c             	add    esp,0x2c
c0017d6d:	0f b6 c0             	movzx  eax,al
c0017d70:	c3                   	ret    
c0017d71:	90                   	nop

c0017d72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0017d72:	55                   	push   ebp
c0017d73:	57                   	push   edi
c0017d74:	56                   	push   esi
c0017d75:	53                   	push   ebx
c0017d76:	83 ec 18             	sub    esp,0x18
c0017d79:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0017d7e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0017d83:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0017d88:	6a 0a                	push   0xa
c0017d8a:	56                   	push   esi
c0017d8b:	55                   	push   ebp
c0017d8c:	57                   	push   edi
c0017d8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017d91:	e8 e8 fe ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d96:	83 c4 14             	add    esp,0x14
c0017d99:	89 c3                	mov    ebx,eax
c0017d9b:	6a 0a                	push   0xa
c0017d9d:	0f b6 db             	movzx  ebx,bl
c0017da0:	56                   	push   esi
c0017da1:	55                   	push   ebp
c0017da2:	57                   	push   edi
c0017da3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017da7:	e8 d2 fe ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017dac:	83 c4 2c             	add    esp,0x2c
c0017daf:	25 00 ff 00 00       	and    eax,0xff00
c0017db4:	09 d8                	or     eax,ebx
c0017db6:	5b                   	pop    ebx
c0017db7:	5e                   	pop    esi
c0017db8:	5f                   	pop    edi
c0017db9:	5d                   	pop    ebp
c0017dba:	c3                   	ret    
c0017dbb:	90                   	nop

c0017dbc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0017dbc:	83 ec 18             	sub    esp,0x18
c0017dbf:	6a 08                	push   0x8
c0017dc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017dc6:	50                   	push   eax
c0017dc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017dcc:	50                   	push   eax
c0017dcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017dd2:	50                   	push   eax
c0017dd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dd7:	e8 a2 fe ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017ddc:	83 c4 2c             	add    esp,0x2c
c0017ddf:	0f b6 c4             	movzx  eax,ah
c0017de2:	c3                   	ret    
c0017de3:	90                   	nop

c0017de4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0017de4:	83 ec 18             	sub    esp,0x18
c0017de7:	6a 08                	push   0x8
c0017de9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017dee:	50                   	push   eax
c0017def:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017df4:	50                   	push   eax
c0017df5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017dfa:	50                   	push   eax
c0017dfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dff:	e8 7a fe ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e04:	83 c4 2c             	add    esp,0x2c
c0017e07:	c3                   	ret    

c0017e08 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0017e08:	83 ec 18             	sub    esp,0x18
c0017e0b:	6a 3c                	push   0x3c
c0017e0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e12:	50                   	push   eax
c0017e13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e18:	50                   	push   eax
c0017e19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e1e:	50                   	push   eax
c0017e1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e23:	e8 56 fe ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e28:	83 c4 2c             	add    esp,0x2c
c0017e2b:	c3                   	ret    

c0017e2c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0017e2c:	83 ec 18             	sub    esp,0x18
c0017e2f:	6a 18                	push   0x18
c0017e31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e36:	50                   	push   eax
c0017e37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e3c:	50                   	push   eax
c0017e3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e42:	50                   	push   eax
c0017e43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e47:	e8 32 fe ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e4c:	83 c4 2c             	add    esp,0x2c
c0017e4f:	0f b6 c4             	movzx  eax,ah
c0017e52:	c3                   	ret    
c0017e53:	90                   	nop

c0017e54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017e54:	55                   	push   ebp
c0017e55:	57                   	push   edi
c0017e56:	56                   	push   esi
c0017e57:	53                   	push   ebx
c0017e58:	83 ec 28             	sub    esp,0x28
c0017e5b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0017e5f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0017e64:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0017e69:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0017e6e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0017e75:	8d 43 12             	lea    eax,[ebx+0x12]
c0017e78:	83 c3 10             	add    ebx,0x10
c0017e7b:	0f b6 c0             	movzx  eax,al
c0017e7e:	0f b6 db             	movzx  ebx,bl
c0017e81:	50                   	push   eax
c0017e82:	51                   	push   ecx
c0017e83:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017e87:	57                   	push   edi
c0017e88:	55                   	push   ebp
c0017e89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017e8d:	e8 ec fd ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e92:	83 c4 14             	add    esp,0x14
c0017e95:	89 c6                	mov    esi,eax
c0017e97:	53                   	push   ebx
c0017e98:	c1 e6 10             	shl    esi,0x10
c0017e9b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017e9f:	51                   	push   ecx
c0017ea0:	57                   	push   edi
c0017ea1:	55                   	push   ebp
c0017ea2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ea6:	e8 d3 fd ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017eab:	83 c4 3c             	add    esp,0x3c
c0017eae:	0f b7 c0             	movzx  eax,ax
c0017eb1:	5b                   	pop    ebx
c0017eb2:	09 f0                	or     eax,esi
c0017eb4:	5e                   	pop    esi
c0017eb5:	5f                   	pop    edi
c0017eb6:	5d                   	pop    ebp
c0017eb7:	c3                   	ret    

c0017eb8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0017eb8:	55                   	push   ebp
c0017eb9:	57                   	push   edi
c0017eba:	56                   	push   esi
c0017ebb:	53                   	push   ebx
c0017ebc:	83 ec 0c             	sub    esp,0xc
c0017ebf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017ec3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0017ec7:	89 f5                	mov    ebp,esi
c0017ec9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0017ecf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ed3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017edb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017edf:	83 f9 01             	cmp    ecx,0x1
c0017ee2:	75 5d                	jne    c0017f41 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0017ee4:	0f b6 c8             	movzx  ecx,al
c0017ee7:	0f b6 d2             	movzx  edx,dl
c0017eea:	c1 e1 10             	shl    ecx,0x10
c0017eed:	c1 e2 0b             	shl    edx,0xb
c0017ef0:	89 f0                	mov    eax,esi
c0017ef2:	25 fc 00 00 00       	and    eax,0xfc
c0017ef7:	09 c1                	or     ecx,eax
c0017ef9:	89 e8                	mov    eax,ebp
c0017efb:	0f b6 c0             	movzx  eax,al
c0017efe:	c1 e0 08             	shl    eax,0x8
c0017f01:	09 c1                	or     ecx,eax
c0017f03:	09 d1                	or     ecx,edx
c0017f05:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017f0a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0017f10:	89 c8                	mov    eax,ecx
c0017f12:	ef                   	out    dx,eax
c0017f13:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017f18:	ed                   	in     eax,dx
c0017f19:	0f b7 db             	movzx  ebx,bx
c0017f1c:	83 e6 02             	and    esi,0x2
c0017f1f:	74 0a                	je     c0017f2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0017f21:	0f b7 d0             	movzx  edx,ax
c0017f24:	c1 e3 10             	shl    ebx,0x10
c0017f27:	09 d3                	or     ebx,edx
c0017f29:	eb 05                	jmp    c0017f30 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0017f2b:	66 31 c0             	xor    ax,ax
c0017f2e:	09 c3                	or     ebx,eax
c0017f30:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017f35:	89 c8                	mov    eax,ecx
c0017f37:	ef                   	out    dx,eax
c0017f38:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017f3d:	89 d8                	mov    eax,ebx
c0017f3f:	eb 41                	jmp    c0017f82 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017f41:	83 f9 02             	cmp    ecx,0x2
c0017f44:	75 45                	jne    c0017f8b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0017f46:	83 ec 0c             	sub    esp,0xc
c0017f49:	0f b6 d2             	movzx  edx,dl
c0017f4c:	89 f1                	mov    ecx,esi
c0017f4e:	0f b6 c0             	movzx  eax,al
c0017f51:	0f b6 f1             	movzx  esi,cl
c0017f54:	89 e9                	mov    ecx,ebp
c0017f56:	56                   	push   esi
c0017f57:	0f b6 c9             	movzx  ecx,cl
c0017f5a:	51                   	push   ecx
c0017f5b:	52                   	push   edx
c0017f5c:	50                   	push   eax
c0017f5d:	57                   	push   edi
c0017f5e:	e8 ad fc ff ff       	call   c0017c10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017f63:	89 c2                	mov    edx,eax
c0017f65:	ed                   	in     eax,dx
c0017f66:	83 c4 20             	add    esp,0x20
c0017f69:	0f b7 db             	movzx  ebx,bx
c0017f6c:	f6 c2 02             	test   dl,0x2
c0017f6f:	74 0c                	je     c0017f7d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0017f71:	0f b7 c8             	movzx  ecx,ax
c0017f74:	89 d8                	mov    eax,ebx
c0017f76:	c1 e0 10             	shl    eax,0x10
c0017f79:	09 c8                	or     eax,ecx
c0017f7b:	eb 05                	jmp    c0017f82 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017f7d:	66 31 c0             	xor    ax,ax
c0017f80:	09 d8                	or     eax,ebx
c0017f82:	ef                   	out    dx,eax
c0017f83:	83 c4 0c             	add    esp,0xc
c0017f86:	5b                   	pop    ebx
c0017f87:	5e                   	pop    esi
c0017f88:	5f                   	pop    edi
c0017f89:	5d                   	pop    ebp
c0017f8a:	c3                   	ret    
c0017f8b:	c7 44 24 20 87 e8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e887
c0017f93:	83 c4 0c             	add    esp,0xc
c0017f96:	5b                   	pop    ebx
c0017f97:	5e                   	pop    esi
c0017f98:	5f                   	pop    edi
c0017f99:	5d                   	pop    ebp
c0017f9a:	e9 c8 75 ff ff       	jmp    c000f567 <Krnl::panic(char const*)>
c0017f9f:	90                   	nop

c0017fa0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0017fa0:	55                   	push   ebp
c0017fa1:	57                   	push   edi
c0017fa2:	56                   	push   esi
c0017fa3:	53                   	push   ebx
c0017fa4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017faa:	80 3d 6c 34 02 c0 00 	cmp    BYTE PTR ds:0xc002346c,0x0
c0017fb1:	0f 85 84 00 00 00    	jne    c001803b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0017fb7:	83 ec 0c             	sub    esp,0xc
c0017fba:	68 14 01 00 00       	push   0x114
c0017fbf:	e8 8d ec fe ff       	call   c0006c51 <malloc>
c0017fc4:	83 c4 0c             	add    esp,0xc
c0017fc7:	89 c3                	mov    ebx,eax
c0017fc9:	ff 35 b0 2a 02 c0    	push   DWORD PTR ds:0xc0022ab0
c0017fcf:	68 8d e8 01 c0       	push   0xc001e88d
c0017fd4:	50                   	push   eax
c0017fd5:	e8 b0 1f ff ff       	call   c0009f8a <File::File(char const*, Process*)>
c0017fda:	5a                   	pop    edx
c0017fdb:	59                   	pop    ecx
c0017fdc:	6a 01                	push   0x1
c0017fde:	53                   	push   ebx
c0017fdf:	e8 66 20 ff ff       	call   c000a04a <File::open(FileOpenMode)>
c0017fe4:	83 c4 0c             	add    esp,0xc
c0017fe7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0017feb:	50                   	push   eax
c0017fec:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017ff0:	50                   	push   eax
c0017ff1:	53                   	push   ebx
c0017ff2:	e8 ff 22 ff ff       	call   c000a2f6 <File::stat(unsigned long long*, bool*)>
c0017ff7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ffb:	40                   	inc    eax
c0017ffc:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fff:	e8 4d ec fe ff       	call   c0006c51 <malloc>
c0018004:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018008:	a3 68 34 02 c0       	mov    ds:0xc0023468,eax
c001800d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018011:	5e                   	pop    esi
c0018012:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018014:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018018:	51                   	push   ecx
c0018019:	50                   	push   eax
c001801a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001801e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018022:	53                   	push   ebx
c0018023:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018026:	83 c4 14             	add    esp,0x14
c0018029:	53                   	push   ebx
c001802a:	e8 79 20 ff ff       	call   c000a0a8 <File::close()>
c001802f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	a3 64 34 02 c0       	mov    ds:0xc0023464,eax
c001803b:	a1 64 34 02 c0       	mov    eax,ds:0xc0023464
c0018040:	8b 15 68 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023468
c0018046:	89 04 24             	mov    DWORD PTR [esp],eax
c0018049:	31 ff                	xor    edi,edi
c001804b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018053:	31 f6                	xor    esi,esi
c0018055:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001805a:	31 db                	xor    ebx,ebx
c001805c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018064:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018069:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018070:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018074:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001807b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001807f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018082:	0f 8e 6b 01 00 00    	jle    c00181f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018088:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001808b:	d4 40                	aam    0x40
c001808d:	d5 39                	aad    0x39
c001808f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018093:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018097:	d4 40                	aam    0x40
c0018099:	d5 39                	aad    0x39
c001809b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001809f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00180a3:	d4 40                	aam    0x40
c00180a5:	d5 39                	aad    0x39
c00180a7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180ab:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00180af:	d4 40                	aam    0x40
c00180b1:	d5 39                	aad    0x39
c00180b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180b7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00180bb:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00180bf:	3c 56                	cmp    al,0x56
c00180c1:	74 45                	je     c0018108 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00180c3:	d4 40                	aam    0x40
c00180c5:	d5 39                	aad    0x39
c00180c7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00180ca:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00180ce:	0f b6 c9             	movzx  ecx,cl
c00180d1:	c1 e1 04             	shl    ecx,0x4
c00180d4:	d4 40                	aam    0x40
c00180d6:	d5 39                	aad    0x39
c00180d8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00180db:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00180df:	0f b6 db             	movzx  ebx,bl
c00180e2:	09 cb                	or     ebx,ecx
c00180e4:	c1 e3 04             	shl    ebx,0x4
c00180e7:	d4 40                	aam    0x40
c00180e9:	d5 39                	aad    0x39
c00180eb:	8d 48 d0             	lea    ecx,[eax-0x30]
c00180ee:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00180f2:	0f b6 c9             	movzx  ecx,cl
c00180f5:	09 cb                	or     ebx,ecx
c00180f7:	c1 e3 04             	shl    ebx,0x4
c00180fa:	89 d9                	mov    ecx,ebx
c00180fc:	d4 40                	aam    0x40
c00180fe:	d5 39                	aad    0x39
c0018100:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018103:	0f b6 db             	movzx  ebx,bl
c0018106:	09 cb                	or     ebx,ecx
c0018108:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001810c:	80 f9 44             	cmp    cl,0x44
c001810f:	74 47                	je     c0018158 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018111:	88 c8                	mov    al,cl
c0018113:	d4 40                	aam    0x40
c0018115:	d5 39                	aad    0x39
c0018117:	83 e8 30             	sub    eax,0x30
c001811a:	0f b6 e8             	movzx  ebp,al
c001811d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018121:	c1 e5 04             	shl    ebp,0x4
c0018124:	d4 40                	aam    0x40
c0018126:	d5 39                	aad    0x39
c0018128:	83 e8 30             	sub    eax,0x30
c001812b:	0f b6 f0             	movzx  esi,al
c001812e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018132:	09 ee                	or     esi,ebp
c0018134:	c1 e6 04             	shl    esi,0x4
c0018137:	d4 40                	aam    0x40
c0018139:	d5 39                	aad    0x39
c001813b:	83 e8 30             	sub    eax,0x30
c001813e:	0f b6 e8             	movzx  ebp,al
c0018141:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018145:	09 ee                	or     esi,ebp
c0018147:	c1 e6 04             	shl    esi,0x4
c001814a:	89 f5                	mov    ebp,esi
c001814c:	d4 40                	aam    0x40
c001814e:	d5 39                	aad    0x39
c0018150:	83 e8 30             	sub    eax,0x30
c0018153:	0f b6 f0             	movzx  esi,al
c0018156:	09 ee                	or     esi,ebp
c0018158:	83 c7 10             	add    edi,0x10
c001815b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001815f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018162:	3c 0a                	cmp    al,0xa
c0018164:	74 09                	je     c001816f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018166:	45                   	inc    ebp
c0018167:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001816a:	75 16                	jne    c0018182 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001816c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001816f:	3c 0a                	cmp    al,0xa
c0018171:	0f 94 c0             	sete   al
c0018174:	0f b6 c0             	movzx  eax,al
c0018177:	01 c7                	add    edi,eax
c0018179:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001817e:	75 0c                	jne    c001818c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018180:	eb 15                	jmp    c0018197 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018182:	47                   	inc    edi
c0018183:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018186:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001818a:	eb d3                	jmp    c001815f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001818c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018191:	0f 85 e8 fe ff ff    	jne    c001807f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018197:	80 f9 44             	cmp    cl,0x44
c001819a:	74 0b                	je     c00181a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001819c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00181a1:	0f 85 d8 fe ff ff    	jne    c001807f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00181a7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00181ab:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00181af:	c1 e1 04             	shl    ecx,0x4
c00181b2:	83 e8 30             	sub    eax,0x30
c00181b5:	09 c8                	or     eax,ecx
c00181b7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00181bb:	0f 85 be fe ff ff    	jne    c001807f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00181c1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00181c5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00181c9:	c1 e1 04             	shl    ecx,0x4
c00181cc:	83 e8 30             	sub    eax,0x30
c00181cf:	09 c8                	or     eax,ecx
c00181d1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00181d5:	0f 85 a4 fe ff ff    	jne    c001807f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00181db:	50                   	push   eax
c00181dc:	50                   	push   eax
c00181dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00181e1:	50                   	push   eax
c00181e2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00181e9:	e8 32 84 fe ff       	call   c0000620 <strcpy>
c00181ee:	83 c4 10             	add    esp,0x10
c00181f1:	eb 15                	jmp    c0018208 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00181f3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00181fa:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018205:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018208:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001820f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018215:	5b                   	pop    ebx
c0018216:	5e                   	pop    esi
c0018217:	5f                   	pop    edi
c0018218:	5d                   	pop    ebp
c0018219:	c3                   	ret    

c001821a <PCI::checkBus(unsigned char)>:
c001821a:	56                   	push   esi
c001821b:	53                   	push   ebx
c001821c:	31 f6                	xor    esi,esi
c001821e:	51                   	push   ecx
c001821f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018223:	0f b6 c3             	movzx  eax,bl
c0018226:	52                   	push   edx
c0018227:	56                   	push   esi
c0018228:	46                   	inc    esi
c0018229:	50                   	push   eax
c001822a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001822e:	e8 f3 02 00 00       	call   c0018526 <PCI::checkDevice(unsigned char, unsigned char)>
c0018233:	83 c4 10             	add    esp,0x10
c0018236:	83 fe 20             	cmp    esi,0x20
c0018239:	75 e8                	jne    c0018223 <PCI::checkBus(unsigned char)+0x9>
c001823b:	58                   	pop    eax
c001823c:	5b                   	pop    ebx
c001823d:	5e                   	pop    esi
c001823e:	c3                   	ret    
c001823f:	90                   	nop

c0018240 <PCI::foundDevice(PCIDeviceInfo)>:
c0018240:	55                   	push   ebp
c0018241:	57                   	push   edi
c0018242:	56                   	push   esi
c0018243:	53                   	push   ebx
c0018244:	83 ec 1c             	sub    esp,0x1c
c0018247:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001824b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018251:	0f 84 52 01 00 00    	je     c00183a9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018257:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001825b:	66 81 f9 06 04       	cmp    cx,0x406
c0018260:	75 2c                	jne    c001828e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018262:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018267:	50                   	push   eax
c0018268:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001826d:	50                   	push   eax
c001826e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018273:	50                   	push   eax
c0018274:	56                   	push   esi
c0018275:	e8 b2 fb ff ff       	call   c0017e2c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001827a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001827e:	0f b6 c0             	movzx  eax,al
c0018281:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018285:	83 c4 2c             	add    esp,0x2c
c0018288:	5b                   	pop    ebx
c0018289:	5e                   	pop    esi
c001828a:	5f                   	pop    edi
c001828b:	5d                   	pop    ebp
c001828c:	eb 8c                	jmp    c001821a <PCI::checkBus(unsigned char)>
c001828e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018292:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018298:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001829c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00182a0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00182a4:	88 d3                	mov    bl,dl
c00182a6:	85 c0                	test   eax,eax
c00182a8:	74 33                	je     c00182dd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00182aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00182ad:	85 d2                	test   edx,edx
c00182af:	74 28                	je     c00182d9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00182b1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00182b7:	31 ef                	xor    edi,ebp
c00182b9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00182bf:	75 18                	jne    c00182d9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00182c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00182c5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00182cb:	75 0c                	jne    c00182d9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00182cd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00182d3:	0f 84 d0 00 00 00    	je     c00183a9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00182d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00182db:	eb c9                	jmp    c00182a6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00182dd:	66 81 f9 01 06       	cmp    cx,0x601
c00182e2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00182e6:	75 19                	jne    c0018301 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00182e8:	83 ec 0c             	sub    esp,0xc
c00182eb:	68 64 01 00 00       	push   0x164
c00182f0:	e8 5c e9 fe ff       	call   c0006c51 <malloc>
c00182f5:	89 c5                	mov    ebp,eax
c00182f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00182fa:	e8 47 0e 00 00       	call   c0019146 <SATABus::SATABus()>
c00182ff:	eb 1e                	jmp    c001831f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018301:	66 81 f9 01 01       	cmp    cx,0x101
c0018306:	75 60                	jne    c0018368 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018308:	83 ec 0c             	sub    esp,0xc
c001830b:	68 70 02 00 00       	push   0x270
c0018310:	e8 3c e9 fe ff       	call   c0006c51 <malloc>
c0018315:	89 c5                	mov    ebp,eax
c0018317:	89 04 24             	mov    DWORD PTR [esp],eax
c001831a:	e8 cb 02 00 00       	call   c00185ea <IDE::IDE()>
c001831f:	58                   	pop    eax
c0018320:	5a                   	pop    edx
c0018321:	55                   	push   ebp
c0018322:	56                   	push   esi
c0018323:	e8 2c 2b ff ff       	call   c000ae54 <Device::addChild(Device*)>
c0018328:	83 ec 1c             	sub    esp,0x1c
c001832b:	b9 09 00 00 00       	mov    ecx,0x9
c0018330:	fc                   	cld    
c0018331:	89 e7                	mov    edi,esp
c0018333:	89 de                	mov    esi,ebx
c0018335:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018337:	55                   	push   ebp
c0018338:	e8 5d 2a ff ff       	call   c000ad9a <Device::preOpenPCI(PCIDeviceInfo)>
c001833d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018340:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018344:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001834c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018354:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001835c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001835f:	83 c4 4c             	add    esp,0x4c
c0018362:	5b                   	pop    ebx
c0018363:	5e                   	pop    esi
c0018364:	5f                   	pop    edi
c0018365:	5d                   	pop    ebp
c0018366:	ff e0                	jmp    eax
c0018368:	83 ec 0c             	sub    esp,0xc
c001836b:	68 58 01 00 00       	push   0x158
c0018370:	e8 dc e8 fe ff       	call   c0006c51 <malloc>
c0018375:	89 c5                	mov    ebp,eax
c0018377:	58                   	pop    eax
c0018378:	5a                   	pop    edx
c0018379:	68 a6 e8 01 c0       	push   0xc001e8a6
c001837e:	55                   	push   ebp
c001837f:	e8 6e 2d ff ff       	call   c000b0f2 <DriverlessDevice::DriverlessDevice(char const*)>
c0018384:	59                   	pop    ecx
c0018385:	5f                   	pop    edi
c0018386:	55                   	push   ebp
c0018387:	56                   	push   esi
c0018388:	e8 c7 2a ff ff       	call   c000ae54 <Device::addChild(Device*)>
c001838d:	b9 09 00 00 00       	mov    ecx,0x9
c0018392:	fc                   	cld    
c0018393:	89 df                	mov    edi,ebx
c0018395:	89 de                	mov    esi,ebx
c0018397:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018399:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001839d:	83 c4 2c             	add    esp,0x2c
c00183a0:	5b                   	pop    ebx
c00183a1:	5e                   	pop    esi
c00183a2:	5f                   	pop    edi
c00183a3:	5d                   	pop    ebp
c00183a4:	e9 f1 29 ff ff       	jmp    c000ad9a <Device::preOpenPCI(PCIDeviceInfo)>
c00183a9:	83 c4 1c             	add    esp,0x1c
c00183ac:	5b                   	pop    ebx
c00183ad:	5e                   	pop    esi
c00183ae:	5f                   	pop    edi
c00183af:	5d                   	pop    ebp
c00183b0:	c3                   	ret    
c00183b1:	90                   	nop

c00183b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00183b2:	55                   	push   ebp
c00183b3:	57                   	push   edi
c00183b4:	56                   	push   esi
c00183b5:	53                   	push   ebx
c00183b6:	83 ec 68             	sub    esp,0x68
c00183b9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00183bd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00183c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00183c8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00183cf:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c00183d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00183d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00183df:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c00183e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00183e8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00183ed:	6a 0c                	push   0xc
c00183ef:	57                   	push   edi
c00183f0:	53                   	push   ebx
c00183f1:	56                   	push   esi
c00183f2:	55                   	push   ebp
c00183f3:	e8 86 f8 ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183f8:	83 c4 20             	add    esp,0x20
c00183fb:	57                   	push   edi
c00183fc:	53                   	push   ebx
c00183fd:	56                   	push   esi
c00183fe:	55                   	push   ebp
c00183ff:	e8 6e f9 ff ff       	call   c0017d72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018404:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018409:	57                   	push   edi
c001840a:	53                   	push   ebx
c001840b:	56                   	push   esi
c001840c:	55                   	push   ebp
c001840d:	e8 f6 f9 ff ff       	call   c0017e08 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018412:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018416:	83 c4 14             	add    esp,0x14
c0018419:	6a 3c                	push   0x3c
c001841b:	57                   	push   edi
c001841c:	53                   	push   ebx
c001841d:	56                   	push   esi
c001841e:	55                   	push   ebp
c001841f:	e8 5a f8 ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018424:	0f b6 c4             	movzx  eax,ah
c0018427:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001842b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001842f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018433:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0018438:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c001843e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018444:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018448:	83 c4 20             	add    esp,0x20
c001844b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018450:	74 30                	je     c0018482 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018452:	31 c0                	xor    eax,eax
c0018454:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018458:	7e 28                	jle    c0018482 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001845a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018462:	39 cb                	cmp    ebx,ecx
c0018464:	75 19                	jne    c001847f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018466:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001846e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018472:	75 0b                	jne    c001847f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018474:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001847b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001847f:	40                   	inc    eax
c0018480:	eb d2                	jmp    c0018454 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018482:	31 d2                	xor    edx,edx
c0018484:	83 ec 0c             	sub    esp,0xc
c0018487:	57                   	push   edi
c0018488:	53                   	push   ebx
c0018489:	56                   	push   esi
c001848a:	52                   	push   edx
c001848b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001848f:	55                   	push   ebp
c0018490:	e8 bf f9 ff ff       	call   c0017e54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018499:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001849d:	42                   	inc    edx
c001849e:	83 c4 20             	add    esp,0x20
c00184a1:	83 fa 06             	cmp    edx,0x6
c00184a4:	75 de                	jne    c0018484 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00184a6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00184ab:	83 ec 0c             	sub    esp,0xc
c00184ae:	86 e0                	xchg   al,ah
c00184b0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00184b5:	6a 02                	push   0x2
c00184b7:	57                   	push   edi
c00184b8:	53                   	push   ebx
c00184b9:	56                   	push   esi
c00184ba:	55                   	push   ebp
c00184bb:	e8 be f7 ff ff       	call   c0017c7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00184c0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00184c5:	83 c4 20             	add    esp,0x20
c00184c8:	57                   	push   edi
c00184c9:	53                   	push   ebx
c00184ca:	56                   	push   esi
c00184cb:	55                   	push   ebp
c00184cc:	e8 eb f8 ff ff       	call   c0017dbc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00184d1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00184d5:	57                   	push   edi
c00184d6:	53                   	push   ebx
c00184d7:	56                   	push   esi
c00184d8:	55                   	push   ebp
c00184d9:	e8 48 f8 ff ff       	call   c0017d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00184de:	b9 09 00 00 00       	mov    ecx,0x9
c00184e3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00184e8:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c00184ec:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00184f0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00184f4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00184f8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00184fc:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018500:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018504:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018508:	83 ec 0c             	sub    esp,0xc
c001850b:	fc                   	cld    
c001850c:	89 e7                	mov    edi,esp
c001850e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018512:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018514:	55                   	push   ebp
c0018515:	e8 26 fd ff ff       	call   c0018240 <PCI::foundDevice(PCIDeviceInfo)>
c001851a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018520:	5b                   	pop    ebx
c0018521:	5e                   	pop    esi
c0018522:	5f                   	pop    edi
c0018523:	5d                   	pop    ebp
c0018524:	c3                   	ret    
c0018525:	90                   	nop

c0018526 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018526:	55                   	push   ebp
c0018527:	57                   	push   edi
c0018528:	56                   	push   esi
c0018529:	53                   	push   ebx
c001852a:	83 ec 0c             	sub    esp,0xc
c001852d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018531:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018536:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001853b:	6a 00                	push   0x0
c001853d:	56                   	push   esi
c001853e:	57                   	push   edi
c001853f:	55                   	push   ebp
c0018540:	e8 e1 f7 ff ff       	call   c0017d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018545:	6a 00                	push   0x0
c0018547:	56                   	push   esi
c0018548:	57                   	push   edi
c0018549:	55                   	push   ebp
c001854a:	e8 63 fe ff ff       	call   c00183b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001854f:	83 c4 20             	add    esp,0x20
c0018552:	6a 00                	push   0x0
c0018554:	56                   	push   esi
c0018555:	57                   	push   edi
c0018556:	55                   	push   ebp
c0018557:	e8 ee f7 ff ff       	call   c0017d4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	84 c0                	test   al,al
c0018561:	79 27                	jns    c001858a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018563:	bb 01 00 00 00       	mov    ebx,0x1
c0018568:	53                   	push   ebx
c0018569:	56                   	push   esi
c001856a:	57                   	push   edi
c001856b:	55                   	push   ebp
c001856c:	e8 b5 f7 ff ff       	call   c0017d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018571:	83 c4 10             	add    esp,0x10
c0018574:	66 40                	inc    ax
c0018576:	74 0c                	je     c0018584 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018578:	53                   	push   ebx
c0018579:	56                   	push   esi
c001857a:	57                   	push   edi
c001857b:	55                   	push   ebp
c001857c:	e8 31 fe ff ff       	call   c00183b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	43                   	inc    ebx
c0018585:	83 fb 08             	cmp    ebx,0x8
c0018588:	75 de                	jne    c0018568 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001858a:	83 c4 0c             	add    esp,0xc
c001858d:	5b                   	pop    ebx
c001858e:	5e                   	pop    esi
c001858f:	5f                   	pop    edi
c0018590:	5d                   	pop    ebp
c0018591:	c3                   	ret    

c0018592 <PCI::detect()>:
c0018592:	56                   	push   esi
c0018593:	53                   	push   ebx
c0018594:	53                   	push   ebx
c0018595:	31 db                	xor    ebx,ebx
c0018597:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001859b:	6a 00                	push   0x0
c001859d:	6a 00                	push   0x0
c001859f:	6a 00                	push   0x0
c00185a1:	56                   	push   esi
c00185a2:	e8 a3 f7 ff ff       	call   c0017d4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	a8 80                	test   al,0x80
c00185ac:	75 21                	jne    c00185cf <PCI::detect()+0x3d>
c00185ae:	51                   	push   ecx
c00185af:	51                   	push   ecx
c00185b0:	6a 00                	push   0x0
c00185b2:	56                   	push   esi
c00185b3:	e8 62 fc ff ff       	call   c001821a <PCI::checkBus(unsigned char)>
c00185b8:	83 c4 10             	add    esp,0x10
c00185bb:	eb 24                	jmp    c00185e1 <PCI::detect()+0x4f>
c00185bd:	52                   	push   edx
c00185be:	52                   	push   edx
c00185bf:	53                   	push   ebx
c00185c0:	43                   	inc    ebx
c00185c1:	56                   	push   esi
c00185c2:	e8 53 fc ff ff       	call   c001821a <PCI::checkBus(unsigned char)>
c00185c7:	83 c4 10             	add    esp,0x10
c00185ca:	83 fb 08             	cmp    ebx,0x8
c00185cd:	74 12                	je     c00185e1 <PCI::detect()+0x4f>
c00185cf:	53                   	push   ebx
c00185d0:	6a 00                	push   0x0
c00185d2:	6a 00                	push   0x0
c00185d4:	56                   	push   esi
c00185d5:	e8 4c f7 ff ff       	call   c0017d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00185da:	83 c4 10             	add    esp,0x10
c00185dd:	66 40                	inc    ax
c00185df:	74 dc                	je     c00185bd <PCI::detect()+0x2b>
c00185e1:	58                   	pop    eax
c00185e2:	5b                   	pop    ebx
c00185e3:	5e                   	pop    esi
c00185e4:	c3                   	ret    
c00185e5:	90                   	nop

c00185e6 <IDE::close(int, int, void*)>:
c00185e6:	83 c8 ff             	or     eax,0xffffffff
c00185e9:	c3                   	ret    

c00185ea <IDE::IDE()>:
c00185ea:	83 ec 0c             	sub    esp,0xc
c00185ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f1:	83 ec 08             	sub    esp,0x8
c00185f4:	68 ec e8 01 c0       	push   0xc001e8ec
c00185f9:	50                   	push   eax
c00185fa:	e8 99 2b ff ff       	call   c000b198 <HardDiskController::HardDiskController(char const*)>
c00185ff:	83 c4 10             	add    esp,0x10
c0018602:	ba 7c e9 01 c0       	mov    edx,0xc001e97c
c0018607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860b:	89 10                	mov    DWORD PTR [eax],edx
c001860d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018611:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018618:	90                   	nop
c0018619:	83 c4 0c             	add    esp,0xc
c001861c:	c3                   	ret    
c001861d:	90                   	nop

c001861e <IDE::prepareInterrupt(unsigned char)>:
c001861e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018623:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018627:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001862f:	c3                   	ret    

c0018630 <selectDrive(unsigned char, unsigned char)>:
c0018630:	c3                   	ret    
c0018631:	90                   	nop

c0018632 <IDE::getBase(unsigned char)>:
c0018632:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001863b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018643:	c3                   	ret    

c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018644:	55                   	push   ebp
c0018645:	57                   	push   edi
c0018646:	56                   	push   esi
c0018647:	53                   	push   ebx
c0018648:	83 ec 1c             	sub    esp,0x1c
c001864b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001864f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018653:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018656:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001865a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001865e:	80 f9 03             	cmp    cl,0x3
c0018661:	77 51                	ja     c00186b4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018667:	0f b6 f2             	movzx  esi,dl
c001866a:	0f b6 db             	movzx  ebx,bl
c001866d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018670:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018674:	83 ca 80             	or     edx,0xffffff80
c0018677:	0f b6 d2             	movzx  edx,dl
c001867a:	52                   	push   edx
c001867b:	6a 0c                	push   0xc
c001867d:	56                   	push   esi
c001867e:	57                   	push   edi
c001867f:	e8 c0 ff ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018684:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018689:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001868d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018691:	ee                   	out    dx,al
c0018692:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018697:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001869b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001869f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00186a3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00186ab:	83 c4 2c             	add    esp,0x2c
c00186ae:	5b                   	pop    ebx
c00186af:	5e                   	pop    esi
c00186b0:	5f                   	pop    edi
c00186b1:	5d                   	pop    ebp
c00186b2:	eb 90                	jmp    c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00186b4:	80 fb 07             	cmp    bl,0x7
c00186b7:	77 12                	ja     c00186cb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00186b9:	0f b6 d2             	movzx  edx,dl
c00186bc:	0f b6 db             	movzx  ebx,bl
c00186bf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00186c7:	89 da                	mov    edx,ebx
c00186c9:	eb 2f                	jmp    c00186fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00186cb:	80 fb 0d             	cmp    bl,0xd
c00186ce:	77 13                	ja     c00186e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00186d0:	0f b6 d2             	movzx  edx,dl
c00186d3:	0f b6 db             	movzx  ebx,bl
c00186d6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00186dd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00186e1:	eb 17                	jmp    c00186fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00186e3:	80 fb 15             	cmp    bl,0x15
c00186e6:	77 13                	ja     c00186fb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00186e8:	0f b6 d2             	movzx  edx,dl
c00186eb:	0f b6 db             	movzx  ebx,bl
c00186ee:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00186f6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00186fa:	ee                   	out    dx,al
c00186fb:	83 c4 1c             	add    esp,0x1c
c00186fe:	5b                   	pop    ebx
c00186ff:	5e                   	pop    esi
c0018700:	5f                   	pop    edi
c0018701:	5d                   	pop    ebp
c0018702:	c3                   	ret    
c0018703:	90                   	nop

c0018704 <IDE::read(unsigned char, unsigned char)>:
c0018704:	55                   	push   ebp
c0018705:	57                   	push   edi
c0018706:	56                   	push   esi
c0018707:	53                   	push   ebx
c0018708:	83 ec 1c             	sub    esp,0x1c
c001870b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001870f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018713:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018716:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001871a:	3c 03                	cmp    al,0x3
c001871c:	77 43                	ja     c0018761 <IDE::read(unsigned char, unsigned char)+0x5d>
c001871e:	0f b6 f2             	movzx  esi,dl
c0018721:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018724:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018728:	83 c8 80             	or     eax,0xffffff80
c001872b:	0f b6 c0             	movzx  eax,al
c001872e:	50                   	push   eax
c001872f:	6a 0c                	push   0xc
c0018731:	56                   	push   esi
c0018732:	57                   	push   edi
c0018733:	e8 0c ff ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018738:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001873d:	0f b6 c3             	movzx  eax,bl
c0018740:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018744:	ec                   	in     al,dx
c0018745:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018749:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001874e:	52                   	push   edx
c001874f:	6a 0c                	push   0xc
c0018751:	56                   	push   esi
c0018752:	57                   	push   edi
c0018753:	e8 ec fe ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018758:	83 c4 20             	add    esp,0x20
c001875b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001875f:	eb 49                	jmp    c00187aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0018761:	80 fb 07             	cmp    bl,0x7
c0018764:	77 12                	ja     c0018778 <IDE::read(unsigned char, unsigned char)+0x74>
c0018766:	0f b6 d2             	movzx  edx,dl
c0018769:	0f b6 c3             	movzx  eax,bl
c001876c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018774:	89 c2                	mov    edx,eax
c0018776:	eb 31                	jmp    c00187a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018778:	80 fb 0d             	cmp    bl,0xd
c001877b:	77 13                	ja     c0018790 <IDE::read(unsigned char, unsigned char)+0x8c>
c001877d:	0f b6 d2             	movzx  edx,dl
c0018780:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018787:	0f b6 d3             	movzx  edx,bl
c001878a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001878e:	eb 19                	jmp    c00187a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018790:	31 c0                	xor    eax,eax
c0018792:	80 fb 15             	cmp    bl,0x15
c0018795:	77 13                	ja     c00187aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0018797:	0f b6 d2             	movzx  edx,dl
c001879a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00187a2:	0f b6 d3             	movzx  edx,bl
c00187a5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00187a9:	ec                   	in     al,dx
c00187aa:	83 c4 1c             	add    esp,0x1c
c00187ad:	5b                   	pop    ebx
c00187ae:	5e                   	pop    esi
c00187af:	5f                   	pop    edi
c00187b0:	5d                   	pop    ebp
c00187b1:	c3                   	ret    

c00187b2 <IDE::waitInterrupt(unsigned char)>:
c00187b2:	57                   	push   edi
c00187b3:	56                   	push   esi
c00187b4:	31 f6                	xor    esi,esi
c00187b6:	53                   	push   ebx
c00187b7:	83 ec 10             	sub    esp,0x10
c00187ba:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00187be:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00187c2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00187c6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00187cb:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00187d2:	84 db                	test   bl,bl
c00187d4:	75 33                	jne    c0018809 <IDE::waitInterrupt(unsigned char)+0x57>
c00187d6:	52                   	push   edx
c00187d7:	6a 0c                	push   0xc
c00187d9:	50                   	push   eax
c00187da:	57                   	push   edi
c00187db:	e8 24 ff ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c00187e0:	83 c4 10             	add    esp,0x10
c00187e3:	a8 01                	test   al,0x1
c00187e5:	75 2a                	jne    c0018811 <IDE::waitInterrupt(unsigned char)+0x5f>
c00187e7:	f7 c6 04 00 00 00    	test   esi,0x4
c00187ed:	75 12                	jne    c0018801 <IDE::waitInterrupt(unsigned char)+0x4f>
c00187ef:	83 fe 32             	cmp    esi,0x32
c00187f2:	7e 0d                	jle    c0018801 <IDE::waitInterrupt(unsigned char)+0x4f>
c00187f4:	83 ec 0c             	sub    esp,0xc
c00187f7:	6a 64                	push   0x64
c00187f9:	e8 4a a5 ff ff       	call   c0012d48 <milliTenthSleep(unsigned int)>
c00187fe:	83 c4 10             	add    esp,0x10
c0018801:	83 fe 3c             	cmp    esi,0x3c
c0018804:	74 0b                	je     c0018811 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018806:	46                   	inc    esi
c0018807:	eb bd                	jmp    c00187c6 <IDE::waitInterrupt(unsigned char)+0x14>
c0018809:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	88 d8                	mov    al,bl
c0018816:	5b                   	pop    ebx
c0018817:	5e                   	pop    esi
c0018818:	5f                   	pop    edi
c0018819:	c3                   	ret    

c001881a <ideChannel0IRQHandler(regs*, void*)>:
c001881a:	83 ec 10             	sub    esp,0x10
c001881d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018821:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018828:	6a 07                	push   0x7
c001882a:	6a 00                	push   0x0
c001882c:	50                   	push   eax
c001882d:	e8 d2 fe ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018832:	83 c4 1c             	add    esp,0x1c
c0018835:	c3                   	ret    

c0018836 <ideChannel1IRQHandler(regs*, void*)>:
c0018836:	83 ec 10             	sub    esp,0x10
c0018839:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001883d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018844:	6a 07                	push   0x7
c0018846:	6a 01                	push   0x1
c0018848:	50                   	push   eax
c0018849:	e8 b6 fe ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c001884e:	83 c4 1c             	add    esp,0x1c
c0018851:	c3                   	ret    

c0018852 <IDE::enableIRQs(unsigned char, bool)>:
c0018852:	57                   	push   edi
c0018853:	56                   	push   esi
c0018854:	be 04 00 00 00       	mov    esi,0x4
c0018859:	53                   	push   ebx
c001885a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001885f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018863:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018868:	0f 94 c0             	sete   al
c001886b:	01 c0                	add    eax,eax
c001886d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018874:	0f b6 c0             	movzx  eax,al
c0018877:	50                   	push   eax
c0018878:	6a 0c                	push   0xc
c001887a:	57                   	push   edi
c001887b:	53                   	push   ebx
c001887c:	e8 c3 fd ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018881:	83 c4 10             	add    esp,0x10
c0018884:	50                   	push   eax
c0018885:	6a 0c                	push   0xc
c0018887:	57                   	push   edi
c0018888:	53                   	push   ebx
c0018889:	e8 76 fe ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c001888e:	83 c4 10             	add    esp,0x10
c0018891:	4e                   	dec    esi
c0018892:	75 f0                	jne    c0018884 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018894:	5b                   	pop    ebx
c0018895:	5e                   	pop    esi
c0018896:	5f                   	pop    edi
c0018897:	c3                   	ret    

c0018898 <IDE::open(int, int, void*)>:
c0018898:	55                   	push   ebp
c0018899:	57                   	push   edi
c001889a:	56                   	push   esi
c001889b:	53                   	push   ebx
c001889c:	83 ec 1c             	sub    esp,0x1c
c001889f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00188a3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00188ac:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00188b5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00188bc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00188c3:	0f 85 b0 02 00 00    	jne    c0018b79 <IDE::open(int, int, void*)+0x2e1>
c00188c9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00188cf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00188d3:	83 e0 7f             	and    eax,0x7f
c00188d6:	3c 05                	cmp    al,0x5
c00188d8:	74 04                	je     c00188de <IDE::open(int, int, void*)+0x46>
c00188da:	3c 0f                	cmp    al,0xf
c00188dc:	75 32                	jne    c0018910 <IDE::open(int, int, void*)+0x78>
c00188de:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00188e4:	83 e0 fc             	and    eax,0xfffffffc
c00188e7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00188ee:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00188f4:	83 e0 fc             	and    eax,0xfffffffc
c00188f7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00188fe:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018904:	83 e0 fc             	and    eax,0xfffffffc
c0018907:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001890e:	eb 14                	jmp    c0018924 <IDE::open(int, int, void*)+0x8c>
c0018910:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001891a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018924:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001892b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018932:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018936:	89 c6                	mov    esi,eax
c0018938:	bf f8 0c 00 00       	mov    edi,0xcf8
c001893d:	c1 e6 10             	shl    esi,0x10
c0018940:	89 e8                	mov    eax,ebp
c0018942:	89 fa                	mov    edx,edi
c0018944:	c1 e0 0b             	shl    eax,0xb
c0018947:	09 f0                	or     eax,esi
c0018949:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018950:	c1 e6 08             	shl    esi,0x8
c0018953:	09 c6                	or     esi,eax
c0018955:	89 f0                	mov    eax,esi
c0018957:	0d 08 00 00 80       	or     eax,0x80000008
c001895c:	ef                   	out    dx,eax
c001895d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018962:	89 ca                	mov    edx,ecx
c0018964:	ed                   	in     eax,dx
c0018965:	c1 e8 10             	shr    eax,0x10
c0018968:	3d ff ff 00 00       	cmp    eax,0xffff
c001896d:	0f 84 f5 00 00 00    	je     c0018a68 <IDE::open(int, int, void*)+0x1d0>
c0018973:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018979:	89 fa                	mov    edx,edi
c001897b:	89 f0                	mov    eax,esi
c001897d:	ef                   	out    dx,eax
c001897e:	b0 fe                	mov    al,0xfe
c0018980:	89 ca                	mov    edx,ecx
c0018982:	ee                   	out    dx,al
c0018983:	89 f0                	mov    eax,esi
c0018985:	89 fa                	mov    edx,edi
c0018987:	ef                   	out    dx,eax
c0018988:	89 ca                	mov    edx,ecx
c001898a:	ed                   	in     eax,dx
c001898b:	3c fe                	cmp    al,0xfe
c001898d:	0f 85 a9 00 00 00    	jne    c0018a3c <IDE::open(int, int, void*)+0x1a4>
c0018993:	8b 15 a8 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5a8
c0018999:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00189a0:	74 33                	je     c00189d5 <IDE::open(int, int, void*)+0x13d>
c00189a2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00189a8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00189ac:	40                   	inc    eax
c00189ad:	83 ec 0c             	sub    esp,0xc
c00189b0:	0f b6 c0             	movzx  eax,al
c00189b3:	50                   	push   eax
c00189b4:	55                   	push   ebp
c00189b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00189b9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00189bf:	51                   	push   ecx
c00189c0:	e8 1b 52 ff ff       	call   c000dbe0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00189c5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00189ca:	83 c4 1c             	add    esp,0x1c
c00189cd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00189d3:	eb 0a                	jmp    c00189df <IDE::open(int, int, void*)+0x147>
c00189d5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00189df:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00189e6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00189ed:	c1 e1 10             	shl    ecx,0x10
c00189f0:	c1 e0 08             	shl    eax,0x8
c00189f3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00189f8:	09 c1                	or     ecx,eax
c00189fa:	89 fa                	mov    edx,edi
c00189fc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018a03:	c1 e0 0b             	shl    eax,0xb
c0018a06:	09 c1                	or     ecx,eax
c0018a08:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018a0e:	89 c8                	mov    eax,ecx
c0018a10:	ef                   	out    dx,eax
c0018a11:	be fc 0c 00 00       	mov    esi,0xcfc
c0018a16:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018a1c:	89 f2                	mov    edx,esi
c0018a1e:	ee                   	out    dx,al
c0018a1f:	89 c8                	mov    eax,ecx
c0018a21:	89 fa                	mov    edx,edi
c0018a23:	ef                   	out    dx,eax
c0018a24:	89 f2                	mov    edx,esi
c0018a26:	ed                   	in     eax,dx
c0018a27:	0f b6 c0             	movzx  eax,al
c0018a2a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018a30:	74 46                	je     c0018a78 <IDE::open(int, int, void*)+0x1e0>
c0018a32:	83 ec 0c             	sub    esp,0xc
c0018a35:	68 04 e9 01 c0       	push   0xc001e904
c0018a3a:	eb 34                	jmp    c0018a70 <IDE::open(int, int, void*)+0x1d8>
c0018a3c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018a45:	75 17                	jne    c0018a5e <IDE::open(int, int, void*)+0x1c6>
c0018a47:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018a4c:	74 07                	je     c0018a55 <IDE::open(int, int, void*)+0x1bd>
c0018a4e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018a53:	75 09                	jne    c0018a5e <IDE::open(int, int, void*)+0x1c6>
c0018a55:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018a5c:	eb 1a                	jmp    c0018a78 <IDE::open(int, int, void*)+0x1e0>
c0018a5e:	83 ec 0c             	sub    esp,0xc
c0018a61:	68 0c e9 01 c0       	push   0xc001e90c
c0018a66:	eb 08                	jmp    c0018a70 <IDE::open(int, int, void*)+0x1d8>
c0018a68:	83 ec 0c             	sub    esp,0xc
c0018a6b:	68 3d e9 01 c0       	push   0xc001e93d
c0018a70:	e8 f2 6a ff ff       	call   c000f567 <Krnl::panic(char const*)>
c0018a75:	83 c4 10             	add    esp,0x10
c0018a78:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018a7f:	79 1a                	jns    c0018a9b <IDE::open(int, int, void*)+0x203>
c0018a81:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018a87:	83 e0 fc             	and    eax,0xfffffffc
c0018a8a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018a91:	83 c0 08             	add    eax,0x8
c0018a94:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018a9b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018aa1:	89 c2                	mov    edx,eax
c0018aa3:	83 e2 0f             	and    edx,0xf
c0018aa6:	66 83 fa 08          	cmp    dx,0x8
c0018aaa:	75 0a                	jne    c0018ab6 <IDE::open(int, int, void*)+0x21e>
c0018aac:	83 e8 02             	sub    eax,0x2
c0018aaf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018ab6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018abc:	89 c2                	mov    edx,eax
c0018abe:	83 e2 0f             	and    edx,0xf
c0018ac1:	66 83 fa 08          	cmp    dx,0x8
c0018ac5:	75 0a                	jne    c0018ad1 <IDE::open(int, int, void*)+0x239>
c0018ac7:	83 e8 02             	sub    eax,0x2
c0018aca:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018ad1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018ad8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018adf:	89 d0                	mov    eax,edx
c0018ae1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018ae4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018ae8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018aec:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018aef:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018af4:	0f b6 c9             	movzx  ecx,cl
c0018af7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018afe:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018b01:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018b05:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018b09:	8d 50 02             	lea    edx,[eax+0x2]
c0018b0c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018b11:	0f b6 d2             	movzx  edx,dl
c0018b14:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0018b1a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018b1d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018b21:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0018b25:	8d 48 03             	lea    ecx,[eax+0x3]
c0018b28:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018b2d:	0f b6 c9             	movzx  ecx,cl
c0018b30:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0018b36:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018b39:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018b3d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0018b41:	8d 50 04             	lea    edx,[eax+0x4]
c0018b44:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0018b4a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018b4f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0018b56:	66 85 f6             	test   si,si
c0018b59:	74 5b                	je     c0018bb6 <IDE::open(int, int, void*)+0x31e>
c0018b5b:	0f b6 d2             	movzx  edx,dl
c0018b5e:	83 c0 05             	add    eax,0x5
c0018b61:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018b64:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018b68:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0018b6c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018b72:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018b77:	eb 3d                	jmp    c0018bb6 <IDE::open(int, int, void*)+0x31e>
c0018b79:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0018b7f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018b86:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018b8d:	66 05 06 02          	add    ax,0x206
c0018b91:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018b98:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0018b9f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018ba6:	66 05 06 02          	add    ax,0x206
c0018baa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018bb1:	e9 e5 fe ff ff       	jmp    c0018a9b <IDE::open(int, int, void*)+0x203>
c0018bb6:	50                   	push   eax
c0018bb7:	50                   	push   eax
c0018bb8:	6a 00                	push   0x0
c0018bba:	53                   	push   ebx
c0018bbb:	e8 5e fa ff ff       	call   c001861e <IDE::prepareInterrupt(unsigned char)>
c0018bc0:	5a                   	pop    edx
c0018bc1:	59                   	pop    ecx
c0018bc2:	6a 01                	push   0x1
c0018bc4:	53                   	push   ebx
c0018bc5:	e8 54 fa ff ff       	call   c001861e <IDE::prepareInterrupt(unsigned char)>
c0018bca:	83 c4 0c             	add    esp,0xc
c0018bcd:	6a 00                	push   0x0
c0018bcf:	6a 00                	push   0x0
c0018bd1:	53                   	push   ebx
c0018bd2:	e8 7b fc ff ff       	call   c0018852 <IDE::enableIRQs(unsigned char, bool)>
c0018bd7:	83 c4 0c             	add    esp,0xc
c0018bda:	6a 00                	push   0x0
c0018bdc:	6a 01                	push   0x1
c0018bde:	53                   	push   ebx
c0018bdf:	e8 6e fc ff ff       	call   c0018852 <IDE::enableIRQs(unsigned char, bool)>
c0018be4:	83 c4 10             	add    esp,0x10
c0018be7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0018bee:	74 34                	je     c0018c24 <IDE::open(int, int, void*)+0x38c>
c0018bf0:	83 ec 0c             	sub    esp,0xc
c0018bf3:	53                   	push   ebx
c0018bf4:	6a 01                	push   0x1
c0018bf6:	68 1a 88 01 c0       	push   0xc001881a
c0018bfb:	6a 0e                	push   0xe
c0018bfd:	53                   	push   ebx
c0018bfe:	e8 fd 21 ff ff       	call   c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c03:	83 c4 14             	add    esp,0x14
c0018c06:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018c0c:	53                   	push   ebx
c0018c0d:	6a 01                	push   0x1
c0018c0f:	68 36 88 01 c0       	push   0xc0018836
c0018c14:	6a 0f                	push   0xf
c0018c16:	53                   	push   ebx
c0018c17:	e8 e4 21 ff ff       	call   c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c1c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0018c22:	eb 38                	jmp    c0018c5c <IDE::open(int, int, void*)+0x3c4>
c0018c24:	83 ec 0c             	sub    esp,0xc
c0018c27:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0018c31:	53                   	push   ebx
c0018c32:	6a 00                	push   0x0
c0018c34:	68 1a 88 01 c0       	push   0xc001881a
c0018c39:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0018c3f:	53                   	push   ebx
c0018c40:	e8 bb 21 ff ff       	call   c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c45:	83 c4 14             	add    esp,0x14
c0018c48:	53                   	push   ebx
c0018c49:	6a 00                	push   0x0
c0018c4b:	68 36 88 01 c0       	push   0xc0018836
c0018c50:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0018c56:	53                   	push   ebx
c0018c57:	e8 a4 21 ff ff       	call   c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018c5e:	83 c4 20             	add    esp,0x20
c0018c61:	83 ec 0c             	sub    esp,0xc
c0018c64:	53                   	push   ebx
c0018c65:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0018c68:	83 c4 0c             	add    esp,0xc
c0018c6b:	6a 07                	push   0x7
c0018c6d:	6a 00                	push   0x0
c0018c6f:	53                   	push   ebx
c0018c70:	e8 8f fa ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018c75:	83 c4 0c             	add    esp,0xc
c0018c78:	6a 07                	push   0x7
c0018c7a:	6a 01                	push   0x1
c0018c7c:	53                   	push   ebx
c0018c7d:	e8 82 fa ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018c82:	83 c4 0c             	add    esp,0xc
c0018c85:	6a 01                	push   0x1
c0018c87:	6a 00                	push   0x0
c0018c89:	53                   	push   ebx
c0018c8a:	e8 c3 fb ff ff       	call   c0018852 <IDE::enableIRQs(unsigned char, bool)>
c0018c8f:	83 c4 0c             	add    esp,0xc
c0018c92:	6a 01                	push   0x1
c0018c94:	6a 01                	push   0x1
c0018c96:	53                   	push   ebx
c0018c97:	e8 b6 fb ff ff       	call   c0018852 <IDE::enableIRQs(unsigned char, bool)>
c0018c9c:	83 c4 2c             	add    esp,0x2c
c0018c9f:	31 c0                	xor    eax,eax
c0018ca1:	5b                   	pop    ebx
c0018ca2:	5e                   	pop    esi
c0018ca3:	5f                   	pop    edi
c0018ca4:	5d                   	pop    ebp
c0018ca5:	c3                   	ret    

c0018ca6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0018ca6:	55                   	push   ebp
c0018ca7:	57                   	push   edi
c0018ca8:	56                   	push   esi
c0018ca9:	53                   	push   ebx
c0018caa:	83 ec 1c             	sub    esp,0x1c
c0018cad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018cb5:	8d 50 f8             	lea    edx,[eax-0x8]
c0018cb8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018cbc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018cc0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018cc4:	80 fa 03             	cmp    dl,0x3
c0018cc7:	77 5d                	ja     c0018d26 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0018cc9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ccd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018cd1:	0f b6 db             	movzx  ebx,bl
c0018cd4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0018cd7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0018cdb:	83 ca 80             	or     edx,0xffffff80
c0018cde:	0f b6 d2             	movzx  edx,dl
c0018ce1:	52                   	push   edx
c0018ce2:	6a 0c                	push   0xc
c0018ce4:	53                   	push   ebx
c0018ce5:	56                   	push   esi
c0018ce6:	e8 59 f9 ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ceb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0018cf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cf4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018cf8:	0f b6 c0             	movzx  eax,al
c0018cfb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0018cff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018d01:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0018d06:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018d0a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d0e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018d12:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018d1a:	83 c4 2c             	add    esp,0x2c
c0018d1d:	5b                   	pop    ebx
c0018d1e:	5e                   	pop    esi
c0018d1f:	5f                   	pop    edi
c0018d20:	5d                   	pop    ebp
c0018d21:	e9 1e f9 ff ff       	jmp    c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d26:	3c 07                	cmp    al,0x7
c0018d28:	77 10                	ja     c0018d3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0018d2a:	0f b6 db             	movzx  ebx,bl
c0018d2d:	0f b6 d0             	movzx  edx,al
c0018d30:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0018d38:	eb 2d                	jmp    c0018d67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018d3a:	3c 0d                	cmp    al,0xd
c0018d3c:	77 13                	ja     c0018d51 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0018d3e:	0f b6 db             	movzx  ebx,bl
c0018d41:	0f b6 c0             	movzx  eax,al
c0018d44:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0018d4b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0018d4f:	eb 16                	jmp    c0018d67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018d51:	3c 15                	cmp    al,0x15
c0018d53:	77 14                	ja     c0018d69 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0018d55:	0f b6 db             	movzx  ebx,bl
c0018d58:	0f b6 c0             	movzx  eax,al
c0018d5b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0018d63:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0018d67:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018d69:	83 c4 1c             	add    esp,0x1c
c0018d6c:	5b                   	pop    ebx
c0018d6d:	5e                   	pop    esi
c0018d6e:	5f                   	pop    edi
c0018d6f:	5d                   	pop    ebp
c0018d70:	c3                   	ret    
c0018d71:	90                   	nop

c0018d72 <IDE::detect()>:
c0018d72:	55                   	push   ebp
c0018d73:	57                   	push   edi
c0018d74:	56                   	push   esi
c0018d75:	53                   	push   ebx
c0018d76:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018d7c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0018d83:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0018d8a:	0f 85 97 02 00 00    	jne    c0019027 <IDE::detect()+0x2b5>
c0018d90:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0018d97:	31 f6                	xor    esi,esi
c0018d99:	31 ed                	xor    ebp,ebp
c0018d9b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018da3:	89 e8                	mov    eax,ebp
c0018da5:	c1 e0 06             	shl    eax,0x6
c0018da8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0018db0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018db4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018db8:	c1 e0 04             	shl    eax,0x4
c0018dbb:	83 c8 a0             	or     eax,0xffffffa0
c0018dbe:	0f b6 c0             	movzx  eax,al
c0018dc1:	50                   	push   eax
c0018dc2:	6a 06                	push   0x6
c0018dc4:	56                   	push   esi
c0018dc5:	53                   	push   ebx
c0018dc6:	e8 79 f8 ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018dcb:	83 c4 0c             	add    esp,0xc
c0018dce:	6a 0c                	push   0xc
c0018dd0:	56                   	push   esi
c0018dd1:	53                   	push   ebx
c0018dd2:	e8 2d f9 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018dd7:	83 c4 0c             	add    esp,0xc
c0018dda:	6a 0c                	push   0xc
c0018ddc:	56                   	push   esi
c0018ddd:	53                   	push   ebx
c0018dde:	e8 21 f9 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018de3:	83 c4 0c             	add    esp,0xc
c0018de6:	6a 0c                	push   0xc
c0018de8:	56                   	push   esi
c0018de9:	53                   	push   ebx
c0018dea:	e8 15 f9 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018def:	83 c4 0c             	add    esp,0xc
c0018df2:	6a 0c                	push   0xc
c0018df4:	56                   	push   esi
c0018df5:	53                   	push   ebx
c0018df6:	e8 09 f9 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018dfb:	68 ec 00 00 00       	push   0xec
c0018e00:	6a 07                	push   0x7
c0018e02:	56                   	push   esi
c0018e03:	53                   	push   ebx
c0018e04:	e8 3b f8 ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018e09:	83 c4 1c             	add    esp,0x1c
c0018e0c:	6a 0c                	push   0xc
c0018e0e:	56                   	push   esi
c0018e0f:	53                   	push   ebx
c0018e10:	e8 ef f8 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018e15:	83 c4 0c             	add    esp,0xc
c0018e18:	6a 0c                	push   0xc
c0018e1a:	56                   	push   esi
c0018e1b:	53                   	push   ebx
c0018e1c:	e8 e3 f8 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018e21:	83 c4 0c             	add    esp,0xc
c0018e24:	6a 0c                	push   0xc
c0018e26:	56                   	push   esi
c0018e27:	53                   	push   ebx
c0018e28:	e8 d7 f8 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018e2d:	83 c4 0c             	add    esp,0xc
c0018e30:	6a 0c                	push   0xc
c0018e32:	56                   	push   esi
c0018e33:	53                   	push   ebx
c0018e34:	e8 cb f8 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018e39:	83 c4 0c             	add    esp,0xc
c0018e3c:	6a 0c                	push   0xc
c0018e3e:	56                   	push   esi
c0018e3f:	53                   	push   ebx
c0018e40:	e8 bf f8 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018e45:	83 c4 10             	add    esp,0x10
c0018e48:	84 c0                	test   al,al
c0018e4a:	0f 84 5f 01 00 00    	je     c0018faf <IDE::detect()+0x23d>
c0018e50:	31 ff                	xor    edi,edi
c0018e52:	50                   	push   eax
c0018e53:	6a 0c                	push   0xc
c0018e55:	56                   	push   esi
c0018e56:	53                   	push   ebx
c0018e57:	e8 a8 f8 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018e5c:	83 c4 10             	add    esp,0x10
c0018e5f:	a8 01                	test   al,0x1
c0018e61:	0f 85 69 01 00 00    	jne    c0018fd0 <IDE::detect()+0x25e>
c0018e67:	84 c0                	test   al,al
c0018e69:	78 04                	js     c0018e6f <IDE::detect()+0xfd>
c0018e6b:	a8 08                	test   al,0x8
c0018e6d:	75 23                	jne    c0018e92 <IDE::detect()+0x120>
c0018e6f:	47                   	inc    edi
c0018e70:	81 ff 17 01 00 00    	cmp    edi,0x117
c0018e76:	7e da                	jle    c0018e52 <IDE::detect()+0xe0>
c0018e78:	83 ec 0c             	sub    esp,0xc
c0018e7b:	6a 32                	push   0x32
c0018e7d:	e8 c6 9e ff ff       	call   c0012d48 <milliTenthSleep(unsigned int)>
c0018e82:	83 c4 10             	add    esp,0x10
c0018e85:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0018e8b:	75 c5                	jne    c0018e52 <IDE::detect()+0xe0>
c0018e8d:	e9 3e 01 00 00       	jmp    c0018fd0 <IDE::detect()+0x25e>
c0018e92:	31 c9                	xor    ecx,ecx
c0018e94:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0018e98:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0018e9c:	83 ec 0c             	sub    esp,0xc
c0018e9f:	68 80 00 00 00       	push   0x80
c0018ea4:	57                   	push   edi
c0018ea5:	6a 00                	push   0x0
c0018ea7:	56                   	push   esi
c0018ea8:	53                   	push   ebx
c0018ea9:	e8 f8 fd ff ff       	call   c0018ca6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0018eae:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018eb3:	89 e8                	mov    eax,ebp
c0018eb5:	89 d1                	mov    ecx,edx
c0018eb7:	c1 e0 06             	shl    eax,0x6
c0018eba:	01 d8                	add    eax,ebx
c0018ebc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0018ec3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0018eca:	89 f2                	mov    edx,esi
c0018ecc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0018ed2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0018ed6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0018edc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ee0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0018ee7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0018eef:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0018ef6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0018efe:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0018f04:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0018f0b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0018f11:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018f15:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018f19:	83 c4 20             	add    esp,0x20
c0018f1c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0018f1f:	83 c0 02             	add    eax,0x2
c0018f22:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0018f28:	83 c7 02             	add    edi,0x2
c0018f2b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0018f2e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0018f34:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0018f38:	75 e2                	jne    c0018f1c <IDE::detect()+0x1aa>
c0018f3a:	89 e8                	mov    eax,ebp
c0018f3c:	c1 e0 06             	shl    eax,0x6
c0018f3f:	01 d8                	add    eax,ebx
c0018f41:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0018f47:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0018f4e:	66 c1 ea 09          	shr    dx,0x9
c0018f52:	83 e2 01             	and    edx,0x1
c0018f55:	84 c9                	test   cl,cl
c0018f57:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0018f5d:	75 22                	jne    c0018f81 <IDE::detect()+0x20f>
c0018f5f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0018f66:	74 46                	je     c0018fae <IDE::detect()+0x23c>
c0018f68:	83 ec 0c             	sub    esp,0xc
c0018f6b:	68 7c 01 00 00       	push   0x17c
c0018f70:	e8 dc dc fe ff       	call   c0006c51 <malloc>
c0018f75:	89 c7                	mov    edi,eax
c0018f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f7a:	e8 07 05 00 00       	call   c0019486 <ATA::ATA()>
c0018f7f:	eb 17                	jmp    c0018f98 <IDE::detect()+0x226>
c0018f81:	83 ec 0c             	sub    esp,0xc
c0018f84:	68 84 01 00 00       	push   0x184
c0018f89:	e8 c3 dc fe ff       	call   c0006c51 <malloc>
c0018f8e:	89 c7                	mov    edi,eax
c0018f90:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f93:	e8 e6 0a 00 00       	call   c0019a7e <ATAPI::ATAPI()>
c0018f98:	5a                   	pop    edx
c0018f99:	59                   	pop    ecx
c0018f9a:	57                   	push   edi
c0018f9b:	53                   	push   ebx
c0018f9c:	e8 b3 1e ff ff       	call   c000ae54 <Device::addChild(Device*)>
c0018fa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0018fa3:	53                   	push   ebx
c0018fa4:	55                   	push   ebp
c0018fa5:	6a 00                	push   0x0
c0018fa7:	57                   	push   edi
c0018fa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fab:	83 c4 20             	add    esp,0x20
c0018fae:	45                   	inc    ebp
c0018faf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0018fb4:	74 0d                	je     c0018fc3 <IDE::detect()+0x251>
c0018fb6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018fbe:	e9 e0 fd ff ff       	jmp    c0018da3 <IDE::detect()+0x31>
c0018fc3:	4e                   	dec    esi
c0018fc4:	74 61                	je     c0019027 <IDE::detect()+0x2b5>
c0018fc6:	be 01 00 00 00       	mov    esi,0x1
c0018fcb:	e9 cb fd ff ff       	jmp    c0018d9b <IDE::detect()+0x29>
c0018fd0:	50                   	push   eax
c0018fd1:	6a 04                	push   0x4
c0018fd3:	56                   	push   esi
c0018fd4:	53                   	push   ebx
c0018fd5:	e8 2a f7 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018fda:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018fde:	83 c4 0c             	add    esp,0xc
c0018fe1:	6a 05                	push   0x5
c0018fe3:	56                   	push   esi
c0018fe4:	53                   	push   ebx
c0018fe5:	e8 1a f7 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ff1:	80 fa 14             	cmp    dl,0x14
c0018ff4:	75 04                	jne    c0018ffa <IDE::detect()+0x288>
c0018ff6:	3c eb                	cmp    al,0xeb
c0018ff8:	eb 07                	jmp    c0019001 <IDE::detect()+0x28f>
c0018ffa:	3c 96                	cmp    al,0x96
c0018ffc:	75 b1                	jne    c0018faf <IDE::detect()+0x23d>
c0018ffe:	80 fa 69             	cmp    dl,0x69
c0019001:	75 ac                	jne    c0018faf <IDE::detect()+0x23d>
c0019003:	68 a1 00 00 00       	push   0xa1
c0019008:	6a 07                	push   0x7
c001900a:	56                   	push   esi
c001900b:	53                   	push   ebx
c001900c:	e8 33 f6 ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019011:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019018:	e8 2b 9d ff ff       	call   c0012d48 <milliTenthSleep(unsigned int)>
c001901d:	83 c4 10             	add    esp,0x10
c0019020:	b1 01                	mov    cl,0x1
c0019022:	e9 6d fe ff ff       	jmp    c0018e94 <IDE::detect()+0x122>
c0019027:	81 c4 1c 02 00 00    	add    esp,0x21c
c001902d:	5b                   	pop    ebx
c001902e:	5e                   	pop    esi
c001902f:	5f                   	pop    edi
c0019030:	5d                   	pop    ebp
c0019031:	c3                   	ret    

c0019032 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019032:	55                   	push   ebp
c0019033:	57                   	push   edi
c0019034:	56                   	push   esi
c0019035:	53                   	push   ebx
c0019036:	83 ec 1c             	sub    esp,0x1c
c0019039:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001903d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019041:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019045:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019049:	88 c3                	mov    bl,al
c001904b:	84 c0                	test   al,al
c001904d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019051:	0f 84 81 00 00 00    	je     c00190d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019057:	83 ec 0c             	sub    esp,0xc
c001905a:	68 67 e9 01 c0       	push   0xc001e967
c001905f:	e8 b0 09 ff ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0019064:	83 c4 10             	add    esp,0x10
c0019067:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001906b:	3c 01                	cmp    al,0x1
c001906d:	74 63                	je     c00190d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001906f:	3c 02                	cmp    al,0x2
c0019071:	75 53                	jne    c00190c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019073:	01 f6                	add    esi,esi
c0019075:	09 ee                	or     esi,ebp
c0019077:	50                   	push   eax
c0019078:	89 f0                	mov    eax,esi
c001907a:	6a 01                	push   0x1
c001907c:	0f b6 f0             	movzx  esi,al
c001907f:	c1 e6 06             	shl    esi,0x6
c0019082:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001908a:	50                   	push   eax
c001908b:	57                   	push   edi
c001908c:	e8 73 f6 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	a8 01                	test   al,0x1
c0019096:	74 02                	je     c001909a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019098:	b3 07                	mov    bl,0x7
c001909a:	a8 02                	test   al,0x2
c001909c:	74 02                	je     c00190a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001909e:	b3 03                	mov    bl,0x3
c00190a0:	a8 04                	test   al,0x4
c00190a2:	74 02                	je     c00190a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00190a4:	b3 14                	mov    bl,0x14
c00190a6:	a8 08                	test   al,0x8
c00190a8:	74 02                	je     c00190ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00190aa:	b3 03                	mov    bl,0x3
c00190ac:	a8 10                	test   al,0x10
c00190ae:	74 02                	je     c00190b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00190b0:	b3 15                	mov    bl,0x15
c00190b2:	a8 20                	test   al,0x20
c00190b4:	74 02                	je     c00190b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00190b6:	b3 03                	mov    bl,0x3
c00190b8:	a8 40                	test   al,0x40
c00190ba:	74 02                	je     c00190be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00190bc:	b3 16                	mov    bl,0x16
c00190be:	84 c0                	test   al,al
c00190c0:	79 16                	jns    c00190d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00190c2:	b3 0d                	mov    bl,0xd
c00190c4:	eb 12                	jmp    c00190d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00190c6:	3c 03                	cmp    al,0x3
c00190c8:	74 0c                	je     c00190d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00190ca:	3c 04                	cmp    al,0x4
c00190cc:	75 0a                	jne    c00190d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00190ce:	b3 08                	mov    bl,0x8
c00190d0:	eb 06                	jmp    c00190d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00190d2:	b3 13                	mov    bl,0x13
c00190d4:	eb 02                	jmp    c00190d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00190d6:	b3 17                	mov    bl,0x17
c00190d8:	83 c4 1c             	add    esp,0x1c
c00190db:	88 d8                	mov    al,bl
c00190dd:	5b                   	pop    ebx
c00190de:	5e                   	pop    esi
c00190df:	5f                   	pop    edi
c00190e0:	5d                   	pop    ebp
c00190e1:	c3                   	ret    

c00190e2 <IDE::polling(unsigned char, unsigned int)>:
c00190e2:	55                   	push   ebp
c00190e3:	bd 04 00 00 00       	mov    ebp,0x4
c00190e8:	57                   	push   edi
c00190e9:	56                   	push   esi
c00190ea:	53                   	push   ebx
c00190eb:	83 ec 0c             	sub    esp,0xc
c00190ee:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190f2:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c00190f6:	0f b6 f3             	movzx  esi,bl
c00190f9:	52                   	push   edx
c00190fa:	6a 0c                	push   0xc
c00190fc:	56                   	push   esi
c00190fd:	57                   	push   edi
c00190fe:	e8 01 f6 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	4d                   	dec    ebp
c0019107:	75 ed                	jne    c00190f6 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019109:	bb a0 86 01 00       	mov    ebx,0x186a0
c001910e:	50                   	push   eax
c001910f:	6a 0c                	push   0xc
c0019111:	56                   	push   esi
c0019112:	57                   	push   edi
c0019113:	e8 ec f5 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	a8 01                	test   al,0x1
c001911d:	75 17                	jne    c0019136 <IDE::polling(unsigned char, unsigned int)+0x54>
c001911f:	a8 20                	test   al,0x20
c0019121:	75 0f                	jne    c0019132 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019123:	4b                   	dec    ebx
c0019124:	74 10                	je     c0019136 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019126:	84 c0                	test   al,al
c0019128:	78 e4                	js     c001910e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001912a:	a8 08                	test   al,0x8
c001912c:	74 e0                	je     c001910e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001912e:	31 c0                	xor    eax,eax
c0019130:	eb 06                	jmp    c0019138 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019132:	b0 01                	mov    al,0x1
c0019134:	eb 02                	jmp    c0019138 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019136:	b0 02                	mov    al,0x2
c0019138:	83 c4 0c             	add    esp,0xc
c001913b:	5b                   	pop    ebx
c001913c:	5e                   	pop    esi
c001913d:	5f                   	pop    edi
c001913e:	5d                   	pop    ebp
c001913f:	c3                   	ret    

c0019140 <SATABus::close(int, int, void*)>:
c0019140:	31 c0                	xor    eax,eax
c0019142:	c3                   	ret    
c0019143:	90                   	nop

c0019144 <SATABus::detect()>:
c0019144:	c3                   	ret    
c0019145:	90                   	nop

c0019146 <SATABus::SATABus()>:
c0019146:	83 ec 0c             	sub    esp,0xc
c0019149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001914d:	83 ec 08             	sub    esp,0x8
c0019150:	68 a0 e9 01 c0       	push   0xc001e9a0
c0019155:	50                   	push   eax
c0019156:	e8 3d 20 ff ff       	call   c000b198 <HardDiskController::HardDiskController(char const*)>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c0019163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019167:	89 10                	mov    DWORD PTR [eax],edx
c0019169:	83 ec 0c             	sub    esp,0xc
c001916c:	6a 50                	push   0x50
c001916e:	e8 69 df fe ff       	call   c00070dc <Phys::allocateContiguousPages(int)>
c0019173:	83 c4 10             	add    esp,0x10
c0019176:	89 c2                	mov    edx,eax
c0019178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001917c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019182:	83 ec 0c             	sub    esp,0xc
c0019185:	6a 50                	push   0x50
c0019187:	e8 01 f6 fe ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c001918c:	83 c4 10             	add    esp,0x10
c001918f:	89 c2                	mov    edx,eax
c0019191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019195:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001919b:	a1 94 f6 01 c0       	mov    eax,ds:0xc001f694
c00191a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191a4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00191aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191ae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00191b4:	83 ec 0c             	sub    esp,0xc
c00191b7:	6a 03                	push   0x3
c00191b9:	6a 50                	push   0x50
c00191bb:	51                   	push   ecx
c00191bc:	52                   	push   edx
c00191bd:	50                   	push   eax
c00191be:	e8 1d ff fe ff       	call   c00090e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00191c3:	83 c4 20             	add    esp,0x20
c00191c6:	90                   	nop
c00191c7:	83 c4 0c             	add    esp,0xc
c00191ca:	c3                   	ret    
c00191cb:	90                   	nop

c00191cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00191cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00191d0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00191d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191d6:	09 c2                	or     edx,eax
c00191d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00191e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00191e4:	31 c0                	xor    eax,eax
c00191e6:	c1 e9 08             	shr    ecx,0x8
c00191e9:	83 e1 0f             	and    ecx,0xf
c00191ec:	39 c8                	cmp    eax,ecx
c00191ee:	74 0a                	je     c00191fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00191f0:	f6 c2 01             	test   dl,0x1
c00191f3:	74 08                	je     c00191fd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00191f5:	d1 ea                	shr    edx,1
c00191f7:	40                   	inc    eax
c00191f8:	eb f2                	jmp    c00191ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00191fa:	83 c8 ff             	or     eax,0xffffffff
c00191fd:	c3                   	ret    

c00191fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00191fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019202:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019205:	89 c2                	mov    edx,eax
c0019207:	c1 ea 08             	shr    edx,0x8
c001920a:	83 e2 0f             	and    edx,0xf
c001920d:	fe ca                	dec    dl
c001920f:	75 31                	jne    c0019242 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019211:	83 e0 0f             	and    eax,0xf
c0019214:	3c 03                	cmp    al,0x3
c0019216:	75 2a                	jne    c0019242 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019218:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001921b:	b8 02 00 00 00       	mov    eax,0x2
c0019220:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019226:	74 1c                	je     c0019244 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019228:	b8 04 00 00 00       	mov    eax,0x4
c001922d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019233:	74 0f                	je     c0019244 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019235:	31 c0                	xor    eax,eax
c0019237:	83 fa 03             	cmp    edx,0x3
c001923a:	0f 94 c0             	sete   al
c001923d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019241:	c3                   	ret    
c0019242:	31 c0                	xor    eax,eax
c0019244:	c3                   	ret    
c0019245:	90                   	nop

c0019246 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001924a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001924d:	0f ba e2 0f          	bt     edx,0xf
c0019251:	72 f7                	jb     c001924a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019253:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019256:	83 ca 10             	or     edx,0x10
c0019259:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001925c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001925f:	83 ca 01             	or     edx,0x1
c0019262:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019265:	c3                   	ret    

c0019266 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019266:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001926a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001926d:	83 e2 fe             	and    edx,0xfffffffe
c0019270:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019273:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019276:	83 e2 ef             	and    edx,0xffffffef
c0019279:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001927c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001927f:	0f ba e2 0e          	bt     edx,0xe
c0019283:	72 f7                	jb     c001927c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019285:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019288:	0f ba e2 0f          	bt     edx,0xf
c001928c:	72 ee                	jb     c001927c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001928e:	c3                   	ret    
c001928f:	90                   	nop

c0019290 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019290:	55                   	push   ebp
c0019291:	57                   	push   edi
c0019292:	56                   	push   esi
c0019293:	53                   	push   ebx
c0019294:	83 ec 1c             	sub    esp,0x1c
c0019297:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001929b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001929f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00192a3:	53                   	push   ebx
c00192a4:	89 fd                	mov    ebp,edi
c00192a6:	56                   	push   esi
c00192a7:	c1 e5 0a             	shl    ebp,0xa
c00192aa:	e8 b7 ff ff ff       	call   c0019266 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00192af:	83 ec 0c             	sub    esp,0xc
c00192b2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00192b8:	01 e8                	add    eax,ebp
c00192ba:	89 03                	mov    DWORD PTR [ebx],eax
c00192bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00192be:	68 00 04 00 00       	push   0x400
c00192c3:	6a 00                	push   0x0
c00192c5:	50                   	push   eax
c00192c6:	e8 25 72 fe ff       	call   c00004f0 <memset>
c00192cb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00192d1:	89 fa                	mov    edx,edi
c00192d3:	01 e8                	add    eax,ebp
c00192d5:	c1 e7 0d             	shl    edi,0xd
c00192d8:	89 03                	mov    DWORD PTR [ebx],eax
c00192da:	c1 e2 08             	shl    edx,0x8
c00192dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00192e4:	81 c2 00 80 00 00    	add    edx,0x8000
c00192ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00192ee:	89 d0                	mov    eax,edx
c00192f0:	83 c4 1c             	add    esp,0x1c
c00192f3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00192f9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00192fc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00192ff:	68 00 01 00 00       	push   0x100
c0019304:	6a 00                	push   0x0
c0019306:	50                   	push   eax
c0019307:	e8 e4 71 fe ff       	call   c00004f0 <memset>
c001930c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019310:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019316:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001931c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019320:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019323:	83 c4 10             	add    esp,0x10
c0019326:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001932d:	31 ff                	xor    edi,edi
c001932f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019335:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001933b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001933f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019345:	83 c5 20             	add    ebp,0x20
c0019348:	01 f8                	add    eax,edi
c001934a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001934d:	52                   	push   edx
c001934e:	68 00 01 00 00       	push   0x100
c0019353:	6a 00                	push   0x0
c0019355:	50                   	push   eax
c0019356:	e8 95 71 fe ff       	call   c00004f0 <memset>
c001935b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019368:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001936f:	01 f8                	add    eax,edi
c0019371:	81 c7 00 01 00 00    	add    edi,0x100
c0019377:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001937a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019380:	75 b3                	jne    c0019335 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0019382:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0019386:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001938a:	83 c4 1c             	add    esp,0x1c
c001938d:	5b                   	pop    ebx
c001938e:	5e                   	pop    esi
c001938f:	5f                   	pop    edi
c0019390:	5d                   	pop    ebp
c0019391:	e9 b0 fe ff ff       	jmp    c0019246 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0019396 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019396:	55                   	push   ebp
c0019397:	57                   	push   edi
c0019398:	56                   	push   esi
c0019399:	53                   	push   ebx
c001939a:	31 db                	xor    ebx,ebx
c001939c:	83 ec 0c             	sub    esp,0xc
c001939f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00193a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00193a7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00193aa:	f7 c7 01 00 00 00    	test   edi,0x1
c00193b0:	74 7a                	je     c001942c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00193b2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00193b6:	89 d8                	mov    eax,ebx
c00193b8:	c1 e0 07             	shl    eax,0x7
c00193bb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00193c2:	55                   	push   ebp
c00193c3:	56                   	push   esi
c00193c4:	e8 35 fe ff ff       	call   c00191fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00193c9:	5a                   	pop    edx
c00193ca:	83 f8 01             	cmp    eax,0x1
c00193cd:	59                   	pop    ecx
c00193ce:	75 21                	jne    c00193f1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00193d0:	50                   	push   eax
c00193d1:	53                   	push   ebx
c00193d2:	55                   	push   ebp
c00193d3:	56                   	push   esi
c00193d4:	e8 b7 fe ff ff       	call   c0019290 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00193d9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00193e0:	e8 6c d8 fe ff       	call   c0006c51 <malloc>
c00193e5:	89 c5                	mov    ebp,eax
c00193e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00193ea:	e8 43 0d 00 00       	call   c001a132 <SATA::SATA()>
c00193ef:	eb 24                	jmp    c0019415 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00193f1:	83 f8 04             	cmp    eax,0x4
c00193f4:	75 36                	jne    c001942c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00193f6:	51                   	push   ecx
c00193f7:	53                   	push   ebx
c00193f8:	55                   	push   ebp
c00193f9:	56                   	push   esi
c00193fa:	e8 91 fe ff ff       	call   c0019290 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00193ff:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019406:	e8 46 d8 fe ff       	call   c0006c51 <malloc>
c001940b:	89 c5                	mov    ebp,eax
c001940d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019410:	e8 79 10 00 00       	call   c001a48e <SATAPI::SATAPI()>
c0019415:	58                   	pop    eax
c0019416:	5a                   	pop    edx
c0019417:	55                   	push   ebp
c0019418:	56                   	push   esi
c0019419:	e8 36 1a ff ff       	call   c000ae54 <Device::addChild(Device*)>
c001941e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019421:	56                   	push   esi
c0019422:	6a 00                	push   0x0
c0019424:	53                   	push   ebx
c0019425:	55                   	push   ebp
c0019426:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019429:	83 c4 20             	add    esp,0x20
c001942c:	d1 ef                	shr    edi,1
c001942e:	43                   	inc    ebx
c001942f:	83 fb 20             	cmp    ebx,0x20
c0019432:	0f 85 72 ff ff ff    	jne    c00193aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019438:	83 c4 0c             	add    esp,0xc
c001943b:	5b                   	pop    ebx
c001943c:	5e                   	pop    esi
c001943d:	5f                   	pop    edi
c001943e:	5d                   	pop    ebp
c001943f:	c3                   	ret    

c0019440 <SATABus::open(int, int, void*)>:
c0019440:	83 ec 14             	sub    esp,0x14
c0019443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019447:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001944d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019453:	52                   	push   edx
c0019454:	50                   	push   eax
c0019455:	e8 3c ff ff ff       	call   c0019396 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001945a:	31 c0                	xor    eax,eax
c001945c:	83 c4 1c             	add    esp,0x1c
c001945f:	c3                   	ret    

c0019460 <ATA::close(int, int, void*)>:
c0019460:	83 ec 0c             	sub    esp,0xc
c0019463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019467:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001946d:	85 c0                	test   eax,eax
c001946f:	74 0c                	je     c001947d <ATA::close(int, int, void*)+0x1d>
c0019471:	83 ec 0c             	sub    esp,0xc
c0019474:	8b 10                	mov    edx,DWORD PTR [eax]
c0019476:	50                   	push   eax
c0019477:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001947a:	83 c4 10             	add    esp,0x10
c001947d:	31 c0                	xor    eax,eax
c001947f:	83 c4 0c             	add    esp,0xc
c0019482:	c3                   	ret    
c0019483:	90                   	nop

c0019484 <ATA::powerSaving(PowerSavingLevel)>:
c0019484:	c3                   	ret    
c0019485:	90                   	nop

c0019486 <ATA::ATA()>:
c0019486:	83 ec 0c             	sub    esp,0xc
c0019489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001948d:	83 ec 04             	sub    esp,0x4
c0019490:	68 00 02 00 00       	push   0x200
c0019495:	68 99 ea 01 c0       	push   0xc001ea99
c001949a:	50                   	push   eax
c001949b:	e8 82 1d ff ff       	call   c000b222 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00194a0:	83 c4 10             	add    esp,0x10
c00194a3:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c00194a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194ac:	89 10                	mov    DWORD PTR [eax],edx
c00194ae:	90                   	nop
c00194af:	83 c4 0c             	add    esp,0xc
c00194b2:	c3                   	ret    
c00194b3:	90                   	nop

c00194b4 <ATA::flush(bool)>:
c00194b4:	53                   	push   ebx
c00194b5:	83 ec 08             	sub    esp,0x8
c00194b8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00194bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00194c1:	19 c0                	sbb    eax,eax
c00194c3:	83 e0 fd             	and    eax,0xfffffffd
c00194c6:	05 ea 00 00 00       	add    eax,0xea
c00194cb:	50                   	push   eax
c00194cc:	6a 07                	push   0x7
c00194ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00194d5:	50                   	push   eax
c00194d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194dc:	e8 63 f1 ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194e1:	83 c4 0c             	add    esp,0xc
c00194e4:	6a 00                	push   0x0
c00194e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00194ed:	50                   	push   eax
c00194ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194f4:	e8 e9 fb ff ff       	call   c00190e2 <IDE::polling(unsigned char, unsigned int)>
c00194f9:	83 c4 18             	add    esp,0x18
c00194fc:	5b                   	pop    ebx
c00194fd:	c3                   	ret    

c00194fe <ATA::readyForCommand()>:
c00194fe:	56                   	push   esi
c00194ff:	53                   	push   ebx
c0019500:	53                   	push   ebx
c0019501:	31 db                	xor    ebx,ebx
c0019503:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019507:	51                   	push   ecx
c0019508:	6a 0c                	push   0xc
c001950a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019511:	50                   	push   eax
c0019512:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019518:	e8 e7 f1 ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c001951d:	83 c4 10             	add    esp,0x10
c0019520:	a8 88                	test   al,0x88
c0019522:	74 1f                	je     c0019543 <ATA::readyForCommand()+0x45>
c0019524:	43                   	inc    ebx
c0019525:	83 fb 63             	cmp    ebx,0x63
c0019528:	7e dd                	jle    c0019507 <ATA::readyForCommand()+0x9>
c001952a:	83 ec 0c             	sub    esp,0xc
c001952d:	6a 0a                	push   0xa
c001952f:	e8 14 98 ff ff       	call   c0012d48 <milliTenthSleep(unsigned int)>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001953d:	75 c8                	jne    c0019507 <ATA::readyForCommand()+0x9>
c001953f:	31 c0                	xor    eax,eax
c0019541:	eb 02                	jmp    c0019545 <ATA::readyForCommand()+0x47>
c0019543:	b0 01                	mov    al,0x1
c0019545:	5a                   	pop    edx
c0019546:	5b                   	pop    ebx
c0019547:	5e                   	pop    esi
c0019548:	c3                   	ret    
c0019549:	90                   	nop

c001954a <ATA::access(unsigned long long, int, void*, bool)>:
c001954a:	55                   	push   ebp
c001954b:	57                   	push   edi
c001954c:	56                   	push   esi
c001954d:	53                   	push   ebx
c001954e:	83 ec 2c             	sub    esp,0x2c
c0019551:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019555:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019559:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001955d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019561:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019565:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019569:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001956d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019573:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019577:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001957d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019581:	c1 e0 06             	shl    eax,0x6
c0019584:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001958c:	74 5d                	je     c00195eb <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001958e:	89 fa                	mov    edx,edi
c0019590:	89 f0                	mov    eax,esi
c0019592:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019596:	c1 ea 1c             	shr    edx,0x1c
c0019599:	89 d1                	mov    ecx,edx
c001959b:	09 c1                	or     ecx,eax
c001959d:	74 25                	je     c00195c4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001959f:	31 ed                	xor    ebp,ebp
c00195a1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00195a8:	89 fa                	mov    edx,edi
c00195aa:	89 f0                	mov    eax,esi
c00195ac:	0f ad d0             	shrd   eax,edx,cl
c00195af:	d3 ea                	shr    edx,cl
c00195b1:	f6 c1 20             	test   cl,0x20
c00195b4:	74 02                	je     c00195b8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00195b6:	89 d0                	mov    eax,edx
c00195b8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00195bc:	45                   	inc    ebp
c00195bd:	83 fd 06             	cmp    ebp,0x6
c00195c0:	75 df                	jne    c00195a1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00195c2:	eb 76                	jmp    c001963a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00195c4:	89 f0                	mov    eax,esi
c00195c6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00195cb:	89 fa                	mov    edx,edi
c00195cd:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00195d4:	0f ac d0 10          	shrd   eax,edx,0x10
c00195d8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00195dd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00195e1:	c1 ee 18             	shr    esi,0x18
c00195e4:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00195e9:	eb 56                	jmp    c0019641 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00195eb:	6a 00                	push   0x0
c00195ed:	6a 3f                	push   0x3f
c00195ef:	57                   	push   edi
c00195f0:	56                   	push   esi
c00195f1:	e8 aa 22 00 00       	call   c001b8a0 <__umoddi3>
c00195f6:	83 c4 10             	add    esp,0x10
c00195f9:	40                   	inc    eax
c00195fa:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00195fe:	6a 00                	push   0x0
c0019600:	68 f0 03 00 00       	push   0x3f0
c0019605:	57                   	push   edi
c0019606:	56                   	push   esi
c0019607:	e8 94 21 00 00       	call   c001b7a0 <__udivdi3>
c001960c:	83 c4 10             	add    esp,0x10
c001960f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019614:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001961b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019620:	6a 00                	push   0x0
c0019622:	6a 3f                	push   0x3f
c0019624:	57                   	push   edi
c0019625:	56                   	push   esi
c0019626:	e8 75 21 00 00       	call   c001b7a0 <__udivdi3>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	89 c6                	mov    esi,eax
c0019630:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019635:	83 e6 0f             	and    esi,0xf
c0019638:	eb 07                	jmp    c0019641 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001963a:	31 f6                	xor    esi,esi
c001963c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019641:	bf 01 00 00 00       	mov    edi,0x1
c0019646:	50                   	push   eax
c0019647:	6a 00                	push   0x0
c0019649:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019650:	50                   	push   eax
c0019651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019655:	e8 f8 f1 ff ff       	call   c0018852 <IDE::enableIRQs(unsigned char, bool)>
c001965a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001965d:	e8 9c fe ff ff       	call   c00194fe <ATA::readyForCommand()>
c0019662:	83 c4 10             	add    esp,0x10
c0019665:	84 c0                	test   al,al
c0019667:	0f 84 4e 02 00 00    	je     c00198bb <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001966d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019673:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019679:	c1 e0 04             	shl    eax,0x4
c001967c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019683:	09 c6                	or     esi,eax
c0019685:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001968a:	75 05                	jne    c0019691 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001968c:	83 ce a0             	or     esi,0xffffffa0
c001968f:	eb 03                	jmp    c0019694 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019691:	83 ce e0             	or     esi,0xffffffe0
c0019694:	89 f0                	mov    eax,esi
c0019696:	0f b6 f0             	movzx  esi,al
c0019699:	56                   	push   esi
c001969a:	6a 06                	push   0x6
c001969c:	51                   	push   ecx
c001969d:	52                   	push   edx
c001969e:	e8 a1 ef ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196a3:	83 c4 10             	add    esp,0x10
c00196a6:	6a 00                	push   0x0
c00196a8:	6a 01                	push   0x1
c00196aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196b1:	50                   	push   eax
c00196b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196b8:	e8 87 ef ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196bd:	83 c4 10             	add    esp,0x10
c00196c0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00196c5:	75 6e                	jne    c0019735 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00196c7:	6a 00                	push   0x0
c00196c9:	6a 08                	push   0x8
c00196cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196d2:	50                   	push   eax
c00196d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196d9:	e8 66 ef ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196de:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00196e3:	50                   	push   eax
c00196e4:	6a 09                	push   0x9
c00196e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196ed:	50                   	push   eax
c00196ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196f4:	e8 4b ef ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196f9:	83 c4 20             	add    esp,0x20
c00196fc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019701:	50                   	push   eax
c0019702:	6a 0a                	push   0xa
c0019704:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001970b:	50                   	push   eax
c001970c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019712:	e8 2d ef ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019717:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001971c:	50                   	push   eax
c001971d:	6a 0b                	push   0xb
c001971f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019726:	50                   	push   eax
c0019727:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001972d:	e8 12 ef ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019732:	83 c4 20             	add    esp,0x20
c0019735:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001973a:	50                   	push   eax
c001973b:	6a 02                	push   0x2
c001973d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019744:	50                   	push   eax
c0019745:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001974b:	e8 f4 ee ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019750:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019755:	50                   	push   eax
c0019756:	6a 03                	push   0x3
c0019758:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001975f:	50                   	push   eax
c0019760:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019766:	e8 d9 ee ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001976b:	83 c4 20             	add    esp,0x20
c001976e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019773:	50                   	push   eax
c0019774:	6a 04                	push   0x4
c0019776:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001977d:	50                   	push   eax
c001977e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019784:	e8 bb ee ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019789:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001978e:	50                   	push   eax
c001978f:	6a 05                	push   0x5
c0019791:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019798:	50                   	push   eax
c0019799:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001979f:	e8 a0 ee ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197a4:	83 c4 20             	add    esp,0x20
c00197a7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00197ac:	0f 94 c0             	sete   al
c00197af:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00197b4:	74 09                	je     c00197bf <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00197b6:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00197bd:	eb 07                	jmp    c00197c6 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00197bf:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00197c6:	0f b6 c0             	movzx  eax,al
c00197c9:	50                   	push   eax
c00197ca:	6a 07                	push   0x7
c00197cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00197d3:	50                   	push   eax
c00197d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197da:	e8 65 ee ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197df:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	85 f6                	test   esi,esi
c00197e8:	0f 84 ae 00 00 00    	je     c001989c <ATA::access(unsigned long long, int, void*, bool)+0x352>
c00197ee:	50                   	push   eax
c00197ef:	6a 01                	push   0x1
c00197f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00197f8:	50                   	push   eax
c00197f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197ff:	e8 de f8 ff ff       	call   c00190e2 <IDE::polling(unsigned char, unsigned int)>
c0019804:	83 c4 10             	add    esp,0x10
c0019807:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001980d:	84 c0                	test   al,al
c001980f:	74 20                	je     c0019831 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019811:	0f b6 f8             	movzx  edi,al
c0019814:	0f b6 d2             	movzx  edx,dl
c0019817:	57                   	push   edi
c0019818:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001981f:	50                   	push   eax
c0019820:	52                   	push   edx
c0019821:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019827:	e8 06 f8 ff ff       	call   c0019032 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001982c:	e9 87 00 00 00       	jmp    c00198b8 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019831:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019836:	74 33                	je     c001986b <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019838:	31 ed                	xor    ebp,ebp
c001983a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001983e:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019842:	50                   	push   eax
c0019843:	50                   	push   eax
c0019844:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001984b:	50                   	push   eax
c001984c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019852:	e8 db ed ff ff       	call   c0018632 <IDE::getBase(unsigned char)>
c0019857:	89 c2                	mov    edx,eax
c0019859:	89 f8                	mov    eax,edi
c001985b:	66 ef                	out    dx,ax
c001985d:	45                   	inc    ebp
c001985e:	83 c4 10             	add    esp,0x10
c0019861:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019867:	75 d1                	jne    c001983a <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019869:	eb 23                	jmp    c001988e <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001986b:	0f b6 d2             	movzx  edx,dl
c001986e:	51                   	push   ecx
c001986f:	51                   	push   ecx
c0019870:	52                   	push   edx
c0019871:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019877:	e8 b6 ed ff ff       	call   c0018632 <IDE::getBase(unsigned char)>
c001987c:	b9 00 01 00 00       	mov    ecx,0x100
c0019881:	89 c2                	mov    edx,eax
c0019883:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019887:	fc                   	cld    
c0019888:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001988b:	83 c4 10             	add    esp,0x10
c001988e:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019896:	4e                   	dec    esi
c0019897:	e9 4a ff ff ff       	jmp    c00197e6 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001989c:	31 ff                	xor    edi,edi
c001989e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00198a3:	74 16                	je     c00198bb <ATA::access(unsigned long long, int, void*, bool)+0x371>
c00198a5:	50                   	push   eax
c00198a6:	50                   	push   eax
c00198a7:	31 c0                	xor    eax,eax
c00198a9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00198ae:	0f 94 c0             	sete   al
c00198b1:	50                   	push   eax
c00198b2:	53                   	push   ebx
c00198b3:	e8 fc fb ff ff       	call   c00194b4 <ATA::flush(bool)>
c00198b8:	83 c4 10             	add    esp,0x10
c00198bb:	83 c4 2c             	add    esp,0x2c
c00198be:	89 f8                	mov    eax,edi
c00198c0:	5b                   	pop    ebx
c00198c1:	5e                   	pop    esi
c00198c2:	5f                   	pop    edi
c00198c3:	5d                   	pop    ebp
c00198c4:	c3                   	ret    
c00198c5:	90                   	nop

c00198c6 <ATA::read(unsigned long long, int, void*)>:
c00198c6:	57                   	push   edi
c00198c7:	b8 04 00 00 00       	mov    eax,0x4
c00198cc:	56                   	push   esi
c00198cd:	53                   	push   ebx
c00198ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00198d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00198d6:	8d 7a ff             	lea    edi,[edx-0x1]
c00198d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198dd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00198e1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00198e7:	77 25                	ja     c001990e <ATA::read(unsigned long long, int, void*)+0x48>
c00198e9:	b8 06 00 00 00       	mov    eax,0x6
c00198ee:	85 f6                	test   esi,esi
c00198f0:	74 1c                	je     c001990e <ATA::read(unsigned long long, int, void*)+0x48>
c00198f2:	50                   	push   eax
c00198f3:	50                   	push   eax
c00198f4:	6a 00                	push   0x0
c00198f6:	56                   	push   esi
c00198f7:	52                   	push   edx
c00198f8:	53                   	push   ebx
c00198f9:	51                   	push   ecx
c00198fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198fe:	e8 47 fc ff ff       	call   c001954a <ATA::access(unsigned long long, int, void*, bool)>
c0019903:	83 c4 20             	add    esp,0x20
c0019906:	85 c0                	test   eax,eax
c0019908:	0f 95 c0             	setne  al
c001990b:	0f b6 c0             	movzx  eax,al
c001990e:	5b                   	pop    ebx
c001990f:	5e                   	pop    esi
c0019910:	5f                   	pop    edi
c0019911:	c3                   	ret    

c0019912 <ATA::write(unsigned long long, int, void*)>:
c0019912:	57                   	push   edi
c0019913:	b8 04 00 00 00       	mov    eax,0x4
c0019918:	56                   	push   esi
c0019919:	53                   	push   ebx
c001991a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001991e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019922:	8d 7a ff             	lea    edi,[edx-0x1]
c0019925:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019929:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001992d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019933:	77 25                	ja     c001995a <ATA::write(unsigned long long, int, void*)+0x48>
c0019935:	b8 06 00 00 00       	mov    eax,0x6
c001993a:	85 f6                	test   esi,esi
c001993c:	74 1c                	je     c001995a <ATA::write(unsigned long long, int, void*)+0x48>
c001993e:	50                   	push   eax
c001993f:	50                   	push   eax
c0019940:	6a 01                	push   0x1
c0019942:	56                   	push   esi
c0019943:	52                   	push   edx
c0019944:	53                   	push   ebx
c0019945:	51                   	push   ecx
c0019946:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001994a:	e8 fb fb ff ff       	call   c001954a <ATA::access(unsigned long long, int, void*, bool)>
c001994f:	83 c4 20             	add    esp,0x20
c0019952:	85 c0                	test   eax,eax
c0019954:	0f 95 c0             	setne  al
c0019957:	0f b6 c0             	movzx  eax,al
c001995a:	5b                   	pop    ebx
c001995b:	5e                   	pop    esi
c001995c:	5f                   	pop    edi
c001995d:	c3                   	ret    

c001995e <ATA::detectCHS()>:
c001995e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019962:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019968:	c1 e0 06             	shl    eax,0x6
c001996b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019971:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001997b:	c7 44 24 04 f0 e9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e9f0
c0019983:	e9 df 5b ff ff       	jmp    c000f567 <Krnl::panic(char const*)>

c0019988 <ATA::open(int, int, void*)>:
c0019988:	53                   	push   ebx
c0019989:	83 ec 08             	sub    esp,0x8
c001998c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019994:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019998:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001999e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00199a4:	c1 e0 06             	shl    eax,0x6
c00199a7:	01 d0                	add    eax,edx
c00199a9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00199b0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00199b6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00199bd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00199c7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00199cd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00199d4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00199db:	75 0c                	jne    c00199e9 <ATA::open(int, int, void*)+0x61>
c00199dd:	83 ec 0c             	sub    esp,0xc
c00199e0:	53                   	push   ebx
c00199e1:	e8 78 ff ff ff       	call   c001995e <ATA::detectCHS()>
c00199e6:	83 c4 10             	add    esp,0x10
c00199e9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00199ef:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00199f5:	c1 e0 06             	shl    eax,0x6
c00199f8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00199ff:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019a09:	d1 e8                	shr    eax,1
c0019a0b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019a11:	6a 04                	push   0x4
c0019a13:	6a 0c                	push   0xc
c0019a15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a1c:	50                   	push   eax
c0019a1d:	52                   	push   edx
c0019a1e:	e8 21 ec ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a23:	90                   	nop
c0019a24:	90                   	nop
c0019a25:	6a 00                	push   0x0
c0019a27:	6a 0c                	push   0xc
c0019a29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a30:	50                   	push   eax
c0019a31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a37:	e8 08 ec ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a3c:	83 c4 14             	add    esp,0x14
c0019a3f:	53                   	push   ebx
c0019a40:	e8 45 18 ff ff       	call   c000b28a <PhysicalDisk::startCache()>
c0019a45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a48:	e8 b5 28 ff ff       	call   c000c302 <createPartitionsForDisk(PhysicalDisk*)>
c0019a4d:	31 c0                	xor    eax,eax
c0019a4f:	83 c4 18             	add    esp,0x18
c0019a52:	5b                   	pop    ebx
c0019a53:	c3                   	ret    

c0019a54 <ATAPI::write(unsigned long long, int, void*)>:
c0019a54:	b8 03 00 00 00       	mov    eax,0x3
c0019a59:	c3                   	ret    

c0019a5a <ATAPI::close(int, int, void*)>:
c0019a5a:	83 ec 0c             	sub    esp,0xc
c0019a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a61:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019a67:	85 c0                	test   eax,eax
c0019a69:	74 0c                	je     c0019a77 <ATAPI::close(int, int, void*)+0x1d>
c0019a6b:	83 ec 0c             	sub    esp,0xc
c0019a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a70:	50                   	push   eax
c0019a71:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	31 c0                	xor    eax,eax
c0019a79:	83 c4 0c             	add    esp,0xc
c0019a7c:	c3                   	ret    
c0019a7d:	90                   	nop

c0019a7e <ATAPI::ATAPI()>:
c0019a7e:	83 ec 0c             	sub    esp,0xc
c0019a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a85:	83 ec 04             	sub    esp,0x4
c0019a88:	68 00 08 00 00       	push   0x800
c0019a8d:	68 39 eb 01 c0       	push   0xc001eb39
c0019a92:	50                   	push   eax
c0019a93:	e8 8a 17 ff ff       	call   c000b222 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019a98:	83 c4 10             	add    esp,0x10
c0019a9b:	ba 54 ea 01 c0       	mov    edx,0xc001ea54
c0019aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aa4:	89 10                	mov    DWORD PTR [eax],edx
c0019aa6:	90                   	nop
c0019aa7:	83 c4 0c             	add    esp,0xc
c0019aaa:	c3                   	ret    
c0019aab:	90                   	nop

c0019aac <ATAPI::readyForCommand()>:
c0019aac:	56                   	push   esi
c0019aad:	53                   	push   ebx
c0019aae:	53                   	push   ebx
c0019aaf:	31 db                	xor    ebx,ebx
c0019ab1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ab5:	51                   	push   ecx
c0019ab6:	6a 0c                	push   0xc
c0019ab8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019abf:	50                   	push   eax
c0019ac0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019ac6:	e8 39 ec ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0019acb:	83 c4 10             	add    esp,0x10
c0019ace:	a8 88                	test   al,0x88
c0019ad0:	74 25                	je     c0019af7 <ATAPI::readyForCommand()+0x4b>
c0019ad2:	43                   	inc    ebx
c0019ad3:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019ad9:	7e da                	jle    c0019ab5 <ATAPI::readyForCommand()+0x9>
c0019adb:	83 ec 0c             	sub    esp,0xc
c0019ade:	68 5e 01 00 00       	push   0x15e
c0019ae3:	e8 60 92 ff ff       	call   c0012d48 <milliTenthSleep(unsigned int)>
c0019ae8:	83 c4 10             	add    esp,0x10
c0019aeb:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019af1:	75 c2                	jne    c0019ab5 <ATAPI::readyForCommand()+0x9>
c0019af3:	31 c0                	xor    eax,eax
c0019af5:	eb 02                	jmp    c0019af9 <ATAPI::readyForCommand()+0x4d>
c0019af7:	b0 01                	mov    al,0x1
c0019af9:	5a                   	pop    edx
c0019afa:	5b                   	pop    ebx
c0019afb:	5e                   	pop    esi
c0019afc:	c3                   	ret    
c0019afd:	90                   	nop

c0019afe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019afe:	55                   	push   ebp
c0019aff:	57                   	push   edi
c0019b00:	56                   	push   esi
c0019b01:	53                   	push   ebx
c0019b02:	83 ec 20             	sub    esp,0x20
c0019b05:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019b09:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019b0d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019b11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019b15:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019b19:	6a 01                	push   0x1
c0019b1b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b22:	50                   	push   eax
c0019b23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b29:	e8 24 ed ff ff       	call   c0018852 <IDE::enableIRQs(unsigned char, bool)>
c0019b2e:	5e                   	pop    esi
c0019b2f:	58                   	pop    eax
c0019b30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b37:	50                   	push   eax
c0019b38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b3e:	e8 db ea ff ff       	call   c001861e <IDE::prepareInterrupt(unsigned char)>
c0019b43:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b46:	e8 61 ff ff ff       	call   c0019aac <ATAPI::readyForCommand()>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	84 c0                	test   al,al
c0019b50:	75 0a                	jne    c0019b5c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0019b52:	bb 01 00 00 00       	mov    ebx,0x1
c0019b57:	e9 57 02 00 00       	jmp    c0019db3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019b5c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0019b62:	c1 e0 04             	shl    eax,0x4
c0019b65:	0f b6 c0             	movzx  eax,al
c0019b68:	50                   	push   eax
c0019b69:	6a 06                	push   0x6
c0019b6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b72:	50                   	push   eax
c0019b73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b79:	e8 c6 ea ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b7e:	6a 00                	push   0x0
c0019b80:	6a 01                	push   0x1
c0019b82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b89:	50                   	push   eax
c0019b8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b90:	e8 af ea ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b95:	83 c4 20             	add    esp,0x20
c0019b98:	0f b6 c3             	movzx  eax,bl
c0019b9b:	0f b6 df             	movzx  ebx,bh
c0019b9e:	50                   	push   eax
c0019b9f:	6a 04                	push   0x4
c0019ba1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ba8:	50                   	push   eax
c0019ba9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019baf:	e8 90 ea ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bb4:	53                   	push   ebx
c0019bb5:	6a 05                	push   0x5
c0019bb7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bbe:	50                   	push   eax
c0019bbf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019bc5:	e8 7a ea ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bca:	83 c4 20             	add    esp,0x20
c0019bcd:	68 a0 00 00 00       	push   0xa0
c0019bd2:	6a 07                	push   0x7
c0019bd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bdb:	50                   	push   eax
c0019bdc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019be2:	e8 5d ea ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019be7:	83 c4 0c             	add    esp,0xc
c0019bea:	6a 01                	push   0x1
c0019bec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bf3:	50                   	push   eax
c0019bf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019bfa:	e8 e3 f4 ff ff       	call   c00190e2 <IDE::polling(unsigned char, unsigned int)>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0019c08:	84 c0                	test   al,al
c0019c0a:	74 23                	je     c0019c2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0019c0c:	0f b6 d8             	movzx  ebx,al
c0019c0f:	0f b6 d2             	movzx  edx,dl
c0019c12:	53                   	push   ebx
c0019c13:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0019c1a:	50                   	push   eax
c0019c1b:	52                   	push   edx
c0019c1c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c22:	e8 0b f4 ff ff       	call   c0019032 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	e9 84 01 00 00       	jmp    c0019db3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019c2f:	0f b6 d2             	movzx  edx,dl
c0019c32:	53                   	push   ebx
c0019c33:	53                   	push   ebx
c0019c34:	52                   	push   edx
c0019c35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c3b:	e8 f2 e9 ff ff       	call   c0018632 <IDE::getBase(unsigned char)>
c0019c40:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019c44:	b9 06 00 00 00       	mov    ecx,0x6
c0019c49:	89 c2                	mov    edx,eax
c0019c4b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0019c4e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019c52:	83 c4 10             	add    esp,0x10
c0019c55:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019c5b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019c62:	85 db                	test   ebx,ebx
c0019c64:	0f 84 ec 00 00 00    	je     c0019d56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0019c6a:	51                   	push   ecx
c0019c6b:	51                   	push   ecx
c0019c6c:	52                   	push   edx
c0019c6d:	50                   	push   eax
c0019c6e:	e8 3f eb ff ff       	call   c00187b2 <IDE::waitInterrupt(unsigned char)>
c0019c73:	83 c4 10             	add    esp,0x10
c0019c76:	84 c0                	test   al,al
c0019c78:	0f 84 d4 fe ff ff    	je     c0019b52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019c7e:	56                   	push   esi
c0019c7f:	56                   	push   esi
c0019c80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c87:	50                   	push   eax
c0019c88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c8e:	e8 8b e9 ff ff       	call   c001861e <IDE::prepareInterrupt(unsigned char)>
c0019c93:	83 c4 0c             	add    esp,0xc
c0019c96:	6a 04                	push   0x4
c0019c98:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c9f:	50                   	push   eax
c0019ca0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ca6:	e8 59 ea ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0019cab:	83 c4 0c             	add    esp,0xc
c0019cae:	89 c6                	mov    esi,eax
c0019cb0:	6a 05                	push   0x5
c0019cb2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019cb9:	50                   	push   eax
c0019cba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019cc0:	e8 3f ea ff ff       	call   c0018704 <IDE::read(unsigned char, unsigned char)>
c0019cc5:	89 f1                	mov    ecx,esi
c0019cc7:	0f b6 c0             	movzx  eax,al
c0019cca:	0f b6 f1             	movzx  esi,cl
c0019ccd:	c1 e0 08             	shl    eax,0x8
c0019cd0:	09 c6                	or     esi,eax
c0019cd2:	d1 fe                	sar    esi,1
c0019cd4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0019cd8:	83 c4 10             	add    esp,0x10
c0019cdb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019ce0:	74 41                	je     c0019d23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0019ce2:	31 c9                	xor    ecx,ecx
c0019ce4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019cea:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019cf1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0019cf5:	75 0a                	jne    c0019d01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0019cf7:	01 c9                	add    ecx,ecx
c0019cf9:	01 cd                	add    ebp,ecx
c0019cfb:	4b                   	dec    ebx
c0019cfc:	e9 54 ff ff ff       	jmp    c0019c55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0019d01:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0019d06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019d0a:	51                   	push   ecx
c0019d0b:	51                   	push   ecx
c0019d0c:	52                   	push   edx
c0019d0d:	50                   	push   eax
c0019d0e:	e8 1f e9 ff ff       	call   c0018632 <IDE::getBase(unsigned char)>
c0019d13:	89 c2                	mov    edx,eax
c0019d15:	89 f0                	mov    eax,esi
c0019d17:	66 ef                	out    dx,ax
c0019d19:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d1d:	83 c4 10             	add    esp,0x10
c0019d20:	41                   	inc    ecx
c0019d21:	eb c1                	jmp    c0019ce4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0019d23:	31 f6                	xor    esi,esi
c0019d25:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019d2b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019d32:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0019d36:	75 06                	jne    c0019d3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0019d38:	01 f6                	add    esi,esi
c0019d3a:	01 f5                	add    ebp,esi
c0019d3c:	eb bd                	jmp    c0019cfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0019d3e:	51                   	push   ecx
c0019d3f:	51                   	push   ecx
c0019d40:	52                   	push   edx
c0019d41:	50                   	push   eax
c0019d42:	e8 eb e8 ff ff       	call   c0018632 <IDE::getBase(unsigned char)>
c0019d47:	89 c2                	mov    edx,eax
c0019d49:	66 ed                	in     ax,dx
c0019d4b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0019d50:	83 c4 10             	add    esp,0x10
c0019d53:	46                   	inc    esi
c0019d54:	eb cf                	jmp    c0019d25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0019d56:	51                   	push   ecx
c0019d57:	51                   	push   ecx
c0019d58:	52                   	push   edx
c0019d59:	50                   	push   eax
c0019d5a:	e8 53 ea ff ff       	call   c00187b2 <IDE::waitInterrupt(unsigned char)>
c0019d5f:	83 c4 10             	add    esp,0x10
c0019d62:	84 c0                	test   al,al
c0019d64:	0f 84 e8 fd ff ff    	je     c0019b52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019d6a:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019d6f:	52                   	push   edx
c0019d70:	52                   	push   edx
c0019d71:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019d78:	50                   	push   eax
c0019d79:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019d7f:	e8 9a e8 ff ff       	call   c001861e <IDE::prepareInterrupt(unsigned char)>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	50                   	push   eax
c0019d88:	50                   	push   eax
c0019d89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019d90:	50                   	push   eax
c0019d91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019d97:	e8 96 e8 ff ff       	call   c0018632 <IDE::getBase(unsigned char)>
c0019d9c:	8d 50 07             	lea    edx,[eax+0x7]
c0019d9f:	ec                   	in     al,dx
c0019da0:	83 c4 10             	add    esp,0x10
c0019da3:	a8 88                	test   al,0x88
c0019da5:	74 0a                	je     c0019db1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0019da7:	4b                   	dec    ebx
c0019da8:	75 dd                	jne    c0019d87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0019daa:	bb 02 00 00 00       	mov    ebx,0x2
c0019daf:	eb 02                	jmp    c0019db3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019db1:	31 db                	xor    ebx,ebx
c0019db3:	83 c4 1c             	add    esp,0x1c
c0019db6:	89 d8                	mov    eax,ebx
c0019db8:	5b                   	pop    ebx
c0019db9:	5e                   	pop    esi
c0019dba:	5f                   	pop    edi
c0019dbb:	5d                   	pop    ebp
c0019dbc:	c3                   	ret    
c0019dbd:	90                   	nop

c0019dbe <ATAPI::diskRemoved()>:
c0019dbe:	53                   	push   ebx
c0019dbf:	83 ec 14             	sub    esp,0x14
c0019dc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019dc6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019dcd:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0019dd3:	e8 aa 22 ff ff       	call   c000c082 <LogicalDisk::unmount()>
c0019dd8:	58                   	pop    eax
c0019dd9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019ddf:	e8 e4 2b ff ff       	call   c000c9c8 <VCache::writeWriteBuffer()>
c0019de4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019dea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019dee:	83 c4 18             	add    esp,0x18
c0019df1:	5b                   	pop    ebx
c0019df2:	e9 c1 2b ff ff       	jmp    c000c9b8 <VCache::invalidateReadBuffer()>
c0019df7:	90                   	nop

c0019df8 <ATAPI::eject()>:
c0019df8:	57                   	push   edi
c0019df9:	b9 03 00 00 00       	mov    ecx,0x3
c0019dfe:	53                   	push   ebx
c0019dff:	83 ec 14             	sub    esp,0x14
c0019e02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e06:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019e0a:	fc                   	cld    
c0019e0b:	31 c0                	xor    eax,eax
c0019e0d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019e0f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0019e14:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0019e19:	50                   	push   eax
c0019e1a:	50                   	push   eax
c0019e1b:	6a 00                	push   0x0
c0019e1d:	6a 00                	push   0x0
c0019e1f:	6a 00                	push   0x0
c0019e21:	6a 02                	push   0x2
c0019e23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019e27:	50                   	push   eax
c0019e28:	53                   	push   ebx
c0019e29:	e8 d0 fc ff ff       	call   c0019afe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019e2e:	83 c4 14             	add    esp,0x14
c0019e31:	53                   	push   ebx
c0019e32:	e8 87 ff ff ff       	call   c0019dbe <ATAPI::diskRemoved()>
c0019e37:	83 c4 24             	add    esp,0x24
c0019e3a:	31 c0                	xor    eax,eax
c0019e3c:	5b                   	pop    ebx
c0019e3d:	5f                   	pop    edi
c0019e3e:	c3                   	ret    
c0019e3f:	90                   	nop

c0019e40 <ATAPI::diskInserted()>:
c0019e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e44:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0019e4b:	c3                   	ret    

c0019e4c <ATAPI::detectMedia()>:
c0019e4c:	56                   	push   esi
c0019e4d:	53                   	push   ebx
c0019e4e:	83 ec 28             	sub    esp,0x28
c0019e51:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019e55:	6a 0c                	push   0xc
c0019e57:	6a 00                	push   0x0
c0019e59:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0019e5d:	56                   	push   esi
c0019e5e:	e8 8d 66 fe ff       	call   c00004f0 <memset>
c0019e63:	58                   	pop    eax
c0019e64:	5a                   	pop    edx
c0019e65:	6a 00                	push   0x0
c0019e67:	6a 00                	push   0x0
c0019e69:	6a 00                	push   0x0
c0019e6b:	6a 00                	push   0x0
c0019e6d:	56                   	push   esi
c0019e6e:	53                   	push   ebx
c0019e6f:	e8 8a fc ff ff       	call   c0019afe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019e74:	83 c4 1c             	add    esp,0x1c
c0019e77:	6a 0c                	push   0xc
c0019e79:	6a 00                	push   0x0
c0019e7b:	56                   	push   esi
c0019e7c:	e8 6f 66 fe ff       	call   c00004f0 <memset>
c0019e81:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0019e86:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0019e8b:	59                   	pop    ecx
c0019e8c:	58                   	pop    eax
c0019e8d:	6a 01                	push   0x1
c0019e8f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0019e93:	50                   	push   eax
c0019e94:	6a 00                	push   0x0
c0019e96:	6a 12                	push   0x12
c0019e98:	56                   	push   esi
c0019e99:	53                   	push   ebx
c0019e9a:	e8 5f fc ff ff       	call   c0019afe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019e9f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0019ea3:	83 c4 20             	add    esp,0x20
c0019ea6:	83 e0 7f             	and    eax,0x7f
c0019ea9:	3c 70                	cmp    al,0x70
c0019eab:	74 15                	je     c0019ec2 <ATAPI::detectMedia()+0x76>
c0019ead:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019eb4:	75 0c                	jne    c0019ec2 <ATAPI::detectMedia()+0x76>
c0019eb6:	83 ec 0c             	sub    esp,0xc
c0019eb9:	53                   	push   ebx
c0019eba:	e8 81 ff ff ff       	call   c0019e40 <ATAPI::diskInserted()>
c0019ebf:	83 c4 10             	add    esp,0x10
c0019ec2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019ec6:	83 e0 0f             	and    eax,0xf
c0019ec9:	3c 02                	cmp    al,0x2
c0019ecb:	75 1b                	jne    c0019ee8 <ATAPI::detectMedia()+0x9c>
c0019ecd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0019ed2:	75 2d                	jne    c0019f01 <ATAPI::detectMedia()+0xb5>
c0019ed4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019edb:	74 24                	je     c0019f01 <ATAPI::detectMedia()+0xb5>
c0019edd:	83 ec 0c             	sub    esp,0xc
c0019ee0:	53                   	push   ebx
c0019ee1:	e8 d8 fe ff ff       	call   c0019dbe <ATAPI::diskRemoved()>
c0019ee6:	eb 16                	jmp    c0019efe <ATAPI::detectMedia()+0xb2>
c0019ee8:	84 c0                	test   al,al
c0019eea:	75 15                	jne    c0019f01 <ATAPI::detectMedia()+0xb5>
c0019eec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019ef3:	75 0c                	jne    c0019f01 <ATAPI::detectMedia()+0xb5>
c0019ef5:	83 ec 0c             	sub    esp,0xc
c0019ef8:	53                   	push   ebx
c0019ef9:	e8 42 ff ff ff       	call   c0019e40 <ATAPI::diskInserted()>
c0019efe:	83 c4 10             	add    esp,0x10
c0019f01:	83 c4 24             	add    esp,0x24
c0019f04:	5b                   	pop    ebx
c0019f05:	5e                   	pop    esi
c0019f06:	c3                   	ret    
c0019f07:	90                   	nop

c0019f08 <ATAPI::open(int, int, void*)>:
c0019f08:	56                   	push   esi
c0019f09:	53                   	push   ebx
c0019f0a:	50                   	push   eax
c0019f0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f17:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019f1d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019f23:	c1 e0 06             	shl    eax,0x6
c0019f26:	01 d0                	add    eax,edx
c0019f28:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0019f2f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0019f35:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0019f3c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0019f46:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019f4c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0019f53:	6a 04                	push   0x4
c0019f55:	6a 0c                	push   0xc
c0019f57:	51                   	push   ecx
c0019f58:	52                   	push   edx
c0019f59:	e8 e6 e6 ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f5e:	90                   	nop
c0019f5f:	90                   	nop
c0019f60:	6a 00                	push   0x0
c0019f62:	6a 0c                	push   0xc
c0019f64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f6b:	50                   	push   eax
c0019f6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f72:	e8 cd e6 ff ff       	call   c0018644 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f77:	83 c4 14             	add    esp,0x14
c0019f7a:	68 74 01 00 00       	push   0x174
c0019f7f:	e8 cd cc fe ff       	call   c0006c51 <malloc>
c0019f84:	83 c4 0c             	add    esp,0xc
c0019f87:	89 c6                	mov    esi,eax
c0019f89:	6a 00                	push   0x0
c0019f8b:	68 ff ff ff 7f       	push   0x7fffffff
c0019f90:	6a 00                	push   0x0
c0019f92:	6a 00                	push   0x0
c0019f94:	53                   	push   ebx
c0019f95:	68 22 ec 01 c0       	push   0xc001ec22
c0019f9a:	50                   	push   eax
c0019f9b:	e8 2e 1f ff ff       	call   c000bece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0019fa0:	83 c4 14             	add    esp,0x14
c0019fa3:	56                   	push   esi
c0019fa4:	e8 db 1f ff ff       	call   c000bf84 <LogicalDisk::assignDriveLetter()>
c0019fa9:	5a                   	pop    edx
c0019faa:	0f be c0             	movsx  eax,al
c0019fad:	59                   	pop    ecx
c0019fae:	50                   	push   eax
c0019faf:	68 3c ea 01 c0       	push   0xc001ea3c
c0019fb4:	e8 5b fa fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c0019fb9:	58                   	pop    eax
c0019fba:	5a                   	pop    edx
c0019fbb:	56                   	push   esi
c0019fbc:	53                   	push   ebx
c0019fbd:	e8 92 0e ff ff       	call   c000ae54 <Device::addChild(Device*)>
c0019fc2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0019fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fcb:	e8 ba 12 ff ff       	call   c000b28a <PhysicalDisk::startCache()>
c0019fd0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019fd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fda:	e8 6d fe ff ff       	call   c0019e4c <ATAPI::detectMedia()>
c0019fdf:	83 c4 14             	add    esp,0x14
c0019fe2:	31 c0                	xor    eax,eax
c0019fe4:	5b                   	pop    ebx
c0019fe5:	5e                   	pop    esi
c0019fe6:	c3                   	ret    
c0019fe7:	90                   	nop

c0019fe8 <ATAPI::read(unsigned long long, int, void*)>:
c0019fe8:	55                   	push   ebp
c0019fe9:	57                   	push   edi
c0019fea:	56                   	push   esi
c0019feb:	53                   	push   ebx
c0019fec:	83 ec 1c             	sub    esp,0x1c
c0019fef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019ff3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ff7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019ffb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a002:	74 3c                	je     c001a040 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a004:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a008:	b9 03 00 00 00       	mov    ecx,0x3
c001a00d:	fc                   	cld    
c001a00e:	31 c0                	xor    eax,eax
c001a010:	0f ce                	bswap  esi
c001a012:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a014:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a019:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a01d:	89 e8                	mov    eax,ebp
c001a01f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a023:	50                   	push   eax
c001a024:	50                   	push   eax
c001a025:	55                   	push   ebp
c001a026:	c1 e5 0b             	shl    ebp,0xb
c001a029:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a02d:	6a 00                	push   0x0
c001a02f:	55                   	push   ebp
c001a030:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a034:	50                   	push   eax
c001a035:	53                   	push   ebx
c001a036:	e8 c3 fa ff ff       	call   c0019afe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a03b:	83 c4 20             	add    esp,0x20
c001a03e:	eb 1a                	jmp    c001a05a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a040:	83 ec 0c             	sub    esp,0xc
c001a043:	53                   	push   ebx
c001a044:	e8 03 fe ff ff       	call   c0019e4c <ATAPI::detectMedia()>
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a053:	75 af                	jne    c001a004 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a055:	b8 02 00 00 00       	mov    eax,0x2
c001a05a:	83 c4 1c             	add    esp,0x1c
c001a05d:	5b                   	pop    ebx
c001a05e:	5e                   	pop    esi
c001a05f:	5f                   	pop    edi
c001a060:	5d                   	pop    ebp
c001a061:	c3                   	ret    

c001a062 <SATA::close(int, int, void*)>:
c001a062:	83 ec 0c             	sub    esp,0xc
c001a065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a069:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a06f:	85 c0                	test   eax,eax
c001a071:	74 0c                	je     c001a07f <SATA::close(int, int, void*)+0x1d>
c001a073:	83 ec 0c             	sub    esp,0xc
c001a076:	8b 10                	mov    edx,DWORD PTR [eax]
c001a078:	50                   	push   eax
c001a079:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a07c:	83 c4 10             	add    esp,0x10
c001a07f:	31 c0                	xor    eax,eax
c001a081:	83 c4 0c             	add    esp,0xc
c001a084:	c3                   	ret    
c001a085:	90                   	nop

c001a086 <SATA::powerSaving(PowerSavingLevel)>:
c001a086:	c3                   	ret    
c001a087:	90                   	nop

c001a088 <SATA::open(int, int, void*)>:
c001a088:	56                   	push   esi
c001a089:	53                   	push   ebx
c001a08a:	50                   	push   eax
c001a08b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a08f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a093:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a09d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a0a3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a0ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0b1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a0bb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a0c1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a0c8:	e8 51 cf fe ff       	call   c000701e <Phys::allocatePage()>
c001a0cd:	89 c6                	mov    esi,eax
c001a0cf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a0d5:	81 c6 00 10 00 00    	add    esi,0x1000
c001a0db:	e8 3e cf fe ff       	call   c000701e <Phys::allocatePage()>
c001a0e0:	39 c6                	cmp    esi,eax
c001a0e2:	74 10                	je     c001a0f4 <SATA::open(int, int, void*)+0x6c>
c001a0e4:	83 ec 0c             	sub    esp,0xc
c001a0e7:	68 84 ea 01 c0       	push   0xc001ea84
c001a0ec:	e8 76 54 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	83 ec 0c             	sub    esp,0xc
c001a0f7:	6a 02                	push   0x2
c001a0f9:	e8 8f e6 fe ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c001a0fe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a104:	6a 03                	push   0x3
c001a106:	50                   	push   eax
c001a107:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a10d:	ff 35 94 f6 01 c0    	push   DWORD PTR ds:0xc001f694
c001a113:	e8 ce ec fe ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a118:	83 c4 14             	add    esp,0x14
c001a11b:	53                   	push   ebx
c001a11c:	e8 69 11 ff ff       	call   c000b28a <PhysicalDisk::startCache()>
c001a121:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a124:	e8 d9 21 ff ff       	call   c000c302 <createPartitionsForDisk(PhysicalDisk*)>
c001a129:	83 c4 14             	add    esp,0x14
c001a12c:	31 c0                	xor    eax,eax
c001a12e:	5b                   	pop    ebx
c001a12f:	5e                   	pop    esi
c001a130:	c3                   	ret    
c001a131:	90                   	nop

c001a132 <SATA::SATA()>:
c001a132:	83 ec 0c             	sub    esp,0xc
c001a135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a139:	83 ec 04             	sub    esp,0x4
c001a13c:	68 00 02 00 00       	push   0x200
c001a141:	68 98 ea 01 c0       	push   0xc001ea98
c001a146:	50                   	push   eax
c001a147:	e8 d6 10 ff ff       	call   c000b222 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	ba 08 eb 01 c0       	mov    edx,0xc001eb08
c001a154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a158:	89 10                	mov    DWORD PTR [eax],edx
c001a15a:	90                   	nop
c001a15b:	83 c4 0c             	add    esp,0xc
c001a15e:	c3                   	ret    
c001a15f:	90                   	nop

c001a160 <SATA::access(unsigned long long, int, void*, bool)>:
c001a160:	55                   	push   ebp
c001a161:	57                   	push   edi
c001a162:	56                   	push   esi
c001a163:	53                   	push   ebx
c001a164:	83 ec 2c             	sub    esp,0x2c
c001a167:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a16b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a16f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a173:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a177:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a17b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a180:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a184:	7e 10                	jle    c001a196 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a186:	83 ec 0c             	sub    esp,0xc
c001a189:	68 a8 ea 01 c0       	push   0xc001eaa8
c001a18e:	e8 d4 53 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a19c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a1a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a1a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1ac:	89 d0                	mov    eax,edx
c001a1ae:	c1 e0 07             	shl    eax,0x7
c001a1b1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a1b5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a1bf:	51                   	push   ecx
c001a1c0:	8d 42 02             	lea    eax,[edx+0x2]
c001a1c3:	51                   	push   ecx
c001a1c4:	c1 e0 07             	shl    eax,0x7
c001a1c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1cb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a1cf:	50                   	push   eax
c001a1d0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a1d6:	e8 f1 ef ff ff       	call   c00191cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a1db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a1df:	83 c4 10             	add    esp,0x10
c001a1e2:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a1e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1eb:	0f 84 4f 01 00 00    	je     c001a340 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a1f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a1f5:	c1 e0 09             	shl    eax,0x9
c001a1f8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a1fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a201:	74 0e                	je     c001a211 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a203:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a209:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a20d:	89 c1                	mov    ecx,eax
c001a20f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a215:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a21b:	8d 42 02             	lea    eax,[edx+0x2]
c001a21e:	c1 e0 07             	shl    eax,0x7
c001a221:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a225:	8b 00                	mov    eax,DWORD PTR [eax]
c001a227:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a22d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a233:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a237:	c1 e1 05             	shl    ecx,0x5
c001a23a:	01 c8                	add    eax,ecx
c001a23c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a240:	83 e1 01             	and    ecx,0x1
c001a243:	89 ce                	mov    esi,ecx
c001a245:	8a 08                	mov    cl,BYTE PTR [eax]
c001a247:	c1 e6 06             	shl    esi,0x6
c001a24a:	83 e1 bf             	and    ecx,0xffffffbf
c001a24d:	09 f1                	or     ecx,esi
c001a24f:	88 08                	mov    BYTE PTR [eax],cl
c001a251:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a253:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a259:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a25f:	89 08                	mov    DWORD PTR [eax],ecx
c001a261:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a267:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a26d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a273:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a276:	50                   	push   eax
c001a277:	68 90 00 00 00       	push   0x90
c001a27c:	6a 00                	push   0x0
c001a27e:	56                   	push   esi
c001a27f:	e8 6c 62 fe ff       	call   c00004f0 <memset>
c001a284:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a28a:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a28e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a294:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a298:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a29c:	83 c4 10             	add    esp,0x10
c001a29f:	48                   	dec    eax
c001a2a0:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a2a5:	89 c1                	mov    ecx,eax
c001a2a7:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a2ad:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a2b2:	09 c8                	or     eax,ecx
c001a2b4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a2ba:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a2bd:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a2c4:	66 25 00 7f          	and    ax,0x7f00
c001a2c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2cc:	66 0d 27 80          	or     ax,0x8027
c001a2d0:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a2d5:	66 89 06             	mov    WORD PTR [esi],ax
c001a2d8:	19 c0                	sbb    eax,eax
c001a2da:	83 e0 f0             	and    eax,0xfffffff0
c001a2dd:	83 c0 35             	add    eax,0x35
c001a2e0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a2e3:	89 e8                	mov    eax,ebp
c001a2e5:	c1 e8 10             	shr    eax,0x10
c001a2e8:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a2eb:	89 e8                	mov    eax,ebp
c001a2ed:	c1 e8 18             	shr    eax,0x18
c001a2f0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a2f3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a2f7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a2fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2fe:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a301:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a305:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a309:	89 d6                	mov    esi,edx
c001a30b:	31 c0                	xor    eax,eax
c001a30d:	c1 e6 07             	shl    esi,0x7
c001a310:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a314:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a31a:	80 e1 88             	and    cl,0x88
c001a31d:	74 0a                	je     c001a329 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a31f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a324:	74 0a                	je     c001a330 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a326:	40                   	inc    eax
c001a327:	eb eb                	jmp    c001a314 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a329:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a32e:	75 17                	jne    c001a347 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a330:	83 ec 0c             	sub    esp,0xc
c001a333:	68 e1 ea 01 c0       	push   0xc001eae1
c001a338:	e8 d7 f6 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a33d:	83 c4 10             	add    esp,0x10
c001a340:	b8 01 00 00 00       	mov    eax,0x1
c001a345:	eb 5d                	jmp    c001a3a4 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a347:	b8 01 00 00 00       	mov    eax,0x1
c001a34c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a350:	c1 e2 07             	shl    edx,0x7
c001a353:	d3 e0                	shl    eax,cl
c001a355:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a359:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a35f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a365:	85 c8                	test   eax,ecx
c001a367:	74 16                	je     c001a37f <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a369:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a36f:	0f ba e1 1e          	bt     ecx,0x1e
c001a373:	73 ea                	jae    c001a35f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a375:	83 ec 0c             	sub    esp,0xc
c001a378:	68 ef ea 01 c0       	push   0xc001eaef
c001a37d:	eb b9                	jmp    c001a338 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a37f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a385:	0f ba e0 1e          	bt     eax,0x1e
c001a389:	72 b5                	jb     c001a340 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a38b:	31 c0                	xor    eax,eax
c001a38d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a392:	75 10                	jne    c001a3a4 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a394:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a39a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a39e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3a4:	83 c4 2c             	add    esp,0x2c
c001a3a7:	5b                   	pop    ebx
c001a3a8:	5e                   	pop    esi
c001a3a9:	5f                   	pop    edi
c001a3aa:	5d                   	pop    ebp
c001a3ab:	c3                   	ret    

c001a3ac <SATA::read(unsigned long long, int, void*)>:
c001a3ac:	57                   	push   edi
c001a3ad:	b8 04 00 00 00       	mov    eax,0x4
c001a3b2:	56                   	push   esi
c001a3b3:	53                   	push   ebx
c001a3b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3bc:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3c3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3c7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3cd:	77 25                	ja     c001a3f4 <SATA::read(unsigned long long, int, void*)+0x48>
c001a3cf:	b8 06 00 00 00       	mov    eax,0x6
c001a3d4:	85 f6                	test   esi,esi
c001a3d6:	74 1c                	je     c001a3f4 <SATA::read(unsigned long long, int, void*)+0x48>
c001a3d8:	50                   	push   eax
c001a3d9:	50                   	push   eax
c001a3da:	6a 00                	push   0x0
c001a3dc:	56                   	push   esi
c001a3dd:	52                   	push   edx
c001a3de:	53                   	push   ebx
c001a3df:	51                   	push   ecx
c001a3e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e4:	e8 77 fd ff ff       	call   c001a160 <SATA::access(unsigned long long, int, void*, bool)>
c001a3e9:	83 c4 20             	add    esp,0x20
c001a3ec:	85 c0                	test   eax,eax
c001a3ee:	0f 95 c0             	setne  al
c001a3f1:	0f b6 c0             	movzx  eax,al
c001a3f4:	5b                   	pop    ebx
c001a3f5:	5e                   	pop    esi
c001a3f6:	5f                   	pop    edi
c001a3f7:	c3                   	ret    

c001a3f8 <SATA::write(unsigned long long, int, void*)>:
c001a3f8:	55                   	push   ebp
c001a3f9:	b8 04 00 00 00       	mov    eax,0x4
c001a3fe:	57                   	push   edi
c001a3ff:	56                   	push   esi
c001a400:	53                   	push   ebx
c001a401:	83 ec 0c             	sub    esp,0xc
c001a404:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a408:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a40c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a40f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a413:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a417:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a41d:	77 3d                	ja     c001a45c <SATA::write(unsigned long long, int, void*)+0x64>
c001a41f:	b8 06 00 00 00       	mov    eax,0x6
c001a424:	85 ed                	test   ebp,ebp
c001a426:	74 34                	je     c001a45c <SATA::write(unsigned long long, int, void*)+0x64>
c001a428:	c1 e3 09             	shl    ebx,0x9
c001a42b:	01 eb                	add    ebx,ebp
c001a42d:	89 d6                	mov    esi,edx
c001a42f:	89 cf                	mov    edi,ecx
c001a431:	83 c6 01             	add    esi,0x1
c001a434:	83 d7 00             	adc    edi,0x0
c001a437:	50                   	push   eax
c001a438:	50                   	push   eax
c001a439:	6a 01                	push   0x1
c001a43b:	55                   	push   ebp
c001a43c:	81 c5 00 02 00 00    	add    ebp,0x200
c001a442:	6a 01                	push   0x1
c001a444:	51                   	push   ecx
c001a445:	52                   	push   edx
c001a446:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a44a:	e8 11 fd ff ff       	call   c001a160 <SATA::access(unsigned long long, int, void*, bool)>
c001a44f:	83 c4 20             	add    esp,0x20
c001a452:	89 f2                	mov    edx,esi
c001a454:	89 f9                	mov    ecx,edi
c001a456:	39 dd                	cmp    ebp,ebx
c001a458:	75 d3                	jne    c001a42d <SATA::write(unsigned long long, int, void*)+0x35>
c001a45a:	31 c0                	xor    eax,eax
c001a45c:	83 c4 0c             	add    esp,0xc
c001a45f:	5b                   	pop    ebx
c001a460:	5e                   	pop    esi
c001a461:	5f                   	pop    edi
c001a462:	5d                   	pop    ebp
c001a463:	c3                   	ret    

c001a464 <SATAPI::write(unsigned long long, int, void*)>:
c001a464:	b8 03 00 00 00       	mov    eax,0x3
c001a469:	c3                   	ret    

c001a46a <SATAPI::close(int, int, void*)>:
c001a46a:	83 ec 0c             	sub    esp,0xc
c001a46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a471:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a477:	85 c0                	test   eax,eax
c001a479:	74 0c                	je     c001a487 <SATAPI::close(int, int, void*)+0x1d>
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	8b 10                	mov    edx,DWORD PTR [eax]
c001a480:	50                   	push   eax
c001a481:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a484:	83 c4 10             	add    esp,0x10
c001a487:	31 c0                	xor    eax,eax
c001a489:	83 c4 0c             	add    esp,0xc
c001a48c:	c3                   	ret    
c001a48d:	90                   	nop

c001a48e <SATAPI::SATAPI()>:
c001a48e:	83 ec 0c             	sub    esp,0xc
c001a491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a495:	83 ec 04             	sub    esp,0x4
c001a498:	68 00 08 00 00       	push   0x800
c001a49d:	68 38 eb 01 c0       	push   0xc001eb38
c001a4a2:	50                   	push   eax
c001a4a3:	e8 7a 0d ff ff       	call   c000b222 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4a8:	83 c4 10             	add    esp,0x10
c001a4ab:	ba 74 ec 01 c0       	mov    edx,0xc001ec74
c001a4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4b4:	89 10                	mov    DWORD PTR [eax],edx
c001a4b6:	90                   	nop
c001a4b7:	83 c4 0c             	add    esp,0xc
c001a4ba:	c3                   	ret    
c001a4bb:	90                   	nop

c001a4bc <SATAPI::diskRemoved()>:
c001a4bc:	c3                   	ret    
c001a4bd:	90                   	nop

c001a4be <SATAPI::diskInserted()>:
c001a4be:	83 ec 18             	sub    esp,0x18
c001a4c1:	68 44 eb 01 c0       	push   0xc001eb44
c001a4c6:	e8 49 f5 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a4cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4cf:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a4d6:	83 c4 1c             	add    esp,0x1c
c001a4d9:	c3                   	ret    

c001a4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a4da:	55                   	push   ebp
c001a4db:	57                   	push   edi
c001a4dc:	56                   	push   esi
c001a4dd:	53                   	push   ebx
c001a4de:	83 ec 38             	sub    esp,0x38
c001a4e1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a4e5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a4e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a4ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a4f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a4f5:	68 5c eb 01 c0       	push   0xc001eb5c
c001a4fa:	e8 15 f5 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a4ff:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a505:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a50b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a50f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a515:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a519:	c1 e0 07             	shl    eax,0x7
c001a51c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a520:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a524:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a52e:	5a                   	pop    edx
c001a52f:	59                   	pop    ecx
c001a530:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a534:	8d 58 02             	lea    ebx,[eax+0x2]
c001a537:	c1 e3 07             	shl    ebx,0x7
c001a53a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001a53e:	53                   	push   ebx
c001a53f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001a545:	e8 82 ec ff ff       	call   c00191cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a54a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a54e:	83 c4 10             	add    esp,0x10
c001a551:	b8 01 00 00 00       	mov    eax,0x1
c001a556:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a55b:	0f 84 ff 01 00 00    	je     c001a760 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a561:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a567:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a569:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a56f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a575:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a579:	c1 e1 05             	shl    ecx,0x5
c001a57c:	01 c8                	add    eax,ecx
c001a57e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a580:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001a586:	81 c9 25 00 01 00    	or     ecx,0x10025
c001a58c:	89 08                	mov    DWORD PTR [eax],ecx
c001a58e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a594:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001a59a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001a5a0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001a5a3:	8d 7b 40             	lea    edi,[ebx+0x40]
c001a5a6:	50                   	push   eax
c001a5a7:	68 90 00 00 00       	push   0x90
c001a5ac:	6a 00                	push   0x0
c001a5ae:	53                   	push   ebx
c001a5af:	e8 3c 5f fe ff       	call   c00004f0 <memset>
c001a5b4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a5b8:	b9 0c 00 00 00       	mov    ecx,0xc
c001a5bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5bf:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001a5c5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001a5c9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001a5cf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001a5d3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a5d7:	48                   	dec    eax
c001a5d8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a5dd:	89 c1                	mov    ecx,eax
c001a5df:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001a5e5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a5ea:	09 c8                	or     eax,ecx
c001a5ec:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001a5f2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001a5f5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001a5fc:	66 25 00 7f          	and    ax,0x7f00
c001a600:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a604:	66 0d 27 80          	or     ax,0x8027
c001a608:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001a60c:	66 89 03             	mov    WORD PTR [ebx],ax
c001a60f:	89 d0                	mov    eax,edx
c001a611:	c1 ea 18             	shr    edx,0x18
c001a614:	c1 e8 10             	shr    eax,0x10
c001a617:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001a61a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001a61d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a621:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001a624:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a628:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001a62b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a62f:	83 c4 10             	add    esp,0x10
c001a632:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001a636:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a63a:	31 c0                	xor    eax,eax
c001a63c:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001a642:	80 e1 88             	and    cl,0x88
c001a645:	74 0a                	je     c001a651 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001a647:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a64c:	74 0a                	je     c001a658 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001a64e:	40                   	inc    eax
c001a64f:	eb eb                	jmp    c001a63c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001a651:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a656:	75 0a                	jne    c001a662 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001a658:	83 ec 0c             	sub    esp,0xc
c001a65b:	68 76 eb 01 c0       	push   0xc001eb76
c001a660:	eb 43                	jmp    c001a6a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a662:	be 01 00 00 00       	mov    esi,0x1
c001a667:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a66b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a66f:	d3 e6                	shl    esi,cl
c001a671:	c1 e7 07             	shl    edi,0x7
c001a674:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001a67a:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001a67f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001a683:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001a689:	85 c6                	test   esi,eax
c001a68b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001a691:	0f 84 96 00 00 00    	je     c001a72d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001a697:	0f ba e0 1e          	bt     eax,0x1e
c001a69b:	73 1a                	jae    c001a6b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001a69d:	83 ec 0c             	sub    esp,0xc
c001a6a0:	68 8b eb 01 c0       	push   0xc001eb8b
c001a6a5:	e8 6a f3 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a6aa:	83 c4 10             	add    esp,0x10
c001a6ad:	b8 01 00 00 00       	mov    eax,0x1
c001a6b2:	e9 a9 00 00 00       	jmp    c001a760 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a6b7:	83 fb 0d             	cmp    ebx,0xd
c001a6ba:	77 12                	ja     c001a6ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001a6bc:	83 ec 0c             	sub    esp,0xc
c001a6bf:	68 c8 00 00 00       	push   0xc8
c001a6c4:	e8 7f 86 ff ff       	call   c0012d48 <milliTenthSleep(unsigned int)>
c001a6c9:	83 c4 10             	add    esp,0x10
c001a6cc:	eb 2a                	jmp    c001a6f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a6ce:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001a6d4:	83 f8 0d             	cmp    eax,0xd
c001a6d7:	77 0a                	ja     c001a6e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	68 58 02 00 00       	push   0x258
c001a6e1:	eb 28                	jmp    c001a70b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a6e3:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001a6e9:	83 f8 0d             	cmp    eax,0xd
c001a6ec:	77 0a                	ja     c001a6f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a6ee:	83 ec 0c             	sub    esp,0xc
c001a6f1:	68 dc 05 00 00       	push   0x5dc
c001a6f6:	eb 13                	jmp    c001a70b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a6f8:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001a6fe:	83 f8 0d             	cmp    eax,0xd
c001a701:	77 10                	ja     c001a713 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001a703:	83 ec 0c             	sub    esp,0xc
c001a706:	68 c4 09 00 00       	push   0x9c4
c001a70b:	e8 38 86 ff ff       	call   c0012d48 <milliTenthSleep(unsigned int)>
c001a710:	83 c4 10             	add    esp,0x10
c001a713:	43                   	inc    ebx
c001a714:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001a71a:	0f 85 63 ff ff ff    	jne    c001a683 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001a720:	83 ec 0c             	sub    esp,0xc
c001a723:	68 9e eb 01 c0       	push   0xc001eb9e
c001a728:	e9 78 ff ff ff       	jmp    c001a6a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a72d:	0f ba e0 1e          	bt     eax,0x1e
c001a731:	73 0d                	jae    c001a740 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001a733:	83 ec 0c             	sub    esp,0xc
c001a736:	68 b2 eb 01 c0       	push   0xc001ebb2
c001a73b:	e9 65 ff ff ff       	jmp    c001a6a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a740:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001a745:	74 17                	je     c001a75e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a747:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001a74c:	74 10                	je     c001a75e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a74e:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001a754:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001a758:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a75c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a75e:	31 c0                	xor    eax,eax
c001a760:	83 c4 2c             	add    esp,0x2c
c001a763:	5b                   	pop    ebx
c001a764:	5e                   	pop    esi
c001a765:	5f                   	pop    edi
c001a766:	5d                   	pop    ebp
c001a767:	c3                   	ret    

c001a768 <SATAPI::eject()>:
c001a768:	57                   	push   edi
c001a769:	b9 03 00 00 00       	mov    ecx,0x3
c001a76e:	83 ec 18             	sub    esp,0x18
c001a771:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a775:	fc                   	cld    
c001a776:	31 c0                	xor    eax,eax
c001a778:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a77a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a77f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a784:	50                   	push   eax
c001a785:	6a 00                	push   0x0
c001a787:	6a 00                	push   0x0
c001a789:	6a 00                	push   0x0
c001a78b:	6a 00                	push   0x0
c001a78d:	6a 02                	push   0x2
c001a78f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a793:	50                   	push   eax
c001a794:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a798:	e8 3d fd ff ff       	call   c001a4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a79d:	31 c0                	xor    eax,eax
c001a79f:	83 c4 38             	add    esp,0x38
c001a7a2:	5f                   	pop    edi
c001a7a3:	c3                   	ret    

c001a7a4 <SATAPI::detectMedia()>:
c001a7a4:	56                   	push   esi
c001a7a5:	53                   	push   ebx
c001a7a6:	83 ec 30             	sub    esp,0x30
c001a7a9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a7ad:	68 c7 eb 01 c0       	push   0xc001ebc7
c001a7b2:	e8 5d f2 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a7b7:	83 c4 0c             	add    esp,0xc
c001a7ba:	6a 0c                	push   0xc
c001a7bc:	6a 00                	push   0x0
c001a7be:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a7c2:	56                   	push   esi
c001a7c3:	e8 28 5d fe ff       	call   c00004f0 <memset>
c001a7c8:	83 c4 0c             	add    esp,0xc
c001a7cb:	6a 00                	push   0x0
c001a7cd:	6a 00                	push   0x0
c001a7cf:	6a 00                	push   0x0
c001a7d1:	6a 00                	push   0x0
c001a7d3:	6a 00                	push   0x0
c001a7d5:	56                   	push   esi
c001a7d6:	53                   	push   ebx
c001a7d7:	e8 fe fc ff ff       	call   c001a4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a7dc:	83 c4 20             	add    esp,0x20
c001a7df:	48                   	dec    eax
c001a7e0:	74 34                	je     c001a816 <SATAPI::detectMedia()+0x72>
c001a7e2:	50                   	push   eax
c001a7e3:	6a 0c                	push   0xc
c001a7e5:	6a 00                	push   0x0
c001a7e7:	56                   	push   esi
c001a7e8:	e8 03 5d fe ff       	call   c00004f0 <memset>
c001a7ed:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a7f2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a7f7:	83 c4 0c             	add    esp,0xc
c001a7fa:	6a 01                	push   0x1
c001a7fc:	8d 44 24 16          	lea    eax,[esp+0x16]
c001a800:	50                   	push   eax
c001a801:	6a 00                	push   0x0
c001a803:	6a 00                	push   0x0
c001a805:	6a 12                	push   0x12
c001a807:	56                   	push   esi
c001a808:	53                   	push   ebx
c001a809:	e8 cc fc ff ff       	call   c001a4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a80e:	83 c4 20             	add    esp,0x20
c001a811:	48                   	dec    eax
c001a812:	75 39                	jne    c001a84d <SATAPI::detectMedia()+0xa9>
c001a814:	eb 1e                	jmp    c001a834 <SATAPI::detectMedia()+0x90>
c001a816:	83 ec 0c             	sub    esp,0xc
c001a819:	68 db eb 01 c0       	push   0xc001ebdb
c001a81e:	e8 f1 f1 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a823:	83 c4 10             	add    esp,0x10
c001a826:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a82d:	74 b3                	je     c001a7e2 <SATAPI::detectMedia()+0x3e>
c001a82f:	e9 93 00 00 00       	jmp    c001a8c7 <SATAPI::detectMedia()+0x123>
c001a834:	83 ec 0c             	sub    esp,0xc
c001a837:	68 e5 eb 01 c0       	push   0xc001ebe5
c001a83c:	e8 d3 f1 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a841:	83 c4 10             	add    esp,0x10
c001a844:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a84b:	75 7a                	jne    c001a8c7 <SATAPI::detectMedia()+0x123>
c001a84d:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a851:	83 e0 7f             	and    eax,0x7f
c001a854:	3c 70                	cmp    al,0x70
c001a856:	74 25                	je     c001a87d <SATAPI::detectMedia()+0xd9>
c001a858:	83 ec 0c             	sub    esp,0xc
c001a85b:	68 ef eb 01 c0       	push   0xc001ebef
c001a860:	e8 af f1 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a865:	83 c4 10             	add    esp,0x10
c001a868:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a86f:	75 0c                	jne    c001a87d <SATAPI::detectMedia()+0xd9>
c001a871:	83 ec 0c             	sub    esp,0xc
c001a874:	53                   	push   ebx
c001a875:	e8 44 fc ff ff       	call   c001a4be <SATAPI::diskInserted()>
c001a87a:	83 c4 10             	add    esp,0x10
c001a87d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a881:	83 e0 0f             	and    eax,0xf
c001a884:	3c 02                	cmp    al,0x2
c001a886:	75 16                	jne    c001a89e <SATAPI::detectMedia()+0xfa>
c001a888:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a88d:	75 38                	jne    c001a8c7 <SATAPI::detectMedia()+0x123>
c001a88f:	83 ec 0c             	sub    esp,0xc
c001a892:	68 f8 eb 01 c0       	push   0xc001ebf8
c001a897:	e8 78 f1 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a89c:	eb 26                	jmp    c001a8c4 <SATAPI::detectMedia()+0x120>
c001a89e:	84 c0                	test   al,al
c001a8a0:	75 25                	jne    c001a8c7 <SATAPI::detectMedia()+0x123>
c001a8a2:	83 ec 0c             	sub    esp,0xc
c001a8a5:	68 01 ec 01 c0       	push   0xc001ec01
c001a8aa:	e8 65 f1 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a8af:	83 c4 10             	add    esp,0x10
c001a8b2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a8b9:	75 0c                	jne    c001a8c7 <SATAPI::detectMedia()+0x123>
c001a8bb:	83 ec 0c             	sub    esp,0xc
c001a8be:	53                   	push   ebx
c001a8bf:	e8 fa fb ff ff       	call   c001a4be <SATAPI::diskInserted()>
c001a8c4:	83 c4 10             	add    esp,0x10
c001a8c7:	83 c4 24             	add    esp,0x24
c001a8ca:	5b                   	pop    ebx
c001a8cb:	5e                   	pop    esi
c001a8cc:	c3                   	ret    
c001a8cd:	90                   	nop

c001a8ce <SATAPI::open(int, int, void*)>:
c001a8ce:	56                   	push   esi
c001a8cf:	53                   	push   ebx
c001a8d0:	51                   	push   ecx
c001a8d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8d9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a8e3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a8e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a8f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8f7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a901:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a907:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a90e:	e8 0b c7 fe ff       	call   c000701e <Phys::allocatePage()>
c001a913:	89 c6                	mov    esi,eax
c001a915:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a91b:	81 c6 00 10 00 00    	add    esi,0x1000
c001a921:	e8 f8 c6 fe ff       	call   c000701e <Phys::allocatePage()>
c001a926:	39 c6                	cmp    esi,eax
c001a928:	74 10                	je     c001a93a <SATAPI::open(int, int, void*)+0x6c>
c001a92a:	83 ec 0c             	sub    esp,0xc
c001a92d:	68 0b ec 01 c0       	push   0xc001ec0b
c001a932:	e8 30 4c ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001a937:	83 c4 10             	add    esp,0x10
c001a93a:	83 ec 0c             	sub    esp,0xc
c001a93d:	6a 02                	push   0x2
c001a93f:	e8 49 de fe ff       	call   c000878d <Virt::allocateKernelVirtualPages(int)>
c001a944:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a94a:	6a 03                	push   0x3
c001a94c:	50                   	push   eax
c001a94d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a953:	ff 35 94 f6 01 c0    	push   DWORD PTR ds:0xc001f694
c001a959:	e8 88 e4 fe ff       	call   c0008de6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a95e:	83 c4 14             	add    esp,0x14
c001a961:	68 74 01 00 00       	push   0x174
c001a966:	e8 e6 c2 fe ff       	call   c0006c51 <malloc>
c001a96b:	83 c4 0c             	add    esp,0xc
c001a96e:	89 c6                	mov    esi,eax
c001a970:	6a 00                	push   0x0
c001a972:	68 ff ff ff 7f       	push   0x7fffffff
c001a977:	6a 00                	push   0x0
c001a979:	6a 00                	push   0x0
c001a97b:	53                   	push   ebx
c001a97c:	68 21 ec 01 c0       	push   0xc001ec21
c001a981:	50                   	push   eax
c001a982:	e8 47 15 ff ff       	call   c000bece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a987:	83 c4 14             	add    esp,0x14
c001a98a:	56                   	push   esi
c001a98b:	e8 f4 15 ff ff       	call   c000bf84 <LogicalDisk::assignDriveLetter()>
c001a990:	5a                   	pop    edx
c001a991:	0f be c0             	movsx  eax,al
c001a994:	59                   	pop    ecx
c001a995:	50                   	push   eax
c001a996:	68 3c ea 01 c0       	push   0xc001ea3c
c001a99b:	e8 74 f0 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a9a0:	58                   	pop    eax
c001a9a1:	5a                   	pop    edx
c001a9a2:	56                   	push   esi
c001a9a3:	53                   	push   ebx
c001a9a4:	e8 ab 04 ff ff       	call   c000ae54 <Device::addChild(Device*)>
c001a9a9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a9af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9b2:	e8 d3 08 ff ff       	call   c000b28a <PhysicalDisk::startCache()>
c001a9b7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001a9be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9c1:	e8 de fd ff ff       	call   c001a7a4 <SATAPI::detectMedia()>
c001a9c6:	83 c4 14             	add    esp,0x14
c001a9c9:	31 c0                	xor    eax,eax
c001a9cb:	5b                   	pop    ebx
c001a9cc:	5e                   	pop    esi
c001a9cd:	c3                   	ret    

c001a9ce <SATAPI::read(unsigned long long, int, void*)>:
c001a9ce:	55                   	push   ebp
c001a9cf:	57                   	push   edi
c001a9d0:	56                   	push   esi
c001a9d1:	53                   	push   ebx
c001a9d2:	83 ec 48             	sub    esp,0x48
c001a9d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a9d9:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001a9dd:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001a9e1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a9e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a9ed:	68 2f ec 01 c0       	push   0xc001ec2f
c001a9f2:	e8 1d f0 fe ff       	call   c0009a14 <Dbg::kprintf(char const*, ...)>
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	83 fb 04             	cmp    ebx,0x4
c001a9fd:	7e 10                	jle    c001aa0f <SATAPI::read(unsigned long long, int, void*)+0x41>
c001a9ff:	83 ec 0c             	sub    esp,0xc
c001aa02:	68 40 ec 01 c0       	push   0xc001ec40
c001aa07:	e8 5b 4b ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001aa13:	31 ed                	xor    ebp,ebp
c001aa15:	b9 03 00 00 00       	mov    ecx,0x3
c001aa1a:	fc                   	cld    
c001aa1b:	89 e8                	mov    eax,ebp
c001aa1d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa1f:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001aa24:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001aa29:	50                   	push   eax
c001aa2a:	6a 00                	push   0x0
c001aa2c:	6a 00                	push   0x0
c001aa2e:	6a 00                	push   0x0
c001aa30:	6a 00                	push   0x0
c001aa32:	6a 02                	push   0x2
c001aa34:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa38:	50                   	push   eax
c001aa39:	56                   	push   esi
c001aa3a:	e8 9b fa ff ff       	call   c001a4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aa3f:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001aa43:	89 e8                	mov    eax,ebp
c001aa45:	b9 03 00 00 00       	mov    ecx,0x3
c001aa4a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa50:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001aa54:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001aa59:	0f c8                	bswap  eax
c001aa5b:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001aa5f:	83 c4 1c             	add    esp,0x1c
c001aa62:	53                   	push   ebx
c001aa63:	c1 e3 0b             	shl    ebx,0xb
c001aa66:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001aa6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa72:	53                   	push   ebx
c001aa73:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aa77:	50                   	push   eax
c001aa78:	56                   	push   esi
c001aa79:	e8 5c fa ff ff       	call   c001a4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aa7e:	83 c4 20             	add    esp,0x20
c001aa81:	85 c0                	test   eax,eax
c001aa83:	74 14                	je     c001aa99 <SATAPI::read(unsigned long long, int, void*)+0xcb>
c001aa85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa89:	83 ec 0c             	sub    esp,0xc
c001aa8c:	56                   	push   esi
c001aa8d:	e8 12 fd ff ff       	call   c001a7a4 <SATAPI::detectMedia()>
c001aa92:	83 c4 10             	add    esp,0x10
c001aa95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa99:	83 c4 3c             	add    esp,0x3c
c001aa9c:	5b                   	pop    ebx
c001aa9d:	5e                   	pop    esi
c001aa9e:	5f                   	pop    edi
c001aa9f:	5d                   	pop    ebp
c001aaa0:	c3                   	ret    
c001aaa1:	90                   	nop

c001aaa2 <IOAPIC::close(int, int, void*)>:
c001aaa2:	b8 00 00 00 00       	mov    eax,0x0
c001aaa7:	c3                   	ret    

c001aaa8 <apicGetBase()>:
c001aaa8:	55                   	push   ebp
c001aaa9:	89 e5                	mov    ebp,esp
c001aaab:	83 ec 18             	sub    esp,0x18
c001aaae:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c001aab3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001aab9:	83 e0 08             	and    eax,0x8
c001aabc:	84 c0                	test   al,al
c001aabe:	75 07                	jne    c001aac7 <apicGetBase()+0x1f>
c001aac0:	b8 00 00 00 00       	mov    eax,0x0
c001aac5:	eb 21                	jmp    c001aae8 <apicGetBase()+0x40>
c001aac7:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c001aacc:	83 ec 08             	sub    esp,0x8
c001aacf:	6a 1b                	push   0x1b
c001aad1:	50                   	push   eax
c001aad2:	e8 47 b7 fe ff       	call   c000621e <Computer::rdmsr(unsigned int)>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001aadd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001aae0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aae3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001aae8:	c9                   	leave  
c001aae9:	c3                   	ret    

c001aaea <IOAPIC::IOAPIC()>:
c001aaea:	83 ec 0c             	sub    esp,0xc
c001aaed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaf1:	83 ec 08             	sub    esp,0x8
c001aaf4:	68 a4 ec 01 c0       	push   0xc001eca4
c001aaf9:	50                   	push   eax
c001aafa:	e8 ed 04 ff ff       	call   c000afec <Device::Device(char const*)>
c001aaff:	83 c4 10             	add    esp,0x10
c001ab02:	ba b4 ec 01 c0       	mov    edx,0xc001ecb4
c001ab07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab0b:	89 10                	mov    DWORD PTR [eax],edx
c001ab0d:	90                   	nop
c001ab0e:	83 c4 0c             	add    esp,0xc
c001ab11:	c3                   	ret    

c001ab12 <apicOpen()>:
c001ab12:	55                   	push   ebp
c001ab13:	89 e5                	mov    ebp,esp
c001ab15:	53                   	push   ebx
c001ab16:	83 ec 34             	sub    esp,0x34
c001ab19:	a0 c0 34 02 c0       	mov    al,ds:0xc00234c0
c001ab1e:	83 f0 01             	xor    eax,0x1
c001ab21:	84 c0                	test   al,al
c001ab23:	0f 84 9d 00 00 00    	je     c001abc6 <apicOpen()+0xb4>
c001ab29:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ab2d:	a0 80 1e 02 c0       	mov    al,ds:0xc0021e80
c001ab32:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001ab35:	0f 83 84 00 00 00    	jae    c001abbf <apicOpen()+0xad>
c001ab3b:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ab48:	e8 04 c1 fe ff       	call   c0006c51 <malloc>
c001ab4d:	83 c4 10             	add    esp,0x10
c001ab50:	89 c3                	mov    ebx,eax
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	53                   	push   ebx
c001ab56:	e8 8f ff ff ff       	call   c001aaea <IOAPIC::IOAPIC()>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ab61:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ab64:	25 ff 00 00 00       	and    eax,0xff
c001ab69:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ab6c:	89 14 85 a0 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcb60],edx
c001ab73:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c001ab78:	40                   	inc    eax
c001ab79:	a3 80 34 02 c0       	mov    ds:0xc0023480,eax
c001ab7e:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c001ab83:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ab89:	83 ec 08             	sub    esp,0x8
c001ab8c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ab8f:	50                   	push   eax
c001ab90:	e8 bf 02 ff ff       	call   c000ae54 <Device::addChild(Device*)>
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ab9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab9d:	83 c0 08             	add    eax,0x8
c001aba0:	8b 10                	mov    edx,DWORD PTR [eax]
c001aba2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aba5:	25 ff 00 00 00       	and    eax,0xff
c001abaa:	6a 00                	push   0x0
c001abac:	6a 00                	push   0x0
c001abae:	50                   	push   eax
c001abaf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001abb2:	ff d2                	call   edx
c001abb4:	83 c4 10             	add    esp,0x10
c001abb7:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001abba:	e9 6e ff ff ff       	jmp    c001ab2d <apicOpen()+0x1b>
c001abbf:	c6 05 c0 34 02 c0 01 	mov    BYTE PTR ds:0xc00234c0,0x1
c001abc6:	e8 dd fe ff ff       	call   c001aaa8 <apicGetBase()>
c001abcb:	05 f0 00 00 00       	add    eax,0xf0
c001abd0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001abd3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001abd6:	8b 00                	mov    eax,DWORD PTR [eax]
c001abd8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001abdb:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001abe2:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001abe9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001abec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001abef:	89 10                	mov    DWORD PTR [eax],edx
c001abf1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001abf8:	a1 d0 1d 02 c0       	mov    eax,ds:0xc0021dd0
c001abfd:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ac00:	7d 70                	jge    c001ac72 <apicOpen()+0x160>
c001ac02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac05:	8b 04 85 e0 1d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde220]
c001ac0c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ac0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac12:	8b 04 85 e0 1d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde220]
c001ac19:	c1 e8 08             	shr    eax,0x8
c001ac1c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ac20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac23:	8b 04 85 e0 1d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde220]
c001ac2a:	c1 e8 18             	shr    eax,0x18
c001ac2d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ac30:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ac34:	75 37                	jne    c001ac6d <apicOpen()+0x15b>
c001ac36:	e8 6d fe ff ff       	call   c001aaa8 <apicGetBase()>
c001ac3b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ac3f:	75 07                	jne    c001ac48 <apicOpen()+0x136>
c001ac41:	ba 60 03 00 00       	mov    edx,0x360
c001ac46:	eb 05                	jmp    c001ac4d <apicOpen()+0x13b>
c001ac48:	ba 50 03 00 00       	mov    edx,0x350
c001ac4d:	01 d0                	add    eax,edx
c001ac4f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ac52:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ac55:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac57:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ac5a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ac61:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ac65:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ac68:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ac6b:	89 10                	mov    DWORD PTR [eax],edx
c001ac6d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ac70:	eb 86                	jmp    c001abf8 <apicOpen()+0xe6>
c001ac72:	90                   	nop
c001ac73:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ac76:	c9                   	leave  
c001ac77:	c3                   	ret    

c001ac78 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ac78:	55                   	push   ebp
c001ac79:	89 e5                	mov    ebp,esp
c001ac7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac84:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ac87:	72 1d                	jb     c001aca6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ac89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac8c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ac92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac95:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ac9b:	01 d0                	add    eax,edx
c001ac9d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001aca0:	73 04                	jae    c001aca6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001aca2:	b0 01                	mov    al,0x1
c001aca4:	eb 02                	jmp    c001aca8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001aca6:	b0 00                	mov    al,0x0
c001aca8:	5d                   	pop    ebp
c001aca9:	c3                   	ret    

c001acaa <IOAPIC::read(int)>:
c001acaa:	55                   	push   ebp
c001acab:	89 e5                	mov    ebp,esp
c001acad:	83 ec 10             	sub    esp,0x10
c001acb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acb3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001acb9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001acbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001acbf:	31 d2                	xor    edx,edx
c001acc1:	88 c2                	mov    dl,al
c001acc3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001acc6:	89 10                	mov    DWORD PTR [eax],edx
c001acc8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001accb:	83 c0 10             	add    eax,0x10
c001acce:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd0:	c9                   	leave  
c001acd1:	c3                   	ret    

c001acd2 <IOAPIC::open(int, int, void*)>:
c001acd2:	55                   	push   ebp
c001acd3:	89 e5                	mov    ebp,esp
c001acd5:	57                   	push   edi
c001acd6:	56                   	push   esi
c001acd7:	53                   	push   ebx
c001acd8:	83 ec 04             	sub    esp,0x4
c001acdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acde:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ace1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ace7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001acf0:	8b 14 85 c0 1e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde140]
c001acf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acfa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ad00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ad09:	8b 14 85 40 1f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde0c0]
c001ad10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad13:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ad19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad1c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ad22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad25:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ad2b:	89 c6                	mov    esi,eax
c001ad2d:	81 e6 ff 00 00 00    	and    esi,0xff
c001ad33:	89 d0                	mov    eax,edx
c001ad35:	ba 00 00 00 00       	mov    edx,0x0
c001ad3a:	89 c7                	mov    edi,eax
c001ad3c:	83 e7 ff             	and    edi,0xffffffff
c001ad3f:	89 f9                	mov    ecx,edi
c001ad41:	89 d0                	mov    eax,edx
c001ad43:	25 ff 00 00 00       	and    eax,0xff
c001ad48:	89 c3                	mov    ebx,eax
c001ad4a:	89 c8                	mov    eax,ecx
c001ad4c:	89 da                	mov    edx,ebx
c001ad4e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ad51:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ad54:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ad58:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ad5c:	83 e0 00             	and    eax,0x0
c001ad5f:	09 d0                	or     eax,edx
c001ad61:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ad65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad68:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ad6e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad71:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ad74:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ad7a:	31 d2                	xor    edx,edx
c001ad7c:	88 c2                	mov    dl,al
c001ad7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad81:	83 c2 08             	add    edx,0x8
c001ad84:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ad88:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ad8e:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ad94:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ad98:	6a 01                	push   0x1
c001ad9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad9d:	e8 08 ff ff ff       	call   c001acaa <IOAPIC::read(int)>
c001ada2:	83 c4 08             	add    esp,0x8
c001ada5:	c1 f8 10             	sar    eax,0x10
c001ada8:	25 ff 00 00 00       	and    eax,0xff
c001adad:	8d 50 01             	lea    edx,[eax+0x1]
c001adb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001adb3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001adb9:	b8 00 00 00 00       	mov    eax,0x0
c001adbe:	8d 65 f4             	lea    esp,[ebp-0xc]
c001adc1:	5b                   	pop    ebx
c001adc2:	5e                   	pop    esi
c001adc3:	5f                   	pop    edi
c001adc4:	5d                   	pop    ebp
c001adc5:	c3                   	ret    

c001adc6 <IOAPIC::write(int, int)>:
c001adc6:	55                   	push   ebp
c001adc7:	89 e5                	mov    ebp,esp
c001adc9:	83 ec 10             	sub    esp,0x10
c001adcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001adcf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001add5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001add8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001addb:	31 d2                	xor    edx,edx
c001addd:	88 c2                	mov    dl,al
c001addf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ade2:	89 10                	mov    DWORD PTR [eax],edx
c001ade4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ade7:	8d 50 10             	lea    edx,[eax+0x10]
c001adea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001aded:	89 02                	mov    DWORD PTR [edx],eax
c001adef:	90                   	nop
c001adf0:	c9                   	leave  
c001adf1:	c3                   	ret    

c001adf2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001adf2:	55                   	push   ebp
c001adf3:	89 e5                	mov    ebp,esp
c001adf5:	53                   	push   ebx
c001adf6:	83 ec 2c             	sub    esp,0x2c
c001adf9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001adfc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001adff:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ae02:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ae05:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ae08:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ae0b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ae0e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ae11:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ae14:	88 d8                	mov    al,bl
c001ae16:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ae19:	88 c8                	mov    al,cl
c001ae1b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ae1e:	88 d0                	mov    al,dl
c001ae20:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ae23:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ae26:	25 ff 00 00 00       	and    eax,0xff
c001ae2b:	83 c0 08             	add    eax,0x8
c001ae2e:	01 c0                	add    eax,eax
c001ae30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ae33:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ae36:	25 ff 00 00 00       	and    eax,0xff
c001ae3b:	83 c0 08             	add    eax,0x8
c001ae3e:	01 c0                	add    eax,eax
c001ae40:	40                   	inc    eax
c001ae41:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ae44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ae47:	50                   	push   eax
c001ae48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ae4b:	e8 5a fe ff ff       	call   c001acaa <IOAPIC::read(int)>
c001ae50:	83 c4 08             	add    esp,0x8
c001ae53:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ae56:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ae5d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ae60:	c1 e0 18             	shl    eax,0x18
c001ae63:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ae66:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ae69:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ae6c:	52                   	push   edx
c001ae6d:	50                   	push   eax
c001ae6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ae71:	e8 50 ff ff ff       	call   c001adc6 <IOAPIC::write(int, int)>
c001ae76:	83 c4 0c             	add    esp,0xc
c001ae79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ae7c:	50                   	push   eax
c001ae7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ae80:	e8 25 fe ff ff       	call   c001acaa <IOAPIC::read(int)>
c001ae85:	83 c4 08             	add    esp,0x8
c001ae88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ae8b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ae92:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ae99:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001aea0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001aea4:	74 09                	je     c001aeaf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001aea6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001aead:	eb 07                	jmp    c001aeb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001aeaf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001aeb6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001aeba:	74 09                	je     c001aec5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001aebc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001aec3:	eb 07                	jmp    c001aecc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001aec5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001aecc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001aed3:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001aed6:	25 ff 00 00 00       	and    eax,0xff
c001aedb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001aede:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001aee1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aee4:	52                   	push   edx
c001aee5:	50                   	push   eax
c001aee6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001aee9:	e8 d8 fe ff ff       	call   c001adc6 <IOAPIC::write(int, int)>
c001aeee:	83 c4 0c             	add    esp,0xc
c001aef1:	90                   	nop
c001aef2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001aef5:	c9                   	leave  
c001aef6:	c3                   	ret    
c001aef7:	90                   	nop

c001aef8 <APICTimer::close(int, int, void*)>:
c001aef8:	b8 00 00 00 00       	mov    eax,0x0
c001aefd:	c3                   	ret    
c001aefe:	66 90                	xchg   ax,ax

c001af00 <apicTimerHandler(regs*, void*)>:
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af07:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af09:	b8 10 27 00 00       	mov    eax,0x2710
c001af0e:	ba 00 00 00 00       	mov    edx,0x0
c001af13:	f7 f1                	div    ecx
c001af15:	83 ec 0c             	sub    esp,0xc
c001af18:	50                   	push   eax
c001af19:	e8 ca 17 ff ff       	call   c000c6e8 <timerHandler(unsigned int)>
c001af1e:	83 c4 10             	add    esp,0x10
c001af21:	90                   	nop
c001af22:	83 c4 0c             	add    esp,0xc
c001af25:	c3                   	ret    
c001af26:	66 90                	xchg   ax,ax

c001af28 <APICTimer::open(int, int, void*)>:
c001af28:	83 ec 0c             	sub    esp,0xc
c001af2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001af31:	83 c0 24             	add    eax,0x24
c001af34:	8b 00                	mov    eax,DWORD PTR [eax]
c001af36:	83 ec 08             	sub    esp,0x8
c001af39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af41:	ff d0                	call   eax
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af4e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001af54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af5c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001af62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af66:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001af6c:	83 ec 0c             	sub    esp,0xc
c001af6f:	51                   	push   ecx
c001af70:	6a 01                	push   0x1
c001af72:	68 00 af 01 c0       	push   0xc001af00
c001af77:	52                   	push   edx
c001af78:	50                   	push   eax
c001af79:	e8 82 fe fe ff       	call   c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af7e:	83 c4 20             	add    esp,0x20
c001af81:	89 c2                	mov    edx,eax
c001af83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af87:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001af8d:	b8 00 00 00 00       	mov    eax,0x0
c001af92:	83 c4 0c             	add    esp,0xc
c001af95:	c3                   	ret    
c001af96:	66 90                	xchg   ax,ax

c001af98 <APICTimer::write(int)>:
c001af98:	83 ec 0c             	sub    esp,0xc
c001af9b:	83 ec 0c             	sub    esp,0xc
c001af9e:	68 d8 ec 01 c0       	push   0xc001ecd8
c001afa3:	e8 bf 45 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001afa8:	83 c4 10             	add    esp,0x10
c001afab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afb3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001afb9:	90                   	nop
c001afba:	83 c4 0c             	add    esp,0xc
c001afbd:	c3                   	ret    
c001afbe:	66 90                	xchg   ax,ax

c001afc0 <APICTimer::APICTimer()>:
c001afc0:	83 ec 0c             	sub    esp,0xc
c001afc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc7:	83 ec 08             	sub    esp,0x8
c001afca:	68 e8 ec 01 c0       	push   0xc001ece8
c001afcf:	50                   	push   eax
c001afd0:	e8 47 16 ff ff       	call   c000c61c <Timer::Timer(char const*)>
c001afd5:	83 c4 10             	add    esp,0x10
c001afd8:	ba fc ec 01 c0       	mov    edx,0xc001ecfc
c001afdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe1:	89 10                	mov    DWORD PTR [eax],edx
c001afe3:	90                   	nop
c001afe4:	83 c4 0c             	add    esp,0xc
c001afe7:	c3                   	ret    

c001afe8 <PIT::write(int)>:
c001afe8:	83 ec 10             	sub    esp,0x10
c001afeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aff3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aff9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001affd:	a3 c4 34 02 c0       	mov    ds:0xc00234c4,eax
c001b002:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b007:	99                   	cdq    
c001b008:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b00c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b010:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b017:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b01c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b020:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b025:	ee                   	out    dx,al
c001b026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b02a:	25 ff 00 00 00       	and    eax,0xff
c001b02f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b036:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b03a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b03e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b043:	ee                   	out    dx,al
c001b044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b048:	c1 f8 08             	sar    eax,0x8
c001b04b:	25 ff 00 00 00       	and    eax,0xff
c001b050:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b057:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b05b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b05f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b064:	ee                   	out    dx,al
c001b065:	90                   	nop
c001b066:	83 c4 10             	add    esp,0x10
c001b069:	c3                   	ret    
c001b06a:	66 90                	xchg   ax,ax

c001b06c <pitHandler(regs*, void*)>:
c001b06c:	83 ec 0c             	sub    esp,0xc
c001b06f:	8b 0d c4 34 02 c0    	mov    ecx,DWORD PTR ds:0xc00234c4
c001b075:	b8 10 27 00 00       	mov    eax,0x2710
c001b07a:	99                   	cdq    
c001b07b:	f7 f9                	idiv   ecx
c001b07d:	83 ec 0c             	sub    esp,0xc
c001b080:	50                   	push   eax
c001b081:	e8 62 16 ff ff       	call   c000c6e8 <timerHandler(unsigned int)>
c001b086:	83 c4 10             	add    esp,0x10
c001b089:	90                   	nop
c001b08a:	83 c4 0c             	add    esp,0xc
c001b08d:	c3                   	ret    
c001b08e:	66 90                	xchg   ax,ax

c001b090 <PIT::open(int, int, void*)>:
c001b090:	83 ec 0c             	sub    esp,0xc
c001b093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b097:	8b 00                	mov    eax,DWORD PTR [eax]
c001b099:	83 c0 24             	add    eax,0x24
c001b09c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b09e:	83 ec 08             	sub    esp,0x8
c001b0a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a9:	ff d0                	call   eax
c001b0ab:	83 c4 10             	add    esp,0x10
c001b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b2:	83 ec 0c             	sub    esp,0xc
c001b0b5:	6a 00                	push   0x0
c001b0b7:	6a 01                	push   0x1
c001b0b9:	68 6c b0 01 c0       	push   0xc001b06c
c001b0be:	6a 00                	push   0x0
c001b0c0:	50                   	push   eax
c001b0c1:	e8 3a fd fe ff       	call   c000ae00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b0c6:	83 c4 20             	add    esp,0x20
c001b0c9:	89 c2                	mov    edx,eax
c001b0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0cf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b0d5:	b8 00 00 00 00       	mov    eax,0x0
c001b0da:	83 c4 0c             	add    esp,0xc
c001b0dd:	c3                   	ret    
c001b0de:	66 90                	xchg   ax,ax

c001b0e0 <PIT::close(int, int, void*)>:
c001b0e0:	83 ec 0c             	sub    esp,0xc
c001b0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f5:	6a 01                	push   0x1
c001b0f7:	68 6c b0 01 c0       	push   0xc001b06c
c001b0fc:	6a 00                	push   0x0
c001b0fe:	50                   	push   eax
c001b0ff:	e8 32 fd fe ff       	call   c000ae36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b104:	83 c4 10             	add    esp,0x10
c001b107:	b8 00 00 00 00       	mov    eax,0x0
c001b10c:	83 c4 0c             	add    esp,0xc
c001b10f:	c3                   	ret    

c001b110 <PIT::PIT()>:
c001b110:	83 ec 0c             	sub    esp,0xc
c001b113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b117:	83 ec 08             	sub    esp,0x8
c001b11a:	68 24 ed 01 c0       	push   0xc001ed24
c001b11f:	50                   	push   eax
c001b120:	e8 f7 14 ff ff       	call   c000c61c <Timer::Timer(char const*)>
c001b125:	83 c4 10             	add    esp,0x10
c001b128:	ba 4c ed 01 c0       	mov    edx,0xc001ed4c
c001b12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b131:	89 10                	mov    DWORD PTR [eax],edx
c001b133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b137:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b13d:	31 d2                	xor    edx,edx
c001b13f:	88 c2                	mov    dl,al
c001b141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b145:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b150:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b156:	31 d2                	xor    edx,edx
c001b158:	88 c2                	mov    dl,al
c001b15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b167:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b16d:	8d 50 01             	lea    edx,[eax+0x1]
c001b170:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b174:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b17a:	31 d2                	xor    edx,edx
c001b17c:	88 c2                	mov    dl,al
c001b17e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b182:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b186:	83 e1 3f             	and    ecx,0x3f
c001b189:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b18d:	90                   	nop
c001b18e:	83 c4 0c             	add    esp,0xc
c001b191:	c3                   	ret    
c001b192:	66 90                	xchg   ax,ax
c001b194:	66 90                	xchg   ax,ax
c001b196:	66 90                	xchg   ax,ax
c001b198:	66 90                	xchg   ax,ax
c001b19a:	66 90                	xchg   ax,ax
c001b19c:	66 90                	xchg   ax,ax
c001b19e:	66 90                	xchg   ax,ax

c001b1a0 <avxDetect>:
c001b1a0:	b8 01 00 00 00       	mov    eax,0x1
c001b1a5:	0f a2                	cpuid  
c001b1a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b1ad:	74 15                	je     c001b1c4 <avxDetect.noAVX>
c001b1af:	b8 01 00 00 00       	mov    eax,0x1
c001b1b4:	0f a2                	cpuid  
c001b1b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b1bc:	74 06                	je     c001b1c4 <avxDetect.noAVX>
c001b1be:	b8 01 00 00 00       	mov    eax,0x1
c001b1c3:	c3                   	ret    

c001b1c4 <avxDetect.noAVX>:
c001b1c4:	b8 00 00 00 00       	mov    eax,0x0
c001b1c9:	c3                   	ret    

c001b1ca <avxSave>:
c001b1ca:	53                   	push   ebx
c001b1cb:	52                   	push   edx
c001b1cc:	31 c0                	xor    eax,eax
c001b1ce:	48                   	dec    eax
c001b1cf:	89 c2                	mov    edx,eax
c001b1d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1d5:	0f ae 23             	xsave  [ebx]
c001b1d8:	5a                   	pop    edx
c001b1d9:	5b                   	pop    ebx
c001b1da:	c3                   	ret    

c001b1db <avxLoad>:
c001b1db:	53                   	push   ebx
c001b1dc:	52                   	push   edx
c001b1dd:	31 c0                	xor    eax,eax
c001b1df:	48                   	dec    eax
c001b1e0:	89 c2                	mov    edx,eax
c001b1e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1e6:	0f ae 2b             	xrstor [ebx]
c001b1e9:	5a                   	pop    edx
c001b1ea:	5b                   	pop    ebx
c001b1eb:	c3                   	ret    

c001b1ec <avxInit>:
c001b1ec:	e8 57 02 00 00       	call   c001b448 <sseInit>
c001b1f1:	50                   	push   eax
c001b1f2:	51                   	push   ecx
c001b1f3:	0f 20 e0             	mov    eax,cr4
c001b1f6:	0d 00 00 04 00       	or     eax,0x40000
c001b1fb:	0f 22 e0             	mov    cr4,eax
c001b1fe:	31 c9                	xor    ecx,ecx
c001b200:	0f 01 d0             	xgetbv 
c001b203:	0d 07 00 00 00       	or     eax,0x7
c001b208:	0f 01 d1             	xsetbv 
c001b20b:	59                   	pop    ecx
c001b20c:	58                   	pop    eax
c001b20d:	c3                   	ret    

c001b20e <avxClose>:
c001b20e:	c3                   	ret    

c001b20f <wouldSheSayYes>:
c001b20f:	c3                   	ret    
c001b210:	49                   	dec    ecx
c001b211:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b215:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b219:	75 20                	jne    c001b23b <isr0+0xb>
c001b21b:	4e                   	dec    esi
c001b21c:	79 61                	jns    c001b27f <isr7+0x3>
c001b21e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b223:	66 90                	xchg   ax,ax
c001b225:	66 90                	xchg   ax,ax
c001b227:	66 90                	xchg   ax,ax
c001b229:	66 90                	xchg   ax,ax
c001b22b:	66 90                	xchg   ax,ax
c001b22d:	66 90                	xchg   ax,ax
c001b22f:	90                   	nop

c001b230 <isr0>:
c001b230:	fa                   	cli    
c001b231:	68 00 00 00 00       	push   0x0
c001b236:	68 00 00 00 00       	push   0x0
c001b23b:	e9 44 01 00 00       	jmp    c001b384 <int_common_stub>

c001b240 <isr1>:
c001b240:	fa                   	cli    
c001b241:	6a 00                	push   0x0
c001b243:	6a 01                	push   0x1
c001b245:	e9 3a 01 00 00       	jmp    c001b384 <int_common_stub>

c001b24a <isr2>:
c001b24a:	fa                   	cli    
c001b24b:	6a 00                	push   0x0
c001b24d:	6a 02                	push   0x2
c001b24f:	e9 30 01 00 00       	jmp    c001b384 <int_common_stub>

c001b254 <isr3>:
c001b254:	fa                   	cli    
c001b255:	6a 00                	push   0x0
c001b257:	6a 03                	push   0x3
c001b259:	e9 26 01 00 00       	jmp    c001b384 <int_common_stub>

c001b25e <isr4>:
c001b25e:	fa                   	cli    
c001b25f:	6a 00                	push   0x0
c001b261:	6a 04                	push   0x4
c001b263:	e9 1c 01 00 00       	jmp    c001b384 <int_common_stub>

c001b268 <isr5>:
c001b268:	fa                   	cli    
c001b269:	6a 00                	push   0x0
c001b26b:	6a 05                	push   0x5
c001b26d:	e9 12 01 00 00       	jmp    c001b384 <int_common_stub>

c001b272 <isr6>:
c001b272:	fa                   	cli    
c001b273:	6a 00                	push   0x0
c001b275:	6a 06                	push   0x6
c001b277:	e9 08 01 00 00       	jmp    c001b384 <int_common_stub>

c001b27c <isr7>:
c001b27c:	fa                   	cli    
c001b27d:	6a 00                	push   0x0
c001b27f:	6a 07                	push   0x7
c001b281:	e9 fe 00 00 00       	jmp    c001b384 <int_common_stub>

c001b286 <isr8>:
c001b286:	fa                   	cli    
c001b287:	6a 08                	push   0x8
c001b289:	e9 f6 00 00 00       	jmp    c001b384 <int_common_stub>

c001b28e <isr9>:
c001b28e:	fa                   	cli    
c001b28f:	6a 00                	push   0x0
c001b291:	6a 09                	push   0x9
c001b293:	e9 ec 00 00 00       	jmp    c001b384 <int_common_stub>

c001b298 <isr10>:
c001b298:	fa                   	cli    
c001b299:	6a 0a                	push   0xa
c001b29b:	e9 e4 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2a0 <isr11>:
c001b2a0:	fa                   	cli    
c001b2a1:	6a 0b                	push   0xb
c001b2a3:	e9 dc 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2a8 <isr12>:
c001b2a8:	fa                   	cli    
c001b2a9:	6a 0c                	push   0xc
c001b2ab:	e9 d4 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2b0 <isr13>:
c001b2b0:	fa                   	cli    
c001b2b1:	6a 0d                	push   0xd
c001b2b3:	e9 cc 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2b8 <isr14>:
c001b2b8:	fa                   	cli    
c001b2b9:	6a 0e                	push   0xe
c001b2bb:	e9 c4 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2c0 <isr15>:
c001b2c0:	fa                   	cli    
c001b2c1:	6a 00                	push   0x0
c001b2c3:	6a 0f                	push   0xf
c001b2c5:	e9 ba 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2ca <isr16>:
c001b2ca:	fa                   	cli    
c001b2cb:	6a 00                	push   0x0
c001b2cd:	6a 10                	push   0x10
c001b2cf:	e9 b0 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2d4 <isr17>:
c001b2d4:	fa                   	cli    
c001b2d5:	6a 00                	push   0x0
c001b2d7:	6a 11                	push   0x11
c001b2d9:	e9 a6 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2de <isr18>:
c001b2de:	fa                   	cli    
c001b2df:	6a 00                	push   0x0
c001b2e1:	6a 12                	push   0x12
c001b2e3:	e9 9c 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2e8 <irq3>:
c001b2e8:	fa                   	cli    
c001b2e9:	6a 00                	push   0x0
c001b2eb:	6a 23                	push   0x23
c001b2ed:	e9 92 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2f2 <irq4>:
c001b2f2:	fa                   	cli    
c001b2f3:	6a 00                	push   0x0
c001b2f5:	6a 24                	push   0x24
c001b2f7:	e9 88 00 00 00       	jmp    c001b384 <int_common_stub>

c001b2fc <irq5>:
c001b2fc:	fa                   	cli    
c001b2fd:	6a 00                	push   0x0
c001b2ff:	6a 25                	push   0x25
c001b301:	e9 7e 00 00 00       	jmp    c001b384 <int_common_stub>

c001b306 <irq6>:
c001b306:	fa                   	cli    
c001b307:	6a 00                	push   0x0
c001b309:	6a 26                	push   0x26
c001b30b:	e9 74 00 00 00       	jmp    c001b384 <int_common_stub>

c001b310 <irq7>:
c001b310:	fa                   	cli    
c001b311:	6a 00                	push   0x0
c001b313:	6a 27                	push   0x27
c001b315:	e9 6a 00 00 00       	jmp    c001b384 <int_common_stub>

c001b31a <irq8>:
c001b31a:	fa                   	cli    
c001b31b:	6a 00                	push   0x0
c001b31d:	6a 28                	push   0x28
c001b31f:	e9 60 00 00 00       	jmp    c001b384 <int_common_stub>

c001b324 <irq9>:
c001b324:	fa                   	cli    
c001b325:	6a 00                	push   0x0
c001b327:	6a 29                	push   0x29
c001b329:	e9 56 00 00 00       	jmp    c001b384 <int_common_stub>

c001b32e <irq10>:
c001b32e:	fa                   	cli    
c001b32f:	6a 00                	push   0x0
c001b331:	6a 2a                	push   0x2a
c001b333:	e9 4c 00 00 00       	jmp    c001b384 <int_common_stub>

c001b338 <irq11>:
c001b338:	fa                   	cli    
c001b339:	6a 00                	push   0x0
c001b33b:	6a 2b                	push   0x2b
c001b33d:	e9 42 00 00 00       	jmp    c001b384 <int_common_stub>

c001b342 <irq12>:
c001b342:	fa                   	cli    
c001b343:	6a 00                	push   0x0
c001b345:	6a 2c                	push   0x2c
c001b347:	e9 38 00 00 00       	jmp    c001b384 <int_common_stub>

c001b34c <irq13>:
c001b34c:	fa                   	cli    
c001b34d:	6a 00                	push   0x0
c001b34f:	6a 2d                	push   0x2d
c001b351:	e9 2e 00 00 00       	jmp    c001b384 <int_common_stub>

c001b356 <irq14>:
c001b356:	fa                   	cli    
c001b357:	6a 00                	push   0x0
c001b359:	6a 2e                	push   0x2e
c001b35b:	e9 24 00 00 00       	jmp    c001b384 <int_common_stub>

c001b360 <irq15>:
c001b360:	fa                   	cli    
c001b361:	6a 00                	push   0x0
c001b363:	6a 2f                	push   0x2f
c001b365:	e9 1a 00 00 00       	jmp    c001b384 <int_common_stub>

c001b36a <irq1>:
c001b36a:	fa                   	cli    
c001b36b:	6a 00                	push   0x0
c001b36d:	6a 21                	push   0x21
c001b36f:	eb 13                	jmp    c001b384 <int_common_stub>

c001b371 <irq2>:
c001b371:	fa                   	cli    
c001b372:	6a 00                	push   0x0
c001b374:	6a 22                	push   0x22
c001b376:	eb 0c                	jmp    c001b384 <int_common_stub>

c001b378 <isr96>:
c001b378:	6a 00                	push   0x0
c001b37a:	6a 60                	push   0x60
c001b37c:	fb                   	sti    
c001b37d:	eb 05                	jmp    c001b384 <int_common_stub>

c001b37f <irq0>:
c001b37f:	fa                   	cli    
c001b380:	6a 00                	push   0x0
c001b382:	6a 20                	push   0x20

c001b384 <int_common_stub>:
c001b384:	60                   	pusha  
c001b385:	1e                   	push   ds
c001b386:	06                   	push   es
c001b387:	0f a0                	push   fs
c001b389:	0f a8                	push   gs
c001b38b:	66 b8 10 00          	mov    ax,0x10
c001b38f:	66 8e d8             	mov    ds,ax
c001b392:	66 8e c0             	mov    es,ax
c001b395:	66 8e e0             	mov    fs,ax
c001b398:	66 8e e8             	mov    gs,ax
c001b39b:	54                   	push   esp
c001b39c:	fc                   	cld    
c001b39d:	e8 5e ff fe ff       	call   c000b300 <int_handler>
c001b3a2:	81 c4 04 00 00 00    	add    esp,0x4
c001b3a8:	0f a9                	pop    gs
c001b3aa:	0f a1                	pop    fs
c001b3ac:	07                   	pop    es
c001b3ad:	1f                   	pop    ds
c001b3ae:	61                   	popa   
c001b3af:	81 c4 08 00 00 00    	add    esp,0x8
c001b3b5:	cf                   	iret   

c001b3b6 <irq16>:
c001b3b6:	fa                   	cli    
c001b3b7:	6a 00                	push   0x0
c001b3b9:	6a 30                	push   0x30
c001b3bb:	e9 c4 ff ff ff       	jmp    c001b384 <int_common_stub>

c001b3c0 <irq17>:
c001b3c0:	fa                   	cli    
c001b3c1:	6a 00                	push   0x0
c001b3c3:	6a 31                	push   0x31
c001b3c5:	e9 ba ff ff ff       	jmp    c001b384 <int_common_stub>

c001b3ca <irq18>:
c001b3ca:	fa                   	cli    
c001b3cb:	6a 00                	push   0x0
c001b3cd:	6a 32                	push   0x32
c001b3cf:	e9 b0 ff ff ff       	jmp    c001b384 <int_common_stub>

c001b3d4 <irq19>:
c001b3d4:	fa                   	cli    
c001b3d5:	6a 00                	push   0x0
c001b3d7:	6a 33                	push   0x33
c001b3d9:	e9 a6 ff ff ff       	jmp    c001b384 <int_common_stub>

c001b3de <irq20>:
c001b3de:	fa                   	cli    
c001b3df:	6a 00                	push   0x0
c001b3e1:	6a 34                	push   0x34
c001b3e3:	e9 9c ff ff ff       	jmp    c001b384 <int_common_stub>

c001b3e8 <irq21>:
c001b3e8:	fa                   	cli    
c001b3e9:	6a 00                	push   0x0
c001b3eb:	6a 35                	push   0x35
c001b3ed:	e9 92 ff ff ff       	jmp    c001b384 <int_common_stub>

c001b3f2 <irq22>:
c001b3f2:	fa                   	cli    
c001b3f3:	6a 00                	push   0x0
c001b3f5:	6a 36                	push   0x36
c001b3f7:	e9 88 ff ff ff       	jmp    c001b384 <int_common_stub>

c001b3fc <irq23>:
c001b3fc:	fa                   	cli    
c001b3fd:	6a 00                	push   0x0
c001b3ff:	6a 37                	push   0x37
c001b401:	e9 7e ff ff ff       	jmp    c001b384 <int_common_stub>
c001b406:	66 90                	xchg   ax,ax
c001b408:	66 90                	xchg   ax,ax
c001b40a:	66 90                	xchg   ax,ax
c001b40c:	66 90                	xchg   ax,ax
c001b40e:	66 90                	xchg   ax,ax

c001b410 <i386GetRDRAND>:
c001b410:	b9 64 00 00 00       	mov    ecx,0x64

c001b415 <retry>:
c001b415:	0f c7 f0             	rdrand eax
c001b418:	72 05                	jb     c001b41f <retry.done>
c001b41a:	e2 f9                	loop   c001b415 <retry>

c001b41c <retry.fail>:
c001b41c:	31 c0                	xor    eax,eax
c001b41e:	c3                   	ret    

c001b41f <retry.done>:
c001b41f:	c3                   	ret    

c001b420 <absolutelyNoChanceInHell>:
c001b420:	b8 01 00 00 00       	mov    eax,0x1
c001b425:	0f a2                	cpuid  
c001b427:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b42d:	74 06                	je     c001b435 <sseDetect.noSSE>
c001b42f:	b8 01 00 00 00       	mov    eax,0x1
c001b434:	c3                   	ret    

c001b435 <sseDetect.noSSE>:
c001b435:	31 c0                	xor    eax,eax
c001b437:	c3                   	ret    

c001b438 <sseSave>:
c001b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b43c:	0f ae 00             	fxsave [eax]
c001b43f:	c3                   	ret    

c001b440 <sseLoad>:
c001b440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b444:	0f ae 08             	fxrstor [eax]
c001b447:	c3                   	ret    

c001b448 <sseInit>:
c001b448:	e8 42 00 00 00       	call   c001b48f <x87Init>
c001b44d:	0f 20 e0             	mov    eax,cr4
c001b450:	66 0d 00 06          	or     ax,0x600
c001b454:	0f 22 e0             	mov    cr4,eax
c001b457:	c3                   	ret    

c001b458 <sseClose>:
c001b458:	c3                   	ret    
c001b459:	66 90                	xchg   ax,ax
c001b45b:	66 90                	xchg   ax,ax
c001b45d:	66 90                	xchg   ax,ax
c001b45f:	90                   	nop

c001b460 <value_37F>:
c001b460:	7f 03                	jg     c001b465 <value_37A+0x1>

c001b462 <value_37E>:
c001b462:	7e 03                	jle    c001b467 <x87Detect+0x1>

c001b464 <value_37A>:
c001b464:	7a 03                	jp     c001b469 <x87Detect+0x3>

c001b466 <x87Detect>:
c001b466:	b8 01 00 00 00       	mov    eax,0x1
c001b46b:	0f a2                	cpuid  
c001b46d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b473:	74 06                	je     c001b47b <x87Detect.nox87>
c001b475:	b8 01 00 00 00       	mov    eax,0x1
c001b47a:	c3                   	ret    

c001b47b <x87Detect.nox87>:
c001b47b:	b8 00 00 00 00       	mov    eax,0x0
c001b480:	c3                   	ret    

c001b481 <x87Save>:
c001b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b485:	dd 30                	fnsave [eax]
c001b487:	c3                   	ret    

c001b488 <x87Load>:
c001b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b48c:	dd 20                	frstor [eax]
c001b48e:	c3                   	ret    

c001b48f <x87Init>:
c001b48f:	0f 20 c0             	mov    eax,cr0
c001b492:	66 25 fb ff          	and    ax,0xfffb
c001b496:	66 0d 22 00          	or     ax,0x22
c001b49a:	0f 22 c0             	mov    cr0,eax
c001b49d:	db e3                	fninit 
c001b49f:	0f 06                	clts   
c001b4a1:	d9 2d 64 b4 01 c0    	fldcw  WORD PTR ds:0xc001b464
c001b4a7:	c3                   	ret    

c001b4a8 <x87Close>:
c001b4a8:	c3                   	ret    
c001b4a9:	66 90                	xchg   ax,ax
c001b4ab:	90                   	nop

c001b4ac <__do_global_ctors_aux>:
c001b4ac:	a1 5c c4 01 c0       	mov    eax,ds:0xc001c45c
c001b4b1:	83 f8 ff             	cmp    eax,0xffffffff
c001b4b4:	74 1a                	je     c001b4d0 <__do_global_ctors_aux+0x24>
c001b4b6:	55                   	push   ebp
c001b4b7:	89 e5                	mov    ebp,esp
c001b4b9:	53                   	push   ebx
c001b4ba:	52                   	push   edx
c001b4bb:	bb 5c c4 01 c0       	mov    ebx,0xc001c45c
c001b4c0:	ff d0                	call   eax
c001b4c2:	83 eb 04             	sub    ebx,0x4
c001b4c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4c7:	83 f8 ff             	cmp    eax,0xffffffff
c001b4ca:	75 f4                	jne    c001b4c0 <__do_global_ctors_aux+0x14>
c001b4cc:	58                   	pop    eax
c001b4cd:	5b                   	pop    ebx
c001b4ce:	5d                   	pop    ebp
c001b4cf:	c3                   	ret    
c001b4d0:	c3                   	ret    
c001b4d1:	66 90                	xchg   ax,ax
c001b4d3:	90                   	nop

c001b4d4 <__divdi3>:
c001b4d4:	55                   	push   ebp
c001b4d5:	57                   	push   edi
c001b4d6:	56                   	push   esi
c001b4d7:	53                   	push   ebx
c001b4d8:	83 ec 1c             	sub    esp,0x1c
c001b4db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b4df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b4e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b4e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b4ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b4ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b4f2:	85 db                	test   ebx,ebx
c001b4f4:	0f 88 8e 00 00 00    	js     c001b588 <__divdi3+0xb4>
c001b4fa:	89 dd                	mov    ebp,ebx
c001b4fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b504:	89 d3                	mov    ebx,edx
c001b506:	85 d2                	test   edx,edx
c001b508:	79 0d                	jns    c001b517 <__divdi3+0x43>
c001b50a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b50e:	f7 d8                	neg    eax
c001b510:	83 d2 00             	adc    edx,0x0
c001b513:	f7 da                	neg    edx
c001b515:	89 d3                	mov    ebx,edx
c001b517:	89 c7                	mov    edi,eax
c001b519:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b51c:	85 db                	test   ebx,ebx
c001b51e:	75 48                	jne    c001b568 <__divdi3+0x94>
c001b520:	39 ef                	cmp    edi,ebp
c001b522:	76 24                	jbe    c001b548 <__divdi3+0x74>
c001b524:	89 ea                	mov    edx,ebp
c001b526:	f7 f7                	div    edi
c001b528:	89 c1                	mov    ecx,eax
c001b52a:	31 f6                	xor    esi,esi
c001b52c:	89 c8                	mov    eax,ecx
c001b52e:	89 f2                	mov    edx,esi
c001b530:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b534:	85 c9                	test   ecx,ecx
c001b536:	74 07                	je     c001b53f <__divdi3+0x6b>
c001b538:	f7 d8                	neg    eax
c001b53a:	83 d2 00             	adc    edx,0x0
c001b53d:	f7 da                	neg    edx
c001b53f:	83 c4 1c             	add    esp,0x1c
c001b542:	5b                   	pop    ebx
c001b543:	5e                   	pop    esi
c001b544:	5f                   	pop    edi
c001b545:	5d                   	pop    ebp
c001b546:	c3                   	ret    
c001b547:	90                   	nop
c001b548:	85 ff                	test   edi,edi
c001b54a:	75 0b                	jne    c001b557 <__divdi3+0x83>
c001b54c:	b8 01 00 00 00       	mov    eax,0x1
c001b551:	31 d2                	xor    edx,edx
c001b553:	f7 f3                	div    ebx
c001b555:	89 c7                	mov    edi,eax
c001b557:	31 d2                	xor    edx,edx
c001b559:	89 e8                	mov    eax,ebp
c001b55b:	f7 f7                	div    edi
c001b55d:	89 c6                	mov    esi,eax
c001b55f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b562:	f7 f7                	div    edi
c001b564:	89 c1                	mov    ecx,eax
c001b566:	eb c4                	jmp    c001b52c <__divdi3+0x58>
c001b568:	39 eb                	cmp    ebx,ebp
c001b56a:	77 3c                	ja     c001b5a8 <__divdi3+0xd4>
c001b56c:	0f bd f3             	bsr    esi,ebx
c001b56f:	83 f6 1f             	xor    esi,0x1f
c001b572:	75 40                	jne    c001b5b4 <__divdi3+0xe0>
c001b574:	39 eb                	cmp    ebx,ebp
c001b576:	72 09                	jb     c001b581 <__divdi3+0xad>
c001b578:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b57b:	0f 87 97 00 00 00    	ja     c001b618 <__divdi3+0x144>
c001b581:	b9 01 00 00 00       	mov    ecx,0x1
c001b586:	eb a4                	jmp    c001b52c <__divdi3+0x58>
c001b588:	f7 d9                	neg    ecx
c001b58a:	83 d3 00             	adc    ebx,0x0
c001b58d:	f7 db                	neg    ebx
c001b58f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b592:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b596:	89 dd                	mov    ebp,ebx
c001b598:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b5a0:	e9 5f ff ff ff       	jmp    c001b504 <__divdi3+0x30>
c001b5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5a8:	31 f6                	xor    esi,esi
c001b5aa:	31 c9                	xor    ecx,ecx
c001b5ac:	e9 7b ff ff ff       	jmp    c001b52c <__divdi3+0x58>
c001b5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5b4:	b8 20 00 00 00       	mov    eax,0x20
c001b5b9:	29 f0                	sub    eax,esi
c001b5bb:	89 f1                	mov    ecx,esi
c001b5bd:	d3 e3                	shl    ebx,cl
c001b5bf:	89 fa                	mov    edx,edi
c001b5c1:	88 c1                	mov    cl,al
c001b5c3:	d3 ea                	shr    edx,cl
c001b5c5:	09 da                	or     edx,ebx
c001b5c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b5cb:	89 f1                	mov    ecx,esi
c001b5cd:	d3 e7                	shl    edi,cl
c001b5cf:	89 eb                	mov    ebx,ebp
c001b5d1:	88 c1                	mov    cl,al
c001b5d3:	d3 eb                	shr    ebx,cl
c001b5d5:	89 f1                	mov    ecx,esi
c001b5d7:	d3 e5                	shl    ebp,cl
c001b5d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b5dc:	88 c1                	mov    cl,al
c001b5de:	d3 ea                	shr    edx,cl
c001b5e0:	09 d5                	or     ebp,edx
c001b5e2:	89 e8                	mov    eax,ebp
c001b5e4:	89 da                	mov    edx,ebx
c001b5e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b5ea:	89 d3                	mov    ebx,edx
c001b5ec:	89 c5                	mov    ebp,eax
c001b5ee:	f7 e7                	mul    edi
c001b5f0:	39 d3                	cmp    ebx,edx
c001b5f2:	72 18                	jb     c001b60c <__divdi3+0x138>
c001b5f4:	74 0a                	je     c001b600 <__divdi3+0x12c>
c001b5f6:	89 e9                	mov    ecx,ebp
c001b5f8:	31 f6                	xor    esi,esi
c001b5fa:	e9 2d ff ff ff       	jmp    c001b52c <__divdi3+0x58>
c001b5ff:	90                   	nop
c001b600:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001b603:	89 f1                	mov    ecx,esi
c001b605:	d3 e7                	shl    edi,cl
c001b607:	39 c7                	cmp    edi,eax
c001b609:	73 eb                	jae    c001b5f6 <__divdi3+0x122>
c001b60b:	90                   	nop
c001b60c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001b60f:	31 f6                	xor    esi,esi
c001b611:	e9 16 ff ff ff       	jmp    c001b52c <__divdi3+0x58>
c001b616:	66 90                	xchg   ax,ax
c001b618:	31 c9                	xor    ecx,ecx
c001b61a:	e9 0d ff ff ff       	jmp    c001b52c <__divdi3+0x58>
c001b61f:	90                   	nop

c001b620 <__moddi3>:
c001b620:	55                   	push   ebp
c001b621:	57                   	push   edi
c001b622:	56                   	push   esi
c001b623:	53                   	push   ebx
c001b624:	83 ec 2c             	sub    esp,0x2c
c001b627:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b62b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001b62f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b633:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001b637:	85 db                	test   ebx,ebx
c001b639:	0f 88 85 00 00 00    	js     c001b6c4 <__moddi3+0xa4>
c001b63f:	89 de                	mov    esi,ebx
c001b641:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b649:	89 d7                	mov    edi,edx
c001b64b:	85 d2                	test   edx,edx
c001b64d:	79 09                	jns    c001b658 <__moddi3+0x38>
c001b64f:	f7 d8                	neg    eax
c001b651:	83 d2 00             	adc    edx,0x0
c001b654:	f7 da                	neg    edx
c001b656:	89 d7                	mov    edi,edx
c001b658:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b65c:	89 cd                	mov    ebp,ecx
c001b65e:	85 ff                	test   edi,edi
c001b660:	75 52                	jne    c001b6b4 <__moddi3+0x94>
c001b662:	89 c3                	mov    ebx,eax
c001b664:	39 f0                	cmp    eax,esi
c001b666:	76 24                	jbe    c001b68c <__moddi3+0x6c>
c001b668:	89 c8                	mov    eax,ecx
c001b66a:	89 f2                	mov    edx,esi
c001b66c:	f7 f3                	div    ebx
c001b66e:	89 d6                	mov    esi,edx
c001b670:	89 f0                	mov    eax,esi
c001b672:	31 d2                	xor    edx,edx
c001b674:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b678:	85 c9                	test   ecx,ecx
c001b67a:	74 07                	je     c001b683 <__moddi3+0x63>
c001b67c:	f7 d8                	neg    eax
c001b67e:	83 d2 00             	adc    edx,0x0
c001b681:	f7 da                	neg    edx
c001b683:	83 c4 2c             	add    esp,0x2c
c001b686:	5b                   	pop    ebx
c001b687:	5e                   	pop    esi
c001b688:	5f                   	pop    edi
c001b689:	5d                   	pop    ebp
c001b68a:	c3                   	ret    
c001b68b:	90                   	nop
c001b68c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b690:	85 db                	test   ebx,ebx
c001b692:	75 0d                	jne    c001b6a1 <__moddi3+0x81>
c001b694:	b8 01 00 00 00       	mov    eax,0x1
c001b699:	31 d2                	xor    edx,edx
c001b69b:	f7 f7                	div    edi
c001b69d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6a1:	89 f0                	mov    eax,esi
c001b6a3:	31 d2                	xor    edx,edx
c001b6a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b6a9:	f7 f7                	div    edi
c001b6ab:	89 e8                	mov    eax,ebp
c001b6ad:	f7 f7                	div    edi
c001b6af:	89 d6                	mov    esi,edx
c001b6b1:	eb bd                	jmp    c001b670 <__moddi3+0x50>
c001b6b3:	90                   	nop
c001b6b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b6b8:	39 f7                	cmp    edi,esi
c001b6ba:	76 20                	jbe    c001b6dc <__moddi3+0xbc>
c001b6bc:	89 c8                	mov    eax,ecx
c001b6be:	89 f2                	mov    edx,esi
c001b6c0:	eb b2                	jmp    c001b674 <__moddi3+0x54>
c001b6c2:	66 90                	xchg   ax,ax
c001b6c4:	f7 d9                	neg    ecx
c001b6c6:	83 d3 00             	adc    ebx,0x0
c001b6c9:	f7 db                	neg    ebx
c001b6cb:	89 de                	mov    esi,ebx
c001b6cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001b6d5:	e9 6f ff ff ff       	jmp    c001b649 <__moddi3+0x29>
c001b6da:	66 90                	xchg   ax,ax
c001b6dc:	0f bd c7             	bsr    eax,edi
c001b6df:	83 f0 1f             	xor    eax,0x1f
c001b6e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b6e6:	75 24                	jne    c001b70c <__moddi3+0xec>
c001b6e8:	39 f7                	cmp    edi,esi
c001b6ea:	72 06                	jb     c001b6f2 <__moddi3+0xd2>
c001b6ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001b6f0:	77 0c                	ja     c001b6fe <__moddi3+0xde>
c001b6f2:	89 e9                	mov    ecx,ebp
c001b6f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001b6f8:	19 fe                	sbb    esi,edi
c001b6fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b6fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b702:	89 f2                	mov    edx,esi
c001b704:	e9 6b ff ff ff       	jmp    c001b674 <__moddi3+0x54>
c001b709:	8d 76 00             	lea    esi,[esi+0x0]
c001b70c:	b8 20 00 00 00       	mov    eax,0x20
c001b711:	89 c2                	mov    edx,eax
c001b713:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b717:	29 da                	sub    edx,ebx
c001b719:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b71d:	88 d9                	mov    cl,bl
c001b71f:	d3 e7                	shl    edi,cl
c001b721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b725:	88 d1                	mov    cl,dl
c001b727:	d3 e8                	shr    eax,cl
c001b729:	09 c7                	or     edi,eax
c001b72b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001b72f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b733:	89 d8                	mov    eax,ebx
c001b735:	88 d9                	mov    cl,bl
c001b737:	d3 e7                	shl    edi,cl
c001b739:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b73d:	89 f3                	mov    ebx,esi
c001b73f:	88 d1                	mov    cl,dl
c001b741:	d3 eb                	shr    ebx,cl
c001b743:	89 c7                	mov    edi,eax
c001b745:	88 c1                	mov    cl,al
c001b747:	d3 e6                	shl    esi,cl
c001b749:	89 e8                	mov    eax,ebp
c001b74b:	88 d1                	mov    cl,dl
c001b74d:	d3 e8                	shr    eax,cl
c001b74f:	09 f0                	or     eax,esi
c001b751:	89 f9                	mov    ecx,edi
c001b753:	d3 e5                	shl    ebp,cl
c001b755:	89 da                	mov    edx,ebx
c001b757:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001b75b:	89 d3                	mov    ebx,edx
c001b75d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b761:	89 c6                	mov    esi,eax
c001b763:	89 d1                	mov    ecx,edx
c001b765:	39 d3                	cmp    ebx,edx
c001b767:	72 27                	jb     c001b790 <__moddi3+0x170>
c001b769:	74 21                	je     c001b78c <__moddi3+0x16c>
c001b76b:	29 f5                	sub    ebp,esi
c001b76d:	19 cb                	sbb    ebx,ecx
c001b76f:	89 de                	mov    esi,ebx
c001b771:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001b775:	d3 e6                	shl    esi,cl
c001b777:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b77b:	89 f9                	mov    ecx,edi
c001b77d:	d3 ed                	shr    ebp,cl
c001b77f:	09 ee                	or     esi,ebp
c001b781:	89 f0                	mov    eax,esi
c001b783:	d3 eb                	shr    ebx,cl
c001b785:	89 da                	mov    edx,ebx
c001b787:	e9 e8 fe ff ff       	jmp    c001b674 <__moddi3+0x54>
c001b78c:	39 c5                	cmp    ebp,eax
c001b78e:	73 db                	jae    c001b76b <__moddi3+0x14b>
c001b790:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b794:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001b798:	89 d1                	mov    ecx,edx
c001b79a:	89 c6                	mov    esi,eax
c001b79c:	eb cd                	jmp    c001b76b <__moddi3+0x14b>
c001b79e:	66 90                	xchg   ax,ax

c001b7a0 <__udivdi3>:
c001b7a0:	55                   	push   ebp
c001b7a1:	57                   	push   edi
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	83 ec 1c             	sub    esp,0x1c
c001b7a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b7ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b7af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b7b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b7b7:	85 d2                	test   edx,edx
c001b7b9:	75 41                	jne    c001b7fc <__udivdi3+0x5c>
c001b7bb:	39 f7                	cmp    edi,esi
c001b7bd:	76 15                	jbe    c001b7d4 <__udivdi3+0x34>
c001b7bf:	89 e8                	mov    eax,ebp
c001b7c1:	89 f2                	mov    edx,esi
c001b7c3:	f7 f7                	div    edi
c001b7c5:	31 db                	xor    ebx,ebx
c001b7c7:	89 da                	mov    edx,ebx
c001b7c9:	83 c4 1c             	add    esp,0x1c
c001b7cc:	5b                   	pop    ebx
c001b7cd:	5e                   	pop    esi
c001b7ce:	5f                   	pop    edi
c001b7cf:	5d                   	pop    ebp
c001b7d0:	c3                   	ret    
c001b7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d4:	89 f9                	mov    ecx,edi
c001b7d6:	85 ff                	test   edi,edi
c001b7d8:	75 0b                	jne    c001b7e5 <__udivdi3+0x45>
c001b7da:	b8 01 00 00 00       	mov    eax,0x1
c001b7df:	31 d2                	xor    edx,edx
c001b7e1:	f7 f7                	div    edi
c001b7e3:	89 c1                	mov    ecx,eax
c001b7e5:	31 d2                	xor    edx,edx
c001b7e7:	89 f0                	mov    eax,esi
c001b7e9:	f7 f1                	div    ecx
c001b7eb:	89 c3                	mov    ebx,eax
c001b7ed:	89 e8                	mov    eax,ebp
c001b7ef:	f7 f1                	div    ecx
c001b7f1:	89 da                	mov    edx,ebx
c001b7f3:	83 c4 1c             	add    esp,0x1c
c001b7f6:	5b                   	pop    ebx
c001b7f7:	5e                   	pop    esi
c001b7f8:	5f                   	pop    edi
c001b7f9:	5d                   	pop    ebp
c001b7fa:	c3                   	ret    
c001b7fb:	90                   	nop
c001b7fc:	39 f2                	cmp    edx,esi
c001b7fe:	77 1c                	ja     c001b81c <__udivdi3+0x7c>
c001b800:	0f bd da             	bsr    ebx,edx
c001b803:	83 f3 1f             	xor    ebx,0x1f
c001b806:	75 24                	jne    c001b82c <__udivdi3+0x8c>
c001b808:	39 f2                	cmp    edx,esi
c001b80a:	72 08                	jb     c001b814 <__udivdi3+0x74>
c001b80c:	39 ef                	cmp    edi,ebp
c001b80e:	0f 87 84 00 00 00    	ja     c001b898 <__udivdi3+0xf8>
c001b814:	b8 01 00 00 00       	mov    eax,0x1
c001b819:	eb ac                	jmp    c001b7c7 <__udivdi3+0x27>
c001b81b:	90                   	nop
c001b81c:	31 db                	xor    ebx,ebx
c001b81e:	31 c0                	xor    eax,eax
c001b820:	89 da                	mov    edx,ebx
c001b822:	83 c4 1c             	add    esp,0x1c
c001b825:	5b                   	pop    ebx
c001b826:	5e                   	pop    esi
c001b827:	5f                   	pop    edi
c001b828:	5d                   	pop    ebp
c001b829:	c3                   	ret    
c001b82a:	66 90                	xchg   ax,ax
c001b82c:	b8 20 00 00 00       	mov    eax,0x20
c001b831:	29 d8                	sub    eax,ebx
c001b833:	88 d9                	mov    cl,bl
c001b835:	d3 e2                	shl    edx,cl
c001b837:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b83b:	89 fa                	mov    edx,edi
c001b83d:	88 c1                	mov    cl,al
c001b83f:	d3 ea                	shr    edx,cl
c001b841:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b845:	09 d1                	or     ecx,edx
c001b847:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b84b:	88 d9                	mov    cl,bl
c001b84d:	d3 e7                	shl    edi,cl
c001b84f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b853:	89 f7                	mov    edi,esi
c001b855:	88 c1                	mov    cl,al
c001b857:	d3 ef                	shr    edi,cl
c001b859:	88 d9                	mov    cl,bl
c001b85b:	d3 e6                	shl    esi,cl
c001b85d:	89 ea                	mov    edx,ebp
c001b85f:	88 c1                	mov    cl,al
c001b861:	d3 ea                	shr    edx,cl
c001b863:	09 d6                	or     esi,edx
c001b865:	89 f0                	mov    eax,esi
c001b867:	89 fa                	mov    edx,edi
c001b869:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b86d:	89 d7                	mov    edi,edx
c001b86f:	89 c6                	mov    esi,eax
c001b871:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b875:	39 d7                	cmp    edi,edx
c001b877:	72 13                	jb     c001b88c <__udivdi3+0xec>
c001b879:	74 09                	je     c001b884 <__udivdi3+0xe4>
c001b87b:	89 f0                	mov    eax,esi
c001b87d:	31 db                	xor    ebx,ebx
c001b87f:	e9 43 ff ff ff       	jmp    c001b7c7 <__udivdi3+0x27>
c001b884:	88 d9                	mov    cl,bl
c001b886:	d3 e5                	shl    ebp,cl
c001b888:	39 c5                	cmp    ebp,eax
c001b88a:	73 ef                	jae    c001b87b <__udivdi3+0xdb>
c001b88c:	8d 46 ff             	lea    eax,[esi-0x1]
c001b88f:	31 db                	xor    ebx,ebx
c001b891:	e9 31 ff ff ff       	jmp    c001b7c7 <__udivdi3+0x27>
c001b896:	66 90                	xchg   ax,ax
c001b898:	31 c0                	xor    eax,eax
c001b89a:	e9 28 ff ff ff       	jmp    c001b7c7 <__udivdi3+0x27>
c001b89f:	90                   	nop

c001b8a0 <__umoddi3>:
c001b8a0:	55                   	push   ebp
c001b8a1:	57                   	push   edi
c001b8a2:	56                   	push   esi
c001b8a3:	53                   	push   ebx
c001b8a4:	83 ec 1c             	sub    esp,0x1c
c001b8a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b8af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b8b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8b7:	89 da                	mov    edx,ebx
c001b8b9:	85 c0                	test   eax,eax
c001b8bb:	75 37                	jne    c001b8f4 <__umoddi3+0x54>
c001b8bd:	39 df                	cmp    edi,ebx
c001b8bf:	76 13                	jbe    c001b8d4 <__umoddi3+0x34>
c001b8c1:	89 f0                	mov    eax,esi
c001b8c3:	f7 f7                	div    edi
c001b8c5:	89 d0                	mov    eax,edx
c001b8c7:	31 d2                	xor    edx,edx
c001b8c9:	83 c4 1c             	add    esp,0x1c
c001b8cc:	5b                   	pop    ebx
c001b8cd:	5e                   	pop    esi
c001b8ce:	5f                   	pop    edi
c001b8cf:	5d                   	pop    ebp
c001b8d0:	c3                   	ret    
c001b8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d4:	89 fd                	mov    ebp,edi
c001b8d6:	85 ff                	test   edi,edi
c001b8d8:	75 0b                	jne    c001b8e5 <__umoddi3+0x45>
c001b8da:	b8 01 00 00 00       	mov    eax,0x1
c001b8df:	31 d2                	xor    edx,edx
c001b8e1:	f7 f7                	div    edi
c001b8e3:	89 c5                	mov    ebp,eax
c001b8e5:	89 d8                	mov    eax,ebx
c001b8e7:	31 d2                	xor    edx,edx
c001b8e9:	f7 f5                	div    ebp
c001b8eb:	89 f0                	mov    eax,esi
c001b8ed:	f7 f5                	div    ebp
c001b8ef:	89 d0                	mov    eax,edx
c001b8f1:	eb d4                	jmp    c001b8c7 <__umoddi3+0x27>
c001b8f3:	90                   	nop
c001b8f4:	89 f1                	mov    ecx,esi
c001b8f6:	39 d8                	cmp    eax,ebx
c001b8f8:	76 0a                	jbe    c001b904 <__umoddi3+0x64>
c001b8fa:	89 f0                	mov    eax,esi
c001b8fc:	83 c4 1c             	add    esp,0x1c
c001b8ff:	5b                   	pop    ebx
c001b900:	5e                   	pop    esi
c001b901:	5f                   	pop    edi
c001b902:	5d                   	pop    ebp
c001b903:	c3                   	ret    
c001b904:	0f bd e8             	bsr    ebp,eax
c001b907:	83 f5 1f             	xor    ebp,0x1f
c001b90a:	75 1c                	jne    c001b928 <__umoddi3+0x88>
c001b90c:	39 d8                	cmp    eax,ebx
c001b90e:	72 04                	jb     c001b914 <__umoddi3+0x74>
c001b910:	39 f7                	cmp    edi,esi
c001b912:	77 08                	ja     c001b91c <__umoddi3+0x7c>
c001b914:	89 da                	mov    edx,ebx
c001b916:	29 fe                	sub    esi,edi
c001b918:	19 c2                	sbb    edx,eax
c001b91a:	89 f1                	mov    ecx,esi
c001b91c:	89 c8                	mov    eax,ecx
c001b91e:	83 c4 1c             	add    esp,0x1c
c001b921:	5b                   	pop    ebx
c001b922:	5e                   	pop    esi
c001b923:	5f                   	pop    edi
c001b924:	5d                   	pop    ebp
c001b925:	c3                   	ret    
c001b926:	66 90                	xchg   ax,ax
c001b928:	ba 20 00 00 00       	mov    edx,0x20
c001b92d:	29 ea                	sub    edx,ebp
c001b92f:	89 e9                	mov    ecx,ebp
c001b931:	d3 e0                	shl    eax,cl
c001b933:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b937:	89 f8                	mov    eax,edi
c001b939:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b93d:	88 d1                	mov    cl,dl
c001b93f:	d3 e8                	shr    eax,cl
c001b941:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b945:	09 c1                	or     ecx,eax
c001b947:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b94b:	89 e9                	mov    ecx,ebp
c001b94d:	d3 e7                	shl    edi,cl
c001b94f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b953:	89 d8                	mov    eax,ebx
c001b955:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b959:	88 d1                	mov    cl,dl
c001b95b:	d3 e8                	shr    eax,cl
c001b95d:	89 c7                	mov    edi,eax
c001b95f:	89 e9                	mov    ecx,ebp
c001b961:	d3 e3                	shl    ebx,cl
c001b963:	89 f0                	mov    eax,esi
c001b965:	88 d1                	mov    cl,dl
c001b967:	d3 e8                	shr    eax,cl
c001b969:	09 d8                	or     eax,ebx
c001b96b:	89 e9                	mov    ecx,ebp
c001b96d:	d3 e6                	shl    esi,cl
c001b96f:	89 f3                	mov    ebx,esi
c001b971:	89 fa                	mov    edx,edi
c001b973:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b977:	89 d1                	mov    ecx,edx
c001b979:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b97d:	89 c6                	mov    esi,eax
c001b97f:	89 d7                	mov    edi,edx
c001b981:	39 d1                	cmp    ecx,edx
c001b983:	72 27                	jb     c001b9ac <__umoddi3+0x10c>
c001b985:	74 21                	je     c001b9a8 <__umoddi3+0x108>
c001b987:	89 ca                	mov    edx,ecx
c001b989:	29 f3                	sub    ebx,esi
c001b98b:	19 fa                	sbb    edx,edi
c001b98d:	89 d0                	mov    eax,edx
c001b98f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001b993:	d3 e0                	shl    eax,cl
c001b995:	89 e9                	mov    ecx,ebp
c001b997:	d3 eb                	shr    ebx,cl
c001b999:	09 d8                	or     eax,ebx
c001b99b:	d3 ea                	shr    edx,cl
c001b99d:	83 c4 1c             	add    esp,0x1c
c001b9a0:	5b                   	pop    ebx
c001b9a1:	5e                   	pop    esi
c001b9a2:	5f                   	pop    edi
c001b9a3:	5d                   	pop    ebp
c001b9a4:	c3                   	ret    
c001b9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a8:	39 c3                	cmp    ebx,eax
c001b9aa:	73 db                	jae    c001b987 <__umoddi3+0xe7>
c001b9ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b9b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001b9b4:	89 d7                	mov    edi,edx
c001b9b6:	89 c6                	mov    esi,eax
c001b9b8:	eb cd                	jmp    c001b987 <__umoddi3+0xe7>

Disassembly of section .init:

c001b9ba <_init>:
c001b9ba:	55                   	push   ebp
c001b9bb:	89 e5                	mov    ebp,esp
c001b9bd:	e8 56 47 fe ff       	call   c0000118 <frame_dummy>
c001b9c2:	e8 e5 fa ff ff       	call   c001b4ac <__do_global_ctors_aux>
c001b9c7:	5d                   	pop    ebp
c001b9c8:	c3                   	ret    

Disassembly of section .fini:

c001b9c9 <_fini>:
c001b9c9:	55                   	push   ebp
c001b9ca:	89 e5                	mov    ebp,esp
c001b9cc:	e8 d7 46 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001b9d1:	5d                   	pop    ebp
c001b9d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001b9d4 <Computer::~Computer()>:
c001b9d4:	83 ec 0c             	sub    esp,0xc
c001b9d7:	ba d0 cc 01 c0       	mov    edx,0xc001ccd0
c001b9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e0:	89 10                	mov    DWORD PTR [eax],edx
c001b9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e6:	83 ec 0c             	sub    esp,0xc
c001b9e9:	50                   	push   eax
c001b9ea:	e8 67 f3 fe ff       	call   c000ad56 <Device::~Device()>
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	90                   	nop
c001b9f3:	83 c4 0c             	add    esp,0xc
c001b9f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001b9f8 <Computer::~Computer()>:
c001b9f8:	83 ec 0c             	sub    esp,0xc
c001b9fb:	83 ec 0c             	sub    esp,0xc
c001b9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba02:	e8 cd ff ff ff       	call   c001b9d4 <Computer::~Computer()>
c001ba07:	83 c4 10             	add    esp,0x10
c001ba0a:	83 ec 08             	sub    esp,0x8
c001ba0d:	68 ec 01 00 00       	push   0x1ec
c001ba12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba16:	e8 03 df fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001ba1b:	83 c4 10             	add    esp,0x10
c001ba1e:	83 c4 0c             	add    esp,0xc
c001ba21:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ba22 <idleCommon()>:
c001ba22:	83 ec 0c             	sub    esp,0xc
c001ba25:	fa                   	cli    
c001ba26:	ff 05 88 2a 02 c0    	inc    DWORD PTR ds:0xc0022a88
c001ba2c:	e8 17 70 ff ff       	call   c0012a48 <schedule()>
c001ba31:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c001ba36:	48                   	dec    eax
c001ba37:	a3 88 2a 02 c0       	mov    ds:0xc0022a88,eax
c001ba3c:	75 01                	jne    c001ba3f <idleCommon()+0x1d>
c001ba3e:	fb                   	sti    
c001ba3f:	83 c4 0c             	add    esp,0xc
c001ba42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ba44 <LinkedList<UnixFile>::~LinkedList()>:
c001ba44:	90                   	nop
c001ba45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ba46 <LinkedList<UnixFile>::LinkedList()>:
c001ba46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba86:	90                   	nop
c001ba87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ba88 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ba90:	75 10                	jne    c001baa2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ba92:	83 ec 0c             	sub    esp,0xc
c001ba95:	68 24 cf 01 c0       	push   0xc001cf24
c001ba9a:	e8 c8 3a ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa6:	8b 00                	mov    eax,DWORD PTR [eax]
c001baa8:	85 c0                	test   eax,eax
c001baaa:	74 34                	je     c001bae0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001baac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bab3:	85 c0                	test   eax,eax
c001bab5:	74 29                	je     c001bae0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001babe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bac2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bacd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bad7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bade:	eb 65                	jmp    c001bb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bae6:	85 c0                	test   eax,eax
c001bae8:	75 4b                	jne    c001bb35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001baea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001baf1:	85 c0                	test   eax,eax
c001baf3:	75 40                	jne    c001bb35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001baf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bafd:	89 10                	mov    DWORD PTR [eax],edx
c001baff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb1f:	85 c0                	test   eax,eax
c001bb21:	74 22                	je     c001bb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bb23:	83 ec 0c             	sub    esp,0xc
c001bb26:	68 46 cf 01 c0       	push   0xc001cf46
c001bb2b:	e8 37 3a ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bb30:	83 c4 10             	add    esp,0x10
c001bb33:	eb 10                	jmp    c001bb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bb35:	83 ec 0c             	sub    esp,0xc
c001bb38:	68 50 cf 01 c0       	push   0xc001cf50
c001bb3d:	e8 25 3a ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bb42:	83 c4 10             	add    esp,0x10
c001bb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb4c:	8d 50 01             	lea    edx,[eax+0x1]
c001bb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bb56:	90                   	nop
c001bb57:	83 c4 0c             	add    esp,0xc
c001bb5a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001bb5c <LinkedList<UnixFile>::getFirstElement()>:
c001bb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb60:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001bb64 <LinkedList<UnixFile>::removeFirst()>:
c001bb64:	83 ec 0c             	sub    esp,0xc
c001bb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb6d:	85 c0                	test   eax,eax
c001bb6f:	75 12                	jne    c001bb83 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001bb71:	83 ec 0c             	sub    esp,0xc
c001bb74:	68 5c cf 01 c0       	push   0xc001cf5c
c001bb79:	e8 e9 39 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bb7e:	83 c4 10             	add    esp,0x10
c001bb81:	eb 7e                	jmp    c001bc01 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001bb83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb8d:	85 c0                	test   eax,eax
c001bb8f:	74 10                	je     c001bba1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001bb91:	83 ec 0c             	sub    esp,0xc
c001bb94:	68 a7 cf 01 c0       	push   0xc001cfa7
c001bb99:	e8 c9 39 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bb9e:	83 c4 10             	add    esp,0x10
c001bba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bba7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbaa:	85 c0                	test   eax,eax
c001bbac:	75 33                	jne    c001bbe1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001bbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbca:	83 f8 01             	cmp    eax,0x1
c001bbcd:	74 21                	je     c001bbf0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bbcf:	83 ec 0c             	sub    esp,0xc
c001bbd2:	68 80 cf 01 c0       	push   0xc001cf80
c001bbd7:	e8 8b 39 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bbdc:	83 c4 10             	add    esp,0x10
c001bbdf:	eb 0f                	jmp    c001bbf0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbe7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbee:	89 10                	mov    DWORD PTR [eax],edx
c001bbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbf7:	8d 50 ff             	lea    edx,[eax-0x1]
c001bbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbfe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bc01:	83 c4 0c             	add    esp,0xc
c001bc04:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001bc06 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001bc06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc0d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001bc0e <DriverlessDevice::~DriverlessDevice()>:
c001bc0e:	ba fc d5 01 c0       	mov    edx,0xc001d5fc
c001bc13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc17:	89 10                	mov    DWORD PTR [eax],edx
c001bc19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc1d:	50                   	push   eax
c001bc1e:	e8 33 f1 fe ff       	call   c000ad56 <Device::~Device()>
c001bc23:	83 c4 04             	add    esp,0x4
c001bc26:	90                   	nop
c001bc27:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001bc28 <DriverlessDevice::~DriverlessDevice()>:
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	83 ec 0c             	sub    esp,0xc
c001bc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc32:	e8 d7 ff ff ff       	call   c001bc0e <DriverlessDevice::~DriverlessDevice()>
c001bc37:	83 c4 10             	add    esp,0x10
c001bc3a:	83 ec 08             	sub    esp,0x8
c001bc3d:	68 58 01 00 00       	push   0x158
c001bc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc46:	e8 d3 dc fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001bc4b:	83 c4 10             	add    esp,0x10
c001bc4e:	83 c4 0c             	add    esp,0xc
c001bc51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001bc52 <LinkedList<Device>::addElement(Device*)>:
c001bc52:	83 ec 0c             	sub    esp,0xc
c001bc55:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bc5a:	75 10                	jne    c001bc6c <LinkedList<Device>::addElement(Device*)+0x1a>
c001bc5c:	83 ec 0c             	sub    esp,0xc
c001bc5f:	68 24 cf 01 c0       	push   0xc001cf24
c001bc64:	e8 fe 38 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bc69:	83 c4 10             	add    esp,0x10
c001bc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc70:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc72:	85 c0                	test   eax,eax
c001bc74:	74 3a                	je     c001bcb0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc7d:	85 c0                	test   eax,eax
c001bc7f:	74 2f                	je     c001bcb0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bc81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc8c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001bc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc9a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bca4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bcae:	eb 68                	jmp    c001bd18 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcb6:	85 c0                	test   eax,eax
c001bcb8:	75 4e                	jne    c001bd08 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcc1:	85 c0                	test   eax,eax
c001bcc3:	75 43                	jne    c001bd08 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bccd:	89 10                	mov    DWORD PTR [eax],edx
c001bccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bce1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bcf2:	85 c0                	test   eax,eax
c001bcf4:	74 22                	je     c001bd18 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bcf6:	83 ec 0c             	sub    esp,0xc
c001bcf9:	68 46 cf 01 c0       	push   0xc001cf46
c001bcfe:	e8 64 38 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bd03:	83 c4 10             	add    esp,0x10
c001bd06:	eb 10                	jmp    c001bd18 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bd08:	83 ec 0c             	sub    esp,0xc
c001bd0b:	68 50 cf 01 c0       	push   0xc001cf50
c001bd10:	e8 52 38 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bd15:	83 c4 10             	add    esp,0x10
c001bd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bd1f:	8d 50 01             	lea    edx,[eax+0x1]
c001bd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bd29:	90                   	nop
c001bd2a:	83 c4 0c             	add    esp,0xc
c001bd2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001bd2e <LinkedList<Device>::LinkedList()>:
c001bd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bd6e:	90                   	nop
c001bd6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001bd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001bd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd74:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd76:	85 c0                	test   eax,eax
c001bd78:	75 0e                	jne    c001bd88 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bd7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd81:	85 c0                	test   eax,eax
c001bd83:	75 03                	jne    c001bd88 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bd85:	b0 01                	mov    al,0x1
c001bd87:	c3                   	ret    
c001bd88:	b0 00                	mov    al,0x0
c001bd8a:	90                   	nop
c001bd8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001bd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001bd8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd90:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001bd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001bd94:	83 ec 0c             	sub    esp,0xc
c001bd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd9d:	85 c0                	test   eax,eax
c001bd9f:	75 17                	jne    c001bdb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001bda1:	83 ec 0c             	sub    esp,0xc
c001bda4:	68 5c cf 01 c0       	push   0xc001cf5c
c001bda9:	e8 b9 37 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	e9 92 00 00 00       	jmp    c001be48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001bdb6:	66 90                	xchg   ax,ax
c001bdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bdbf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdc2:	85 c0                	test   eax,eax
c001bdc4:	0f 95 c0             	setne  al
c001bdc7:	84 c0                	test   al,al
c001bdc9:	74 11                	je     c001bddc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001bdcb:	83 ec 0c             	sub    esp,0xc
c001bdce:	68 a7 cf 01 c0       	push   0xc001cfa7
c001bdd3:	e8 8f 37 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	90                   	nop
c001bddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bde2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bde5:	85 c0                	test   eax,eax
c001bde7:	0f 94 c0             	sete   al
c001bdea:	84 c0                	test   al,al
c001bdec:	74 36                	je     c001be24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001bdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001be0a:	83 f8 01             	cmp    eax,0x1
c001be0d:	74 25                	je     c001be34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001be0f:	83 ec 0c             	sub    esp,0xc
c001be12:	68 80 cf 01 c0       	push   0xc001cf80
c001be17:	e8 4b 37 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001be1c:	83 c4 10             	add    esp,0x10
c001be1f:	eb 13                	jmp    c001be34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001be21:	8d 76 00             	lea    esi,[esi+0x0]
c001be24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be28:	8b 00                	mov    eax,DWORD PTR [eax]
c001be2a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001be2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be31:	89 10                	mov    DWORD PTR [eax],edx
c001be33:	90                   	nop
c001be34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001be3b:	8d 50 ff             	lea    edx,[eax-0x1]
c001be3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001be45:	8d 76 00             	lea    esi,[esi+0x0]
c001be48:	83 c4 0c             	add    esp,0xc
c001be4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001be4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001be4c:	83 ec 0c             	sub    esp,0xc
c001be4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001be54:	75 12                	jne    c001be68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001be56:	83 ec 0c             	sub    esp,0xc
c001be59:	68 24 cf 01 c0       	push   0xc001cf24
c001be5e:	e8 04 37 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	66 90                	xchg   ax,ax
c001be68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001be6e:	85 c0                	test   eax,eax
c001be70:	74 36                	je     c001bea8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001be72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be79:	85 c0                	test   eax,eax
c001be7b:	74 2b                	je     c001bea8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001be7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be88:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001be8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001be96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bea4:	eb 6a                	jmp    c001bf10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bea6:	66 90                	xchg   ax,ax
c001bea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beac:	8b 00                	mov    eax,DWORD PTR [eax]
c001beae:	85 c0                	test   eax,eax
c001beb0:	75 4e                	jne    c001bf00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001beb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001beb9:	85 c0                	test   eax,eax
c001bebb:	75 43                	jne    c001bf00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bec5:	89 10                	mov    DWORD PTR [eax],edx
c001bec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001becb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001becf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bed9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bee7:	85 c0                	test   eax,eax
c001bee9:	74 25                	je     c001bf10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001beeb:	83 ec 0c             	sub    esp,0xc
c001beee:	68 46 cf 01 c0       	push   0xc001cf46
c001bef3:	e8 6f 36 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bef8:	83 c4 10             	add    esp,0x10
c001befb:	eb 13                	jmp    c001bf10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001befd:	8d 76 00             	lea    esi,[esi+0x0]
c001bf00:	83 ec 0c             	sub    esp,0xc
c001bf03:	68 50 cf 01 c0       	push   0xc001cf50
c001bf08:	e8 5a 36 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf17:	8d 50 01             	lea    edx,[eax+0x1]
c001bf1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf21:	90                   	nop
c001bf22:	83 c4 0c             	add    esp,0xc
c001bf25:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001bf28 <ACPI::~ACPI()>:
c001bf28:	83 ec 0c             	sub    esp,0xc
c001bf2b:	ba 64 db 01 c0       	mov    edx,0xc001db64
c001bf30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf34:	89 10                	mov    DWORD PTR [eax],edx
c001bf36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	50                   	push   eax
c001bf3e:	e8 13 ee fe ff       	call   c000ad56 <Device::~Device()>
c001bf43:	83 c4 10             	add    esp,0x10
c001bf46:	90                   	nop
c001bf47:	83 c4 0c             	add    esp,0xc
c001bf4a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001bf4c <ACPI::~ACPI()>:
c001bf4c:	83 ec 0c             	sub    esp,0xc
c001bf4f:	83 ec 0c             	sub    esp,0xc
c001bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf56:	e8 cd ff ff ff       	call   c001bf28 <ACPI::~ACPI()>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	83 ec 08             	sub    esp,0x8
c001bf61:	68 64 12 00 00       	push   0x1264
c001bf66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf6a:	e8 af d9 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001bf6f:	83 c4 10             	add    esp,0x10
c001bf72:	83 c4 0c             	add    esp,0xc
c001bf75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001bf78 <LinkedList<Device>::~LinkedList()>:
c001bf78:	90                   	nop
c001bf79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001bf7c <LinkedList<Device>::isEmpty()>:
c001bf7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf80:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf82:	85 c0                	test   eax,eax
c001bf84:	75 0e                	jne    c001bf94 <LinkedList<Device>::isEmpty()+0x18>
c001bf86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	75 03                	jne    c001bf94 <LinkedList<Device>::isEmpty()+0x18>
c001bf91:	b0 01                	mov    al,0x1
c001bf93:	c3                   	ret    
c001bf94:	b0 00                	mov    al,0x0
c001bf96:	90                   	nop
c001bf97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001bf98 <LinkedList<Device>::getFirstElement()>:
c001bf98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001bfa0 <LinkedList<Device>::removeFirst()>:
c001bfa0:	83 ec 0c             	sub    esp,0xc
c001bfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfa9:	85 c0                	test   eax,eax
c001bfab:	75 17                	jne    c001bfc4 <LinkedList<Device>::removeFirst()+0x24>
c001bfad:	83 ec 0c             	sub    esp,0xc
c001bfb0:	68 5c cf 01 c0       	push   0xc001cf5c
c001bfb5:	e8 ad 35 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bfba:	83 c4 10             	add    esp,0x10
c001bfbd:	e9 92 00 00 00       	jmp    c001c054 <LinkedList<Device>::removeFirst()+0xb4>
c001bfc2:	66 90                	xchg   ax,ax
c001bfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfcb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bfd1:	85 c0                	test   eax,eax
c001bfd3:	74 13                	je     c001bfe8 <LinkedList<Device>::removeFirst()+0x48>
c001bfd5:	83 ec 0c             	sub    esp,0xc
c001bfd8:	68 a7 cf 01 c0       	push   0xc001cfa7
c001bfdd:	e8 85 35 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfec:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfee:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bff4:	85 c0                	test   eax,eax
c001bff6:	75 34                	jne    c001c02c <LinkedList<Device>::removeFirst()+0x8c>
c001bff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c006:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c011:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c014:	83 f8 01             	cmp    eax,0x1
c001c017:	74 27                	je     c001c040 <LinkedList<Device>::removeFirst()+0xa0>
c001c019:	83 ec 0c             	sub    esp,0xc
c001c01c:	68 80 cf 01 c0       	push   0xc001cf80
c001c021:	e8 41 35 ff ff       	call   c000f567 <Krnl::panic(char const*)>
c001c026:	83 c4 10             	add    esp,0x10
c001c029:	eb 15                	jmp    c001c040 <LinkedList<Device>::removeFirst()+0xa0>
c001c02b:	90                   	nop
c001c02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c030:	8b 00                	mov    eax,DWORD PTR [eax]
c001c032:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c03c:	89 10                	mov    DWORD PTR [eax],edx
c001c03e:	66 90                	xchg   ax,ax
c001c040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c044:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c047:	8d 50 ff             	lea    edx,[eax-0x1]
c001c04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c04e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c051:	8d 76 00             	lea    esi,[esi+0x0]
c001c054:	83 c4 0c             	add    esp,0xc
c001c057:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c058 <CPU::~CPU()>:
c001c058:	83 ec 0c             	sub    esp,0xc
c001c05b:	ba 00 dd 01 c0       	mov    edx,0xc001dd00
c001c060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c064:	89 10                	mov    DWORD PTR [eax],edx
c001c066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c06a:	83 ec 0c             	sub    esp,0xc
c001c06d:	50                   	push   eax
c001c06e:	e8 e3 ec fe ff       	call   c000ad56 <Device::~Device()>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	90                   	nop
c001c077:	83 c4 0c             	add    esp,0xc
c001c07a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c07c <CPU::~CPU()>:
c001c07c:	83 ec 0c             	sub    esp,0xc
c001c07f:	83 ec 0c             	sub    esp,0xc
c001c082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c086:	e8 cd ff ff ff       	call   c001c058 <CPU::~CPU()>
c001c08b:	83 c4 10             	add    esp,0x10
c001c08e:	83 ec 08             	sub    esp,0x8
c001c091:	68 94 11 00 00       	push   0x1194
c001c096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c09a:	e8 7f d8 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c09f:	83 c4 10             	add    esp,0x10
c001c0a2:	83 c4 0c             	add    esp,0xc
c001c0a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c0a8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c0a8:	90                   	nop
c001c0a9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c0ac <ThreadControlBlock::ThreadControlBlock()>:
c001c0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0b0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c0b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0bb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c0c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0c6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c0cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0d1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0dc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c0e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0e7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c0eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0ef:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c0f3:	90                   	nop
c001c0f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c0f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c0f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c106:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c10d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c111:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c11c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c126:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c12d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c131:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c138:	90                   	nop
c001c139:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c13c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c13c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c140:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c143:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c144 <PCI::~PCI()>:
c001c144:	83 ec 0c             	sub    esp,0xc
c001c147:	ba c8 e8 01 c0       	mov    edx,0xc001e8c8
c001c14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c150:	89 10                	mov    DWORD PTR [eax],edx
c001c152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c156:	83 ec 0c             	sub    esp,0xc
c001c159:	50                   	push   eax
c001c15a:	e8 81 e6 fe ff       	call   c000a7e0 <Bus::~Bus()>
c001c15f:	83 c4 10             	add    esp,0x10
c001c162:	90                   	nop
c001c163:	83 c4 0c             	add    esp,0xc
c001c166:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c168 <PCI::~PCI()>:
c001c168:	83 ec 0c             	sub    esp,0xc
c001c16b:	83 ec 0c             	sub    esp,0xc
c001c16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c172:	e8 cd ff ff ff       	call   c001c144 <PCI::~PCI()>
c001c177:	83 c4 10             	add    esp,0x10
c001c17a:	83 ec 08             	sub    esp,0x8
c001c17d:	68 5c 01 00 00       	push   0x15c
c001c182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c186:	e8 93 d7 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c18b:	83 c4 10             	add    esp,0x10
c001c18e:	83 c4 0c             	add    esp,0xc
c001c191:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c192 <IDE::~IDE()>:
c001c192:	83 ec 0c             	sub    esp,0xc
c001c195:	ba 7c e9 01 c0       	mov    edx,0xc001e97c
c001c19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19e:	89 10                	mov    DWORD PTR [eax],edx
c001c1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	50                   	push   eax
c001c1a8:	e8 23 f0 fe ff       	call   c000b1d0 <HardDiskController::~HardDiskController()>
c001c1ad:	83 c4 10             	add    esp,0x10
c001c1b0:	90                   	nop
c001c1b1:	83 c4 0c             	add    esp,0xc
c001c1b4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c1b6 <IDE::~IDE()>:
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	83 ec 0c             	sub    esp,0xc
c001c1bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1c0:	e8 cd ff ff ff       	call   c001c192 <IDE::~IDE()>
c001c1c5:	83 c4 10             	add    esp,0x10
c001c1c8:	83 ec 08             	sub    esp,0x8
c001c1cb:	68 70 02 00 00       	push   0x270
c001c1d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1d4:	e8 45 d7 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c1d9:	83 c4 10             	add    esp,0x10
c001c1dc:	83 c4 0c             	add    esp,0xc
c001c1df:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c1e0 <SATABus::~SATABus()>:
c001c1e0:	83 ec 0c             	sub    esp,0xc
c001c1e3:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c001c1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ec:	89 10                	mov    DWORD PTR [eax],edx
c001c1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f2:	83 ec 0c             	sub    esp,0xc
c001c1f5:	50                   	push   eax
c001c1f6:	e8 d5 ef fe ff       	call   c000b1d0 <HardDiskController::~HardDiskController()>
c001c1fb:	83 c4 10             	add    esp,0x10
c001c1fe:	90                   	nop
c001c1ff:	83 c4 0c             	add    esp,0xc
c001c202:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c204 <SATABus::~SATABus()>:
c001c204:	83 ec 0c             	sub    esp,0xc
c001c207:	83 ec 0c             	sub    esp,0xc
c001c20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c20e:	e8 cd ff ff ff       	call   c001c1e0 <SATABus::~SATABus()>
c001c213:	83 c4 10             	add    esp,0x10
c001c216:	83 ec 08             	sub    esp,0x8
c001c219:	68 64 01 00 00       	push   0x164
c001c21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c222:	e8 f7 d6 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c227:	83 c4 10             	add    esp,0x10
c001c22a:	83 c4 0c             	add    esp,0xc
c001c22d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c22e <ATA::~ATA()>:
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c001c236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23a:	89 10                	mov    DWORD PTR [eax],edx
c001c23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c240:	83 ec 0c             	sub    esp,0xc
c001c243:	50                   	push   eax
c001c244:	e8 69 f0 fe ff       	call   c000b2b2 <PhysicalDisk::~PhysicalDisk()>
c001c249:	83 c4 10             	add    esp,0x10
c001c24c:	90                   	nop
c001c24d:	83 c4 0c             	add    esp,0xc
c001c250:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c252 <ATA::~ATA()>:
c001c252:	83 ec 0c             	sub    esp,0xc
c001c255:	83 ec 0c             	sub    esp,0xc
c001c258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c25c:	e8 cd ff ff ff       	call   c001c22e <ATA::~ATA()>
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	83 ec 08             	sub    esp,0x8
c001c267:	68 7c 01 00 00       	push   0x17c
c001c26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c270:	e8 a9 d6 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c275:	83 c4 10             	add    esp,0x10
c001c278:	83 c4 0c             	add    esp,0xc
c001c27b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c27c <ATAPI::~ATAPI()>:
c001c27c:	83 ec 0c             	sub    esp,0xc
c001c27f:	ba 54 ea 01 c0       	mov    edx,0xc001ea54
c001c284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c288:	89 10                	mov    DWORD PTR [eax],edx
c001c28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28e:	83 ec 0c             	sub    esp,0xc
c001c291:	50                   	push   eax
c001c292:	e8 1b f0 fe ff       	call   c000b2b2 <PhysicalDisk::~PhysicalDisk()>
c001c297:	83 c4 10             	add    esp,0x10
c001c29a:	90                   	nop
c001c29b:	83 c4 0c             	add    esp,0xc
c001c29e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c2a0 <ATAPI::~ATAPI()>:
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	83 ec 0c             	sub    esp,0xc
c001c2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2aa:	e8 cd ff ff ff       	call   c001c27c <ATAPI::~ATAPI()>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	83 ec 08             	sub    esp,0x8
c001c2b5:	68 84 01 00 00       	push   0x184
c001c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2be:	e8 5b d6 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c2c3:	83 c4 10             	add    esp,0x10
c001c2c6:	83 c4 0c             	add    esp,0xc
c001c2c9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c2ca <SATA::~SATA()>:
c001c2ca:	83 ec 0c             	sub    esp,0xc
c001c2cd:	ba 08 eb 01 c0       	mov    edx,0xc001eb08
c001c2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d6:	89 10                	mov    DWORD PTR [eax],edx
c001c2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2dc:	83 ec 0c             	sub    esp,0xc
c001c2df:	50                   	push   eax
c001c2e0:	e8 cd ef fe ff       	call   c000b2b2 <PhysicalDisk::~PhysicalDisk()>
c001c2e5:	83 c4 10             	add    esp,0x10
c001c2e8:	90                   	nop
c001c2e9:	83 c4 0c             	add    esp,0xc
c001c2ec:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c2ee <SATA::~SATA()>:
c001c2ee:	83 ec 0c             	sub    esp,0xc
c001c2f1:	83 ec 0c             	sub    esp,0xc
c001c2f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2f8:	e8 cd ff ff ff       	call   c001c2ca <SATA::~SATA()>
c001c2fd:	83 c4 10             	add    esp,0x10
c001c300:	83 ec 08             	sub    esp,0x8
c001c303:	68 7c 01 00 00       	push   0x17c
c001c308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c30c:	e8 0d d6 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	83 c4 0c             	add    esp,0xc
c001c317:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c318 <SATAPI::~SATAPI()>:
c001c318:	83 ec 0c             	sub    esp,0xc
c001c31b:	ba 74 ec 01 c0       	mov    edx,0xc001ec74
c001c320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c324:	89 10                	mov    DWORD PTR [eax],edx
c001c326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32a:	83 ec 0c             	sub    esp,0xc
c001c32d:	50                   	push   eax
c001c32e:	e8 7f ef fe ff       	call   c000b2b2 <PhysicalDisk::~PhysicalDisk()>
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	90                   	nop
c001c337:	83 c4 0c             	add    esp,0xc
c001c33a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c33c <SATAPI::~SATAPI()>:
c001c33c:	83 ec 0c             	sub    esp,0xc
c001c33f:	83 ec 0c             	sub    esp,0xc
c001c342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c346:	e8 cd ff ff ff       	call   c001c318 <SATAPI::~SATAPI()>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	83 ec 08             	sub    esp,0x8
c001c351:	68 84 01 00 00       	push   0x184
c001c356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c35a:	e8 bf d5 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	83 c4 0c             	add    esp,0xc
c001c365:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c366 <IOAPIC::~IOAPIC()>:
c001c366:	83 ec 0c             	sub    esp,0xc
c001c369:	ba b4 ec 01 c0       	mov    edx,0xc001ecb4
c001c36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c372:	89 10                	mov    DWORD PTR [eax],edx
c001c374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c378:	83 ec 0c             	sub    esp,0xc
c001c37b:	50                   	push   eax
c001c37c:	e8 d5 e9 fe ff       	call   c000ad56 <Device::~Device()>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	90                   	nop
c001c385:	83 c4 0c             	add    esp,0xc
c001c388:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c38a <IOAPIC::~IOAPIC()>:
c001c38a:	83 ec 0c             	sub    esp,0xc
c001c38d:	83 ec 0c             	sub    esp,0xc
c001c390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c394:	e8 cd ff ff ff       	call   c001c366 <IOAPIC::~IOAPIC()>
c001c399:	83 c4 10             	add    esp,0x10
c001c39c:	83 ec 08             	sub    esp,0x8
c001c39f:	68 68 01 00 00       	push   0x168
c001c3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3a8:	e8 71 d5 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c3ad:	83 c4 10             	add    esp,0x10
c001c3b0:	83 c4 0c             	add    esp,0xc
c001c3b3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c3b4 <APICTimer::~APICTimer()>:
c001c3b4:	83 ec 0c             	sub    esp,0xc
c001c3b7:	ba fc ec 01 c0       	mov    edx,0xc001ecfc
c001c3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c0:	89 10                	mov    DWORD PTR [eax],edx
c001c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c6:	83 ec 0c             	sub    esp,0xc
c001c3c9:	50                   	push   eax
c001c3ca:	e8 85 02 ff ff       	call   c000c654 <Timer::~Timer()>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	90                   	nop
c001c3d3:	83 c4 0c             	add    esp,0xc
c001c3d6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c3d8 <APICTimer::~APICTimer()>:
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	83 ec 0c             	sub    esp,0xc
c001c3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3e2:	e8 cd ff ff ff       	call   c001c3b4 <APICTimer::~APICTimer()>
c001c3e7:	83 c4 10             	add    esp,0x10
c001c3ea:	83 ec 08             	sub    esp,0x8
c001c3ed:	68 60 01 00 00       	push   0x160
c001c3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3f6:	e8 23 d5 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	83 c4 0c             	add    esp,0xc
c001c401:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c404 <PIT::~PIT()>:
c001c404:	83 ec 0c             	sub    esp,0xc
c001c407:	ba 4c ed 01 c0       	mov    edx,0xc001ed4c
c001c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c410:	89 10                	mov    DWORD PTR [eax],edx
c001c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	50                   	push   eax
c001c41a:	e8 35 02 ff ff       	call   c000c654 <Timer::~Timer()>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	90                   	nop
c001c423:	83 c4 0c             	add    esp,0xc
c001c426:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c428 <PIT::~PIT()>:
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	83 ec 0c             	sub    esp,0xc
c001c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c432:	e8 cd ff ff ff       	call   c001c404 <PIT::~PIT()>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	83 ec 08             	sub    esp,0x8
c001c43d:	68 5c 01 00 00       	push   0x15c
c001c442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c446:	e8 d3 d4 fe ff       	call   c000991e <operator delete(void*, unsigned long)>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	83 c4 0c             	add    esp,0xc
c001c451:	c3                   	ret    
