
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 86 02 00       	call   c0028668 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 12 92 02 c0       	mov    ebx,0xc0029212
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 20 92 02 c0    	cmp    ebx,0xc0029220
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 db 02 c0       	mov    eax,0xc002db78
c0000049:	3d 78 db 02 c0       	cmp    eax,0xc002db78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 db 02 c0       	push   0xc002db78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 db 02 c0       	mov    eax,0xc002db78
c0000075:	2d 78 db 02 c0       	sub    eax,0xc002db78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 db 02 c0       	push   0xc002db78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 28 92 02 c0       	mov    ebx,0xc0029228
c00000bb:	81 eb 24 92 02 c0    	sub    ebx,0xc0029224
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 24 92 02 c0       	mov    esi,0xc0029224
c00000ca:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac e1 02 c0       	mov    ds:0xc002e1ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 db 02 c0       	push   0xc002db78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 e1 02 c0       	push   0xc002e1b0
c000012c:	68 78 db 02 c0       	push   0xc002db78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 1d d6 01 00       	call   c001d9b8 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 57 29 01 00       	call   c0012d0a <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 fb d5 01 00       	call   c001d9b8 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 49 da 01 00       	call   c001de25 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 f7 df 01 00       	call   c001e3dc <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 e5 02 c0 	lgdtd  ds:0xc002e5f0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 34 46 01 00       	call   c0014c0d <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 c8 e1 02 c0       	mov    ds:0xc002e1c8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 c8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d c8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1c8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 40 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6dc0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 40 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6dc0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 40 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6dc0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d e0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1e0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d e0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 e4 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e1c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 e4 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e1c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d e0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 0c e2 02 c0    	cmp    DWORD PTR ds:0xc002e20c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 1c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e21c
c0000e60:	c7 42 0c 14 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e214
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 1c e2 02 c0    	mov    DWORD PTR ds:0xc002e21c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 0c e2 02 c0    	mov    DWORD PTR ds:0xc002e20c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 e0 e1 02 c0 02 	test   BYTE PTR ds:0xc002e1e0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d e0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1e0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 e4 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e1c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 e4 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e1c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 14 e2 02 c0 	lea    edx,[eax*8-0x3ffd1dec]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 20 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e220
c00011e2:	81 fb 14 e2 02 c0    	cmp    ebx,0xc002e214
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 14 e2 02 c0       	cmp    eax,0xc002e214
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 10 e2 02 c0    	cmp    DWORD PTR ds:0xc002e210,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 1c e2 02 c0       	mov    ds:0xc002e21c,eax
c000121e:	a3 20 e2 02 c0       	mov    ds:0xc002e220,eax
c0001223:	a3 10 e2 02 c0       	mov    ds:0xc002e210,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 14 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e214
c0001231:	c7 40 0c 14 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e214
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 20 e2 02 c0       	mov    ds:0xc002e220,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 14 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e214
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 d8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e28]
c0001282:	8b 14 95 e0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e20]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 e0 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e20]
c000129d:	8b 14 95 e0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e20]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 14 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1aec],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 14 e2 02 c0 	lea    eax,[eax*8-0x3ffd1dec]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 1c e2 02 c0    	mov    DWORD PTR ds:0xc002e21c,ecx
c0001357:	89 0d 20 e2 02 c0    	mov    DWORD PTR ds:0xc002e220,ecx
c000135d:	c7 41 08 14 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e214
c0001364:	c7 41 0c 14 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e214
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 0c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1df4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 14 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1aec]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 14 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1aec]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 0c e2 02 c0 	lea    edx,[eax*4-0x3ffd1df4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 14 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1aec],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 1c e2 02 c0    	mov    DWORD PTR ds:0xc002e21c,edi
c000142a:	89 3d 20 e2 02 c0    	mov    DWORD PTR ds:0xc002e220,edi
c0001430:	c7 47 08 14 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e214
c0001437:	c7 47 0c 14 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e214
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 10 e2 02 c0    	mov    DWORD PTR ds:0xc002e210,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 0c e2 02 c0    	mov    DWORD PTR ds:0xc002e20c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba e0 e1 02 c0       	mov    edx,0xc002e1e0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d e0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1e0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 34 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e534
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 34 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e534,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 34 e5 02 c0    	mov    DWORD PTR ds:0xc002e534,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 0c e2 02 c0    	cmp    DWORD PTR ds:0xc002e20c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 0c e2 02 c0    	mov    DWORD PTR ds:0xc002e20c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d e0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1e0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 3c e5 02 c0    	push   DWORD PTR ds:0xc002e53c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d e0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1e0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 3c e5 02 c0       	mov    eax,ds:0xc002e53c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 0c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e20c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 e4 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e1c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 14 e2 02 c0       	mov    eax,0xc002e214
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 0c e5 02 c0       	cmp    eax,0xc002e50c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 30 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e530
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 44 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e544
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 54 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e554
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 44 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cbc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 e0 e1 02 c0       	mov    eax,ds:0xc002e1e0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 e0 e1 02 c0       	mov    ds:0xc002e1e0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 24 e5 02 c0    	mov    DWORD PTR ds:0xc002e524,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 28 e5 02 c0    	mov    DWORD PTR ds:0xc002e528,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 2c e5 02 c0    	mov    DWORD PTR ds:0xc002e52c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 34 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e534,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 c0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce340]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 a8 f1 01 00       	jmp    c0020dd4 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce340]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 d9 f1 01 00       	jmp    c0020e1b <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 c0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce340]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 01 f2 01 00       	jmp    c0020e62 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 88 4a 02 00       	call   c00269cc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 60 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ba0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 60 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ba0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 80 94 02 c0       	mov    edx,0xc0029480
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba ec c9 02 c0       	mov    edx,0xc002c9ec
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 8c 94 02 c0       	mov    edx,0xc002948c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 70 94 02 c0       	mov    edx,0xc0029470
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 80 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a80]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 60 e5 02 c0    	mov    ax,ds:0xc002e560
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 60 e5 02 c0    	mov    ds:0xc002e560,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 85 38 02 00       	call   c00269cc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 92 94 02 c0       	mov    eax,0xc0029492
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad e0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c20]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 9b 94 02 c0       	mov    eax,0xc002949b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 60 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ba0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 50 22 02 00       	call   c00269cc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 70 94 02 c0       	mov    edx,0xc0029470
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 80 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a80]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 80 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a80],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 17 0c 02 00       	call   c00269cc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 fd 0b 02 00       	call   c00269cc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 b7 93 02 c0       	mov    eax,0xc00293b7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 b0 93 02 c0       	mov    eax,0xc00293b0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 80 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a80]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be a0 93 02 c0       	mov    esi,0xc00293a0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 40 f3 01 00       	call   c00269cc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 80 94 02 c0       	mov    edx,0xc0029480
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ae 94 02 c0       	mov    edx,0xc00294ae
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c e0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297e0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 e0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297e0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 20 95 02 c0       	mov    eax,0xc0029520
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 94 fc 01 00       	call   c002849f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 57 fc 01 00       	call   c0028481 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 2b fc 01 00       	call   c002849f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 de f2 01 00       	call   c0027ba4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 58 fd 01 00       	call   c0028630 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 a5 fb 01 00       	call   c002849f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 e7 fa 01 00       	call   c002849f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 b4 fa 01 00       	call   c0028481 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 a1 f9 01 00       	call   c002849f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 69 f9 01 00       	call   c0028481 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 75 f7 01 00       	call   c002849f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 3a f7 01 00       	call   c0028481 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 40 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62c0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 4a f4 01 00       	call   c0028233 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 c8 ed 01 00       	call   c0027bd0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 84 f6 01 00       	call   c00284a3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 72 f7 01 00       	call   c00285c7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 5c ed 01 00       	call   c0027bd0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 07 f6 01 00       	call   c002849d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 e8 f5 01 00       	call   c00284a1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 76 f7 01 00       	call   c0028650 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 28 f3 01 00       	call   c0028233 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 a6 ec 01 00       	call   c0027bd0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 62 f5 01 00       	call   c00284a3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 50 f6 01 00       	call   c00285c7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 3a ec 01 00       	call   c0027bd0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 e5 f4 01 00       	call   c002849d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 c5 f4 01 00       	call   c00284a1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 52 f6 01 00       	call   c0028650 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 00 f4 01 00       	call   c002849f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 be f3 01 00       	call   c0028481 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 a6 f3 01 00       	call   c002849f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 18 f1 01 00       	call   c0028233 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 1a e4 01 00       	call   c0027553 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 7d ea 01 00       	call   c0027bd0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 cf f0 01 00       	call   c0028233 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 d5 e3 01 00       	call   c0027553 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 a4 f0 01 00       	call   c0028233 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 f4 f2 01 00       	call   c002849d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 d1 e9 01 00       	call   c0027ba4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 4b f4 01 00       	call   c0028630 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 7a f2 01 00       	call   c0028481 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 75 e9 01 00       	call   c0027ba4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 f3 ef 01 00       	call   c0028233 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 76 e9 01 00       	call   c0027bd0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 c8 ef 01 00       	call   c0028233 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 2f ec 01 00       	call   c0027eb4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 ae e2 01 00       	call   c0027553 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 0e dc 01 00       	call   c0026ee8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 e5 f2 01 00       	call   c00285c7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ce e8 01 00       	call   c0027bd0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 b5 f2 01 00       	call   c00285c7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 27 e2 01 00       	call   c0027553 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 60 f1 01 00       	call   c00284a3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 48 eb 01 00       	call   c0027eb4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ce e1 01 00       	call   c0027553 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 b4 f2 01 00       	call   c0028650 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 8e ee 01 00       	call   c0028233 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 e5 e7 01 00       	call   c0027ba4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 c4 f0 01 00       	call   c002849f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 5d e1 01 00       	call   c0027553 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 89 e7 01 00       	call   c0027ba4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 23 f2 01 00       	call   c0028650 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 dc ed 01 00       	call   c0028233 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 59 e7 01 00       	call   c0027bd0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 ac ed 01 00       	call   c0028233 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 b2 e0 01 00       	call   c0027553 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 82 ed 01 00       	call   c0028233 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 d4 ef 01 00       	call   c002849f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 ab e6 01 00       	call   c0027ba4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 25 f1 01 00       	call   c0028630 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 54 ef 01 00       	call   c0028481 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 4e e6 01 00       	call   c0027ba4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 cc ec 01 00       	call   c0028233 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 4f e6 01 00       	call   c0027bd0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 a1 ec 01 00       	call   c0028233 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 08 e9 01 00       	call   c0027eb4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 87 df 01 00       	call   c0027553 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 d7 d8 01 00       	call   c0026ee8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 ae ef 01 00       	call   c00285c7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 97 e5 01 00       	call   c0027bd0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 7e ef 01 00       	call   c00285c7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 f0 de 01 00       	call   c0027553 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 29 ee 01 00       	call   c00284a3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 10 e8 01 00       	call   c0027eb4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 8f de 01 00       	call   c0027553 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 75 ef 01 00       	call   c0028650 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 4f eb 01 00       	call   c0028233 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 a6 e4 01 00       	call   c0027ba4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 85 ed 01 00       	call   c002849f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 1e de 01 00       	call   c0027553 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 4a e4 01 00       	call   c0027ba4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 bf ea 01 00       	call   c0028233 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 c5 dd 01 00       	call   c0027553 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 b4 9d 02 c0       	mov    eax,0xc0029db4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 3a e9 01 00       	call   c0028233 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 b8 e2 01 00       	call   c0027bd0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 4a d5 01 00       	call   c0026ee8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 21 ec 01 00       	call   c00285c7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 0a e2 01 00       	call   c0027bd0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 ed eb 01 00       	call   c00285c7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 5f db 01 00       	call   c0027553 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 bf eb 01 00       	call   c00285c7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 ae e1 01 00       	call   c0027bd0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 17 db 01 00       	call   c0027553 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 38 d4 01 00       	call   c0026ee8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 0f eb 01 00       	call   c00285c7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 f8 e0 01 00       	call   c0027bd0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 db ea 01 00       	call   c00285c7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 4d da 01 00       	call   c0027553 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 ad ea 01 00       	call   c00285c7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 9c e0 01 00       	call   c0027bd0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 05 da 01 00       	call   c0027553 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 e3 d9 01 00       	call   c0027553 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 bf d2 01 00       	call   c0026ee8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 96 e9 01 00       	call   c00285c7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 7f df 01 00       	call   c0027bd0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 62 e9 01 00       	call   c00285c7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 d4 d8 01 00       	call   c0027553 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 34 e9 01 00       	call   c00285c7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 1d df 01 00       	call   c0027bd0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 86 d8 01 00       	call   c0027553 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 e6 e8 01 00       	call   c00285c7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 cf de 01 00       	call   c0027bd0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 38 d8 01 00       	call   c0027553 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 4d d1 01 00       	call   c0026ee8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 24 e8 01 00       	call   c00285c7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 0d de 01 00       	call   c0027bd0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 f4 e7 01 00       	call   c00285c7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 66 d7 01 00       	call   c0027553 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 c6 e7 01 00       	call   c00285c7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 af dd 01 00       	call   c0027bd0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 18 d7 01 00       	call   c0027553 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 78 e7 01 00       	call   c00285c7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 61 dd 01 00       	call   c0027bd0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ca d6 01 00       	call   c0027553 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 9e d6 01 00       	call   c0027553 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 fb dc 01 00       	call   c0027bd0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 b7 e5 01 00       	call   c00284a3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 46 d6 01 00       	call   c0027553 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 a3 dc 01 00       	call   c0027bd0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 5f e5 01 00       	call   c00284a3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 d9 ce 01 00       	call   c0026ee8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 b0 e5 01 00       	call   c00285c7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 99 db 01 00       	call   c0027bd0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 7c e5 01 00       	call   c00285c7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 ee d4 01 00       	call   c0027553 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 4e e5 01 00       	call   c00285c7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 37 db 01 00       	call   c0027bd0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 a0 d4 01 00       	call   c0027553 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 00 e5 01 00       	call   c00285c7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 e9 da 01 00       	call   c0027bd0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 52 d4 01 00       	call   c0027553 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 b2 e4 01 00       	call   c00285c7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 9b da 01 00       	call   c0027bd0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 04 d4 01 00       	call   c0027553 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 64 e4 01 00       	call   c00285c7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 4d da 01 00       	call   c0027bd0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 b6 d3 01 00       	call   c0027553 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 b8 cc 01 00       	call   c0026ee8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 8f e3 01 00       	call   c00285c7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 78 d9 01 00       	call   c0027bd0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 5f e3 01 00       	call   c00285c7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 d1 d2 01 00       	call   c0027553 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 31 e3 01 00       	call   c00285c7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 1a d9 01 00       	call   c0027bd0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 83 d2 01 00       	call   c0027553 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 e3 e2 01 00       	call   c00285c7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 cc d8 01 00       	call   c0027bd0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 35 d2 01 00       	call   c0027553 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 95 e2 01 00       	call   c00285c7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 7e d8 01 00       	call   c0027bd0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 e7 d1 01 00       	call   c0027553 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 47 e2 01 00       	call   c00285c7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 30 d8 01 00       	call   c0027bd0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 99 d1 01 00       	call   c0027553 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 6d d1 01 00       	call   c0027553 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ca d7 01 00       	call   c0027bd0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 86 e0 01 00       	call   c00284a3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 15 d1 01 00       	call   c0027553 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 72 d7 01 00       	call   c0027bd0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 2e e0 01 00       	call   c00284a3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 bc d0 01 00       	call   c0027553 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 19 d7 01 00       	call   c0027bd0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 d5 df 01 00       	call   c00284a3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 63 d0 01 00       	call   c0027553 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 c0 d6 01 00       	call   c0027bd0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 7c df 01 00       	call   c00284a3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 da c8 01 00       	call   c0026ee8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 b1 df 01 00       	call   c00285c7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 9a d5 01 00       	call   c0027bd0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 7d df 01 00       	call   c00285c7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 ef ce 01 00       	call   c0027553 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 4f df 01 00       	call   c00285c7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 38 d5 01 00       	call   c0027bd0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 a1 ce 01 00       	call   c0027553 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 01 df 01 00       	call   c00285c7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ea d4 01 00       	call   c0027bd0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 53 ce 01 00       	call   c0027553 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 b3 de 01 00       	call   c00285c7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 9c d4 01 00       	call   c0027bd0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 05 ce 01 00       	call   c0027553 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 65 de 01 00       	call   c00285c7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 4e d4 01 00       	call   c0027bd0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 b7 cd 01 00       	call   c0027553 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 17 de 01 00       	call   c00285c7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 00 d4 01 00       	call   c0027bd0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 66 cd 01 00       	call   c0027553 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 c6 dd 01 00       	call   c00285c7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 af d3 01 00       	call   c0027bd0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 18 cd 01 00       	call   c0027553 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 12 c6 01 00       	call   c0026ee8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 e9 dc 01 00       	call   c00285c7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 d2 d2 01 00       	call   c0027bd0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 b2 dc 01 00       	call   c00285c7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 24 cc 01 00       	call   c0027553 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 84 dc 01 00       	call   c00285c7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 6d d2 01 00       	call   c0027bd0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 d6 cb 01 00       	call   c0027553 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 36 dc 01 00       	call   c00285c7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 1f d2 01 00       	call   c0027bd0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 88 cb 01 00       	call   c0027553 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 e8 db 01 00       	call   c00285c7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 d1 d1 01 00       	call   c0027bd0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 3a cb 01 00       	call   c0027553 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 9a db 01 00       	call   c00285c7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 83 d1 01 00       	call   c0027bd0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 ec ca 01 00       	call   c0027553 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 4c db 01 00       	call   c00285c7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 35 d1 01 00       	call   c0027bd0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 9b ca 01 00       	call   c0027553 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 fb da 01 00       	call   c00285c7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 e4 d0 01 00       	call   c0027bd0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 53 ca 01 00       	call   c0027553 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 2c ca 01 00       	call   c0027553 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 8a d0 01 00       	call   c0027bd0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 46 d9 01 00       	call   c00284a3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 d5 c9 01 00       	call   c0027553 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 33 d0 01 00       	call   c0027bd0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 ef d8 01 00       	call   c00284a3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 7d c9 01 00       	call   c0027553 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 db cf 01 00       	call   c0027bd0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 97 d8 01 00       	call   c00284a3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 25 c9 01 00       	call   c0027553 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 83 cf 01 00       	call   c0027bd0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 3f d8 01 00       	call   c00284a3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 cd c8 01 00       	call   c0027553 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 2b cf 01 00       	call   c0027bd0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 e7 d7 01 00       	call   c00284a3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 7b c8 01 00       	call   c0027553 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 d9 ce 01 00       	call   c0027bd0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 95 d7 01 00       	call   c00284a3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 a9 c0 01 00       	call   c0026ee8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 80 d7 01 00       	call   c00285c7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 69 cd 01 00       	call   c0027bd0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 50 d7 01 00       	call   c00285c7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 c2 c6 01 00       	call   c0027553 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 e4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd621c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 f6 d6 01 00       	call   c00285c7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 df cc 01 00       	call   c0027bd0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 4a c6 01 00       	call   c0027553 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 97 d6 01 00       	call   c00285c7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 80 cc 01 00       	call   c0027bd0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 eb c5 01 00       	call   c0027553 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 38 d6 01 00       	call   c00285c7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 21 cc 01 00       	call   c0027bd0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 8c c5 01 00       	call   c0027553 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 d9 d5 01 00       	call   c00285c7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 c2 cb 01 00       	call   c0027bd0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 2d c5 01 00       	call   c0027553 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 7a d5 01 00       	call   c00285c7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 63 cb 01 00       	call   c0027bd0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ce c4 01 00       	call   c0027553 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 1b d5 01 00       	call   c00285c7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 04 cb 01 00       	call   c0027bd0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 6f c4 01 00       	call   c0027553 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 bc d4 01 00       	call   c00285c7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 a5 ca 01 00       	call   c0027bd0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 10 c4 01 00       	call   c0027553 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 5d d4 01 00       	call   c00285c7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 46 ca 01 00       	call   c0027bd0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 b1 c3 01 00       	call   c0027553 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 bb bc 01 00       	call   c0026ee8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 92 d3 01 00       	call   c00285c7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 7b c9 01 00       	call   c0027bd0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 62 d3 01 00       	call   c00285c7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 d4 c2 01 00       	call   c0027553 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 00 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6200]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 07 d3 01 00       	call   c00285c7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 f0 c8 01 00       	call   c0027bd0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 5b c2 01 00       	call   c0027553 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 a7 d2 01 00       	call   c00285c7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 90 c8 01 00       	call   c0027bd0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 fb c1 01 00       	call   c0027553 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 47 d2 01 00       	call   c00285c7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 30 c8 01 00       	call   c0027bd0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 9b c1 01 00       	call   c0027553 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 e7 d1 01 00       	call   c00285c7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 d0 c7 01 00       	call   c0027bd0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 3b c1 01 00       	call   c0027553 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 87 d1 01 00       	call   c00285c7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 70 c7 01 00       	call   c0027bd0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 db c0 01 00       	call   c0027553 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 27 d1 01 00       	call   c00285c7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 10 c7 01 00       	call   c0027bd0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 7b c0 01 00       	call   c0027553 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 c7 d0 01 00       	call   c00285c7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 b0 c6 01 00       	call   c0027bd0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 1b c0 01 00       	call   c0027553 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 67 d0 01 00       	call   c00285c7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 50 c6 01 00       	call   c0027bd0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 bb bf 01 00       	call   c0027553 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 1c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 60 bf 01 00       	call   c0027553 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 bd c5 01 00       	call   c0027bd0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 79 ce 01 00       	call   c00284a3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 03 bf 01 00       	call   c0027553 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 60 c5 01 00       	call   c0027bd0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 1c ce 01 00       	call   c00284a3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 a6 be 01 00       	call   c0027553 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 03 c5 01 00       	call   c0027bd0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 bf cd 01 00       	call   c00284a3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 49 be 01 00       	call   c0027553 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 a6 c4 01 00       	call   c0027bd0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 62 cd 01 00       	call   c00284a3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 ec bd 01 00       	call   c0027553 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 49 c4 01 00       	call   c0027bd0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 05 cd 01 00       	call   c00284a3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 8f bd 01 00       	call   c0027553 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 ec c3 01 00       	call   c0027bd0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 a8 cc 01 00       	call   c00284a3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 32 bd 01 00       	call   c0027553 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 8f c3 01 00       	call   c0027bd0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 4b cc 01 00       	call   c00284a3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 d5 bc 01 00       	call   c0027553 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 32 c3 01 00       	call   c0027bd0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 ee cb 01 00       	call   c00284a3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ea c2 01 00       	call   c0027bd0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 5a cd 01 00       	jmp    c0028650 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 cc c9 01 00       	call   c002849f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 8a c9 01 00       	call   c0028481 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 21 c7 01 00       	call   c0028233 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 22 ba 01 00       	call   c0027553 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 f1 c6 01 00       	call   c0028233 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 58 c3 01 00       	call   c0027eb4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 f7 c8 01 00       	call   c0028481 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 fa c8 01 00       	call   c002849f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 cd c8 01 00       	call   c002849f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 c6 c2 01 00       	call   c0027eb4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 48 ca 01 00       	call   c0028650 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 23 ca 01 00       	call   c0028650 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 fd c5 01 00       	call   c0028233 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 54 bf 01 00       	call   c0027ba4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 33 c8 01 00       	call   c002849f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 cc b8 01 00       	call   c0027553 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 f0 be 01 00       	call   c0027ba4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 8a c9 01 00       	call   c0028650 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ca c1 01 00       	call   c0027eb4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 47 b8 01 00       	call   c0027553 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 73 c4 01 00       	call   c0028233 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 73 b7 01 00       	call   c0027553 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 53 b7 01 00       	call   c0027553 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 23 c4 01 00       	call   c0028233 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 73 c6 01 00       	call   c002849d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 52 bd 01 00       	call   c0027ba4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 cc c7 01 00       	call   c0028630 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 fb c5 01 00       	call   c0028481 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 f9 bc 01 00       	call   c0027ba4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 77 c3 01 00       	call   c0028233 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 fa bc 01 00       	call   c0027bd0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 4c c3 01 00       	call   c0028233 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 b3 bf 01 00       	call   c0027eb4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 32 b6 01 00       	call   c0027553 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 fc c2 01 00       	call   c0028233 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 48 c5 01 00       	call   c002849f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 3d bc 01 00       	call   c0027bd0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 0f bc 01 00       	call   c0027bd0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 48 c2 01 00       	call   c0028233 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 ac be 01 00       	call   c0027eb4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 74 be 01 00       	call   c0027eb4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 f3 b4 01 00       	call   c0027553 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 d8 c5 01 00       	call   c0028650 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 b2 c1 01 00       	call   c0028233 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 09 bb 01 00       	call   c0027ba4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 e8 c3 01 00       	call   c002849f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 80 b4 01 00       	call   c0027553 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 a4 ba 01 00       	call   c0027ba4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 3e c5 01 00       	call   c0028650 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 07 c3 01 00       	call   c002849f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 c5 c2 01 00       	call   c0028481 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 5c c0 01 00       	call   c0028233 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 5d b3 01 00       	call   c0027553 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 2c c0 01 00       	call   c0028233 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 93 bc 01 00       	call   c0027eb4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 32 c2 01 00       	call   c0028481 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 35 c2 01 00       	call   c002849f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 08 c2 01 00       	call   c002849f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 01 bc 01 00       	call   c0027eb4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 83 c3 01 00       	call   c0028650 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 5e c3 01 00       	call   c0028650 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 38 bf 01 00       	call   c0028233 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 8f b8 01 00       	call   c0027ba4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 6e c1 01 00       	call   c002849f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 07 b2 01 00       	call   c0027553 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 2b b8 01 00       	call   c0027ba4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 c5 c2 01 00       	call   c0028650 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 05 bb 01 00       	call   c0027eb4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 82 b1 01 00       	call   c0027553 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 ad bd 01 00       	call   c0028233 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 ad b0 01 00       	call   c0027553 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 8d b0 01 00       	call   c0027553 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 5d bd 01 00       	call   c0028233 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 ad bf 01 00       	call   c002849d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 8b b6 01 00       	call   c0027ba4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 05 c1 01 00       	call   c0028630 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 34 bf 01 00       	call   c0028481 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 31 b6 01 00       	call   c0027ba4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 af bc 01 00       	call   c0028233 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 32 b6 01 00       	call   c0027bd0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 84 bc 01 00       	call   c0028233 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 eb b8 01 00       	call   c0027eb4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 6a af 01 00       	call   c0027553 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 34 bc 01 00       	call   c0028233 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 80 be 01 00       	call   c002849f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 75 b5 01 00       	call   c0027bd0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 47 b5 01 00       	call   c0027bd0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 7e bb 01 00       	call   c0028233 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 e2 b7 01 00       	call   c0027eb4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 af b7 01 00       	call   c0027eb4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 2e ae 01 00       	call   c0027553 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 13 bf 01 00       	call   c0028650 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 ed ba 01 00       	call   c0028233 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 44 b4 01 00       	call   c0027ba4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 23 bd 01 00       	call   c002849f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 bb ad 01 00       	call   c0027553 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 df b3 01 00       	call   c0027ba4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 79 be 01 00       	call   c0028650 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 42 bc 01 00       	call   c002849f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 00 bc 01 00       	call   c0028481 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 97 b9 01 00       	call   c0028233 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 98 ac 01 00       	call   c0027553 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 67 b9 01 00       	call   c0028233 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ce b5 01 00       	call   c0027eb4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 6d bb 01 00       	call   c0028481 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 70 bb 01 00       	call   c002849f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 43 bb 01 00       	call   c002849f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 3c b5 01 00       	call   c0027eb4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 be bc 01 00       	call   c0028650 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 99 bc 01 00       	call   c0028650 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 73 b8 01 00       	call   c0028233 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ca b1 01 00       	call   c0027ba4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 a9 ba 01 00       	call   c002849f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 42 ab 01 00       	call   c0027553 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 66 b1 01 00       	call   c0027ba4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 00 bc 01 00       	call   c0028650 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 40 b4 01 00       	call   c0027eb4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 bd aa 01 00       	call   c0027553 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 e8 b6 01 00       	call   c0028233 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 e8 a9 01 00       	call   c0027553 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 c8 a9 01 00       	call   c0027553 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 98 b6 01 00       	call   c0028233 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 e8 b8 01 00       	call   c002849d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 c6 af 01 00       	call   c0027ba4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 40 ba 01 00       	call   c0028630 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 6f b8 01 00       	call   c0028481 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 6c af 01 00       	call   c0027ba4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ea b5 01 00       	call   c0028233 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 6d af 01 00       	call   c0027bd0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 bf b5 01 00       	call   c0028233 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 26 b2 01 00       	call   c0027eb4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 a5 a8 01 00       	call   c0027553 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 6f b5 01 00       	call   c0028233 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 bb b7 01 00       	call   c002849f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 b0 ae 01 00       	call   c0027bd0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 82 ae 01 00       	call   c0027bd0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 b9 b4 01 00       	call   c0028233 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 1d b1 01 00       	call   c0027eb4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ea b0 01 00       	call   c0027eb4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 69 a7 01 00       	call   c0027553 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 4e b8 01 00       	call   c0028650 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 28 b4 01 00       	call   c0028233 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 7f ad 01 00       	call   c0027ba4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 5e b6 01 00       	call   c002849f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 f6 a6 01 00       	call   c0027553 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 1a ad 01 00       	call   c0027ba4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 b4 b7 01 00       	call   c0028650 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 7d b5 01 00       	call   c002849f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 3b b5 01 00       	call   c0028481 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 d2 b2 01 00       	call   c0028233 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 d3 a5 01 00       	call   c0027553 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 a2 b2 01 00       	call   c0028233 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 09 af 01 00       	call   c0027eb4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 a8 b4 01 00       	call   c0028481 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 ab b4 01 00       	call   c002849f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 7e b4 01 00       	call   c002849f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 77 ae 01 00       	call   c0027eb4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 f9 b5 01 00       	call   c0028650 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 d4 b5 01 00       	call   c0028650 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 ae b1 01 00       	call   c0028233 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 05 ab 01 00       	call   c0027ba4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 e4 b3 01 00       	call   c002849f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 7d a4 01 00       	call   c0027553 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 a1 aa 01 00       	call   c0027ba4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 3b b5 01 00       	call   c0028650 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 7b ad 01 00       	call   c0027eb4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 f8 a3 01 00       	call   c0027553 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 23 b0 01 00       	call   c0028233 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 23 a3 01 00       	call   c0027553 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 03 a3 01 00       	call   c0027553 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 d3 af 01 00       	call   c0028233 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 23 b2 01 00       	call   c002849d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 01 a9 01 00       	call   c0027ba4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 7b b3 01 00       	call   c0028630 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 aa b1 01 00       	call   c0028481 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 a7 a8 01 00       	call   c0027ba4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 25 af 01 00       	call   c0028233 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 a8 a8 01 00       	call   c0027bd0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 fa ae 01 00       	call   c0028233 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 61 ab 01 00       	call   c0027eb4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 e0 a1 01 00       	call   c0027553 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 aa ae 01 00       	call   c0028233 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 f6 b0 01 00       	call   c002849f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 eb a7 01 00       	call   c0027bd0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 bd a7 01 00       	call   c0027bd0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 f4 ad 01 00       	call   c0028233 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 58 aa 01 00       	call   c0027eb4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 25 aa 01 00       	call   c0027eb4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 a4 a0 01 00       	call   c0027553 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 89 b1 01 00       	call   c0028650 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 63 ad 01 00       	call   c0028233 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 ba a6 01 00       	call   c0027ba4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 99 af 01 00       	call   c002849f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 31 a0 01 00       	call   c0027553 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 55 a6 01 00       	call   c0027ba4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 ef b0 01 00       	call   c0028650 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 b5 ae 01 00       	call   c002849f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 73 ae 01 00       	call   c0028481 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 0a ac 01 00       	call   c0028233 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 0b 9f 01 00       	call   c0027553 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 da ab 01 00       	call   c0028233 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 41 a8 01 00       	call   c0027eb4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 e0 ad 01 00       	call   c0028481 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 e3 ad 01 00       	call   c002849f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 b6 ad 01 00       	call   c002849f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 af a7 01 00       	call   c0027eb4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 31 af 01 00       	call   c0028650 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 08 af 01 00       	call   c0028650 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 e2 aa 01 00       	call   c0028233 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 39 a4 01 00       	call   c0027ba4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 18 ad 01 00       	call   c002849f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 b1 9d 01 00       	call   c0027553 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 d9 a3 01 00       	call   c0027ba4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 73 ae 01 00       	call   c0028650 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 b4 a6 01 00       	call   c0027eb4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 31 9d 01 00       	call   c0027553 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 5d a9 01 00       	call   c0028233 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 5d 9c 01 00       	call   c0027553 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 3d 9c 01 00       	call   c0027553 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 0d a9 01 00       	call   c0028233 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 41 ab 01 00       	call   c0028481 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 38 a2 01 00       	call   c0027ba4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 b2 ac 01 00       	call   c0028630 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 e1 aa 01 00       	call   c0028481 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 db a1 01 00       	call   c0027ba4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 59 a8 01 00       	call   c0028233 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 dc a1 01 00       	call   c0027bd0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 2e a8 01 00       	call   c0028233 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 95 a4 01 00       	call   c0027eb4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 14 9b 01 00       	call   c0027553 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 de a7 01 00       	call   c0028233 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 2a aa 01 00       	call   c002849f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 1f a1 01 00       	call   c0027bd0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 f1 a0 01 00       	call   c0027bd0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 35 a7 01 00       	call   c0028233 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 9c a3 01 00       	call   c0027eb4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 85 a0 01 00       	call   c0027bd0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 41 a9 01 00       	call   c00284a3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 34 a3 01 00       	call   c0027eb4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 b3 99 01 00       	call   c0027553 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 98 aa 01 00       	call   c0028650 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 72 a6 01 00       	call   c0028233 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 c9 9f 01 00       	call   c0027ba4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 a8 a8 01 00       	call   c002849f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 40 99 01 00       	call   c0027553 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 68 9f 01 00       	call   c0027ba4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 02 aa 01 00       	call   c0028650 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 44 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61bc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 38 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61c8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 bd a6 01 00       	call   c002849f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 7b a6 01 00       	call   c0028481 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 67 a6 01 00       	call   c002849f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 d9 a3 01 00       	call   c0028233 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 57 9d 01 00       	call   c0027bd0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 a9 a3 01 00       	call   c0028233 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 af 96 01 00       	call   c0027553 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 7e a3 01 00       	call   c0028233 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ce a5 01 00       	call   c002849d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 af 9c 01 00       	call   c0027ba4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 29 a7 01 00       	call   c0028630 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 58 a5 01 00       	call   c0028481 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 57 9c 01 00       	call   c0027ba4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 d5 a2 01 00       	call   c0028233 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 58 9c 01 00       	call   c0027bd0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 aa a2 01 00       	call   c0028233 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 11 9f 01 00       	call   c0027eb4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 90 95 01 00       	call   c0027553 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 b8 9e 01 00       	call   c0027eb4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 3e 95 01 00       	call   c0027553 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 24 a6 01 00       	call   c0028650 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 fe a1 01 00       	call   c0028233 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 55 9b 01 00       	call   c0027ba4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 34 a4 01 00       	call   c002849f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 cd 94 01 00       	call   c0027553 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 f9 9a 01 00       	call   c0027ba4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 93 a5 01 00       	call   c0028650 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 48 a1 01 00       	call   c0028233 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 c5 9a 01 00       	call   c0027bd0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 16 a1 01 00       	call   c0028233 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 1c 94 01 00       	call   c0027553 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 ec a0 01 00       	call   c0028233 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 40 a3 01 00       	call   c00284a1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 19 9a 01 00       	call   c0027ba4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 93 a4 01 00       	call   c0028630 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 c2 a2 01 00       	call   c0028481 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 c0 99 01 00       	call   c0027ba4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 3e a0 01 00       	call   c0028233 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 c1 99 01 00       	call   c0027bd0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 13 a0 01 00       	call   c0028233 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 7a 9c 01 00       	call   c0027eb4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 f9 92 01 00       	call   c0027553 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 15 9c 01 00       	call   c0027eb4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 94 92 01 00       	call   c0027553 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 7a a3 01 00       	call   c0028650 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 54 9f 01 00       	call   c0028233 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 ab 98 01 00       	call   c0027ba4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 8a a1 01 00       	call   c002849f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 23 92 01 00       	call   c0027553 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 4f 98 01 00       	call   c0027ba4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 c0 9e 01 00       	call   c0028233 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 c6 91 01 00       	call   c0027553 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 5e 9f 02 c0       	mov    eax,0xc0029f5e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 6f 9f 02 c0       	mov    eax,0xc0029f6f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 a6 9f 02 c0       	push   0xc0029fa6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 e8 e5 02 c0       	mov    eax,0xc002e5e8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 af 9f 02 c0       	push   0xc0029faf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 cc 69 02 c0       	mov    eax,0xc00269cc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 b9 9f 02 c0       	push   0xc0029fb9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 00 67 02 c0       	mov    eax,0xc0026700
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 cc 6a 02 c0       	mov    eax,0xc0026acc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 cc 9f 02 c0       	push   0xc0029fcc
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 4c 68 02 c0       	mov    eax,0xc002684c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 d5 9f 02 c0       	push   0xc0029fd5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ec e5 02 c0       	mov    eax,0xc002e5ec
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ed e5 02 c0       	mov    eax,0xc002e5ed
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 a5 5e 00 00       	call   c00144c8 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c000e668:	68 ef 9f 02 c0       	push   0xc0029fef
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 b1 f5 00 00       	call   c001dc26 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 9a f8 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 82 e7 01 c0       	push   0xc001e782
c000e693:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c000e699:	e8 86 f8 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c000e6a6:	c6 05 ed e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5ed,0x1
c000e6ad:	e8 51 04 01 00       	call   c001eb03 <Vm::initialise8086()>
c000e6b2:	e8 f9 4b 00 00       	call   c00132b0 <Fs::initVFS()>
c000e6b7:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 e3 de 00 00       	call   c001c5b6 <Sys::loadSyscalls()>
c000e6d3:	e8 bc bd 00 00       	call   c001a494 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 fc 9f 02 c0       	push   0xc0029ffc
c000e6e2:	68 05 a0 02 c0       	push   0xc002a005
c000e6e7:	e8 ce ca 00 00       	call   c001b1ba <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 a4 56 00 00       	call   c0013d98 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 97 5d 00 00       	call   c001449c <Device::loadDriversForAll()>
c000e705:	e8 d0 b8 00 00       	call   c0019fda <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 0d a0 02 c0       	push   0xc002a00d
c000e719:	e8 2c f0 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 57 f2 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 54 fb 00 00       	call   c001e288 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 29 a0 02 c0       	push   0xc002a029
c000e749:	50                   	push   eax
c000e74a:	e8 f3 5d 00 00       	call   c0014542 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 01 e6 02 c0 04 	test   BYTE PTR ds:0xc002e601,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 b3 7d 01 00       	call   c0026696 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 ce a3 00 00       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 a7 a3 00 00       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 85 a3 00 00       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 63 a3 00 00       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 00 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e600,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 71 a2 00 00       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 4c a2 00 00       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 1d 7c 01 00       	call   c0026650 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 da 7b 01 00       	call   c0026630 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 68 a2 00 00       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 39 a0 02 c0       	push   0xc002a039
c000eaaf:	e8 78 44 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 4c a0 02 c0       	push   0xc002a04c
c000ead2:	e8 55 44 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 5d a0 02 c0       	push   0xc002a05d
c000eaf5:	e8 32 44 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 6e a0 02 c0       	push   0xc002a06e
c000eb18:	e8 0f 44 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 7f a0 02 c0       	push   0xc002a07f
c000eb3b:	e8 ec 43 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 90 a0 02 c0       	push   0xc002a090
c000eb5e:	e8 c9 43 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 a1 a0 02 c0       	push   0xc002a0a1
c000eb81:	e8 a6 43 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 b2 a0 02 c0       	push   0xc002a0b2
c000eba4:	e8 83 43 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 c3 a0 02 c0       	push   0xc002a0c3
c000ebc7:	e8 60 43 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 d4 a0 02 c0       	push   0xc002a0d4
c000ebea:	e8 3d 43 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 e5 a0 02 c0       	push   0xc002a0e5
c000ec0d:	e8 1a 43 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 f6 a0 02 c0       	push   0xc002a0f6
c000ec30:	e8 f7 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 07 a1 02 c0       	push   0xc002a107
c000ec53:	e8 d4 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 18 a1 02 c0       	push   0xc002a118
c000ec76:	e8 b1 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 29 a1 02 c0       	push   0xc002a129
c000ec99:	e8 8e 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 3a a1 02 c0       	push   0xc002a13a
c000ecbc:	e8 6b 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 4b a1 02 c0       	push   0xc002a14b
c000ecdf:	e8 48 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 5c a1 02 c0       	push   0xc002a15c
c000ed02:	e8 25 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 6d a1 02 c0       	push   0xc002a16d
c000ed21:	e8 06 42 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 50 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc50
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 f5 41 00 00       	jmp    c0012f2c <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 7e a1 02 c0       	push   0xc002a17e
c000ee0a:	e8 be b7 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 84 a1 02 c0       	push   0xc002a184
c000ee42:	e8 86 b7 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 00 e6 02 c0 04 	test   BYTE PTR ds:0xc002e600,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 24 d5 02 c0 	sete   BYTE PTR ds:0xc002d524
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 07 93 00 00       	call   c00181bc <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 8e 54 00 00       	call   c0014352 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 b0 9e 00 00       	call   c0018da4 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 4f 54 00 00       	call   c0014352 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 b9 59 00 00       	call   c00148d8 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 1f 54 00 00       	call   c0014352 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 cf f0 00 00       	call   c001e024 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 8a a1 02 c0       	push   0xc002a18a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 89 3f 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 9b a1 02 c0       	push   0xc002a19b
c000efc0:	e8 08 b6 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 a8 a1 02 c0       	push   0xc002a1a8
c000efd5:	e8 f3 b5 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 b2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1b2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 dc b5 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 ec a1 02 c0       	push   0xc002a1ec
c000f086:	e8 a1 3e 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 f2 e5 02 c0       	mov    ds:0xc002e5f2,eax
c000f0c7:	66 89 15 f0 e5 02 c0 	mov    WORD PTR ds:0xc002e5f0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 16 ec 00 00       	call   c001ddf4 <unlockScheduler()>
c000f1de:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 a4 94 01 00       	call   c00286d0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 9b 94 01 00       	call   c00286d0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 f8 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e5f8,0x7ff
c000f323:	a3 fa e5 02 c0       	mov    ds:0xc002e5fa,eax
c000f328:	0f 01 1d f8 e5 02 c0 	lidtd  ds:0xc002e5f8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 11 28 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 42 2e 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 7e 1e 00 00       	call   c00114bc <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 af 1e 00 00       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 00 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d500
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 08 a2 02 c0       	push   0xc002a208
c000f6f4:	e8 33 38 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 00 d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d500,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 07 27 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 00 d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d500
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 29 2c 00 00       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 00 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d500
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 38 a2 02 c0       	push   0xc002a238
c000f7ad:	e8 1b ae 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 3d a2 02 c0       	push   0xc002a23d
c000f7c3:	e8 05 ae 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 19 e6 00 00       	call   c001ddf2 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 0a e6 00 00       	call   c001ddf4 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 2b 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 58 2c 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 10 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 fb 28 00 00       	call   c001211e <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 20 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d520
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 9e 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 60 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 f7 0c 00 00       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 20 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d520
c000fb46:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 20 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d520,0x8000
c000fba0:	c6 05 80 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e680,0x1
c000fba7:	c7 05 b8 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e6b8,0xc000fa13
c000fbb1:	c7 05 a4 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e6a4,0xc000f89a
c000fbbb:	c7 05 a0 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e6a0,0xc000f8e5
c000fbc5:	c7 05 ac e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e6ac,0xc000fa59
c000fbcf:	c7 05 b4 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e6b4,0xc000f963
c000fbd9:	c7 05 a8 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e6a8,0xc000f9c1
c000fbe3:	c7 05 b0 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e6b0,0xc000f9c2
c000fbed:	c7 05 bc e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e6bc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 de 09 00 00       	call   c00105e8 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 44 a2 02 c0       	push   0xc002a244
c000fc4a:	e8 dd 32 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 3d 04 00 00       	call   c00100a3 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 df 20 00 00       	call   c0011d4a <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 51 bc 02 c0       	push   0xc002bc51
c000fc92:	e8 36 a9 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 00 e6 02 c0    	mov    DWORD PTR ds:0xc002e600,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 af 22 00 00       	call   c0011f5c <VAS::VAS()>
c000fcad:	89 1d 68 e7 02 c0    	mov    DWORD PTR ds:0xc002e768,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 5b a2 02 c0 	mov    DWORD PTR [esp],0xc002a25b
c000fcbf:	e8 68 32 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 00 21 00 00       	call   c0011dc9 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 e8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e8,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 78 a2 02 c0       	push   0xc002a278
c000fced:	e8 3a 32 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 ea 24 00 00       	call   c00121f6 <VAS::~VAS()>
c000fd0c:	c7 04 24 8b a2 02 c0 	mov    DWORD PTR [esp],0xc002a28b
c000fd13:	e8 b5 a8 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 40 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19c0],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 40 e6 02 c0       	mov    esi,0xc002e640
c000fd89:	8d 90 40 e6 02 c0    	lea    edx,[eax-0x3ffd19c0]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 40 e6 02 c0    	lea    eax,[edx-0x3ffd19c0]
c000fdef:	8d 94 11 40 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19c0]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 04 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d504
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 04 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d504
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 04 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d504
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 30 e6 02 c0       	mov    ds:0xc002e630,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 34 e6 02 c0    	idiv   DWORD PTR ds:0xc002e634
c000fe91:	39 05 2c e6 02 c0    	cmp    DWORD PTR ds:0xc002e62c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 2c e6 02 c0       	mov    ds:0xc002e62c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 c2 0a 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 a6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2a6
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 eb a6 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 24 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e624
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d 24 e6 02 c0    	mov    DWORD PTR ds:0xc002e624,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 24 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e624,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 d0 a2 02 c0       	push   0xc002a2d0
c000ff27:	e8 00 30 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a8 00 00 00    	jne    c000ffeb <Phys::allocatePage()+0x109>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 e1 a2 02 c0       	push   0xc002a2e1
c000ff4b:	e8 7d a6 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d 24 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e624
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c000ff71:	40                   	inc    eax
c000ff72:	a3 30 e6 02 c0       	mov    ds:0xc002e630,eax
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	c1 e0 02             	shl    eax,0x2
c000ff80:	99                   	cdq    
c000ff81:	f7 3d 34 e6 02 c0    	idiv   DWORD PTR ds:0xc002e634
c000ff87:	5a                   	pop    edx
c000ff88:	39 05 2c e6 02 c0    	cmp    DWORD PTR ds:0xc002e62c,eax
c000ff8e:	59                   	pop    ecx
c000ff8f:	75 60                	jne    c000fff1 <Phys::allocatePage()+0x10f>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4d                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c000ff96:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000ff9d:	75 44                	jne    c000ffe3 <Phys::allocatePage()+0x101>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 3b                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 34                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 2a                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	68 bc a2 02 c0       	push   0xc002a2bc
c000ffc1:	e8 66 2f 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c000ffc6:	83 c4 0c             	add    esp,0xc
c000ffc9:	6a 01                	push   0x1
c000ffcb:	6a 08                	push   0x8
c000ffcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffd5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffdb:	e8 56 2c 00 00       	call   c0012c36 <VAS::scanForEviction(int, int)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	a1 24 e6 02 c0       	mov    eax,ds:0xc002e624
c000ffe8:	c1 e0 0c             	shl    eax,0xc
c000ffeb:	83 c4 14             	add    esp,0x14
c000ffee:	5b                   	pop    ebx
c000ffef:	5e                   	pop    esi
c000fff0:	c3                   	ret    
c000fff1:	83 ec 0c             	sub    esp,0xc
c000fff4:	a3 2c e6 02 c0       	mov    ds:0xc002e62c,eax
c000fff9:	50                   	push   eax
c000fffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fffe:	e8 79 09 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c0010003:	83 c4 10             	add    esp,0x10
c0010006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000a:	83 f8 32             	cmp    eax,0x32
c001000d:	7e d4                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c001000f:	eb 85                	jmp    c000ff96 <Phys::allocatePage()+0xb4>

c0010011 <Phys::allocateContiguousPages(int)>:
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	31 db                	xor    ebx,ebx
c0010016:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001001a:	e8 d3 dd 00 00       	call   c001ddf2 <lockScheduler()>
c001001f:	85 db                	test   ebx,ebx
c0010021:	75 11                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010023:	e8 ba fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010028:	83 ff 01             	cmp    edi,0x1
c001002b:	89 c6                	mov    esi,eax
c001002d:	74 21                	je     c0010050 <Phys::allocateContiguousPages(int)+0x3f>
c001002f:	bb 01 00 00 00       	mov    ebx,0x1
c0010034:	e8 a9 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010039:	89 da                	mov    edx,ebx
c001003b:	c1 e2 0c             	shl    edx,0xc
c001003e:	01 f2                	add    edx,esi
c0010040:	39 c2                	cmp    edx,eax
c0010042:	74 17                	je     c001005b <Phys::allocateContiguousPages(int)+0x4a>
c0010044:	bb 01 00 00 00       	mov    ebx,0x1
c0010049:	89 c6                	mov    esi,eax
c001004b:	83 ff 01             	cmp    edi,0x1
c001004e:	75 e4                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010050:	e8 9f dd 00 00       	call   c001ddf4 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    
c001005b:	43                   	inc    ebx
c001005c:	39 fb                	cmp    ebx,edi
c001005e:	75 bf                	jne    c001001f <Phys::allocateContiguousPages(int)+0xe>
c0010060:	e8 8f dd 00 00       	call   c001ddf4 <unlockScheduler()>
c0010065:	89 f0                	mov    eax,esi
c0010067:	5b                   	pop    ebx
c0010068:	5e                   	pop    esi
c0010069:	5f                   	pop    edi
c001006a:	c3                   	ret    

c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001006b:	56                   	push   esi
c001006c:	53                   	push   ebx
c001006d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010071:	39 1d 28 e6 02 c0    	cmp    DWORD PTR ds:0xc002e628,ebx
c0010077:	73 06                	jae    c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010079:	89 1d 28 e6 02 c0    	mov    DWORD PTR ds:0xc002e628,ebx
c001007f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010083:	c1 eb 0c             	shr    ebx,0xc
c0010086:	c1 e8 0c             	shr    eax,0xc
c0010089:	39 d8                	cmp    eax,ebx
c001008b:	73 13                	jae    c00100a0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001008d:	6a 00                	push   0x0
c001008f:	8d 70 01             	lea    esi,[eax+0x1]
c0010092:	50                   	push   eax
c0010093:	e8 72 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010098:	5a                   	pop    edx
c0010099:	89 f0                	mov    eax,esi
c001009b:	59                   	pop    ecx
c001009c:	39 f3                	cmp    ebx,esi
c001009e:	75 ed                	jne    c001008d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100a0:	5b                   	pop    ebx
c00100a1:	5e                   	pop    esi
c00100a2:	c3                   	ret    

c00100a3 <Phys::physicalMemorySetup(unsigned int)>:
c00100a3:	55                   	push   ebp
c00100a4:	57                   	push   edi
c00100a5:	56                   	push   esi
c00100a6:	53                   	push   ebx
c00100a7:	31 db                	xor    ebx,ebx
c00100a9:	83 ec 40             	sub    esp,0x40
c00100ac:	6a 30                	push   0x30
c00100ae:	6a 00                	push   0x0
c00100b0:	68 40 e6 02 c0       	push   0xc002e640
c00100b5:	e8 be 06 ff ff       	call   c0000778 <memset>
c00100ba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100c3:	05 00 10 00 00       	add    eax,0x1000
c00100c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	83 ec 08             	sub    esp,0x8
c00100d2:	6a 01                	push   0x1
c00100d4:	53                   	push   ebx
c00100d5:	43                   	inc    ebx
c00100d6:	e8 2f fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100e4:	75 e9                	jne    c00100cf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100e6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ed:	66 85 c0             	test   ax,ax
c00100f0:	0f 84 8e 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010102:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010106:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001010b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001010f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010117:	eb 15                	jmp    c001012e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010119:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001011d:	83 c3 18             	add    ebx,0x18
c0010120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010124:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010128:	0f 84 66 01 00 00    	je     c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001012e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010134:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010137:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001013b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001013f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010141:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010144:	01 f0                	add    eax,esi
c0010146:	55                   	push   ebp
c0010147:	11 fa                	adc    edx,edi
c0010149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001014d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010151:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010155:	56                   	push   esi
c0010156:	68 1c a3 02 c0       	push   0xc002a31c
c001015b:	e8 cc 2d 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0010160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	09 f8                	or     eax,edi
c0010169:	0f 85 25 01 00 00    	jne    c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001016f:	4d                   	dec    ebp
c0010170:	75 a7                	jne    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010172:	ba 00 00 08 00       	mov    edx,0x80000
c0010177:	89 c1                	mov    ecx,eax
c0010179:	39 f2                	cmp    edx,esi
c001017b:	19 f9                	sbb    ecx,edi
c001017d:	0f 82 a7 00 00 00    	jb     c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010187:	89 c1                	mov    ecx,eax
c0010189:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001018d:	0f 83 97 00 00 00    	jae    c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010193:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010198:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a0:	39 fa                	cmp    edx,edi
c00101a2:	19 e8                	sbb    eax,ebp
c00101a4:	0f 82 14 01 00 00    	jb     c00102be <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101ae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101b8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101bd:	83 d5 ff             	adc    ebp,0xffffffff
c00101c0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101c4:	31 c0                	xor    eax,eax
c00101c6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ca:	39 fa                	cmp    edx,edi
c00101cc:	89 c1                	mov    ecx,eax
c00101ce:	19 e9                	sbb    ecx,ebp
c00101d0:	0f 83 43 ff ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	be 00 00 08 00       	mov    esi,0x80000
c00101db:	50                   	push   eax
c00101dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101e0:	57                   	push   edi
c00101e1:	56                   	push   esi
c00101e2:	68 40 a3 02 c0       	push   0xc002a340
c00101e7:	e8 40 2d 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00101ec:	5a                   	pop    edx
c00101ed:	59                   	pop    ecx
c00101ee:	57                   	push   edi
c00101ef:	56                   	push   esi
c00101f0:	e8 76 fe ff ff       	call   c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101fd:	83 c4 0c             	add    esp,0xc
c0010200:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010204:	03 05 34 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e634
c001020a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010211:	a3 34 e6 02 c0       	mov    ds:0xc002e634,eax
c0010216:	52                   	push   edx
c0010217:	50                   	push   eax
c0010218:	68 fd a2 02 c0       	push   0xc002a2fd
c001021d:	e8 0a 2d 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0010222:	83 c4 10             	add    esp,0x10
c0010225:	e9 ef fe ff ff       	jmp    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001022e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010236:	39 ea                	cmp    edx,ebp
c0010238:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001023c:	0f 82 d7 fe ff ff    	jb     c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010247:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001024b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001024f:	0f 83 c4 fe ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010255:	39 ee                	cmp    esi,ebp
c0010257:	89 f8                	mov    eax,edi
c0010259:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001025d:	0f 83 78 ff ff ff    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010267:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001026f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010273:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001027f:	e9 57 ff ff ff       	jmp    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	68 ef a2 02 c0       	push   0xc002a2ef
c001028c:	e8 3c a3 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	bb 40 01 00 00       	mov    ebx,0x140
c0010299:	83 ec 08             	sub    esp,0x8
c001029c:	6a 00                	push   0x0
c001029e:	53                   	push   ebx
c001029f:	43                   	inc    ebx
c00102a0:	e8 65 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102a5:	ff 05 34 e6 02 c0    	inc    DWORD PTR ds:0xc002e634
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102b4:	75 e3                	jne    c0010299 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102b6:	83 c4 3c             	add    esp,0x3c
c00102b9:	5b                   	pop    ebx
c00102ba:	5e                   	pop    esi
c00102bb:	5f                   	pop    edi
c00102bc:	5d                   	pop    ebp
c00102bd:	c3                   	ret    
c00102be:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ce:	e9 d7 fe ff ff       	jmp    c00101aa <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102d3:	90                   	nop

c00102d4 <Pipe::isAtty()>:
c00102d4:	31 c0                	xor    eax,eax
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Pipe::~Pipe()>:
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	ba ac a3 02 c0       	mov    edx,0xc002a3ac
c00102e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e4:	89 10                	mov    DWORD PTR [eax],edx
c00102e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ea:	83 ec 0c             	sub    esp,0xc
c00102ed:	50                   	push   eax
c00102ee:	e8 37 16 00 00       	call   c001192a <UnixFile::~UnixFile()>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	90                   	nop
c00102f7:	83 c4 0c             	add    esp,0xc
c00102fa:	c3                   	ret    
c00102fb:	90                   	nop

c00102fc <Pipe::~Pipe()>:
c00102fc:	83 ec 0c             	sub    esp,0xc
c00102ff:	83 ec 0c             	sub    esp,0xc
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 cd ff ff ff       	call   c00102d8 <Pipe::~Pipe()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 ec 08             	sub    esp,0x8
c0010311:	6a 20                	push   0x20
c0010313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010317:	e8 30 2b 00 00       	call   c0012e4c <operator delete(void*, unsigned long)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	83 c4 0c             	add    esp,0xc
c0010322:	c3                   	ret    
c0010323:	90                   	nop

c0010324 <Pipe::read(unsigned long long, void*, int*)>:
c0010324:	55                   	push   ebp
c0010325:	57                   	push   edi
c0010326:	56                   	push   esi
c0010327:	53                   	push   ebx
c0010328:	83 ec 1c             	sub    esp,0x1c
c001032b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001032f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010333:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010337:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001033a:	89 c8                	mov    eax,ecx
c001033c:	99                   	cdq    
c001033d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010341:	74 19                	je     c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010343:	39 f9                	cmp    ecx,edi
c0010345:	89 d1                	mov    ecx,edx
c0010347:	19 f1                	sbb    ecx,esi
c0010349:	73 11                	jae    c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001034b:	e8 a2 da 00 00       	call   c001ddf2 <lockScheduler()>
c0010350:	e8 d9 dd 00 00       	call   c001e12e <schedule()>
c0010355:	e8 9a da 00 00       	call   c001ddf4 <unlockScheduler()>
c001035a:	eb db                	jmp    c0010337 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001035c:	39 f8                	cmp    eax,edi
c001035e:	89 d1                	mov    ecx,edx
c0010360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010364:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010368:	19 f1                	sbb    ecx,esi
c001036a:	73 08                	jae    c0010374 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001036c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010370:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010374:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010377:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001037a:	29 c6                	sub    esi,eax
c001037c:	89 f1                	mov    ecx,esi
c001037e:	c1 f9 1f             	sar    ecx,0x1f
c0010381:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010385:	89 ca                	mov    edx,ecx
c0010387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001038b:	19 d1                	sbb    ecx,edx
c001038d:	73 04                	jae    c0010393 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001038f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010393:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010397:	89 fd                	mov    ebp,edi
c0010399:	29 f5                	sub    ebp,esi
c001039b:	85 f6                	test   esi,esi
c001039d:	74 12                	je     c00103b1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001039f:	52                   	push   edx
c00103a0:	56                   	push   esi
c00103a1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103a4:	50                   	push   eax
c00103a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103a9:	e8 96 03 ff ff       	call   c0000744 <memcpy>
c00103ae:	83 c4 10             	add    esp,0x10
c00103b1:	85 ed                	test   ebp,ebp
c00103b3:	74 12                	je     c00103c7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103b5:	50                   	push   eax
c00103b6:	55                   	push   ebp
c00103b7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ba:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103be:	56                   	push   esi
c00103bf:	e8 80 03 ff ff       	call   c0000744 <memcpy>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103cd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103d0:	99                   	cdq    
c00103d1:	89 f7                	mov    edi,esi
c00103d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103db:	c1 ff 1f             	sar    edi,0x1f
c00103de:	57                   	push   edi
c00103df:	56                   	push   esi
c00103e0:	52                   	push   edx
c00103e1:	50                   	push   eax
c00103e2:	e8 e5 66 01 00       	call   c0026acc <__umoddi3>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ed:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103f2:	75 10                	jne    c0010404 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103f4:	83 ec 0c             	sub    esp,0xc
c00103f7:	68 69 a3 02 c0       	push   0xc002a369
c00103fc:	e8 cc a1 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001040c:	89 10                	mov    DWORD PTR [eax],edx
c001040e:	83 c4 1c             	add    esp,0x1c
c0010411:	31 c0                	xor    eax,eax
c0010413:	5b                   	pop    ebx
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	5d                   	pop    ebp
c0010417:	c3                   	ret    

c0010418 <Pipe::write(unsigned long long, void*, int*)>:
c0010418:	55                   	push   ebp
c0010419:	57                   	push   edi
c001041a:	56                   	push   esi
c001041b:	53                   	push   ebx
c001041c:	83 ec 1c             	sub    esp,0x1c
c001041f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010423:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001042b:	89 04 24             	mov    DWORD PTR [esp],eax
c001042e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010431:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010434:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010438:	89 de                	mov    esi,ebx
c001043a:	89 df                	mov    edi,ebx
c001043c:	c1 ff 1f             	sar    edi,0x1f
c001043f:	01 c6                	add    esi,eax
c0010441:	89 c8                	mov    eax,ecx
c0010443:	11 d7                	adc    edi,edx
c0010445:	99                   	cdq    
c0010446:	39 f1                	cmp    ecx,esi
c0010448:	89 d0                	mov    eax,edx
c001044a:	19 f8                	sbb    eax,edi
c001044c:	b8 01 00 00 00       	mov    eax,0x1
c0010451:	0f 82 80 00 00 00    	jb     c00104d7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010457:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001045a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001045d:	01 d8                	add    eax,ebx
c001045f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010463:	99                   	cdq    
c0010464:	f7 f9                	idiv   ecx
c0010466:	29 d1                	sub    ecx,edx
c0010468:	89 d7                	mov    edi,edx
c001046a:	89 c8                	mov    eax,ecx
c001046c:	99                   	cdq    
c001046d:	39 ce                	cmp    esi,ecx
c001046f:	19 d3                	sbb    ebx,edx
c0010471:	bb 00 00 00 00       	mov    ebx,0x0
c0010476:	72 04                	jb     c001047c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010478:	89 f3                	mov    ebx,esi
c001047a:	29 cb                	sub    ebx,ecx
c001047c:	89 f1                	mov    ecx,esi
c001047e:	29 d9                	sub    ecx,ebx
c0010480:	74 1a                	je     c001049c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010482:	52                   	push   edx
c0010483:	51                   	push   ecx
c0010484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010488:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001048c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001048f:	57                   	push   edi
c0010490:	e8 af 02 ff ff       	call   c0000744 <memcpy>
c0010495:	83 c4 10             	add    esp,0x10
c0010498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001049c:	85 db                	test   ebx,ebx
c001049e:	74 12                	je     c00104b2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104a0:	50                   	push   eax
c00104a1:	53                   	push   ebx
c00104a2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104a6:	51                   	push   ecx
c00104a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104b5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ba:	75 10                	jne    c00104cc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104bc:	83 ec 0c             	sub    esp,0xc
c00104bf:	68 85 a3 02 c0       	push   0xc002a385
c00104c4:	e8 04 a1 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104d3:	89 38                	mov    DWORD PTR [eax],edi
c00104d5:	31 c0                	xor    eax,eax
c00104d7:	83 c4 1c             	add    esp,0x1c
c00104da:	5b                   	pop    ebx
c00104db:	5e                   	pop    esi
c00104dc:	5f                   	pop    edi
c00104dd:	5d                   	pop    ebp
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <Pipe::Pipe(int)>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	83 ec 08             	sub    esp,0x8
c00104ea:	6a 00                	push   0x0
c00104ec:	50                   	push   eax
c00104ed:	e8 56 12 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	ba ac a3 02 c0       	mov    edx,0xc002a3ac
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	89 10                	mov    DWORD PTR [eax],edx
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010508:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	50                   	push   eax
c0010529:	e8 12 f3 ff ff       	call   c000f840 <malloc>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	89 c2                	mov    edx,eax
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001053a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010542:	90                   	nop
c0010543:	83 c4 0c             	add    esp,0xc
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <VgaText::isAtty()>:
c0010548:	b0 01                	mov    al,0x1
c001054a:	c3                   	ret    
c001054b:	90                   	nop

c001054c <VgaText::~VgaText()>:
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	89 10                	mov    DWORD PTR [eax],edx
c001055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	50                   	push   eax
c0010562:	e8 c3 13 00 00       	call   c001192a <UnixFile::~UnixFile()>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	90                   	nop
c001056b:	83 c4 0c             	add    esp,0xc
c001056e:	c3                   	ret    
c001056f:	90                   	nop

c0010570 <VgaText::~VgaText()>:
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	83 ec 0c             	sub    esp,0xc
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	e8 cd ff ff ff       	call   c001054c <VgaText::~VgaText()>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 ec 08             	sub    esp,0x8
c0010585:	68 60 12 00 00       	push   0x1260
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 b9 28 00 00       	call   c0012e4c <operator delete(void*, unsigned long)>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    

c001059a <VgaText::read(unsigned long long, void*, int*)>:
c001059a:	83 ec 10             	sub    esp,0x10
c001059d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a9:	e8 20 5d 00 00       	call   c00162ce <readKeyboard(VgaText*, char*, unsigned long)>
c00105ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105b2:	89 02                	mov    DWORD PTR [edx],eax
c00105b4:	31 c0                	xor    eax,eax
c00105b6:	83 c4 1c             	add    esp,0x1c
c00105b9:	c3                   	ret    

c00105ba <setTerminalScrollLock(bool)>:
c00105ba:	c3                   	ret    

c00105bb <addToTerminalCycle(VgaText*)>:
c00105bb:	8b 15 c0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6c0
c00105c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c5:	85 d2                	test   edx,edx
c00105c7:	75 0c                	jne    c00105d5 <addToTerminalCycle(VgaText*)+0x1a>
c00105c9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105cf:	a3 c0 e6 02 c0       	mov    ds:0xc002e6c0,eax
c00105d4:	c3                   	ret    
c00105d5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105db:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105e1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105e7:	c3                   	ret    

c00105e8 <installVgaTextImplementation()>:
c00105e8:	83 ec 10             	sub    esp,0x10
c00105eb:	6a 20                	push   0x20
c00105ed:	6a 00                	push   0x0
c00105ef:	68 a0 e6 02 c0       	push   0xc002e6a0
c00105f4:	e8 7f 01 ff ff       	call   c0000778 <memset>
c00105f9:	83 c4 1c             	add    esp,0x1c
c00105fc:	c3                   	ret    

c00105fd <scrollTerminalScrollLock(int)>:
c00105fd:	c3                   	ret    

c00105fe <VgaText::load()>:
c00105fe:	53                   	push   ebx
c00105ff:	31 c0                	xor    eax,eax
c0010601:	83 ec 58             	sub    esp,0x58
c0010604:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010608:	89 e2                	mov    edx,esp
c001060a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001060e:	40                   	inc    eax
c001060f:	83 f8 50             	cmp    eax,0x50
c0010612:	75 f6                	jne    c001060a <VgaText::load()+0xc>
c0010614:	31 c0                	xor    eax,eax
c0010616:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001061d:	84 c9                	test   cl,cl
c001061f:	74 06                	je     c0010627 <VgaText::load()+0x29>
c0010621:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010624:	40                   	inc    eax
c0010625:	eb ef                	jmp    c0010616 <VgaText::load()+0x18>
c0010627:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001062d:	85 c0                	test   eax,eax
c001062f:	74 09                	je     c001063a <VgaText::load()+0x3c>
c0010631:	51                   	push   ecx
c0010632:	51                   	push   ecx
c0010633:	52                   	push   edx
c0010634:	53                   	push   ebx
c0010635:	ff d0                	call   eax
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010640:	85 c0                	test   eax,eax
c0010642:	74 09                	je     c001064d <VgaText::load()+0x4f>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	53                   	push   ebx
c0010648:	ff d0                	call   eax
c001064a:	83 c4 10             	add    esp,0x10
c001064d:	83 c4 58             	add    esp,0x58
c0010650:	5b                   	pop    ebx
c0010651:	c3                   	ret    

c0010652 <VgaText::updateCursor()>:
c0010652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010656:	39 05 c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,eax
c001065c:	75 0c                	jne    c001066a <VgaText::updateCursor()+0x18>
c001065e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010664:	85 c0                	test   eax,eax
c0010666:	74 02                	je     c001066a <VgaText::updateCursor()+0x18>
c0010668:	ff e0                	jmp    eax
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::showCursor(bool)>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010674:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <VgaText::disableBlink(bool)>:
c001067c:	56                   	push   esi
c001067d:	53                   	push   ebx
c001067e:	51                   	push   ecx
c001067f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010687:	39 1d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebx
c001068d:	75 18                	jne    c00106a7 <VgaText::disableBlink(bool)+0x2b>
c001068f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 0e                	je     c00106a7 <VgaText::disableBlink(bool)+0x2b>
c0010699:	89 f1                	mov    ecx,esi
c001069b:	52                   	push   edx
c001069c:	52                   	push   edx
c001069d:	0f b6 d1             	movzx  edx,cl
c00106a0:	52                   	push   edx
c00106a1:	53                   	push   ebx
c00106a2:	ff d0                	call   eax
c00106a4:	83 c4 10             	add    esp,0x10
c00106a7:	89 f0                	mov    eax,esi
c00106a9:	83 f0 01             	xor    eax,0x1
c00106ac:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106b2:	58                   	pop    eax
c00106b3:	5b                   	pop    ebx
c00106b4:	5e                   	pop    esi
c00106b5:	c3                   	ret    

c00106b6 <VgaText::doANSI_SGR(int)>:
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106be:	85 d2                	test   edx,edx
c00106c0:	75 14                	jne    c00106d6 <VgaText::doANSI_SGR(int)+0x20>
c00106c2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106c8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106ce:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106d4:	eb 65                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	83 fa 07             	cmp    edx,0x7
c00106d9:	75 14                	jne    c00106ef <VgaText::doANSI_SGR(int)+0x39>
c00106db:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106e1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106e7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ed:	eb 4c                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106ef:	83 fa 1b             	cmp    edx,0x1b
c00106f2:	74 ce                	je     c00106c2 <VgaText::doANSI_SGR(int)+0xc>
c00106f4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106f7:	83 f9 07             	cmp    ecx,0x7
c00106fa:	77 09                	ja     c0010705 <VgaText::doANSI_SGR(int)+0x4f>
c00106fc:	8b 14 8d 40 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ac0]
c0010703:	eb 20                	jmp    c0010725 <VgaText::doANSI_SGR(int)+0x6f>
c0010705:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010708:	83 f9 07             	cmp    ecx,0x7
c001070b:	77 09                	ja     c0010716 <VgaText::doANSI_SGR(int)+0x60>
c001070d:	8b 14 8d 40 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ac0]
c0010714:	eb 25                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c0010716:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010719:	83 f9 07             	cmp    ecx,0x7
c001071c:	77 0e                	ja     c001072c <VgaText::doANSI_SGR(int)+0x76>
c001071e:	8b 14 95 f8 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c08]
c0010725:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072b:	c3                   	ret    
c001072c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001072f:	83 f9 07             	cmp    ecx,0x7
c0010732:	77 0d                	ja     c0010741 <VgaText::doANSI_SGR(int)+0x8b>
c0010734:	8b 14 95 d0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c30]
c001073b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010741:	c3                   	ret    

c0010742 <VgaText::setDefaultBgColour(VgaColour)>:
c0010742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010750:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <VgaText::setDefaultFgColour(VgaColour)>:
c0010758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010760:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010766:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001076e:	53                   	push   ebx
c001076f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010773:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010777:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001077b:	51                   	push   ecx
c001077c:	e8 c1 ff ff ff       	call   c0010742 <VgaText::setDefaultBgColour(VgaColour)>
c0010781:	58                   	pop    eax
c0010782:	5a                   	pop    edx
c0010783:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010787:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001078b:	5b                   	pop    ebx
c001078c:	eb ca                	jmp    c0010758 <VgaText::setDefaultFgColour(VgaColour)>

c001078e <VgaText::combineColours(unsigned char, unsigned char)>:
c001078e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010792:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010797:	83 e0 0f             	and    eax,0xf
c001079a:	c1 e2 04             	shl    edx,0x4
c001079d:	09 d0                	or     eax,edx
c001079f:	c3                   	ret    

c00107a0 <VgaText::scrollScreen()>:
c00107a0:	57                   	push   edi
c00107a1:	56                   	push   esi
c00107a2:	be 01 00 00 00       	mov    esi,0x1
c00107a7:	53                   	push   ebx
c00107a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ac:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107b2:	31 ff                	xor    edi,edi
c00107b4:	01 d9                	add    ecx,ebx
c00107b6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107b9:	83 fe 17             	cmp    esi,0x17
c00107bc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107c2:	75 28                	jne    c00107ec <VgaText::scrollScreen()+0x4c>
c00107c4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ca:	74 1c                	je     c00107e8 <VgaText::scrollScreen()+0x48>
c00107cc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107d3:	50                   	push   eax
c00107d4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107db:	50                   	push   eax
c00107dc:	e8 ad ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00107e1:	5a                   	pop    edx
c00107e2:	5a                   	pop    edx
c00107e3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107e6:	eb 04                	jmp    c00107ec <VgaText::scrollScreen()+0x4c>
c00107e8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ec:	47                   	inc    edi
c00107ed:	41                   	inc    ecx
c00107ee:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107f4:	75 c0                	jne    c00107b6 <VgaText::scrollScreen()+0x16>
c00107f6:	46                   	inc    esi
c00107f7:	83 fe 18             	cmp    esi,0x18
c00107fa:	75 b0                	jne    c00107ac <VgaText::scrollScreen()+0xc>
c00107fc:	39 1d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebx
c0010802:	75 24                	jne    c0010828 <VgaText::scrollScreen()+0x88>
c0010804:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001080b:	74 08                	je     c0010815 <VgaText::scrollScreen()+0x75>
c001080d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010813:	eb 13                	jmp    c0010828 <VgaText::scrollScreen()+0x88>
c0010815:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001081b:	85 c0                	test   eax,eax
c001081d:	74 09                	je     c0010828 <VgaText::scrollScreen()+0x88>
c001081f:	83 ec 0c             	sub    esp,0xc
c0010822:	53                   	push   ebx
c0010823:	ff d0                	call   eax
c0010825:	83 c4 10             	add    esp,0x10
c0010828:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001082c:	5b                   	pop    ebx
c001082d:	5e                   	pop    esi
c001082e:	5f                   	pop    edi
c001082f:	e9 1e fe ff ff       	jmp    c0010652 <VgaText::updateCursor()>

c0010834 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010834:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010839:	c1 e0 08             	shl    eax,0x8
c001083c:	89 c2                	mov    edx,eax
c001083e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010843:	09 d0                	or     eax,edx
c0010845:	c3                   	ret    

c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010846:	53                   	push   ebx
c0010847:	83 ec 08             	sub    esp,0x8
c001084a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001084e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010853:	50                   	push   eax
c0010854:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010859:	50                   	push   eax
c001085a:	e8 2f ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c001085f:	5a                   	pop    edx
c0010860:	0f b6 c0             	movzx  eax,al
c0010863:	5b                   	pop    ebx
c0010864:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010869:	50                   	push   eax
c001086a:	53                   	push   ebx
c001086b:	e8 c4 ff ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010870:	5a                   	pop    edx
c0010871:	5a                   	pop    edx
c0010872:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010878:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001087c:	0f b7 d2             	movzx  edx,dx
c001087f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010884:	39 0d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ecx
c001088a:	75 14                	jne    c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010892:	85 c0                	test   eax,eax
c0010894:	74 0a                	je     c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010896:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001089a:	83 c4 08             	add    esp,0x8
c001089d:	5b                   	pop    ebx
c001089e:	ff e0                	jmp    eax
c00108a0:	83 c4 08             	add    esp,0x8
c00108a3:	5b                   	pop    ebx
c00108a4:	c3                   	ret    
c00108a5:	90                   	nop

c00108a6 <VgaText::getCursorX()>:
c00108a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108aa:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::getCursorY()>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::setCursor(int, int)>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108c6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108d0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108d6:	e9 77 fd ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c00108db:	90                   	nop

c00108dc <VgaText::setCursorX(int)>:
c00108dc:	83 ec 10             	sub    esp,0x10
c00108df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108e3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ed:	50                   	push   eax
c00108ee:	e8 cb ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00108f3:	83 c4 1c             	add    esp,0x1c
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <VgaText::setCursorY(int)>:
c00108f8:	83 ec 10             	sub    esp,0x10
c00108fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010903:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010909:	50                   	push   eax
c001090a:	e8 af ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c001090f:	83 c4 1c             	add    esp,0x1c
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <VgaText::incrementCursor(bool)>:
c0010914:	56                   	push   esi
c0010915:	53                   	push   ebx
c0010916:	51                   	push   ecx
c0010917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001091f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010925:	40                   	inc    eax
c0010926:	83 f8 50             	cmp    eax,0x50
c0010929:	74 08                	je     c0010933 <VgaText::incrementCursor(bool)+0x1f>
c001092b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010931:	eb 33                	jmp    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010933:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010939:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010943:	8d 50 01             	lea    edx,[eax+0x1]
c0010946:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001094c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010952:	75 12                	jne    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001095d:	53                   	push   ebx
c001095e:	e8 3d fe ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010963:	83 c4 10             	add    esp,0x10
c0010966:	89 f0                	mov    eax,esi
c0010968:	84 c0                	test   al,al
c001096a:	74 0c                	je     c0010978 <VgaText::incrementCursor(bool)+0x64>
c001096c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010970:	5a                   	pop    edx
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	e9 da fc ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010978:	58                   	pop    eax
c0010979:	5b                   	pop    ebx
c001097a:	5e                   	pop    esi
c001097b:	c3                   	ret    

c001097c <VgaText::updateRAMUsageDisplay(int)>:
c001097c:	56                   	push   esi
c001097d:	8b 35 20 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d520
c0010983:	53                   	push   ebx
c0010984:	bb 0a 00 00 00       	mov    ebx,0xa
c0010989:	6a 0f                	push   0xf
c001098b:	6a 00                	push   0x0
c001098d:	e8 fc fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010992:	5a                   	pop    edx
c0010993:	59                   	pop    ecx
c0010994:	0f b6 c8             	movzx  ecx,al
c0010997:	51                   	push   ecx
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	99                   	cdq    
c001099d:	f7 fb                	idiv   ebx
c001099f:	89 d3                	mov    ebx,edx
c00109a1:	83 c0 30             	add    eax,0x30
c00109a4:	83 c3 30             	add    ebx,0x30
c00109a7:	0f be c0             	movsx  eax,al
c00109aa:	0f b6 db             	movzx  ebx,bl
c00109ad:	50                   	push   eax
c00109ae:	e8 81 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5a                   	pop    edx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109bc:	51                   	push   ecx
c00109bd:	53                   	push   ebx
c00109be:	e8 71 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c3:	5b                   	pop    ebx
c00109c4:	5a                   	pop    edx
c00109c5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109cc:	51                   	push   ecx
c00109cd:	6a 25                	push   0x25
c00109cf:	e8 60 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d4:	59                   	pop    ecx
c00109d5:	5b                   	pop    ebx
c00109d6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109dd:	5b                   	pop    ebx
c00109de:	5e                   	pop    esi
c00109df:	c3                   	ret    

c00109e0 <VgaText::updateDiskUsage()>:
c00109e0:	55                   	push   ebp
c00109e1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109e6:	57                   	push   edi
c00109e7:	8b 3d 20 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d520
c00109ed:	56                   	push   esi
c00109ee:	53                   	push   ebx
c00109ef:	6a 0f                	push   0xf
c00109f1:	6a 00                	push   0x0
c00109f3:	e8 96 fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00109f8:	5a                   	pop    edx
c00109f9:	0f b6 d8             	movzx  ebx,al
c00109fc:	59                   	pop    ecx
c00109fd:	8b 35 48 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032948
c0010a03:	53                   	push   ebx
c0010a04:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	8d 42 30             	lea    eax,[edx+0x30]
c0010a14:	0f b6 c0             	movzx  eax,al
c0010a17:	50                   	push   eax
c0010a18:	e8 17 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5d                   	pop    ebp
c0010a1e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a23:	5a                   	pop    edx
c0010a24:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a28:	53                   	push   ebx
c0010a29:	89 f0                	mov    eax,esi
c0010a2b:	99                   	cdq    
c0010a2c:	f7 fd                	idiv   ebp
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 f7 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5d                   	pop    ebp
c0010a3e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a43:	5a                   	pop    edx
c0010a44:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a4b:	53                   	push   ebx
c0010a4c:	89 f0                	mov    eax,esi
c0010a4e:	99                   	cdq    
c0010a4f:	f7 fd                	idiv   ebp
c0010a51:	99                   	cdq    
c0010a52:	f7 f9                	idiv   ecx
c0010a54:	8d 42 30             	lea    eax,[edx+0x30]
c0010a57:	0f b6 c0             	movzx  eax,al
c0010a5a:	50                   	push   eax
c0010a5b:	e8 d4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a60:	5d                   	pop    ebp
c0010a61:	5a                   	pop    edx
c0010a62:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a69:	53                   	push   ebx
c0010a6a:	89 f0                	mov    eax,esi
c0010a6c:	99                   	cdq    
c0010a6d:	f7 f9                	idiv   ecx
c0010a6f:	89 d6                	mov    esi,edx
c0010a71:	99                   	cdq    
c0010a72:	f7 f9                	idiv   ecx
c0010a74:	8d 42 30             	lea    eax,[edx+0x30]
c0010a77:	0f b6 c0             	movzx  eax,al
c0010a7a:	50                   	push   eax
c0010a7b:	e8 b4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a80:	5d                   	pop    ebp
c0010a81:	5a                   	pop    edx
c0010a82:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a89:	53                   	push   ebx
c0010a8a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8d:	0f b6 f0             	movzx  esi,al
c0010a90:	56                   	push   esi
c0010a91:	e8 9e fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5e                   	pop    esi
c0010a97:	8b 35 44 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032944
c0010a9d:	5d                   	pop    ebp
c0010a9e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010aa5:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aaa:	53                   	push   ebx
c0010aab:	89 f0                	mov    eax,esi
c0010aad:	99                   	cdq    
c0010aae:	f7 fd                	idiv   ebp
c0010ab0:	99                   	cdq    
c0010ab1:	f7 f9                	idiv   ecx
c0010ab3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab6:	0f b6 c0             	movzx  eax,al
c0010ab9:	50                   	push   eax
c0010aba:	e8 75 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5a                   	pop    edx
c0010ac0:	5d                   	pop    ebp
c0010ac1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ac8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010acd:	53                   	push   ebx
c0010ace:	89 f0                	mov    eax,esi
c0010ad0:	99                   	cdq    
c0010ad1:	f7 fd                	idiv   ebp
c0010ad3:	99                   	cdq    
c0010ad4:	f7 f9                	idiv   ecx
c0010ad6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad9:	0f b6 c0             	movzx  eax,al
c0010adc:	50                   	push   eax
c0010add:	e8 52 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae2:	5a                   	pop    edx
c0010ae3:	5d                   	pop    ebp
c0010ae4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aeb:	bd 64 00 00 00       	mov    ebp,0x64
c0010af0:	53                   	push   ebx
c0010af1:	89 f0                	mov    eax,esi
c0010af3:	99                   	cdq    
c0010af4:	f7 fd                	idiv   ebp
c0010af6:	99                   	cdq    
c0010af7:	f7 f9                	idiv   ecx
c0010af9:	83 c2 30             	add    edx,0x30
c0010afc:	0f b6 d2             	movzx  edx,dl
c0010aff:	52                   	push   edx
c0010b00:	e8 2f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b05:	5a                   	pop    edx
c0010b06:	5d                   	pop    ebp
c0010b07:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b0e:	53                   	push   ebx
c0010b0f:	89 f0                	mov    eax,esi
c0010b11:	99                   	cdq    
c0010b12:	f7 f9                	idiv   ecx
c0010b14:	89 d6                	mov    esi,edx
c0010b16:	99                   	cdq    
c0010b17:	f7 f9                	idiv   ecx
c0010b19:	8d 42 30             	lea    eax,[edx+0x30]
c0010b1c:	0f b6 c0             	movzx  eax,al
c0010b1f:	50                   	push   eax
c0010b20:	e8 0f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b25:	5a                   	pop    edx
c0010b26:	59                   	pop    ecx
c0010b27:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b2e:	53                   	push   ebx
c0010b2f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b32:	0f b6 f0             	movzx  esi,al
c0010b35:	56                   	push   esi
c0010b36:	e8 f9 fc ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	5d                   	pop    ebp
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <VgaText::updateTitle()>:
c0010b4a:	53                   	push   ebx
c0010b4b:	31 c0                	xor    eax,eax
c0010b4d:	83 ec 58             	sub    esp,0x58
c0010b50:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b54:	89 e1                	mov    ecx,esp
c0010b56:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b5a:	40                   	inc    eax
c0010b5b:	83 f8 50             	cmp    eax,0x50
c0010b5e:	75 f6                	jne    c0010b56 <VgaText::updateTitle()+0xc>
c0010b60:	31 c0                	xor    eax,eax
c0010b62:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b69:	84 db                	test   bl,bl
c0010b6b:	74 06                	je     c0010b73 <VgaText::updateTitle()+0x29>
c0010b6d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b70:	40                   	inc    eax
c0010b71:	eb ef                	jmp    c0010b62 <VgaText::updateTitle()+0x18>
c0010b73:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b79:	85 c0                	test   eax,eax
c0010b7b:	74 09                	je     c0010b86 <VgaText::updateTitle()+0x3c>
c0010b7d:	53                   	push   ebx
c0010b7e:	53                   	push   ebx
c0010b7f:	51                   	push   ecx
c0010b80:	52                   	push   edx
c0010b81:	ff d0                	call   eax
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	e8 55 fe ff ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0010b8b:	83 c4 58             	add    esp,0x58
c0010b8e:	5b                   	pop    ebx
c0010b8f:	c3                   	ret    

c0010b90 <VgaText::setTitleTextColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b9e:	eb aa                	jmp    c0010b4a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitleColour(VgaColour)>:
c0010ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bae:	eb 9a                	jmp    c0010b4a <VgaText::updateTitle()>

c0010bb0 <VgaText::setTitle(char*)>:
c0010bb0:	53                   	push   ebx
c0010bb1:	83 ec 10             	sub    esp,0x10
c0010bb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bc2:	50                   	push   eax
c0010bc3:	e8 6c fc fe ff       	call   c0000834 <strcpy>
c0010bc8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bcc:	83 c4 18             	add    esp,0x18
c0010bcf:	5b                   	pop    ebx
c0010bd0:	e9 75 ff ff ff       	jmp    c0010b4a <VgaText::updateTitle()>
c0010bd5:	90                   	nop

c0010bd6 <VgaText::decrementCursor(bool)>:
c0010bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bde:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010be4:	85 c0                	test   eax,eax
c0010be6:	74 07                	je     c0010bef <VgaText::decrementCursor(bool)+0x19>
c0010be8:	48                   	dec    eax
c0010be9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bef:	84 c9                	test   cl,cl
c0010bf1:	74 09                	je     c0010bfc <VgaText::decrementCursor(bool)+0x26>
c0010bf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bf7:	e9 56 fa ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop

c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bfe:	53                   	push   ebx
c0010bff:	83 ec 08             	sub    esp,0x8
c0010c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c12:	3c 07                	cmp    al,0x7
c0010c14:	75 2a                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c16:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c0010c1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c23:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c2b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	5b                   	pop    ebx
c0010c3b:	e9 ea 30 00 00       	jmp    c0013d2a <Buzzer::beep(int, int, bool)>
c0010c40:	3c 0d                	cmp    al,0xd
c0010c42:	75 0c                	jne    c0010c50 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c44:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c4e:	eb 3b                	jmp    c0010c8b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c50:	3c 0a                	cmp    al,0xa
c0010c52:	75 40                	jne    c0010c94 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c54:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c5a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c64:	8d 50 01             	lea    edx,[eax+0x1]
c0010c67:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c6d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c73:	75 12                	jne    c0010c87 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c75:	83 ec 0c             	sub    esp,0xc
c0010c78:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 1c fb ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c8b:	83 c4 08             	add    esp,0x8
c0010c8e:	5b                   	pop    ebx
c0010c8f:	e9 be f9 ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010c94:	3c 08                	cmp    al,0x8
c0010c96:	75 31                	jne    c0010cc9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c98:	50                   	push   eax
c0010c99:	50                   	push   eax
c0010c9a:	6a 01                	push   0x1
c0010c9c:	53                   	push   ebx
c0010c9d:	e8 34 ff ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ca2:	5a                   	pop    edx
c0010ca3:	59                   	pop    ecx
c0010ca4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010caa:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cb0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cb6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cbc:	6a 20                	push   0x20
c0010cbe:	53                   	push   ebx
c0010cbf:	e8 82 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cc4:	83 c4 28             	add    esp,0x28
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    
c0010cc9:	83 ec 08             	sub    esp,0x8
c0010ccc:	0f be c0             	movsx  eax,al
c0010ccf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cd5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cdb:	51                   	push   ecx
c0010cdc:	52                   	push   edx
c0010cdd:	50                   	push   eax
c0010cde:	53                   	push   ebx
c0010cdf:	e8 62 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ce4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ce8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cf0:	83 c4 28             	add    esp,0x28
c0010cf3:	5b                   	pop    ebx
c0010cf4:	e9 1b fc ff ff       	jmp    c0010914 <VgaText::incrementCursor(bool)>
c0010cf9:	90                   	nop

c0010cfa <VgaText::isShowingCursor()>:
c0010cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d04:	c3                   	ret    
c0010d05:	90                   	nop

c0010d06 <VgaText::isBlinkDisabled()>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d10:	83 f0 01             	xor    eax,0x1
c0010d13:	c3                   	ret    

c0010d14 <VgaText::setCursorHeight(int)>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d1c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d22:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d2d:	e9 3a f9 ff ff       	jmp    c001066c <VgaText::showCursor(bool)>

c0010d32 <VgaText::getCursorHeight()>:
c0010d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d36:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d3c:	c3                   	ret    

c0010d3d <setActiveTerminal(VgaText*)>:
c0010d3d:	53                   	push   ebx
c0010d3e:	83 ec 08             	sub    esp,0x8
c0010d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d45:	85 db                	test   ebx,ebx
c0010d47:	75 11                	jne    c0010d5a <setActiveTerminal(VgaText*)+0x1d>
c0010d49:	c7 44 24 10 c0 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3c0
c0010d51:	83 c4 08             	add    esp,0x8
c0010d54:	5b                   	pop    ebx
c0010d55:	e9 73 98 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>
c0010d5a:	50                   	push   eax
c0010d5b:	50                   	push   eax
c0010d5c:	53                   	push   ebx
c0010d5d:	68 ce a3 02 c0       	push   0xc002a3ce
c0010d62:	e8 c5 21 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0010d67:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	85 c0                	test   eax,eax
c0010d71:	74 0c                	je     c0010d7f <setActiveTerminal(VgaText*)+0x42>
c0010d73:	83 ec 0c             	sub    esp,0xc
c0010d76:	50                   	push   eax
c0010d77:	e8 d6 f8 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	89 1d c4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c4,ebx
c0010d85:	51                   	push   ecx
c0010d86:	51                   	push   ecx
c0010d87:	53                   	push   ebx
c0010d88:	68 e6 a3 02 c0       	push   0xc002a3e6
c0010d8d:	e8 9a 21 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0010d92:	83 c4 0c             	add    esp,0xc
c0010d95:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d9b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010da1:	53                   	push   ebx
c0010da2:	e8 17 fb ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 57 ff ff ff       	call   c0010d06 <VgaText::isBlinkDisabled()>
c0010daf:	5a                   	pop    edx
c0010db0:	0f b6 c0             	movzx  eax,al
c0010db3:	59                   	pop    ecx
c0010db4:	50                   	push   eax
c0010db5:	53                   	push   ebx
c0010db6:	e8 c1 f8 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 6f ff ff ff       	call   c0010d32 <VgaText::getCursorHeight()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	59                   	pop    ecx
c0010dc5:	50                   	push   eax
c0010dc6:	53                   	push   ebx
c0010dc7:	e8 48 ff ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dd6:	75 0a                	jne    c0010de2 <setActiveTerminal(VgaText*)+0xa5>
c0010dd8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010de2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010de6:	83 c4 08             	add    esp,0x8
c0010de9:	5b                   	pop    ebx
c0010dea:	e9 0f f8 ff ff       	jmp    c00105fe <VgaText::load()>

c0010def <doTerminalCycle()>:
c0010def:	83 ec 18             	sub    esp,0x18
c0010df2:	a1 c0 e6 02 c0       	mov    eax,ds:0xc002e6c0
c0010df7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dfd:	50                   	push   eax
c0010dfe:	a3 c0 e6 02 c0       	mov    ds:0xc002e6c0,eax
c0010e03:	e8 35 ff ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0010e08:	83 c4 1c             	add    esp,0x1c
c0010e0b:	c3                   	ret    

c0010e0c <VgaText::doUpdate()>:
c0010e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e10:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e16:	85 c0                	test   eax,eax
c0010e18:	74 02                	je     c0010e1c <VgaText::doUpdate()+0x10>
c0010e1a:	ff e0                	jmp    eax
c0010e1c:	c3                   	ret    
c0010e1d:	90                   	nop

c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e1e:	55                   	push   ebp
c0010e1f:	57                   	push   edi
c0010e20:	56                   	push   esi
c0010e21:	53                   	push   ebx
c0010e22:	83 ec 1c             	sub    esp,0x1c
c0010e25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e35:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e38:	50                   	push   eax
c0010e39:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e3e:	50                   	push   eax
c0010e3f:	e8 4a f9 ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e44:	59                   	pop    ecx
c0010e45:	0f b6 c0             	movzx  eax,al
c0010e48:	5b                   	pop    ebx
c0010e49:	31 c9                	xor    ecx,ecx
c0010e4b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e53:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e57:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e61:	0f b7 db             	movzx  ebx,bx
c0010e64:	01 db                	add    ebx,ebx
c0010e66:	01 fb                	add    ebx,edi
c0010e68:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e6b:	84 c0                	test   al,al
c0010e6d:	0f 84 38 01 00 00    	je     c0010fab <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e73:	3c 0d                	cmp    al,0xd
c0010e75:	75 0f                	jne    c0010e86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e77:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e81:	e9 1f 01 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e86:	3c 0a                	cmp    al,0xa
c0010e88:	75 5b                	jne    c0010ee5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e8a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e90:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e9d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ea3:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ea9:	75 12                	jne    c0010ebd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010eb4:	55                   	push   ebp
c0010eb5:	e8 e6 f8 ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	83 ec 0c             	sub    esp,0xc
c0010ec0:	55                   	push   ebp
c0010ec1:	e8 8c f7 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010ec6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ed7:	31 c9                	xor    ecx,ecx
c0010ed9:	0f b7 db             	movzx  ebx,bx
c0010edc:	01 db                	add    ebx,ebx
c0010ede:	01 fb                	add    ebx,edi
c0010ee0:	e9 c0 00 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee5:	3c 08                	cmp    al,0x8
c0010ee7:	75 4e                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ee9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010eed:	53                   	push   ebx
c0010eee:	53                   	push   ebx
c0010eef:	6a 01                	push   0x1
c0010ef1:	55                   	push   ebp
c0010ef2:	e8 df fc ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ef7:	58                   	pop    eax
c0010ef8:	5a                   	pop    edx
c0010ef9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eff:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f05:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f0b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f11:	6a 20                	push   0x20
c0010f13:	55                   	push   ebp
c0010f14:	e8 2d f9 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f19:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f21:	83 c4 20             	add    esp,0x20
c0010f24:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f2a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2e:	0f b7 db             	movzx  ebx,bx
c0010f31:	01 db                	add    ebx,ebx
c0010f33:	01 fb                	add    ebx,edi
c0010f35:	eb 6e                	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f37:	51                   	push   ecx
c0010f38:	51                   	push   ecx
c0010f39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f3d:	50                   	push   eax
c0010f3e:	e8 f1 f8 ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f49:	39 2d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebp
c0010f4f:	75 2a                	jne    c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f51:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f57:	85 c0                	test   eax,eax
c0010f59:	74 20                	je     c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f5b:	52                   	push   edx
c0010f5c:	52                   	push   edx
c0010f5d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f63:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f71:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f74:	51                   	push   ecx
c0010f75:	55                   	push   ebp
c0010f76:	ff d0                	call   eax
c0010f78:	83 c4 20             	add    esp,0x20
c0010f7b:	83 c3 02             	add    ebx,0x2
c0010f7e:	50                   	push   eax
c0010f7f:	50                   	push   eax
c0010f80:	6a 00                	push   0x0
c0010f82:	55                   	push   ebp
c0010f83:	e8 8c f9 ff ff       	call   c0010914 <VgaText::incrementCursor(bool)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f92:	75 0f                	jne    c0010fa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f94:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f9c:	0f b7 db             	movzx  ebx,bx
c0010f9f:	01 db                	add    ebx,ebx
c0010fa1:	01 fb                	add    ebx,edi
c0010fa3:	b1 01                	mov    cl,0x1
c0010fa5:	46                   	inc    esi
c0010fa6:	e9 bd fe ff ff       	jmp    c0010e68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	55                   	push   ebp
c0010fb3:	e8 9a f6 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fbf:	84 c9                	test   cl,cl
c0010fc1:	74 0c                	je     c0010fcf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 40 fe ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fd6:	83 c4 1c             	add    esp,0x1c
c0010fd9:	5b                   	pop    ebx
c0010fda:	5e                   	pop    esi
c0010fdb:	5f                   	pop    edi
c0010fdc:	5d                   	pop    ebp
c0010fdd:	c3                   	ret    

c0010fde <VgaText::clearScreen()>:
c0010fde:	57                   	push   edi
c0010fdf:	56                   	push   esi
c0010fe0:	31 f6                	xor    esi,esi
c0010fe2:	53                   	push   ebx
c0010fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe7:	52                   	push   edx
c0010fe8:	6a 00                	push   0x0
c0010fea:	6a 00                	push   0x0
c0010fec:	53                   	push   ebx
c0010fed:	e8 cc f8 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010ff2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011002:	7e 26                	jle    c001102a <VgaText::clearScreen()+0x4c>
c0011004:	31 ff                	xor    edi,edi
c0011006:	50                   	push   eax
c0011007:	50                   	push   eax
c0011008:	56                   	push   esi
c0011009:	57                   	push   edi
c001100a:	47                   	inc    edi
c001100b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011011:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011017:	6a 20                	push   0x20
c0011019:	53                   	push   ebx
c001101a:	e8 27 f8 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001101f:	83 c4 20             	add    esp,0x20
c0011022:	83 ff 50             	cmp    edi,0x50
c0011025:	75 df                	jne    c0011006 <VgaText::clearScreen()+0x28>
c0011027:	46                   	inc    esi
c0011028:	eb d2                	jmp    c0010ffc <VgaText::clearScreen()+0x1e>
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	53                   	push   ebx
c001102e:	e8 d9 fd ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011033:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	5b                   	pop    ebx
c001103e:	5e                   	pop    esi
c001103f:	5f                   	pop    edi
c0011040:	c3                   	ret    
c0011041:	90                   	nop

c0011042 <VgaText::putchar(char)>:
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 14             	sub    esp,0x14
c0011047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001104b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001104f:	3c 5b                	cmp    al,0x5b
c0011051:	75 21                	jne    c0011074 <VgaText::putchar(char)+0x32>
c0011053:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001105a:	74 28                	je     c0011084 <VgaText::putchar(char)+0x42>
c001105c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011065:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001106f:	e9 e2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011074:	3c 1b                	cmp    al,0x1b
c0011076:	75 0c                	jne    c0011084 <VgaText::putchar(char)+0x42>
c0011078:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001107f:	e9 d2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011084:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001108a:	84 c9                	test   cl,cl
c001108c:	0f 84 ab 00 00 00    	je     c001113d <VgaText::putchar(char)+0xfb>
c0011092:	8d 50 c0             	lea    edx,[eax-0x40]
c0011095:	80 fa 3e             	cmp    dl,0x3e
c0011098:	0f 87 82 00 00 00    	ja     c0011120 <VgaText::putchar(char)+0xde>
c001109e:	3c 6d                	cmp    al,0x6d
c00110a0:	75 4d                	jne    c00110ef <VgaText::putchar(char)+0xad>
c00110a2:	31 f6                	xor    esi,esi
c00110a4:	31 d2                	xor    edx,edx
c00110a6:	31 c0                	xor    eax,eax
c00110a8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110ae:	7e 30                	jle    c00110e0 <VgaText::putchar(char)+0x9e>
c00110b0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110b8:	80 fa 3b             	cmp    dl,0x3b
c00110bb:	75 17                	jne    c00110d4 <VgaText::putchar(char)+0x92>
c00110bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110c1:	50                   	push   eax
c00110c2:	53                   	push   ebx
c00110c3:	e8 ee f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110c8:	59                   	pop    ecx
c00110c9:	31 d2                	xor    edx,edx
c00110cb:	58                   	pop    eax
c00110cc:	31 c0                	xor    eax,eax
c00110ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110d2:	eb 09                	jmp    c00110dd <VgaText::putchar(char)+0x9b>
c00110d4:	6b c0 0a             	imul   eax,eax,0xa
c00110d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110db:	88 ca                	mov    dl,cl
c00110dd:	46                   	inc    esi
c00110de:	eb c8                	jmp    c00110a8 <VgaText::putchar(char)+0x66>
c00110e0:	84 d2                	test   dl,dl
c00110e2:	74 31                	je     c0011115 <VgaText::putchar(char)+0xd3>
c00110e4:	50                   	push   eax
c00110e5:	53                   	push   ebx
c00110e6:	e8 cb f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110eb:	58                   	pop    eax
c00110ec:	5a                   	pop    edx
c00110ed:	eb 26                	jmp    c0011115 <VgaText::putchar(char)+0xd3>
c00110ef:	3c 4a                	cmp    al,0x4a
c00110f1:	75 22                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110f3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110fa:	75 19                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	53                   	push   ebx
c0011100:	e8 d9 fe ff ff       	call   c0010fde <VgaText::clearScreen()>
c0011105:	83 c4 0c             	add    esp,0xc
c0011108:	6a 00                	push   0x0
c001110a:	6a 00                	push   0x0
c001110c:	53                   	push   ebx
c001110d:	e8 ac f7 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001111e:	eb 36                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011120:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011126:	83 fa 0e             	cmp    edx,0xe
c0011129:	7f 2b                	jg     c0011156 <VgaText::putchar(char)+0x114>
c001112b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001112e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011134:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001113b:	eb 19                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c001113d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011143:	0f be c0             	movsx  eax,al
c0011146:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001114c:	50                   	push   eax
c001114d:	53                   	push   ebx
c001114e:	e8 ab fa ff ff       	call   c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	83 c4 14             	add    esp,0x14
c0011159:	5b                   	pop    ebx
c001115a:	5e                   	pop    esi
c001115b:	c3                   	ret    

c001115c <VgaText::puts(char const*)>:
c001115c:	53                   	push   ebx
c001115d:	83 ec 08             	sub    esp,0x8
c0011160:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011164:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011167:	84 c0                	test   al,al
c0011169:	74 12                	je     c001117d <VgaText::puts(char const*)+0x21>
c001116b:	43                   	inc    ebx
c001116c:	51                   	push   ecx
c001116d:	51                   	push   ecx
c001116e:	50                   	push   eax
c001116f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011173:	e8 ca fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	eb e7                	jmp    c0011164 <VgaText::puts(char const*)+0x8>
c001117d:	83 c4 08             	add    esp,0x8
c0011180:	5b                   	pop    ebx
c0011181:	c3                   	ret    

c0011182 <VgaText::putx(unsigned int)>:
c0011182:	57                   	push   edi
c0011183:	b9 11 00 00 00       	mov    ecx,0x11
c0011188:	56                   	push   esi
c0011189:	be 02 a4 02 c0       	mov    esi,0xc002a402
c001118e:	53                   	push   ebx
c001118f:	83 ec 20             	sub    esp,0x20
c0011192:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011196:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001119a:	fc                   	cld    
c001119b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001119d:	be 08 00 00 00       	mov    esi,0x8
c00111a2:	50                   	push   eax
c00111a3:	50                   	push   eax
c00111a4:	89 d8                	mov    eax,ebx
c00111a6:	c1 e3 04             	shl    ebx,0x4
c00111a9:	c1 e8 1c             	shr    eax,0x1c
c00111ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111b1:	50                   	push   eax
c00111b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111b6:	e8 87 fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	4e                   	dec    esi
c00111bf:	75 e1                	jne    c00111a2 <VgaText::putx(unsigned int)+0x20>
c00111c1:	83 c4 20             	add    esp,0x20
c00111c4:	5b                   	pop    ebx
c00111c5:	5e                   	pop    esi
c00111c6:	5f                   	pop    edi
c00111c7:	c3                   	ret    

c00111c8 <VgaText::VgaText(char const*)>:
c00111c8:	57                   	push   edi
c00111c9:	56                   	push   esi
c00111ca:	53                   	push   ebx
c00111cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	6a 00                	push   0x0
c00111d4:	50                   	push   eax
c00111d5:	e8 6e 05 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	89 10                	mov    DWORD PTR [eax],edx
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001120f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011213:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011256:	bb a0 e6 02 c0       	mov    ebx,0xc002e6a0
c001125b:	b8 08 00 00 00       	mov    eax,0x8
c0011260:	fc                   	cld    
c0011261:	89 d7                	mov    edi,edx
c0011263:	89 de                	mov    esi,ebx
c0011265:	89 c1                	mov    ecx,eax
c0011267:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126d:	05 1e 10 00 00       	add    eax,0x101e
c0011272:	83 ec 08             	sub    esp,0x8
c0011275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011279:	50                   	push   eax
c001127a:	e8 b5 f5 fe ff       	call   c0000834 <strcpy>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011286:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011294:	83 c0 0c             	add    eax,0xc
c0011297:	83 ec 04             	sub    esp,0x4
c001129a:	68 00 0f 00 00       	push   0xf00
c001129f:	6a 00                	push   0x0
c00112a1:	50                   	push   eax
c00112a2:	e8 d1 f4 fe ff       	call   c0000778 <memset>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 04             	sub    esp,0x4
c00112ad:	6a 00                	push   0x0
c00112af:	6a 07                	push   0x7
c00112b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b5:	e8 b4 f4 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	83 ec 08             	sub    esp,0x8
c00112c0:	6a 02                	push   0x2
c00112c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c6:	e8 49 fa ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	83 ec 04             	sub    esp,0x4
c00112d1:	6a 00                	push   0x0
c00112d3:	6a 00                	push   0x0
c00112d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d9:	e8 e0 f5 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	6a 01                	push   0x1
c00112e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ea:	e8 7d f3 ff ff       	call   c001066c <VgaText::showCursor(bool)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	83 ec 08             	sub    esp,0x8
c00112f5:	6a 01                	push   0x1
c00112f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fb:	e8 7c f3 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0011300:	83 c4 10             	add    esp,0x10
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130a:	e8 cf fc ff ff       	call   c0010fde <VgaText::clearScreen()>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011316:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011321:	05 9e 10 00 00       	add    eax,0x109e
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	68 96 00 00 00       	push   0x96
c001132e:	6a 00                	push   0x0
c0011330:	50                   	push   eax
c0011331:	e8 42 f4 fe ff       	call   c0000778 <memset>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133d:	05 34 11 00 00       	add    eax,0x1134
c0011342:	83 ec 04             	sub    esp,0x4
c0011345:	68 2c 01 00 00       	push   0x12c
c001134a:	6a 00                	push   0x0
c001134c:	50                   	push   eax
c001134d:	e8 26 f4 fe ff       	call   c0000778 <memset>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	90                   	nop
c0011356:	5b                   	pop    ebx
c0011357:	5e                   	pop    esi
c0011358:	5f                   	pop    edi
c0011359:	c3                   	ret    

c001135a <VgaText::receiveKey(unsigned char)>:
c001135a:	55                   	push   ebp
c001135b:	57                   	push   edi
c001135c:	56                   	push   esi
c001135d:	53                   	push   ebx
c001135e:	83 ec 1c             	sub    esp,0x1c
c0011361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011365:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011369:	84 db                	test   bl,bl
c001136b:	0f 84 c9 00 00 00    	je     c001143a <VgaText::receiveKey(unsigned char)+0xe0>
c0011371:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011377:	80 fb 08             	cmp    bl,0x8
c001137a:	75 2c                	jne    c00113a8 <VgaText::receiveKey(unsigned char)+0x4e>
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	57                   	push   edi
c0011380:	e8 0f f4 fe ff       	call   c0000794 <strlen>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	85 c0                	test   eax,eax
c001138a:	74 41                	je     c00113cd <VgaText::receiveKey(unsigned char)+0x73>
c001138c:	50                   	push   eax
c001138d:	50                   	push   eax
c001138e:	6a 08                	push   0x8
c0011390:	56                   	push   esi
c0011391:	e8 ac fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011396:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011399:	e8 f6 f3 fe ff       	call   c0000794 <strlen>
c001139e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113a6:	eb 22                	jmp    c00113ca <VgaText::receiveKey(unsigned char)+0x70>
c00113a8:	0f be c3             	movsx  eax,bl
c00113ab:	52                   	push   edx
c00113ac:	52                   	push   edx
c00113ad:	50                   	push   eax
c00113ae:	56                   	push   esi
c00113af:	e8 8e fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c00113b4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113bd:	59                   	pop    ecx
c00113be:	5d                   	pop    ebp
c00113bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	e8 aa f5 fe ff       	call   c0000974 <strcat>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113d4:	75 05                	jne    c00113db <VgaText::receiveKey(unsigned char)+0x81>
c00113d6:	80 fb 0a             	cmp    bl,0xa
c00113d9:	75 53                	jne    c001142e <VgaText::receiveKey(unsigned char)+0xd4>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113e4:	53                   	push   ebx
c00113e5:	e8 aa f3 fe ff       	call   c0000794 <strlen>
c00113ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ed:	89 c5                	mov    ebp,eax
c00113ef:	e8 a0 f3 fe ff       	call   c0000794 <strlen>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113fb:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011400:	76 10                	jbe    c0011412 <VgaText::receiveKey(unsigned char)+0xb8>
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	68 13 a4 02 c0       	push   0xc002a413
c001140a:	e8 be 91 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	50                   	push   eax
c0011413:	50                   	push   eax
c0011414:	57                   	push   edi
c0011415:	53                   	push   ebx
c0011416:	e8 59 f5 fe ff       	call   c0000974 <strcat>
c001141b:	83 c4 0c             	add    esp,0xc
c001141e:	68 96 00 00 00       	push   0x96
c0011423:	6a 00                	push   0x0
c0011425:	57                   	push   edi
c0011426:	e8 4d f3 fe ff       	call   c0000778 <memset>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	56                   	push   esi
c0011432:	e8 d5 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 c4 1c             	add    esp,0x1c
c001143d:	5b                   	pop    ebx
c001143e:	5e                   	pop    esi
c001143f:	5f                   	pop    edi
c0011440:	5d                   	pop    ebp
c0011441:	c3                   	ret    

c0011442 <VgaText::write(unsigned long long, void*, int*)>:
c0011442:	55                   	push   ebp
c0011443:	57                   	push   edi
c0011444:	56                   	push   esi
c0011445:	53                   	push   ebx
c0011446:	83 ec 0c             	sub    esp,0xc
c0011449:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001144d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011455:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001145c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001145f:	39 eb                	cmp    ebx,ebp
c0011461:	74 13                	je     c0011476 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011463:	43                   	inc    ebx
c0011464:	50                   	push   eax
c0011465:	50                   	push   eax
c0011466:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001146a:	50                   	push   eax
c001146b:	56                   	push   esi
c001146c:	e8 d1 fb ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	eb e9                	jmp    c001145f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011480:	56                   	push   esi
c0011481:	e8 86 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001148a:	89 38                	mov    DWORD PTR [eax],edi
c001148c:	83 c4 1c             	add    esp,0x1c
c001148f:	31 c0                	xor    eax,eax
c0011491:	5b                   	pop    ebx
c0011492:	5e                   	pop    esi
c0011493:	5f                   	pop    edi
c0011494:	5d                   	pop    ebp
c0011495:	c3                   	ret    

c0011496 <newTerminal(char*)>:
c0011496:	83 ec 28             	sub    esp,0x28
c0011499:	68 60 12 00 00       	push   0x1260
c001149e:	e8 9d e3 ff ff       	call   c000f840 <malloc>
c00114a3:	5a                   	pop    edx
c00114a4:	59                   	pop    ecx
c00114a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114a9:	50                   	push   eax
c00114aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114ae:	e8 15 fd ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c00114b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b7:	83 c4 2c             	add    esp,0x2c
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::TSS()>:
c00114bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114c7:	90                   	nop
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop

c00114ca <TSS::setESP(unsigned long)>:
c00114ca:	55                   	push   ebp
c00114cb:	89 e5                	mov    ebp,esp
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d9:	90                   	nop
c00114da:	5d                   	pop    ebp
c00114db:	c3                   	ret    

c00114dc <TSS::flush()>:
c00114dc:	55                   	push   ebp
c00114dd:	89 e5                	mov    ebp,esp
c00114df:	83 ec 10             	sub    esp,0x10
c00114e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e7:	83 c8 03             	or     eax,0x3
c00114ea:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ee:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114f2:	66 89 d0             	mov    ax,dx
c00114f5:	0f 00 d8             	ltr    ax
c00114f8:	90                   	nop
c00114f9:	c9                   	leave  
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <TSS::setup(unsigned long, unsigned long)>:
c00114fc:	55                   	push   ebp
c00114fd:	89 e5                	mov    ebp,esp
c00114ff:	83 ec 18             	sub    esp,0x18
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	6a 68                	push   0x68
c0011507:	e8 34 e3 ff ff       	call   c000f840 <malloc>
c001150c:	83 c4 10             	add    esp,0x10
c001150f:	89 c2                	mov    edx,eax
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	83 ec 04             	sub    esp,0x4
c0011520:	6a 68                	push   0x68
c0011522:	6a 00                	push   0x0
c0011524:	50                   	push   eax
c0011525:	e8 4e f2 fe ff       	call   c0000778 <memset>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001154e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115a2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c4:	0f 20 da             	mov    edx,cr3
c00115c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115cd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	50                   	push   eax
c00115da:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115dd:	50                   	push   eax
c00115de:	e8 3b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	83 ec 08             	sub    esp,0x8
c00115e9:	6a 68                	push   0x68
c00115eb:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ee:	50                   	push   eax
c00115ef:	e8 46 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115fb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fe:	83 e0 0f             	and    eax,0xf
c0011601:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011604:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011607:	83 c8 40             	or     eax,0x40
c001160a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001160d:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0011612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011618:	05 78 01 00 00       	add    eax,0x178
c001161d:	83 ec 04             	sub    esp,0x4
c0011620:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011623:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011626:	50                   	push   eax
c0011627:	e8 42 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	89 c2                	mov    edx,eax
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	89 10                	mov    DWORD PTR [eax],edx
c0011636:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001163b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011641:	05 78 01 00 00       	add    eax,0x178
c0011646:	83 ec 0c             	sub    esp,0xc
c0011649:	50                   	push   eax
c001164a:	e8 63 da ff ff       	call   c000f0b2 <GDT::flush()>
c001164f:	83 c4 10             	add    esp,0x10
c0011652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011655:	8b 00                	mov    eax,DWORD PTR [eax]
c0011657:	83 ec 08             	sub    esp,0x8
c001165a:	50                   	push   eax
c001165b:	68 7c a4 02 c0       	push   0xc002a47c
c0011660:	e8 c7 18 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	c9                   	leave  
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001167b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011680:	75 08                	jne    c001168a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011682:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011688:	eb 38                	jmp    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001168a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001168f:	75 17                	jne    c00116a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011696:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011699:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001169f:	8b 10                	mov    edx,DWORD PTR [eax]
c00116a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116a8:	89 c1                	mov    ecx,eax
c00116aa:	83 e1 fd             	and    ecx,0xfffffffd
c00116ad:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116b3:	74 cd                	je     c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ba:	83 e0 ef             	and    eax,0xffffffef
c00116bd:	83 f8 08             	cmp    eax,0x8
c00116c0:	76 c0                	jbe    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c2:	31 c0                	xor    eax,eax
c00116c4:	c3                   	ret    
c00116c5:	90                   	nop

c00116c6 <ReservedFilename::isAtty()>:
c00116c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116cd:	31 c0                	xor    eax,eax
c00116cf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116d5:	74 09                	je     c00116e0 <ReservedFilename::isAtty()+0x1a>
c00116d7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116dd:	0f 94 c0             	sete   al
c00116e0:	c3                   	ret    
c00116e1:	90                   	nop

c00116e2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116f6:	75 08                	jne    c0011700 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116fe:	eb 3d                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011700:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011705:	75 17                	jne    c001171e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001170f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011715:	8b 10                	mov    edx,DWORD PTR [eax]
c0011717:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001171b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001171e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011723:	75 04                	jne    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011725:	89 0a                	mov    DWORD PTR [edx],ecx
c0011727:	eb 14                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011729:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001172e:	74 c8                	je     c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011730:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011735:	83 e0 ef             	and    eax,0xffffffef
c0011738:	83 f8 08             	cmp    eax,0x8
c001173b:	76 bb                	jbe    c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001173d:	31 c0                	xor    eax,eax
c001173f:	c3                   	ret    

c0011740 <UnixFile::getFileDescriptor()>:
c0011740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011747:	c3                   	ret    

c0011748 <UnixFile::UnixFile(int)>:
c0011748:	53                   	push   ebx
c0011749:	83 ec 28             	sub    esp,0x28
c001174c:	ba 68 a5 02 c0       	mov    edx,0xc002a568
c0011751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011755:	89 10                	mov    DWORD PTR [eax],edx
c0011757:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001175f:	0f 8f 8c 01 00 00    	jg     c00118f1 <UnixFile::UnixFile(int)+0x1a9>
c0011765:	a1 80 d5 02 c0       	mov    eax,ds:0xc002d580
c001176a:	8d 50 01             	lea    edx,[eax+0x1]
c001176d:	89 15 80 d5 02 c0    	mov    DWORD PTR ds:0xc002d580,edx
c0011773:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011777:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001177a:	83 ec 08             	sub    esp,0x8
c001177d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011781:	68 58 e7 02 c0       	push   0xc002e758
c0011786:	e8 b5 6f 01 00       	call   c0028740 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	a0 54 e7 02 c0       	mov    al,ds:0xc002e754
c0011793:	83 f0 01             	xor    eax,0x1
c0011796:	84 c0                	test   al,al
c0011798:	0f 84 54 01 00 00    	je     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c001179e:	c6 05 54 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e754,0x1
c00117a5:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117ad:	83 ec 0c             	sub    esp,0xc
c00117b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117b4:	e8 87 e0 ff ff       	call   c000f840 <malloc>
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	89 c3                	mov    ebx,eax
c00117be:	83 ec 08             	sub    esp,0x8
c00117c1:	68 03 ff ff 0f       	push   0xfffff03
c00117c6:	53                   	push   ebx
c00117c7:	e8 2c 01 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117cc:	83 c4 10             	add    esp,0x10
c00117cf:	89 1d 4c e7 02 c0    	mov    DWORD PTR ds:0xc002e74c,ebx
c00117d5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117dd:	83 ec 0c             	sub    esp,0xc
c00117e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e4:	e8 57 e0 ff ff       	call   c000f840 <malloc>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	89 c3                	mov    ebx,eax
c00117ee:	83 ec 08             	sub    esp,0x8
c00117f1:	68 01 ff ff 0f       	push   0xfffff01
c00117f6:	53                   	push   ebx
c00117f7:	e8 fc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117fc:	83 c4 10             	add    esp,0x10
c00117ff:	89 1d 50 e7 02 c0    	mov    DWORD PTR ds:0xc002e750,ebx
c0011805:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011814:	e8 27 e0 ff ff       	call   c000f840 <malloc>
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	89 c3                	mov    ebx,eax
c001181e:	83 ec 08             	sub    esp,0x8
c0011821:	68 00 ff ff 0f       	push   0xfffff00
c0011826:	53                   	push   ebx
c0011827:	e8 cc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	89 1d 44 e7 02 c0    	mov    DWORD PTR ds:0xc002e744,ebx
c0011835:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 f7 df ff ff       	call   c000f840 <malloc>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	89 c3                	mov    ebx,eax
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	68 02 ff ff 0f       	push   0xfffff02
c0011856:	53                   	push   ebx
c0011857:	e8 9c 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 1d 48 e7 02 c0    	mov    DWORD PTR ds:0xc002e748,ebx
c0011865:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011872:	7f 7e                	jg     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c0011874:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011883:	e8 b8 df ff ff       	call   c000f840 <malloc>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	89 c3                	mov    ebx,eax
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011896:	83 ec 08             	sub    esp,0x8
c0011899:	50                   	push   eax
c001189a:	53                   	push   ebx
c001189b:	e8 58 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a7:	89 1c 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],ebx
c00118ae:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118bd:	e8 7e df ff ff       	call   c000f840 <malloc>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	89 c3                	mov    ebx,eax
c00118c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	50                   	push   eax
c00118d4:	53                   	push   ebx
c00118d5:	e8 1e 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e1:	89 1c 85 e0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1920],ebx
c00118e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ec:	e9 7c ff ff ff       	jmp    c001186d <UnixFile::UnixFile(int)+0x125>
c00118f1:	90                   	nop
c00118f2:	83 c4 28             	add    esp,0x28
c00118f5:	5b                   	pop    ebx
c00118f6:	c3                   	ret    
c00118f7:	90                   	nop

c00118f8 <ReservedFilename::ReservedFilename(int)>:
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ff:	83 ec 08             	sub    esp,0x8
c0011902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011906:	50                   	push   eax
c0011907:	e8 3c fe ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c0011914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011918:	89 10                	mov    DWORD PTR [eax],edx
c001191a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011922:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011925:	90                   	nop
c0011926:	83 c4 0c             	add    esp,0xc
c0011929:	c3                   	ret    

c001192a <UnixFile::~UnixFile()>:
c001192a:	83 ec 1c             	sub    esp,0x1c
c001192d:	ba 68 a5 02 c0       	mov    edx,0xc002a568
c0011932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011936:	89 10                	mov    DWORD PTR [eax],edx
c0011938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001193c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011944:	7f 73                	jg     c00119b9 <UnixFile::~UnixFile()+0x8f>
c0011946:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 58 e7 02 c0       	push   0xc002e758
c0011956:	e8 b9 6e 01 00       	call   c0028814 <LinkedList<UnixFile>::getFirstElement()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 58 e7 02 c0       	push   0xc002e758
c001196a:	e8 ad 6e 01 00       	call   c002881c <LinkedList<UnixFile>::removeFirst()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011976:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001197a:	74 40                	je     c00119bc <UnixFile::~UnixFile()+0x92>
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011983:	68 58 e7 02 c0       	push   0xc002e758
c0011988:	e8 b3 6d 01 00       	call   c0028740 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011994:	8d 50 01             	lea    edx,[eax+0x1]
c0011997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001199b:	3d 88 13 00 00       	cmp    eax,0x1388
c00119a0:	0f 94 c0             	sete   al
c00119a3:	84 c0                	test   al,al
c00119a5:	74 a7                	je     c001194e <UnixFile::~UnixFile()+0x24>
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	68 40 a5 02 c0       	push   0xc002a540
c00119af:	e8 19 8c 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	eb 95                	jmp    c001194e <UnixFile::~UnixFile()+0x24>
c00119b9:	90                   	nop
c00119ba:	eb 01                	jmp    c00119bd <UnixFile::~UnixFile()+0x93>
c00119bc:	90                   	nop
c00119bd:	90                   	nop
c00119be:	83 c4 1c             	add    esp,0x1c
c00119c1:	c3                   	ret    

c00119c2 <UnixFile::~UnixFile()>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 59 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	6a 0c                	push   0xc
c00119d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dd:	e8 6a 14 00 00       	call   c0012e4c <operator delete(void*, unsigned long)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    
c00119e9:	90                   	nop

c00119ea <ReservedFilename::~ReservedFilename()>:
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c00119f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f6:	89 10                	mov    DWORD PTR [eax],edx
c00119f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	50                   	push   eax
c0011a00:	e8 25 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	90                   	nop
c0011a09:	83 c4 0c             	add    esp,0xc
c0011a0c:	c3                   	ret    
c0011a0d:	90                   	nop

c0011a0e <ReservedFilename::~ReservedFilename()>:
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 cd ff ff ff       	call   c00119ea <ReservedFilename::~ReservedFilename()>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	83 ec 08             	sub    esp,0x8
c0011a23:	6a 0c                	push   0xc
c0011a25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a29:	e8 1e 14 00 00       	call   c0012e4c <operator delete(void*, unsigned long)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	83 c4 0c             	add    esp,0xc
c0011a34:	c3                   	ret    

c0011a35 <getFromFileDescriptor(int)>:
c0011a35:	53                   	push   ebx
c0011a36:	83 ec 08             	sub    esp,0x8
c0011a39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a3d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a43:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a49:	7f 2c                	jg     c0011a77 <getFromFileDescriptor(int)+0x42>
c0011a4b:	83 ec 0c             	sub    esp,0xc
c0011a4e:	68 58 e7 02 c0       	push   0xc002e758
c0011a53:	e8 bc 6d 01 00       	call   c0028814 <LinkedList<UnixFile>::getFirstElement()>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	75 04                	jne    c0011a63 <getFromFileDescriptor(int)+0x2e>
c0011a5f:	31 c0                	xor    eax,eax
c0011a61:	eb 6e                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a63:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a66:	74 69                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a68:	52                   	push   edx
c0011a69:	52                   	push   edx
c0011a6a:	50                   	push   eax
c0011a6b:	68 58 e7 02 c0       	push   0xc002e758
c0011a70:	e8 49 6e 01 00       	call   c00288be <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a75:	eb e1                	jmp    c0011a58 <getFromFileDescriptor(int)+0x23>
c0011a77:	a1 4c e7 02 c0       	mov    eax,ds:0xc002e74c
c0011a7c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a82:	74 4d                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a84:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c0011a89:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a8f:	74 40                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a91:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0011a96:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a9c:	74 33                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 44 e7 02 c0       	mov    eax,ds:0xc002e744
c0011aa3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011aa9:	74 26                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011aab:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ab1:	83 f8 08             	cmp    eax,0x8
c0011ab4:	77 09                	ja     c0011abf <getFromFileDescriptor(int)+0x8a>
c0011ab6:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c0011abd:	eb 12                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011abf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ac5:	83 fb 08             	cmp    ebx,0x8
c0011ac8:	77 95                	ja     c0011a5f <getFromFileDescriptor(int)+0x2a>
c0011aca:	8b 04 9d e0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1920]
c0011ad1:	83 c4 08             	add    esp,0x8
c0011ad4:	5b                   	pop    ebx
c0011ad5:	c3                   	ret    

c0011ad6 <__static_initialization_and_destruction_0(int, int)>:
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ade:	75 34                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ae0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ae8:	75 2a                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	68 58 e7 02 c0       	push   0xc002e758
c0011af2:	e8 f1 6b 01 00       	call   c00286e8 <LinkedList<UnixFile>::LinkedList()>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	83 ec 04             	sub    esp,0x4
c0011afd:	68 fc d4 02 c0       	push   0xc002d4fc
c0011b02:	68 58 e7 02 c0       	push   0xc002e758
c0011b07:	68 e6 86 02 c0       	push   0xc00286e6
c0011b0c:	e8 b5 12 00 00       	call   c0012dc6 <__cxa_atexit>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	90                   	nop
c0011b15:	83 c4 0c             	add    esp,0xc
c0011b18:	c3                   	ret    

c0011b19 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	83 ec 08             	sub    esp,0x8
c0011b1f:	68 ff ff 00 00       	push   0xffff
c0011b24:	6a 01                	push   0x1
c0011b26:	e8 ab ff ff ff       	call   c0011ad6 <__static_initialization_and_destruction_0(int, int)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	83 c4 0c             	add    esp,0xc
c0011b31:	c3                   	ret    

c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b32:	53                   	push   ebx
c0011b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b3b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b41:	89 c8                	mov    eax,ecx
c0011b43:	d1 e8                	shr    eax,1
c0011b45:	03 05 88 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d588
c0011b4b:	83 e1 01             	and    ecx,0x1
c0011b4e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b50:	75 09                	jne    c0011b5b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b52:	83 e2 f0             	and    edx,0xfffffff0
c0011b55:	09 da                	or     edx,ebx
c0011b57:	88 10                	mov    BYTE PTR [eax],dl
c0011b59:	5b                   	pop    ebx
c0011b5a:	c3                   	ret    
c0011b5b:	c1 e3 04             	shl    ebx,0x4
c0011b5e:	83 e2 0f             	and    edx,0xf
c0011b61:	09 da                	or     edx,ebx
c0011b63:	88 10                	mov    BYTE PTR [eax],dl
c0011b65:	5b                   	pop    ebx
c0011b66:	c3                   	ret    

c0011b67 <Virt::getPageState(unsigned long)>:
c0011b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6b:	8b 0d 88 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d588
c0011b71:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b77:	89 d0                	mov    eax,edx
c0011b79:	d1 e8                	shr    eax,1
c0011b7b:	83 e2 01             	and    edx,0x1
c0011b7e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b81:	75 04                	jne    c0011b87 <Virt::getPageState(unsigned long)+0x20>
c0011b83:	83 e0 0f             	and    eax,0xf
c0011b86:	c3                   	ret    
c0011b87:	c0 e8 04             	shr    al,0x4
c0011b8a:	c3                   	ret    

c0011b8b <Virt::allocateKernelVirtualPages(int)>:
c0011b8b:	55                   	push   ebp
c0011b8c:	31 ed                	xor    ebp,ebp
c0011b8e:	57                   	push   edi
c0011b8f:	56                   	push   esi
c0011b90:	53                   	push   ebx
c0011b91:	31 db                	xor    ebx,ebx
c0011b93:	83 ec 1c             	sub    esp,0x1c
c0011b96:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b9a:	8b 3d 84 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d584
c0011ba0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ba5:	57                   	push   edi
c0011ba6:	e8 bc ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011bab:	5a                   	pop    edx
c0011bac:	84 c0                	test   al,al
c0011bae:	75 3a                	jne    c0011bea <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bb0:	85 db                	test   ebx,ebx
c0011bb2:	75 02                	jne    c0011bb6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bb4:	89 fd                	mov    ebp,edi
c0011bb6:	43                   	inc    ebx
c0011bb7:	39 f3                	cmp    ebx,esi
c0011bb9:	74 5a                	je     c0011c15 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bbb:	47                   	inc    edi
c0011bbc:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bc2:	76 31                	jbe    c0011bf5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bc4:	c7 05 84 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d584,0xc8000
c0011bce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bd3:	75 28                	jne    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bd5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bda:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bdf:	57                   	push   edi
c0011be0:	e8 82 ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011be5:	5a                   	pop    edx
c0011be6:	84 c0                	test   al,al
c0011be8:	74 c6                	je     c0011bb0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bea:	31 db                	xor    ebx,ebx
c0011bec:	47                   	inc    edi
c0011bed:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bf3:	77 cf                	ja     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bf5:	89 3d 84 d5 02 c0    	mov    DWORD PTR ds:0xc002d584,edi
c0011bfb:	eb a8                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bfd:	83 ec 0c             	sub    esp,0xc
c0011c00:	68 98 a5 02 c0       	push   0xc002a598
c0011c05:	e8 c3 89 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0011c0a:	8b 3d 84 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d584
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	eb 90                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c15:	89 2d 84 d5 02 c0    	mov    DWORD PTR ds:0xc002d584,ebp
c0011c1b:	4b                   	dec    ebx
c0011c1c:	74 5f                	je     c0011c7d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c1e:	85 f6                	test   esi,esi
c0011c20:	74 3d                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	31 db                	xor    ebx,ebx
c0011c26:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c29:	eb 14                	jmp    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c2b:	6a 01                	push   0x1
c0011c2d:	43                   	inc    ebx
c0011c2e:	50                   	push   eax
c0011c2f:	e8 fe fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c34:	58                   	pop    eax
c0011c35:	39 f3                	cmp    ebx,esi
c0011c37:	5a                   	pop    edx
c0011c38:	74 25                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3a:	a1 84 d5 02 c0       	mov    eax,ds:0xc002d584
c0011c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c42:	85 db                	test   ebx,ebx
c0011c44:	89 15 84 d5 02 c0    	mov    DWORD PTR ds:0xc002d584,edx
c0011c4a:	74 20                	je     c0011c6c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c4c:	39 df                	cmp    edi,ebx
c0011c4e:	75 db                	jne    c0011c2b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c50:	6a 03                	push   0x3
c0011c52:	43                   	inc    ebx
c0011c53:	50                   	push   eax
c0011c54:	e8 d9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c59:	59                   	pop    ecx
c0011c5a:	39 f3                	cmp    ebx,esi
c0011c5c:	58                   	pop    eax
c0011c5d:	75 db                	jne    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	89 e8                	mov    eax,ebp
c0011c64:	5b                   	pop    ebx
c0011c65:	c1 e0 0c             	shl    eax,0xc
c0011c68:	5e                   	pop    esi
c0011c69:	5f                   	pop    edi
c0011c6a:	5d                   	pop    ebp
c0011c6b:	c3                   	ret    
c0011c6c:	6a 02                	push   0x2
c0011c6e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c73:	50                   	push   eax
c0011c74:	e8 b9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c79:	58                   	pop    eax
c0011c7a:	5a                   	pop    edx
c0011c7b:	eb bd                	jmp    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c7d:	6a 04                	push   0x4
c0011c7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c82:	55                   	push   ebp
c0011c83:	a3 84 d5 02 c0       	mov    ds:0xc002d584,eax
c0011c88:	e8 a5 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	59                   	pop    ecx
c0011c8e:	89 e8                	mov    eax,ebp
c0011c90:	5b                   	pop    ebx
c0011c91:	c1 e0 0c             	shl    eax,0xc
c0011c94:	83 c4 1c             	add    esp,0x1c
c0011c97:	5b                   	pop    ebx
c0011c98:	5e                   	pop    esi
c0011c99:	5f                   	pop    edi
c0011c9a:	5d                   	pop    ebp
c0011c9b:	c3                   	ret    

c0011c9c <Virt::freeSwapfilePage(unsigned long)>:
c0011c9c:	53                   	push   ebx
c0011c9d:	8b 15 64 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e764
c0011ca3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ca7:	b8 01 00 00 00       	mov    eax,0x1
c0011cac:	89 cb                	mov    ebx,ecx
c0011cae:	d3 e0                	shl    eax,cl
c0011cb0:	c1 eb 05             	shr    ebx,0x5
c0011cb3:	f7 d0                	not    eax
c0011cb5:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cb8:	5b                   	pop    ebx
c0011cb9:	c3                   	ret    

c0011cba <Virt::swapIDToSector(unsigned long)>:
c0011cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbe:	0f af 05 8c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d58c
c0011cc5:	03 05 94 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d594
c0011ccb:	c3                   	ret    

c0011ccc <Virt::allocateSwapfilePage()>:
c0011ccc:	55                   	push   ebp
c0011ccd:	31 d2                	xor    edx,edx
c0011ccf:	57                   	push   edi
c0011cd0:	56                   	push   esi
c0011cd1:	53                   	push   ebx
c0011cd2:	83 ec 0c             	sub    esp,0xc
c0011cd5:	8b 0d 8c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d58c
c0011cdb:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011ce0:	f7 f1                	div    ecx
c0011ce2:	39 0d 90 d5 02 c0    	cmp    DWORD PTR ds:0xc002d590,ecx
c0011ce8:	72 2d                	jb     c0011d17 <Virt::allocateSwapfilePage()+0x4b>
c0011cea:	8b 35 64 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e764
c0011cf0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cf2:	f6 c2 01             	test   dl,0x1
c0011cf5:	74 3c                	je     c0011d33 <Virt::allocateSwapfilePage()+0x67>
c0011cf7:	31 c9                	xor    ecx,ecx
c0011cf9:	bf 01 00 00 00       	mov    edi,0x1
c0011cfe:	eb 12                	jmp    c0011d12 <Virt::allocateSwapfilePage()+0x46>
c0011d00:	89 fd                	mov    ebp,edi
c0011d02:	89 ca                	mov    edx,ecx
c0011d04:	d3 e5                	shl    ebp,cl
c0011d06:	c1 ea 05             	shr    edx,0x5
c0011d09:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d0e:	85 ea                	test   edx,ebp
c0011d10:	74 2a                	je     c0011d3c <Virt::allocateSwapfilePage()+0x70>
c0011d12:	41                   	inc    ecx
c0011d13:	39 c8                	cmp    eax,ecx
c0011d15:	77 e9                	ja     c0011d00 <Virt::allocateSwapfilePage()+0x34>
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	68 0a a8 02 c0       	push   0xc002a80a
c0011d1f:	e8 a9 88 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0011d24:	83 c4 10             	add    esp,0x10
c0011d27:	31 c9                	xor    ecx,ecx
c0011d29:	83 c4 0c             	add    esp,0xc
c0011d2c:	89 c8                	mov    eax,ecx
c0011d2e:	5b                   	pop    ebx
c0011d2f:	5e                   	pop    esi
c0011d30:	5f                   	pop    edi
c0011d31:	5d                   	pop    ebp
c0011d32:	c3                   	ret    
c0011d33:	89 f3                	mov    ebx,esi
c0011d35:	bd 01 00 00 00       	mov    ebp,0x1
c0011d3a:	31 c9                	xor    ecx,ecx
c0011d3c:	09 ea                	or     edx,ebp
c0011d3e:	89 c8                	mov    eax,ecx
c0011d40:	89 13                	mov    DWORD PTR [ebx],edx
c0011d42:	83 c4 0c             	add    esp,0xc
c0011d45:	5b                   	pop    ebx
c0011d46:	5e                   	pop    esi
c0011d47:	5f                   	pop    edi
c0011d48:	5d                   	pop    ebp
c0011d49:	c3                   	ret    

c0011d4a <Virt::virtualMemorySetup()>:
c0011d4a:	53                   	push   ebx
c0011d4b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d50:	83 ec 08             	sub    esp,0x8
c0011d53:	6a 0f                	push   0xf
c0011d55:	53                   	push   ebx
c0011d56:	43                   	inc    ebx
c0011d57:	e8 d6 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5c:	59                   	pop    ecx
c0011d5d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d63:	58                   	pop    eax
c0011d64:	75 ed                	jne    c0011d53 <Virt::virtualMemorySetup()+0x9>
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6e:	68 00 00 00 c8       	push   0xc8000000
c0011d73:	68 21 a8 02 c0       	push   0xc002a821
c0011d78:	e8 af 11 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0011d7d:	58                   	pop    eax
c0011d7e:	5a                   	pop    edx
c0011d7f:	68 00 f0 ff ef       	push   0xeffff000
c0011d84:	68 35 a8 02 c0       	push   0xc002a835
c0011d89:	e8 9e 11 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	83 ec 08             	sub    esp,0x8
c0011d94:	6a 00                	push   0x0
c0011d96:	53                   	push   ebx
c0011d97:	43                   	inc    ebx
c0011d98:	e8 95 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011da6:	75 e9                	jne    c0011d91 <Virt::virtualMemorySetup()+0x47>
c0011da8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	6a 0f                	push   0xf
c0011db2:	53                   	push   ebx
c0011db3:	43                   	inc    ebx
c0011db4:	e8 79 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dc2:	75 e9                	jne    c0011dad <Virt::virtualMemorySetup()+0x63>
c0011dc4:	83 c4 08             	add    esp,0x8
c0011dc7:	5b                   	pop    ebx
c0011dc8:	c3                   	ret    

c0011dc9 <Virt::swappingSetup()>:
c0011dc9:	83 ec 14             	sub    esp,0x14
c0011dcc:	31 d2                	xor    edx,edx
c0011dce:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011dd3:	f7 35 8c d5 02 c0    	div    DWORD PTR ds:0xc002d58c
c0011dd9:	c1 e8 05             	shr    eax,0x5
c0011ddc:	50                   	push   eax
c0011ddd:	68 49 a8 02 c0       	push   0xc002a849
c0011de2:	e8 45 11 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0011de7:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011dec:	31 d2                	xor    edx,edx
c0011dee:	f7 35 8c d5 02 c0    	div    DWORD PTR ds:0xc002d58c
c0011df4:	c1 e8 05             	shr    eax,0x5
c0011df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dfa:	e8 41 da ff ff       	call   c000f840 <malloc>
c0011dff:	83 c4 0c             	add    esp,0xc
c0011e02:	89 c1                	mov    ecx,eax
c0011e04:	a3 64 e7 02 c0       	mov    ds:0xc002e764,eax
c0011e09:	31 d2                	xor    edx,edx
c0011e0b:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011e10:	f7 35 8c d5 02 c0    	div    DWORD PTR ds:0xc002d58c
c0011e16:	c1 e8 05             	shr    eax,0x5
c0011e19:	50                   	push   eax
c0011e1a:	6a 00                	push   0x0
c0011e1c:	51                   	push   ecx
c0011e1d:	e8 56 e9 fe ff       	call   c0000778 <memset>
c0011e22:	83 c4 1c             	add    esp,0x1c
c0011e25:	c3                   	ret    

c0011e26 <Virt::getAKernelVAS()>:
c0011e26:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0011e2b:	c3                   	ret    

c0011e2c <Virt::setupPageSwapping(int)>:
c0011e2c:	57                   	push   edi
c0011e2d:	56                   	push   esi
c0011e2e:	53                   	push   ebx
c0011e2f:	83 ec 1c             	sub    esp,0x1c
c0011e32:	68 14 01 00 00       	push   0x114
c0011e37:	e8 04 da ff ff       	call   c000f840 <malloc>
c0011e3c:	83 c4 0c             	add    esp,0xc
c0011e3f:	89 c6                	mov    esi,eax
c0011e41:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c0011e47:	68 64 a8 02 c0       	push   0xc002a864
c0011e4c:	50                   	push   eax
c0011e4d:	e8 32 16 00 00       	call   c0013484 <File::File(char const*, Process*)>
c0011e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e55:	e8 06 18 00 00       	call   c0013660 <File::unlink()>
c0011e5a:	58                   	pop    eax
c0011e5b:	5a                   	pop    edx
c0011e5c:	6a 12                	push   0x12
c0011e5e:	56                   	push   esi
c0011e5f:	e8 84 16 00 00       	call   c00134e8 <File::open(FileOpenMode)>
c0011e64:	83 c4 10             	add    esp,0x10
c0011e67:	85 c0                	test   eax,eax
c0011e69:	0f 85 ca 00 00 00    	jne    c0011f39 <Virt::setupPageSwapping(int)+0x10d>
c0011e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e7b:	c1 e3 08             	shl    ebx,0x8
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	68 00 00 01 00       	push   0x10000
c0011e86:	e8 b5 d9 ff ff       	call   c000f840 <malloc>
c0011e8b:	83 c4 0c             	add    esp,0xc
c0011e8e:	89 c7                	mov    edi,eax
c0011e90:	68 00 00 01 00       	push   0x10000
c0011e95:	6a 00                	push   0x0
c0011e97:	50                   	push   eax
c0011e98:	e8 db e8 fe ff       	call   c0000778 <memset>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	85 db                	test   ebx,ebx
c0011ea2:	79 03                	jns    c0011ea7 <Virt::setupPageSwapping(int)+0x7b>
c0011ea4:	83 c3 0f             	add    ebx,0xf
c0011ea7:	c1 fb 04             	sar    ebx,0x4
c0011eaa:	4b                   	dec    ebx
c0011eab:	83 fb ff             	cmp    ebx,0xffffffff
c0011eae:	74 4b                	je     c0011efb <Virt::setupPageSwapping(int)+0xcf>
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011eb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011eb9:	52                   	push   edx
c0011eba:	57                   	push   edi
c0011ebb:	6a 00                	push   0x0
c0011ebd:	68 00 00 01 00       	push   0x10000
c0011ec2:	56                   	push   esi
c0011ec3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ec6:	83 c4 20             	add    esp,0x20
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	75 59                	jne    c0011f26 <Virt::setupPageSwapping(int)+0xfa>
c0011ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed1:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ed6:	74 d2                	je     c0011eaa <Virt::setupPageSwapping(int)+0x7e>
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	4b                   	dec    ebx
c0011edc:	50                   	push   eax
c0011edd:	68 b7 a8 02 c0       	push   0xc002a8b7
c0011ee2:	e8 45 10 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0011ee7:	c7 04 24 c0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c0
c0011eee:	e8 da 86 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	83 fb ff             	cmp    ebx,0xffffffff
c0011ef9:	75 b5                	jne    c0011eb0 <Virt::setupPageSwapping(int)+0x84>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	56                   	push   esi
c0011eff:	e8 42 16 00 00       	call   c0013546 <File::close()>
c0011f04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f07:	e8 54 d9 ff ff       	call   c000f860 <rfree>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	85 f6                	test   esi,esi
c0011f11:	74 0c                	je     c0011f1f <Virt::setupPageSwapping(int)+0xf3>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f18:	56                   	push   esi
c0011f19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f1c:	83 c4 10             	add    esp,0x10
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	5b                   	pop    ebx
c0011f23:	5e                   	pop    esi
c0011f24:	5f                   	pop    edi
c0011f25:	c3                   	ret    
c0011f26:	83 ec 08             	sub    esp,0x8
c0011f29:	50                   	push   eax
c0011f2a:	68 9f a8 02 c0       	push   0xc002a89f
c0011f2f:	e8 f8 0f 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	eb 94                	jmp    c0011ecd <Virt::setupPageSwapping(int)+0xa1>
c0011f39:	83 ec 08             	sub    esp,0x8
c0011f3c:	50                   	push   eax
c0011f3d:	68 7b a8 02 c0       	push   0xc002a87b
c0011f42:	e8 e5 0f 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0011f47:	c7 04 24 84 a8 02 c0 	mov    DWORD PTR [esp],0xc002a884
c0011f4e:	e8 7a 86 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	e9 14 ff ff ff       	jmp    c0011e6f <Virt::setupPageSwapping(int)+0x43>
c0011f5b:	90                   	nop

c0011f5c <VAS::VAS()>:
c0011f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6b:	a3 68 e7 02 c0       	mov    ds:0xc002e768,eax
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f8a:	90                   	nop
c0011f8b:	c3                   	ret    

c0011f8c <VAS::VAS(VAS*)>:
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011fa2:	e8 26 86 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	90                   	nop
c0011fab:	83 c4 0c             	add    esp,0xc
c0011fae:	c3                   	ret    
c0011faf:	90                   	nop

c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb4:	89 c2                	mov    edx,eax
c0011fb6:	c1 e8 0a             	shr    eax,0xa
c0011fb9:	c1 ea 16             	shr    edx,0x16
c0011fbc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fc1:	19 c9                	sbb    ecx,ecx
c0011fc3:	c1 e2 0c             	shl    edx,0xc
c0011fc6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fcc:	25 fc 0f 00 00       	and    eax,0xffc
c0011fd1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fd8:	01 d0                	add    eax,edx
c0011fda:	c3                   	ret    
c0011fdb:	90                   	nop

c0011fdc <VAS::getPageTableEntry(unsigned long)>:
c0011fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fe0:	89 ca                	mov    edx,ecx
c0011fe2:	c1 e9 0a             	shr    ecx,0xa
c0011fe5:	c1 ea 16             	shr    edx,0x16
c0011fe8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ff4:	c1 e0 0c             	shl    eax,0xc
c0011ff7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ffa:	c3                   	ret    

c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ffb:	57                   	push   edi
c0011ffc:	56                   	push   esi
c0011ffd:	be 01 00 00 00       	mov    esi,0x1
c0012002:	53                   	push   ebx
c0012003:	83 ec 10             	sub    esp,0x10
c0012006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001200a:	c1 eb 0c             	shr    ebx,0xc
c001200d:	eb 3f                	jmp    c001204e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001200f:	e8 12 fe ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	57                   	push   edi
c0012018:	50                   	push   eax
c0012019:	e8 be ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	8b 00                	mov    eax,DWORD PTR [eax]
c0012023:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012027:	f6 c4 04             	test   ah,0x4
c001202a:	75 5f                	jne    c001208b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001202c:	80 fa 04             	cmp    dl,0x4
c001202f:	74 78                	je     c00120a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012031:	80 fa 02             	cmp    dl,0x2
c0012034:	0f 84 88 00 00 00    	je     c00120c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001203a:	80 fa 03             	cmp    dl,0x3
c001203d:	0f 84 ad 00 00 00    	je     c00120f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012043:	fe ca                	dec    dl
c0012045:	0f 84 92 00 00 00    	je     c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001204b:	43                   	inc    ebx
c001204c:	31 f6                	xor    esi,esi
c001204e:	53                   	push   ebx
c001204f:	e8 13 fb ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0012054:	5f                   	pop    edi
c0012055:	89 df                	mov    edi,ebx
c0012057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001205b:	c1 e7 0c             	shl    edi,0xc
c001205e:	84 c0                	test   al,al
c0012060:	75 ad                	jne    c001200f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	68 c6 a8 02 c0       	push   0xc002a8c6
c001206a:	e8 5e 85 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c001206f:	e8 b2 fd ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012074:	5a                   	pop    edx
c0012075:	59                   	pop    ecx
c0012076:	57                   	push   edi
c0012077:	50                   	push   eax
c0012078:	e8 5f ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	8b 00                	mov    eax,DWORD PTR [eax]
c0012082:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012086:	f6 c4 04             	test   ah,0x4
c0012089:	74 c0                	je     c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001208b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001208f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	50                   	push   eax
c0012098:	e8 bb dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a4:	80 fa 04             	cmp    dl,0x4
c00120a7:	75 88                	jne    c0012031 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120a9:	89 f0                	mov    eax,esi
c00120ab:	84 c0                	test   al,al
c00120ad:	75 47                	jne    c00120f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120af:	c7 44 24 20 dc a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5dc
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	e9 0b 85 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>
c00120c2:	89 f0                	mov    eax,esi
c00120c4:	84 c0                	test   al,al
c00120c6:	75 15                	jne    c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c8:	83 ec 0c             	sub    esp,0xc
c00120cb:	68 e2 a8 02 c0       	push   0xc002a8e2
c00120d0:	e8 f8 84 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	e9 6e ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120dd:	83 ec 08             	sub    esp,0x8
c00120e0:	6a 00                	push   0x0
c00120e2:	53                   	push   ebx
c00120e3:	e8 4a fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	e9 5b ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f0:	89 f0                	mov    eax,esi
c00120f2:	84 c0                	test   al,al
c00120f4:	75 15                	jne    c001210b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120f6:	83 ec 08             	sub    esp,0x8
c00120f9:	6a 00                	push   0x0
c00120fb:	53                   	push   ebx
c00120fc:	e8 31 fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	c3                   	ret    
c001210b:	c7 44 24 20 fe a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8fe
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	e9 af 84 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>

c001211e <VAS::freeAllocatedPages(unsigned long)>:
c001211e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012126:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001212a:	74 09                	je     c0012135 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001212c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012130:	e9 c6 fe ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012135:	c7 44 24 04 00 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a600
c001213d:	e9 ea 0d 00 00       	jmp    c0012f2c <Dbg::kprintf(char const*, ...)>

c0012142 <VAS::virtualToPhysical(unsigned long)>:
c0012142:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012146:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001214a:	e8 8d fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001214f:	5a                   	pop    edx
c0012150:	8b 00                	mov    eax,DWORD PTR [eax]
c0012152:	59                   	pop    ecx
c0012153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012158:	c3                   	ret    
c0012159:	90                   	nop

c001215a <VAS::reflagRange(unsigned long, int, int, int)>:
c001215a:	55                   	push   ebp
c001215b:	57                   	push   edi
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012162:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012166:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001216a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001216e:	85 db                	test   ebx,ebx
c0012170:	7e 22                	jle    c0012194 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012172:	c1 e3 0c             	shl    ebx,0xc
c0012175:	01 f3                	add    ebx,esi
c0012177:	56                   	push   esi
c0012178:	81 c6 00 10 00 00    	add    esi,0x1000
c001217e:	55                   	push   ebp
c001217f:	e8 58 fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012184:	5a                   	pop    edx
c0012185:	59                   	pop    ecx
c0012186:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012188:	21 f9                	and    ecx,edi
c001218a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001218e:	39 f3                	cmp    ebx,esi
c0012190:	89 08                	mov    DWORD PTR [eax],ecx
c0012192:	75 e3                	jne    c0012177 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012194:	5b                   	pop    ebx
c0012195:	5e                   	pop    esi
c0012196:	5f                   	pop    edi
c0012197:	5d                   	pop    ebp
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::setToWriteCombining(unsigned long, int)>:
c001219a:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001219f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121ac:	75 01                	jne    c00121af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ae:	c3                   	ret    
c00121af:	68 80 00 00 00       	push   0x80
c00121b4:	6a ff                	push   0xffffffff
c00121b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c2:	e8 93 ff ff ff       	call   c001215a <VAS::reflagRange(unsigned long, int, int, int)>
c00121c7:	83 c4 14             	add    esp,0x14
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00121cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121dc:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121df:	19 c0                	sbb    eax,eax
c00121e1:	83 ca 03             	or     edx,0x3
c00121e4:	83 e0 fc             	and    eax,0xfffffffc
c00121e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ee:	0f 20 d8             	mov    eax,cr3
c00121f1:	0f 22 d8             	mov    cr3,eax
c00121f4:	c3                   	ret    
c00121f5:	90                   	nop

c00121f6 <VAS::~VAS()>:
c00121f6:	83 ec 2c             	sub    esp,0x2c
c00121f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012201:	e8 ec bb 00 00       	call   c001ddf2 <lockScheduler()>
c0012206:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001220b:	8b 00                	mov    eax,DWORD PTR [eax]
c001220d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012210:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012216:	83 ec 04             	sub    esp,0x4
c0012219:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001221d:	6a 01                	push   0x1
c001221f:	50                   	push   eax
c0012220:	e8 a7 ff ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012230:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012238:	0f 8f d7 00 00 00    	jg     c0012315 <VAS::~VAS()+0x11f>
c001223e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012245:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012249:	c1 e2 02             	shl    edx,0x2
c001224c:	01 d0                	add    eax,edx
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012258:	83 e0 01             	and    eax,0x1
c001225b:	0f 84 ab 00 00 00    	je     c001230c <VAS::~VAS()+0x116>
c0012261:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012269:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012271:	7f 75                	jg     c00122e8 <VAS::~VAS()+0xf2>
c0012273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012277:	c1 e0 0a             	shl    eax,0xa
c001227a:	89 c2                	mov    edx,eax
c001227c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012280:	01 d0                	add    eax,edx
c0012282:	c1 e0 0c             	shl    eax,0xc
c0012285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012289:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001228e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012293:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012299:	83 ec 04             	sub    esp,0x4
c001229c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122a0:	6a 01                	push   0x1
c00122a2:	50                   	push   eax
c00122a3:	e8 08 fd ff ff       	call   c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bd:	25 01 04 00 00       	and    eax,0x401
c00122c2:	3d 01 04 00 00       	cmp    eax,0x401
c00122c7:	75 19                	jne    c00122e2 <VAS::~VAS()+0xec>
c00122c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 7d db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122e6:	eb 81                	jmp    c0012269 <VAS::~VAS()+0x73>
c00122e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ec:	25 00 04 00 00       	and    eax,0x400
c00122f1:	74 19                	je     c001230c <VAS::~VAS()+0x116>
c00122f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122fc:	83 ec 0c             	sub    esp,0xc
c00122ff:	50                   	push   eax
c0012300:	e8 53 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012310:	e9 1b ff ff ff       	jmp    c0012230 <VAS::~VAS()+0x3a>
c0012315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012319:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	50                   	push   eax
c0012320:	e8 d6 fc ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	50                   	push   eax
c0012333:	e8 20 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012343:	c1 e0 02             	shl    eax,0x2
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	50                   	push   eax
c001234a:	68 24 a6 02 c0       	push   0xc002a624
c001234f:	e8 d8 0b 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	e8 98 ba 00 00       	call   c001ddf4 <unlockScheduler()>
c001235c:	90                   	nop
c001235d:	83 c4 2c             	add    esp,0x2c
c0012360:	c3                   	ret    
c0012361:	90                   	nop

c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012362:	55                   	push   ebp
c0012363:	57                   	push   edi
c0012364:	56                   	push   esi
c0012365:	53                   	push   ebx
c0012366:	83 ec 1c             	sub    esp,0x1c
c0012369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001236d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012371:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012377:	77 08                	ja     c0012381 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012379:	0f 20 d8             	mov    eax,cr3
c001237c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001237f:	75 47                	jne    c00123c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012385:	09 d8                	or     eax,ebx
c0012387:	a9 ff 0f 00 00       	test   eax,0xfff
c001238c:	75 57                	jne    c00123e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001238e:	89 de                	mov    esi,ebx
c0012390:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012393:	c1 ee 16             	shr    esi,0x16
c0012396:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001239d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123a1:	74 54                	je     c00123f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123a7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123b1:	c1 e6 0c             	shl    esi,0xc
c00123b4:	c1 eb 0a             	shr    ebx,0xa
c00123b7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123bd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123c0:	83 c4 1c             	add    esp,0x1c
c00123c3:	5b                   	pop    ebx
c00123c4:	5e                   	pop    esi
c00123c5:	5f                   	pop    edi
c00123c6:	5d                   	pop    ebp
c00123c7:	c3                   	ret    
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 44 a6 02 c0       	push   0xc002a644
c00123d0:	e8 57 0b 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dc:	09 d8                	or     eax,ebx
c00123de:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e3:	74 a9                	je     c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 ac a6 02 c0       	push   0xc002a6ac
c00123ed:	e8 db 81 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	eb 97                	jmp    c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123fb:	e8 e2 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012400:	89 c5                	mov    ebp,eax
c0012402:	e8 1f fa ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001240e:	6a 01                	push   0x1
c0012410:	e8 76 f7 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012415:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001241c:	6a 01                	push   0x1
c001241e:	50                   	push   eax
c001241f:	55                   	push   ebp
c0012420:	81 cd 07 04 00 00    	or     ebp,0x407
c0012426:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001242a:	51                   	push   ecx
c001242b:	e8 26 02 00 00       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012430:	83 c4 1c             	add    esp,0x1c
c0012433:	68 00 10 00 00       	push   0x1000
c0012438:	6a 00                	push   0x0
c001243a:	50                   	push   eax
c001243b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243f:	e8 34 e3 fe ff       	call   c0000778 <memset>
c0012444:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012448:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001244b:	e8 ab fb ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012454:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001245d:	e9 41 ff ff ff       	jmp    c00123a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012462 <VAS::allocatePages(int, int)>:
c0012462:	55                   	push   ebp
c0012463:	57                   	push   edi
c0012464:	56                   	push   esi
c0012465:	53                   	push   ebx
c0012466:	83 ec 1c             	sub    esp,0x1c
c0012469:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001246d:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012478:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001247e:	83 e0 01             	and    eax,0x1
c0012481:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012485:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012489:	0f 85 cc 00 00 00    	jne    c001255b <VAS::allocatePages(int, int)+0xf9>
c001248f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012496:	85 c0                	test   eax,eax
c0012498:	0f 84 a1 00 00 00    	je     c001253f <VAS::allocatePages(int, int)+0xdd>
c001249e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a6:	c1 e6 0c             	shl    esi,0xc
c00124a9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124ad:	85 c0                	test   eax,eax
c00124af:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b2:	7e 33                	jle    c00124e7 <VAS::allocatePages(int, int)+0x85>
c00124b4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bc:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c2:	e8 1b da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124c7:	55                   	push   ebp
c00124c8:	53                   	push   ebx
c00124c9:	50                   	push   eax
c00124ca:	57                   	push   edi
c00124cb:	e8 92 fe ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d8:	74 03                	je     c00124dd <VAS::allocatePages(int, int)+0x7b>
c00124da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e3:	39 de                	cmp    esi,ebx
c00124e5:	75 db                	jne    c00124c2 <VAS::allocatePages(int, int)+0x60>
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	75 12                	jne    c0012500 <VAS::allocatePages(int, int)+0x9e>
c00124ee:	0f 20 d8             	mov    eax,cr3
c00124f1:	0f 22 d8             	mov    cr3,eax
c00124f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	5b                   	pop    ebx
c00124fc:	5e                   	pop    esi
c00124fd:	5f                   	pop    edi
c00124fe:	5d                   	pop    ebp
c00124ff:	c3                   	ret    
c0012500:	c1 ee 0a             	shr    esi,0xa
c0012503:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012507:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001250d:	c1 eb 0a             	shr    ebx,0xa
c0012510:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012516:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001251c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012522:	39 c3                	cmp    ebx,eax
c0012524:	77 ce                	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c0012526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012529:	81 c3 00 10 00 00    	add    ebx,0x1000
c001252f:	39 d8                	cmp    eax,ebx
c0012531:	73 f3                	jae    c0012526 <VAS::allocatePages(int, int)+0xc4>
c0012533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012537:	83 c4 1c             	add    esp,0x1c
c001253a:	5b                   	pop    ebx
c001253b:	5e                   	pop    esi
c001253c:	5f                   	pop    edi
c001253d:	5d                   	pop    ebp
c001253e:	c3                   	ret    
c001253f:	83 ec 0c             	sub    esp,0xc
c0012542:	68 d0 a6 02 c0       	push   0xc002a6d0
c0012547:	e8 81 80 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c001254c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	e9 43 ff ff ff       	jmp    c001249e <VAS::allocatePages(int, int)+0x3c>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012562:	e8 24 f6 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012573:	0f 87 9b 00 00 00    	ja     c0012614 <VAS::allocatePages(int, int)+0x1b2>
c0012579:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001257d:	85 d2                	test   edx,edx
c001257f:	7e 3c                	jle    c00125bd <VAS::allocatePages(int, int)+0x15b>
c0012581:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012585:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012589:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001258d:	c1 e5 0c             	shl    ebp,0xc
c0012590:	81 ce 00 04 00 00    	or     esi,0x400
c0012596:	01 dd                	add    ebp,ebx
c0012598:	e8 45 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	50                   	push   eax
c00125a0:	57                   	push   edi
c00125a1:	e8 bc fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ae:	74 03                	je     c00125b3 <VAS::allocatePages(int, int)+0x151>
c00125b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b9:	39 dd                	cmp    ebp,ebx
c00125bb:	75 db                	jne    c0012598 <VAS::allocatePages(int, int)+0x136>
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	0f 84 26 ff ff ff    	je     c00124ee <VAS::allocatePages(int, int)+0x8c>
c00125c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d0:	89 d3                	mov    ebx,edx
c00125d2:	c1 e0 0c             	shl    eax,0xc
c00125d5:	c1 eb 0a             	shr    ebx,0xa
c00125d8:	01 d0                	add    eax,edx
c00125da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125e0:	c1 e8 0a             	shr    eax,0xa
c00125e3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ee:	2d 00 00 40 00       	sub    eax,0x400000
c00125f3:	39 c3                	cmp    ebx,eax
c00125f5:	0f 87 f9 fe ff ff    	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c00125fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012604:	39 d8                	cmp    eax,ebx
c0012606:	73 f3                	jae    c00125fb <VAS::allocatePages(int, int)+0x199>
c0012608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260c:	83 c4 1c             	add    esp,0x1c
c001260f:	5b                   	pop    ebx
c0012610:	5e                   	pop    esi
c0012611:	5f                   	pop    edi
c0012612:	5d                   	pop    ebp
c0012613:	c3                   	ret    
c0012614:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012619:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012626:	0f 84 4d ff ff ff    	je     c0012579 <VAS::allocatePages(int, int)+0x117>
c001262c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012634:	e9 40 ff ff ff       	jmp    c0012579 <VAS::allocatePages(int, int)+0x117>
c0012639:	90                   	nop

c001263a <VAS::setCPUSpecific(unsigned long)>:
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	6a 05                	push   0x5
c001263f:	68 00 00 40 c2       	push   0xc2400000
c0012644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264c:	e8 11 fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012651:	83 c4 1c             	add    esp,0x1c
c0012654:	c3                   	ret    
c0012655:	90                   	nop

c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012656:	55                   	push   ebp
c0012657:	57                   	push   edi
c0012658:	56                   	push   esi
c0012659:	53                   	push   ebx
c001265a:	83 ec 1c             	sub    esp,0x1c
c001265d:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012662:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012666:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012670:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012676:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001267a:	83 e0 01             	and    eax,0x1
c001267d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012681:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012685:	85 c0                	test   eax,eax
c0012687:	7e 39                	jle    c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012689:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268d:	89 f3                	mov    ebx,esi
c001268f:	c1 e0 0c             	shl    eax,0xc
c0012692:	01 f0                	add    eax,esi
c0012694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012698:	55                   	push   ebp
c0012699:	53                   	push   ebx
c001269a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269e:	29 f0                	sub    eax,esi
c00126a0:	01 d8                	add    eax,ebx
c00126a2:	50                   	push   eax
c00126a3:	57                   	push   edi
c00126a4:	e8 b9 fc ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126b1:	74 03                	je     c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126bc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126c0:	75 d6                	jne    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c7:	75 10                	jne    c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126c9:	0f 20 d8             	mov    eax,cr3
c00126cc:	0f 22 d8             	mov    cr3,eax
c00126cf:	83 c4 1c             	add    esp,0x1c
c00126d2:	89 f0                	mov    eax,esi
c00126d4:	5b                   	pop    ebx
c00126d5:	5e                   	pop    esi
c00126d6:	5f                   	pop    edi
c00126d7:	5d                   	pop    ebp
c00126d8:	c3                   	ret    
c00126d9:	89 f3                	mov    ebx,esi
c00126db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126df:	c1 eb 0a             	shr    ebx,0xa
c00126e2:	c1 e0 0c             	shl    eax,0xc
c00126e5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126eb:	01 f0                	add    eax,esi
c00126ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f3:	c1 e8 0a             	shr    eax,0xa
c00126f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126fb:	2d 00 00 40 00       	sub    eax,0x400000
c0012700:	39 c3                	cmp    ebx,eax
c0012702:	77 cb                	ja     c00126cf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012704:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012707:	81 c3 00 10 00 00    	add    ebx,0x1000
c001270d:	39 d8                	cmp    eax,ebx
c001270f:	73 f3                	jae    c0012704 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012711:	83 c4 1c             	add    esp,0x1c
c0012714:	89 f0                	mov    eax,esi
c0012716:	5b                   	pop    ebx
c0012717:	5e                   	pop    esi
c0012718:	5f                   	pop    edi
c0012719:	5d                   	pop    ebp
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	83 ec 1c             	sub    esp,0x1c
c0012723:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012727:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001272b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001272f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012733:	a9 ff 0f 00 00       	test   eax,0xfff
c0012738:	75 4a                	jne    c0012784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001273a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001273e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012741:	c1 eb 16             	shr    ebx,0x16
c0012744:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001274b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001274f:	74 4d                	je     c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012751:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012755:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012759:	c1 e8 0a             	shr    eax,0xa
c001275c:	80 fa 01             	cmp    dl,0x1
c001275f:	19 d2                	sbb    edx,edx
c0012761:	c1 e3 0c             	shl    ebx,0xc
c0012764:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012768:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001276e:	25 fc 0f 00 00       	and    eax,0xffc
c0012773:	01 d8                	add    eax,ebx
c0012775:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001277c:	83 c4 1c             	add    esp,0x1c
c001277f:	5b                   	pop    ebx
c0012780:	5e                   	pop    esi
c0012781:	5f                   	pop    edi
c0012782:	5d                   	pop    ebp
c0012783:	c3                   	ret    
c0012784:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 fc a6 02 c0       	push   0xc002a6fc
c0012790:	e8 38 7e 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279c:	eb 9c                	jmp    c001273a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001279e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a2:	e8 3b d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127a7:	89 c5                	mov    ebp,eax
c00127a9:	e8 78 f6 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127b5:	6a 01                	push   0x1
c00127b7:	e8 cf f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c00127bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c3:	6a 01                	push   0x1
c00127c5:	50                   	push   eax
c00127c6:	55                   	push   ebp
c00127c7:	81 cd 07 04 00 00    	or     ebp,0x407
c00127cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127d1:	51                   	push   ecx
c00127d2:	e8 7f fe ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d7:	83 c4 1c             	add    esp,0x1c
c00127da:	68 00 10 00 00       	push   0x1000
c00127df:	6a 00                	push   0x0
c00127e1:	50                   	push   eax
c00127e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127e6:	e8 8d df fe ff       	call   c0000778 <memset>
c00127eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f2:	e8 04 f8 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c00127f7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012804:	e9 48 ff ff ff       	jmp    c0012751 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012809:	90                   	nop

c001280a <VAS::VAS(bool)>:
c001280a:	53                   	push   ebx
c001280b:	83 ec 28             	sub    esp,0x28
c001280e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012812:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012825:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012829:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001282c:	e8 b1 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012831:	89 c2                	mov    edx,eax
c0012833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012837:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001283a:	e8 e7 f5 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001283f:	89 c3                	mov    ebx,eax
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	6a 01                	push   0x1
c0012846:	e8 40 f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001284b:	83 c4 10             	add    esp,0x10
c001284e:	89 c2                	mov    edx,eax
c0012850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012854:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	6a 03                	push   0x3
c001285c:	6a 01                	push   0x1
c001285e:	52                   	push   edx
c001285f:	50                   	push   eax
c0012860:	53                   	push   ebx
c0012861:	e8 f0 fd ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012866:	83 c4 20             	add    esp,0x20
c0012869:	89 c2                	mov    edx,eax
c001286b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012872:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001287a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012882:	7f 1c                	jg     c00128a0 <VAS::VAS(bool)+0x96>
c0012884:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001288b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001288f:	c1 e2 02             	shl    edx,0x2
c0012892:	01 d0                	add    eax,edx
c0012894:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001289a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001289e:	eb da                	jmp    c001287a <VAS::VAS(bool)+0x70>
c00128a0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128a8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128b0:	7f 7a                	jg     c001292c <VAS::VAS(bool)+0x122>
c00128b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b6:	2d 00 02 00 00       	sub    eax,0x200
c00128bb:	c1 e0 0c             	shl    eax,0xc
c00128be:	83 c8 03             	or     eax,0x3
c00128c1:	89 c2                	mov    edx,eax
c00128c3:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00128c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d4:	83 e0 10             	and    eax,0x10
c00128d7:	84 c0                	test   al,al
c00128d9:	74 07                	je     c00128e2 <VAS::VAS(bool)+0xd8>
c00128db:	b8 00 01 00 00       	mov    eax,0x100
c00128e0:	eb 05                	jmp    c00128e7 <VAS::VAS(bool)+0xdd>
c00128e2:	b8 00 00 00 00       	mov    eax,0x0
c00128e7:	09 d0                	or     eax,edx
c00128e9:	89 c1                	mov    ecx,eax
c00128eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f6:	c1 e2 02             	shl    edx,0x2
c00128f9:	01 d0                	add    eax,edx
c00128fb:	89 ca                	mov    edx,ecx
c00128fd:	89 10                	mov    DWORD PTR [eax],edx
c00128ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012903:	2d 40 03 00 00       	sub    eax,0x340
c0012908:	83 f8 7f             	cmp    eax,0x7f
c001290b:	77 16                	ja     c0012923 <VAS::VAS(bool)+0x119>
c001290d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012911:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012914:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012918:	c1 e2 02             	shl    edx,0x2
c001291b:	01 d0                	add    eax,edx
c001291d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012923:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012927:	e9 7c ff ff ff       	jmp    c00128a8 <VAS::VAS(bool)+0x9e>
c001292c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012931:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012937:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001293d:	83 e0 10             	and    eax,0x10
c0012940:	84 c0                	test   al,al
c0012942:	74 07                	je     c001294b <VAS::VAS(bool)+0x141>
c0012944:	b8 03 41 00 00       	mov    eax,0x4103
c0012949:	eb 05                	jmp    c0012950 <VAS::VAS(bool)+0x146>
c001294b:	b8 03 40 00 00       	mov    eax,0x4003
c0012950:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012954:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012957:	81 c2 20 0c 00 00    	add    edx,0xc20
c001295d:	89 02                	mov    DWORD PTR [edx],eax
c001295f:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012964:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012970:	83 ec 08             	sub    esp,0x8
c0012973:	50                   	push   eax
c0012974:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012978:	e8 bd fc ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012984:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012987:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001298c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012992:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012998:	83 e0 10             	and    eax,0x10
c001299b:	84 c0                	test   al,al
c001299d:	74 07                	je     c00129a6 <VAS::VAS(bool)+0x19c>
c001299f:	b8 00 01 00 00       	mov    eax,0x100
c00129a4:	eb 05                	jmp    c00129ab <VAS::VAS(bool)+0x1a1>
c00129a6:	b8 00 00 00 00       	mov    eax,0x0
c00129ab:	09 c2                	or     edx,eax
c00129ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129b4:	05 fc 0f 00 00       	add    eax,0xffc
c00129b9:	83 ca 03             	or     edx,0x3
c00129bc:	89 10                	mov    DWORD PTR [eax],edx
c00129be:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00129c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c9:	83 ec 0c             	sub    esp,0xc
c00129cc:	50                   	push   eax
c00129cd:	e8 6c 1c 00 00       	call   c001463e <Device::getName()>
c00129d2:	83 c4 10             	add    esp,0x10
c00129d5:	83 ec 08             	sub    esp,0x8
c00129d8:	68 18 a9 02 c0       	push   0xc002a918
c00129dd:	50                   	push   eax
c00129de:	e8 dd de fe ff       	call   c00008c0 <strcmp>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	85 c0                	test   eax,eax
c00129e8:	0f 94 c0             	sete   al
c00129eb:	84 c0                	test   al,al
c00129ed:	74 70                	je     c0012a5f <VAS::VAS(bool)+0x255>
c00129ef:	e8 e1 b3 00 00       	call   c001ddd5 <disableIRQs()>
c00129f4:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00129f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ff:	05 7c 09 00 00       	add    eax,0x97c
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	50                   	push   eax
c0012a08:	e8 af c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a15:	89 c3                	mov    ebx,eax
c0012a17:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012a1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a22:	05 7c 09 00 00       	add    eax,0x97c
c0012a27:	83 ec 0c             	sub    esp,0xc
c0012a2a:	50                   	push   eax
c0012a2b:	e8 8c c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	83 ec 08             	sub    esp,0x8
c0012a36:	50                   	push   eax
c0012a37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a3b:	e8 9c f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a4a:	6a 11                	push   0x11
c0012a4c:	53                   	push   ebx
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a52:	e8 0b f9 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	e8 84 b3 00 00       	call   c001dde3 <enableIRQs()>
c0012a5f:	90                   	nop
c0012a60:	83 c4 28             	add    esp,0x28
c0012a63:	5b                   	pop    ebx
c0012a64:	c3                   	ret    
c0012a65:	90                   	nop

c0012a66 <VAS::evict(unsigned long)>:
c0012a66:	57                   	push   edi
c0012a67:	56                   	push   esi
c0012a68:	53                   	push   ebx
c0012a69:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a71:	e8 7c b3 00 00       	call   c001ddf2 <lockScheduler()>
c0012a76:	83 ec 08             	sub    esp,0x8
c0012a79:	56                   	push   esi
c0012a7a:	68 20 a7 02 c0       	push   0xc002a720
c0012a7f:	e8 a8 04 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012a84:	e8 43 f2 ff ff       	call   c0011ccc <Virt::allocateSwapfilePage()>
c0012a89:	83 c4 0c             	add    esp,0xc
c0012a8c:	89 c3                	mov    ebx,eax
c0012a8e:	50                   	push   eax
c0012a8f:	50                   	push   eax
c0012a90:	68 26 a9 02 c0       	push   0xc002a926
c0012a95:	e8 92 04 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a9d:	e8 18 f2 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012aa2:	c1 e3 0b             	shl    ebx,0xb
c0012aa5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa8:	31 d2                	xor    edx,edx
c0012aaa:	6a 08                	push   0x8
c0012aac:	52                   	push   edx
c0012aad:	50                   	push   eax
c0012aae:	0f be 05 98 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d598
c0012ab5:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c0012abc:	e8 e7 3c 00 00       	call   c00167a8 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac1:	83 c4 18             	add    esp,0x18
c0012ac4:	56                   	push   esi
c0012ac5:	57                   	push   edi
c0012ac6:	e8 11 f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012acb:	89 c6                	mov    esi,eax
c0012acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012acf:	c1 e8 0c             	shr    eax,0xc
c0012ad2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ad5:	e8 7e d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012ada:	8b 16                	mov    edx,DWORD PTR [esi]
c0012adc:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ae2:	09 d3                	or     ebx,edx
c0012ae4:	89 1e                	mov    DWORD PTR [esi],ebx
c0012ae6:	c7 04 24 36 a9 02 c0 	mov    DWORD PTR [esp],0xc002a936
c0012aed:	e8 3a 04 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	5b                   	pop    ebx
c0012af6:	5e                   	pop    esi
c0012af7:	5f                   	pop    edi
c0012af8:	e9 f7 b2 00 00       	jmp    c001ddf4 <unlockScheduler()>
c0012afd:	90                   	nop

c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012afe:	57                   	push   edi
c0012aff:	56                   	push   esi
c0012b00:	53                   	push   ebx
c0012b01:	83 ec 10             	sub    esp,0x10
c0012b04:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b08:	e8 e5 b2 00 00       	call   c001ddf2 <lockScheduler()>
c0012b0d:	83 ec 08             	sub    esp,0x8
c0012b10:	56                   	push   esi
c0012b11:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b17:	68 40 a7 02 c0       	push   0xc002a740
c0012b1c:	e8 0b 04 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012b21:	58                   	pop    eax
c0012b22:	5a                   	pop    edx
c0012b23:	56                   	push   esi
c0012b24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b28:	e8 af f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012b2d:	59                   	pop    ecx
c0012b2e:	5b                   	pop    ebx
c0012b2f:	89 c3                	mov    ebx,eax
c0012b31:	ff 30                	push   DWORD PTR [eax]
c0012b33:	68 46 a9 02 c0       	push   0xc002a946
c0012b38:	e8 ef 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012b3d:	5f                   	pop    edi
c0012b3e:	58                   	pop    eax
c0012b3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b41:	c1 e8 0b             	shr    eax,0xb
c0012b44:	50                   	push   eax
c0012b45:	68 57 a9 02 c0       	push   0xc002a957
c0012b4a:	e8 dd 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012b4f:	83 c4 10             	add    esp,0x10
c0012b52:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012b58:	75 1e                	jne    c0012b78 <VAS::tryLoadBackOffDisk(unsigned long)+0x7a>
c0012b5a:	83 ec 0c             	sub    esp,0xc
c0012b5d:	68 cc a9 02 c0       	push   0xc002a9cc
c0012b62:	e8 c5 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012b67:	e8 88 b2 00 00       	call   c001ddf4 <unlockScheduler()>
c0012b6c:	83 c4 10             	add    esp,0x10
c0012b6f:	31 c0                	xor    eax,eax
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	5b                   	pop    ebx
c0012b75:	5e                   	pop    esi
c0012b76:	5f                   	pop    edi
c0012b77:	c3                   	ret    
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	68 74 a9 02 c0       	push   0xc002a974
c0012b80:	e8 a7 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012b85:	c6 05 20 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e620,0x1
c0012b8c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012b8e:	e8 4f d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012b93:	c1 ef 0b             	shr    edi,0xb
c0012b96:	5a                   	pop    edx
c0012b97:	c6 05 20 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e620,0x0
c0012b9e:	59                   	pop    ecx
c0012b9f:	50                   	push   eax
c0012ba0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ba4:	68 8c a9 02 c0       	push   0xc002a98c
c0012ba9:	e8 7e 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012bae:	58                   	pop    eax
c0012baf:	5a                   	pop    edx
c0012bb0:	ff 33                	push   DWORD PTR [ebx]
c0012bb2:	68 a6 a9 02 c0       	push   0xc002a9a6
c0012bb7:	e8 70 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bc0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bc2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bc8:	09 d0                	or     eax,edx
c0012bca:	0d 01 08 00 00       	or     eax,0x801
c0012bcf:	89 03                	mov    DWORD PTR [ebx],eax
c0012bd1:	59                   	pop    ecx
c0012bd2:	5b                   	pop    ebx
c0012bd3:	50                   	push   eax
c0012bd4:	68 b9 a9 02 c0       	push   0xc002a9b9
c0012bd9:	e8 4e 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012bde:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012be1:	e8 d4 f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012be6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012be9:	31 d2                	xor    edx,edx
c0012beb:	ff 35 8c d5 02 c0    	push   DWORD PTR ds:0xc002d58c
c0012bf1:	52                   	push   edx
c0012bf2:	50                   	push   eax
c0012bf3:	0f be 05 98 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d598
c0012bfa:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c0012c01:	e8 36 3b 00 00       	call   c001673c <LogicalDisk::read(unsigned long long, int, void*)>
c0012c06:	83 c4 14             	add    esp,0x14
c0012c09:	57                   	push   edi
c0012c0a:	e8 8d f0 ff ff       	call   c0011c9c <Virt::freeSwapfilePage(unsigned long)>
c0012c0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c12:	e8 a3 f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012c17:	5e                   	pop    esi
c0012c18:	5f                   	pop    edi
c0012c19:	50                   	push   eax
c0012c1a:	68 6c a7 02 c0       	push   0xc002a76c
c0012c1f:	e8 08 03 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012c24:	e8 cb b1 00 00       	call   c001ddf4 <unlockScheduler()>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	b0 01                	mov    al,0x1
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	5b                   	pop    ebx
c0012c32:	5e                   	pop    esi
c0012c33:	5f                   	pop    edi
c0012c34:	c3                   	ret    
c0012c35:	90                   	nop

c0012c36 <VAS::scanForEviction(int, int)>:
c0012c36:	55                   	push   ebp
c0012c37:	57                   	push   edi
c0012c38:	56                   	push   esi
c0012c39:	53                   	push   ebx
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c41:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012c45:	85 c9                	test   ecx,ecx
c0012c47:	75 08                	jne    c0012c51 <VAS::scanForEviction(int, int)+0x1b>
c0012c49:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0012c51:	83 ec 0c             	sub    esp,0xc
c0012c54:	31 ed                	xor    ebp,ebp
c0012c56:	68 8c a7 02 c0       	push   0xc002a78c
c0012c5b:	e8 cc 02 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	eb 0f                	jmp    c0012c74 <VAS::scanForEviction(int, int)+0x3e>
c0012c65:	83 c5 04             	add    ebp,0x4
c0012c68:	81 fd 00 0c 00 00    	cmp    ebp,0xc00
c0012c6e:	0f 84 8e 00 00 00    	je     c0012d02 <VAS::scanForEviction(int, int)+0xcc>
c0012c74:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012c77:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012c7b:	74 e8                	je     c0012c65 <VAS::scanForEviction(int, int)+0x2f>
c0012c7d:	89 eb                	mov    ebx,ebp
c0012c7f:	31 f6                	xor    esi,esi
c0012c81:	c1 e3 14             	shl    ebx,0x14
c0012c84:	eb 0f                	jmp    c0012c95 <VAS::scanForEviction(int, int)+0x5f>
c0012c86:	46                   	inc    esi
c0012c87:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c8d:	81 fe 00 04 00 00    	cmp    esi,0x400
c0012c93:	74 d0                	je     c0012c65 <VAS::scanForEviction(int, int)+0x2f>
c0012c95:	83 ec 08             	sub    esp,0x8
c0012c98:	53                   	push   ebx
c0012c99:	57                   	push   edi
c0012c9a:	e8 3d f3 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ca4:	89 c2                	mov    edx,eax
c0012ca6:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012cac:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012cb2:	75 d2                	jne    c0012c86 <VAS::scanForEviction(int, int)+0x50>
c0012cb4:	a8 01                	test   al,0x1
c0012cb6:	74 37                	je     c0012cef <VAS::scanForEviction(int, int)+0xb9>
c0012cb8:	83 ec 08             	sub    esp,0x8
c0012cbb:	53                   	push   ebx
c0012cbc:	68 b0 a7 02 c0       	push   0xc002a7b0
c0012cc1:	e8 66 02 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012cc6:	89 f0                	mov    eax,esi
c0012cc8:	99                   	cdq    
c0012cc9:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	85 d2                	test   edx,edx
c0012cd2:	75 b2                	jne    c0012c86 <VAS::scanForEviction(int, int)+0x50>
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	68 e5 a9 02 c0       	push   0xc002a9e5
c0012cdc:	e8 4b 02 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012ce1:	58                   	pop    eax
c0012ce2:	5a                   	pop    edx
c0012ce3:	53                   	push   ebx
c0012ce4:	57                   	push   edi
c0012ce5:	e8 7c fd ff ff       	call   c0012a66 <VAS::evict(unsigned long)>
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	eb 97                	jmp    c0012c86 <VAS::scanForEviction(int, int)+0x50>
c0012cef:	83 ec 08             	sub    esp,0x8
c0012cf2:	53                   	push   ebx
c0012cf3:	68 dc a7 02 c0       	push   0xc002a7dc
c0012cf8:	e8 2f 02 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012cfd:	83 c4 10             	add    esp,0x10
c0012d00:	eb 84                	jmp    c0012c86 <VAS::scanForEviction(int, int)+0x50>
c0012d02:	83 c4 0c             	add    esp,0xc
c0012d05:	5b                   	pop    ebx
c0012d06:	5e                   	pop    esi
c0012d07:	5f                   	pop    edi
c0012d08:	5d                   	pop    ebp
c0012d09:	c3                   	ret    

c0012d0a <mapVASFirstTime>:
c0012d0a:	55                   	push   ebp
c0012d0b:	57                   	push   edi
c0012d0c:	56                   	push   esi
c0012d0d:	53                   	push   ebx
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d16:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d19:	4a                   	dec    edx
c0012d1a:	0f 84 8e 00 00 00    	je     c0012dae <mapVASFirstTime+0xa4>
c0012d20:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d23:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d26:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d2b:	c1 e5 15             	shl    ebp,0x15
c0012d2e:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d33:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d39:	29 eb                	sub    ebx,ebp
c0012d3b:	29 ee                	sub    esi,ebp
c0012d3d:	e8 a0 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d42:	83 ec 0c             	sub    esp,0xc
c0012d45:	68 03 04 00 00       	push   0x403
c0012d4a:	6a 01                	push   0x1
c0012d4c:	53                   	push   ebx
c0012d4d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d53:	50                   	push   eax
c0012d54:	57                   	push   edi
c0012d55:	e8 fc f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d5a:	83 c4 20             	add    esp,0x20
c0012d5d:	39 f3                	cmp    ebx,esi
c0012d5f:	75 dc                	jne    c0012d3d <mapVASFirstTime+0x33>
c0012d61:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d66:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d6b:	29 ee                	sub    esi,ebp
c0012d6d:	29 e8                	sub    eax,ebp
c0012d6f:	89 c5                	mov    ebp,eax
c0012d71:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d75:	19 db                	sbb    ebx,ebx
c0012d77:	e8 66 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d7c:	83 e3 04             	and    ebx,0x4
c0012d7f:	83 ec 0c             	sub    esp,0xc
c0012d82:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d88:	53                   	push   ebx
c0012d89:	6a 01                	push   0x1
c0012d8b:	56                   	push   esi
c0012d8c:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d92:	50                   	push   eax
c0012d93:	57                   	push   edi
c0012d94:	e8 bd f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d99:	83 c4 20             	add    esp,0x20
c0012d9c:	39 f5                	cmp    ebp,esi
c0012d9e:	75 d1                	jne    c0012d71 <mapVASFirstTime+0x67>
c0012da0:	0f 20 d8             	mov    eax,cr3
c0012da3:	0f 22 d8             	mov    cr3,eax
c0012da6:	83 c4 0c             	add    esp,0xc
c0012da9:	5b                   	pop    ebx
c0012daa:	5e                   	pop    esi
c0012dab:	5f                   	pop    edi
c0012dac:	5d                   	pop    ebp
c0012dad:	c3                   	ret    
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	68 f0 a9 02 c0       	push   0xc002a9f0
c0012db6:	e8 71 01 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	83 c4 0c             	add    esp,0xc
c0012dc1:	5b                   	pop    ebx
c0012dc2:	5e                   	pop    esi
c0012dc3:	5f                   	pop    edi
c0012dc4:	5d                   	pop    ebp
c0012dc5:	c3                   	ret    

c0012dc6 <__cxa_atexit>:
c0012dc6:	31 c0                	xor    eax,eax
c0012dc8:	c3                   	ret    

c0012dc9 <__cxa_finalize>:
c0012dc9:	c3                   	ret    

c0012dca <__stack_chk_fail>:
c0012dca:	55                   	push   ebp
c0012dcb:	89 e5                	mov    ebp,esp
c0012dcd:	83 ec 14             	sub    esp,0x14
c0012dd0:	68 09 aa 02 c0       	push   0xc002aa09
c0012dd5:	e8 52 01 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012dda:	58                   	pop    eax
c0012ddb:	5a                   	pop    edx
c0012ddc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012ddf:	68 59 aa 02 c0       	push   0xc002aa59
c0012de4:	e8 43 01 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012de9:	59                   	pop    ecx
c0012dea:	58                   	pop    eax
c0012deb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dee:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012df1:	68 59 aa 02 c0       	push   0xc002aa59
c0012df6:	e8 31 01 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012dfb:	5a                   	pop    edx
c0012dfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dff:	59                   	pop    ecx
c0012e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e02:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e05:	68 59 aa 02 c0       	push   0xc002aa59
c0012e0a:	e8 1d 01 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012e0f:	5a                   	pop    edx
c0012e10:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e13:	59                   	pop    ecx
c0012e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e18:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e1b:	68 59 aa 02 c0       	push   0xc002aa59
c0012e20:	e8 07 01 00 00       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0012e25:	c7 04 24 61 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa61
c0012e2c:	e8 9c 77 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	c9                   	leave  
c0012e35:	c3                   	ret    

c0012e36 <__cxa_pure_virtual>:
c0012e36:	83 ec 18             	sub    esp,0x18
c0012e39:	68 79 aa 02 c0       	push   0xc002aa79
c0012e3e:	e8 8a 77 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0012e43:	83 c4 1c             	add    esp,0x1c
c0012e46:	c3                   	ret    

c0012e47 <operator new[](unsigned long)>:
c0012e47:	e9 f4 c9 ff ff       	jmp    c000f840 <malloc>

c0012e4c <operator delete(void*, unsigned long)>:
c0012e4c:	e9 0f ca ff ff       	jmp    c000f860 <rfree>

c0012e51 <operator delete[](void*)>:
c0012e51:	e9 0a ca ff ff       	jmp    c000f860 <rfree>

c0012e56 <operator delete[](void*, unsigned long)>:
c0012e56:	e9 05 ca ff ff       	jmp    c000f860 <rfree>

c0012e5b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e5b:	57                   	push   edi
c0012e5c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e61:	56                   	push   esi
c0012e62:	be 8c aa 02 c0       	mov    esi,0xc002aa8c
c0012e67:	53                   	push   ebx
c0012e68:	83 ec 40             	sub    esp,0x40
c0012e6b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e6f:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e73:	fc                   	cld    
c0012e74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e76:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e7a:	83 f9 3e             	cmp    ecx,0x3e
c0012e7d:	7e 05                	jle    c0012e84 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e7f:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e84:	89 df                	mov    edi,ebx
c0012e86:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e8a:	eb 02                	jmp    c0012e8e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e8c:	89 c7                	mov    edi,eax
c0012e8e:	31 d2                	xor    edx,edx
c0012e90:	46                   	inc    esi
c0012e91:	89 f8                	mov    eax,edi
c0012e93:	f7 f1                	div    ecx
c0012e95:	39 cf                	cmp    edi,ecx
c0012e97:	73 f3                	jae    c0012e8c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e99:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e9c:	eb 02                	jmp    c0012ea0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e9e:	89 c3                	mov    ebx,eax
c0012ea0:	31 d2                	xor    edx,edx
c0012ea2:	4e                   	dec    esi
c0012ea3:	89 d8                	mov    eax,ebx
c0012ea5:	f7 f1                	div    ecx
c0012ea7:	39 cb                	cmp    ebx,ecx
c0012ea9:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012ead:	88 16                	mov    BYTE PTR [esi],dl
c0012eaf:	73 ed                	jae    c0012e9e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012eb1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012eb5:	83 c4 40             	add    esp,0x40
c0012eb8:	5b                   	pop    ebx
c0012eb9:	5e                   	pop    esi
c0012eba:	5f                   	pop    edi
c0012ebb:	c3                   	ret    

c0012ebc <Dbg::logc(char)>:
c0012ebc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ec0:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ec5:	ec                   	in     al,dx
c0012ec6:	a8 20                	test   al,0x20
c0012ec8:	74 fb                	je     c0012ec5 <Dbg::logc(char)+0x9>
c0012eca:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ecf:	88 c8                	mov    al,cl
c0012ed1:	ee                   	out    dx,al
c0012ed2:	c3                   	ret    

c0012ed3 <Dbg::logs(char*)>:
c0012ed3:	53                   	push   ebx
c0012ed4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ed8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012edb:	84 c0                	test   al,al
c0012edd:	74 0f                	je     c0012eee <Dbg::logs(char*)+0x1b>
c0012edf:	50                   	push   eax
c0012ee0:	43                   	inc    ebx
c0012ee1:	e8 d6 ff ff ff       	call   c0012ebc <Dbg::logc(char)>
c0012ee6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ee9:	5a                   	pop    edx
c0012eea:	84 c0                	test   al,al
c0012eec:	75 f1                	jne    c0012edf <Dbg::logs(char*)+0xc>
c0012eee:	5b                   	pop    ebx
c0012eef:	c3                   	ret    

c0012ef0 <Dbg::logWriteInt(unsigned int)>:
c0012ef0:	83 ec 10             	sub    esp,0x10
c0012ef3:	6a 0a                	push   0xa
c0012ef5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ef9:	50                   	push   eax
c0012efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012efe:	e8 58 ff ff ff       	call   c0012e5b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f03:	50                   	push   eax
c0012f04:	e8 ca ff ff ff       	call   c0012ed3 <Dbg::logs(char*)>
c0012f09:	83 c4 20             	add    esp,0x20
c0012f0c:	c3                   	ret    

c0012f0d <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f0d:	83 ec 10             	sub    esp,0x10
c0012f10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f18:	50                   	push   eax
c0012f19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f1d:	e8 39 ff ff ff       	call   c0012e5b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f22:	50                   	push   eax
c0012f23:	e8 ab ff ff ff       	call   c0012ed3 <Dbg::logs(char*)>
c0012f28:	83 c4 20             	add    esp,0x20
c0012f2b:	c3                   	ret    

c0012f2c <Dbg::kprintf(char const*, ...)>:
c0012f2c:	55                   	push   ebp
c0012f2d:	57                   	push   edi
c0012f2e:	56                   	push   esi
c0012f2f:	53                   	push   ebx
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f37:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f3f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f42:	84 c0                	test   al,al
c0012f44:	74 4a                	je     c0012f90 <Dbg::kprintf(char const*, ...)+0x64>
c0012f46:	31 db                	xor    ebx,ebx
c0012f48:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f4b:	3c 25                	cmp    al,0x25
c0012f4d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f50:	0f 85 e4 00 00 00    	jne    c001303a <Dbg::kprintf(char const*, ...)+0x10e>
c0012f56:	83 c3 02             	add    ebx,0x2
c0012f59:	8a 07                	mov    al,BYTE PTR [edi]
c0012f5b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f5e:	83 e8 25             	sub    eax,0x25
c0012f61:	3c 53                	cmp    al,0x53
c0012f63:	0f 87 ba 00 00 00    	ja     c0013023 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f69:	0f b6 c0             	movzx  eax,al
c0012f6c:	ff 24 85 cc aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5534]
c0012f73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f77:	89 c8                	mov    eax,ecx
c0012f79:	83 c1 04             	add    ecx,0x4
c0012f7c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f80:	ff 30                	push   DWORD PTR [eax]
c0012f82:	e8 4c ff ff ff       	call   c0012ed3 <Dbg::logs(char*)>
c0012f87:	58                   	pop    eax
c0012f88:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f8c:	84 c0                	test   al,al
c0012f8e:	75 b8                	jne    c0012f48 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f90:	83 c4 0c             	add    esp,0xc
c0012f93:	5b                   	pop    ebx
c0012f94:	5e                   	pop    esi
c0012f95:	5f                   	pop    edi
c0012f96:	5d                   	pop    ebp
c0012f97:	c3                   	ret    
c0012f98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f9c:	89 d0                	mov    eax,edx
c0012f9e:	83 c2 04             	add    edx,0x4
c0012fa1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fa5:	ff 30                	push   DWORD PTR [eax]
c0012fa7:	e8 44 ff ff ff       	call   c0012ef0 <Dbg::logWriteInt(unsigned int)>
c0012fac:	58                   	pop    eax
c0012fad:	eb d9                	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>
c0012faf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fb3:	89 d0                	mov    eax,edx
c0012fb5:	83 c2 04             	add    edx,0x4
c0012fb8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fbf:	50                   	push   eax
c0012fc0:	e8 f7 fe ff ff       	call   c0012ebc <Dbg::logc(char)>
c0012fc5:	58                   	pop    eax
c0012fc6:	eb c0                	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fcc:	89 c8                	mov    eax,ecx
c0012fce:	83 c1 04             	add    ecx,0x4
c0012fd1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fd5:	ff 30                	push   DWORD PTR [eax]
c0012fd7:	e8 14 ff ff ff       	call   c0012ef0 <Dbg::logWriteInt(unsigned int)>
c0012fdc:	5f                   	pop    edi
c0012fdd:	eb a9                	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fdf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fe3:	89 c8                	mov    eax,ecx
c0012fe5:	83 c1 04             	add    ecx,0x4
c0012fe8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fec:	6a 10                	push   0x10
c0012fee:	ff 30                	push   DWORD PTR [eax]
c0012ff0:	e8 18 ff ff ff       	call   c0012f0d <Dbg::logWriteIntBase(unsigned int, int)>
c0012ff5:	59                   	pop    ecx
c0012ff6:	5f                   	pop    edi
c0012ff7:	eb 8f                	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ffd:	89 d0                	mov    eax,edx
c0012fff:	83 c2 08             	add    edx,0x8
c0013002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013006:	6a 10                	push   0x10
c0013008:	ff 30                	push   DWORD PTR [eax]
c001300a:	e8 fe fe ff ff       	call   c0012f0d <Dbg::logWriteIntBase(unsigned int, int)>
c001300f:	58                   	pop    eax
c0013010:	5a                   	pop    edx
c0013011:	e9 72 ff ff ff       	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>
c0013016:	6a 25                	push   0x25
c0013018:	e8 9f fe ff ff       	call   c0012ebc <Dbg::logc(char)>
c001301d:	58                   	pop    eax
c001301e:	e9 65 ff ff ff       	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>
c0013023:	6a 25                	push   0x25
c0013025:	e8 92 fe ff ff       	call   c0012ebc <Dbg::logc(char)>
c001302a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001302d:	50                   	push   eax
c001302e:	e8 89 fe ff ff       	call   c0012ebc <Dbg::logc(char)>
c0013033:	5a                   	pop    edx
c0013034:	59                   	pop    ecx
c0013035:	e9 4e ff ff ff       	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>
c001303a:	50                   	push   eax
c001303b:	89 eb                	mov    ebx,ebp
c001303d:	e8 7a fe ff ff       	call   c0012ebc <Dbg::logc(char)>
c0013042:	89 fd                	mov    ebp,edi
c0013044:	58                   	pop    eax
c0013045:	e9 3e ff ff ff       	jmp    c0012f88 <Dbg::kprintf(char const*, ...)+0x5c>

c001304a <File::read(unsigned long long, void*, int*)>:
c001304a:	53                   	push   ebx
c001304b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001304f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013053:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001305a:	3c 19                	cmp    al,0x19
c001305c:	77 35                	ja     c0013093 <File::read(unsigned long long, void*, int*)+0x49>
c001305e:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0013065:	85 c0                	test   eax,eax
c0013067:	74 2a                	je     c0013093 <File::read(unsigned long long, void*, int*)+0x49>
c0013069:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001306f:	85 c0                	test   eax,eax
c0013071:	74 20                	je     c0013093 <File::read(unsigned long long, void*, int*)+0x49>
c0013073:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013077:	74 21                	je     c001309a <File::read(unsigned long long, void*, int*)+0x50>
c0013079:	8b 08                	mov    ecx,DWORD PTR [eax]
c001307b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001307f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001308d:	5b                   	pop    ebx
c001308e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013091:	ff e0                	jmp    eax
c0013093:	b8 0b 00 00 00       	mov    eax,0xb
c0013098:	eb 05                	jmp    c001309f <File::read(unsigned long long, void*, int*)+0x55>
c001309a:	b8 05 00 00 00       	mov    eax,0x5
c001309f:	5b                   	pop    ebx
c00130a0:	c3                   	ret    
c00130a1:	90                   	nop

c00130a2 <File::write(unsigned long long, void*, int*)>:
c00130a2:	53                   	push   ebx
c00130a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130ab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130b2:	3c 19                	cmp    al,0x19
c00130b4:	77 35                	ja     c00130eb <File::write(unsigned long long, void*, int*)+0x49>
c00130b6:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c00130bd:	85 c0                	test   eax,eax
c00130bf:	74 2a                	je     c00130eb <File::write(unsigned long long, void*, int*)+0x49>
c00130c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130c7:	85 c0                	test   eax,eax
c00130c9:	74 20                	je     c00130eb <File::write(unsigned long long, void*, int*)+0x49>
c00130cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130cf:	74 21                	je     c00130f2 <File::write(unsigned long long, void*, int*)+0x50>
c00130d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130d7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130e5:	5b                   	pop    ebx
c00130e6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130e9:	ff e0                	jmp    eax
c00130eb:	b8 0b 00 00 00       	mov    eax,0xb
c00130f0:	eb 05                	jmp    c00130f7 <File::write(unsigned long long, void*, int*)+0x55>
c00130f2:	b8 05 00 00 00       	mov    eax,0x5
c00130f7:	5b                   	pop    ebx
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Directory::read(unsigned long long, void*, int*)>:
c00130fa:	53                   	push   ebx
c00130fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013103:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001310a:	3c 19                	cmp    al,0x19
c001310c:	77 35                	ja     c0013143 <Directory::read(unsigned long long, void*, int*)+0x49>
c001310e:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0013115:	85 c0                	test   eax,eax
c0013117:	74 2a                	je     c0013143 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013119:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001311f:	85 c0                	test   eax,eax
c0013121:	74 20                	je     c0013143 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013123:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013127:	74 21                	je     c001314a <Directory::read(unsigned long long, void*, int*)+0x50>
c0013129:	8b 08                	mov    ecx,DWORD PTR [eax]
c001312b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001312f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013135:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013139:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001313d:	5b                   	pop    ebx
c001313e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013141:	ff e0                	jmp    eax
c0013143:	b8 0b 00 00 00       	mov    eax,0xb
c0013148:	eb 05                	jmp    c001314f <Directory::read(unsigned long long, void*, int*)+0x55>
c001314a:	b8 05 00 00 00       	mov    eax,0x5
c001314f:	5b                   	pop    ebx
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <Directory::write(unsigned long long, void*, int*)>:
c0013152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013156:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001315d:	b8 0b 00 00 00       	mov    eax,0xb
c0013162:	80 fa 19             	cmp    dl,0x19
c0013165:	77 18                	ja     c001317f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013167:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c001316e:	85 d2                	test   edx,edx
c0013170:	74 0d                	je     c001317f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013172:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013179:	19 c0                	sbb    eax,eax
c001317b:	83 e0 0a             	and    eax,0xa
c001317e:	40                   	inc    eax
c001317f:	c3                   	ret    

c0013180 <File::isAtty()>:
c0013180:	31 c0                	xor    eax,eax
c0013182:	c3                   	ret    
c0013183:	90                   	nop

c0013184 <Directory::isAtty()>:
c0013184:	31 c0                	xor    eax,eax
c0013186:	c3                   	ret    
c0013187:	90                   	nop

c0013188 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013188:	b8 0a 00 00 00       	mov    eax,0xa
c001318d:	c3                   	ret    

c001318e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001318e:	b8 0a 00 00 00       	mov    eax,0xa
c0013193:	c3                   	ret    

c0013194 <File::~File()>:
c0013194:	83 ec 0c             	sub    esp,0xc
c0013197:	ba 88 ac 02 c0       	mov    edx,0xc002ac88
c001319c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a0:	89 10                	mov    DWORD PTR [eax],edx
c00131a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a6:	83 ec 0c             	sub    esp,0xc
c00131a9:	50                   	push   eax
c00131aa:	e8 7b e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	90                   	nop
c00131b3:	83 c4 0c             	add    esp,0xc
c00131b6:	c3                   	ret    
c00131b7:	90                   	nop

c00131b8 <File::~File()>:
c00131b8:	83 ec 0c             	sub    esp,0xc
c00131bb:	83 ec 0c             	sub    esp,0xc
c00131be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c2:	e8 cd ff ff ff       	call   c0013194 <File::~File()>
c00131c7:	83 c4 10             	add    esp,0x10
c00131ca:	83 ec 08             	sub    esp,0x8
c00131cd:	68 14 01 00 00       	push   0x114
c00131d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d6:	e8 71 fc ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00131db:	83 c4 10             	add    esp,0x10
c00131de:	83 c4 0c             	add    esp,0xc
c00131e1:	c3                   	ret    

c00131e2 <Directory::~Directory()>:
c00131e2:	83 ec 0c             	sub    esp,0xc
c00131e5:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c00131ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ee:	89 10                	mov    DWORD PTR [eax],edx
c00131f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	50                   	push   eax
c00131f8:	e8 2d e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	90                   	nop
c0013201:	83 c4 0c             	add    esp,0xc
c0013204:	c3                   	ret    
c0013205:	90                   	nop

c0013206 <Directory::~Directory()>:
c0013206:	83 ec 0c             	sub    esp,0xc
c0013209:	83 ec 0c             	sub    esp,0xc
c001320c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013210:	e8 cd ff ff ff       	call   c00131e2 <Directory::~Directory()>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	83 ec 08             	sub    esp,0x8
c001321b:	68 14 01 00 00       	push   0x114
c0013220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013224:	e8 23 fc ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	83 c4 0c             	add    esp,0xc
c001322f:	c3                   	ret    

c0013230 <Filesystem::Filesystem()>:
c0013230:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c0013235:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013239:	89 10                	mov    DWORD PTR [eax],edx
c001323b:	8b 15 6c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e76c
c0013241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013245:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001324c:	a3 6c e7 02 c0       	mov    ds:0xc002e76c,eax
c0013251:	90                   	nop
c0013252:	c3                   	ret    
c0013253:	90                   	nop

c0013254 <Filesystem::~Filesystem()>:
c0013254:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c0013259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001325d:	89 10                	mov    DWORD PTR [eax],edx
c001325f:	90                   	nop
c0013260:	c3                   	ret    
c0013261:	90                   	nop

c0013262 <Filesystem::~Filesystem()>:
c0013262:	83 ec 0c             	sub    esp,0xc
c0013265:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013269:	e8 e6 ff ff ff       	call   c0013254 <Filesystem::~Filesystem()>
c001326e:	83 c4 04             	add    esp,0x4
c0013271:	83 ec 08             	sub    esp,0x8
c0013274:	6a 08                	push   0x8
c0013276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001327a:	e8 cd fb ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	83 c4 0c             	add    esp,0xc
c0013285:	c3                   	ret    

c0013286 <Fs::getcwd(Process*, char*, int)>:
c0013286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001328a:	31 c0                	xor    eax,eax
c001328c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001328f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013293:	7d 15                	jge    c00132aa <Fs::getcwd(Process*, char*, int)+0x24>
c0013295:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013299:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132a3:	84 c9                	test   cl,cl
c00132a5:	74 06                	je     c00132ad <Fs::getcwd(Process*, char*, int)+0x27>
c00132a7:	40                   	inc    eax
c00132a8:	eb e2                	jmp    c001328c <Fs::getcwd(Process*, char*, int)+0x6>
c00132aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132ad:	31 c0                	xor    eax,eax
c00132af:	c3                   	ret    

c00132b0 <Fs::initVFS()>:
c00132b0:	83 ec 18             	sub    esp,0x18
c00132b3:	6a 08                	push   0x8
c00132b5:	e8 86 c5 ff ff       	call   c000f840 <malloc>
c00132ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00132bd:	e8 a4 dc 00 00       	call   c0020f66 <FAT::FAT()>
c00132c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132c9:	e8 72 c5 ff ff       	call   c000f840 <malloc>
c00132ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00132d1:	e8 e8 ee 00 00       	call   c00221be <ISO9660::ISO9660()>
c00132d6:	83 c4 1c             	add    esp,0x1c
c00132d9:	c3                   	ret    

c00132da <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132da:	55                   	push   ebp
c00132db:	57                   	push   edi
c00132dc:	56                   	push   esi
c00132dd:	53                   	push   ebx
c00132de:	81 ec 10 04 00 00    	sub    esp,0x410
c00132e4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132eb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132f2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132f9:	68 00 04 00 00       	push   0x400
c00132fe:	6a 00                	push   0x0
c0013300:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013304:	56                   	push   esi
c0013305:	e8 6e d4 fe ff       	call   c0000778 <memset>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013311:	75 0b                	jne    c001331e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013313:	50                   	push   eax
c0013314:	50                   	push   eax
c0013315:	57                   	push   edi
c0013316:	56                   	push   esi
c0013317:	e8 18 d5 fe ff       	call   c0000834 <strcpy>
c001331c:	eb 41                	jmp    c001335f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001331e:	8a 07                	mov    al,BYTE PTR [edi]
c0013320:	3c 5c                	cmp    al,0x5c
c0013322:	74 04                	je     c0013328 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013324:	3c 2f                	cmp    al,0x2f
c0013326:	75 18                	jne    c0013340 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013328:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001332b:	3c 60                	cmp    al,0x60
c001332d:	7e 03                	jle    c0013332 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001332f:	83 e8 20             	sub    eax,0x20
c0013332:	88 04 24             	mov    BYTE PTR [esp],al
c0013335:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001333c:	50                   	push   eax
c001333d:	50                   	push   eax
c001333e:	eb 18                	jmp    c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013340:	50                   	push   eax
c0013341:	50                   	push   eax
c0013342:	55                   	push   ebp
c0013343:	56                   	push   esi
c0013344:	e8 eb d4 fe ff       	call   c0000834 <strcpy>
c0013349:	5a                   	pop    edx
c001334a:	59                   	pop    ecx
c001334b:	68 c1 c3 02 c0       	push   0xc002c3c1
c0013350:	56                   	push   esi
c0013351:	e8 1e d6 fe ff       	call   c0000974 <strcat>
c0013356:	5d                   	pop    ebp
c0013357:	58                   	pop    eax
c0013358:	57                   	push   edi
c0013359:	56                   	push   esi
c001335a:	e8 15 d6 fe ff       	call   c0000974 <strcat>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013365:	3c 60                	cmp    al,0x60
c0013367:	7e 03                	jle    c001336c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013369:	83 e8 20             	sub    eax,0x20
c001336c:	88 04 24             	mov    BYTE PTR [esp],al
c001336f:	88 03                	mov    BYTE PTR [ebx],al
c0013371:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013378:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001337e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013382:	bf 03 00 00 00       	mov    edi,0x3
c0013387:	b8 03 00 00 00       	mov    eax,0x3
c001338c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001338f:	84 d2                	test   dl,dl
c0013391:	0f 84 91 00 00 00    	je     c0013428 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013397:	8d 4f 01             	lea    ecx,[edi+0x1]
c001339a:	80 fa 5c             	cmp    dl,0x5c
c001339d:	74 05                	je     c00133a4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001339f:	80 fa 2f             	cmp    dl,0x2f
c00133a2:	75 12                	jne    c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133a4:	89 c5                	mov    ebp,eax
c00133a6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133ab:	74 09                	je     c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133ad:	40                   	inc    eax
c00133ae:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133b2:	89 cf                	mov    edi,ecx
c00133b4:	eb d6                	jmp    c001338c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133b6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133bb:	75 5b                	jne    c0013418 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133bd:	80 fa 2e             	cmp    dl,0x2e
c00133c0:	75 56                	jne    c0013418 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133c2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133c6:	74 19                	je     c00133e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133c8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133cd:	74 53                	je     c0013422 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133cf:	89 f9                	mov    ecx,edi
c00133d1:	41                   	inc    ecx
c00133d2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133d5:	80 fa 2f             	cmp    dl,0x2f
c00133d8:	74 f7                	je     c00133d1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133da:	80 fa 5c             	cmp    dl,0x5c
c00133dd:	74 f2                	je     c00133d1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133df:	eb d1                	jmp    c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133e1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133e6:	74 3a                	je     c0013422 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133e8:	83 f8 03             	cmp    eax,0x3
c00133eb:	74 c5                	je     c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ed:	41                   	inc    ecx
c00133ee:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133f1:	80 fa 2f             	cmp    dl,0x2f
c00133f4:	74 f7                	je     c00133ed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133f6:	80 fa 5c             	cmp    dl,0x5c
c00133f9:	74 f2                	je     c00133ed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133fb:	48                   	dec    eax
c00133fc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013400:	75 06                	jne    c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013402:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013406:	eb f3                	jmp    c00133fb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013408:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001340c:	74 07                	je     c0013415 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001340e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013412:	48                   	dec    eax
c0013413:	eb f3                	jmp    c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013415:	40                   	inc    eax
c0013416:	eb 9a                	jmp    c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013418:	80 fa 2f             	cmp    dl,0x2f
c001341b:	74 95                	je     c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001341d:	80 fa 5c             	cmp    dl,0x5c
c0013420:	74 90                	je     c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013422:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013425:	40                   	inc    eax
c0013426:	eb 8a                	jmp    c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013428:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	53                   	push   ebx
c0013430:	e8 5f d3 fe ff       	call   c0000794 <strlen>
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001343d:	75 26                	jne    c0013465 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001343f:	83 ec 0c             	sub    esp,0xc
c0013442:	53                   	push   ebx
c0013443:	e8 4c d3 fe ff       	call   c0000794 <strlen>
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013450:	74 26                	je     c0013478 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013452:	83 ec 0c             	sub    esp,0xc
c0013455:	53                   	push   ebx
c0013456:	e8 39 d3 fe ff       	call   c0000794 <strlen>
c001345b:	83 c4 10             	add    esp,0x10
c001345e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013463:	eb c7                	jmp    c001342c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013465:	83 ec 0c             	sub    esp,0xc
c0013468:	53                   	push   ebx
c0013469:	e8 26 d3 fe ff       	call   c0000794 <strlen>
c001346e:	83 c4 10             	add    esp,0x10
c0013471:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013476:	74 c7                	je     c001343f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013478:	81 c4 0c 04 00 00    	add    esp,0x40c
c001347e:	5b                   	pop    ebx
c001347f:	5e                   	pop    esi
c0013480:	5f                   	pop    edi
c0013481:	5d                   	pop    ebp
c0013482:	c3                   	ret    
c0013483:	90                   	nop

c0013484 <File::File(char const*, Process*)>:
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348b:	83 ec 08             	sub    esp,0x8
c001348e:	6a 00                	push   0x0
c0013490:	50                   	push   eax
c0013491:	e8 b2 e2 ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	ba 88 ac 02 c0       	mov    edx,0xc002ac88
c001349e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a2:	89 10                	mov    DWORD PTR [eax],edx
c00134a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134a8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b2:	83 c0 0d             	add    eax,0xd
c00134b5:	83 ec 04             	sub    esp,0x4
c00134b8:	52                   	push   edx
c00134b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134bd:	50                   	push   eax
c00134be:	e8 17 fe ff ff       	call   c00132da <Fs::standardiseFiles(char*, char const*, char const*)>
c00134c3:	83 c4 10             	add    esp,0x10
c00134c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ca:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134cd:	8d 50 bf             	lea    edx,[eax-0x41]
c00134d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134de:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134e2:	90                   	nop
c00134e3:	83 c4 0c             	add    esp,0xc
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <File::open(FileOpenMode)>:
c00134e8:	53                   	push   ebx
c00134e9:	b8 0b 00 00 00       	mov    eax,0xb
c00134ee:	83 ec 08             	sub    esp,0x8
c00134f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134f5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134fc:	80 fa 19             	cmp    dl,0x19
c00134ff:	77 40                	ja     c0013541 <File::open(FileOpenMode)+0x59>
c0013501:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0013508:	85 d2                	test   edx,edx
c001350a:	74 35                	je     c0013541 <File::open(FileOpenMode)+0x59>
c001350c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013512:	85 d2                	test   edx,edx
c0013514:	74 2b                	je     c0013541 <File::open(FileOpenMode)+0x59>
c0013516:	b8 06 00 00 00       	mov    eax,0x6
c001351b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001351f:	75 20                	jne    c0013541 <File::open(FileOpenMode)+0x59>
c0013521:	8b 02                	mov    eax,DWORD PTR [edx]
c0013523:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013529:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001352d:	51                   	push   ecx
c001352e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013531:	51                   	push   ecx
c0013532:	52                   	push   edx
c0013533:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013536:	83 c4 10             	add    esp,0x10
c0013539:	85 c0                	test   eax,eax
c001353b:	75 04                	jne    c0013541 <File::open(FileOpenMode)+0x59>
c001353d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013541:	83 c4 08             	add    esp,0x8
c0013544:	5b                   	pop    ebx
c0013545:	c3                   	ret    

c0013546 <File::close()>:
c0013546:	53                   	push   ebx
c0013547:	b8 0b 00 00 00       	mov    eax,0xb
c001354c:	83 ec 08             	sub    esp,0x8
c001354f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013553:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001355a:	80 fa 19             	cmp    dl,0x19
c001355d:	77 41                	ja     c00135a0 <File::close()+0x5a>
c001355f:	8b 1c 95 00 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1400]
c0013566:	85 db                	test   ebx,ebx
c0013568:	74 36                	je     c00135a0 <File::close()+0x5a>
c001356a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013571:	74 2d                	je     c00135a0 <File::close()+0x5a>
c0013573:	b8 05 00 00 00       	mov    eax,0x5
c0013578:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001357c:	74 22                	je     c00135a0 <File::close()+0x5a>
c001357e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013582:	8b 04 95 00 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1400]
c0013589:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001358f:	53                   	push   ebx
c0013590:	53                   	push   ebx
c0013591:	8b 10                	mov    edx,DWORD PTR [eax]
c0013593:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013599:	50                   	push   eax
c001359a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001359d:	83 c4 10             	add    esp,0x10
c00135a0:	83 c4 08             	add    esp,0x8
c00135a3:	5b                   	pop    ebx
c00135a4:	c3                   	ret    
c00135a5:	90                   	nop

c00135a6 <File::seek(unsigned long long)>:
c00135a6:	56                   	push   esi
c00135a7:	53                   	push   ebx
c00135a8:	b8 0b 00 00 00       	mov    eax,0xb
c00135ad:	51                   	push   ecx
c00135ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135b6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135c1:	80 fa 19             	cmp    dl,0x19
c00135c4:	77 31                	ja     c00135f7 <File::seek(unsigned long long)+0x51>
c00135c6:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c00135cd:	85 d2                	test   edx,edx
c00135cf:	74 26                	je     c00135f7 <File::seek(unsigned long long)+0x51>
c00135d1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135d7:	85 d2                	test   edx,edx
c00135d9:	74 1c                	je     c00135f7 <File::seek(unsigned long long)+0x51>
c00135db:	b8 05 00 00 00       	mov    eax,0x5
c00135e0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135e4:	74 11                	je     c00135f7 <File::seek(unsigned long long)+0x51>
c00135e6:	8b 02                	mov    eax,DWORD PTR [edx]
c00135e8:	53                   	push   ebx
c00135e9:	51                   	push   ecx
c00135ea:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135f0:	52                   	push   edx
c00135f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	5a                   	pop    edx
c00135f8:	5b                   	pop    ebx
c00135f9:	5e                   	pop    esi
c00135fa:	c3                   	ret    
c00135fb:	90                   	nop

c00135fc <File::tell(unsigned long long*)>:
c00135fc:	83 ec 0c             	sub    esp,0xc
c00135ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013608:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001360f:	80 fa 19             	cmp    dl,0x19
c0013612:	77 34                	ja     c0013648 <File::tell(unsigned long long*)+0x4c>
c0013614:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c001361b:	85 d2                	test   edx,edx
c001361d:	74 29                	je     c0013648 <File::tell(unsigned long long*)+0x4c>
c001361f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013625:	85 d2                	test   edx,edx
c0013627:	74 1f                	je     c0013648 <File::tell(unsigned long long*)+0x4c>
c0013629:	b8 05 00 00 00       	mov    eax,0x5
c001362e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013632:	74 14                	je     c0013648 <File::tell(unsigned long long*)+0x4c>
c0013634:	50                   	push   eax
c0013635:	8b 02                	mov    eax,DWORD PTR [edx]
c0013637:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001363b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013641:	52                   	push   edx
c0013642:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013645:	83 c4 10             	add    esp,0x10
c0013648:	83 c4 0c             	add    esp,0xc
c001364b:	c3                   	ret    

c001364c <File::rewind()>:
c001364c:	83 ec 10             	sub    esp,0x10
c001364f:	6a 00                	push   0x0
c0013651:	6a 00                	push   0x0
c0013653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013657:	e8 4a ff ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001365c:	83 c4 1c             	add    esp,0x1c
c001365f:	c3                   	ret    

c0013660 <File::unlink()>:
c0013660:	83 ec 0c             	sub    esp,0xc
c0013663:	b8 0b 00 00 00       	mov    eax,0xb
c0013668:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001366c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013673:	80 f9 19             	cmp    cl,0x19
c0013676:	77 2f                	ja     c00136a7 <File::unlink()+0x47>
c0013678:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001367f:	85 c9                	test   ecx,ecx
c0013681:	74 24                	je     c00136a7 <File::unlink()+0x47>
c0013683:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013689:	85 c9                	test   ecx,ecx
c001368b:	74 1a                	je     c00136a7 <File::unlink()+0x47>
c001368d:	b8 06 00 00 00       	mov    eax,0x6
c0013692:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013696:	75 0f                	jne    c00136a7 <File::unlink()+0x47>
c0013698:	83 c2 0d             	add    edx,0xd
c001369b:	50                   	push   eax
c001369c:	50                   	push   eax
c001369d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001369f:	52                   	push   edx
c00136a0:	51                   	push   ecx
c00136a1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136a4:	83 c4 10             	add    esp,0x10
c00136a7:	83 c4 0c             	add    esp,0xc
c00136aa:	c3                   	ret    
c00136ab:	90                   	nop

c00136ac <File::rename(char const*)>:
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	b8 0b 00 00 00       	mov    eax,0xb
c00136b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136bf:	80 f9 19             	cmp    cl,0x19
c00136c2:	77 32                	ja     c00136f6 <File::rename(char const*)+0x4a>
c00136c4:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c00136cb:	85 c9                	test   ecx,ecx
c00136cd:	74 27                	je     c00136f6 <File::rename(char const*)+0x4a>
c00136cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d5:	85 c9                	test   ecx,ecx
c00136d7:	74 1d                	je     c00136f6 <File::rename(char const*)+0x4a>
c00136d9:	b8 06 00 00 00       	mov    eax,0x6
c00136de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e2:	75 12                	jne    c00136f6 <File::rename(char const*)+0x4a>
c00136e4:	83 c2 0d             	add    edx,0xd
c00136e7:	50                   	push   eax
c00136e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136ee:	52                   	push   edx
c00136ef:	51                   	push   ecx
c00136f0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136f3:	83 c4 10             	add    esp,0x10
c00136f6:	83 c4 0c             	add    esp,0xc
c00136f9:	c3                   	ret    

c00136fa <File::chfatattr(unsigned char, unsigned char)>:
c00136fa:	57                   	push   edi
c00136fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013700:	56                   	push   esi
c0013701:	53                   	push   ebx
c0013702:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013706:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001370a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013711:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013715:	80 f9 19             	cmp    cl,0x19
c0013718:	77 37                	ja     c0013751 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001371a:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013721:	85 c9                	test   ecx,ecx
c0013723:	74 2c                	je     c0013751 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013725:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001372b:	85 c9                	test   ecx,ecx
c001372d:	74 22                	je     c0013751 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001372f:	b8 06 00 00 00       	mov    eax,0x6
c0013734:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013738:	75 17                	jne    c0013751 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001373a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001373c:	89 f0                	mov    eax,esi
c001373e:	83 c2 0d             	add    edx,0xd
c0013741:	0f b6 f0             	movzx  esi,al
c0013744:	0f b6 db             	movzx  ebx,bl
c0013747:	56                   	push   esi
c0013748:	53                   	push   ebx
c0013749:	52                   	push   edx
c001374a:	51                   	push   ecx
c001374b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001374e:	83 c4 10             	add    esp,0x10
c0013751:	5b                   	pop    ebx
c0013752:	5e                   	pop    esi
c0013753:	5f                   	pop    edi
c0013754:	c3                   	ret    
c0013755:	90                   	nop

c0013756 <File::exists()>:
c0013756:	83 ec 0c             	sub    esp,0xc
c0013759:	31 c0                	xor    eax,eax
c001375b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001375f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013766:	80 f9 19             	cmp    cl,0x19
c0013769:	77 24                	ja     c001378f <File::exists()+0x39>
c001376b:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013772:	85 c9                	test   ecx,ecx
c0013774:	74 19                	je     c001378f <File::exists()+0x39>
c0013776:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001377c:	85 c9                	test   ecx,ecx
c001377e:	74 0f                	je     c001378f <File::exists()+0x39>
c0013780:	83 c2 0d             	add    edx,0xd
c0013783:	50                   	push   eax
c0013784:	50                   	push   eax
c0013785:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013787:	52                   	push   edx
c0013788:	51                   	push   ecx
c0013789:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001378c:	83 c4 10             	add    esp,0x10
c001378f:	83 c4 0c             	add    esp,0xc
c0013792:	c3                   	ret    
c0013793:	90                   	nop

c0013794 <File::stat(unsigned long long*, bool*)>:
c0013794:	56                   	push   esi
c0013795:	53                   	push   ebx
c0013796:	50                   	push   eax
c0013797:	b8 0b 00 00 00       	mov    eax,0xb
c001379c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137af:	80 f9 19             	cmp    cl,0x19
c00137b2:	77 3d                	ja     c00137f1 <File::stat(unsigned long long*, bool*)+0x5d>
c00137b4:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c00137bb:	85 c9                	test   ecx,ecx
c00137bd:	74 32                	je     c00137f1 <File::stat(unsigned long long*, bool*)+0x5d>
c00137bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137c5:	85 c9                	test   ecx,ecx
c00137c7:	74 28                	je     c00137f1 <File::stat(unsigned long long*, bool*)+0x5d>
c00137c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137cf:	74 13                	je     c00137e4 <File::stat(unsigned long long*, bool*)+0x50>
c00137d1:	83 ec 04             	sub    esp,0x4
c00137d4:	56                   	push   esi
c00137d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137db:	51                   	push   ecx
c00137dc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137df:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137e2:	eb 0a                	jmp    c00137ee <File::stat(unsigned long long*, bool*)+0x5a>
c00137e4:	53                   	push   ebx
c00137e5:	83 c2 0d             	add    edx,0xd
c00137e8:	56                   	push   esi
c00137e9:	52                   	push   edx
c00137ea:	51                   	push   ecx
c00137eb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137ee:	83 c4 10             	add    esp,0x10
c00137f1:	5a                   	pop    edx
c00137f2:	5b                   	pop    ebx
c00137f3:	5e                   	pop    esi
c00137f4:	c3                   	ret    

c00137f5 <Fs::setcwd(Process*, char*)>:
c00137f5:	55                   	push   ebp
c00137f6:	57                   	push   edi
c00137f7:	56                   	push   esi
c00137f8:	53                   	push   ebx
c00137f9:	81 ec 20 02 00 00    	sub    esp,0x220
c00137ff:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013806:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001380c:	57                   	push   edi
c001380d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013814:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013818:	56                   	push   esi
c0013819:	e8 bc fa ff ff       	call   c00132da <Fs::standardiseFiles(char*, char const*, char const*)>
c001381e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013821:	e8 6e cf fe ff       	call   c0000794 <strlen>
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	83 f8 02             	cmp    eax,0x2
c001382c:	77 17                	ja     c0013845 <Fs::setcwd(Process*, char*)+0x50>
c001382e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013833:	83 e8 41             	sub    eax,0x41
c0013836:	83 f8 19             	cmp    eax,0x19
c0013839:	76 24                	jbe    c001385f <Fs::setcwd(Process*, char*)+0x6a>
c001383b:	b8 03 00 00 00       	mov    eax,0x3
c0013840:	e9 e0 00 00 00       	jmp    c0013925 <Fs::setcwd(Process*, char*)+0x130>
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	56                   	push   esi
c0013849:	e8 46 cf fe ff       	call   c0000794 <strlen>
c001384e:	83 c4 10             	add    esp,0x10
c0013851:	83 f8 03             	cmp    eax,0x3
c0013854:	75 34                	jne    c001388a <Fs::setcwd(Process*, char*)+0x95>
c0013856:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001385b:	75 2d                	jne    c001388a <Fs::setcwd(Process*, char*)+0x95>
c001385d:	eb cf                	jmp    c001382e <Fs::setcwd(Process*, char*)+0x39>
c001385f:	8b 14 85 00 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1400]
c0013866:	b8 05 00 00 00       	mov    eax,0x5
c001386b:	85 d2                	test   edx,edx
c001386d:	0f 84 b2 00 00 00    	je     c0013925 <Fs::setcwd(Process*, char*)+0x130>
c0013873:	b8 06 00 00 00       	mov    eax,0x6
c0013878:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001387f:	0f 85 92 00 00 00    	jne    c0013917 <Fs::setcwd(Process*, char*)+0x122>
c0013885:	e9 9b 00 00 00       	jmp    c0013925 <Fs::setcwd(Process*, char*)+0x130>
c001388a:	83 ec 0c             	sub    esp,0xc
c001388d:	68 14 01 00 00       	push   0x114
c0013892:	e8 a9 bf ff ff       	call   c000f840 <malloc>
c0013897:	83 c4 0c             	add    esp,0xc
c001389a:	89 c3                	mov    ebx,eax
c001389c:	55                   	push   ebp
c001389d:	56                   	push   esi
c001389e:	50                   	push   eax
c001389f:	e8 e0 fb ff ff       	call   c0013484 <File::File(char const*, Process*)>
c00138a4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138a9:	83 c4 0c             	add    esp,0xc
c00138ac:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138b0:	50                   	push   eax
c00138b1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138b5:	50                   	push   eax
c00138b6:	53                   	push   ebx
c00138b7:	e8 d8 fe ff ff       	call   c0013794 <File::stat(unsigned long long*, bool*)>
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	83 f8 02             	cmp    eax,0x2
c00138c2:	74 04                	je     c00138c8 <Fs::setcwd(Process*, char*)+0xd3>
c00138c4:	85 c0                	test   eax,eax
c00138c6:	74 1c                	je     c00138e4 <Fs::setcwd(Process*, char*)+0xef>
c00138c8:	b8 01 00 00 00       	mov    eax,0x1
c00138cd:	85 db                	test   ebx,ebx
c00138cf:	74 54                	je     c0013925 <Fs::setcwd(Process*, char*)+0x130>
c00138d1:	83 ec 0c             	sub    esp,0xc
c00138d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138d6:	53                   	push   ebx
c00138d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	b8 01 00 00 00       	mov    eax,0x1
c00138e2:	eb 41                	jmp    c0013925 <Fs::setcwd(Process*, char*)+0x130>
c00138e4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138e9:	75 1c                	jne    c0013907 <Fs::setcwd(Process*, char*)+0x112>
c00138eb:	b8 02 00 00 00       	mov    eax,0x2
c00138f0:	85 db                	test   ebx,ebx
c00138f2:	74 31                	je     c0013925 <Fs::setcwd(Process*, char*)+0x130>
c00138f4:	83 ec 0c             	sub    esp,0xc
c00138f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f9:	53                   	push   ebx
c00138fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138fd:	83 c4 10             	add    esp,0x10
c0013900:	b8 02 00 00 00       	mov    eax,0x2
c0013905:	eb 1e                	jmp    c0013925 <Fs::setcwd(Process*, char*)+0x130>
c0013907:	85 db                	test   ebx,ebx
c0013909:	74 0c                	je     c0013917 <Fs::setcwd(Process*, char*)+0x122>
c001390b:	83 ec 0c             	sub    esp,0xc
c001390e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013910:	53                   	push   ebx
c0013911:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	50                   	push   eax
c0013918:	50                   	push   eax
c0013919:	56                   	push   esi
c001391a:	57                   	push   edi
c001391b:	e8 14 cf fe ff       	call   c0000834 <strcpy>
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	31 c0                	xor    eax,eax
c0013925:	81 c4 1c 02 00 00    	add    esp,0x21c
c001392b:	5b                   	pop    ebx
c001392c:	5e                   	pop    esi
c001392d:	5f                   	pop    edi
c001392e:	5d                   	pop    ebp
c001392f:	c3                   	ret    

c0013930 <Directory::Directory(char const*, Process*)>:
c0013930:	83 ec 0c             	sub    esp,0xc
c0013933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013937:	83 ec 08             	sub    esp,0x8
c001393a:	6a 00                	push   0x0
c001393c:	50                   	push   eax
c001393d:	e8 06 de ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c001394a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394e:	89 10                	mov    DWORD PTR [eax],edx
c0013950:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013954:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001395a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395e:	83 c0 0d             	add    eax,0xd
c0013961:	83 ec 04             	sub    esp,0x4
c0013964:	52                   	push   edx
c0013965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013969:	50                   	push   eax
c001396a:	e8 6b f9 ff ff       	call   c00132da <Fs::standardiseFiles(char*, char const*, char const*)>
c001396f:	83 c4 10             	add    esp,0x10
c0013972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013976:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013979:	8d 50 bf             	lea    edx,[eax-0x41]
c001397c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013980:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001398e:	90                   	nop
c001398f:	83 c4 0c             	add    esp,0xc
c0013992:	c3                   	ret    
c0013993:	90                   	nop

c0013994 <Directory::open()>:
c0013994:	53                   	push   ebx
c0013995:	b8 0b 00 00 00       	mov    eax,0xb
c001399a:	83 ec 08             	sub    esp,0x8
c001399d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139a1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139a8:	80 fa 19             	cmp    dl,0x19
c00139ab:	77 3d                	ja     c00139ea <Directory::open()+0x56>
c00139ad:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c00139b4:	85 d2                	test   edx,edx
c00139b6:	74 32                	je     c00139ea <Directory::open()+0x56>
c00139b8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139be:	85 d2                	test   edx,edx
c00139c0:	74 28                	je     c00139ea <Directory::open()+0x56>
c00139c2:	b8 06 00 00 00       	mov    eax,0x6
c00139c7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139cb:	75 1d                	jne    c00139ea <Directory::open()+0x56>
c00139cd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139d3:	50                   	push   eax
c00139d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00139d6:	51                   	push   ecx
c00139d7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139da:	51                   	push   ecx
c00139db:	52                   	push   edx
c00139dc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139df:	83 c4 10             	add    esp,0x10
c00139e2:	85 c0                	test   eax,eax
c00139e4:	75 04                	jne    c00139ea <Directory::open()+0x56>
c00139e6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139ea:	83 c4 08             	add    esp,0x8
c00139ed:	5b                   	pop    ebx
c00139ee:	c3                   	ret    
c00139ef:	90                   	nop

c00139f0 <Directory::close()>:
c00139f0:	53                   	push   ebx
c00139f1:	b8 0b 00 00 00       	mov    eax,0xb
c00139f6:	83 ec 08             	sub    esp,0x8
c00139f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139fd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a04:	80 fa 19             	cmp    dl,0x19
c0013a07:	77 41                	ja     c0013a4a <Directory::close()+0x5a>
c0013a09:	8b 1c 95 00 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1400]
c0013a10:	85 db                	test   ebx,ebx
c0013a12:	74 36                	je     c0013a4a <Directory::close()+0x5a>
c0013a14:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a1b:	74 2d                	je     c0013a4a <Directory::close()+0x5a>
c0013a1d:	b8 05 00 00 00       	mov    eax,0x5
c0013a22:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a26:	74 22                	je     c0013a4a <Directory::close()+0x5a>
c0013a28:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a2c:	8b 04 95 00 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1400]
c0013a33:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a39:	53                   	push   ebx
c0013a3a:	53                   	push   ebx
c0013a3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a3d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a43:	50                   	push   eax
c0013a44:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a47:	83 c4 10             	add    esp,0x10
c0013a4a:	83 c4 08             	add    esp,0x8
c0013a4d:	5b                   	pop    ebx
c0013a4e:	c3                   	ret    
c0013a4f:	90                   	nop

c0013a50 <Directory::unlink()>:
c0013a50:	83 ec 0c             	sub    esp,0xc
c0013a53:	b8 0b 00 00 00       	mov    eax,0xb
c0013a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a63:	80 f9 19             	cmp    cl,0x19
c0013a66:	77 2f                	ja     c0013a97 <Directory::unlink()+0x47>
c0013a68:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013a6f:	85 c9                	test   ecx,ecx
c0013a71:	74 24                	je     c0013a97 <Directory::unlink()+0x47>
c0013a73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a79:	85 c9                	test   ecx,ecx
c0013a7b:	74 1a                	je     c0013a97 <Directory::unlink()+0x47>
c0013a7d:	b8 06 00 00 00       	mov    eax,0x6
c0013a82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a86:	75 0f                	jne    c0013a97 <Directory::unlink()+0x47>
c0013a88:	83 c2 0d             	add    edx,0xd
c0013a8b:	50                   	push   eax
c0013a8c:	50                   	push   eax
c0013a8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a8f:	52                   	push   edx
c0013a90:	51                   	push   ecx
c0013a91:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a94:	83 c4 10             	add    esp,0x10
c0013a97:	83 c4 0c             	add    esp,0xc
c0013a9a:	c3                   	ret    
c0013a9b:	90                   	nop

c0013a9c <Directory::rename(char const*)>:
c0013a9c:	83 ec 0c             	sub    esp,0xc
c0013a9f:	b8 0b 00 00 00       	mov    eax,0xb
c0013aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aaf:	80 f9 19             	cmp    cl,0x19
c0013ab2:	77 32                	ja     c0013ae6 <Directory::rename(char const*)+0x4a>
c0013ab4:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013abb:	85 c9                	test   ecx,ecx
c0013abd:	74 27                	je     c0013ae6 <Directory::rename(char const*)+0x4a>
c0013abf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ac5:	85 c9                	test   ecx,ecx
c0013ac7:	74 1d                	je     c0013ae6 <Directory::rename(char const*)+0x4a>
c0013ac9:	b8 06 00 00 00       	mov    eax,0x6
c0013ace:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ad2:	75 12                	jne    c0013ae6 <Directory::rename(char const*)+0x4a>
c0013ad4:	83 c2 0d             	add    edx,0xd
c0013ad7:	50                   	push   eax
c0013ad8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ada:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ade:	52                   	push   edx
c0013adf:	51                   	push   ecx
c0013ae0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	83 c4 0c             	add    esp,0xc
c0013ae9:	c3                   	ret    

c0013aea <Directory::exists()>:
c0013aea:	83 ec 0c             	sub    esp,0xc
c0013aed:	31 c0                	xor    eax,eax
c0013aef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013afa:	80 f9 19             	cmp    cl,0x19
c0013afd:	77 24                	ja     c0013b23 <Directory::exists()+0x39>
c0013aff:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013b06:	85 c9                	test   ecx,ecx
c0013b08:	74 19                	je     c0013b23 <Directory::exists()+0x39>
c0013b0a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b10:	85 c9                	test   ecx,ecx
c0013b12:	74 0f                	je     c0013b23 <Directory::exists()+0x39>
c0013b14:	83 c2 0d             	add    edx,0xd
c0013b17:	50                   	push   eax
c0013b18:	50                   	push   eax
c0013b19:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b1b:	52                   	push   edx
c0013b1c:	51                   	push   ecx
c0013b1d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b20:	83 c4 10             	add    esp,0x10
c0013b23:	83 c4 0c             	add    esp,0xc
c0013b26:	c3                   	ret    
c0013b27:	90                   	nop

c0013b28 <Directory::read(dirent*)>:
c0013b28:	83 ec 1c             	sub    esp,0x1c
c0013b2b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b30:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b34:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b3b:	80 fa 19             	cmp    dl,0x19
c0013b3e:	77 30                	ja     c0013b70 <Directory::read(dirent*)+0x48>
c0013b40:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0013b47:	85 d2                	test   edx,edx
c0013b49:	74 25                	je     c0013b70 <Directory::read(dirent*)+0x48>
c0013b4b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b52:	74 1c                	je     c0013b70 <Directory::read(dirent*)+0x48>
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b59:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b5d:	52                   	push   edx
c0013b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b62:	6a 00                	push   0x0
c0013b64:	68 10 01 00 00       	push   0x110
c0013b69:	51                   	push   ecx
c0013b6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b6d:	83 c4 20             	add    esp,0x20
c0013b70:	83 c4 1c             	add    esp,0x1c
c0013b73:	c3                   	ret    

c0013b74 <Directory::create()>:
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	b8 0b 00 00 00       	mov    eax,0xb
c0013b7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b87:	80 f9 19             	cmp    cl,0x19
c0013b8a:	77 2f                	ja     c0013bbb <Directory::create()+0x47>
c0013b8c:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013b93:	85 c9                	test   ecx,ecx
c0013b95:	74 24                	je     c0013bbb <Directory::create()+0x47>
c0013b97:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b9d:	85 c9                	test   ecx,ecx
c0013b9f:	74 1a                	je     c0013bbb <Directory::create()+0x47>
c0013ba1:	b8 06 00 00 00       	mov    eax,0x6
c0013ba6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013baa:	75 0f                	jne    c0013bbb <Directory::create()+0x47>
c0013bac:	83 c2 0d             	add    edx,0xd
c0013baf:	50                   	push   eax
c0013bb0:	50                   	push   eax
c0013bb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bb3:	52                   	push   edx
c0013bb4:	51                   	push   ecx
c0013bb5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bb8:	83 c4 10             	add    esp,0x10
c0013bbb:	83 c4 0c             	add    esp,0xc
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bc0:	b8 0a 00 00 00       	mov    eax,0xa
c0013bc5:	c3                   	ret    

c0013bc6 <Bus::Bus(char const*)>:
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bcd:	83 ec 08             	sub    esp,0x8
c0013bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd4:	50                   	push   eax
c0013bd5:	e8 68 09 00 00       	call   c0014542 <Device::Device(char const*)>
c0013bda:	83 c4 10             	add    esp,0x10
c0013bdd:	ba c0 ac 02 c0       	mov    edx,0xc002acc0
c0013be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be6:	89 10                	mov    DWORD PTR [eax],edx
c0013be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bec:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bf6:	90                   	nop
c0013bf7:	83 c4 0c             	add    esp,0xc
c0013bfa:	c3                   	ret    
c0013bfb:	90                   	nop

c0013bfc <Bus::~Bus()>:
c0013bfc:	83 ec 0c             	sub    esp,0xc
c0013bff:	ba c0 ac 02 c0       	mov    edx,0xc002acc0
c0013c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c08:	89 10                	mov    DWORD PTR [eax],edx
c0013c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	50                   	push   eax
c0013c12:	e8 0d 06 00 00       	call   c0014224 <Device::~Device()>
c0013c17:	83 c4 10             	add    esp,0x10
c0013c1a:	90                   	nop
c0013c1b:	83 c4 0c             	add    esp,0xc
c0013c1e:	c3                   	ret    
c0013c1f:	90                   	nop

c0013c20 <Bus::~Bus()>:
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	83 ec 0c             	sub    esp,0xc
c0013c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c2a:	e8 cd ff ff ff       	call   c0013bfc <Bus::~Bus()>
c0013c2f:	83 c4 10             	add    esp,0x10
c0013c32:	83 ec 08             	sub    esp,0x8
c0013c35:	68 58 01 00 00       	push   0x158
c0013c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c3e:	e8 09 f2 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	83 c4 0c             	add    esp,0xc
c0013c49:	c3                   	ret    

c0013c4a <Buzzer::Buzzer(char const*)>:
c0013c4a:	83 ec 0c             	sub    esp,0xc
c0013c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c51:	83 ec 08             	sub    esp,0x8
c0013c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c58:	50                   	push   eax
c0013c59:	e8 e4 08 00 00       	call   c0014542 <Device::Device(char const*)>
c0013c5e:	83 c4 10             	add    esp,0x10
c0013c61:	ba ec ac 02 c0       	mov    edx,0xc002acec
c0013c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6a:	89 10                	mov    DWORD PTR [eax],edx
c0013c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c70:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c88:	90                   	nop
c0013c89:	83 c4 0c             	add    esp,0xc
c0013c8c:	c3                   	ret    
c0013c8d:	90                   	nop

c0013c8e <Buzzer::~Buzzer()>:
c0013c8e:	83 ec 0c             	sub    esp,0xc
c0013c91:	ba ec ac 02 c0       	mov    edx,0xc002acec
c0013c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9a:	89 10                	mov    DWORD PTR [eax],edx
c0013c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca0:	83 ec 0c             	sub    esp,0xc
c0013ca3:	50                   	push   eax
c0013ca4:	e8 7b 05 00 00       	call   c0014224 <Device::~Device()>
c0013ca9:	83 c4 10             	add    esp,0x10
c0013cac:	90                   	nop
c0013cad:	83 c4 0c             	add    esp,0xc
c0013cb0:	c3                   	ret    
c0013cb1:	90                   	nop

c0013cb2 <Buzzer::~Buzzer()>:
c0013cb2:	83 ec 0c             	sub    esp,0xc
c0013cb5:	83 ec 0c             	sub    esp,0xc
c0013cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cbc:	e8 cd ff ff ff       	call   c0013c8e <Buzzer::~Buzzer()>
c0013cc1:	83 c4 10             	add    esp,0x10
c0013cc4:	83 ec 08             	sub    esp,0x8
c0013cc7:	68 5c 01 00 00       	push   0x15c
c0013ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd0:	e8 77 f1 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	83 c4 0c             	add    esp,0xc
c0013cdb:	c3                   	ret    

c0013cdc <Buzzer::stop()>:
c0013cdc:	83 ec 14             	sub    esp,0x14
c0013cdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce3:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ce5:	6a 00                	push   0x0
c0013ce7:	50                   	push   eax
c0013ce8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ceb:	83 c4 1c             	add    esp,0x1c
c0013cee:	c3                   	ret    

c0013cef <beepThread(void*)>:
c0013cef:	53                   	push   ebx
c0013cf0:	83 ec 08             	sub    esp,0x8
c0013cf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cf7:	e8 f8 a0 00 00       	call   c001ddf4 <unlockScheduler()>
c0013cfc:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d01:	52                   	push   edx
c0013d02:	52                   	push   edx
c0013d03:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d09:	52                   	push   edx
c0013d0a:	50                   	push   eax
c0013d0b:	e8 32 a6 00 00       	call   c001e342 <nanoSleep(unsigned long long)>
c0013d10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d13:	e8 c4 ff ff ff       	call   c0013cdc <Buzzer::stop()>
c0013d18:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d20:	83 c4 18             	add    esp,0x18
c0013d23:	5b                   	pop    ebx
c0013d24:	e9 5f a5 00 00       	jmp    c001e288 <blockTask(TaskState)>
c0013d29:	90                   	nop

c0013d2a <Buzzer::beep(int, int, bool)>:
c0013d2a:	57                   	push   edi
c0013d2b:	56                   	push   esi
c0013d2c:	53                   	push   ebx
c0013d2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d31:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d39:	52                   	push   edx
c0013d3a:	52                   	push   edx
c0013d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d41:	56                   	push   esi
c0013d42:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d45:	83 c4 10             	add    esp,0x10
c0013d48:	89 f8                	mov    eax,edi
c0013d4a:	84 c0                	test   al,al
c0013d4c:	74 1f                	je     c0013d6d <Buzzer::beep(int, int, bool)+0x43>
c0013d4e:	50                   	push   eax
c0013d4f:	50                   	push   eax
c0013d50:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d56:	99                   	cdq    
c0013d57:	52                   	push   edx
c0013d58:	50                   	push   eax
c0013d59:	e8 e4 a5 00 00       	call   c001e342 <nanoSleep(unsigned long long)>
c0013d5e:	83 c4 10             	add    esp,0x10
c0013d61:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d65:	5b                   	pop    ebx
c0013d66:	5e                   	pop    esi
c0013d67:	5f                   	pop    edi
c0013d68:	e9 6f ff ff ff       	jmp    c0013cdc <Buzzer::stop()>
c0013d6d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d73:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0013d78:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d80:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d84:	c7 44 24 14 ef 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cef
c0013d8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d90:	5b                   	pop    ebx
c0013d91:	5e                   	pop    esi
c0013d92:	5f                   	pop    edi
c0013d93:	e9 8c a1 00 00       	jmp    c001df24 <Process::createThread(void (*)(void*), void*, int)>

c0013d98 <User::loadClockSettings(int)>:
c0013d98:	53                   	push   ebx
c0013d99:	83 ec 14             	sub    esp,0x14
c0013d9c:	68 14 01 00 00       	push   0x114
c0013da1:	e8 9a ba ff ff       	call   c000f840 <malloc>
c0013da6:	83 c4 0c             	add    esp,0xc
c0013da9:	89 c3                	mov    ebx,eax
c0013dab:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c0013db1:	68 14 ad 02 c0       	push   0xc002ad14
c0013db6:	50                   	push   eax
c0013db7:	e8 c8 f6 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c0013dbc:	58                   	pop    eax
c0013dbd:	5a                   	pop    edx
c0013dbe:	6a 01                	push   0x1
c0013dc0:	53                   	push   ebx
c0013dc1:	e8 22 f7 ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c0013dc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dc9:	e8 78 f7 ff ff       	call   c0013546 <File::close()>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	85 db                	test   ebx,ebx
c0013dd3:	74 0f                	je     c0013de4 <User::loadClockSettings(int)+0x4c>
c0013dd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013ddb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dde:	83 c4 08             	add    esp,0x8
c0013de1:	5b                   	pop    ebx
c0013de2:	ff e0                	jmp    eax
c0013de4:	83 c4 08             	add    esp,0x8
c0013de7:	5b                   	pop    ebx
c0013de8:	c3                   	ret    
c0013de9:	90                   	nop

c0013dea <Clock::Clock(char const*)>:
c0013dea:	83 ec 0c             	sub    esp,0xc
c0013ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df1:	83 ec 08             	sub    esp,0x8
c0013df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df8:	50                   	push   eax
c0013df9:	e8 44 07 00 00       	call   c0014542 <Device::Device(char const*)>
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	ba 3c ad 02 c0       	mov    edx,0xc002ad3c
c0013e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0a:	89 10                	mov    DWORD PTR [eax],edx
c0013e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e10:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e1a:	90                   	nop
c0013e1b:	83 c4 0c             	add    esp,0xc
c0013e1e:	c3                   	ret    
c0013e1f:	90                   	nop

c0013e20 <Clock::~Clock()>:
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	ba 3c ad 02 c0       	mov    edx,0xc002ad3c
c0013e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2c:	89 10                	mov    DWORD PTR [eax],edx
c0013e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	50                   	push   eax
c0013e36:	e8 e9 03 00 00       	call   c0014224 <Device::~Device()>
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	90                   	nop
c0013e3f:	83 c4 0c             	add    esp,0xc
c0013e42:	c3                   	ret    
c0013e43:	90                   	nop

c0013e44 <Clock::~Clock()>:
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	83 ec 0c             	sub    esp,0xc
c0013e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e4e:	e8 cd ff ff ff       	call   c0013e20 <Clock::~Clock()>
c0013e53:	83 c4 10             	add    esp,0x10
c0013e56:	83 ec 08             	sub    esp,0x8
c0013e59:	68 58 01 00 00       	push   0x158
c0013e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e62:	e8 e5 ef ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	83 c4 0c             	add    esp,0xc
c0013e6d:	c3                   	ret    

c0013e6e <Clock::timeInSecondsLocal()>:
c0013e6e:	53                   	push   ebx
c0013e6f:	83 ec 14             	sub    esp,0x14
c0013e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e76:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e78:	50                   	push   eax
c0013e79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e7c:	0f b6 0d 74 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e774
c0013e83:	03 0d 78 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e778
c0013e89:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e8f:	89 cb                	mov    ebx,ecx
c0013e91:	c1 fb 1f             	sar    ebx,0x1f
c0013e94:	01 c8                	add    eax,ecx
c0013e96:	11 da                	adc    edx,ebx
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	31 c9                	xor    ecx,ecx
c0013e9d:	80 3d 75 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e775,0x0
c0013ea4:	74 05                	je     c0013eab <Clock::timeInSecondsLocal()+0x3d>
c0013ea6:	b9 08 07 00 00       	mov    ecx,0x708
c0013eab:	31 db                	xor    ebx,ebx
c0013ead:	01 c8                	add    eax,ecx
c0013eaf:	11 da                	adc    edx,ebx
c0013eb1:	83 c4 08             	add    esp,0x8
c0013eb4:	5b                   	pop    ebx
c0013eb5:	c3                   	ret    

c0013eb6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013eb6:	57                   	push   edi
c0013eb7:	56                   	push   esi
c0013eb8:	53                   	push   ebx
c0013eb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ebd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ec1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ec3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ec7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013eca:	0f b6 05 74 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e774
c0013ed1:	03 05 78 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e778
c0013ed7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013edd:	99                   	cdq    
c0013ede:	29 c6                	sub    esi,eax
c0013ee0:	19 d7                	sbb    edi,edx
c0013ee2:	89 f0                	mov    eax,esi
c0013ee4:	89 fa                	mov    edx,edi
c0013ee6:	31 f6                	xor    esi,esi
c0013ee8:	80 3d 75 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e775,0x0
c0013eef:	74 05                	je     c0013ef6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ef1:	be 08 07 00 00       	mov    esi,0x708
c0013ef6:	31 ff                	xor    edi,edi
c0013ef8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013efc:	29 f0                	sub    eax,esi
c0013efe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f02:	19 fa                	sbb    edx,edi
c0013f04:	89 d8                	mov    eax,ebx
c0013f06:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f0a:	5b                   	pop    ebx
c0013f0b:	5e                   	pop    esi
c0013f0c:	5f                   	pop    edi
c0013f0d:	ff e0                	jmp    eax

c0013f0f <datetimeToSeconds(datetime_t)>:
c0013f0f:	55                   	push   ebp
c0013f10:	57                   	push   edi
c0013f11:	56                   	push   esi
c0013f12:	53                   	push   ebx
c0013f13:	83 ec 14             	sub    esp,0x14
c0013f16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f1a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f1e:	89 d3                	mov    ebx,edx
c0013f20:	0f b6 c6             	movzx  eax,dh
c0013f23:	c1 eb 10             	shr    ebx,0x10
c0013f26:	48                   	dec    eax
c0013f27:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f30:	0f b6 f5             	movzx  esi,ch
c0013f33:	89 cf                	mov    edi,ecx
c0013f35:	6b f6 3c             	imul   esi,esi,0x3c
c0013f38:	c1 ef 10             	shr    edi,0x10
c0013f3b:	0f b6 c9             	movzx  ecx,cl
c0013f3e:	89 f8                	mov    eax,edi
c0013f40:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f46:	0f b6 f8             	movzx  edi,al
c0013f49:	0f b6 d2             	movzx  edx,dl
c0013f4c:	01 fe                	add    esi,edi
c0013f4e:	01 f1                	add    ecx,esi
c0013f50:	0f b7 f3             	movzx  esi,bx
c0013f53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f57:	c1 f9 1f             	sar    ecx,0x1f
c0013f5a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f63:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f68:	8b 0c 8d 80 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5280]
c0013f6f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f73:	76 29                	jbe    c0013f9e <datetimeToSeconds(datetime_t)+0x8f>
c0013f75:	f6 c3 03             	test   bl,0x3
c0013f78:	75 24                	jne    c0013f9e <datetimeToSeconds(datetime_t)+0x8f>
c0013f7a:	31 d2                	xor    edx,edx
c0013f7c:	bf 64 00 00 00       	mov    edi,0x64
c0013f81:	89 d8                	mov    eax,ebx
c0013f83:	66 f7 f7             	div    di
c0013f86:	66 85 d2             	test   dx,dx
c0013f89:	75 12                	jne    c0013f9d <datetimeToSeconds(datetime_t)+0x8e>
c0013f8b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f91:	bf 90 01 00 00       	mov    edi,0x190
c0013f96:	99                   	cdq    
c0013f97:	f7 ff                	idiv   edi
c0013f99:	85 d2                	test   edx,edx
c0013f9b:	75 01                	jne    c0013f9e <datetimeToSeconds(datetime_t)+0x8f>
c0013f9d:	41                   	inc    ecx
c0013f9e:	66 83 fb 46          	cmp    bx,0x46
c0013fa2:	76 45                	jbe    c0013fe9 <datetimeToSeconds(datetime_t)+0xda>
c0013fa4:	bb 46 00 00 00       	mov    ebx,0x46
c0013fa9:	bf 64 00 00 00       	mov    edi,0x64
c0013fae:	bd 90 01 00 00       	mov    ebp,0x190
c0013fb3:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fb8:	f6 c3 03             	test   bl,0x3
c0013fbb:	75 23                	jne    c0013fe0 <datetimeToSeconds(datetime_t)+0xd1>
c0013fbd:	89 d8                	mov    eax,ebx
c0013fbf:	99                   	cdq    
c0013fc0:	f7 ff                	idiv   edi
c0013fc2:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fc7:	85 d2                	test   edx,edx
c0013fc9:	75 15                	jne    c0013fe0 <datetimeToSeconds(datetime_t)+0xd1>
c0013fcb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fd1:	99                   	cdq    
c0013fd2:	f7 fd                	idiv   ebp
c0013fd4:	83 fa 01             	cmp    edx,0x1
c0013fd7:	19 c0                	sbb    eax,eax
c0013fd9:	f7 d0                	not    eax
c0013fdb:	05 6e 01 00 00       	add    eax,0x16e
c0013fe0:	01 c1                	add    ecx,eax
c0013fe2:	43                   	inc    ebx
c0013fe3:	39 f3                	cmp    ebx,esi
c0013fe5:	7c cc                	jl     c0013fb3 <datetimeToSeconds(datetime_t)+0xa4>
c0013fe7:	eb 35                	jmp    c001401e <datetimeToSeconds(datetime_t)+0x10f>
c0013fe9:	74 33                	je     c001401e <datetimeToSeconds(datetime_t)+0x10f>
c0013feb:	b8 45 00 00 00       	mov    eax,0x45
c0013ff0:	89 c2                	mov    edx,eax
c0013ff2:	83 e2 03             	and    edx,0x3
c0013ff5:	39 f0                	cmp    eax,esi
c0013ff7:	7e 0f                	jle    c0014008 <datetimeToSeconds(datetime_t)+0xf9>
c0013ff9:	83 fa 01             	cmp    edx,0x1
c0013ffc:	19 d2                	sbb    edx,edx
c0013ffe:	48                   	dec    eax
c0013fff:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014006:	eb e8                	jmp    c0013ff0 <datetimeToSeconds(datetime_t)+0xe1>
c0014008:	b8 6d 01 00 00       	mov    eax,0x16d
c001400d:	85 d2                	test   edx,edx
c001400f:	75 0b                	jne    c001401c <datetimeToSeconds(datetime_t)+0x10d>
c0014011:	66 83 fb 01          	cmp    bx,0x1
c0014015:	19 c0                	sbb    eax,eax
c0014017:	05 6e 01 00 00       	add    eax,0x16e
c001401c:	29 c1                	sub    ecx,eax
c001401e:	b8 80 51 01 00       	mov    eax,0x15180
c0014023:	f7 e9                	imul   ecx
c0014025:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014029:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001402d:	83 c4 14             	add    esp,0x14
c0014030:	5b                   	pop    ebx
c0014031:	5e                   	pop    esi
c0014032:	5f                   	pop    edi
c0014033:	5d                   	pop    ebp
c0014034:	c3                   	ret    
c0014035:	90                   	nop

c0014036 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014036:	57                   	push   edi
c0014037:	56                   	push   esi
c0014038:	53                   	push   ebx
c0014039:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001403d:	8b 06                	mov    eax,DWORD PTR [esi]
c001403f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014042:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001404a:	e8 c0 fe ff ff       	call   c0013f0f <datetimeToSeconds(datetime_t)>
c001404f:	59                   	pop    ecx
c0014050:	0f b6 0d 74 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e774
c0014057:	5b                   	pop    ebx
c0014058:	03 0d 78 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e778
c001405e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014064:	89 cb                	mov    ebx,ecx
c0014066:	c1 fb 1f             	sar    ebx,0x1f
c0014069:	29 c8                	sub    eax,ecx
c001406b:	19 da                	sbb    edx,ebx
c001406d:	31 c9                	xor    ecx,ecx
c001406f:	80 3d 75 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e775,0x0
c0014076:	74 05                	je     c001407d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014078:	b9 08 07 00 00       	mov    ecx,0x708
c001407d:	31 db                	xor    ebx,ebx
c001407f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014083:	29 c8                	sub    eax,ecx
c0014085:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014089:	19 da                	sbb    edx,ebx
c001408b:	89 f8                	mov    eax,edi
c001408d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014091:	5b                   	pop    ebx
c0014092:	5e                   	pop    esi
c0014093:	5f                   	pop    edi
c0014094:	ff e0                	jmp    eax

c0014096 <secondsToDatetime(unsigned long long)>:
c0014096:	55                   	push   ebp
c0014097:	57                   	push   edi
c0014098:	56                   	push   esi
c0014099:	53                   	push   ebx
c001409a:	83 ec 1c             	sub    esp,0x1c
c001409d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140a5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140a9:	6a 00                	push   0x0
c00140ab:	68 80 51 01 00       	push   0x15180
c00140b0:	55                   	push   ebp
c00140b1:	57                   	push   edi
c00140b2:	e8 15 29 01 00       	call   c00269cc <__udivdi3>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140c4:	6a 00                	push   0x0
c00140c6:	68 80 51 01 00       	push   0x15180
c00140cb:	55                   	push   ebp
c00140cc:	57                   	push   edi
c00140cd:	bf 10 0e 00 00       	mov    edi,0xe10
c00140d2:	e8 f5 29 01 00       	call   c0026acc <__umoddi3>
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	99                   	cdq    
c00140db:	f7 ff                	idiv   edi
c00140dd:	bf 3c 00 00 00       	mov    edi,0x3c
c00140e2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140e5:	89 d0                	mov    eax,edx
c00140e7:	99                   	cdq    
c00140e8:	f7 ff                	idiv   edi
c00140ea:	85 db                	test   ebx,ebx
c00140ec:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140ef:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140f2:	79 11                	jns    c0014105 <secondsToDatetime(unsigned long long)+0x6f>
c00140f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140f8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140fe:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014103:	eb 07                	jmp    c001410c <secondsToDatetime(unsigned long long)+0x76>
c0014105:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001410a:	89 d8                	mov    eax,ebx
c001410c:	bf b4 05 00 00       	mov    edi,0x5b4
c0014111:	99                   	cdq    
c0014112:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014117:	f7 f9                	idiv   ecx
c0014119:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001411e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014122:	31 d2                	xor    edx,edx
c0014124:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001412c:	01 c3                	add    ebx,eax
c001412e:	89 d8                	mov    eax,ebx
c0014130:	f7 f1                	div    ecx
c0014132:	31 d2                	xor    edx,edx
c0014134:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014137:	89 d8                	mov    eax,ebx
c0014139:	f7 f7                	div    edi
c001413b:	31 d2                	xor    edx,edx
c001413d:	29 c1                	sub    ecx,eax
c001413f:	89 d8                	mov    eax,ebx
c0014141:	f7 f5                	div    ebp
c0014143:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014148:	29 c1                	sub    ecx,eax
c001414a:	31 d2                	xor    edx,edx
c001414c:	89 c8                	mov    eax,ecx
c001414e:	f7 f5                	div    ebp
c0014150:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014159:	31 d2                	xor    edx,edx
c001415b:	89 c8                	mov    eax,ecx
c001415d:	f7 f5                	div    ebp
c001415f:	31 d2                	xor    edx,edx
c0014161:	01 c3                	add    ebx,eax
c0014163:	89 c8                	mov    eax,ecx
c0014165:	f7 f7                	div    edi
c0014167:	bf 99 00 00 00       	mov    edi,0x99
c001416c:	29 c3                	sub    ebx,eax
c001416e:	31 d2                	xor    edx,edx
c0014170:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014178:	29 c3                	sub    ebx,eax
c001417a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001417d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014180:	bb 05 00 00 00       	mov    ebx,0x5
c0014185:	83 c1 02             	add    ecx,0x2
c0014188:	89 c8                	mov    eax,ecx
c001418a:	f7 f7                	div    edi
c001418c:	31 d2                	xor    edx,edx
c001418e:	89 c7                	mov    edi,eax
c0014190:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014196:	83 c0 02             	add    eax,0x2
c0014199:	f7 f3                	div    ebx
c001419b:	89 eb                	mov    ebx,ebp
c001419d:	29 c3                	sub    ebx,eax
c001419f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141a5:	88 1e                	mov    BYTE PTR [esi],bl
c00141a7:	19 c0                	sbb    eax,eax
c00141a9:	31 d2                	xor    edx,edx
c00141ab:	83 e0 0c             	and    eax,0xc
c00141ae:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141b2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141be:	83 f9 01             	cmp    ecx,0x1
c00141c1:	0f 96 c2             	setbe  dl
c00141c4:	41                   	inc    ecx
c00141c5:	01 d0                	add    eax,edx
c00141c7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141ca:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141ce:	83 c4 1c             	add    esp,0x1c
c00141d1:	89 f0                	mov    eax,esi
c00141d3:	5b                   	pop    ebx
c00141d4:	5e                   	pop    esi
c00141d5:	5f                   	pop    edi
c00141d6:	5d                   	pop    ebp
c00141d7:	c2 04 00             	ret    0x4

c00141da <Clock::timeInDatetimeLocal()>:
c00141da:	53                   	push   ebx
c00141db:	83 ec 14             	sub    esp,0x14
c00141de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141e6:	e8 83 fc ff ff       	call   c0013e6e <Clock::timeInSecondsLocal()>
c00141eb:	83 c4 0c             	add    esp,0xc
c00141ee:	52                   	push   edx
c00141ef:	50                   	push   eax
c00141f0:	53                   	push   ebx
c00141f1:	e8 a0 fe ff ff       	call   c0014096 <secondsToDatetime(unsigned long long)>
c00141f6:	89 d8                	mov    eax,ebx
c00141f8:	83 c4 14             	add    esp,0x14
c00141fb:	5b                   	pop    ebx
c00141fc:	c2 04 00             	ret    0x4
c00141ff:	90                   	nop

c0014200 <Device::hibernate()>:
c0014200:	c3                   	ret    
c0014201:	90                   	nop

c0014202 <Device::wake()>:
c0014202:	c3                   	ret    
c0014203:	90                   	nop

c0014204 <Device::detect()>:
c0014204:	c3                   	ret    
c0014205:	90                   	nop

c0014206 <Device::disableLegacy()>:
c0014206:	c3                   	ret    
c0014207:	90                   	nop

c0014208 <Device::powerSaving(PowerSavingLevel)>:
c0014208:	c3                   	ret    
c0014209:	90                   	nop

c001420a <DriverlessDevice::close(int, int, void*)>:
c001420a:	31 c0                	xor    eax,eax
c001420c:	c3                   	ret    
c001420d:	90                   	nop

c001420e <DriverlessDevice::detect()>:
c001420e:	c3                   	ret    
c001420f:	90                   	nop

c0014210 <DriverlessDevice::open(int, int, void*)>:
c0014210:	83 ec 18             	sub    esp,0x18
c0014213:	68 b0 ad 02 c0       	push   0xc002adb0
c0014218:	e8 b0 63 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c001421d:	83 c8 ff             	or     eax,0xffffffff
c0014220:	83 c4 1c             	add    esp,0x1c
c0014223:	c3                   	ret    

c0014224 <Device::~Device()>:
c0014224:	ba d8 ad 02 c0       	mov    edx,0xc002add8
c0014229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422d:	89 10                	mov    DWORD PTR [eax],edx
c001422f:	90                   	nop
c0014230:	c3                   	ret    
c0014231:	90                   	nop

c0014232 <Device::~Device()>:
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014239:	e8 e6 ff ff ff       	call   c0014224 <Device::~Device()>
c001423e:	83 c4 04             	add    esp,0x4
c0014241:	83 ec 08             	sub    esp,0x8
c0014244:	68 58 01 00 00       	push   0x158
c0014249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424d:	e8 fa eb ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	83 c4 0c             	add    esp,0xc
c0014258:	c3                   	ret    
c0014259:	90                   	nop

c001425a <Device::findAndLoadDriver()>:
c001425a:	c3                   	ret    
c001425b:	90                   	nop

c001425c <Device::preOpenPCI(PCIDeviceInfo)>:
c001425c:	57                   	push   edi
c001425d:	b9 09 00 00 00       	mov    ecx,0x9
c0014262:	56                   	push   esi
c0014263:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014267:	8d 74 24 10          	lea    esi,[esp+0x10]
c001426b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014275:	81 c7 18 01 00 00    	add    edi,0x118
c001427b:	fc                   	cld    
c001427c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001427e:	5e                   	pop    esi
c001427f:	5f                   	pop    edi
c0014280:	c3                   	ret    
c0014281:	90                   	nop

c0014282 <Device::preOpenACPI(void*, char*, char*)>:
c0014282:	56                   	push   esi
c0014283:	53                   	push   ebx
c0014284:	83 ec 08             	sub    esp,0x8
c0014287:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001428b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001428f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014299:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001429d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142a3:	6a 1e                	push   0x1e
c00142a5:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142af:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142b5:	50                   	push   eax
c00142b6:	e8 89 c4 fe ff       	call   c0000744 <memcpy>
c00142bb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142bf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142c3:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142cb:	83 c4 14             	add    esp,0x14
c00142ce:	5b                   	pop    ebx
c00142cf:	5e                   	pop    esi
c00142d0:	e9 6f c4 fe ff       	jmp    c0000744 <memcpy>
c00142d5:	90                   	nop

c00142d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142da:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142df:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142e6:	75 0b                	jne    c00142f3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00142ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142ee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142f1:	eb 1e                	jmp    c0014311 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142f3:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00142f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142fe:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014304:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014306:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001430a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001430e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014311:	ff e0                	jmp    eax
c0014313:	90                   	nop

c0014314 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014318:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001431d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014324:	75 0b                	jne    c0014331 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014326:	8b 00                	mov    eax,DWORD PTR [eax]
c0014328:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001432c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001432f:	eb 1e                	jmp    c001434f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014331:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0014336:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001433c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014342:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014344:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014348:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001434c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001434f:	ff e0                	jmp    eax
c0014351:	90                   	nop

c0014352 <Device::addChild(Device*)>:
c0014352:	53                   	push   ebx
c0014353:	83 ec 08             	sub    esp,0x8
c0014356:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001435a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001435e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014364:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001436a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001436c:	85 d2                	test   edx,edx
c001436e:	74 04                	je     c0014374 <Device::addChild(Device*)+0x22>
c0014370:	89 d3                	mov    ebx,edx
c0014372:	eb f6                	jmp    c001436a <Device::addChild(Device*)+0x18>
c0014374:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014377:	83 ec 0c             	sub    esp,0xc
c001437a:	6a 08                	push   0x8
c001437c:	e8 bf b4 ff ff       	call   c000f840 <malloc>
c0014381:	89 03                	mov    DWORD PTR [ebx],eax
c0014383:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014389:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014390:	83 c4 18             	add    esp,0x18
c0014393:	5b                   	pop    ebx
c0014394:	c3                   	ret    
c0014395:	90                   	nop

c0014396 <Device::removeAllChildren()>:
c0014396:	56                   	push   esi
c0014397:	53                   	push   ebx
c0014398:	52                   	push   edx
c0014399:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001439d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143a6:	74 17                	je     c00143bf <Device::removeAllChildren()+0x29>
c00143a8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143ab:	85 c0                	test   eax,eax
c00143ad:	74 0c                	je     c00143bb <Device::removeAllChildren()+0x25>
c00143af:	83 ec 0c             	sub    esp,0xc
c00143b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00143b4:	50                   	push   eax
c00143b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143bd:	eb e4                	jmp    c00143a3 <Device::removeAllChildren()+0xd>
c00143bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143cb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143d8:	58                   	pop    eax
c00143d9:	5b                   	pop    ebx
c00143da:	5e                   	pop    esi
c00143db:	c3                   	ret    

c00143dc <Device::hibernateAll()>:
c00143dc:	53                   	push   ebx
c00143dd:	83 ec 14             	sub    esp,0x14
c00143e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e6:	53                   	push   ebx
c00143e7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f0:	83 c4 10             	add    esp,0x10
c00143f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f6:	74 0f                	je     c0014407 <Device::hibernateAll()+0x2b>
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143fe:	e8 d9 ff ff ff       	call   c00143dc <Device::hibernateAll()>
c0014403:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014405:	eb e9                	jmp    c00143f0 <Device::hibernateAll()+0x14>
c0014407:	83 c4 08             	add    esp,0x8
c001440a:	5b                   	pop    ebx
c001440b:	c3                   	ret    

c001440c <Device::wakeAll()>:
c001440c:	53                   	push   ebx
c001440d:	83 ec 14             	sub    esp,0x14
c0014410:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014414:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014416:	53                   	push   ebx
c0014417:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001441a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014426:	74 0f                	je     c0014437 <Device::wakeAll()+0x2b>
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001442e:	e8 d9 ff ff ff       	call   c001440c <Device::wakeAll()>
c0014433:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014435:	eb e9                	jmp    c0014420 <Device::wakeAll()+0x14>
c0014437:	83 c4 08             	add    esp,0x8
c001443a:	5b                   	pop    ebx
c001443b:	c3                   	ret    

c001443c <Device::detectAll()>:
c001443c:	53                   	push   ebx
c001443d:	83 ec 14             	sub    esp,0x14
c0014440:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014444:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014446:	53                   	push   ebx
c0014447:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001444a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014450:	83 c4 10             	add    esp,0x10
c0014453:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014456:	74 0f                	je     c0014467 <Device::detectAll()+0x2b>
c0014458:	83 ec 0c             	sub    esp,0xc
c001445b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001445e:	e8 d9 ff ff ff       	call   c001443c <Device::detectAll()>
c0014463:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014465:	eb e9                	jmp    c0014450 <Device::detectAll()+0x14>
c0014467:	83 c4 08             	add    esp,0x8
c001446a:	5b                   	pop    ebx
c001446b:	c3                   	ret    

c001446c <Device::disableLegacyAll()>:
c001446c:	53                   	push   ebx
c001446d:	83 ec 14             	sub    esp,0x14
c0014470:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014474:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014476:	53                   	push   ebx
c0014477:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001447a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014480:	83 c4 10             	add    esp,0x10
c0014483:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014486:	74 0f                	je     c0014497 <Device::disableLegacyAll()+0x2b>
c0014488:	83 ec 0c             	sub    esp,0xc
c001448b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448e:	e8 d9 ff ff ff       	call   c001446c <Device::disableLegacyAll()>
c0014493:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014495:	eb e9                	jmp    c0014480 <Device::disableLegacyAll()+0x14>
c0014497:	83 c4 08             	add    esp,0x8
c001449a:	5b                   	pop    ebx
c001449b:	c3                   	ret    

c001449c <Device::loadDriversForAll()>:
c001449c:	53                   	push   ebx
c001449d:	83 ec 08             	sub    esp,0x8
c00144a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144a4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144aa:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144ac:	85 db                	test   ebx,ebx
c00144ae:	74 12                	je     c00144c2 <Device::loadDriversForAll()+0x26>
c00144b0:	83 ec 0c             	sub    esp,0xc
c00144b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144b6:	e8 e1 ff ff ff       	call   c001449c <Device::loadDriversForAll()>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	89 d8                	mov    eax,ebx
c00144c0:	eb e8                	jmp    c00144aa <Device::loadDriversForAll()+0xe>
c00144c2:	83 c4 08             	add    esp,0x8
c00144c5:	5b                   	pop    ebx
c00144c6:	c3                   	ret    
c00144c7:	90                   	nop

c00144c8 <Device::closeAll()>:
c00144c8:	53                   	push   ebx
c00144c9:	83 ec 08             	sub    esp,0x8
c00144cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d2:	6a 00                	push   0x0
c00144d4:	6a 00                	push   0x0
c00144d6:	6a 00                	push   0x0
c00144d8:	53                   	push   ebx
c00144d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144e8:	74 0f                	je     c00144f9 <Device::closeAll()+0x31>
c00144ea:	83 ec 0c             	sub    esp,0xc
c00144ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f0:	e8 d3 ff ff ff       	call   c00144c8 <Device::closeAll()>
c00144f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f7:	eb e9                	jmp    c00144e2 <Device::closeAll()+0x1a>
c00144f9:	83 c4 08             	add    esp,0x8
c00144fc:	5b                   	pop    ebx
c00144fd:	c3                   	ret    

c00144fe <Device::powerSavingAll(PowerSavingLevel)>:
c00144fe:	56                   	push   esi
c00144ff:	53                   	push   ebx
c0014500:	83 ec 0c             	sub    esp,0xc
c0014503:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014507:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001450b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001450d:	56                   	push   esi
c001450e:	53                   	push   ebx
c001450f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014512:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014518:	83 c4 10             	add    esp,0x10
c001451b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001451e:	74 0f                	je     c001452f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014520:	52                   	push   edx
c0014521:	52                   	push   edx
c0014522:	56                   	push   esi
c0014523:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014526:	e8 d3 ff ff ff       	call   c00144fe <Device::powerSavingAll(PowerSavingLevel)>
c001452b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001452d:	eb e9                	jmp    c0014518 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001452f:	58                   	pop    eax
c0014530:	5b                   	pop    ebx
c0014531:	5e                   	pop    esi
c0014532:	c3                   	ret    
c0014533:	90                   	nop

c0014534 <Device::setName(char const*)>:
c0014534:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001453c:	e9 f3 c2 fe ff       	jmp    c0000834 <strcpy>
c0014541:	90                   	nop

c0014542 <Device::Device(char const*)>:
c0014542:	83 ec 1c             	sub    esp,0x1c
c0014545:	ba d8 ad 02 c0       	mov    edx,0xc002add8
c001454a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454e:	89 10                	mov    DWORD PTR [eax],edx
c0014550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014554:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001455e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014562:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001456c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014570:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001457a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014588:	83 ec 08             	sub    esp,0x8
c001458b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001458f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014593:	e8 9c ff ff ff       	call   c0014534 <Device::setName(char const*)>
c0014598:	83 c4 10             	add    esp,0x10
c001459b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145a3:	83 ec 0c             	sub    esp,0xc
c00145a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145aa:	e8 91 b2 ff ff       	call   c000f840 <malloc>
c00145af:	83 c4 10             	add    esp,0x10
c00145b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014604:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001460e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014612:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014620:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001462a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014638:	90                   	nop
c0014639:	83 c4 1c             	add    esp,0x1c
c001463c:	c3                   	ret    
c001463d:	90                   	nop

c001463e <Device::getName()>:
c001463e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014642:	05 d0 00 00 00       	add    eax,0xd0
c0014647:	c3                   	ret    

c0014648 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014648:	83 ec 0c             	sub    esp,0xc
c001464b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464f:	83 ec 08             	sub    esp,0x8
c0014652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014656:	50                   	push   eax
c0014657:	e8 e6 fe ff ff       	call   c0014542 <Device::Device(char const*)>
c001465c:	83 c4 10             	add    esp,0x10
c001465f:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c0014664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014668:	89 10                	mov    DWORD PTR [eax],edx
c001466a:	90                   	nop
c001466b:	83 c4 0c             	add    esp,0xc
c001466e:	c3                   	ret    
c001466f:	90                   	nop

c0014670 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014670:	57                   	push   edi
c0014671:	56                   	push   esi
c0014672:	53                   	push   ebx
c0014673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014677:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001467b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001467f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014685:	75 0c                	jne    c0014693 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014687:	52                   	push   edx
c0014688:	52                   	push   edx
c0014689:	53                   	push   ebx
c001468a:	56                   	push   esi
c001468b:	e8 7a 42 01 00       	call   c002890a <LinkedList<Device>::addElement(Device*)>
c0014690:	83 c4 10             	add    esp,0x10
c0014693:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014699:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001469c:	74 12                	je     c00146b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001469e:	50                   	push   eax
c001469f:	57                   	push   edi
c00146a0:	56                   	push   esi
c00146a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146a4:	e8 c7 ff ff ff       	call   c0014670 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	eb e9                	jmp    c0014699 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146b0:	5b                   	pop    ebx
c00146b1:	5e                   	pop    esi
c00146b2:	5f                   	pop    edi
c00146b3:	c3                   	ret    

c00146b4 <getDevicesOfType(DeviceType)>:
c00146b4:	53                   	push   ebx
c00146b5:	83 ec 14             	sub    esp,0x14
c00146b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146bc:	53                   	push   ebx
c00146bd:	e8 24 43 01 00       	call   c00289e6 <LinkedList<Device>::LinkedList()>
c00146c2:	83 c4 0c             	add    esp,0xc
c00146c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146c9:	53                   	push   ebx
c00146ca:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c00146d0:	e8 9b ff ff ff       	call   c0014670 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146d5:	89 d8                	mov    eax,ebx
c00146d7:	83 c4 18             	add    esp,0x18
c00146da:	5b                   	pop    ebx
c00146db:	c2 04 00             	ret    0x4

c00146de <HardDiskController::HardDiskController(char const*)>:
c00146de:	83 ec 0c             	sub    esp,0xc
c00146e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e5:	83 ec 08             	sub    esp,0x8
c00146e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ec:	50                   	push   eax
c00146ed:	e8 50 fe ff ff       	call   c0014542 <Device::Device(char const*)>
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c00146fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fe:	89 10                	mov    DWORD PTR [eax],edx
c0014700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014704:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001470e:	90                   	nop
c001470f:	83 c4 0c             	add    esp,0xc
c0014712:	c3                   	ret    
c0014713:	90                   	nop

c0014714 <HardDiskController::~HardDiskController()>:
c0014714:	83 ec 0c             	sub    esp,0xc
c0014717:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c001471c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014720:	89 10                	mov    DWORD PTR [eax],edx
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	83 ec 0c             	sub    esp,0xc
c0014729:	50                   	push   eax
c001472a:	e8 f5 fa ff ff       	call   c0014224 <Device::~Device()>
c001472f:	83 c4 10             	add    esp,0x10
c0014732:	90                   	nop
c0014733:	83 c4 0c             	add    esp,0xc
c0014736:	c3                   	ret    
c0014737:	90                   	nop

c0014738 <HardDiskController::~HardDiskController()>:
c0014738:	83 ec 0c             	sub    esp,0xc
c001473b:	83 ec 0c             	sub    esp,0xc
c001473e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014742:	e8 cd ff ff ff       	call   c0014714 <HardDiskController::~HardDiskController()>
c0014747:	83 c4 10             	add    esp,0x10
c001474a:	83 ec 08             	sub    esp,0x8
c001474d:	68 58 01 00 00       	push   0x158
c0014752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014756:	e8 f1 e6 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c001475b:	83 c4 10             	add    esp,0x10
c001475e:	83 c4 0c             	add    esp,0xc
c0014761:	c3                   	ret    

c0014762 <PhysicalDisk::eject()>:
c0014762:	83 ec 18             	sub    esp,0x18
c0014765:	68 54 ae 02 c0       	push   0xc002ae54
c001476a:	e8 bd e7 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001476f:	83 c8 ff             	or     eax,0xffffffff
c0014772:	83 c4 1c             	add    esp,0x1c
c0014775:	c3                   	ret    

c0014776 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014776:	83 ec 0c             	sub    esp,0xc
c0014779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477d:	83 ec 08             	sub    esp,0x8
c0014780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014784:	50                   	push   eax
c0014785:	e8 b8 fd ff ff       	call   c0014542 <Device::Device(char const*)>
c001478a:	83 c4 10             	add    esp,0x10
c001478d:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c0014792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014796:	89 10                	mov    DWORD PTR [eax],edx
c0014798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147d8:	90                   	nop
c00147d9:	83 c4 0c             	add    esp,0xc
c00147dc:	c3                   	ret    
c00147dd:	90                   	nop

c00147de <PhysicalDisk::startCache()>:
c00147de:	56                   	push   esi
c00147df:	53                   	push   ebx
c00147e0:	83 ec 10             	sub    esp,0x10
c00147e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147e7:	6a 44                	push   0x44
c00147e9:	e8 52 b0 ff ff       	call   c000f840 <malloc>
c00147ee:	89 c6                	mov    esi,eax
c00147f0:	58                   	pop    eax
c00147f1:	5a                   	pop    edx
c00147f2:	53                   	push   ebx
c00147f3:	56                   	push   esi
c00147f4:	e8 29 27 00 00       	call   c0016f22 <VCache::VCache(PhysicalDisk*)>
c00147f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147ff:	83 c4 14             	add    esp,0x14
c0014802:	5b                   	pop    ebx
c0014803:	5e                   	pop    esi
c0014804:	c3                   	ret    
c0014805:	90                   	nop

c0014806 <PhysicalDisk::~PhysicalDisk()>:
c0014806:	83 ec 0c             	sub    esp,0xc
c0014809:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c001480e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014812:	89 10                	mov    DWORD PTR [eax],edx
c0014814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	50                   	push   eax
c001481c:	e8 03 fa ff ff       	call   c0014224 <Device::~Device()>
c0014821:	83 c4 10             	add    esp,0x10
c0014824:	90                   	nop
c0014825:	83 c4 0c             	add    esp,0xc
c0014828:	c3                   	ret    
c0014829:	90                   	nop

c001482a <PhysicalDisk::~PhysicalDisk()>:
c001482a:	83 ec 0c             	sub    esp,0xc
c001482d:	83 ec 0c             	sub    esp,0xc
c0014830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014834:	e8 cd ff ff ff       	call   c0014806 <PhysicalDisk::~PhysicalDisk()>
c0014839:	83 c4 10             	add    esp,0x10
c001483c:	83 ec 08             	sub    esp,0x8
c001483f:	68 6c 01 00 00       	push   0x16c
c0014844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014848:	e8 ff e5 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c001484d:	83 c4 10             	add    esp,0x10
c0014850:	83 c4 0c             	add    esp,0xc
c0014853:	c3                   	ret    

c0014854 <FPU::FPU(char const*)>:
c0014854:	83 ec 0c             	sub    esp,0xc
c0014857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485b:	83 ec 08             	sub    esp,0x8
c001485e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014862:	50                   	push   eax
c0014863:	e8 da fc ff ff       	call   c0014542 <Device::Device(char const*)>
c0014868:	83 c4 10             	add    esp,0x10
c001486b:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c0014870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014874:	89 10                	mov    DWORD PTR [eax],edx
c0014876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014884:	90                   	nop
c0014885:	83 c4 0c             	add    esp,0xc
c0014888:	c3                   	ret    
c0014889:	90                   	nop

c001488a <FPU::~FPU()>:
c001488a:	83 ec 0c             	sub    esp,0xc
c001488d:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c0014892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014896:	89 10                	mov    DWORD PTR [eax],edx
c0014898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489c:	83 ec 0c             	sub    esp,0xc
c001489f:	50                   	push   eax
c00148a0:	e8 7f f9 ff ff       	call   c0014224 <Device::~Device()>
c00148a5:	83 c4 10             	add    esp,0x10
c00148a8:	90                   	nop
c00148a9:	83 c4 0c             	add    esp,0xc
c00148ac:	c3                   	ret    
c00148ad:	90                   	nop

c00148ae <FPU::~FPU()>:
c00148ae:	83 ec 0c             	sub    esp,0xc
c00148b1:	83 ec 0c             	sub    esp,0xc
c00148b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b8:	e8 cd ff ff ff       	call   c001488a <FPU::~FPU()>
c00148bd:	83 c4 10             	add    esp,0x10
c00148c0:	83 ec 08             	sub    esp,0x8
c00148c3:	68 58 01 00 00       	push   0x158
c00148c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148cc:	e8 7b e5 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00148d1:	83 c4 10             	add    esp,0x10
c00148d4:	83 c4 0c             	add    esp,0xc
c00148d7:	c3                   	ret    

c00148d8 <setupFPU()>:
c00148d8:	53                   	push   ebx
c00148d9:	83 ec 08             	sub    esp,0x8
c00148dc:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c00148e2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148e9:	74 19                	je     c0014904 <setupFPU()+0x2c>
c00148eb:	83 ec 0c             	sub    esp,0xc
c00148ee:	68 58 01 00 00       	push   0x158
c00148f3:	e8 48 af ff ff       	call   c000f840 <malloc>
c00148f8:	89 c3                	mov    ebx,eax
c00148fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00148fd:	e8 56 0c 01 00       	call   c0025558 <AVX::AVX()>
c0014902:	eb 5b                	jmp    c001495f <setupFPU()+0x87>
c0014904:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001490a:	84 c0                	test   al,al
c001490c:	79 19                	jns    c0014927 <setupFPU()+0x4f>
c001490e:	83 ec 0c             	sub    esp,0xc
c0014911:	68 58 01 00 00       	push   0x158
c0014916:	e8 25 af ff ff       	call   c000f840 <malloc>
c001491b:	89 c3                	mov    ebx,eax
c001491d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014920:	e8 59 0d 01 00       	call   c002567e <SSE::SSE()>
c0014925:	eb 38                	jmp    c001495f <setupFPU()+0x87>
c0014927:	a8 20                	test   al,0x20
c0014929:	74 19                	je     c0014944 <setupFPU()+0x6c>
c001492b:	83 ec 0c             	sub    esp,0xc
c001492e:	68 58 01 00 00       	push   0x158
c0014933:	e8 08 af ff ff       	call   c000f840 <malloc>
c0014938:	89 c3                	mov    ebx,eax
c001493a:	89 04 24             	mov    DWORD PTR [esp],eax
c001493d:	e8 a6 0c 01 00       	call   c00255e8 <MMX::MMX()>
c0014942:	eb 1b                	jmp    c001495f <setupFPU()+0x87>
c0014944:	a8 10                	test   al,0x10
c0014946:	74 1c                	je     c0014964 <setupFPU()+0x8c>
c0014948:	83 ec 0c             	sub    esp,0xc
c001494b:	68 58 01 00 00       	push   0x158
c0014950:	e8 eb ae ff ff       	call   c000f840 <malloc>
c0014955:	89 c3                	mov    ebx,eax
c0014957:	89 04 24             	mov    DWORD PTR [esp],eax
c001495a:	e8 ad 0d 01 00       	call   c002570c <x87::x87()>
c001495f:	83 c4 10             	add    esp,0x10
c0014962:	eb 24                	jmp    c0014988 <setupFPU()+0xb0>
c0014964:	83 e0 ef             	and    eax,0xffffffef
c0014967:	83 ec 0c             	sub    esp,0xc
c001496a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014970:	68 b4 ae 02 c0       	push   0xc002aeb4
c0014975:	e8 b2 e5 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001497a:	0f 20 c0             	mov    eax,cr0
c001497d:	83 c8 04             	or     eax,0x4
c0014980:	0f 22 c0             	mov    cr0,eax
c0014983:	31 db                	xor    ebx,ebx
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	89 d8                	mov    eax,ebx
c001498a:	83 c4 08             	add    esp,0x8
c001498d:	5b                   	pop    ebx
c001498e:	c3                   	ret    
c001498f:	90                   	nop

c0014990 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014994:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014998:	c1 e0 04             	shl    eax,0x4
c001499b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001499f:	8d 50 10             	lea    edx,[eax+0x10]
c00149a2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149a8:	74 08                	je     c00149b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149aa:	83 c0 04             	add    eax,0x4
c00149ad:	39 d0                	cmp    eax,edx
c00149af:	75 f1                	jne    c00149a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149b1:	c3                   	ret    
c00149b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149bc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149c6:	eb e2                	jmp    c00149aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149c8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149c8:	57                   	push   edi
c00149c9:	31 c0                	xor    eax,eax
c00149cb:	56                   	push   esi
c00149cc:	53                   	push   ebx
c00149cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149d9:	89 da                	mov    edx,ebx
c00149db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149df:	c1 e2 04             	shl    edx,0x4
c00149e2:	01 ca                	add    edx,ecx
c00149e4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149ec:	74 16                	je     c0014a04 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149ee:	40                   	inc    eax
c00149ef:	83 f8 04             	cmp    eax,0x4
c00149f2:	75 f0                	jne    c00149e4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149f4:	c7 44 24 10 f8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aef8
c00149fc:	5b                   	pop    ebx
c00149fd:	5e                   	pop    esi
c00149fe:	5f                   	pop    edi
c00149ff:	e9 c9 5b 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>
c0014a04:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a07:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a0a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a10:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a16:	5b                   	pop    ebx
c0014a17:	5e                   	pop    esi
c0014a18:	5f                   	pop    edi
c0014a19:	c3                   	ret    

c0014a1a <doubleFault(regs*, void*)>:
c0014a1a:	55                   	push   ebp
c0014a1b:	89 e5                	mov    ebp,esp
c0014a1d:	83 ec 08             	sub    esp,0x8
c0014a20:	83 ec 0c             	sub    esp,0xc
c0014a23:	68 33 af 02 c0       	push   0xc002af33
c0014a28:	e8 a0 5b 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0014a2d:	83 c4 10             	add    esp,0x10
c0014a30:	90                   	nop
c0014a31:	c9                   	leave  
c0014a32:	c3                   	ret    
c0014a33:	90                   	nop

c0014a34 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a34:	56                   	push   esi
c0014a35:	53                   	push   ebx
c0014a36:	50                   	push   eax
c0014a37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a3b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a3f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a44:	75 35                	jne    c0014a7b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a46:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a49:	31 d2                	xor    edx,edx
c0014a4b:	89 c1                	mov    ecx,eax
c0014a4d:	c1 e1 04             	shl    ecx,0x4
c0014a50:	01 f1                	add    ecx,esi
c0014a52:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a5a:	74 3e                	je     c0014a9a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a5c:	42                   	inc    edx
c0014a5d:	83 fa 04             	cmp    edx,0x4
c0014a60:	75 f0                	jne    c0014a52 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	68 78 af 02 c0       	push   0xc002af78
c0014a6a:	e8 5e 5b 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0014a6f:	83 c4 10             	add    esp,0x10
c0014a72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a77:	5a                   	pop    edx
c0014a78:	5b                   	pop    ebx
c0014a79:	5e                   	pop    esi
c0014a7a:	c3                   	ret    
c0014a7b:	83 ec 0c             	sub    esp,0xc
c0014a7e:	56                   	push   esi
c0014a7f:	e8 ba fb ff ff       	call   c001463e <Device::getName()>
c0014a84:	83 c4 10             	add    esp,0x10
c0014a87:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a8a:	75 ba                	jne    c0014a46 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a8c:	83 fb 0f             	cmp    ebx,0xf
c0014a8f:	7f 29                	jg     c0014aba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a91:	0f b6 9b 40 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27c0]
c0014a98:	eb ac                	jmp    c0014a46 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a9a:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014aa1:	8d 04 86             	lea    eax,[esi+eax*4]
c0014aa4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014aaa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014aae:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ab4:	89 d8                	mov    eax,ebx
c0014ab6:	5a                   	pop    edx
c0014ab7:	5b                   	pop    ebx
c0014ab8:	5e                   	pop    esi
c0014ab9:	c3                   	ret    
c0014aba:	83 ec 0c             	sub    esp,0xc
c0014abd:	68 40 af 02 c0       	push   0xc002af40
c0014ac2:	e8 06 5b 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0014ac7:	83 c4 10             	add    esp,0x10
c0014aca:	e9 77 ff ff ff       	jmp    c0014a46 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014acf:	90                   	nop

c0014ad0 <InterruptController::clearAllHandlers(int, bool)>:
c0014ad0:	56                   	push   esi
c0014ad1:	53                   	push   ebx
c0014ad2:	52                   	push   edx
c0014ad3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ad7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014adb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ae0:	75 61                	jne    c0014b43 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ae2:	8d 46 20             	lea    eax,[esi+0x20]
c0014ae5:	c1 e6 04             	shl    esi,0x4
c0014ae8:	c1 e0 04             	shl    eax,0x4
c0014aeb:	01 de                	add    esi,ebx
c0014aed:	01 d8                	add    eax,ebx
c0014aef:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014af9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b03:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b0d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b17:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b21:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b2b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b35:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b3f:	58                   	pop    eax
c0014b40:	5b                   	pop    ebx
c0014b41:	5e                   	pop    esi
c0014b42:	c3                   	ret    
c0014b43:	83 ec 0c             	sub    esp,0xc
c0014b46:	53                   	push   ebx
c0014b47:	e8 f2 fa ff ff       	call   c001463e <Device::getName()>
c0014b4c:	83 c4 10             	add    esp,0x10
c0014b4f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b52:	75 8e                	jne    c0014ae2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b54:	83 fe 0f             	cmp    esi,0xf
c0014b57:	7f 09                	jg     c0014b62 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b59:	0f b6 b6 40 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27c0]
c0014b60:	eb 80                	jmp    c0014ae2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b62:	83 ec 0c             	sub    esp,0xc
c0014b65:	68 b4 af 02 c0       	push   0xc002afb4
c0014b6a:	e8 5e 5a 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0014b6f:	83 c4 10             	add    esp,0x10
c0014b72:	e9 6b ff ff ff       	jmp    c0014ae2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b77:	90                   	nop

c0014b78 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b78:	56                   	push   esi
c0014b79:	53                   	push   ebx
c0014b7a:	52                   	push   edx
c0014b7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b83:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b88:	75 3a                	jne    c0014bc4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b8e:	8d 50 20             	lea    edx,[eax+0x20]
c0014b91:	c1 e2 04             	shl    edx,0x4
c0014b94:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b97:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b9b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ba1:	74 0b                	je     c0014bae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ba3:	83 c0 04             	add    eax,0x4
c0014ba6:	39 d0                	cmp    eax,edx
c0014ba8:	75 f1                	jne    c0014b9b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014baa:	58                   	pop    eax
c0014bab:	5b                   	pop    ebx
c0014bac:	5e                   	pop    esi
c0014bad:	c3                   	ret    
c0014bae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bb8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bc2:	eb df                	jmp    c0014ba3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bc4:	83 ec 0c             	sub    esp,0xc
c0014bc7:	56                   	push   esi
c0014bc8:	e8 71 fa ff ff       	call   c001463e <Device::getName()>
c0014bcd:	83 c4 10             	add    esp,0x10
c0014bd0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bd3:	75 b5                	jne    c0014b8a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bd5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bda:	7f 11                	jg     c0014bed <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014be0:	0f b6 80 40 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27c0]
c0014be7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014beb:	eb 9d                	jmp    c0014b8a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	68 b4 af 02 c0       	push   0xc002afb4
c0014bf5:	e8 d3 59 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	eb 8b                	jmp    c0014b8a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bff <nmiHandler(regs*, void*)>:
c0014bff:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0014c04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c08:	e9 7f a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c0d <int_handler>:
c0014c0d:	55                   	push   ebp
c0014c0e:	57                   	push   edi
c0014c0f:	56                   	push   esi
c0014c10:	53                   	push   ebx
c0014c11:	83 ec 0c             	sub    esp,0xc
c0014c14:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c18:	80 3d 44 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031144,0x0
c0014c1f:	74 0b                	je     c0014c2c <int_handler+0x1f>
c0014c21:	fa                   	cli    
c0014c22:	f4                   	hlt    
c0014c23:	80 3d 44 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031144,0x0
c0014c2a:	75 f5                	jne    c0014c21 <int_handler+0x14>
c0014c2c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0014c31:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c3a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c40:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c43:	83 f8 17             	cmp    eax,0x17
c0014c46:	77 13                	ja     c0014c5b <int_handler+0x4e>
c0014c48:	83 ec 08             	sub    esp,0x8
c0014c4b:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c4d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c50:	0f b6 c0             	movzx  eax,al
c0014c53:	50                   	push   eax
c0014c54:	57                   	push   edi
c0014c55:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c58:	83 c4 10             	add    esp,0x10
c0014c5b:	83 c3 15             	add    ebx,0x15
c0014c5e:	c1 e3 04             	shl    ebx,0x4
c0014c61:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c65:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c6c:	31 db                	xor    ebx,ebx
c0014c6e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c72:	85 c0                	test   eax,eax
c0014c74:	74 13                	je     c0014c89 <int_handler+0x7c>
c0014c76:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c79:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c7d:	74 1c                	je     c0014c9b <int_handler+0x8e>
c0014c7f:	83 ec 08             	sub    esp,0x8
c0014c82:	52                   	push   edx
c0014c83:	56                   	push   esi
c0014c84:	ff d0                	call   eax
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	43                   	inc    ebx
c0014c8a:	83 fb 04             	cmp    ebx,0x4
c0014c8d:	75 df                	jne    c0014c6e <int_handler+0x61>
c0014c8f:	83 c4 0c             	add    esp,0xc
c0014c92:	31 c0                	xor    eax,eax
c0014c94:	5b                   	pop    ebx
c0014c95:	31 d2                	xor    edx,edx
c0014c97:	5e                   	pop    esi
c0014c98:	5f                   	pop    edi
c0014c99:	5d                   	pop    ebp
c0014c9a:	c3                   	ret    
c0014c9b:	83 ec 08             	sub    esp,0x8
c0014c9e:	52                   	push   edx
c0014c9f:	56                   	push   esi
c0014ca0:	ff d0                	call   eax
c0014ca2:	83 c4 10             	add    esp,0x10
c0014ca5:	83 c4 0c             	add    esp,0xc
c0014ca8:	5b                   	pop    ebx
c0014ca9:	5e                   	pop    esi
c0014caa:	5f                   	pop    edi
c0014cab:	5d                   	pop    ebp
c0014cac:	c3                   	ret    
c0014cad:	90                   	nop

c0014cae <InterruptController::InterruptController(char const*)>:
c0014cae:	83 ec 1c             	sub    esp,0x1c
c0014cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb5:	83 ec 08             	sub    esp,0x8
c0014cb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cbc:	50                   	push   eax
c0014cbd:	e8 80 f8 ff ff       	call   c0014542 <Device::Device(char const*)>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c0014cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cce:	89 10                	mov    DWORD PTR [eax],edx
c0014cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cde:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ce6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cee:	7f 5e                	jg     c0014d4e <InterruptController::InterruptController(char const*)+0xa0>
c0014cf0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cf8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014cfd:	7f 49                	jg     c0014d48 <InterruptController::InterruptController(char const*)+0x9a>
c0014cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d07:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d12:	01 ca                	add    edx,ecx
c0014d14:	83 c2 54             	add    edx,0x54
c0014d17:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d27:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d32:	01 ca                	add    edx,ecx
c0014d34:	81 c2 54 04 00 00    	add    edx,0x454
c0014d3a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d42:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d46:	eb b0                	jmp    c0014cf8 <InterruptController::InterruptController(char const*)+0x4a>
c0014d48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d4c:	eb 98                	jmp    c0014ce6 <InterruptController::InterruptController(char const*)+0x38>
c0014d4e:	90                   	nop
c0014d4f:	83 c4 1c             	add    esp,0x1c
c0014d52:	c3                   	ret    
c0014d53:	90                   	nop

c0014d54 <InterruptController::~InterruptController()>:
c0014d54:	83 ec 0c             	sub    esp,0xc
c0014d57:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c0014d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d60:	89 10                	mov    DWORD PTR [eax],edx
c0014d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d66:	83 ec 0c             	sub    esp,0xc
c0014d69:	50                   	push   eax
c0014d6a:	e8 b5 f4 ff ff       	call   c0014224 <Device::~Device()>
c0014d6f:	83 c4 10             	add    esp,0x10
c0014d72:	90                   	nop
c0014d73:	83 c4 0c             	add    esp,0xc
c0014d76:	c3                   	ret    
c0014d77:	90                   	nop

c0014d78 <InterruptController::~InterruptController()>:
c0014d78:	83 ec 0c             	sub    esp,0xc
c0014d7b:	83 ec 0c             	sub    esp,0xc
c0014d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d82:	e8 cd ff ff ff       	call   c0014d54 <InterruptController::~InterruptController()>
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	83 ec 08             	sub    esp,0x8
c0014d8d:	68 58 21 00 00       	push   0x2158
c0014d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d96:	e8 b1 e0 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0014d9b:	83 c4 10             	add    esp,0x10
c0014d9e:	83 c4 0c             	add    esp,0xc
c0014da1:	c3                   	ret    

c0014da2 <displayDebugInfo(regs*)>:
c0014da2:	55                   	push   ebp
c0014da3:	57                   	push   edi
c0014da4:	56                   	push   esi
c0014da5:	53                   	push   ebx
c0014da6:	83 ec 24             	sub    esp,0x24
c0014da9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014dad:	0f 20 c2             	mov    edx,cr0
c0014db0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014db4:	0f 20 d7             	mov    edi,cr2
c0014db7:	0f 20 de             	mov    esi,cr3
c0014dba:	0f 20 e5             	mov    ebp,cr4
c0014dbd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dc0:	68 ee af 02 c0       	push   0xc002afee
c0014dc5:	e8 62 e1 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014dca:	59                   	pop    ecx
c0014dcb:	58                   	pop    eax
c0014dcc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dcf:	68 f9 af 02 c0       	push   0xc002aff9
c0014dd4:	e8 53 e1 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014dd9:	58                   	pop    eax
c0014dda:	5a                   	pop    edx
c0014ddb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dde:	68 04 b0 02 c0       	push   0xc002b004
c0014de3:	e8 44 e1 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014de8:	59                   	pop    ecx
c0014de9:	58                   	pop    eax
c0014dea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ded:	68 0f b0 02 c0       	push   0xc002b00f
c0014df2:	e8 35 e1 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014df7:	58                   	pop    eax
c0014df8:	5a                   	pop    edx
c0014df9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014dfc:	68 1a b0 02 c0       	push   0xc002b01a
c0014e01:	e8 26 e1 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e06:	59                   	pop    ecx
c0014e07:	58                   	pop    eax
c0014e08:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e0b:	68 25 b0 02 c0       	push   0xc002b025
c0014e10:	e8 17 e1 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e15:	58                   	pop    eax
c0014e16:	5a                   	pop    edx
c0014e17:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e1a:	68 30 b0 02 c0       	push   0xc002b030
c0014e1f:	e8 08 e1 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e24:	59                   	pop    ecx
c0014e25:	58                   	pop    eax
c0014e26:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e29:	68 3b b0 02 c0       	push   0xc002b03b
c0014e2e:	e8 f9 e0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e33:	58                   	pop    eax
c0014e34:	5a                   	pop    edx
c0014e35:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e38:	68 46 b0 02 c0       	push   0xc002b046
c0014e3d:	e8 ea e0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e42:	59                   	pop    ecx
c0014e43:	58                   	pop    eax
c0014e44:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e47:	68 55 b0 02 c0       	push   0xc002b055
c0014e4c:	e8 db e0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e51:	58                   	pop    eax
c0014e52:	5a                   	pop    edx
c0014e53:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e56:	68 60 b0 02 c0       	push   0xc002b060
c0014e5b:	e8 cc e0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e60:	59                   	pop    ecx
c0014e61:	58                   	pop    eax
c0014e62:	57                   	push   edi
c0014e63:	68 6b b0 02 c0       	push   0xc002b06b
c0014e68:	e8 bf e0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e6d:	58                   	pop    eax
c0014e6e:	5a                   	pop    edx
c0014e6f:	56                   	push   esi
c0014e70:	68 76 b0 02 c0       	push   0xc002b076
c0014e75:	e8 b2 e0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0014e7a:	59                   	pop    ecx
c0014e7b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014e80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e86:	e8 b2 be ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0014e8b:	58                   	pop    eax
c0014e8c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e8f:	5a                   	pop    edx
c0014e90:	c1 e0 05             	shl    eax,0x5
c0014e93:	05 a0 d5 02 c0       	add    eax,0xc002d5a0
c0014e98:	50                   	push   eax
c0014e99:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea4:	e8 b3 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ea9:	59                   	pop    ecx
c0014eaa:	58                   	pop    eax
c0014eab:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014eb0:	68 81 b0 02 c0       	push   0xc002b081
c0014eb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebb:	e8 9c c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ec0:	58                   	pop    eax
c0014ec1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ec6:	5a                   	pop    edx
c0014ec7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eca:	83 c0 0c             	add    eax,0xc
c0014ecd:	50                   	push   eax
c0014ece:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014ed3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed9:	e8 7e c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ede:	59                   	pop    ecx
c0014edf:	58                   	pop    eax
c0014ee0:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014ee5:	68 8a b0 02 c0       	push   0xc002b08a
c0014eea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef0:	e8 67 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ef5:	58                   	pop    eax
c0014ef6:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014efb:	5a                   	pop    edx
c0014efc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014eff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f05:	e8 78 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f0a:	59                   	pop    ecx
c0014f0b:	58                   	pop    eax
c0014f0c:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f11:	68 92 b0 02 c0       	push   0xc002b092
c0014f16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1c:	e8 3b c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f21:	58                   	pop    eax
c0014f22:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f27:	5a                   	pop    edx
c0014f28:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f31:	e8 4c c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f36:	59                   	pop    ecx
c0014f37:	58                   	pop    eax
c0014f38:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f3d:	68 9a b0 02 c0       	push   0xc002b09a
c0014f42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f48:	e8 0f c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f4d:	58                   	pop    eax
c0014f4e:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f53:	5a                   	pop    edx
c0014f54:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5d:	e8 20 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f62:	59                   	pop    ecx
c0014f63:	58                   	pop    eax
c0014f64:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f69:	68 a2 b0 02 c0       	push   0xc002b0a2
c0014f6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f74:	e8 e3 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f79:	58                   	pop    eax
c0014f7a:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f7f:	5a                   	pop    edx
c0014f80:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f89:	e8 f4 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f8e:	59                   	pop    ecx
c0014f8f:	58                   	pop    eax
c0014f90:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f95:	68 aa b0 02 c0       	push   0xc002b0aa
c0014f9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa0:	e8 b7 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fa5:	58                   	pop    eax
c0014fa6:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fab:	5a                   	pop    edx
c0014fac:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014faf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb5:	e8 c8 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fba:	59                   	pop    ecx
c0014fbb:	58                   	pop    eax
c0014fbc:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fc1:	68 b2 b0 02 c0       	push   0xc002b0b2
c0014fc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcc:	e8 8b c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fd1:	58                   	pop    eax
c0014fd2:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fd7:	5a                   	pop    edx
c0014fd8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe1:	e8 9c c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fe6:	59                   	pop    ecx
c0014fe7:	58                   	pop    eax
c0014fe8:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fed:	68 ba b0 02 c0       	push   0xc002b0ba
c0014ff2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff8:	e8 5f c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ffd:	58                   	pop    eax
c0014ffe:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015003:	5a                   	pop    edx
c0015004:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015008:	52                   	push   edx
c0015009:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500f:	e8 6e c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015014:	59                   	pop    ecx
c0015015:	58                   	pop    eax
c0015016:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001501b:	68 c3 b0 02 c0       	push   0xc002b0c3
c0015020:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015026:	e8 31 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001502b:	58                   	pop    eax
c001502c:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015031:	5a                   	pop    edx
c0015032:	57                   	push   edi
c0015033:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015039:	e8 44 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001503e:	59                   	pop    ecx
c001503f:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015044:	5f                   	pop    edi
c0015045:	68 cb b0 02 c0       	push   0xc002b0cb
c001504a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015050:	e8 07 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015055:	58                   	pop    eax
c0015056:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001505b:	5a                   	pop    edx
c001505c:	56                   	push   esi
c001505d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015063:	e8 1a c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015068:	59                   	pop    ecx
c0015069:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001506e:	5e                   	pop    esi
c001506f:	68 d3 b0 02 c0       	push   0xc002b0d3
c0015074:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507a:	e8 dd c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001507f:	5f                   	pop    edi
c0015080:	58                   	pop    eax
c0015081:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015086:	55                   	push   ebp
c0015087:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508d:	e8 f0 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015092:	58                   	pop    eax
c0015093:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015098:	5a                   	pop    edx
c0015099:	68 db b0 02 c0       	push   0xc002b0db
c001509e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a4:	e8 b3 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150a9:	0f 21 c0             	mov    eax,db0
c00150ac:	59                   	pop    ecx
c00150ad:	5e                   	pop    esi
c00150ae:	50                   	push   eax
c00150af:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ba:	e8 c3 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150bf:	5f                   	pop    edi
c00150c0:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150c5:	5d                   	pop    ebp
c00150c6:	68 e4 b0 02 c0       	push   0xc002b0e4
c00150cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d1:	e8 86 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150d6:	0f 21 c8             	mov    eax,db1
c00150d9:	5a                   	pop    edx
c00150da:	59                   	pop    ecx
c00150db:	50                   	push   eax
c00150dc:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e7:	e8 96 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150ec:	5e                   	pop    esi
c00150ed:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150f2:	5f                   	pop    edi
c00150f3:	68 ec b0 02 c0       	push   0xc002b0ec
c00150f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fe:	e8 59 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015103:	0f 21 d0             	mov    eax,db2
c0015106:	5d                   	pop    ebp
c0015107:	5a                   	pop    edx
c0015108:	50                   	push   eax
c0015109:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001510e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015114:	e8 69 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015119:	59                   	pop    ecx
c001511a:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001511f:	5e                   	pop    esi
c0015120:	68 f4 b0 02 c0       	push   0xc002b0f4
c0015125:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512b:	e8 2c c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015130:	0f 21 d8             	mov    eax,db3
c0015133:	5f                   	pop    edi
c0015134:	5d                   	pop    ebp
c0015135:	50                   	push   eax
c0015136:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001513b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015141:	e8 3c c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015146:	58                   	pop    eax
c0015147:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001514c:	5a                   	pop    edx
c001514d:	68 fc b0 02 c0       	push   0xc002b0fc
c0015152:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015158:	e8 ff bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001515d:	0f 21 f0             	mov    eax,db6
c0015160:	59                   	pop    ecx
c0015161:	5e                   	pop    esi
c0015162:	50                   	push   eax
c0015163:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015168:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516e:	e8 0f c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015173:	5f                   	pop    edi
c0015174:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015179:	5d                   	pop    ebp
c001517a:	68 04 b1 02 c0       	push   0xc002b104
c001517f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015185:	e8 d2 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001518a:	0f 21 f8             	mov    eax,db7
c001518d:	5a                   	pop    edx
c001518e:	59                   	pop    ecx
c001518f:	50                   	push   eax
c0015190:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015195:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519b:	e8 e2 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00151a0:	5e                   	pop    esi
c00151a1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151a4:	e8 50 85 00 00       	call   c001d6f9 <Thr::getDriverNameFromAddress(unsigned long)>
c00151a9:	83 c4 10             	add    esp,0x10
c00151ac:	85 c0                	test   eax,eax
c00151ae:	74 7d                	je     c001522d <displayDebugInfo(regs*)+0x48b>
c00151b0:	89 c6                	mov    esi,eax
c00151b2:	50                   	push   eax
c00151b3:	50                   	push   eax
c00151b4:	56                   	push   esi
c00151b5:	68 0c b1 02 c0       	push   0xc002b10c
c00151ba:	e8 6d dd ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00151bf:	5a                   	pop    edx
c00151c0:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00151c5:	59                   	pop    ecx
c00151c6:	68 1a b1 02 c0       	push   0xc002b11a
c00151cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d1:	e8 86 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151d6:	5f                   	pop    edi
c00151d7:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00151dc:	5d                   	pop    ebp
c00151dd:	56                   	push   esi
c00151de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e4:	e8 73 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151e9:	58                   	pop    eax
c00151ea:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00151ef:	5a                   	pop    edx
c00151f0:	68 26 b1 02 c0       	push   0xc002b126
c00151f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151fb:	e8 5c bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015200:	59                   	pop    ecx
c0015201:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015206:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001520c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001520f:	e8 1c 85 00 00       	call   c001d730 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015214:	5b                   	pop    ebx
c0015215:	5d                   	pop    ebp
c0015216:	50                   	push   eax
c0015217:	57                   	push   edi
c0015218:	e8 65 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001521d:	58                   	pop    eax
c001521e:	5a                   	pop    edx
c001521f:	56                   	push   esi
c0015220:	68 32 b1 02 c0       	push   0xc002b132
c0015225:	e8 02 dd ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	fa                   	cli    
c001522e:	f4                   	hlt    
c001522f:	eb fe                	jmp    c001522f <displayDebugInfo(regs*)+0x48d>

c0015231 <x87EmulHandler(regs*, void*)>:
c0015231:	53                   	push   ebx
c0015232:	83 ec 14             	sub    esp,0x14
c0015235:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015239:	53                   	push   ebx
c001523a:	e8 47 a8 00 00       	call   c001fa86 <Vm::x87Handler(regs*)>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	84 c0                	test   al,al
c0015244:	74 05                	je     c001524b <x87EmulHandler(regs*, void*)+0x1a>
c0015246:	83 c4 08             	add    esp,0x8
c0015249:	5b                   	pop    ebx
c001524a:	c3                   	ret    
c001524b:	83 ec 0c             	sub    esp,0xc
c001524e:	68 42 b1 02 c0       	push   0xc002b142
c0015253:	e8 d4 dc ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0015258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001525b:	e8 42 fb ff ff       	call   c0014da2 <displayDebugInfo(regs*)>

c0015260 <gpFault(regs*, void*)>:
c0015260:	53                   	push   ebx
c0015261:	83 ec 14             	sub    esp,0x14
c0015264:	c7 05 94 e7 02 c0 03 ee 01 c0 	mov    DWORD PTR ds:0xc002e794,0xc001ee03
c001526e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015272:	53                   	push   ebx
c0015273:	e8 8b 9b 00 00       	call   c001ee03 <Vm::faultHandler(regs*)>
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	84 c0                	test   al,al
c001527d:	74 05                	je     c0015284 <gpFault(regs*, void*)+0x24>
c001527f:	83 c4 08             	add    esp,0x8
c0015282:	5b                   	pop    ebx
c0015283:	c3                   	ret    
c0015284:	83 ec 0c             	sub    esp,0xc
c0015287:	68 58 b1 02 c0       	push   0xc002b158
c001528c:	e8 9b dc ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0015291:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015294:	e8 09 fb ff ff       	call   c0014da2 <displayDebugInfo(regs*)>

c0015299 <pgFault(regs*, void*)>:
c0015299:	83 ec 18             	sub    esp,0x18
c001529c:	68 73 b1 02 c0       	push   0xc002b173
c00152a1:	e8 86 dc ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00152a6:	0f 20 d0             	mov    eax,cr2
c00152a9:	5a                   	pop    edx
c00152aa:	59                   	pop    ecx
c00152ab:	50                   	push   eax
c00152ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152ba:	e8 3f d8 ff ff       	call   c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	84 c0                	test   al,al
c00152c4:	74 04                	je     c00152ca <pgFault(regs*, void*)+0x31>
c00152c6:	83 c4 0c             	add    esp,0xc
c00152c9:	c3                   	ret    
c00152ca:	83 ec 0c             	sub    esp,0xc
c00152cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152d1:	e8 cc fa ff ff       	call   c0014da2 <displayDebugInfo(regs*)>

c00152d6 <otherISRHandler(regs*, void*)>:
c00152d6:	53                   	push   ebx
c00152d7:	83 ec 0c             	sub    esp,0xc
c00152da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152de:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152e1:	50                   	push   eax
c00152e2:	50                   	push   eax
c00152e3:	68 80 b1 02 c0       	push   0xc002b180
c00152e8:	e8 3f dc ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00152ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152f0:	e8 ad fa ff ff       	call   c0014da2 <displayDebugInfo(regs*)>

c00152f5 <opcodeFault(regs*, void*)>:
c00152f5:	55                   	push   ebp
c00152f6:	89 e5                	mov    ebp,esp
c00152f8:	56                   	push   esi
c00152f9:	53                   	push   ebx
c00152fa:	83 ec 40             	sub    esp,0x40
c00152fd:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0015302:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015308:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001530e:	84 c0                	test   al,al
c0015310:	74 24                	je     c0015336 <opcodeFault(regs*, void*)+0x41>
c0015312:	83 ec 0c             	sub    esp,0xc
c0015315:	68 a0 b1 02 c0       	push   0xc002b1a0
c001531a:	e8 0d dc ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001531f:	83 c4 10             	add    esp,0x10
c0015322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015325:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015328:	8d 50 19             	lea    edx,[eax+0x19]
c001532b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015331:	e9 be 05 00 00       	jmp    c00158f4 <opcodeFault(regs*, void*)+0x5ff>
c0015336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015339:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001533f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015343:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015350:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015353:	8a 00                	mov    al,BYTE PTR [eax]
c0015355:	3c f0                	cmp    al,0xf0
c0015357:	75 17                	jne    c0015370 <opcodeFault(regs*, void*)+0x7b>
c0015359:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015362:	8d 50 01             	lea    edx,[eax+0x1]
c0015365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015368:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536b:	e9 da 00 00 00       	jmp    c001544a <opcodeFault(regs*, void*)+0x155>
c0015370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015373:	8a 00                	mov    al,BYTE PTR [eax]
c0015375:	3c f2                	cmp    al,0xf2
c0015377:	74 09                	je     c0015382 <opcodeFault(regs*, void*)+0x8d>
c0015379:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537c:	8a 00                	mov    al,BYTE PTR [eax]
c001537e:	3c f3                	cmp    al,0xf3
c0015380:	75 1b                	jne    c001539d <opcodeFault(regs*, void*)+0xa8>
c0015382:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015386:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001538f:	8d 50 01             	lea    edx,[eax+0x1]
c0015392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015395:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015398:	e9 ad 00 00 00       	jmp    c001544a <opcodeFault(regs*, void*)+0x155>
c001539d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a0:	8a 00                	mov    al,BYTE PTR [eax]
c00153a2:	3c 66                	cmp    al,0x66
c00153a4:	75 1f                	jne    c00153c5 <opcodeFault(regs*, void*)+0xd0>
c00153a6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153aa:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b7:	8d 50 01             	lea    edx,[eax+0x1]
c00153ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c0:	e9 85 00 00 00       	jmp    c001544a <opcodeFault(regs*, void*)+0x155>
c00153c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ca:	3c 67                	cmp    al,0x67
c00153cc:	75 18                	jne    c00153e6 <opcodeFault(regs*, void*)+0xf1>
c00153ce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153db:	8d 50 01             	lea    edx,[eax+0x1]
c00153de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e4:	eb 64                	jmp    c001544a <opcodeFault(regs*, void*)+0x155>
c00153e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e9:	8a 00                	mov    al,BYTE PTR [eax]
c00153eb:	3c 2e                	cmp    al,0x2e
c00153ed:	74 09                	je     c00153f8 <opcodeFault(regs*, void*)+0x103>
c00153ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f2:	8a 00                	mov    al,BYTE PTR [eax]
c00153f4:	3c 3e                	cmp    al,0x3e
c00153f6:	75 18                	jne    c0015410 <opcodeFault(regs*, void*)+0x11b>
c00153f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153fc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015402:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015405:	8d 50 01             	lea    edx,[eax+0x1]
c0015408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001540e:	eb 3a                	jmp    c001544a <opcodeFault(regs*, void*)+0x155>
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	8a 00                	mov    al,BYTE PTR [eax]
c0015415:	3c 36                	cmp    al,0x36
c0015417:	74 1b                	je     c0015434 <opcodeFault(regs*, void*)+0x13f>
c0015419:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541c:	8a 00                	mov    al,BYTE PTR [eax]
c001541e:	3c 26                	cmp    al,0x26
c0015420:	74 12                	je     c0015434 <opcodeFault(regs*, void*)+0x13f>
c0015422:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015425:	8a 00                	mov    al,BYTE PTR [eax]
c0015427:	3c 64                	cmp    al,0x64
c0015429:	74 09                	je     c0015434 <opcodeFault(regs*, void*)+0x13f>
c001542b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542e:	8a 00                	mov    al,BYTE PTR [eax]
c0015430:	3c 65                	cmp    al,0x65
c0015432:	75 16                	jne    c001544a <opcodeFault(regs*, void*)+0x155>
c0015434:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015438:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001543b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015441:	8d 50 01             	lea    edx,[eax+0x1]
c0015444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015447:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544d:	8a 00                	mov    al,BYTE PTR [eax]
c001544f:	3c 0f                	cmp    al,0xf
c0015451:	0f 85 ad 00 00 00    	jne    c0015504 <opcodeFault(regs*, void*)+0x20f>
c0015457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545a:	40                   	inc    eax
c001545b:	8a 00                	mov    al,BYTE PTR [eax]
c001545d:	3c c2                	cmp    al,0xc2
c001545f:	74 0e                	je     c001546f <opcodeFault(regs*, void*)+0x17a>
c0015461:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015464:	40                   	inc    eax
c0015465:	8a 00                	mov    al,BYTE PTR [eax]
c0015467:	3c c3                	cmp    al,0xc3
c0015469:	0f 85 95 00 00 00    	jne    c0015504 <opcodeFault(regs*, void*)+0x20f>
c001546f:	83 ec 0c             	sub    esp,0xc
c0015472:	68 c3 b1 02 c0       	push   0xc002b1c3
c0015477:	e8 b0 da ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015482:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015485:	8d 50 01             	lea    edx,[eax+0x1]
c0015488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001548e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015491:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	8d 50 fe             	lea    edx,[eax-0x2]
c0015499:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549c:	88 10                	mov    BYTE PTR [eax],dl
c001549e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154a1:	50                   	push   eax
c00154a2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154a5:	50                   	push   eax
c00154a6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154a9:	50                   	push   eax
c00154aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ad:	e8 e2 47 00 00       	call   c0019c94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154bb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154be:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154c1:	01 d0                	add    eax,edx
c00154c3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154cc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154cf:	48                   	dec    eax
c00154d0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154df:	83 ec 04             	sub    esp,0x4
c00154e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154e5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154e8:	50                   	push   eax
c00154e9:	e8 c6 ac fe ff       	call   c00001b4 <voodooXADD>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154f7:	01 c2                	add    edx,eax
c00154f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ff:	e9 f0 03 00 00       	jmp    c00158f4 <opcodeFault(regs*, void*)+0x5ff>
c0015504:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015507:	8a 00                	mov    al,BYTE PTR [eax]
c0015509:	3c 0f                	cmp    al,0xf
c001550b:	0f 85 8b 01 00 00    	jne    c001569c <opcodeFault(regs*, void*)+0x3a7>
c0015511:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015514:	40                   	inc    eax
c0015515:	8a 00                	mov    al,BYTE PTR [eax]
c0015517:	3c c7                	cmp    al,0xc7
c0015519:	0f 86 7d 01 00 00    	jbe    c001569c <opcodeFault(regs*, void*)+0x3a7>
c001551f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015522:	40                   	inc    eax
c0015523:	8a 00                	mov    al,BYTE PTR [eax]
c0015525:	3c cf                	cmp    al,0xcf
c0015527:	0f 87 6f 01 00 00    	ja     c001569c <opcodeFault(regs*, void*)+0x3a7>
c001552d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015530:	40                   	inc    eax
c0015531:	8a 00                	mov    al,BYTE PTR [eax]
c0015533:	83 c0 38             	add    eax,0x38
c0015536:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015539:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001553d:	75 0b                	jne    c001554a <opcodeFault(regs*, void*)+0x255>
c001553f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015542:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015545:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015548:	eb 75                	jmp    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c001554a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001554e:	75 0b                	jne    c001555b <opcodeFault(regs*, void*)+0x266>
c0015550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015553:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015556:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015559:	eb 64                	jmp    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c001555b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001555f:	75 0b                	jne    c001556c <opcodeFault(regs*, void*)+0x277>
c0015561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015564:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015567:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556a:	eb 53                	jmp    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c001556c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015570:	75 0b                	jne    c001557d <opcodeFault(regs*, void*)+0x288>
c0015572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015575:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015578:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557b:	eb 42                	jmp    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c001557d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015581:	75 0b                	jne    c001558e <opcodeFault(regs*, void*)+0x299>
c0015583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015586:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015589:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558c:	eb 31                	jmp    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c001558e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015592:	75 0b                	jne    c001559f <opcodeFault(regs*, void*)+0x2aa>
c0015594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015597:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001559a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559d:	eb 20                	jmp    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c001559f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155a3:	75 0b                	jne    c00155b0 <opcodeFault(regs*, void*)+0x2bb>
c00155a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ae:	eb 0f                	jmp    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c00155b0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155b4:	75 09                	jne    c00155bf <opcodeFault(regs*, void*)+0x2ca>
c00155b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155bc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155bf:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155c3:	74 10                	je     c00155d5 <opcodeFault(regs*, void*)+0x2e0>
c00155c5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155cc:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155d3:	eb 2d                	jmp    c0015602 <opcodeFault(regs*, void*)+0x30d>
c00155d5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155d8:	c1 e0 18             	shl    eax,0x18
c00155db:	89 c2                	mov    edx,eax
c00155dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155e0:	c1 e0 08             	shl    eax,0x8
c00155e3:	25 00 00 ff 00       	and    eax,0xff0000
c00155e8:	09 c2                	or     edx,eax
c00155ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ed:	c1 e8 08             	shr    eax,0x8
c00155f0:	25 00 ff 00 00       	and    eax,0xff00
c00155f5:	09 c2                	or     edx,eax
c00155f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155fa:	c1 e8 18             	shr    eax,0x18
c00155fd:	09 d0                	or     eax,edx
c00155ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015602:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015606:	75 0b                	jne    c0015613 <opcodeFault(regs*, void*)+0x31e>
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015611:	eb 75                	jmp    c0015688 <opcodeFault(regs*, void*)+0x393>
c0015613:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015617:	75 0b                	jne    c0015624 <opcodeFault(regs*, void*)+0x32f>
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015622:	eb 64                	jmp    c0015688 <opcodeFault(regs*, void*)+0x393>
c0015624:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015628:	75 0b                	jne    c0015635 <opcodeFault(regs*, void*)+0x340>
c001562a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015630:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015633:	eb 53                	jmp    c0015688 <opcodeFault(regs*, void*)+0x393>
c0015635:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015639:	75 0b                	jne    c0015646 <opcodeFault(regs*, void*)+0x351>
c001563b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015641:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015644:	eb 42                	jmp    c0015688 <opcodeFault(regs*, void*)+0x393>
c0015646:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001564a:	75 0b                	jne    c0015657 <opcodeFault(regs*, void*)+0x362>
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015652:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015655:	eb 31                	jmp    c0015688 <opcodeFault(regs*, void*)+0x393>
c0015657:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001565b:	75 0b                	jne    c0015668 <opcodeFault(regs*, void*)+0x373>
c001565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015660:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015663:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015666:	eb 20                	jmp    c0015688 <opcodeFault(regs*, void*)+0x393>
c0015668:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001566c:	75 0b                	jne    c0015679 <opcodeFault(regs*, void*)+0x384>
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015674:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015677:	eb 0f                	jmp    c0015688 <opcodeFault(regs*, void*)+0x393>
c0015679:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001567d:	75 09                	jne    c0015688 <opcodeFault(regs*, void*)+0x393>
c001567f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015682:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015685:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001568e:	8d 50 02             	lea    edx,[eax+0x2]
c0015691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015694:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015697:	e9 58 02 00 00       	jmp    c00158f4 <opcodeFault(regs*, void*)+0x5ff>
c001569c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569f:	8a 00                	mov    al,BYTE PTR [eax]
c00156a1:	3c 0f                	cmp    al,0xf
c00156a3:	0f 85 76 01 00 00    	jne    c001581f <opcodeFault(regs*, void*)+0x52a>
c00156a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ac:	40                   	inc    eax
c00156ad:	8a 00                	mov    al,BYTE PTR [eax]
c00156af:	3c c7                	cmp    al,0xc7
c00156b1:	0f 85 68 01 00 00    	jne    c001581f <opcodeFault(regs*, void*)+0x52a>
c00156b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156c0:	8d 50 01             	lea    edx,[eax+0x1]
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156c9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156cc:	50                   	push   eax
c00156cd:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156d0:	50                   	push   eax
c00156d1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156d4:	50                   	push   eax
c00156d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156d8:	e8 b7 45 00 00       	call   c0019c94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156dd:	83 c4 10             	add    esp,0x10
c00156e0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156e3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156e6:	83 f0 01             	xor    eax,0x1
c00156e9:	84 c0                	test   al,al
c00156eb:	0f 84 2e 01 00 00    	je     c001581f <opcodeFault(regs*, void*)+0x52a>
c00156f1:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156f4:	3c 01                	cmp    al,0x1
c00156f6:	0f 85 23 01 00 00    	jne    c001581f <opcodeFault(regs*, void*)+0x52a>
c00156fc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156ff:	83 f0 01             	xor    eax,0x1
c0015702:	84 c0                	test   al,al
c0015704:	0f 84 15 01 00 00    	je     c001581f <opcodeFault(regs*, void*)+0x52a>
c001570a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015710:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015713:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001571a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001571d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015720:	89 c2                	mov    edx,eax
c0015722:	b8 00 00 00 00       	mov    eax,0x0
c0015727:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001572a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015733:	ba 00 00 00 00       	mov    edx,0x0
c0015738:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001573b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001573e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015741:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015744:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015747:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001574e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015751:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015754:	89 c2                	mov    edx,eax
c0015756:	b8 00 00 00 00       	mov    eax,0x0
c001575b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001575e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015764:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015767:	ba 00 00 00 00       	mov    edx,0x0
c001576c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001576f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015772:	e8 7b 86 00 00       	call   c001ddf2 <lockScheduler()>
c0015777:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001577a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001577d:	8b 00                	mov    eax,DWORD PTR [eax]
c001577f:	89 c1                	mov    ecx,eax
c0015781:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015784:	89 cb                	mov    ebx,ecx
c0015786:	89 d0                	mov    eax,edx
c0015788:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001578b:	89 c6                	mov    esi,eax
c001578d:	89 f0                	mov    eax,esi
c001578f:	09 d8                	or     eax,ebx
c0015791:	85 c0                	test   eax,eax
c0015793:	75 21                	jne    c00157b6 <opcodeFault(regs*, void*)+0x4c1>
c0015795:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015798:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001579b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001579e:	89 01                	mov    DWORD PTR [ecx],eax
c00157a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157a9:	83 c8 40             	or     eax,0x40
c00157ac:	89 c2                	mov    edx,eax
c00157ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157b4:	eb 3e                	jmp    c00157f4 <opcodeFault(regs*, void*)+0x4ff>
c00157b6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157be:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157c1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157c4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ca:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157cd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157d0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157d3:	89 d0                	mov    eax,edx
c00157d5:	31 d2                	xor    edx,edx
c00157d7:	89 c3                	mov    ebx,eax
c00157d9:	89 d6                	mov    esi,edx
c00157db:	89 da                	mov    edx,ebx
c00157dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157e9:	83 e0 bf             	and    eax,0xffffffbf
c00157ec:	89 c2                	mov    edx,eax
c00157ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157f4:	e8 fb 85 00 00       	call   c001ddf4 <unlockScheduler()>
c00157f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157ff:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015802:	01 c2                	add    edx,eax
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001580a:	83 ec 0c             	sub    esp,0xc
c001580d:	68 d2 b1 02 c0       	push   0xc002b1d2
c0015812:	e8 15 d7 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0015817:	83 c4 10             	add    esp,0x10
c001581a:	e9 d5 00 00 00       	jmp    c00158f4 <opcodeFault(regs*, void*)+0x5ff>
c001581f:	83 ec 0c             	sub    esp,0xc
c0015822:	68 e5 b1 02 c0       	push   0xc002b1e5
c0015827:	e8 00 d7 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001582c:	83 c4 10             	add    esp,0x10
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015838:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001583b:	c1 e0 04             	shl    eax,0x4
c001583e:	01 d0                	add    eax,edx
c0015840:	83 c0 03             	add    eax,0x3
c0015843:	8a 00                	mov    al,BYTE PTR [eax]
c0015845:	0f b6 d8             	movzx  ebx,al
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015854:	c1 e0 04             	shl    eax,0x4
c0015857:	01 d0                	add    eax,edx
c0015859:	83 c0 02             	add    eax,0x2
c001585c:	8a 00                	mov    al,BYTE PTR [eax]
c001585e:	0f b6 c8             	movzx  ecx,al
c0015861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015864:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001586d:	c1 e0 04             	shl    eax,0x4
c0015870:	01 d0                	add    eax,edx
c0015872:	40                   	inc    eax
c0015873:	8a 00                	mov    al,BYTE PTR [eax]
c0015875:	0f b6 d0             	movzx  edx,al
c0015878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001587e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015881:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015884:	c1 e0 04             	shl    eax,0x4
c0015887:	01 f0                	add    eax,esi
c0015889:	8a 00                	mov    al,BYTE PTR [eax]
c001588b:	0f b6 c0             	movzx  eax,al
c001588e:	83 ec 0c             	sub    esp,0xc
c0015891:	53                   	push   ebx
c0015892:	51                   	push   ecx
c0015893:	52                   	push   edx
c0015894:	50                   	push   eax
c0015895:	68 f8 b1 02 c0       	push   0xc002b1f8
c001589a:	e8 8d d6 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001589f:	83 c4 20             	add    esp,0x20
c00158a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158a8:	83 c0 03             	add    eax,0x3
c00158ab:	8a 00                	mov    al,BYTE PTR [eax]
c00158ad:	0f b6 d8             	movzx  ebx,al
c00158b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158b6:	83 c0 02             	add    eax,0x2
c00158b9:	8a 00                	mov    al,BYTE PTR [eax]
c00158bb:	0f b6 c8             	movzx  ecx,al
c00158be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158c4:	40                   	inc    eax
c00158c5:	8a 00                	mov    al,BYTE PTR [eax]
c00158c7:	0f b6 d0             	movzx  edx,al
c00158ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d0:	8a 00                	mov    al,BYTE PTR [eax]
c00158d2:	0f b6 c0             	movzx  eax,al
c00158d5:	83 ec 0c             	sub    esp,0xc
c00158d8:	53                   	push   ebx
c00158d9:	51                   	push   ecx
c00158da:	52                   	push   edx
c00158db:	50                   	push   eax
c00158dc:	68 20 b2 02 c0       	push   0xc002b220
c00158e1:	e8 46 d6 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00158e6:	83 c4 20             	add    esp,0x20
c00158e9:	83 ec 0c             	sub    esp,0xc
c00158ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158ef:	e8 ae f4 ff ff       	call   c0014da2 <displayDebugInfo(regs*)>
c00158f4:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158f7:	5b                   	pop    ebx
c00158f8:	5e                   	pop    esi
c00158f9:	5d                   	pop    ebp
c00158fa:	c3                   	ret    

c00158fb <displayProgramFault(char const*)>:
c00158fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015900:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015903:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015909:	85 c0                	test   eax,eax
c001590b:	74 15                	je     c0015922 <displayProgramFault(char const*)+0x27>
c001590d:	83 ec 0c             	sub    esp,0xc
c0015910:	6a 04                	push   0x4
c0015912:	6a 0f                	push   0xf
c0015914:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015918:	50                   	push   eax
c0015919:	e8 00 b5 ff ff       	call   c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001591e:	83 c4 1c             	add    esp,0x1c
c0015921:	c3                   	ret    
c0015922:	c3                   	ret    

c0015923 <setupInterruptController()>:
c0015923:	55                   	push   ebp
c0015924:	89 e5                	mov    ebp,esp
c0015926:	53                   	push   ebx
c0015927:	83 ec 24             	sub    esp,0x24
c001592a:	b8 00 00 00 00       	mov    eax,0x0
c001592f:	85 c0                	test   eax,eax
c0015931:	0f 95 c0             	setne  al
c0015934:	84 c0                	test   al,al
c0015936:	74 5b                	je     c0015993 <setupInterruptController()+0x70>
c0015938:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001593f:	83 ec 0c             	sub    esp,0xc
c0015942:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015945:	e8 f6 9e ff ff       	call   c000f840 <malloc>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	89 c3                	mov    ebx,eax
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	53                   	push   ebx
c0015953:	e8 f2 ff 00 00       	call   c002594a <APIC::APIC()>
c0015958:	83 c4 10             	add    esp,0x10
c001595b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001595e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015961:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015964:	8b 00                	mov    eax,DWORD PTR [eax]
c0015966:	83 c0 08             	add    eax,0x8
c0015969:	8b 00                	mov    eax,DWORD PTR [eax]
c001596b:	6a 00                	push   0x0
c001596d:	6a 00                	push   0x0
c001596f:	6a 00                	push   0x0
c0015971:	52                   	push   edx
c0015972:	ff d0                	call   eax
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001597c:	83 ec 08             	sub    esp,0x8
c001597f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015982:	50                   	push   eax
c0015983:	e8 ca e9 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0015988:	83 c4 10             	add    esp,0x10
c001598b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001598e:	e9 52 03 00 00       	jmp    c0015ce5 <setupInterruptController()+0x3c2>
c0015993:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0015998:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001599e:	83 e0 01             	and    eax,0x1
c00159a1:	84 c0                	test   al,al
c00159a3:	0f 95 c0             	setne  al
c00159a6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159a9:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159b6:	e8 85 9e ff ff       	call   c000f840 <malloc>
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	89 c3                	mov    ebx,eax
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	53                   	push   ebx
c00159c4:	e8 d9 04 01 00       	call   c0025ea2 <PIC::PIC()>
c00159c9:	83 c4 10             	add    esp,0x10
c00159cc:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159cf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d7:	83 c0 08             	add    eax,0x8
c00159da:	8b 00                	mov    eax,DWORD PTR [eax]
c00159dc:	6a 00                	push   0x0
c00159de:	6a 00                	push   0x0
c00159e0:	6a 00                	push   0x0
c00159e2:	52                   	push   edx
c00159e3:	ff d0                	call   eax
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159ec:	74 73                	je     c0015a61 <setupInterruptController()+0x13e>
c00159ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f6:	83 c0 0c             	add    eax,0xc
c00159f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fb:	6a 00                	push   0x0
c00159fd:	6a 00                	push   0x0
c00159ff:	6a 00                	push   0x0
c0015a01:	52                   	push   edx
c0015a02:	ff d0                	call   eax
c0015a04:	83 c4 10             	add    esp,0x10
c0015a07:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a0b:	74 15                	je     c0015a22 <setupInterruptController()+0xff>
c0015a0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a12:	83 c0 04             	add    eax,0x4
c0015a15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a17:	83 ec 0c             	sub    esp,0xc
c0015a1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1d:	ff d0                	call   eax
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a29:	83 ec 0c             	sub    esp,0xc
c0015a2c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a2f:	e8 0c 9e ff ff       	call   c000f840 <malloc>
c0015a34:	83 c4 10             	add    esp,0x10
c0015a37:	89 c3                	mov    ebx,eax
c0015a39:	83 ec 0c             	sub    esp,0xc
c0015a3c:	53                   	push   ebx
c0015a3d:	e8 08 ff 00 00       	call   c002594a <APIC::APIC()>
c0015a42:	83 c4 10             	add    esp,0x10
c0015a45:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a48:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a50:	83 c0 08             	add    eax,0x8
c0015a53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a55:	6a 00                	push   0x0
c0015a57:	6a 00                	push   0x0
c0015a59:	6a 00                	push   0x0
c0015a5b:	52                   	push   edx
c0015a5c:	ff d0                	call   eax
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0015a66:	83 ec 08             	sub    esp,0x8
c0015a69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6c:	50                   	push   eax
c0015a6d:	e8 e0 e8 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7a:	83 c0 24             	add    eax,0x24
c0015a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7f:	6a 00                	push   0x0
c0015a81:	68 d6 52 01 c0       	push   0xc00152d6
c0015a86:	6a 00                	push   0x0
c0015a88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8b:	ff d0                	call   eax
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a95:	83 c0 24             	add    eax,0x24
c0015a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9a:	6a 00                	push   0x0
c0015a9c:	68 d6 52 01 c0       	push   0xc00152d6
c0015aa1:	6a 01                	push   0x1
c0015aa3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa6:	ff d0                	call   eax
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab0:	83 c0 24             	add    eax,0x24
c0015ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab5:	6a 00                	push   0x0
c0015ab7:	68 ff 4b 01 c0       	push   0xc0014bff
c0015abc:	6a 02                	push   0x2
c0015abe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac1:	ff d0                	call   eax
c0015ac3:	83 c4 10             	add    esp,0x10
c0015ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	83 c0 24             	add    eax,0x24
c0015ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad0:	6a 00                	push   0x0
c0015ad2:	68 d6 52 01 c0       	push   0xc00152d6
c0015ad7:	6a 03                	push   0x3
c0015ad9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015adc:	ff d0                	call   eax
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	83 c0 24             	add    eax,0x24
c0015ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aeb:	6a 00                	push   0x0
c0015aed:	68 d6 52 01 c0       	push   0xc00152d6
c0015af2:	6a 04                	push   0x4
c0015af4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af7:	ff d0                	call   eax
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b01:	83 c0 24             	add    eax,0x24
c0015b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b06:	6a 00                	push   0x0
c0015b08:	68 d6 52 01 c0       	push   0xc00152d6
c0015b0d:	6a 05                	push   0x5
c0015b0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b12:	ff d0                	call   eax
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	83 c0 24             	add    eax,0x24
c0015b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b21:	6a 00                	push   0x0
c0015b23:	68 f5 52 01 c0       	push   0xc00152f5
c0015b28:	6a 06                	push   0x6
c0015b2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2d:	ff d0                	call   eax
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	83 c0 24             	add    eax,0x24
c0015b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3c:	6a 00                	push   0x0
c0015b3e:	68 31 52 01 c0       	push   0xc0015231
c0015b43:	6a 07                	push   0x7
c0015b45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b48:	ff d0                	call   eax
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	83 c0 24             	add    eax,0x24
c0015b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b57:	6a 00                	push   0x0
c0015b59:	68 1a 4a 01 c0       	push   0xc0014a1a
c0015b5e:	6a 08                	push   0x8
c0015b60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b63:	ff d0                	call   eax
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6d:	83 c0 24             	add    eax,0x24
c0015b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b72:	6a 00                	push   0x0
c0015b74:	68 d6 52 01 c0       	push   0xc00152d6
c0015b79:	6a 09                	push   0x9
c0015b7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7e:	ff d0                	call   eax
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b88:	83 c0 24             	add    eax,0x24
c0015b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8d:	6a 00                	push   0x0
c0015b8f:	68 d6 52 01 c0       	push   0xc00152d6
c0015b94:	6a 0a                	push   0xa
c0015b96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b99:	ff d0                	call   eax
c0015b9b:	83 c4 10             	add    esp,0x10
c0015b9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba3:	83 c0 24             	add    eax,0x24
c0015ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba8:	6a 00                	push   0x0
c0015baa:	68 d6 52 01 c0       	push   0xc00152d6
c0015baf:	6a 0b                	push   0xb
c0015bb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb4:	ff d0                	call   eax
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbe:	83 c0 24             	add    eax,0x24
c0015bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc3:	6a 00                	push   0x0
c0015bc5:	68 d6 52 01 c0       	push   0xc00152d6
c0015bca:	6a 0c                	push   0xc
c0015bcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcf:	ff d0                	call   eax
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd9:	83 c0 24             	add    eax,0x24
c0015bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bde:	6a 00                	push   0x0
c0015be0:	68 60 52 01 c0       	push   0xc0015260
c0015be5:	6a 0d                	push   0xd
c0015be7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bea:	ff d0                	call   eax
c0015bec:	83 c4 10             	add    esp,0x10
c0015bef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf4:	83 c0 24             	add    eax,0x24
c0015bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf9:	6a 00                	push   0x0
c0015bfb:	68 99 52 01 c0       	push   0xc0015299
c0015c00:	6a 0e                	push   0xe
c0015c02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c05:	ff d0                	call   eax
c0015c07:	83 c4 10             	add    esp,0x10
c0015c0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0f:	83 c0 24             	add    eax,0x24
c0015c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c14:	6a 00                	push   0x0
c0015c16:	68 d6 52 01 c0       	push   0xc00152d6
c0015c1b:	6a 0f                	push   0xf
c0015c1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c20:	ff d0                	call   eax
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2a:	83 c0 24             	add    eax,0x24
c0015c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2f:	6a 00                	push   0x0
c0015c31:	68 d6 52 01 c0       	push   0xc00152d6
c0015c36:	6a 10                	push   0x10
c0015c38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3b:	ff d0                	call   eax
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c45:	83 c0 24             	add    eax,0x24
c0015c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4a:	6a 00                	push   0x0
c0015c4c:	68 d6 52 01 c0       	push   0xc00152d6
c0015c51:	6a 11                	push   0x11
c0015c53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c56:	ff d0                	call   eax
c0015c58:	83 c4 10             	add    esp,0x10
c0015c5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c60:	83 c0 24             	add    eax,0x24
c0015c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c65:	6a 00                	push   0x0
c0015c67:	68 d6 52 01 c0       	push   0xc00152d6
c0015c6c:	6a 12                	push   0x12
c0015c6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c71:	ff d0                	call   eax
c0015c73:	83 c4 10             	add    esp,0x10
c0015c76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7b:	83 c0 24             	add    eax,0x24
c0015c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c80:	6a 00                	push   0x0
c0015c82:	68 d6 52 01 c0       	push   0xc00152d6
c0015c87:	6a 13                	push   0x13
c0015c89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8c:	ff d0                	call   eax
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c96:	83 c0 24             	add    eax,0x24
c0015c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9b:	6a 00                	push   0x0
c0015c9d:	68 d6 52 01 c0       	push   0xc00152d6
c0015ca2:	6a 14                	push   0x14
c0015ca4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca7:	ff d0                	call   eax
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb1:	83 c0 24             	add    eax,0x24
c0015cb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb6:	6a 00                	push   0x0
c0015cb8:	68 d6 52 01 c0       	push   0xc00152d6
c0015cbd:	6a 1e                	push   0x1e
c0015cbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc2:	ff d0                	call   eax
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccc:	83 c0 24             	add    eax,0x24
c0015ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd1:	6a 00                	push   0x0
c0015cd3:	68 a1 c7 01 c0       	push   0xc001c7a1
c0015cd8:	6a 60                	push   0x60
c0015cda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cdd:	ff d0                	call   eax
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ce8:	c9                   	leave  
c0015ce9:	c3                   	ret    

c0015cea <InterruptController::convertLegacyIRQNumber(int)>:
c0015cea:	55                   	push   ebp
c0015ceb:	89 e5                	mov    ebp,esp
c0015ced:	83 ec 08             	sub    esp,0x8
c0015cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf3:	83 ec 0c             	sub    esp,0xc
c0015cf6:	50                   	push   eax
c0015cf7:	e8 42 e9 ff ff       	call   c001463e <Device::getName()>
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	8a 00                	mov    al,BYTE PTR [eax]
c0015d01:	3c 41                	cmp    al,0x41
c0015d03:	0f 94 c0             	sete   al
c0015d06:	84 c0                	test   al,al
c0015d08:	74 28                	je     c0015d32 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d0a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d0e:	7f 12                	jg     c0015d22 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d13:	05 40 d8 02 c0       	add    eax,0xc002d840
c0015d18:	8a 00                	mov    al,BYTE PTR [eax]
c0015d1a:	0f b6 c0             	movzx  eax,al
c0015d1d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d20:	eb 10                	jmp    c0015d32 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	68 40 af 02 c0       	push   0xc002af40
c0015d2a:	e8 9e 48 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d35:	c9                   	leave  
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <startGUI(void*)>:
c0015d38:	55                   	push   ebp
c0015d39:	89 e5                	mov    ebp,esp
c0015d3b:	53                   	push   ebx
c0015d3c:	83 ec 04             	sub    esp,0x4
c0015d3f:	e8 b0 80 00 00       	call   c001ddf4 <unlockScheduler()>
c0015d44:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015d4a:	83 ec 08             	sub    esp,0x8
c0015d4d:	6a 01                	push   0x1
c0015d4f:	68 90 b2 02 c0       	push   0xc002b290
c0015d54:	e8 f1 79 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	83 ec 08             	sub    esp,0x8
c0015d5f:	53                   	push   ebx
c0015d60:	50                   	push   eax
c0015d61:	e8 18 7c 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015d6f:	83 ec 08             	sub    esp,0x8
c0015d72:	6a 01                	push   0x1
c0015d74:	68 aa b2 02 c0       	push   0xc002b2aa
c0015d79:	e8 cc 79 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	83 ec 08             	sub    esp,0x8
c0015d84:	53                   	push   ebx
c0015d85:	50                   	push   eax
c0015d86:	e8 f3 7b 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	90                   	nop
c0015d8f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d92:	c9                   	leave  
c0015d93:	c3                   	ret    

c0015d94 <startGUIVESA(void*)>:
c0015d94:	55                   	push   ebp
c0015d95:	89 e5                	mov    ebp,esp
c0015d97:	53                   	push   ebx
c0015d98:	83 ec 04             	sub    esp,0x4
c0015d9b:	e8 54 80 00 00       	call   c001ddf4 <unlockScheduler()>
c0015da0:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015da6:	83 ec 08             	sub    esp,0x8
c0015da9:	6a 01                	push   0x1
c0015dab:	68 c4 b2 02 c0       	push   0xc002b2c4
c0015db0:	e8 95 79 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c0015db5:	83 c4 10             	add    esp,0x10
c0015db8:	83 ec 08             	sub    esp,0x8
c0015dbb:	53                   	push   ebx
c0015dbc:	50                   	push   eax
c0015dbd:	e8 bc 7b 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015dcb:	83 ec 08             	sub    esp,0x8
c0015dce:	6a 01                	push   0x1
c0015dd0:	68 aa b2 02 c0       	push   0xc002b2aa
c0015dd5:	e8 70 79 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c0015dda:	83 c4 10             	add    esp,0x10
c0015ddd:	83 ec 08             	sub    esp,0x8
c0015de0:	53                   	push   ebx
c0015de1:	50                   	push   eax
c0015de2:	e8 97 7b 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	90                   	nop
c0015deb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dee:	c9                   	leave  
c0015def:	c3                   	ret    

c0015df0 <sendKeyToTerminal(unsigned char)>:
c0015df0:	55                   	push   ebp
c0015df1:	89 e5                	mov    ebp,esp
c0015df3:	83 ec 28             	sub    esp,0x28
c0015df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dfc:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c0015e01:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e05:	83 ec 08             	sub    esp,0x8
c0015e08:	52                   	push   edx
c0015e09:	50                   	push   eax
c0015e0a:	e8 4b b5 ff ff       	call   c001135a <VgaText::receiveKey(unsigned char)>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e16:	75 41                	jne    c0015e59 <sendKeyToTerminal(unsigned char)+0x69>
c0015e18:	e8 fc 7f 00 00       	call   c001de19 <lockStuff()>
c0015e1d:	a1 a0 e7 02 c0       	mov    eax,ds:0xc002e7a0
c0015e22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e25:	c7 05 a0 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7a0,0x0
c0015e2f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e33:	74 1f                	je     c0015e54 <sendKeyToTerminal(unsigned char)+0x64>
c0015e35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e38:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e3e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e41:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e44:	83 ec 0c             	sub    esp,0xc
c0015e47:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e4a:	e8 bb 85 00 00       	call   c001e40a <unblockTask(ThreadControlBlock*)>
c0015e4f:	83 c4 10             	add    esp,0x10
c0015e52:	eb db                	jmp    c0015e2f <sendKeyToTerminal(unsigned char)+0x3f>
c0015e54:	e8 5a 83 00 00       	call   c001e1b3 <unlockStuff()>
c0015e59:	90                   	nop
c0015e5a:	c9                   	leave  
c0015e5b:	c3                   	ret    

c0015e5c <sendKeyboardToken(KeyboardToken)>:
c0015e5c:	55                   	push   ebp
c0015e5d:	89 e5                	mov    ebp,esp
c0015e5f:	83 ec 18             	sub    esp,0x18
c0015e62:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e68:	0f b7 c0             	movzx  eax,ax
c0015e6b:	83 f2 01             	xor    edx,0x1
c0015e6e:	88 90 c0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1840],dl
c0015e74:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0015e79:	85 c0                	test   eax,eax
c0015e7b:	74 24                	je     c0015ea1 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e7d:	8b 0d a8 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7a8
c0015e83:	83 ec 04             	sub    esp,0x4
c0015e86:	68 c0 e7 02 c0       	push   0xc002e7c0
c0015e8b:	83 ec 08             	sub    esp,0x8
c0015e8e:	89 e2                	mov    edx,esp
c0015e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e93:	89 02                	mov    DWORD PTR [edx],eax
c0015e95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e98:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e9c:	ff d1                	call   ecx
c0015e9e:	83 c4 10             	add    esp,0x10
c0015ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea4:	66 3d 03 02          	cmp    ax,0x203
c0015ea8:	75 07                	jne    c0015eb1 <sendKeyboardToken(KeyboardToken)+0x55>
c0015eaa:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0015eaf:	84 c0                	test   al,al
c0015eb1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015eb5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015eb8:	a0 c8 eb 02 c0       	mov    al,ds:0xc002ebc8
c0015ebd:	38 c2                	cmp    dl,al
c0015ebf:	74 1c                	je     c0015edd <sendKeyboardToken(KeyboardToken)+0x81>
c0015ec1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ec4:	a2 c8 eb 02 c0       	mov    ds:0xc002ebc8,al
c0015ec9:	a0 c8 eb 02 c0       	mov    al,ds:0xc002ebc8
c0015ece:	0f b6 c0             	movzx  eax,al
c0015ed1:	83 ec 0c             	sub    esp,0xc
c0015ed4:	50                   	push   eax
c0015ed5:	e8 e0 a6 ff ff       	call   c00105ba <setTerminalScrollLock(bool)>
c0015eda:	83 c4 10             	add    esp,0x10
c0015edd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ee0:	84 c0                	test   al,al
c0015ee2:	0f 84 ae 00 00 00    	je     c0015f96 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eeb:	66 3d 10 03          	cmp    ax,0x310
c0015eef:	75 06                	jne    c0015ef7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ef1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efa:	66 3d 11 03          	cmp    ax,0x311
c0015efe:	75 06                	jne    c0015f06 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f00:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f09:	66 3d 12 03          	cmp    ax,0x312
c0015f0d:	75 06                	jne    c0015f15 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f0f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f18:	66 3d 13 03          	cmp    ax,0x313
c0015f1c:	75 06                	jne    c0015f24 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f1e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f27:	66 3d 14 03          	cmp    ax,0x314
c0015f2b:	75 06                	jne    c0015f33 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f2d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f36:	66 3d 15 03          	cmp    ax,0x315
c0015f3a:	75 06                	jne    c0015f42 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f3c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f45:	66 3d 16 03          	cmp    ax,0x316
c0015f49:	75 06                	jne    c0015f51 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f4b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f54:	66 3d 17 03          	cmp    ax,0x317
c0015f58:	75 06                	jne    c0015f60 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f5a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f63:	66 3d 18 03          	cmp    ax,0x318
c0015f67:	75 06                	jne    c0015f6f <sendKeyboardToken(KeyboardToken)+0x113>
c0015f69:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f72:	66 3d 19 03          	cmp    ax,0x319
c0015f76:	75 06                	jne    c0015f7e <sendKeyboardToken(KeyboardToken)+0x122>
c0015f78:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f81:	66 3d 1a 03          	cmp    ax,0x31a
c0015f85:	0f 85 c9 00 00 00    	jne    c0016054 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f8b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f91:	e9 be 00 00 00       	jmp    c0016054 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f99:	66 3d 10 03          	cmp    ax,0x310
c0015f9d:	75 0a                	jne    c0015fa9 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f9f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fa5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fac:	66 3d 11 03          	cmp    ax,0x311
c0015fb0:	75 0a                	jne    c0015fbc <sendKeyboardToken(KeyboardToken)+0x160>
c0015fb2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fb8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbf:	66 3d 12 03          	cmp    ax,0x312
c0015fc3:	75 0a                	jne    c0015fcf <sendKeyboardToken(KeyboardToken)+0x173>
c0015fc5:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fcb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd2:	66 3d 13 03          	cmp    ax,0x313
c0015fd6:	75 0a                	jne    c0015fe2 <sendKeyboardToken(KeyboardToken)+0x186>
c0015fd8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015fde:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe5:	66 3d 14 03          	cmp    ax,0x314
c0015fe9:	75 0a                	jne    c0015ff5 <sendKeyboardToken(KeyboardToken)+0x199>
c0015feb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ff1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff8:	66 3d 15 03          	cmp    ax,0x315
c0015ffc:	75 0a                	jne    c0016008 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ffe:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016004:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600b:	66 3d 16 03          	cmp    ax,0x316
c001600f:	75 0a                	jne    c001601b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016011:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016017:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601e:	66 3d 17 03          	cmp    ax,0x317
c0016022:	75 0a                	jne    c001602e <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016024:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001602a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016031:	66 3d 18 03          	cmp    ax,0x318
c0016035:	75 0a                	jne    c0016041 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016037:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001603d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016044:	66 3d 19 03          	cmp    ax,0x319
c0016048:	75 0a                	jne    c0016054 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001604a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016050:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016057:	66 3d 00 02          	cmp    ax,0x200
c001605b:	75 2c                	jne    c0016089 <sendKeyboardToken(KeyboardToken)+0x22d>
c001605d:	a0 c0 eb 02 c0       	mov    al,ds:0xc002ebc0
c0016062:	83 f0 01             	xor    eax,0x1
c0016065:	84 c0                	test   al,al
c0016067:	74 20                	je     c0016089 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016069:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001606e:	6a 01                	push   0x1
c0016070:	6a 00                	push   0x0
c0016072:	68 38 5d 01 c0       	push   0xc0015d38
c0016077:	50                   	push   eax
c0016078:	e8 a7 7e 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c001607d:	83 c4 10             	add    esp,0x10
c0016080:	c6 05 c0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc0,0x1
c0016087:	eb 33                	jmp    c00160bc <sendKeyboardToken(KeyboardToken)+0x260>
c0016089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608c:	66 3d 01 02          	cmp    ax,0x201
c0016090:	75 2a                	jne    c00160bc <sendKeyboardToken(KeyboardToken)+0x260>
c0016092:	a0 c0 eb 02 c0       	mov    al,ds:0xc002ebc0
c0016097:	83 f0 01             	xor    eax,0x1
c001609a:	84 c0                	test   al,al
c001609c:	74 1e                	je     c00160bc <sendKeyboardToken(KeyboardToken)+0x260>
c001609e:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00160a3:	6a 01                	push   0x1
c00160a5:	6a 00                	push   0x0
c00160a7:	68 94 5d 01 c0       	push   0xc0015d94
c00160ac:	50                   	push   eax
c00160ad:	e8 72 7e 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	c6 05 c0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc0,0x1
c00160bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bf:	66 3d 1d 03          	cmp    ax,0x31d
c00160c3:	75 06                	jne    c00160cb <sendKeyboardToken(KeyboardToken)+0x26f>
c00160c5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ce:	66 3d 1c 03          	cmp    ax,0x31c
c00160d2:	75 06                	jne    c00160da <sendKeyboardToken(KeyboardToken)+0x27e>
c00160d4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160dd:	66 3d 1b 03          	cmp    ax,0x31b
c00160e1:	75 06                	jne    c00160e9 <sendKeyboardToken(KeyboardToken)+0x28d>
c00160e3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00160e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ec:	66 3d 1e 03          	cmp    ax,0x31e
c00160f0:	75 06                	jne    c00160f8 <sendKeyboardToken(KeyboardToken)+0x29c>
c00160f2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fb:	66 3d 1f 03          	cmp    ax,0x31f
c00160ff:	75 06                	jne    c0016107 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016101:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610a:	66 3d 1a 03          	cmp    ax,0x31a
c001610e:	75 06                	jne    c0016116 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016110:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016116:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001611a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001611d:	83 f0 01             	xor    eax,0x1
c0016120:	84 c0                	test   al,al
c0016122:	74 77                	je     c001619b <sendKeyboardToken(KeyboardToken)+0x33f>
c0016124:	a0 c1 e8 02 c0       	mov    al,ds:0xc002e8c1
c0016129:	84 c0                	test   al,al
c001612b:	74 41                	je     c001616e <sendKeyboardToken(KeyboardToken)+0x312>
c001612d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016131:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016135:	74 2b                	je     c0016162 <sendKeyboardToken(KeyboardToken)+0x306>
c0016137:	8b 15 c4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc4
c001613d:	89 d0                	mov    eax,edx
c001613f:	c1 e0 02             	shl    eax,0x2
c0016142:	01 d0                	add    eax,edx
c0016144:	01 c0                	add    eax,eax
c0016146:	a3 c4 eb 02 c0       	mov    ds:0xc002ebc4,eax
c001614b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614e:	0f b7 c0             	movzx  eax,ax
c0016151:	8d 50 d0             	lea    edx,[eax-0x30]
c0016154:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c0016159:	01 d0                	add    eax,edx
c001615b:	a3 c4 eb 02 c0       	mov    ds:0xc002ebc4,eax
c0016160:	eb 6d                	jmp    c00161cf <sendKeyboardToken(KeyboardToken)+0x373>
c0016162:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c001616c:	eb 61                	jmp    c00161cf <sendKeyboardToken(KeyboardToken)+0x373>
c001616e:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c0016173:	85 c0                	test   eax,eax
c0016175:	74 18                	je     c001618f <sendKeyboardToken(KeyboardToken)+0x333>
c0016177:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c001617c:	0f b6 c0             	movzx  eax,al
c001617f:	83 ec 0c             	sub    esp,0xc
c0016182:	50                   	push   eax
c0016183:	e8 68 fc ff ff       	call   c0015df0 <sendKeyToTerminal(unsigned char)>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001618f:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c0016199:	eb 34                	jmp    c00161cf <sendKeyboardToken(KeyboardToken)+0x373>
c001619b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619e:	66 3d 01 01          	cmp    ax,0x101
c00161a2:	75 2b                	jne    c00161cf <sendKeyboardToken(KeyboardToken)+0x373>
c00161a4:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c00161a9:	85 c0                	test   eax,eax
c00161ab:	74 18                	je     c00161c5 <sendKeyboardToken(KeyboardToken)+0x369>
c00161ad:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c00161b2:	0f b6 c0             	movzx  eax,al
c00161b5:	83 ec 0c             	sub    esp,0xc
c00161b8:	50                   	push   eax
c00161b9:	e8 32 fc ff ff       	call   c0015df0 <sendKeyToTerminal(unsigned char)>
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161c5:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c00161cf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161d2:	83 f0 01             	xor    eax,0x1
c00161d5:	84 c0                	test   al,al
c00161d7:	74 4c                	je     c0016225 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161d9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161dc:	83 f0 01             	xor    eax,0x1
c00161df:	84 c0                	test   al,al
c00161e1:	74 42                	je     c0016225 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161e3:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c00161e8:	83 f0 01             	xor    eax,0x1
c00161eb:	84 c0                	test   al,al
c00161ed:	74 36                	je     c0016225 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f2:	66 83 f8 1f          	cmp    ax,0x1f
c00161f6:	76 09                	jbe    c0016201 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fb:	66 83 f8 7e          	cmp    ax,0x7e
c00161ff:	76 12                	jbe    c0016213 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016204:	66 83 f8 0a          	cmp    ax,0xa
c0016208:	74 09                	je     c0016213 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001620a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620d:	66 83 f8 08          	cmp    ax,0x8
c0016211:	75 12                	jne    c0016225 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016216:	0f b6 c0             	movzx  eax,al
c0016219:	83 ec 0c             	sub    esp,0xc
c001621c:	50                   	push   eax
c001621d:	e8 ce fb ff ff       	call   c0015df0 <sendKeyToTerminal(unsigned char)>
c0016222:	83 c4 10             	add    esp,0x10
c0016225:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016228:	83 f0 01             	xor    eax,0x1
c001622b:	84 c0                	test   al,al
c001622d:	74 4f                	je     c001627e <sendKeyboardToken(KeyboardToken)+0x422>
c001622f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016232:	83 f0 01             	xor    eax,0x1
c0016235:	84 c0                	test   al,al
c0016237:	74 45                	je     c001627e <sendKeyboardToken(KeyboardToken)+0x422>
c0016239:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c001623e:	84 c0                	test   al,al
c0016240:	74 3c                	je     c001627e <sendKeyboardToken(KeyboardToken)+0x422>
c0016242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016245:	66 83 f8 3f          	cmp    ax,0x3f
c0016249:	76 33                	jbe    c001627e <sendKeyboardToken(KeyboardToken)+0x422>
c001624b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624e:	66 83 f8 7f          	cmp    ax,0x7f
c0016252:	77 2a                	ja     c001627e <sendKeyboardToken(KeyboardToken)+0x422>
c0016254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016257:	88 c2                	mov    dl,al
c0016259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625c:	66 83 f8 5f          	cmp    ax,0x5f
c0016260:	76 04                	jbe    c0016266 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016262:	b0 20                	mov    al,0x20
c0016264:	eb 02                	jmp    c0016268 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016266:	b0 00                	mov    al,0x0
c0016268:	29 c2                	sub    edx,eax
c001626a:	88 d0                	mov    al,dl
c001626c:	83 e8 40             	sub    eax,0x40
c001626f:	0f b6 c0             	movzx  eax,al
c0016272:	83 ec 0c             	sub    esp,0xc
c0016275:	50                   	push   eax
c0016276:	e8 75 fb ff ff       	call   c0015df0 <sendKeyToTerminal(unsigned char)>
c001627b:	83 c4 10             	add    esp,0x10
c001627e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016281:	66 3d 00 03          	cmp    ax,0x300
c0016285:	75 0f                	jne    c0016296 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016287:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001628a:	83 f0 01             	xor    eax,0x1
c001628d:	84 c0                	test   al,al
c001628f:	74 05                	je     c0016296 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016291:	e8 59 ab ff ff       	call   c0010def <doTerminalCycle()>
c0016296:	90                   	nop
c0016297:	c9                   	leave  
c0016298:	c3                   	ret    

c0016299 <clearInternalKeybuffer(VgaText*)>:
c0016299:	55                   	push   ebp
c001629a:	89 e5                	mov    ebp,esp
c001629c:	83 ec 08             	sub    esp,0x8
c001629f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a2:	05 34 11 00 00       	add    eax,0x1134
c00162a7:	83 ec 0c             	sub    esp,0xc
c00162aa:	50                   	push   eax
c00162ab:	e8 e4 a4 fe ff       	call   c0000794 <strlen>
c00162b0:	83 c4 10             	add    esp,0x10
c00162b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162b6:	81 c2 34 11 00 00    	add    edx,0x1134
c00162bc:	83 ec 04             	sub    esp,0x4
c00162bf:	50                   	push   eax
c00162c0:	6a 00                	push   0x0
c00162c2:	52                   	push   edx
c00162c3:	e8 b0 a4 fe ff       	call   c0000778 <memset>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	90                   	nop
c00162cc:	c9                   	leave  
c00162cd:	c3                   	ret    

c00162ce <readKeyboard(VgaText*, char*, unsigned long)>:
c00162ce:	55                   	push   ebp
c00162cf:	89 e5                	mov    ebp,esp
c00162d1:	83 ec 18             	sub    esp,0x18
c00162d4:	fb                   	sti    
c00162d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162dc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162e0:	0f 84 8a 00 00 00    	je     c0016370 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00162e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162ef:	84 c0                	test   al,al
c00162f1:	75 11                	jne    c0016304 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00162f3:	e8 fa 7a 00 00       	call   c001ddf2 <lockScheduler()>
c00162f8:	e8 31 7e 00 00       	call   c001e12e <schedule()>
c00162fd:	e8 f2 7a 00 00       	call   c001ddf4 <unlockScheduler()>
c0016302:	eb e2                	jmp    c00162e6 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016304:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016307:	8d 50 01             	lea    edx,[eax+0x1]
c001630a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001630d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016310:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016316:	88 10                	mov    BYTE PTR [eax],dl
c0016318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016321:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016327:	05 34 11 00 00       	add    eax,0x1134
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	50                   	push   eax
c0016330:	e8 5f a4 fe ff       	call   c0000794 <strlen>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001633b:	81 c2 34 11 00 00    	add    edx,0x1134
c0016341:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016344:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016347:	81 c2 34 11 00 00    	add    edx,0x1134
c001634d:	83 ec 04             	sub    esp,0x4
c0016350:	50                   	push   eax
c0016351:	51                   	push   ecx
c0016352:	52                   	push   edx
c0016353:	e8 24 a3 fe ff       	call   c000067c <memmove>
c0016358:	83 c4 10             	add    esp,0x10
c001635b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001635e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016361:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016365:	0f 85 71 ff ff ff    	jne    c00162dc <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001636b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001636e:	eb 03                	jmp    c0016373 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016373:	c9                   	leave  
c0016374:	c3                   	ret    
c0016375:	90                   	nop

c0016376 <Keyboard::Keyboard(char const*)>:
c0016376:	83 ec 0c             	sub    esp,0xc
c0016379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637d:	83 ec 08             	sub    esp,0x8
c0016380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016384:	50                   	push   eax
c0016385:	e8 b8 e1 ff ff       	call   c0014542 <Device::Device(char const*)>
c001638a:	83 c4 10             	add    esp,0x10
c001638d:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c0016392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016396:	89 10                	mov    DWORD PTR [eax],edx
c0016398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001639c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163a6:	c6 05 a4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7a4,0x1
c00163ad:	90                   	nop
c00163ae:	83 c4 0c             	add    esp,0xc
c00163b1:	c3                   	ret    

c00163b2 <Keyboard::~Keyboard()>:
c00163b2:	83 ec 0c             	sub    esp,0xc
c00163b5:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c00163ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163be:	89 10                	mov    DWORD PTR [eax],edx
c00163c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c4:	83 ec 0c             	sub    esp,0xc
c00163c7:	50                   	push   eax
c00163c8:	e8 57 de ff ff       	call   c0014224 <Device::~Device()>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	90                   	nop
c00163d1:	83 c4 0c             	add    esp,0xc
c00163d4:	c3                   	ret    
c00163d5:	90                   	nop

c00163d6 <Keyboard::~Keyboard()>:
c00163d6:	83 ec 0c             	sub    esp,0xc
c00163d9:	83 ec 0c             	sub    esp,0xc
c00163dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e0:	e8 cd ff ff ff       	call   c00163b2 <Keyboard::~Keyboard()>
c00163e5:	83 c4 10             	add    esp,0x10
c00163e8:	83 ec 08             	sub    esp,0x8
c00163eb:	68 5c 01 00 00       	push   0x15c
c00163f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f4:	e8 53 ca ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00163f9:	83 c4 10             	add    esp,0x10
c00163fc:	83 c4 0c             	add    esp,0xc
c00163ff:	c3                   	ret    

c0016400 <LogicalDisk::close(int, int, void*)>:
c0016400:	83 c8 ff             	or     eax,0xffffffff
c0016403:	c3                   	ret    

c0016404 <LogicalDisk::~LogicalDisk()>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c001640c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016410:	89 10                	mov    DWORD PTR [eax],edx
c0016412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016416:	83 ec 0c             	sub    esp,0xc
c0016419:	50                   	push   eax
c001641a:	e8 05 de ff ff       	call   c0014224 <Device::~Device()>
c001641f:	83 c4 10             	add    esp,0x10
c0016422:	90                   	nop
c0016423:	83 c4 0c             	add    esp,0xc
c0016426:	c3                   	ret    
c0016427:	90                   	nop

c0016428 <LogicalDisk::~LogicalDisk()>:
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	83 ec 0c             	sub    esp,0xc
c001642e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016432:	e8 cd ff ff ff       	call   c0016404 <LogicalDisk::~LogicalDisk()>
c0016437:	83 c4 10             	add    esp,0x10
c001643a:	83 ec 08             	sub    esp,0x8
c001643d:	68 74 01 00 00       	push   0x174
c0016442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016446:	e8 01 ca ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c001644b:	83 c4 10             	add    esp,0x10
c001644e:	83 c4 0c             	add    esp,0xc
c0016451:	c3                   	ret    

c0016452 <LogicalDisk::open(int, int, void*)>:
c0016452:	83 ec 18             	sub    esp,0x18
c0016455:	68 14 b3 02 c0       	push   0xc002b314
c001645a:	e8 6e 41 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c001645f:	83 c8 ff             	or     eax,0xffffffff
c0016462:	83 c4 1c             	add    esp,0x1c
c0016465:	c3                   	ret    

c0016466 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016466:	53                   	push   ebx
c0016467:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001646b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001646f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016473:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016479:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001647f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016485:	77 10                	ja     c0016497 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016487:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001648d:	89 d3                	mov    ebx,edx
c001648f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016495:	72 05                	jb     c001649c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016497:	83 c8 ff             	or     eax,0xffffffff
c001649a:	89 c2                	mov    edx,eax
c001649c:	5b                   	pop    ebx
c001649d:	c3                   	ret    

c001649e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001649e:	56                   	push   esi
c001649f:	83 c8 ff             	or     eax,0xffffffff
c00164a2:	53                   	push   ebx
c00164a3:	89 c2                	mov    edx,eax
c00164a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164a9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164b7:	77 27                	ja     c00164e0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164b9:	89 d8                	mov    eax,ebx
c00164bb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164c1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164cc:	89 c2                	mov    edx,eax
c00164ce:	73 10                	jae    c00164e0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164d0:	89 c8                	mov    eax,ecx
c00164d2:	89 da                	mov    edx,ebx
c00164d4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164da:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00164e0:	5b                   	pop    ebx
c00164e1:	5e                   	pop    esi
c00164e2:	c3                   	ret    
c00164e3:	90                   	nop

c00164e4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164e4:	83 ec 1c             	sub    esp,0x1c
c00164e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00164fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016502:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016511:	50                   	push   eax
c0016512:	e8 2b e0 ff ff       	call   c0014542 <Device::Device(char const*)>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c001651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016523:	89 10                	mov    DWORD PTR [eax],edx
c0016525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016529:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016534:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001653b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016549:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001654d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016555:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001655b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016561:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016565:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016568:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001656c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016572:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016580:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001658a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016594:	90                   	nop
c0016595:	83 c4 1c             	add    esp,0x1c
c0016598:	c3                   	ret    
c0016599:	90                   	nop

c001659a <LogicalDisk::assignDriveLetter()>:
c001659a:	55                   	push   ebp
c001659b:	57                   	push   edi
c001659c:	56                   	push   esi
c001659d:	53                   	push   ebx
c001659e:	83 ec 14             	sub    esp,0x14
c00165a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165a5:	8b 3d e0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebe0
c00165ab:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165b1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165b5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165bb:	8b 3d e4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebe4
c00165c1:	3c 01                	cmp    al,0x1
c00165c3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165cb:	19 c0                	sbb    eax,eax
c00165cd:	83 e0 02             	and    eax,0x2
c00165d0:	83 c0 41             	add    eax,0x41
c00165d3:	0f be e8             	movsx  ebp,al
c00165d6:	3c 43                	cmp    al,0x43
c00165d8:	75 10                	jne    c00165ea <LogicalDisk::assignDriveLetter()+0x50>
c00165da:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00165e1:	75 5d                	jne    c0016640 <LogicalDisk::assignDriveLetter()+0xa6>
c00165e3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00165e8:	75 56                	jne    c0016640 <LogicalDisk::assignDriveLetter()+0xa6>
c00165ea:	8d 75 bf             	lea    esi,[ebp-0x41]
c00165ed:	ba 01 00 00 00       	mov    edx,0x1
c00165f2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00165f6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00165fa:	d3 e2                	shl    edx,cl
c00165fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016600:	89 d7                	mov    edi,edx
c0016602:	89 d6                	mov    esi,edx
c0016604:	c1 ff 1f             	sar    edi,0x1f
c0016607:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001660b:	21 f9                	and    ecx,edi
c001660d:	09 d1                	or     ecx,edx
c001660f:	75 2f                	jne    c0016640 <LogicalDisk::assignDriveLetter()+0xa6>
c0016611:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016615:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016619:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001661f:	09 f2                	or     edx,esi
c0016621:	89 15 e0 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe0,edx
c0016627:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001662b:	09 fa                	or     edx,edi
c001662d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016631:	89 15 e4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe4,edx
c0016637:	89 1c bd 00 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1400],ebx
c001663e:	eb 08                	jmp    c0016648 <LogicalDisk::assignDriveLetter()+0xae>
c0016640:	45                   	inc    ebp
c0016641:	40                   	inc    eax
c0016642:	3c 5b                	cmp    al,0x5b
c0016644:	75 90                	jne    c00165d6 <LogicalDisk::assignDriveLetter()+0x3c>
c0016646:	31 c0                	xor    eax,eax
c0016648:	83 c4 14             	add    esp,0x14
c001664b:	5b                   	pop    ebx
c001664c:	5e                   	pop    esi
c001664d:	5f                   	pop    edi
c001664e:	5d                   	pop    ebp
c001664f:	c3                   	ret    

c0016650 <LogicalDisk::mount()>:
c0016650:	56                   	push   esi
c0016651:	53                   	push   ebx
c0016652:	51                   	push   ecx
c0016653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016657:	8b 1d 6c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e76c
c001665d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016667:	85 db                	test   ebx,ebx
c0016669:	74 50                	je     c00166bb <LogicalDisk::mount()+0x6b>
c001666b:	e8 6d 77 00 00       	call   c001dddd <getIRQNestingLevel()>
c0016670:	52                   	push   edx
c0016671:	52                   	push   edx
c0016672:	50                   	push   eax
c0016673:	68 38 b3 02 c0       	push   0xc002b338
c0016678:	e8 af c8 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001667d:	83 c4 0c             	add    esp,0xc
c0016680:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016687:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016689:	83 e8 41             	sub    eax,0x41
c001668c:	50                   	push   eax
c001668d:	56                   	push   esi
c001668e:	53                   	push   ebx
c001668f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016692:	83 c4 10             	add    esp,0x10
c0016695:	84 c0                	test   al,al
c0016697:	74 08                	je     c00166a1 <LogicalDisk::mount()+0x51>
c0016699:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001669f:	eb 1c                	jmp    c00166bd <LogicalDisk::mount()+0x6d>
c00166a1:	e8 37 77 00 00       	call   c001dddd <getIRQNestingLevel()>
c00166a6:	51                   	push   ecx
c00166a7:	51                   	push   ecx
c00166a8:	50                   	push   eax
c00166a9:	68 53 b3 02 c0       	push   0xc002b353
c00166ae:	e8 79 c8 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00166b3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	eb ac                	jmp    c0016667 <LogicalDisk::mount()+0x17>
c00166bb:	31 c0                	xor    eax,eax
c00166bd:	5a                   	pop    edx
c00166be:	5b                   	pop    ebx
c00166bf:	5e                   	pop    esi
c00166c0:	c3                   	ret    
c00166c1:	90                   	nop

c00166c2 <LogicalDisk::unmount()>:
c00166c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166c6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166d0:	c3                   	ret    
c00166d1:	90                   	nop

c00166d2 <LogicalDisk::eject()>:
c00166d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00166dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00166de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166e2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00166e5:	90                   	nop

c00166e6 <LogicalDisk::unassignDriveLetter()>:
c00166e6:	57                   	push   edi
c00166e7:	56                   	push   esi
c00166e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166ec:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00166f3:	84 c9                	test   cl,cl
c00166f5:	75 0f                	jne    c0016706 <LogicalDisk::unassignDriveLetter()+0x20>
c00166f7:	c7 44 24 0c 6e b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b36e
c00166ff:	5e                   	pop    esi
c0016700:	5f                   	pop    edi
c0016701:	e9 c7 3e 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>
c0016706:	83 e9 41             	sub    ecx,0x41
c0016709:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016710:	b8 01 00 00 00       	mov    eax,0x1
c0016715:	c7 04 8d 00 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1400],0x0
c0016720:	d3 e0                	shl    eax,cl
c0016722:	89 c7                	mov    edi,eax
c0016724:	f7 d0                	not    eax
c0016726:	c1 ff 1f             	sar    edi,0x1f
c0016729:	21 05 e0 eb 02 c0    	and    DWORD PTR ds:0xc002ebe0,eax
c001672f:	89 fe                	mov    esi,edi
c0016731:	f7 d6                	not    esi
c0016733:	21 35 e4 eb 02 c0    	and    DWORD PTR ds:0xc002ebe4,esi
c0016739:	5e                   	pop    esi
c001673a:	5f                   	pop    edi
c001673b:	c3                   	ret    

c001673c <LogicalDisk::read(unsigned long long, int, void*)>:
c001673c:	57                   	push   edi
c001673d:	56                   	push   esi
c001673e:	53                   	push   ebx
c001673f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016743:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016747:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001674b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001674f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016755:	77 41                	ja     c0016798 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016757:	99                   	cdq    
c0016758:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001675e:	01 c8                	add    eax,ecx
c0016760:	11 da                	adc    edx,ebx
c0016762:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016768:	19 d7                	sbb    edi,edx
c001676a:	72 33                	jb     c001679f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001676c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016772:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016778:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001677c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016780:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016786:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001678c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016790:	5b                   	pop    ebx
c0016791:	5e                   	pop    esi
c0016792:	5f                   	pop    edi
c0016793:	e9 b0 0a 00 00       	jmp    c0017248 <VCache::read(unsigned long long, int, void*)>
c0016798:	b8 05 00 00 00       	mov    eax,0x5
c001679d:	eb 05                	jmp    c00167a4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001679f:	b8 07 00 00 00       	mov    eax,0x7
c00167a4:	5b                   	pop    ebx
c00167a5:	5e                   	pop    esi
c00167a6:	5f                   	pop    edi
c00167a7:	c3                   	ret    

c00167a8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167a8:	57                   	push   edi
c00167a9:	56                   	push   esi
c00167aa:	53                   	push   ebx
c00167ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167c1:	77 41                	ja     c0016804 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167c3:	99                   	cdq    
c00167c4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167ca:	01 c8                	add    eax,ecx
c00167cc:	11 da                	adc    edx,ebx
c00167ce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167d4:	19 d7                	sbb    edi,edx
c00167d6:	72 33                	jb     c001680b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167d8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167de:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167e8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167ec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167fc:	5b                   	pop    ebx
c00167fd:	5e                   	pop    esi
c00167fe:	5f                   	pop    edi
c00167ff:	e9 4e 09 00 00       	jmp    c0017152 <VCache::write(unsigned long long, int, void*)>
c0016804:	b8 05 00 00 00       	mov    eax,0x5
c0016809:	eb 05                	jmp    c0016810 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001680b:	b8 07 00 00 00       	mov    eax,0x7
c0016810:	5b                   	pop    ebx
c0016811:	5e                   	pop    esi
c0016812:	5f                   	pop    edi
c0016813:	c3                   	ret    

c0016814 <Mouse::Mouse(char const*)>:
c0016814:	83 ec 0c             	sub    esp,0xc
c0016817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681b:	83 ec 08             	sub    esp,0x8
c001681e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016822:	50                   	push   eax
c0016823:	e8 1a dd ff ff       	call   c0014542 <Device::Device(char const*)>
c0016828:	83 c4 10             	add    esp,0x10
c001682b:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c0016830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016834:	89 10                	mov    DWORD PTR [eax],edx
c0016836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016844:	90                   	nop
c0016845:	83 c4 0c             	add    esp,0xc
c0016848:	c3                   	ret    
c0016849:	90                   	nop

c001684a <Mouse::~Mouse()>:
c001684a:	83 ec 0c             	sub    esp,0xc
c001684d:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c0016852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016856:	89 10                	mov    DWORD PTR [eax],edx
c0016858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	50                   	push   eax
c0016860:	e8 bf d9 ff ff       	call   c0014224 <Device::~Device()>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	90                   	nop
c0016869:	83 c4 0c             	add    esp,0xc
c001686c:	c3                   	ret    
c001686d:	90                   	nop

c001686e <Mouse::~Mouse()>:
c001686e:	83 ec 0c             	sub    esp,0xc
c0016871:	83 ec 0c             	sub    esp,0xc
c0016874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016878:	e8 cd ff ff ff       	call   c001684a <Mouse::~Mouse()>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	83 ec 08             	sub    esp,0x8
c0016883:	68 58 01 00 00       	push   0x158
c0016888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001688c:	e8 bb c5 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	83 c4 0c             	add    esp,0xc
c0016897:	c3                   	ret    

c0016898 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016898:	55                   	push   ebp
c0016899:	57                   	push   edi
c001689a:	56                   	push   esi
c001689b:	53                   	push   ebx
c001689c:	81 ec 28 01 00 00    	sub    esp,0x128
c00168a2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168a9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168b7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168c6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168cd:	e8 6c dd ff ff       	call   c001463e <Device::getName()>
c00168d2:	5a                   	pop    edx
c00168d3:	59                   	pop    ecx
c00168d4:	50                   	push   eax
c00168d5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168d9:	55                   	push   ebp
c00168da:	e8 55 9f fe ff       	call   c0000834 <strcpy>
c00168df:	5b                   	pop    ebx
c00168e0:	58                   	pop    eax
c00168e1:	68 e8 b3 02 c0       	push   0xc002b3e8
c00168e6:	55                   	push   ebp
c00168e7:	e8 88 a0 fe ff       	call   c0000974 <strcat>
c00168ec:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00168f3:	e8 48 8f ff ff       	call   c000f840 <malloc>
c00168f8:	83 c4 0c             	add    esp,0xc
c00168fb:	89 c3                	mov    ebx,eax
c00168fd:	57                   	push   edi
c00168fe:	56                   	push   esi
c00168ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016903:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016907:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001690e:	55                   	push   ebp
c001690f:	50                   	push   eax
c0016910:	e8 cf fb ff ff       	call   c00164e4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016915:	83 c4 14             	add    esp,0x14
c0016918:	53                   	push   ebx
c0016919:	e8 7c fc ff ff       	call   c001659a <LogicalDisk::assignDriveLetter()>
c001691e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016921:	89 c6                	mov    esi,eax
c0016923:	e8 28 fd ff ff       	call   c0016650 <LogicalDisk::mount()>
c0016928:	58                   	pop    eax
c0016929:	5a                   	pop    edx
c001692a:	53                   	push   ebx
c001692b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016932:	e8 1b da ff ff       	call   c0014352 <Device::addChild(Device*)>
c0016937:	59                   	pop    ecx
c0016938:	89 f0                	mov    eax,esi
c001693a:	5b                   	pop    ebx
c001693b:	0f be f0             	movsx  esi,al
c001693e:	56                   	push   esi
c001693f:	68 f3 b3 02 c0       	push   0xc002b3f3
c0016944:	e8 e3 c5 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0016949:	81 c4 2c 01 00 00    	add    esp,0x12c
c001694f:	5b                   	pop    ebx
c0016950:	5e                   	pop    esi
c0016951:	5f                   	pop    edi
c0016952:	5d                   	pop    ebp
c0016953:	c3                   	ret    

c0016954 <createPartitionsForDisk(PhysicalDisk*)>:
c0016954:	55                   	push   ebp
c0016955:	57                   	push   edi
c0016956:	56                   	push   esi
c0016957:	53                   	push   ebx
c0016958:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001695e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016965:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001696b:	3d 00 02 00 00       	cmp    eax,0x200
c0016970:	74 27                	je     c0016999 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016972:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016978:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001697e:	83 ec 10             	sub    esp,0x10
c0016981:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016985:	99                   	cdq    
c0016986:	c1 e6 0a             	shl    esi,0xa
c0016989:	52                   	push   edx
c001698a:	89 fd                	mov    ebp,edi
c001698c:	50                   	push   eax
c001698d:	55                   	push   ebp
c001698e:	56                   	push   esi
c001698f:	e8 38 00 01 00       	call   c00269cc <__udivdi3>
c0016994:	e9 b1 00 00 00       	jmp    c0016a4a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001699e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169a2:	56                   	push   esi
c00169a3:	6a 01                	push   0x1
c00169a5:	6a 00                	push   0x0
c00169a7:	6a 00                	push   0x0
c00169a9:	53                   	push   ebx
c00169aa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169ad:	83 c4 20             	add    esp,0x20
c00169b0:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169b8:	75 0a                	jne    c00169c4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169ba:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169c2:	74 2c                	je     c00169f0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169c4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169ca:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169d0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169d6:	83 ec 10             	sub    esp,0x10
c00169d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169dd:	89 f7                	mov    edi,esi
c00169df:	c1 e0 0a             	shl    eax,0xa
c00169e2:	c1 ff 1f             	sar    edi,0x1f
c00169e5:	57                   	push   edi
c00169e6:	56                   	push   esi
c00169e7:	52                   	push   edx
c00169e8:	50                   	push   eax
c00169e9:	e8 de ff 00 00       	call   c00269cc <__udivdi3>
c00169ee:	eb 5a                	jmp    c0016a4a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169f0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00169f7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00169fe:	83 e1 7f             	and    ecx,0x7f
c0016a01:	83 e0 7f             	and    eax,0x7f
c0016a04:	01 c1                	add    ecx,eax
c0016a06:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a0d:	83 e0 7f             	and    eax,0x7f
c0016a10:	01 c1                	add    ecx,eax
c0016a12:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a19:	83 e0 7f             	and    eax,0x7f
c0016a1c:	00 c1                	add    cl,al
c0016a1e:	74 41                	je     c0016a61 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a20:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a26:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a2c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a32:	83 ec 10             	sub    esp,0x10
c0016a35:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a39:	89 f7                	mov    edi,esi
c0016a3b:	c1 e0 0a             	shl    eax,0xa
c0016a3e:	c1 ff 1f             	sar    edi,0x1f
c0016a41:	57                   	push   edi
c0016a42:	56                   	push   esi
c0016a43:	52                   	push   edx
c0016a44:	50                   	push   eax
c0016a45:	e8 82 ff 00 00       	call   c00269cc <__udivdi3>
c0016a4a:	83 c4 14             	add    esp,0x14
c0016a4d:	52                   	push   edx
c0016a4e:	50                   	push   eax
c0016a4f:	6a 00                	push   0x0
c0016a51:	6a 00                	push   0x0
c0016a53:	53                   	push   ebx
c0016a54:	e8 3f fe ff ff       	call   c0016898 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a59:	83 c4 20             	add    esp,0x20
c0016a5c:	e9 79 01 00 00       	jmp    c0016bda <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a61:	89 f0                	mov    eax,esi
c0016a63:	31 f6                	xor    esi,esi
c0016a65:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a6c:	75 02                	jne    c0016a70 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a6e:	89 f1                	mov    ecx,esi
c0016a70:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a77:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a7e:	c1 e2 08             	shl    edx,0x8
c0016a81:	c1 e7 10             	shl    edi,0x10
c0016a84:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a8c:	09 fa                	or     edx,edi
c0016a8e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a96:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a9d:	83 c0 10             	add    eax,0x10
c0016aa0:	09 fa                	or     edx,edi
c0016aa2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016aa9:	c1 e7 18             	shl    edi,0x18
c0016aac:	09 fa                	or     edx,edi
c0016aae:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ab5:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016ab9:	c1 e7 10             	shl    edi,0x10
c0016abc:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016ac3:	c1 e2 08             	shl    edx,0x8
c0016ac6:	09 fa                	or     edx,edi
c0016ac8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016acf:	09 fa                	or     edx,edi
c0016ad1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ad8:	c1 e7 18             	shl    edi,0x18
c0016adb:	09 fa                	or     edx,edi
c0016add:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016ae1:	46                   	inc    esi
c0016ae2:	83 fe 04             	cmp    esi,0x4
c0016ae5:	0f 85 7a ff ff ff    	jne    c0016a65 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aef:	83 f0 01             	xor    eax,0x1
c0016af2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016af6:	75 57                	jne    c0016b4f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016af8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016afc:	83 f0 01             	xor    eax,0x1
c0016aff:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b03:	75 4a                	jne    c0016b4f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b05:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b09:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b19:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b1f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b25:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b2f:	89 f7                	mov    edi,esi
c0016b31:	c1 e0 0a             	shl    eax,0xa
c0016b34:	c1 ff 1f             	sar    edi,0x1f
c0016b37:	57                   	push   edi
c0016b38:	56                   	push   esi
c0016b39:	52                   	push   edx
c0016b3a:	50                   	push   eax
c0016b3b:	e8 8c fe 00 00       	call   c00269cc <__udivdi3>
c0016b40:	83 c4 10             	add    esp,0x10
c0016b43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b4b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b4f:	84 c9                	test   cl,cl
c0016b51:	74 53                	je     c0016ba6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b53:	0f b6 c9             	movzx  ecx,cl
c0016b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b5e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b62:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b6e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b72:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b86:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b8a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b8e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b92:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b9e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016ba2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016ba6:	31 ed                	xor    ebp,ebp
c0016ba8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bac:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bb0:	89 f8                	mov    eax,edi
c0016bb2:	09 f0                	or     eax,esi
c0016bb4:	74 1e                	je     c0016bd4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bb6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bbe:	89 d1                	mov    ecx,edx
c0016bc0:	09 c1                	or     ecx,eax
c0016bc2:	74 10                	je     c0016bd4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	57                   	push   edi
c0016bc8:	56                   	push   esi
c0016bc9:	52                   	push   edx
c0016bca:	50                   	push   eax
c0016bcb:	53                   	push   ebx
c0016bcc:	e8 c7 fc ff ff       	call   c0016898 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bd1:	83 c4 20             	add    esp,0x20
c0016bd4:	45                   	inc    ebp
c0016bd5:	83 fd 04             	cmp    ebp,0x4
c0016bd8:	75 ce                	jne    c0016ba8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016bda:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016be0:	5b                   	pop    ebx
c0016be1:	5e                   	pop    esi
c0016be2:	5f                   	pop    edi
c0016be3:	5d                   	pop    ebp
c0016be4:	c3                   	ret    
c0016be5:	90                   	nop

c0016be6 <Serial::Serial(char const*)>:
c0016be6:	83 ec 0c             	sub    esp,0xc
c0016be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bed:	83 ec 08             	sub    esp,0x8
c0016bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf4:	50                   	push   eax
c0016bf5:	e8 48 d9 ff ff       	call   c0014542 <Device::Device(char const*)>
c0016bfa:	83 c4 10             	add    esp,0x10
c0016bfd:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c0016c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c06:	89 10                	mov    DWORD PTR [eax],edx
c0016c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c16:	90                   	nop
c0016c17:	83 c4 0c             	add    esp,0xc
c0016c1a:	c3                   	ret    
c0016c1b:	90                   	nop

c0016c1c <Serial::~Serial()>:
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c0016c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c28:	89 10                	mov    DWORD PTR [eax],edx
c0016c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2e:	83 ec 0c             	sub    esp,0xc
c0016c31:	50                   	push   eax
c0016c32:	e8 ed d5 ff ff       	call   c0014224 <Device::~Device()>
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	90                   	nop
c0016c3b:	83 c4 0c             	add    esp,0xc
c0016c3e:	c3                   	ret    
c0016c3f:	90                   	nop

c0016c40 <Serial::~Serial()>:
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	83 ec 0c             	sub    esp,0xc
c0016c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c4a:	e8 cd ff ff ff       	call   c0016c1c <Serial::~Serial()>
c0016c4f:	83 c4 10             	add    esp,0x10
c0016c52:	83 ec 08             	sub    esp,0x8
c0016c55:	68 58 01 00 00       	push   0x158
c0016c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c5e:	e8 e9 c1 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	83 c4 0c             	add    esp,0xc
c0016c69:	c3                   	ret    

c0016c6a <Timer::Timer(char const*)>:
c0016c6a:	83 ec 0c             	sub    esp,0xc
c0016c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c71:	83 ec 08             	sub    esp,0x8
c0016c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c78:	50                   	push   eax
c0016c79:	e8 c4 d8 ff ff       	call   c0014542 <Device::Device(char const*)>
c0016c7e:	83 c4 10             	add    esp,0x10
c0016c81:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0016c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8a:	89 10                	mov    DWORD PTR [eax],edx
c0016c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c90:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c9a:	90                   	nop
c0016c9b:	83 c4 0c             	add    esp,0xc
c0016c9e:	c3                   	ret    
c0016c9f:	90                   	nop

c0016ca0 <Timer::~Timer()>:
c0016ca0:	83 ec 0c             	sub    esp,0xc
c0016ca3:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0016ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cac:	89 10                	mov    DWORD PTR [eax],edx
c0016cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb2:	83 ec 0c             	sub    esp,0xc
c0016cb5:	50                   	push   eax
c0016cb6:	e8 69 d5 ff ff       	call   c0014224 <Device::~Device()>
c0016cbb:	83 c4 10             	add    esp,0x10
c0016cbe:	90                   	nop
c0016cbf:	83 c4 0c             	add    esp,0xc
c0016cc2:	c3                   	ret    
c0016cc3:	90                   	nop

c0016cc4 <Timer::~Timer()>:
c0016cc4:	83 ec 0c             	sub    esp,0xc
c0016cc7:	83 ec 0c             	sub    esp,0xc
c0016cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cce:	e8 cd ff ff ff       	call   c0016ca0 <Timer::~Timer()>
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	83 ec 08             	sub    esp,0x8
c0016cd9:	68 5c 01 00 00       	push   0x15c
c0016cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce2:	e8 65 c1 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	83 c4 0c             	add    esp,0xc
c0016ced:	c3                   	ret    

c0016cee <Timer::read()>:
c0016cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016cf8:	c3                   	ret    

c0016cf9 <timerHandler(unsigned long long)>:
c0016cf9:	55                   	push   ebp
c0016cfa:	57                   	push   edi
c0016cfb:	56                   	push   esi
c0016cfc:	53                   	push   ebx
c0016cfd:	83 ec 0c             	sub    esp,0xc
c0016d00:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d04:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d08:	01 35 70 ec 02 c0    	add    DWORD PTR ds:0xc002ec70,esi
c0016d0e:	11 3d 74 ec 02 c0    	adc    DWORD PTR ds:0xc002ec74,edi
c0016d14:	80 3d ed e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ed,0x0
c0016d1b:	0f 84 07 01 00 00    	je     c0016e28 <timerHandler(unsigned long long)+0x12f>
c0016d21:	e8 f3 70 00 00       	call   c001de19 <lockStuff()>
c0016d26:	83 ec 0c             	sub    esp,0xc
c0016d29:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016d2e:	e8 0b 1d 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d33:	c7 04 24 3c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b3c
c0016d3a:	89 c3                	mov    ebx,eax
c0016d3c:	e8 05 1d 01 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d41:	83 c4 10             	add    esp,0x10
c0016d44:	84 c0                	test   al,al
c0016d46:	74 60                	je     c0016da8 <timerHandler(unsigned long long)+0xaf>
c0016d48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d4e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d51:	85 c0                	test   eax,eax
c0016d53:	0f 85 91 00 00 00    	jne    c0016dea <timerHandler(unsigned long long)+0xf1>
c0016d59:	e9 be 00 00 00       	jmp    c0016e1c <timerHandler(unsigned long long)+0x123>
c0016d5e:	83 ec 0c             	sub    esp,0xc
c0016d61:	55                   	push   ebp
c0016d62:	e8 a3 76 00 00       	call   c001e40a <unblockTask(ThreadControlBlock*)>
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	39 eb                	cmp    ebx,ebp
c0016d6c:	75 12                	jne    c0016d80 <timerHandler(unsigned long long)+0x87>
c0016d6e:	83 ec 0c             	sub    esp,0xc
c0016d71:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016d76:	e8 c3 1c 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d7b:	89 c3                	mov    ebx,eax
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	83 ec 0c             	sub    esp,0xc
c0016d83:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016d88:	e8 b9 1c 01 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	84 c0                	test   al,al
c0016d92:	75 b4                	jne    c0016d48 <timerHandler(unsigned long long)+0x4f>
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016d9c:	e8 9d 1c 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016da1:	83 c4 10             	add    esp,0x10
c0016da4:	39 d8                	cmp    eax,ebx
c0016da6:	74 a0                	je     c0016d48 <timerHandler(unsigned long long)+0x4f>
c0016da8:	83 ec 0c             	sub    esp,0xc
c0016dab:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016db0:	e8 89 1c 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016db5:	c7 04 24 3c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b3c
c0016dbc:	89 c5                	mov    ebp,eax
c0016dbe:	e8 9f 1c 01 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016dc3:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016dc6:	83 c4 10             	add    esp,0x10
c0016dc9:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dcc:	39 15 70 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec70,edx
c0016dd2:	a1 74 ec 02 c0       	mov    eax,ds:0xc002ec74
c0016dd7:	19 c8                	sbb    eax,ecx
c0016dd9:	73 83                	jae    c0016d5e <timerHandler(unsigned long long)+0x65>
c0016ddb:	50                   	push   eax
c0016ddc:	50                   	push   eax
c0016ddd:	55                   	push   ebp
c0016dde:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016de3:	e8 28 1d 01 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016de8:	eb 93                	jmp    c0016d7d <timerHandler(unsigned long long)+0x84>
c0016dea:	80 3d ec e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ec,0x0
c0016df1:	74 29                	je     c0016e1c <timerHandler(unsigned long long)+0x123>
c0016df3:	39 c6                	cmp    esi,eax
c0016df5:	bb 00 00 00 00       	mov    ebx,0x0
c0016dfa:	19 df                	sbb    edi,ebx
c0016dfc:	72 19                	jb     c0016e17 <timerHandler(unsigned long long)+0x11e>
c0016dfe:	e8 ef 6f 00 00       	call   c001ddf2 <lockScheduler()>
c0016e03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e08:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e0b:	e8 1e 73 00 00       	call   c001e12e <schedule()>
c0016e10:	e8 df 6f 00 00       	call   c001ddf4 <unlockScheduler()>
c0016e15:	eb 05                	jmp    c0016e1c <timerHandler(unsigned long long)+0x123>
c0016e17:	29 f0                	sub    eax,esi
c0016e19:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e1c:	83 c4 0c             	add    esp,0xc
c0016e1f:	5b                   	pop    ebx
c0016e20:	5e                   	pop    esi
c0016e21:	5f                   	pop    edi
c0016e22:	5d                   	pop    ebp
c0016e23:	e9 8b 73 00 00       	jmp    c001e1b3 <unlockStuff()>
c0016e28:	83 c4 0c             	add    esp,0xc
c0016e2b:	5b                   	pop    ebx
c0016e2c:	5e                   	pop    esi
c0016e2d:	5f                   	pop    edi
c0016e2e:	5d                   	pop    ebp
c0016e2f:	c3                   	ret    

c0016e30 <setupTimer(int)>:
c0016e30:	57                   	push   edi
c0016e31:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0016e36:	56                   	push   esi
c0016e37:	53                   	push   ebx
c0016e38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e42:	83 ec 0c             	sub    esp,0xc
c0016e45:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e4b:	e8 ee d7 ff ff       	call   c001463e <Device::getName()>
c0016e50:	83 c4 10             	add    esp,0x10
c0016e53:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e56:	0f 85 8d 00 00 00    	jne    c0016ee9 <setupTimer(int)+0xb9>
c0016e5c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0016e61:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e68:	74 7f                	je     c0016ee9 <setupTimer(int)+0xb9>
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	68 5c 01 00 00       	push   0x15c
c0016e72:	e8 c9 89 ff ff       	call   c000f840 <malloc>
c0016e77:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e7a:	89 c3                	mov    ebx,eax
c0016e7c:	e8 2b f7 00 00       	call   c00265ac <PIT::PIT()>
c0016e81:	59                   	pop    ecx
c0016e82:	5f                   	pop    edi
c0016e83:	53                   	push   ebx
c0016e84:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0016e8a:	e8 c3 d4 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0016e8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e91:	6a 00                	push   0x0
c0016e93:	6a 00                	push   0x0
c0016e95:	56                   	push   esi
c0016e96:	53                   	push   ebx
c0016e97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e9a:	83 c4 14             	add    esp,0x14
c0016e9d:	68 60 01 00 00       	push   0x160
c0016ea2:	e8 99 89 ff ff       	call   c000f840 <malloc>
c0016ea7:	89 04 24             	mov    DWORD PTR [esp],eax
c0016eaa:	89 c7                	mov    edi,eax
c0016eac:	e8 ab f5 00 00       	call   c002645c <APICTimer::APICTimer()>
c0016eb1:	6a 00                	push   0x0
c0016eb3:	6a 00                	push   0x0
c0016eb5:	56                   	push   esi
c0016eb6:	57                   	push   edi
c0016eb7:	e8 a2 f4 00 00       	call   c002635e <APICTimer::open(int, int, void*)>
c0016ebc:	83 c4 20             	add    esp,0x20
c0016ebf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ec1:	6a 00                	push   0x0
c0016ec3:	6a 00                	push   0x0
c0016ec5:	6a 00                	push   0x0
c0016ec7:	53                   	push   ebx
c0016ec8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ecb:	58                   	pop    eax
c0016ecc:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0016ed1:	5a                   	pop    edx
c0016ed2:	57                   	push   edi
c0016ed3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ed9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016edf:	e8 6e d4 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0016ee4:	83 c4 10             	add    esp,0x10
c0016ee7:	eb 33                	jmp    c0016f1c <setupTimer(int)+0xec>
c0016ee9:	83 ec 0c             	sub    esp,0xc
c0016eec:	68 5c 01 00 00       	push   0x15c
c0016ef1:	e8 4a 89 ff ff       	call   c000f840 <malloc>
c0016ef6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ef9:	89 c3                	mov    ebx,eax
c0016efb:	e8 ac f6 00 00       	call   c00265ac <PIT::PIT()>
c0016f00:	58                   	pop    eax
c0016f01:	5a                   	pop    edx
c0016f02:	53                   	push   ebx
c0016f03:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0016f09:	e8 44 d4 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0016f0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f10:	6a 00                	push   0x0
c0016f12:	6a 00                	push   0x0
c0016f14:	56                   	push   esi
c0016f15:	53                   	push   ebx
c0016f16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f19:	83 c4 20             	add    esp,0x20
c0016f1c:	89 d8                	mov    eax,ebx
c0016f1e:	5b                   	pop    ebx
c0016f1f:	5e                   	pop    esi
c0016f20:	5f                   	pop    edi
c0016f21:	c3                   	ret    

c0016f22 <VCache::VCache(PhysicalDisk*)>:
c0016f22:	53                   	push   ebx
c0016f23:	83 ec 18             	sub    esp,0x18
c0016f26:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c0016f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2f:	89 10                	mov    DWORD PTR [eax],edx
c0016f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f35:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f40:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f52:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f64:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f82:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f89:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f94:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fac:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fb3:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fbb:	83 ec 0c             	sub    esp,0xc
c0016fbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fc2:	e8 79 88 ff ff       	call   c000f840 <malloc>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	89 c3                	mov    ebx,eax
c0016fcc:	83 ec 0c             	sub    esp,0xc
c0016fcf:	53                   	push   ebx
c0016fd0:	e8 3d 6f 00 00       	call   c001df12 <Mutex::Mutex()>
c0016fd5:	83 c4 10             	add    esp,0x10
c0016fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fe7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fee:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016ff5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ff9:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017003:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001700a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017010:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017016:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001701a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001701d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017024:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017028:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001702c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017032:	05 00 01 00 00       	add    eax,0x100
c0017037:	c1 e0 04             	shl    eax,0x4
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	50                   	push   eax
c001703e:	e8 fd 87 ff ff       	call   c000f840 <malloc>
c0017043:	83 c4 10             	add    esp,0x10
c0017046:	89 c2                	mov    edx,eax
c0017048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001704f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017053:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001705a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017062:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017066:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001706c:	c1 e0 07             	shl    eax,0x7
c001706f:	83 ec 0c             	sub    esp,0xc
c0017072:	50                   	push   eax
c0017073:	e8 c8 87 ff ff       	call   c000f840 <malloc>
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	89 c2                	mov    edx,eax
c001707d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017081:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017084:	90                   	nop
c0017085:	83 c4 18             	add    esp,0x18
c0017088:	5b                   	pop    ebx
c0017089:	c3                   	ret    

c001708a <VCache::invalidateReadBuffer()>:
c001708a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001708e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017094:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017098:	c3                   	ret    
c0017099:	90                   	nop

c001709a <VCache::writeWriteBuffer()>:
c001709a:	53                   	push   ebx
c001709b:	83 ec 14             	sub    esp,0x14
c001709e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00170a7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170ad:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170b0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170b3:	50                   	push   eax
c00170b4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170b7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170be:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170c5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170c9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170d0:	83 c4 28             	add    esp,0x28
c00170d3:	5b                   	pop    ebx
c00170d4:	c3                   	ret    
c00170d5:	90                   	nop

c00170d6 <VCache::~VCache()>:
c00170d6:	83 ec 0c             	sub    esp,0xc
c00170d9:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c00170de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170e2:	89 10                	mov    DWORD PTR [eax],edx
c00170e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170e8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00170eb:	84 c0                	test   al,al
c00170ed:	74 0f                	je     c00170fe <VCache::~VCache()+0x28>
c00170ef:	83 ec 0c             	sub    esp,0xc
c00170f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170f6:	e8 9f ff ff ff       	call   c001709a <VCache::writeWriteBuffer()>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017102:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017105:	83 ec 0c             	sub    esp,0xc
c0017108:	50                   	push   eax
c0017109:	e8 42 87 ff ff       	call   c000f850 <free>
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017115:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017118:	83 ec 0c             	sub    esp,0xc
c001711b:	50                   	push   eax
c001711c:	e8 2f 87 ff ff       	call   c000f850 <free>
c0017121:	83 c4 10             	add    esp,0x10
c0017124:	90                   	nop
c0017125:	83 c4 0c             	add    esp,0xc
c0017128:	c3                   	ret    
c0017129:	90                   	nop

c001712a <VCache::~VCache()>:
c001712a:	83 ec 0c             	sub    esp,0xc
c001712d:	83 ec 0c             	sub    esp,0xc
c0017130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017134:	e8 9d ff ff ff       	call   c00170d6 <VCache::~VCache()>
c0017139:	83 c4 10             	add    esp,0x10
c001713c:	83 ec 08             	sub    esp,0x8
c001713f:	6a 44                	push   0x44
c0017141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017145:	e8 02 bd ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c001714a:	83 c4 10             	add    esp,0x10
c001714d:	83 c4 0c             	add    esp,0xc
c0017150:	c3                   	ret    
c0017151:	90                   	nop

c0017152 <VCache::write(unsigned long long, int, void*)>:
c0017152:	55                   	push   ebp
c0017153:	57                   	push   edi
c0017154:	56                   	push   esi
c0017155:	53                   	push   ebx
c0017156:	83 ec 28             	sub    esp,0x28
c0017159:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001715d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017161:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017165:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017169:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001716c:	e8 03 72 00 00       	call   c001e374 <Semaphore::acquire()>
c0017171:	83 c4 10             	add    esp,0x10
c0017174:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017178:	74 0c                	je     c0017186 <VCache::write(unsigned long long, int, void*)+0x34>
c001717a:	83 ec 0c             	sub    esp,0xc
c001717d:	53                   	push   ebx
c001717e:	e8 07 ff ff ff       	call   c001708a <VCache::invalidateReadBuffer()>
c0017183:	83 c4 10             	add    esp,0x10
c0017186:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001718a:	74 66                	je     c00171f2 <VCache::write(unsigned long long, int, void*)+0xa0>
c001718c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001718f:	99                   	cdq    
c0017190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017194:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017197:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001719a:	89 c1                	mov    ecx,eax
c001719c:	89 d0                	mov    eax,edx
c001719e:	31 f1                	xor    ecx,esi
c00171a0:	31 f8                	xor    eax,edi
c00171a2:	89 ca                	mov    edx,ecx
c00171a4:	09 c2                	or     edx,eax
c00171a6:	75 3e                	jne    c00171e6 <VCache::write(unsigned long long, int, void*)+0x94>
c00171a8:	83 fd 01             	cmp    ebp,0x1
c00171ab:	75 39                	jne    c00171e6 <VCache::write(unsigned long long, int, void*)+0x94>
c00171ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171b6:	51                   	push   ecx
c00171b7:	50                   	push   eax
c00171b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171c0:	0f af c8             	imul   ecx,eax
c00171c3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171c6:	51                   	push   ecx
c00171c7:	e8 78 95 fe ff       	call   c0000744 <memcpy>
c00171cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	40                   	inc    eax
c00171d3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171d6:	83 c0 80             	add    eax,0xffffff80
c00171d9:	75 57                	jne    c0017232 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171db:	83 ec 0c             	sub    esp,0xc
c00171de:	53                   	push   ebx
c00171df:	e8 b6 fe ff ff       	call   c001709a <VCache::writeWriteBuffer()>
c00171e4:	eb 34                	jmp    c001721a <VCache::write(unsigned long long, int, void*)+0xc8>
c00171e6:	83 ec 0c             	sub    esp,0xc
c00171e9:	53                   	push   ebx
c00171ea:	e8 ab fe ff ff       	call   c001709a <VCache::writeWriteBuffer()>
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171f5:	83 fd 7f             	cmp    ebp,0x7f
c00171f8:	7f 25                	jg     c001721f <VCache::write(unsigned long long, int, void*)+0xcd>
c00171fa:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171fd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017200:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017203:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017207:	52                   	push   edx
c0017208:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001720e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017212:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017215:	e8 2a 95 fe ff       	call   c0000744 <memcpy>
c001721a:	83 c4 10             	add    esp,0x10
c001721d:	eb 13                	jmp    c0017232 <VCache::write(unsigned long long, int, void*)+0xe0>
c001721f:	83 ec 0c             	sub    esp,0xc
c0017222:	8b 10                	mov    edx,DWORD PTR [eax]
c0017224:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017228:	55                   	push   ebp
c0017229:	57                   	push   edi
c001722a:	56                   	push   esi
c001722b:	50                   	push   eax
c001722c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001722f:	83 c4 20             	add    esp,0x20
c0017232:	83 ec 0c             	sub    esp,0xc
c0017235:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017238:	e8 e5 76 00 00       	call   c001e922 <Semaphore::release()>
c001723d:	83 c4 2c             	add    esp,0x2c
c0017240:	31 c0                	xor    eax,eax
c0017242:	5b                   	pop    ebx
c0017243:	5e                   	pop    esi
c0017244:	5f                   	pop    edi
c0017245:	5d                   	pop    ebp
c0017246:	c3                   	ret    
c0017247:	90                   	nop

c0017248 <VCache::read(unsigned long long, int, void*)>:
c0017248:	55                   	push   ebp
c0017249:	57                   	push   edi
c001724a:	56                   	push   esi
c001724b:	53                   	push   ebx
c001724c:	83 ec 28             	sub    esp,0x28
c001724f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017253:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017257:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001725b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001725f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017263:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017267:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001726b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001726e:	e8 01 71 00 00       	call   c001e374 <Semaphore::acquire()>
c0017273:	83 c4 10             	add    esp,0x10
c0017276:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001727a:	74 0c                	je     c0017288 <VCache::read(unsigned long long, int, void*)+0x40>
c001727c:	83 ec 0c             	sub    esp,0xc
c001727f:	53                   	push   ebx
c0017280:	e8 15 fe ff ff       	call   c001709a <VCache::writeWriteBuffer()>
c0017285:	83 c4 10             	add    esp,0x10
c0017288:	83 fe 01             	cmp    esi,0x1
c001728b:	0f 85 80 00 00 00    	jne    c0017311 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017294:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001729b:	75 74                	jne    c0017311 <VCache::read(unsigned long long, int, void*)+0xc9>
c001729d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172a0:	89 d1                	mov    ecx,edx
c00172a2:	f7 d9                	neg    ecx
c00172a4:	89 cf                	mov    edi,ecx
c00172a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172aa:	c1 ff 1f             	sar    edi,0x1f
c00172ad:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172b0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172b4:	89 ce                	mov    esi,ecx
c00172b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172ba:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172be:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172c2:	89 cf                	mov    edi,ecx
c00172c4:	74 0a                	je     c00172d0 <VCache::read(unsigned long long, int, void*)+0x88>
c00172c6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172c9:	75 05                	jne    c00172d0 <VCache::read(unsigned long long, int, void*)+0x88>
c00172cb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172ce:	74 1c                	je     c00172ec <VCache::read(unsigned long long, int, void*)+0xa4>
c00172d0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172d4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172d7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172da:	83 ec 0c             	sub    esp,0xc
c00172dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172df:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00172e2:	52                   	push   edx
c00172e3:	57                   	push   edi
c00172e4:	56                   	push   esi
c00172e5:	50                   	push   eax
c00172e6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00172e9:	83 c4 20             	add    esp,0x20
c00172ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ef:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172f5:	50                   	push   eax
c00172f6:	52                   	push   edx
c00172f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172fa:	48                   	dec    eax
c00172fb:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172ff:	0f af c2             	imul   eax,edx
c0017302:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017305:	50                   	push   eax
c0017306:	55                   	push   ebp
c0017307:	e8 38 94 fe ff       	call   c0000744 <memcpy>
c001730c:	83 c4 10             	add    esp,0x10
c001730f:	eb 21                	jmp    c0017332 <VCache::read(unsigned long long, int, void*)+0xea>
c0017311:	83 ec 0c             	sub    esp,0xc
c0017314:	53                   	push   ebx
c0017315:	e8 70 fd ff ff       	call   c001708a <VCache::invalidateReadBuffer()>
c001731a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001731d:	8b 10                	mov    edx,DWORD PTR [eax]
c001731f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017322:	56                   	push   esi
c0017323:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017327:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001732b:	50                   	push   eax
c001732c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001732f:	83 c4 20             	add    esp,0x20
c0017332:	83 ec 0c             	sub    esp,0xc
c0017335:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017338:	e8 e5 75 00 00       	call   c001e922 <Semaphore::release()>
c001733d:	83 c4 2c             	add    esp,0x2c
c0017340:	31 c0                	xor    eax,eax
c0017342:	5b                   	pop    ebx
c0017343:	5e                   	pop    esi
c0017344:	5f                   	pop    edi
c0017345:	5d                   	pop    ebp
c0017346:	c3                   	ret    
c0017347:	90                   	nop

c0017348 <Video::putrect(int, int, int, int, unsigned int)>:
c0017348:	55                   	push   ebp
c0017349:	57                   	push   edi
c001734a:	56                   	push   esi
c001734b:	53                   	push   ebx
c001734c:	83 ec 1c             	sub    esp,0x1c
c001734f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017353:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017357:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001735b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001735f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017363:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017367:	01 df                	add    edi,ebx
c0017369:	39 fb                	cmp    ebx,edi
c001736b:	7d 1f                	jge    c001738c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001736d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017371:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017375:	7d 12                	jge    c0017389 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017377:	8b 16                	mov    edx,DWORD PTR [esi]
c0017379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001737d:	53                   	push   ebx
c001737e:	55                   	push   ebp
c001737f:	45                   	inc    ebp
c0017380:	56                   	push   esi
c0017381:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017384:	83 c4 10             	add    esp,0x10
c0017387:	eb e8                	jmp    c0017371 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017389:	43                   	inc    ebx
c001738a:	eb dd                	jmp    c0017369 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001738c:	83 c4 1c             	add    esp,0x1c
c001738f:	5b                   	pop    ebx
c0017390:	5e                   	pop    esi
c0017391:	5f                   	pop    edi
c0017392:	5d                   	pop    ebp
c0017393:	c3                   	ret    

c0017394 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017394:	55                   	push   ebp
c0017395:	57                   	push   edi
c0017396:	31 ff                	xor    edi,edi
c0017398:	56                   	push   esi
c0017399:	53                   	push   ebx
c001739a:	83 ec 1c             	sub    esp,0x1c
c001739d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173a1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173a5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173ac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173b5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173bd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173c0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173c4:	01 f9                	add    ecx,edi
c00173c6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173ca:	7d 2f                	jge    c00173fb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173cc:	31 f6                	xor    esi,esi
c00173ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173d2:	01 f2                	add    edx,esi
c00173d4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173d8:	7d 1a                	jge    c00173f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173dd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00173e0:	46                   	inc    esi
c00173e1:	51                   	push   ecx
c00173e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00173e6:	52                   	push   edx
c00173e7:	55                   	push   ebp
c00173e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173f2:	eb da                	jmp    c00173ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00173f4:	47                   	inc    edi
c00173f5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00173f9:	eb c5                	jmp    c00173c0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173fb:	83 c4 1c             	add    esp,0x1c
c00173fe:	5b                   	pop    ebx
c00173ff:	5e                   	pop    esi
c0017400:	5f                   	pop    edi
c0017401:	5d                   	pop    ebp
c0017402:	c3                   	ret    
c0017403:	90                   	nop

c0017404 <Video::blit(unsigned int*, int, int, int, int)>:
c0017404:	55                   	push   ebp
c0017405:	57                   	push   edi
c0017406:	56                   	push   esi
c0017407:	53                   	push   ebx
c0017408:	83 ec 1c             	sub    esp,0x1c
c001740b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001740f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017413:	85 c0                	test   eax,eax
c0017415:	79 02                	jns    c0017419 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017417:	31 c0                	xor    eax,eax
c0017419:	c1 e0 02             	shl    eax,0x2
c001741c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017420:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017424:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017428:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001742c:	39 d8                	cmp    eax,ebx
c001742e:	7e 49                	jle    c0017479 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017430:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017436:	7c 41                	jl     c0017479 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017438:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001743c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017440:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017444:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017448:	39 f9                	cmp    ecx,edi
c001744a:	7e 22                	jle    c001746e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001744c:	83 c5 04             	add    ebp,0x4
c001744f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017455:	7c 14                	jl     c001746b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017457:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017459:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001745c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017460:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017464:	56                   	push   esi
c0017465:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017468:	83 c4 10             	add    esp,0x10
c001746b:	47                   	inc    edi
c001746c:	eb d2                	jmp    c0017440 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001746e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017472:	43                   	inc    ebx
c0017473:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017477:	eb ab                	jmp    c0017424 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017479:	83 c4 1c             	add    esp,0x1c
c001747c:	5b                   	pop    ebx
c001747d:	5e                   	pop    esi
c001747e:	5f                   	pop    edi
c001747f:	5d                   	pop    ebp
c0017480:	c3                   	ret    
c0017481:	90                   	nop

c0017482 <Video::clearScreen(unsigned int)>:
c0017482:	57                   	push   edi
c0017483:	56                   	push   esi
c0017484:	53                   	push   ebx
c0017485:	31 db                	xor    ebx,ebx
c0017487:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001748b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017491:	7e 1f                	jle    c00174b2 <Video::clearScreen(unsigned int)+0x30>
c0017493:	31 ff                	xor    edi,edi
c0017495:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001749b:	7e 12                	jle    c00174af <Video::clearScreen(unsigned int)+0x2d>
c001749d:	8b 06                	mov    eax,DWORD PTR [esi]
c001749f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174a3:	53                   	push   ebx
c00174a4:	57                   	push   edi
c00174a5:	47                   	inc    edi
c00174a6:	56                   	push   esi
c00174a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174aa:	83 c4 10             	add    esp,0x10
c00174ad:	eb e6                	jmp    c0017495 <Video::clearScreen(unsigned int)+0x13>
c00174af:	43                   	inc    ebx
c00174b0:	eb d9                	jmp    c001748b <Video::clearScreen(unsigned int)+0x9>
c00174b2:	5b                   	pop    ebx
c00174b3:	5e                   	pop    esi
c00174b4:	5f                   	pop    edi
c00174b5:	c3                   	ret    

c00174b6 <Video::putpixel(int, int, unsigned int)>:
c00174b6:	c7 44 24 04 9c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b49c
c00174be:	e9 0a 31 00 00       	jmp    c001a5cd <Krnl::panic(char const*)>
c00174c3:	90                   	nop

c00174c4 <Video::Video(char const*)>:
c00174c4:	83 ec 0c             	sub    esp,0xc
c00174c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174cb:	83 ec 08             	sub    esp,0x8
c00174ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d2:	50                   	push   eax
c00174d3:	e8 6a d0 ff ff       	call   c0014542 <Device::Device(char const*)>
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c00174e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e4:	89 10                	mov    DWORD PTR [eax],edx
c00174e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00174f4:	90                   	nop
c00174f5:	83 c4 0c             	add    esp,0xc
c00174f8:	c3                   	ret    
c00174f9:	90                   	nop

c00174fa <Video::~Video()>:
c00174fa:	83 ec 0c             	sub    esp,0xc
c00174fd:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c0017502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017506:	89 10                	mov    DWORD PTR [eax],edx
c0017508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750c:	83 ec 0c             	sub    esp,0xc
c001750f:	50                   	push   eax
c0017510:	e8 0f cd ff ff       	call   c0014224 <Device::~Device()>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	90                   	nop
c0017519:	83 c4 0c             	add    esp,0xc
c001751c:	c3                   	ret    
c001751d:	90                   	nop

c001751e <Video::~Video()>:
c001751e:	83 ec 0c             	sub    esp,0xc
c0017521:	83 ec 0c             	sub    esp,0xc
c0017524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017528:	e8 cd ff ff ff       	call   c00174fa <Video::~Video()>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	83 ec 08             	sub    esp,0x8
c0017533:	68 64 01 00 00       	push   0x164
c0017538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001753c:	e8 0b b9 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	83 c4 0c             	add    esp,0xc
c0017547:	c3                   	ret    

c0017548 <Video::isMonochrome()>:
c0017548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001754c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017552:	c3                   	ret    
c0017553:	90                   	nop

c0017554 <Video::getWidth()>:
c0017554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017558:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001755e:	c3                   	ret    
c001755f:	90                   	nop

c0017560 <Video::getHeight()>:
c0017560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017564:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001756a:	c3                   	ret    
c001756b:	90                   	nop

c001756c <Video::drawCursor(int, int, unsigned char*, int)>:
c001756c:	55                   	push   ebp
c001756d:	57                   	push   edi
c001756e:	56                   	push   esi
c001756f:	53                   	push   ebx
c0017570:	83 ec 2c             	sub    esp,0x2c
c0017573:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017577:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001757b:	83 f8 01             	cmp    eax,0x1
c001757e:	19 c9                	sbb    ecx,ecx
c0017580:	31 db                	xor    ebx,ebx
c0017582:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017586:	89 cd                	mov    ebp,ecx
c0017588:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017590:	f7 d5                	not    ebp
c0017592:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017598:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001759c:	01 d8                	add    eax,ebx
c001759e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175a2:	56                   	push   esi
c00175a3:	e8 b8 ff ff ff       	call   c0017560 <Video::getHeight()>
c00175a8:	59                   	pop    ecx
c00175a9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175ad:	7e 70                	jle    c001761f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175b3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175b7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175c2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175cd:	89 f8                	mov    eax,edi
c00175cf:	83 c0 20             	add    eax,0x20
c00175d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175d6:	56                   	push   esi
c00175d7:	e8 78 ff ff ff       	call   c0017554 <Video::getWidth()>
c00175dc:	5a                   	pop    edx
c00175dd:	39 c7                	cmp    edi,eax
c00175df:	7d 34                	jge    c0017615 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00175e1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00175e6:	74 05                	je     c00175ed <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00175e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00175ea:	55                   	push   ebp
c00175eb:	eb 0d                	jmp    c00175fa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00175ed:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00175f2:	74 12                	je     c0017606 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00175f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00175f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175fe:	57                   	push   edi
c00175ff:	56                   	push   esi
c0017600:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017603:	83 c4 10             	add    esp,0x10
c0017606:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001760a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001760e:	47                   	inc    edi
c001760f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017613:	75 c1                	jne    c00175d6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017615:	43                   	inc    ebx
c0017616:	83 fb 20             	cmp    ebx,0x20
c0017619:	0f 85 79 ff ff ff    	jne    c0017598 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001761f:	83 c4 2c             	add    esp,0x2c
c0017622:	5b                   	pop    ebx
c0017623:	5e                   	pop    esi
c0017624:	5f                   	pop    edi
c0017625:	5d                   	pop    ebp
c0017626:	c3                   	ret    
c0017627:	90                   	nop

c0017628 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017628:	55                   	push   ebp
c0017629:	57                   	push   edi
c001762a:	56                   	push   esi
c001762b:	53                   	push   ebx
c001762c:	83 ec 28             	sub    esp,0x28
c001762f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017633:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017637:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001763b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001763f:	c1 e7 08             	shl    edi,0x8
c0017642:	01 c7                	add    edi,eax
c0017644:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017648:	c1 e0 08             	shl    eax,0x8
c001764b:	01 d0                	add    eax,edx
c001764d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017655:	0f af c7             	imul   eax,edi
c0017658:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001765f:	50                   	push   eax
c0017660:	e8 db 81 ff ff       	call   c000f840 <malloc>
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	89 c5                	mov    ebp,eax
c001766a:	85 c0                	test   eax,eax
c001766c:	75 15                	jne    c0017683 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001766e:	83 ec 0c             	sub    esp,0xc
c0017671:	68 bd b4 02 c0       	push   0xc002b4bd
c0017676:	e8 b1 b8 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	e9 1c 01 00 00       	jmp    c001779f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017683:	be 12 00 00 00       	mov    esi,0x12
c0017688:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001768c:	74 11                	je     c001769f <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001768e:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017692:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017696:	c1 fe 03             	sar    esi,0x3
c0017699:	0f af f0             	imul   esi,eax
c001769c:	83 c6 12             	add    esi,0x12
c001769f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176a3:	74 04                	je     c00176a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176a5:	85 ff                	test   edi,edi
c00176a7:	75 12                	jne    c00176bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176a9:	83 ec 0c             	sub    esp,0xc
c00176ac:	68 d4 b4 02 c0       	push   0xc002b4d4
c00176b1:	e8 76 b8 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00176b6:	e9 ce 00 00 00       	jmp    c0017789 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176bb:	52                   	push   edx
c00176bc:	52                   	push   edx
c00176bd:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176c1:	50                   	push   eax
c00176c2:	68 e9 b4 02 c0       	push   0xc002b4e9
c00176c7:	e8 60 b8 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00176cc:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176d0:	83 c4 10             	add    esp,0x10
c00176d3:	80 fa 02             	cmp    dl,0x2
c00176d6:	0f 85 98 00 00 00    	jne    c0017774 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00176dc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00176e1:	75 10                	jne    c00176f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176e3:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176e7:	75 0a                	jne    c00176f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00176ec:	83 e8 18             	sub    eax,0x18
c00176ef:	a8 f7                	test   al,0xf7
c00176f1:	74 0a                	je     c00176fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00176f3:	83 ec 0c             	sub    esp,0xc
c00176f6:	68 f6 b4 02 c0       	push   0xc002b4f6
c00176fb:	eb 7f                	jmp    c001777c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017705:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001770d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017711:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017719:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001771d:	75 0c                	jne    c001772b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001771f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017724:	c1 e0 18             	shl    eax,0x18
c0017727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001772b:	41                   	inc    ecx
c001772c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017731:	c1 e2 10             	shl    edx,0x10
c0017734:	89 d0                	mov    eax,edx
c0017736:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001773b:	c1 e2 08             	shl    edx,0x8
c001773e:	09 c2                	or     edx,eax
c0017740:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017744:	09 c2                	or     edx,eax
c0017746:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001774a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001774e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017752:	c1 f8 03             	sar    eax,0x3
c0017755:	01 c6                	add    esi,eax
c0017757:	89 c8                	mov    eax,ecx
c0017759:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001775d:	39 c7                	cmp    edi,eax
c001775f:	7f b0                	jg     c0017711 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017761:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017765:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017769:	39 14 24             	cmp    DWORD PTR [esp],edx
c001776c:	7e 22                	jle    c0017790 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001776e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017772:	eb 99                	jmp    c001770d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017774:	50                   	push   eax
c0017775:	50                   	push   eax
c0017776:	52                   	push   edx
c0017777:	68 04 b5 02 c0       	push   0xc002b504
c001777c:	e8 ab b7 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0017781:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017784:	e8 c7 80 ff ff       	call   c000f850 <free>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	31 ed                	xor    ebp,ebp
c001778e:	eb 0f                	jmp    c001779f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017790:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017794:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017797:	89 38                	mov    DWORD PTR [eax],edi
c0017799:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001779d:	89 08                	mov    DWORD PTR [eax],ecx
c001779f:	83 c4 1c             	add    esp,0x1c
c00177a2:	89 e8                	mov    eax,ebp
c00177a4:	5b                   	pop    ebx
c00177a5:	5e                   	pop    esi
c00177a6:	5f                   	pop    edi
c00177a7:	5d                   	pop    ebp
c00177a8:	c3                   	ret    
c00177a9:	90                   	nop

c00177aa <Video::putTGA(int, int, unsigned char*, int)>:
c00177aa:	55                   	push   ebp
c00177ab:	57                   	push   edi
c00177ac:	56                   	push   esi
c00177ad:	53                   	push   ebx
c00177ae:	83 ec 28             	sub    esp,0x28
c00177b1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177b9:	50                   	push   eax
c00177ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177be:	50                   	push   eax
c00177bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177c7:	56                   	push   esi
c00177c8:	e8 5b fe ff ff       	call   c0017628 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177cd:	83 c4 20             	add    esp,0x20
c00177d0:	85 c0                	test   eax,eax
c00177d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177d6:	74 35                	je     c001780d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177d8:	89 c7                	mov    edi,eax
c00177da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177de:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00177e2:	39 d8                	cmp    eax,ebx
c00177e4:	7e 27                	jle    c001780d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177e6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00177ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177ee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00177f2:	39 e8                	cmp    eax,ebp
c00177f4:	7e 14                	jle    c001780a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00177f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00177f8:	83 c7 04             	add    edi,0x4
c00177fb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177fe:	53                   	push   ebx
c00177ff:	55                   	push   ebp
c0017800:	45                   	inc    ebp
c0017801:	56                   	push   esi
c0017802:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	eb e0                	jmp    c00177ea <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001780a:	43                   	inc    ebx
c001780b:	eb cd                	jmp    c00177da <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001780d:	83 c4 1c             	add    esp,0x1c
c0017810:	5b                   	pop    ebx
c0017811:	5e                   	pop    esi
c0017812:	5f                   	pop    edi
c0017813:	5d                   	pop    ebp
c0017814:	c3                   	ret    
c0017815:	90                   	nop

c0017816 <ACPI::close(int, int, void*)>:
c0017816:	83 ec 1c             	sub    esp,0x1c
c0017819:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017821:	74 0a                	je     c001782d <ACPI::close(int, int, void*)+0x17>
c0017823:	b8 00 00 00 00       	mov    eax,0x0
c0017828:	e9 9a 00 00 00       	jmp    c00178c7 <ACPI::close(int, int, void*)+0xb1>
c001782d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017832:	75 37                	jne    c001786b <ACPI::close(int, int, void*)+0x55>
c0017834:	83 ec 0c             	sub    esp,0xc
c0017837:	68 60 b5 02 c0       	push   0xc002b560
c001783c:	e8 eb b6 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0017841:	83 c4 10             	add    esp,0x10
c0017844:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0017849:	85 c0                	test   eax,eax
c001784b:	74 07                	je     c0017854 <ACPI::close(int, int, void*)+0x3e>
c001784d:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0017852:	ff d0                	call   eax
c0017854:	83 ec 0c             	sub    esp,0xc
c0017857:	68 84 b6 02 c0       	push   0xc002b684
c001785c:	e8 6c 2d 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c0017861:	83 c4 10             	add    esp,0x10
c0017864:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017869:	eb 5c                	jmp    c00178c7 <ACPI::close(int, int, void*)+0xb1>
c001786b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017870:	75 50                	jne    c00178c2 <ACPI::close(int, int, void*)+0xac>
c0017872:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c0017877:	85 c0                	test   eax,eax
c0017879:	74 07                	je     c0017882 <ACPI::close(int, int, void*)+0x6c>
c001787b:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c0017880:	ff d0                	call   eax
c0017882:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017887:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001788c:	83 e0 02             	and    eax,0x2
c001788f:	74 1c                	je     c00178ad <ACPI::close(int, int, void*)+0x97>
c0017891:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001789c:	89 c2                	mov    edx,eax
c001789e:	ec                   	in     al,dx
c001789f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178a3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178ab:	eb da                	jmp    c0017887 <ACPI::close(int, int, void*)+0x71>
c00178ad:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178b4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178c1:	ee                   	out    dx,al
c00178c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178c7:	83 c4 1c             	add    esp,0x1c
c00178ca:	c3                   	ret    

c00178cb <findRSDP()>:
c00178cb:	83 ec 1c             	sub    esp,0x1c
c00178ce:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00178d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178d9:	83 e0 04             	and    eax,0x4
c00178dc:	84 c0                	test   al,al
c00178de:	75 07                	jne    c00178e7 <findRSDP()+0x1c>
c00178e0:	b8 00 00 00 00       	mov    eax,0x0
c00178e5:	eb 6a                	jmp    c0017951 <findRSDP()+0x86>
c00178e7:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00178ec:	3d ff 07 00 00       	cmp    eax,0x7ff
c00178f1:	7f 1b                	jg     c001790e <findRSDP()+0x43>
c00178f3:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00178f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178fe:	83 e2 fb             	and    edx,0xfffffffb
c0017901:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017907:	b8 00 00 00 00       	mov    eax,0x0
c001790c:	eb 43                	jmp    c0017951 <findRSDP()+0x86>
c001790e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017916:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001791e:	77 2c                	ja     c001794c <findRSDP()+0x81>
c0017920:	83 ec 04             	sub    esp,0x4
c0017923:	6a 08                	push   0x8
c0017925:	68 6d b5 02 c0       	push   0xc002b56d
c001792a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001792e:	e8 0d 8d fe ff       	call   c0000640 <memcmp>
c0017933:	83 c4 10             	add    esp,0x10
c0017936:	85 c0                	test   eax,eax
c0017938:	0f 94 c0             	sete   al
c001793b:	84 c0                	test   al,al
c001793d:	74 06                	je     c0017945 <findRSDP()+0x7a>
c001793f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017943:	eb 0c                	jmp    c0017951 <findRSDP()+0x86>
c0017945:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001794a:	eb ca                	jmp    c0017916 <findRSDP()+0x4b>
c001794c:	b8 00 00 00 00       	mov    eax,0x0
c0017951:	83 c4 1c             	add    esp,0x1c
c0017954:	c3                   	ret    

c0017955 <loadACPITables(unsigned char*)>:
c0017955:	56                   	push   esi
c0017956:	53                   	push   ebx
c0017957:	83 ec 44             	sub    esp,0x44
c001795a:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001795f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017965:	83 e0 04             	and    eax,0x4
c0017968:	84 c0                	test   al,al
c001796a:	0f 84 05 02 00 00    	je     c0017b75 <loadACPITables(unsigned char*)+0x220>
c0017970:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0017975:	84 c0                	test   al,al
c0017977:	74 75                	je     c00179ee <loadACPITables(unsigned char*)+0x99>
c0017979:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001797d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017985:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017988:	83 e8 24             	sub    eax,0x24
c001798b:	c1 e8 03             	shr    eax,0x3
c001798e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017992:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001799a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001799e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179a2:	0f 8d b2 00 00 00    	jge    c0017a5a <loadACPITables(unsigned char*)+0x105>
c00179a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179ac:	83 c0 24             	add    eax,0x24
c00179af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179bf:	c1 e0 03             	shl    eax,0x3
c00179c2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00179cf:	89 c1                	mov    ecx,eax
c00179d1:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c00179d6:	8d 50 01             	lea    edx,[eax+0x1]
c00179d9:	89 15 ac 0c 03 c0    	mov    DWORD PTR ds:0xc0030cac,edx
c00179df:	89 ca                	mov    edx,ecx
c00179e1:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c00179e8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00179ec:	eb ac                	jmp    c001799a <loadACPITables(unsigned char*)+0x45>
c00179ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179fd:	83 e8 24             	sub    eax,0x24
c0017a00:	c1 e8 02             	shr    eax,0x2
c0017a03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a07:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a13:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a17:	7d 41                	jge    c0017a5a <loadACPITables(unsigned char*)+0x105>
c0017a19:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a1d:	83 c0 24             	add    eax,0x24
c0017a20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a30:	c1 e0 02             	shl    eax,0x2
c0017a33:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a3d:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017a42:	8d 50 01             	lea    edx,[eax+0x1]
c0017a45:	89 15 ac 0c 03 c0    	mov    DWORD PTR ds:0xc0030cac,edx
c0017a4b:	89 ca                	mov    edx,ecx
c0017a4d:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c0017a54:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a58:	eb b5                	jmp    c0017a0f <loadACPITables(unsigned char*)+0xba>
c0017a5a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a62:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017a67:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a6b:	0f 8d 05 01 00 00    	jge    c0017b76 <loadACPITables(unsigned char*)+0x221>
c0017a71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a75:	8b 04 c5 c4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf33c]
c0017a7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a8c:	25 ff 0f 00 00       	and    eax,0xfff
c0017a91:	89 c6                	mov    esi,eax
c0017a93:	e8 8e a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017a98:	89 c3                	mov    ebx,eax
c0017a9a:	83 ec 0c             	sub    esp,0xc
c0017a9d:	6a 01                	push   0x1
c0017a9f:	e8 e7 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017aa4:	83 c4 10             	add    esp,0x10
c0017aa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017aab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ab1:	83 ec 0c             	sub    esp,0xc
c0017ab4:	6a 01                	push   0x1
c0017ab6:	6a 01                	push   0x1
c0017ab8:	50                   	push   eax
c0017ab9:	52                   	push   edx
c0017aba:	53                   	push   ebx
c0017abb:	e8 96 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ac0:	83 c4 20             	add    esp,0x20
c0017ac3:	09 f0                	or     eax,esi
c0017ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ac9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017acd:	c1 e0 03             	shl    eax,0x3
c0017ad0:	05 c0 0c 03 c0       	add    eax,0xc0030cc0
c0017ad5:	83 ec 04             	sub    esp,0x4
c0017ad8:	6a 04                	push   0x4
c0017ada:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ade:	50                   	push   eax
c0017adf:	e8 60 8c fe ff       	call   c0000744 <memcpy>
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017af2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017af6:	05 00 10 00 00       	add    eax,0x1000
c0017afb:	c1 e8 0c             	shr    eax,0xc
c0017afe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b06:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b0d:	25 ff 0f 00 00       	and    eax,0xfff
c0017b12:	89 c6                	mov    esi,eax
c0017b14:	e8 0d a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017b19:	89 c3                	mov    ebx,eax
c0017b1b:	83 ec 0c             	sub    esp,0xc
c0017b1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b22:	e8 64 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b2e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b34:	83 ec 0c             	sub    esp,0xc
c0017b37:	6a 01                	push   0x1
c0017b39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b3d:	50                   	push   eax
c0017b3e:	52                   	push   edx
c0017b3f:	53                   	push   ebx
c0017b40:	e8 11 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b45:	83 c4 20             	add    esp,0x20
c0017b48:	09 f0                	or     eax,esi
c0017b4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b4e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b51:	83 ec 0c             	sub    esp,0xc
c0017b54:	50                   	push   eax
c0017b55:	e8 a1 a4 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b65:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c0017b6c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b70:	e9 ed fe ff ff       	jmp    c0017a62 <loadACPITables(unsigned char*)+0x10d>
c0017b75:	90                   	nop
c0017b76:	83 c4 44             	add    esp,0x44
c0017b79:	5b                   	pop    ebx
c0017b7a:	5e                   	pop    esi
c0017b7b:	c3                   	ret    

c0017b7c <findRSDT(unsigned char*)>:
c0017b7c:	56                   	push   esi
c0017b7d:	53                   	push   ebx
c0017b7e:	83 ec 44             	sub    esp,0x44
c0017b81:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017b86:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b8c:	83 e0 04             	and    eax,0x4
c0017b8f:	84 c0                	test   al,al
c0017b91:	75 0a                	jne    c0017b9d <findRSDT(unsigned char*)+0x21>
c0017b93:	b8 00 00 00 00       	mov    eax,0x0
c0017b98:	e9 f7 00 00 00       	jmp    c0017c94 <findRSDT(unsigned char*)+0x118>
c0017b9d:	83 ec 04             	sub    esp,0x4
c0017ba0:	6a 24                	push   0x24
c0017ba2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017ba6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017baa:	50                   	push   eax
c0017bab:	e8 94 8b fe ff       	call   c0000744 <memcpy>
c0017bb0:	83 c4 10             	add    esp,0x10
c0017bb3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bb7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bbb:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bcb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bd3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bdb:	25 ff 0f 00 00       	and    eax,0xfff
c0017be0:	89 c6                	mov    esi,eax
c0017be2:	e8 3f a2 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017be7:	89 c3                	mov    ebx,eax
c0017be9:	83 ec 0c             	sub    esp,0xc
c0017bec:	6a 02                	push   0x2
c0017bee:	e8 98 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017bfa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c00:	83 ec 0c             	sub    esp,0xc
c0017c03:	6a 01                	push   0x1
c0017c05:	6a 02                	push   0x2
c0017c07:	50                   	push   eax
c0017c08:	52                   	push   edx
c0017c09:	53                   	push   ebx
c0017c0a:	e8 47 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c0f:	83 c4 20             	add    esp,0x20
c0017c12:	09 f0                	or     eax,esi
c0017c14:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c1c:	25 ff 0f 00 00       	and    eax,0xfff
c0017c21:	89 c6                	mov    esi,eax
c0017c23:	e8 fe a1 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017c28:	89 c3                	mov    ebx,eax
c0017c2a:	83 ec 0c             	sub    esp,0xc
c0017c2d:	6a 02                	push   0x2
c0017c2f:	e8 57 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017c34:	83 c4 10             	add    esp,0x10
c0017c37:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c3b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c41:	83 ec 0c             	sub    esp,0xc
c0017c44:	6a 01                	push   0x1
c0017c46:	6a 02                	push   0x2
c0017c48:	50                   	push   eax
c0017c49:	52                   	push   edx
c0017c4a:	53                   	push   ebx
c0017c4b:	e8 06 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c50:	83 c4 20             	add    esp,0x20
c0017c53:	09 f0                	or     eax,esi
c0017c55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c59:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c5e:	75 11                	jne    c0017c71 <findRSDT(unsigned char*)+0xf5>
c0017c60:	c6 05 c0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ec0,0x0
c0017c67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c6b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c6f:	eb 1f                	jmp    c0017c90 <findRSDT(unsigned char*)+0x114>
c0017c71:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c76:	75 11                	jne    c0017c89 <findRSDT(unsigned char*)+0x10d>
c0017c78:	c6 05 c0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ec0,0x1
c0017c7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c83:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c87:	eb 07                	jmp    c0017c90 <findRSDT(unsigned char*)+0x114>
c0017c89:	b8 00 00 00 00       	mov    eax,0x0
c0017c8e:	eb 04                	jmp    c0017c94 <findRSDT(unsigned char*)+0x118>
c0017c90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c94:	83 c4 44             	add    esp,0x44
c0017c97:	5b                   	pop    ebx
c0017c98:	5e                   	pop    esi
c0017c99:	c3                   	ret    

c0017c9a <findDataTable(unsigned char*, char*)>:
c0017c9a:	83 ec 1c             	sub    esp,0x1c
c0017c9d:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017ca2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ca8:	83 e0 04             	and    eax,0x4
c0017cab:	84 c0                	test   al,al
c0017cad:	75 07                	jne    c0017cb6 <findDataTable(unsigned char*, char*)+0x1c>
c0017caf:	b8 00 00 00 00       	mov    eax,0x0
c0017cb4:	eb 7c                	jmp    c0017d32 <findDataTable(unsigned char*, char*)+0x98>
c0017cb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cbe:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017cc3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017cc7:	7d 3a                	jge    c0017d03 <findDataTable(unsigned char*, char*)+0x69>
c0017cc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ccd:	c1 e0 03             	shl    eax,0x3
c0017cd0:	05 c0 0c 03 c0       	add    eax,0xc0030cc0
c0017cd5:	83 ec 04             	sub    esp,0x4
c0017cd8:	6a 04                	push   0x4
c0017cda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cde:	50                   	push   eax
c0017cdf:	e8 5c 89 fe ff       	call   c0000640 <memcmp>
c0017ce4:	83 c4 10             	add    esp,0x10
c0017ce7:	85 c0                	test   eax,eax
c0017ce9:	0f 94 c0             	sete   al
c0017cec:	84 c0                	test   al,al
c0017cee:	74 0d                	je     c0017cfd <findDataTable(unsigned char*, char*)+0x63>
c0017cf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cf4:	8b 04 c5 c4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf33c]
c0017cfb:	eb 35                	jmp    c0017d32 <findDataTable(unsigned char*, char*)+0x98>
c0017cfd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d01:	eb bb                	jmp    c0017cbe <findDataTable(unsigned char*, char*)+0x24>
c0017d03:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0017d08:	84 c0                	test   al,al
c0017d0a:	74 07                	je     c0017d13 <findDataTable(unsigned char*, char*)+0x79>
c0017d0c:	b8 58 00 00 00       	mov    eax,0x58
c0017d11:	eb 05                	jmp    c0017d18 <findDataTable(unsigned char*, char*)+0x7e>
c0017d13:	b8 52 00 00 00       	mov    eax,0x52
c0017d18:	83 ec 04             	sub    esp,0x4
c0017d1b:	50                   	push   eax
c0017d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d20:	68 a8 b6 02 c0       	push   0xc002b6a8
c0017d25:	e8 02 b2 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0017d2a:	83 c4 10             	add    esp,0x10
c0017d2d:	b8 00 00 00 00       	mov    eax,0x0
c0017d32:	83 c4 1c             	add    esp,0x1c
c0017d35:	c3                   	ret    

c0017d36 <scanMADT()>:
c0017d36:	53                   	push   ebx
c0017d37:	83 ec 38             	sub    esp,0x38
c0017d3a:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017d3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d45:	83 e0 04             	and    eax,0x4
c0017d48:	84 c0                	test   al,al
c0017d4a:	0f 84 63 04 00 00    	je     c00181b3 <scanMADT()+0x47d>
c0017d50:	e8 76 fb ff ff       	call   c00178cb <findRSDP()>
c0017d55:	a3 cc 0e 03 c0       	mov    ds:0xc0030ecc,eax
c0017d5a:	a1 cc 0e 03 c0       	mov    eax,ds:0xc0030ecc
c0017d5f:	85 c0                	test   eax,eax
c0017d61:	75 19                	jne    c0017d7c <scanMADT()+0x46>
c0017d63:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017d68:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d6e:	83 e2 fb             	and    edx,0xfffffffb
c0017d71:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d77:	e9 3b 04 00 00       	jmp    c00181b7 <scanMADT()+0x481>
c0017d7c:	a1 cc 0e 03 c0       	mov    eax,ds:0xc0030ecc
c0017d81:	83 ec 0c             	sub    esp,0xc
c0017d84:	50                   	push   eax
c0017d85:	e8 f2 fd ff ff       	call   c0017b7c <findRSDT(unsigned char*)>
c0017d8a:	83 c4 10             	add    esp,0x10
c0017d8d:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0017d92:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0017d97:	85 c0                	test   eax,eax
c0017d99:	75 19                	jne    c0017db4 <scanMADT()+0x7e>
c0017d9b:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017da0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017da6:	83 e2 fb             	and    edx,0xfffffffb
c0017da9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017daf:	e9 03 04 00 00       	jmp    c00181b7 <scanMADT()+0x481>
c0017db4:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0017db9:	83 ec 0c             	sub    esp,0xc
c0017dbc:	50                   	push   eax
c0017dbd:	e8 93 fb ff ff       	call   c0017955 <loadACPITables(unsigned char*)>
c0017dc2:	83 c4 10             	add    esp,0x10
c0017dc5:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0017dca:	83 ec 08             	sub    esp,0x8
c0017dcd:	68 76 b5 02 c0       	push   0xc002b576
c0017dd2:	50                   	push   eax
c0017dd3:	e8 c2 fe ff ff       	call   c0017c9a <findDataTable(unsigned char*, char*)>
c0017dd8:	83 c4 10             	add    esp,0x10
c0017ddb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ddf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017de4:	75 19                	jne    c0017dff <scanMADT()+0xc9>
c0017de6:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017deb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017df1:	83 e2 fe             	and    edx,0xfffffffe
c0017df4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dfa:	e9 b8 03 00 00       	jmp    c00181b7 <scanMADT()+0x481>
c0017dff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e0e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e12:	0f 87 9f 03 00 00    	ja     c00181b7 <scanMADT()+0x481>
c0017e18:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e20:	0f 87 91 03 00 00    	ja     c00181b7 <scanMADT()+0x481>
c0017e26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e32:	8d 50 01             	lea    edx,[eax+0x1]
c0017e35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e3d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e41:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e49:	8d 50 01             	lea    edx,[eax+0x1]
c0017e4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e54:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e58:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e5c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e61:	0f 86 4f 03 00 00    	jbe    c00181b6 <scanMADT()+0x480>
c0017e67:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e6c:	75 57                	jne    c0017ec5 <scanMADT()+0x18f>
c0017e6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e72:	8d 50 01             	lea    edx,[eax+0x1]
c0017e75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e79:	8a 15 c0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310c0
c0017e7f:	0f b6 d2             	movzx  edx,dl
c0017e82:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e86:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e8a:	88 82 00 11 03 c0    	mov    BYTE PTR [edx-0x3ffcef00],al
c0017e90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e94:	8d 50 01             	lea    edx,[eax+0x1]
c0017e97:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e9b:	8a 15 c0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310c0
c0017ea1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ea4:	88 0d c0 10 03 c0    	mov    BYTE PTR ds:0xc00310c0,cl
c0017eaa:	0f b6 d2             	movzx  edx,dl
c0017ead:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eb1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eb5:	88 82 e0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef20],al
c0017ebb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ec0:	e9 da 02 00 00       	jmp    c001819f <scanMADT()+0x469>
c0017ec5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017eca:	0f 85 14 01 00 00    	jne    c0017fe4 <scanMADT()+0x2ae>
c0017ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017edb:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c0017ee1:	0f b6 d2             	movzx  edx,dl
c0017ee4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ee8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eec:	88 82 a0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf060],al
c0017ef2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ef6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efe:	01 d0                	add    eax,edx
c0017f00:	83 c0 2c             	add    eax,0x2c
c0017f03:	8a 00                	mov    al,BYTE PTR [eax]
c0017f05:	0f b6 d0             	movzx  edx,al
c0017f08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f0c:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f13:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f17:	0f b6 c0             	movzx  eax,al
c0017f1a:	c1 e0 08             	shl    eax,0x8
c0017f1d:	89 d1                	mov    ecx,edx
c0017f1f:	09 c1                	or     ecx,eax
c0017f21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f25:	8d 50 02             	lea    edx,[eax+0x2]
c0017f28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f2c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f30:	0f b6 c0             	movzx  eax,al
c0017f33:	c1 e0 10             	shl    eax,0x10
c0017f36:	09 c1                	or     ecx,eax
c0017f38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3c:	8d 50 03             	lea    edx,[eax+0x3]
c0017f3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f47:	0f b6 c0             	movzx  eax,al
c0017f4a:	c1 e0 18             	shl    eax,0x18
c0017f4d:	09 c1                	or     ecx,eax
c0017f4f:	89 ca                	mov    edx,ecx
c0017f51:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c0017f56:	0f b6 c0             	movzx  eax,al
c0017f59:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c0017f60:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6d:	01 d0                	add    eax,edx
c0017f6f:	83 c0 2c             	add    eax,0x2c
c0017f72:	8a 00                	mov    al,BYTE PTR [eax]
c0017f74:	0f b6 d0             	movzx  edx,al
c0017f77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f82:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f86:	0f b6 c0             	movzx  eax,al
c0017f89:	c1 e0 08             	shl    eax,0x8
c0017f8c:	89 d1                	mov    ecx,edx
c0017f8e:	09 c1                	or     ecx,eax
c0017f90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f94:	8d 50 02             	lea    edx,[eax+0x2]
c0017f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f9b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f9f:	0f b6 c0             	movzx  eax,al
c0017fa2:	c1 e0 10             	shl    eax,0x10
c0017fa5:	09 c1                	or     ecx,eax
c0017fa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fab:	8d 50 03             	lea    edx,[eax+0x3]
c0017fae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fb6:	0f b6 c0             	movzx  eax,al
c0017fb9:	c1 e0 18             	shl    eax,0x18
c0017fbc:	09 c1                	or     ecx,eax
c0017fbe:	89 ca                	mov    edx,ecx
c0017fc0:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c0017fc5:	0f b6 c0             	movzx  eax,al
c0017fc8:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c0017fcf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fd4:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c0017fd9:	40                   	inc    eax
c0017fda:	a2 80 0f 03 c0       	mov    ds:0xc0030f80,al
c0017fdf:	e9 bb 01 00 00       	jmp    c001819f <scanMADT()+0x469>
c0017fe4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017fe9:	0f 85 e9 00 00 00    	jne    c00180d8 <scanMADT()+0x3a2>
c0017fef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff3:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ffa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ffe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018002:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800a:	8d 50 01             	lea    edx,[eax+0x1]
c001800d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018011:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018015:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018019:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001801d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018021:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018025:	01 d0                	add    eax,edx
c0018027:	83 c0 2c             	add    eax,0x2c
c001802a:	8a 00                	mov    al,BYTE PTR [eax]
c001802c:	0f b6 d0             	movzx  edx,al
c001802f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018033:	8d 48 01             	lea    ecx,[eax+0x1]
c0018036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001803a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001803e:	0f b6 c0             	movzx  eax,al
c0018041:	c1 e0 08             	shl    eax,0x8
c0018044:	89 d1                	mov    ecx,edx
c0018046:	09 c1                	or     ecx,eax
c0018048:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804c:	8d 50 02             	lea    edx,[eax+0x2]
c001804f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018053:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018057:	0f b6 c0             	movzx  eax,al
c001805a:	c1 e0 10             	shl    eax,0x10
c001805d:	09 c1                	or     ecx,eax
c001805f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018063:	8d 50 03             	lea    edx,[eax+0x3]
c0018066:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001806e:	0f b6 c0             	movzx  eax,al
c0018071:	c1 e0 18             	shl    eax,0x18
c0018074:	09 c8                	or     eax,ecx
c0018076:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001807a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001807f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018083:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018087:	01 d0                	add    eax,edx
c0018089:	83 c0 2c             	add    eax,0x2c
c001808c:	8a 00                	mov    al,BYTE PTR [eax]
c001808e:	0f b6 c0             	movzx  eax,al
c0018091:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018095:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018098:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180a0:	0f b6 d2             	movzx  edx,dl
c00180a3:	c1 e2 08             	shl    edx,0x8
c00180a6:	09 d0                	or     eax,edx
c00180a8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180ad:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180b2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180bb:	88 90 40 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27c0],dl
c00180c1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180cb:	66 89 84 12 60 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0a0],ax
c00180d3:	e9 c7 00 00 00       	jmp    c001819f <scanMADT()+0x469>
c00180d8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00180dd:	0f 85 b0 00 00 00    	jne    c0018193 <scanMADT()+0x45d>
c00180e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e7:	8d 50 01             	lea    edx,[eax+0x1]
c00180ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180f6:	0f b6 c0             	movzx  eax,al
c00180f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018101:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018105:	01 d0                	add    eax,edx
c0018107:	83 c0 2c             	add    eax,0x2c
c001810a:	8a 00                	mov    al,BYTE PTR [eax]
c001810c:	0f b6 d0             	movzx  edx,al
c001810f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018113:	8d 48 01             	lea    ecx,[eax+0x1]
c0018116:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001811a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001811e:	0f b6 c0             	movzx  eax,al
c0018121:	c1 e0 08             	shl    eax,0x8
c0018124:	09 d0                	or     eax,edx
c0018126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001812a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001812f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018133:	8d 50 01             	lea    edx,[eax+0x1]
c0018136:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001813a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001813e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018142:	0f b6 c0             	movzx  eax,al
c0018145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814d:	c1 e0 08             	shl    eax,0x8
c0018150:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018154:	89 c1                	mov    ecx,eax
c0018156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001815a:	c1 e0 18             	shl    eax,0x18
c001815d:	89 c3                	mov    ebx,eax
c001815f:	a1 d0 0e 03 c0       	mov    eax,ds:0xc0030ed0
c0018164:	8d 50 01             	lea    edx,[eax+0x1]
c0018167:	89 15 d0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed0,edx
c001816d:	09 d9                	or     ecx,ebx
c001816f:	89 ca                	mov    edx,ecx
c0018171:	89 14 85 e0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf120],edx
c0018178:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001817c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018184:	68 d8 b6 02 c0       	push   0xc002b6d8
c0018189:	e8 9e ad ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001818e:	83 c4 10             	add    esp,0x10
c0018191:	eb 0c                	jmp    c001819f <scanMADT()+0x469>
c0018193:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018198:	75 05                	jne    c001819f <scanMADT()+0x469>
c001819a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001819f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181a8:	01 d0                	add    eax,edx
c00181aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181ae:	e9 54 fc ff ff       	jmp    c0017e07 <scanMADT()+0xd1>
c00181b3:	90                   	nop
c00181b4:	eb 01                	jmp    c00181b7 <scanMADT()+0x481>
c00181b6:	90                   	nop
c00181b7:	83 c4 38             	add    esp,0x38
c00181ba:	5b                   	pop    ebx
c00181bb:	c3                   	ret    

c00181bc <ACPI::ACPI()>:
c00181bc:	83 ec 0c             	sub    esp,0xc
c00181bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c3:	83 ec 08             	sub    esp,0x8
c00181c6:	68 7b b5 02 c0       	push   0xc002b57b
c00181cb:	50                   	push   eax
c00181cc:	e8 71 c3 ff ff       	call   c0014542 <Device::Device(char const*)>
c00181d1:	83 c4 10             	add    esp,0x10
c00181d4:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c00181d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181dd:	89 10                	mov    DWORD PTR [eax],edx
c00181df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00181ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ee:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018215:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001821c:	e8 15 fb ff ff       	call   c0017d36 <scanMADT()>
c0018221:	90                   	nop
c0018222:	83 c4 0c             	add    esp,0xc
c0018225:	c3                   	ret    

c0018226 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018226:	83 ec 2c             	sub    esp,0x2c
c0018229:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001822d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018231:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018235:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018239:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001823e:	88 d0                	mov    al,dl
c0018240:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018244:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018249:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018251:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018255:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001825b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001825f:	0f 8d 97 00 00 00    	jge    c00182fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018265:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018269:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001826d:	83 c2 2a             	add    edx,0x2a
c0018270:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018274:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018279:	75 78                	jne    c00182f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001827b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001827f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018283:	83 c2 2a             	add    edx,0x2a
c0018286:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001828a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001828e:	75 63                	jne    c00182f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018290:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018295:	74 3a                	je     c00182d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001829b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001829f:	83 c2 2a             	add    edx,0x2a
c00182a2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182ad:	39 c2                	cmp    edx,eax
c00182af:	74 10                	je     c00182c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	68 14 b7 02 c0       	push   0xc002b714
c00182b9:	e8 0f 23 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c00182be:	83 c4 10             	add    esp,0x10
c00182c1:	83 ec 0c             	sub    esp,0xc
c00182c4:	68 80 b5 02 c0       	push   0xc002b580
c00182c9:	e8 ff 22 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c00182ce:	83 c4 10             	add    esp,0x10
c00182d1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182dd:	83 c2 2a             	add    edx,0x2a
c00182e0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182e4:	8b 02                	mov    eax,DWORD PTR [edx]
c00182e6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00182e9:	89 01                	mov    DWORD PTR [ecx],eax
c00182eb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182ee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00182f3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182f7:	e9 55 ff ff ff       	jmp    c0018251 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182fc:	90                   	nop
c00182fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018301:	83 c4 2c             	add    esp,0x2c
c0018304:	c2 04 00             	ret    0x4
c0018307:	90                   	nop

c0018308 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018308:	83 ec 1c             	sub    esp,0x1c
c001830b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001830f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018313:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018317:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001831c:	88 c8                	mov    al,cl
c001831e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018322:	88 d0                	mov    al,dl
c0018324:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001832c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018336:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018339:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001833d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018345:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001834b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001834f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018356:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001835b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018365:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018369:	8d 48 01             	lea    ecx,[eax+0x1]
c001836c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018370:	83 c2 2a             	add    edx,0x2a
c0018373:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001837b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018385:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018388:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001838c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018394:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001839a:	8d 50 01             	lea    edx,[eax+0x1]
c001839d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183b1:	3d 00 02 00 00       	cmp    eax,0x200
c00183b6:	75 10                	jne    c00183c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183b8:	83 ec 0c             	sub    esp,0xc
c00183bb:	68 8f b5 02 c0       	push   0xc002b58f
c00183c0:	e8 08 22 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c00183c5:	83 c4 10             	add    esp,0x10
c00183c8:	90                   	nop
c00183c9:	83 c4 1c             	add    esp,0x1c
c00183cc:	c3                   	ret    
c00183cd:	90                   	nop

c00183ce <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183ce:	b8 00 00 00 00       	mov    eax,0x0
c00183d3:	c3                   	ret    

c00183d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183d4:	83 ec 1c             	sub    esp,0x1c
c00183d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183db:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183e2:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00183e7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	52                   	push   edx
c00183f0:	50                   	push   eax
c00183f1:	e8 62 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00183f6:	83 c4 10             	add    esp,0x10
c00183f9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183fd:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0018402:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018407:	83 ec 04             	sub    esp,0x4
c001840a:	6a 01                	push   0x1
c001840c:	52                   	push   edx
c001840d:	50                   	push   eax
c001840e:	e8 5b 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018413:	83 c4 10             	add    esp,0x10
c0018416:	90                   	nop
c0018417:	83 c4 1c             	add    esp,0x1c
c001841a:	c3                   	ret    
c001841b:	90                   	nop

c001841c <ACPI::open(int, int, void*)>:
c001841c:	53                   	push   ebx
c001841d:	83 ec 28             	sub    esp,0x28
c0018420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018424:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001842b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001842f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018436:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001843b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018441:	83 e0 04             	and    eax,0x4
c0018444:	84 c0                	test   al,al
c0018446:	74 47                	je     c001848f <ACPI::open(int, int, void*)+0x73>
c0018448:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001844d:	83 ec 08             	sub    esp,0x8
c0018450:	68 ac b5 02 c0       	push   0xc002b5ac
c0018455:	50                   	push   eax
c0018456:	e8 3f f8 ff ff       	call   c0017c9a <findDataTable(unsigned char*, char*)>
c001845b:	83 c4 10             	add    esp,0x10
c001845e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018462:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018467:	74 26                	je     c001848f <ACPI::open(int, int, void*)+0x73>
c0018469:	83 ec 0c             	sub    esp,0xc
c001846c:	68 b1 b5 02 c0       	push   0xc002b5b1
c0018471:	e8 b6 aa ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001847d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018484:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018488:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001848f:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018497:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001849b:	8a 00                	mov    al,BYTE PTR [eax]
c001849d:	3c 01                	cmp    al,0x1
c001849f:	75 28                	jne    c00184c9 <ACPI::open(int, int, void*)+0xad>
c00184a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184b0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184b7:	83 ec 0c             	sub    esp,0xc
c00184ba:	68 c2 b5 02 c0       	push   0xc002b5c2
c00184bf:	e8 68 aa ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00184c4:	83 c4 10             	add    esp,0x10
c00184c7:	eb 25                	jmp    c00184ee <ACPI::open(int, int, void*)+0xd2>
c00184c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184cd:	8a 00                	mov    al,BYTE PTR [eax]
c00184cf:	3c 02                	cmp    al,0x2
c00184d1:	75 1b                	jne    c00184ee <ACPI::open(int, int, void*)+0xd2>
c00184d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184de:	83 ec 0c             	sub    esp,0xc
c00184e1:	68 ca b5 02 c0       	push   0xc002b5ca
c00184e6:	e8 41 aa ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00184eb:	83 c4 10             	add    esp,0x10
c00184ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f2:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184f8:	83 f0 01             	xor    eax,0x1
c00184fb:	84 c0                	test   al,al
c00184fd:	74 6a                	je     c0018569 <ACPI::open(int, int, void*)+0x14d>
c00184ff:	83 ec 0c             	sub    esp,0xc
c0018502:	68 d2 b5 02 c0       	push   0xc002b5d2
c0018507:	e8 20 aa ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001850c:	83 c4 10             	add    esp,0x10
c001850f:	e8 3c 7c fe ff       	call   c0000150 <manualPCIProbe>
c0018514:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018518:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001851d:	75 28                	jne    c0018547 <ACPI::open(int, int, void*)+0x12b>
c001851f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018523:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001852a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018535:	83 ec 0c             	sub    esp,0xc
c0018538:	68 e0 b5 02 c0       	push   0xc002b5e0
c001853d:	e8 ea a9 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	eb 22                	jmp    c0018569 <ACPI::open(int, int, void*)+0x14d>
c0018547:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001854c:	75 1b                	jne    c0018569 <ACPI::open(int, int, void*)+0x14d>
c001854e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018552:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018559:	83 ec 0c             	sub    esp,0xc
c001855c:	68 ea b5 02 c0       	push   0xc002b5ea
c0018561:	e8 c6 a9 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018566:	83 c4 10             	add    esp,0x10
c0018569:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856d:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018573:	84 c0                	test   al,al
c0018575:	74 13                	je     c001858a <ACPI::open(int, int, void*)+0x16e>
c0018577:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001857b:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018581:	83 f0 01             	xor    eax,0x1
c0018584:	0f b6 c0             	movzx  eax,al
c0018587:	40                   	inc    eax
c0018588:	eb 05                	jmp    c001858f <ACPI::open(int, int, void*)+0x173>
c001858a:	b8 00 00 00 00       	mov    eax,0x0
c001858f:	83 ec 08             	sub    esp,0x8
c0018592:	50                   	push   eax
c0018593:	68 f4 b5 02 c0       	push   0xc002b5f4
c0018598:	e8 8f a9 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001859d:	83 c4 10             	add    esp,0x10
c00185a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a4:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185aa:	84 c0                	test   al,al
c00185ac:	74 67                	je     c0018615 <ACPI::open(int, int, void*)+0x1f9>
c00185ae:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185b6:	83 ec 0c             	sub    esp,0xc
c00185b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185bd:	e8 7e 72 ff ff       	call   c000f840 <malloc>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	89 c3                	mov    ebx,eax
c00185c7:	83 ec 0c             	sub    esp,0xc
c00185ca:	53                   	push   ebx
c00185cb:	e8 26 a3 00 00       	call   c00228f6 <PCI::PCI()>
c00185d0:	83 c4 10             	add    esp,0x10
c00185d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185db:	83 ec 08             	sub    esp,0x8
c00185de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185e2:	50                   	push   eax
c00185e3:	e8 6a bd ff ff       	call   c0014352 <Device::addChild(Device*)>
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f1:	83 c0 08             	add    eax,0x8
c00185f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f6:	6a 00                	push   0x0
c00185f8:	6a 00                	push   0x0
c00185fa:	6a 00                	push   0x0
c00185fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018600:	ff d0                	call   eax
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	83 ec 0c             	sub    esp,0xc
c0018608:	68 fd b5 02 c0       	push   0xc002b5fd
c001860d:	e8 1a a9 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018612:	83 c4 10             	add    esp,0x10
c0018615:	83 ec 0c             	sub    esp,0xc
c0018618:	68 08 b6 02 c0       	push   0xc002b608
c001861d:	e8 cb 46 00 00       	call   c001cced <Thr::loadKernelSymbolTable(char const*)>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c001862b:	83 ec 08             	sub    esp,0x8
c001862e:	6a 01                	push   0x1
c0018630:	68 26 b6 02 c0       	push   0xc002b626
c0018635:	e8 10 51 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c001863a:	83 c4 10             	add    esp,0x10
c001863d:	83 ec 08             	sub    esp,0x8
c0018640:	53                   	push   ebx
c0018641:	50                   	push   eax
c0018642:	e8 37 53 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c0018647:	83 c4 10             	add    esp,0x10
c001864a:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0018650:	83 ec 08             	sub    esp,0x8
c0018653:	6a 01                	push   0x1
c0018655:	68 43 b6 02 c0       	push   0xc002b643
c001865a:	e8 eb 50 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c001865f:	83 c4 10             	add    esp,0x10
c0018662:	83 ec 08             	sub    esp,0x8
c0018665:	53                   	push   ebx
c0018666:	50                   	push   eax
c0018667:	e8 12 53 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c001866c:	83 c4 10             	add    esp,0x10
c001866f:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0018674:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001867a:	83 e0 04             	and    eax,0x4
c001867d:	84 c0                	test   al,al
c001867f:	0f 84 d2 00 00 00    	je     c0018757 <ACPI::open(int, int, void*)+0x33b>
c0018685:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001868c:	83 ec 0c             	sub    esp,0xc
c001868f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018693:	e8 a8 71 ff ff       	call   c000f840 <malloc>
c0018698:	83 c4 10             	add    esp,0x10
c001869b:	89 c3                	mov    ebx,eax
c001869d:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00186a2:	83 ec 04             	sub    esp,0x4
c00186a5:	50                   	push   eax
c00186a6:	68 60 b6 02 c0       	push   0xc002b660
c00186ab:	53                   	push   ebx
c00186ac:	e8 d3 ad ff ff       	call   c0013484 <File::File(char const*, Process*)>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186bd:	74 17                	je     c00186d6 <ACPI::open(int, int, void*)+0x2ba>
c00186bf:	83 ec 0c             	sub    esp,0xc
c00186c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186c6:	e8 8b b0 ff ff       	call   c0013756 <File::exists()>
c00186cb:	83 c4 10             	add    esp,0x10
c00186ce:	84 c0                	test   al,al
c00186d0:	74 04                	je     c00186d6 <ACPI::open(int, int, void*)+0x2ba>
c00186d2:	b0 01                	mov    al,0x1
c00186d4:	eb 02                	jmp    c00186d8 <ACPI::open(int, int, void*)+0x2bc>
c00186d6:	b0 00                	mov    al,0x0
c00186d8:	84 c0                	test   al,al
c00186da:	74 22                	je     c00186fe <ACPI::open(int, int, void*)+0x2e2>
c00186dc:	83 ec 08             	sub    esp,0x8
c00186df:	6a 01                	push   0x1
c00186e1:	68 60 b6 02 c0       	push   0xc002b660
c00186e6:	e8 5f 50 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c00186eb:	83 c4 10             	add    esp,0x10
c00186ee:	83 ec 08             	sub    esp,0x8
c00186f1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186f5:	50                   	push   eax
c00186f6:	e8 83 52 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c00186fb:	83 c4 10             	add    esp,0x10
c00186fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018703:	74 1e                	je     c0018723 <ACPI::open(int, int, void*)+0x307>
c0018705:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001870a:	74 17                	je     c0018723 <ACPI::open(int, int, void*)+0x307>
c001870c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018710:	8b 00                	mov    eax,DWORD PTR [eax]
c0018712:	83 c0 08             	add    eax,0x8
c0018715:	8b 00                	mov    eax,DWORD PTR [eax]
c0018717:	83 ec 0c             	sub    esp,0xc
c001871a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001871e:	ff d0                	call   eax
c0018720:	83 c4 10             	add    esp,0x10
c0018723:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0018728:	83 ec 08             	sub    esp,0x8
c001872b:	68 7d b6 02 c0       	push   0xc002b67d
c0018730:	50                   	push   eax
c0018731:	e8 64 f5 ff ff       	call   c0017c9a <findDataTable(unsigned char*, char*)>
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001873d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018742:	74 13                	je     c0018757 <ACPI::open(int, int, void*)+0x33b>
c0018744:	83 ec 08             	sub    esp,0x8
c0018747:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001874b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001874f:	e8 80 fc ff ff       	call   c00183d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	b8 00 00 00 00       	mov    eax,0x0
c001875c:	83 c4 28             	add    esp,0x28
c001875f:	5b                   	pop    ebx
c0018760:	c3                   	ret    
c0018761:	90                   	nop

c0018762 <ACPI::sleep()>:
c0018762:	83 ec 0c             	sub    esp,0xc
c0018765:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001876a:	85 c0                	test   eax,eax
c001876c:	74 07                	je     c0018775 <ACPI::sleep()+0x13>
c001876e:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c0018773:	ff d0                	call   eax
c0018775:	90                   	nop
c0018776:	83 c4 0c             	add    esp,0xc
c0018779:	c3                   	ret    

c001877a <CPU::close(int, int, void*)>:
c001877a:	31 c0                	xor    eax,eax
c001877c:	c3                   	ret    
c001877d:	90                   	nop

c001877e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001877e:	55                   	push   ebp
c001877f:	57                   	push   edi
c0018780:	56                   	push   esi
c0018781:	53                   	push   ebx
c0018782:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018786:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001878a:	89 ce                	mov    esi,ecx
c001878c:	89 d5                	mov    ebp,edx
c001878e:	80 f9 04             	cmp    cl,0x4
c0018791:	75 28                	jne    c00187bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018793:	8d 42 f9             	lea    eax,[edx-0x7]
c0018796:	3c 03                	cmp    al,0x3
c0018798:	0f 86 63 01 00 00    	jbe    c0018901 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001879e:	80 fa 03             	cmp    dl,0x3
c00187a1:	0f 84 5a 01 00 00    	je     c0018901 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187a7:	8d 7a f2             	lea    edi,[edx-0xe]
c00187aa:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00187af:	89 fb                	mov    ebx,edi
c00187b1:	80 fb 01             	cmp    bl,0x1
c00187b4:	77 4e                	ja     c0018804 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187b6:	e9 52 01 00 00       	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187bb:	80 f9 05             	cmp    cl,0x5
c00187be:	75 4d                	jne    c001880d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187c0:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00187c5:	80 fa 03             	cmp    dl,0x3
c00187c8:	0f 86 3f 01 00 00    	jbe    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ce:	8d 7a fa             	lea    edi,[edx-0x6]
c00187d1:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00187d6:	89 fb                	mov    ebx,edi
c00187d8:	80 fb 01             	cmp    bl,0x1
c00187db:	0f 86 2c 01 00 00    	jbe    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e1:	b8 40 da 02 c0       	mov    eax,0xc002da40
c00187e6:	80 fa 08             	cmp    dl,0x8
c00187e9:	0f 84 1e 01 00 00    	je     c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ef:	89 d7                	mov    edi,edx
c00187f1:	b8 50 da 02 c0       	mov    eax,0xc002da50
c00187f6:	83 e7 fb             	and    edi,0xfffffffb
c00187f9:	89 fb                	mov    ebx,edi
c00187fb:	80 fb 09             	cmp    bl,0x9
c00187fe:	0f 84 09 01 00 00    	je     c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018804:	31 c0                	xor    eax,eax
c0018806:	89 eb                	mov    ebx,ebp
c0018808:	0f b6 fb             	movzx  edi,bl
c001880b:	eb 30                	jmp    c001883d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001880d:	31 c0                	xor    eax,eax
c001880f:	80 f9 06             	cmp    cl,0x6
c0018812:	75 f2                	jne    c0018806 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018814:	80 fa 0a             	cmp    dl,0xa
c0018817:	77 ed                	ja     c0018806 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018819:	bf de 05 00 00       	mov    edi,0x5de
c001881e:	0f a3 d7             	bt     edi,edx
c0018821:	73 e3                	jae    c0018806 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018823:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018828:	e9 e0 00 00 00       	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001882d:	39 c7                	cmp    edi,eax
c001882f:	0f 84 d3 00 00 00    	je     c0018908 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018835:	40                   	inc    eax
c0018836:	3d d0 00 00 00       	cmp    eax,0xd0
c001883b:	74 09                	je     c0018846 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001883d:	89 f3                	mov    ebx,esi
c001883f:	80 fb 0f             	cmp    bl,0xf
c0018842:	75 f1                	jne    c0018835 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018844:	eb e7                	jmp    c001882d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018846:	80 f9 10             	cmp    cl,0x10
c0018849:	75 14                	jne    c001885f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001884b:	8d 42 fc             	lea    eax,[edx-0x4]
c001884e:	83 e0 fb             	and    eax,0xfffffffb
c0018851:	3c 02                	cmp    al,0x2
c0018853:	76 34                	jbe    c0018889 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018855:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c001885a:	80 fa 02             	cmp    dl,0x2
c001885d:	eb 24                	jmp    c0018883 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001885f:	80 f9 11             	cmp    cl,0x11
c0018862:	75 13                	jne    c0018877 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018864:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018869:	80 fa 03             	cmp    dl,0x3
c001886c:	0f 85 9b 00 00 00    	jne    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018872:	e9 91 00 00 00       	jmp    c0018908 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018877:	80 f9 12             	cmp    cl,0x12
c001887a:	75 14                	jne    c0018890 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001887c:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018881:	fe ca                	dec    dl
c0018883:	0f 85 84 00 00 00    	jne    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018889:	b8 80 da 02 c0       	mov    eax,0xc002da80
c001888e:	eb 7d                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018890:	80 f9 14             	cmp    cl,0x14
c0018893:	75 12                	jne    c00188a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018895:	4a                   	dec    edx
c0018896:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c001889b:	80 fa 01             	cmp    dl,0x1
c001889e:	77 6d                	ja     c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a0:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00188a5:	eb 66                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a7:	80 f9 15             	cmp    cl,0x15
c00188aa:	75 31                	jne    c00188dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188ac:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00188b1:	80 fa 01             	cmp    dl,0x1
c00188b4:	74 57                	je     c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b6:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00188bb:	80 fa 13             	cmp    dl,0x13
c00188be:	76 0c                	jbe    c00188cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188c0:	80 fa 30             	cmp    dl,0x30
c00188c3:	75 48                	jne    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c5:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c00188ca:	eb 41                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cc:	b9 04 00 09 00       	mov    ecx,0x90004
c00188d1:	0f a3 d1             	bt     ecx,edx
c00188d4:	73 37                	jae    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d6:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c00188db:	eb 30                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188dd:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00188e2:	80 f9 16             	cmp    cl,0x16
c00188e5:	75 26                	jne    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e7:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c00188ec:	84 d2                	test   dl,dl
c00188ee:	74 1d                	je     c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f0:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00188f5:	80 fa 30             	cmp    dl,0x30
c00188f8:	75 13                	jne    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fa:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c00188ff:	eb 0c                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018901:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018906:	eb 05                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018908:	b8 70 da 02 c0       	mov    eax,0xc002da70
c001890d:	5b                   	pop    ebx
c001890e:	5e                   	pop    esi
c001890f:	5f                   	pop    edi
c0018910:	5d                   	pop    ebp
c0018911:	c3                   	ret    

c0018912 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018912:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018916:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001891a:	80 f9 04             	cmp    cl,0x4
c001891d:	75 6b                	jne    c001898a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001891f:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018924:	80 fa 01             	cmp    dl,0x1
c0018927:	0f 86 92 02 00 00    	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892d:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018932:	80 fa 02             	cmp    dl,0x2
c0018935:	0f 84 84 02 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893b:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018940:	80 fa 03             	cmp    dl,0x3
c0018943:	0f 84 76 02 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018949:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c001894e:	80 fa 04             	cmp    dl,0x4
c0018951:	0f 84 68 02 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018957:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c001895c:	80 fa 05             	cmp    dl,0x5
c001895f:	0f 84 5a 02 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018965:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c001896a:	80 fa 07             	cmp    dl,0x7
c001896d:	0f 84 4c 02 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018973:	83 ea 08             	sub    edx,0x8
c0018976:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c001897b:	80 fa 01             	cmp    dl,0x1
c001897e:	0f 87 3b 02 00 00    	ja     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018984:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018989:	c3                   	ret    
c001898a:	80 f9 05             	cmp    cl,0x5
c001898d:	75 45                	jne    c00189d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001898f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018992:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018997:	80 f9 02             	cmp    cl,0x2
c001899a:	0f 86 1f 02 00 00    	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a0:	80 fa 04             	cmp    dl,0x4
c00189a3:	0f 84 f3 01 00 00    	je     c0018b9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189a9:	80 fa 07             	cmp    dl,0x7
c00189ac:	0f 84 0d 02 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b2:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189b7:	80 fa 08             	cmp    dl,0x8
c00189ba:	0f 84 ff 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c0:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00189c5:	80 fa 09             	cmp    dl,0x9
c00189c8:	0f 85 f1 01 00 00    	jne    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ce:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00189d3:	c3                   	ret    
c00189d4:	80 f9 06             	cmp    cl,0x6
c00189d7:	0f 85 85 01 00 00    	jne    c0018b62 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189dd:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c00189e2:	80 fa 01             	cmp    dl,0x1
c00189e5:	0f 84 d4 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189eb:	8d 42 fb             	lea    eax,[edx-0x5]
c00189ee:	3c 01                	cmp    al,0x1
c00189f0:	0f 86 ac 01 00 00    	jbe    c0018ba2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189f6:	80 fa 03             	cmp    dl,0x3
c00189f9:	0f 84 a3 01 00 00    	je     c0018ba2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189ff:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a02:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a07:	80 f9 01             	cmp    cl,0x1
c0018a0a:	0f 86 af 01 00 00    	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a10:	80 fa 09             	cmp    dl,0x9
c0018a13:	0f 84 8f 01 00 00    	je     c0018ba8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a19:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a1c:	80 f9 01             	cmp    cl,0x1
c0018a1f:	0f 86 9a 01 00 00    	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a2a:	80 fa 0d             	cmp    dl,0xd
c0018a2d:	0f 84 8c 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a33:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a38:	80 fa 0e             	cmp    dl,0xe
c0018a3b:	0f 84 7e 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a41:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a46:	80 fa 0f             	cmp    dl,0xf
c0018a49:	0f 84 70 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4f:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a54:	80 fa 15             	cmp    dl,0x15
c0018a57:	0f 84 62 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a60:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a65:	80 f9 01             	cmp    cl,0x1
c0018a68:	0f 86 51 01 00 00    	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6e:	80 fa 1a             	cmp    dl,0x1a
c0018a71:	0f 84 37 01 00 00    	je     c0018bae <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a77:	80 fa 1c             	cmp    dl,0x1c
c0018a7a:	0f 84 34 01 00 00    	je     c0018bb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a80:	80 fa 1d             	cmp    dl,0x1d
c0018a83:	0f 84 36 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a89:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018a8e:	80 fa 25             	cmp    dl,0x25
c0018a91:	0f 84 28 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a97:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a9a:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a9f:	80 f9 01             	cmp    cl,0x1
c0018aa2:	0f 86 17 01 00 00    	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa8:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018aad:	80 fa 2a             	cmp    dl,0x2a
c0018ab0:	0f 84 09 01 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab6:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018abb:	80 fa 2c             	cmp    dl,0x2c
c0018abe:	0f 84 fb 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac4:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018ac9:	80 fa 2d             	cmp    dl,0x2d
c0018acc:	0f 84 ed 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad2:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018ad7:	80 fa 2e             	cmp    dl,0x2e
c0018ada:	0f 84 df 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae0:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018ae5:	80 fa 2f             	cmp    dl,0x2f
c0018ae8:	0f 84 d1 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aee:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018af1:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018af6:	80 f9 01             	cmp    cl,0x1
c0018af9:	0f 86 c0 00 00 00    	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aff:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b04:	80 fa 37             	cmp    dl,0x37
c0018b07:	0f 84 b2 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0d:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b12:	80 fa 3a             	cmp    dl,0x3a
c0018b15:	0f 84 a4 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1b:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b20:	80 fa 3c             	cmp    dl,0x3c
c0018b23:	0f 84 96 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b29:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b2e:	80 fa 3d             	cmp    dl,0x3d
c0018b31:	0f 84 88 00 00 00    	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b37:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b3c:	80 fa 3e             	cmp    dl,0x3e
c0018b3f:	74 7e                	je     c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b41:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b44:	3c 01                	cmp    al,0x1
c0018b46:	76 72                	jbe    c0018bba <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b48:	80 fa 3f             	cmp    dl,0x3f
c0018b4b:	74 6d                	je     c0018bba <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b4d:	80 fa 4a             	cmp    dl,0x4a
c0018b50:	74 0a                	je     c0018b5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b52:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018b57:	80 fa 4d             	cmp    dl,0x4d
c0018b5a:	75 63                	jne    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5c:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b61:	c3                   	ret    
c0018b62:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018b67:	80 f9 0b             	cmp    cl,0xb
c0018b6a:	75 0a                	jne    c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b6c:	fe ca                	dec    dl
c0018b6e:	75 4f                	jne    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b70:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b75:	c3                   	ret    
c0018b76:	80 f9 0f             	cmp    cl,0xf
c0018b79:	75 44                	jne    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7b:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b80:	80 fa 02             	cmp    dl,0x2
c0018b83:	76 3a                	jbe    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b85:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b88:	3c 01                	cmp    al,0x1
c0018b8a:	76 0a                	jbe    c0018b96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b8c:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018b91:	80 fa 06             	cmp    dl,0x6
c0018b94:	75 29                	jne    c0018bbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b96:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018b9b:	c3                   	ret    
c0018b9c:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018ba1:	c3                   	ret    
c0018ba2:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018ba7:	c3                   	ret    
c0018ba8:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018bad:	c3                   	ret    
c0018bae:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018bb3:	c3                   	ret    
c0018bb4:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018bb9:	c3                   	ret    
c0018bba:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018bbf:	c3                   	ret    

c0018bc0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bc0:	60                   	pusha  
c0018bc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bcd:	9c                   	pushf  
c0018bce:	fa                   	cli    
c0018bcf:	0f 09                	wbinvd 
c0018bd1:	0f 30                	wrmsr  
c0018bd3:	9d                   	popf   
c0018bd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bd8:	89 02                	mov    DWORD PTR [edx],eax
c0018bda:	61                   	popa   
c0018bdb:	c3                   	ret    

c0018bdc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bdc:	60                   	pusha  
c0018bdd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018be1:	9c                   	pushf  
c0018be2:	fa                   	cli    
c0018be3:	0f 09                	wbinvd 
c0018be5:	31 c0                	xor    eax,eax
c0018be7:	31 d2                	xor    edx,edx
c0018be9:	0f 32                	rdmsr  
c0018beb:	9d                   	popf   
c0018bec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bf0:	89 02                	mov    DWORD PTR [edx],eax
c0018bf2:	61                   	popa   
c0018bf3:	c3                   	ret    

c0018bf4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018bf4:	56                   	push   esi
c0018bf5:	53                   	push   ebx
c0018bf6:	83 ec 10             	sub    esp,0x10
c0018bf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bfd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c02:	75 5d                	jne    c0018c61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c04:	83 f8 08             	cmp    eax,0x8
c0018c07:	75 09                	jne    c0018c12 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c09:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c0e:	7e 13                	jle    c0018c23 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c10:	eb 30                	jmp    c0018c42 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c12:	83 f8 06             	cmp    eax,0x6
c0018c15:	7c 4a                	jl     c0018c61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c17:	83 f8 07             	cmp    eax,0x7
c0018c1a:	7e 07                	jle    c0018c23 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c1c:	83 f8 09             	cmp    eax,0x9
c0018c1f:	74 21                	je     c0018c42 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c21:	eb 3e                	jmp    c0018c61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c23:	89 e6                	mov    esi,esp
c0018c25:	8b 1d 28 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e628
c0018c2b:	56                   	push   esi
c0018c2c:	c1 eb 15             	shr    ebx,0x15
c0018c2f:	68 82 00 00 c0       	push   0xc0000082
c0018c34:	83 e3 7e             	and    ebx,0x7e
c0018c37:	e8 a0 ff ff ff       	call   c0018bdc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c3c:	56                   	push   esi
c0018c3d:	6a 00                	push   0x0
c0018c3f:	53                   	push   ebx
c0018c40:	eb 12                	jmp    c0018c54 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c42:	89 e3                	mov    ebx,esp
c0018c44:	53                   	push   ebx
c0018c45:	68 82 00 00 c0       	push   0xc0000082
c0018c4a:	e8 8d ff ff ff       	call   c0018bdc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c4f:	53                   	push   ebx
c0018c50:	6a 00                	push   0x0
c0018c52:	6a 00                	push   0x0
c0018c54:	68 82 00 00 c0       	push   0xc0000082
c0018c59:	e8 62 ff ff ff       	call   c0018bc0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c5e:	83 c4 18             	add    esp,0x18
c0018c61:	83 c4 10             	add    esp,0x10
c0018c64:	5b                   	pop    ebx
c0018c65:	5e                   	pop    esi
c0018c66:	c3                   	ret    
c0018c67:	90                   	nop

c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c68:	55                   	push   ebp
c0018c69:	57                   	push   edi
c0018c6a:	56                   	push   esi
c0018c6b:	53                   	push   ebx
c0018c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c78:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c7c:	39 05 00 db 02 c0    	cmp    DWORD PTR ds:0xc002db00,eax
c0018c82:	75 23                	jne    c0018ca7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c84:	a1 2c 11 03 c0       	mov    eax,ds:0xc003112c
c0018c89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c8d:	89 06                	mov    DWORD PTR [esi],eax
c0018c8f:	a1 28 11 03 c0       	mov    eax,ds:0xc0031128
c0018c94:	89 07                	mov    DWORD PTR [edi],eax
c0018c96:	a1 24 11 03 c0       	mov    eax,ds:0xc0031124
c0018c9b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c9e:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c0018ca3:	89 02                	mov    DWORD PTR [edx],eax
c0018ca5:	eb 3f                	jmp    c0018ce6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018ca7:	31 c9                	xor    ecx,ecx
c0018ca9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cad:	0f a2                	cpuid  
c0018caf:	89 06                	mov    DWORD PTR [esi],eax
c0018cb1:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cb7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cba:	89 10                	mov    DWORD PTR [eax],edx
c0018cbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc0:	a3 00 db 02 c0       	mov    ds:0xc002db00,eax
c0018cc5:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cc7:	a3 2c 11 03 c0       	mov    ds:0xc003112c,eax
c0018ccc:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cce:	a3 28 11 03 c0       	mov    ds:0xc0031128,eax
c0018cd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cd6:	a3 24 11 03 c0       	mov    ds:0xc0031124,eax
c0018cdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ce1:	a3 20 11 03 c0       	mov    ds:0xc0031120,eax
c0018ce6:	5b                   	pop    ebx
c0018ce7:	5e                   	pop    esi
c0018ce8:	5f                   	pop    edi
c0018ce9:	5d                   	pop    ebp
c0018cea:	c3                   	ret    
c0018ceb:	90                   	nop

c0018cec <CPU::cpuidCheckEDX(unsigned int)>:
c0018cec:	83 ec 10             	sub    esp,0x10
c0018cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf3:	50                   	push   eax
c0018cf4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf8:	50                   	push   eax
c0018cf9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cfd:	50                   	push   eax
c0018cfe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d02:	50                   	push   eax
c0018d03:	6a 01                	push   0x1
c0018d05:	e8 5e ff ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d0e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d12:	0f 95 c0             	setne  al
c0018d15:	83 c4 24             	add    esp,0x24
c0018d18:	c3                   	ret    
c0018d19:	90                   	nop

c0018d1a <CPU::cpuidCheckECX(unsigned int)>:
c0018d1a:	83 ec 10             	sub    esp,0x10
c0018d1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d21:	50                   	push   eax
c0018d22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d26:	50                   	push   eax
c0018d27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2b:	50                   	push   eax
c0018d2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d30:	50                   	push   eax
c0018d31:	6a 01                	push   0x1
c0018d33:	e8 30 ff ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d3c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d40:	0f 95 c0             	setne  al
c0018d43:	83 c4 24             	add    esp,0x24
c0018d46:	c3                   	ret    
c0018d47:	90                   	nop

c0018d48 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d48:	83 ec 10             	sub    esp,0x10
c0018d4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4f:	50                   	push   eax
c0018d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d54:	50                   	push   eax
c0018d55:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d59:	50                   	push   eax
c0018d5a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5e:	50                   	push   eax
c0018d5f:	6a 07                	push   0x7
c0018d61:	e8 02 ff ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d6a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d6e:	0f 95 c0             	setne  al
c0018d71:	83 c4 24             	add    esp,0x24
c0018d74:	c3                   	ret    
c0018d75:	90                   	nop

c0018d76 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d76:	83 ec 10             	sub    esp,0x10
c0018d79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7d:	50                   	push   eax
c0018d7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d82:	50                   	push   eax
c0018d83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d87:	50                   	push   eax
c0018d88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8c:	50                   	push   eax
c0018d8d:	6a 07                	push   0x7
c0018d8f:	e8 d4 fe ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d98:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d9c:	0f 95 c0             	setne  al
c0018d9f:	83 c4 24             	add    esp,0x24
c0018da2:	c3                   	ret    
c0018da3:	90                   	nop

c0018da4 <CPU::CPU()>:
c0018da4:	83 ec 0c             	sub    esp,0xc
c0018da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dab:	83 ec 08             	sub    esp,0x8
c0018dae:	68 62 ba 02 c0       	push   0xc002ba62
c0018db3:	50                   	push   eax
c0018db4:	e8 89 b7 ff ff       	call   c0014542 <Device::Device(char const*)>
c0018db9:	83 c4 10             	add    esp,0x10
c0018dbc:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0018dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc5:	89 10                	mov    DWORD PTR [eax],edx
c0018dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dcb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd9:	05 78 01 00 00       	add    eax,0x178
c0018dde:	83 ec 0c             	sub    esp,0xc
c0018de1:	50                   	push   eax
c0018de2:	e8 71 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dee:	05 7c 09 00 00       	add    eax,0x97c
c0018df3:	83 ec 0c             	sub    esp,0xc
c0018df6:	50                   	push   eax
c0018df7:	e8 be 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018dfc:	83 c4 10             	add    esp,0x10
c0018dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e03:	05 7c 11 00 00       	add    eax,0x117c
c0018e08:	83 ec 0c             	sub    esp,0xc
c0018e0b:	50                   	push   eax
c0018e0c:	e8 ab 86 ff ff       	call   c00114bc <TSS::TSS()>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e18:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e23:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e2d:	90                   	nop
c0018e2e:	83 c4 0c             	add    esp,0xc
c0018e31:	c3                   	ret    

c0018e32 <CPU::displayFeatures()>:
c0018e32:	53                   	push   ebx
c0018e33:	83 ec 10             	sub    esp,0x10
c0018e36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e3a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e40:	68 70 b7 02 c0       	push   0xc002b770
c0018e45:	e8 e2 a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018e4a:	59                   	pop    ecx
c0018e4b:	58                   	pop    eax
c0018e4c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e52:	50                   	push   eax
c0018e53:	68 81 b7 02 c0       	push   0xc002b781
c0018e58:	e8 cf a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018e5d:	58                   	pop    eax
c0018e5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e64:	5a                   	pop    edx
c0018e65:	c1 e8 0e             	shr    eax,0xe
c0018e68:	0f b6 c0             	movzx  eax,al
c0018e6b:	50                   	push   eax
c0018e6c:	68 92 b7 02 c0       	push   0xc002b792
c0018e71:	e8 b6 a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018e76:	59                   	pop    ecx
c0018e77:	58                   	pop    eax
c0018e78:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e7e:	66 c1 e8 06          	shr    ax,0x6
c0018e82:	0f b6 c0             	movzx  eax,al
c0018e85:	50                   	push   eax
c0018e86:	68 a3 b7 02 c0       	push   0xc002b7a3
c0018e8b:	e8 9c a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018e90:	c7 04 24 50 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc50
c0018e97:	e8 90 a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018e9c:	83 c4 10             	add    esp,0x10
c0018e9f:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018ea4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018eab:	74 05                	je     c0018eb2 <CPU::displayFeatures()+0x80>
c0018ead:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018eb2:	52                   	push   edx
c0018eb3:	52                   	push   edx
c0018eb4:	50                   	push   eax
c0018eb5:	68 b4 b7 02 c0       	push   0xc002b7b4
c0018eba:	e8 6d a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018ebf:	83 c4 10             	add    esp,0x10
c0018ec2:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018ec7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018ece:	78 05                	js     c0018ed5 <CPU::displayFeatures()+0xa3>
c0018ed0:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018ed5:	51                   	push   ecx
c0018ed6:	51                   	push   ecx
c0018ed7:	50                   	push   eax
c0018ed8:	68 cb b7 02 c0       	push   0xc002b7cb
c0018edd:	e8 4a a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018ee2:	83 c4 10             	add    esp,0x10
c0018ee5:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018eea:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ef1:	75 05                	jne    c0018ef8 <CPU::displayFeatures()+0xc6>
c0018ef3:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018ef8:	52                   	push   edx
c0018ef9:	52                   	push   edx
c0018efa:	50                   	push   eax
c0018efb:	68 e2 b7 02 c0       	push   0xc002b7e2
c0018f00:	e8 27 a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018f05:	83 c4 10             	add    esp,0x10
c0018f08:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f0d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f14:	75 05                	jne    c0018f1b <CPU::displayFeatures()+0xe9>
c0018f16:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f1b:	51                   	push   ecx
c0018f1c:	51                   	push   ecx
c0018f1d:	50                   	push   eax
c0018f1e:	68 f9 b7 02 c0       	push   0xc002b7f9
c0018f23:	e8 04 a0 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018f28:	83 c4 10             	add    esp,0x10
c0018f2b:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f30:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f37:	75 05                	jne    c0018f3e <CPU::displayFeatures()+0x10c>
c0018f39:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f3e:	52                   	push   edx
c0018f3f:	52                   	push   edx
c0018f40:	50                   	push   eax
c0018f41:	68 10 b8 02 c0       	push   0xc002b810
c0018f46:	e8 e1 9f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018f4b:	83 c4 10             	add    esp,0x10
c0018f4e:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f53:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f5a:	75 05                	jne    c0018f61 <CPU::displayFeatures()+0x12f>
c0018f5c:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f61:	51                   	push   ecx
c0018f62:	51                   	push   ecx
c0018f63:	50                   	push   eax
c0018f64:	68 27 b8 02 c0       	push   0xc002b827
c0018f69:	e8 be 9f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018f6e:	83 c4 10             	add    esp,0x10
c0018f71:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f76:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f7d:	75 05                	jne    c0018f84 <CPU::displayFeatures()+0x152>
c0018f7f:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f84:	52                   	push   edx
c0018f85:	52                   	push   edx
c0018f86:	50                   	push   eax
c0018f87:	68 3e b8 02 c0       	push   0xc002b83e
c0018f8c:	e8 9b 9f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018f91:	83 c4 10             	add    esp,0x10
c0018f94:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f99:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fa0:	75 05                	jne    c0018fa7 <CPU::displayFeatures()+0x175>
c0018fa2:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fa7:	51                   	push   ecx
c0018fa8:	51                   	push   ecx
c0018fa9:	50                   	push   eax
c0018faa:	68 55 b8 02 c0       	push   0xc002b855
c0018faf:	e8 78 9f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018fb4:	83 c4 10             	add    esp,0x10
c0018fb7:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fbc:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fc3:	75 05                	jne    c0018fca <CPU::displayFeatures()+0x198>
c0018fc5:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fca:	52                   	push   edx
c0018fcb:	52                   	push   edx
c0018fcc:	50                   	push   eax
c0018fcd:	68 6c b8 02 c0       	push   0xc002b86c
c0018fd2:	e8 55 9f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018fd7:	83 c4 10             	add    esp,0x10
c0018fda:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fdf:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018fe6:	75 05                	jne    c0018fed <CPU::displayFeatures()+0x1bb>
c0018fe8:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fed:	51                   	push   ecx
c0018fee:	51                   	push   ecx
c0018fef:	50                   	push   eax
c0018ff0:	68 83 b8 02 c0       	push   0xc002b883
c0018ff5:	e8 32 9f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019002:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019009:	75 05                	jne    c0019010 <CPU::displayFeatures()+0x1de>
c001900b:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019010:	52                   	push   edx
c0019011:	52                   	push   edx
c0019012:	50                   	push   eax
c0019013:	68 9a b8 02 c0       	push   0xc002b89a
c0019018:	e8 0f 9f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001901d:	83 c4 10             	add    esp,0x10
c0019020:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019025:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001902c:	75 05                	jne    c0019033 <CPU::displayFeatures()+0x201>
c001902e:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019033:	51                   	push   ecx
c0019034:	51                   	push   ecx
c0019035:	50                   	push   eax
c0019036:	68 b1 b8 02 c0       	push   0xc002b8b1
c001903b:	e8 ec 9e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0019040:	83 c4 10             	add    esp,0x10
c0019043:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019048:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001904f:	75 05                	jne    c0019056 <CPU::displayFeatures()+0x224>
c0019051:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019056:	52                   	push   edx
c0019057:	52                   	push   edx
c0019058:	50                   	push   eax
c0019059:	68 c8 b8 02 c0       	push   0xc002b8c8
c001905e:	e8 c9 9e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c001906b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019072:	78 05                	js     c0019079 <CPU::displayFeatures()+0x247>
c0019074:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019079:	51                   	push   ecx
c001907a:	51                   	push   ecx
c001907b:	50                   	push   eax
c001907c:	68 df b8 02 c0       	push   0xc002b8df
c0019081:	e8 a6 9e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c001908e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019095:	75 05                	jne    c001909c <CPU::displayFeatures()+0x26a>
c0019097:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c001909c:	52                   	push   edx
c001909d:	52                   	push   edx
c001909e:	50                   	push   eax
c001909f:	68 f6 b8 02 c0       	push   0xc002b8f6
c00190a4:	e8 83 9e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00190a9:	83 c4 18             	add    esp,0x18
c00190ac:	5b                   	pop    ebx
c00190ad:	c3                   	ret    

c00190ae <CPU::detectFeatures()>:
c00190ae:	55                   	push   ebp
c00190af:	57                   	push   edi
c00190b0:	56                   	push   esi
c00190b1:	53                   	push   ebx
c00190b2:	83 ec 50             	sub    esp,0x50
c00190b5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190b9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190c3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190ca:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190d0:	6a 0d                	push   0xd
c00190d2:	6a 00                	push   0x0
c00190d4:	57                   	push   edi
c00190d5:	e8 9e 76 fe ff       	call   c0000778 <memset>
c00190da:	83 c4 10             	add    esp,0x10
c00190dd:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00190e2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190e9:	0f 84 20 09 00 00    	je     c0019a0f <CPU::detectFeatures()+0x961>
c00190ef:	83 ec 0c             	sub    esp,0xc
c00190f2:	6a 10                	push   0x10
c00190f4:	e8 f3 fb ff ff       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c00190f9:	83 e0 01             	and    eax,0x1
c00190fc:	8d 14 00             	lea    edx,[eax+eax*1]
c00190ff:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019105:	83 e0 fd             	and    eax,0xfffffffd
c0019108:	09 d0                	or     eax,edx
c001910a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019110:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019117:	e8 d0 fb ff ff       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c001911c:	83 e0 01             	and    eax,0x1
c001911f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019126:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001912c:	83 e0 fb             	and    eax,0xfffffffb
c001912f:	09 d0                	or     eax,edx
c0019131:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019137:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001913e:	e8 a9 fb ff ff       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c0019143:	83 e0 01             	and    eax,0x1
c0019146:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001914d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019153:	83 e0 f7             	and    eax,0xfffffff7
c0019156:	09 d0                	or     eax,edx
c0019158:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001915e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019165:	e8 82 fb ff ff       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c001916a:	83 e0 01             	and    eax,0x1
c001916d:	c1 e0 04             	shl    eax,0x4
c0019170:	88 c2                	mov    dl,al
c0019172:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019178:	83 e0 ef             	and    eax,0xffffffef
c001917b:	09 d0                	or     eax,edx
c001917d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019183:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001918a:	e8 5d fb ff ff       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c001918f:	83 e0 01             	and    eax,0x1
c0019192:	c1 e0 05             	shl    eax,0x5
c0019195:	88 c2                	mov    dl,al
c0019197:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001919d:	83 e0 df             	and    eax,0xffffffdf
c00191a0:	09 d0                	or     eax,edx
c00191a2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191af:	e8 38 fb ff ff       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c00191b4:	83 e0 01             	and    eax,0x1
c00191b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00191ba:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191c0:	83 e0 fd             	and    eax,0xfffffffd
c00191c3:	09 d0                	or     eax,edx
c00191c5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191cb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191d2:	e8 15 fb ff ff       	call   c0018cec <CPU::cpuidCheckEDX(unsigned int)>
c00191d7:	83 e0 01             	and    eax,0x1
c00191da:	c1 e0 06             	shl    eax,0x6
c00191dd:	88 c2                	mov    dl,al
c00191df:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191e5:	83 e0 bf             	and    eax,0xffffffbf
c00191e8:	09 d0                	or     eax,edx
c00191ea:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191f0:	58                   	pop    eax
c00191f1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191f5:	56                   	push   esi
c00191f6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191fa:	55                   	push   ebp
c00191fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191ff:	50                   	push   eax
c0019200:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019204:	52                   	push   edx
c0019205:	6a 00                	push   0x0
c0019207:	e8 5c fa ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001920c:	83 c4 1c             	add    esp,0x1c
c001920f:	6a 04                	push   0x4
c0019211:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019215:	50                   	push   eax
c0019216:	57                   	push   edi
c0019217:	e8 28 75 fe ff       	call   c0000744 <memcpy>
c001921c:	83 c4 0c             	add    esp,0xc
c001921f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019225:	6a 04                	push   0x4
c0019227:	56                   	push   esi
c0019228:	50                   	push   eax
c0019229:	e8 16 75 fe ff       	call   c0000744 <memcpy>
c001922e:	83 c4 0c             	add    esp,0xc
c0019231:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019237:	6a 04                	push   0x4
c0019239:	55                   	push   ebp
c001923a:	50                   	push   eax
c001923b:	e8 04 75 fe ff       	call   c0000744 <memcpy>
c0019240:	58                   	pop    eax
c0019241:	5a                   	pop    edx
c0019242:	68 0d b9 02 c0       	push   0xc002b90d
c0019247:	57                   	push   edi
c0019248:	e8 73 76 fe ff       	call   c00008c0 <strcmp>
c001924d:	83 c4 10             	add    esp,0x10
c0019250:	85 c0                	test   eax,eax
c0019252:	75 0f                	jne    c0019263 <CPU::detectFeatures()+0x1b5>
c0019254:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001925e:	e9 22 02 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c0019263:	50                   	push   eax
c0019264:	50                   	push   eax
c0019265:	68 1a b9 02 c0       	push   0xc002b91a
c001926a:	57                   	push   edi
c001926b:	e8 50 76 fe ff       	call   c00008c0 <strcmp>
c0019270:	83 c4 10             	add    esp,0x10
c0019273:	85 c0                	test   eax,eax
c0019275:	74 dd                	je     c0019254 <CPU::detectFeatures()+0x1a6>
c0019277:	51                   	push   ecx
c0019278:	51                   	push   ecx
c0019279:	68 27 b9 02 c0       	push   0xc002b927
c001927e:	57                   	push   edi
c001927f:	e8 3c 76 fe ff       	call   c00008c0 <strcmp>
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	85 c0                	test   eax,eax
c0019289:	74 2a                	je     c00192b5 <CPU::detectFeatures()+0x207>
c001928b:	52                   	push   edx
c001928c:	52                   	push   edx
c001928d:	68 34 b9 02 c0       	push   0xc002b934
c0019292:	57                   	push   edi
c0019293:	e8 28 76 fe ff       	call   c00008c0 <strcmp>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	85 c0                	test   eax,eax
c001929d:	74 16                	je     c00192b5 <CPU::detectFeatures()+0x207>
c001929f:	50                   	push   eax
c00192a0:	50                   	push   eax
c00192a1:	68 41 b9 02 c0       	push   0xc002b941
c00192a6:	57                   	push   edi
c00192a7:	e8 14 76 fe ff       	call   c00008c0 <strcmp>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	85 c0                	test   eax,eax
c00192b1:	74 48                	je     c00192fb <CPU::detectFeatures()+0x24d>
c00192b3:	eb 0f                	jmp    c00192c4 <CPU::detectFeatures()+0x216>
c00192b5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192bf:	e9 c1 01 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c00192c4:	50                   	push   eax
c00192c5:	50                   	push   eax
c00192c6:	68 4e b9 02 c0       	push   0xc002b94e
c00192cb:	57                   	push   edi
c00192cc:	e8 ef 75 fe ff       	call   c00008c0 <strcmp>
c00192d1:	83 c4 10             	add    esp,0x10
c00192d4:	85 c0                	test   eax,eax
c00192d6:	74 23                	je     c00192fb <CPU::detectFeatures()+0x24d>
c00192d8:	50                   	push   eax
c00192d9:	50                   	push   eax
c00192da:	68 5b b9 02 c0       	push   0xc002b95b
c00192df:	57                   	push   edi
c00192e0:	e8 db 75 fe ff       	call   c00008c0 <strcmp>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	85 c0                	test   eax,eax
c00192ea:	75 1e                	jne    c001930a <CPU::detectFeatures()+0x25c>
c00192ec:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192f6:	e9 8a 01 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c00192fb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019305:	e9 7b 01 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c001930a:	50                   	push   eax
c001930b:	50                   	push   eax
c001930c:	68 68 b9 02 c0       	push   0xc002b968
c0019311:	57                   	push   edi
c0019312:	e8 a9 75 fe ff       	call   c00008c0 <strcmp>
c0019317:	83 c4 10             	add    esp,0x10
c001931a:	85 c0                	test   eax,eax
c001931c:	75 0f                	jne    c001932d <CPU::detectFeatures()+0x27f>
c001931e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019328:	e9 58 01 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c001932d:	50                   	push   eax
c001932e:	50                   	push   eax
c001932f:	68 27 b9 02 c0       	push   0xc002b927
c0019334:	57                   	push   edi
c0019335:	e8 86 75 fe ff       	call   c00008c0 <strcmp>
c001933a:	83 c4 10             	add    esp,0x10
c001933d:	85 c0                	test   eax,eax
c001933f:	75 0f                	jne    c0019350 <CPU::detectFeatures()+0x2a2>
c0019341:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001934b:	e9 35 01 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c0019350:	50                   	push   eax
c0019351:	50                   	push   eax
c0019352:	68 75 b9 02 c0       	push   0xc002b975
c0019357:	57                   	push   edi
c0019358:	e8 63 75 fe ff       	call   c00008c0 <strcmp>
c001935d:	83 c4 10             	add    esp,0x10
c0019360:	85 c0                	test   eax,eax
c0019362:	75 0f                	jne    c0019373 <CPU::detectFeatures()+0x2c5>
c0019364:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001936e:	e9 12 01 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c0019373:	51                   	push   ecx
c0019374:	51                   	push   ecx
c0019375:	68 82 b9 02 c0       	push   0xc002b982
c001937a:	57                   	push   edi
c001937b:	e8 40 75 fe ff       	call   c00008c0 <strcmp>
c0019380:	83 c4 10             	add    esp,0x10
c0019383:	85 c0                	test   eax,eax
c0019385:	75 0f                	jne    c0019396 <CPU::detectFeatures()+0x2e8>
c0019387:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019391:	e9 ef 00 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c0019396:	52                   	push   edx
c0019397:	52                   	push   edx
c0019398:	68 8f b9 02 c0       	push   0xc002b98f
c001939d:	57                   	push   edi
c001939e:	e8 1d 75 fe ff       	call   c00008c0 <strcmp>
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	85 c0                	test   eax,eax
c00193a8:	75 0f                	jne    c00193b9 <CPU::detectFeatures()+0x30b>
c00193aa:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193b4:	e9 cc 00 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c00193b9:	50                   	push   eax
c00193ba:	50                   	push   eax
c00193bb:	68 9c b9 02 c0       	push   0xc002b99c
c00193c0:	57                   	push   edi
c00193c1:	e8 fa 74 fe ff       	call   c00008c0 <strcmp>
c00193c6:	83 c4 10             	add    esp,0x10
c00193c9:	85 c0                	test   eax,eax
c00193cb:	75 0f                	jne    c00193dc <CPU::detectFeatures()+0x32e>
c00193cd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193d7:	e9 a9 00 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c00193dc:	50                   	push   eax
c00193dd:	50                   	push   eax
c00193de:	68 a9 b9 02 c0       	push   0xc002b9a9
c00193e3:	57                   	push   edi
c00193e4:	e8 d7 74 fe ff       	call   c00008c0 <strcmp>
c00193e9:	83 c4 10             	add    esp,0x10
c00193ec:	85 c0                	test   eax,eax
c00193ee:	75 0f                	jne    c00193ff <CPU::detectFeatures()+0x351>
c00193f0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193fa:	e9 86 00 00 00       	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c00193ff:	50                   	push   eax
c0019400:	50                   	push   eax
c0019401:	68 b6 b9 02 c0       	push   0xc002b9b6
c0019406:	57                   	push   edi
c0019407:	e8 b4 74 fe ff       	call   c00008c0 <strcmp>
c001940c:	83 c4 10             	add    esp,0x10
c001940f:	85 c0                	test   eax,eax
c0019411:	75 0c                	jne    c001941f <CPU::detectFeatures()+0x371>
c0019413:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001941d:	eb 66                	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c001941f:	50                   	push   eax
c0019420:	50                   	push   eax
c0019421:	68 c3 b9 02 c0       	push   0xc002b9c3
c0019426:	57                   	push   edi
c0019427:	e8 94 74 fe ff       	call   c00008c0 <strcmp>
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	85 c0                	test   eax,eax
c0019431:	75 0c                	jne    c001943f <CPU::detectFeatures()+0x391>
c0019433:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001943d:	eb 46                	jmp    c0019485 <CPU::detectFeatures()+0x3d7>
c001943f:	50                   	push   eax
c0019440:	50                   	push   eax
c0019441:	68 d0 b9 02 c0       	push   0xc002b9d0
c0019446:	57                   	push   edi
c0019447:	e8 74 74 fe ff       	call   c00008c0 <strcmp>
c001944c:	83 c4 10             	add    esp,0x10
c001944f:	85 c0                	test   eax,eax
c0019451:	74 e0                	je     c0019433 <CPU::detectFeatures()+0x385>
c0019453:	50                   	push   eax
c0019454:	50                   	push   eax
c0019455:	68 dd b9 02 c0       	push   0xc002b9dd
c001945a:	57                   	push   edi
c001945b:	e8 60 74 fe ff       	call   c00008c0 <strcmp>
c0019460:	83 c4 10             	add    esp,0x10
c0019463:	85 c0                	test   eax,eax
c0019465:	74 cc                	je     c0019433 <CPU::detectFeatures()+0x385>
c0019467:	51                   	push   ecx
c0019468:	51                   	push   ecx
c0019469:	68 ea b9 02 c0       	push   0xc002b9ea
c001946e:	57                   	push   edi
c001946f:	e8 4c 74 fe ff       	call   c00008c0 <strcmp>
c0019474:	83 c4 10             	add    esp,0x10
c0019477:	85 c0                	test   eax,eax
c0019479:	74 b8                	je     c0019433 <CPU::detectFeatures()+0x385>
c001947b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019485:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001948a:	0f 86 be 00 00 00    	jbe    c001954e <CPU::detectFeatures()+0x4a0>
c0019490:	83 ec 0c             	sub    esp,0xc
c0019493:	68 80 00 00 00       	push   0x80
c0019498:	e8 ab f8 ff ff       	call   c0018d48 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001949d:	83 e0 01             	and    eax,0x1
c00194a0:	c1 e0 06             	shl    eax,0x6
c00194a3:	88 c2                	mov    dl,al
c00194a5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194ab:	83 e0 bf             	and    eax,0xffffffbf
c00194ae:	09 d0                	or     eax,edx
c00194b0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194b6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194bd:	e8 86 f8 ff ff       	call   c0018d48 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194c2:	83 e0 01             	and    eax,0x1
c00194c5:	c1 e0 04             	shl    eax,0x4
c00194c8:	88 c2                	mov    dl,al
c00194ca:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194d0:	83 e0 ef             	and    eax,0xffffffef
c00194d3:	09 d0                	or     eax,edx
c00194d5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194db:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194e2:	e8 61 f8 ff ff       	call   c0018d48 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194e7:	c1 e0 07             	shl    eax,0x7
c00194ea:	88 c2                	mov    dl,al
c00194ec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194f2:	83 e0 7f             	and    eax,0x7f
c00194f5:	09 d0                	or     eax,edx
c00194f7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194fd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019504:	e8 6d f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019509:	83 e0 01             	and    eax,0x1
c001950c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019513:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019519:	83 e0 f7             	and    eax,0xfffffff7
c001951c:	09 d0                	or     eax,edx
c001951e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019524:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001952b:	e8 46 f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	83 e0 01             	and    eax,0x1
c0019536:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001953d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019543:	83 e0 fb             	and    eax,0xfffffffb
c0019546:	09 d0                	or     eax,edx
c0019548:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001954e:	83 ec 0c             	sub    esp,0xc
c0019551:	56                   	push   esi
c0019552:	55                   	push   ebp
c0019553:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019557:	57                   	push   edi
c0019558:	8d 44 24 28          	lea    eax,[esp+0x28]
c001955c:	50                   	push   eax
c001955d:	6a 01                	push   0x1
c001955f:	e8 04 f7 ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019564:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019568:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001956e:	88 ca                	mov    dl,cl
c0019570:	83 e0 f0             	and    eax,0xfffffff0
c0019573:	83 e2 0f             	and    edx,0xf
c0019576:	09 d0                	or     eax,edx
c0019578:	88 ca                	mov    dl,cl
c001957a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019580:	c0 ea 04             	shr    dl,0x4
c0019583:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019587:	0f b6 c2             	movzx  eax,dl
c001958a:	83 c4 20             	add    esp,0x20
c001958d:	c1 e0 06             	shl    eax,0x6
c0019590:	89 c5                	mov    ebp,eax
c0019592:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019598:	66 25 3f c0          	and    ax,0xc03f
c001959c:	09 e8                	or     eax,ebp
c001959e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195a5:	89 c8                	mov    eax,ecx
c00195a7:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195ad:	c1 e8 08             	shr    eax,0x8
c00195b0:	83 e2 3f             	and    edx,0x3f
c00195b3:	83 e0 0f             	and    eax,0xf
c00195b6:	89 c5                	mov    ebp,eax
c00195b8:	c1 e5 06             	shl    ebp,0x6
c00195bb:	09 d5                	or     ebp,edx
c00195bd:	89 ea                	mov    edx,ebp
c00195bf:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195c5:	88 c2                	mov    dl,al
c00195c7:	c0 ea 02             	shr    dl,0x2
c00195ca:	89 d5                	mov    ebp,edx
c00195cc:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195d2:	83 e2 c0             	and    edx,0xffffffc0
c00195d5:	09 d5                	or     ebp,edx
c00195d7:	89 ea                	mov    edx,ebp
c00195d9:	89 cd                	mov    ebp,ecx
c00195db:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195e1:	c1 ed 0c             	shr    ebp,0xc
c00195e4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00195ea:	83 e5 03             	and    ebp,0x3
c00195ed:	83 e2 cf             	and    edx,0xffffffcf
c00195f0:	c1 e5 04             	shl    ebp,0x4
c00195f3:	09 d5                	or     ebp,edx
c00195f5:	3c 06                	cmp    al,0x6
c00195f7:	89 ea                	mov    edx,ebp
c00195f9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195ff:	74 04                	je     c0019605 <CPU::detectFeatures()+0x557>
c0019601:	3c 0f                	cmp    al,0xf
c0019603:	75 5c                	jne    c0019661 <CPU::detectFeatures()+0x5b3>
c0019605:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019609:	89 cd                	mov    ebp,ecx
c001960b:	c1 ed 10             	shr    ebp,0x10
c001960e:	c1 e5 04             	shl    ebp,0x4
c0019611:	09 ea                	or     edx,ebp
c0019613:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019619:	0f b6 d2             	movzx  edx,dl
c001961c:	66 81 e5 3f c0       	and    bp,0xc03f
c0019621:	c1 e2 06             	shl    edx,0x6
c0019624:	09 ea                	or     edx,ebp
c0019626:	3c 0f                	cmp    al,0xf
c0019628:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001962f:	75 30                	jne    c0019661 <CPU::detectFeatures()+0x5b3>
c0019631:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019637:	c1 e9 14             	shr    ecx,0x14
c001963a:	83 e0 3f             	and    eax,0x3f
c001963d:	83 c1 0f             	add    ecx,0xf
c0019640:	88 ca                	mov    dl,cl
c0019642:	c0 e9 02             	shr    cl,0x2
c0019645:	c1 e2 06             	shl    edx,0x6
c0019648:	09 d0                	or     eax,edx
c001964a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019650:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019656:	83 e0 c0             	and    eax,0xffffffc0
c0019659:	09 c1                	or     ecx,eax
c001965b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019661:	83 ec 0c             	sub    esp,0xc
c0019664:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001966b:	56                   	push   esi
c001966c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019670:	50                   	push   eax
c0019671:	57                   	push   edi
c0019672:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019676:	55                   	push   ebp
c0019677:	68 00 00 00 80       	push   0x80000000
c001967c:	e8 e7 f5 ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019681:	83 c4 20             	add    esp,0x20
c0019684:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001968c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019690:	76 1e                	jbe    c00196b0 <CPU::detectFeatures()+0x602>
c0019692:	83 ec 0c             	sub    esp,0xc
c0019695:	56                   	push   esi
c0019696:	50                   	push   eax
c0019697:	57                   	push   edi
c0019698:	55                   	push   ebp
c0019699:	68 01 00 00 80       	push   0x80000001
c001969e:	e8 c5 f5 ff ff       	call   c0018c68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196a3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196ad:	83 c4 20             	add    esp,0x20
c00196b0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196b6:	83 f8 01             	cmp    eax,0x1
c00196b9:	75 6f                	jne    c001972a <CPU::detectFeatures()+0x67c>
c00196bb:	51                   	push   ecx
c00196bc:	51                   	push   ecx
c00196bd:	68 f6 b9 02 c0       	push   0xc002b9f6
c00196c2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196c6:	56                   	push   esi
c00196c7:	e8 68 71 fe ff       	call   c0000834 <strcpy>
c00196cc:	5f                   	pop    edi
c00196cd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196d3:	5d                   	pop    ebp
c00196d4:	66 c1 e8 06          	shr    ax,0x6
c00196d8:	0f b6 c0             	movzx  eax,al
c00196db:	50                   	push   eax
c00196dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196e2:	c1 e8 0e             	shr    eax,0xe
c00196e5:	0f b6 c0             	movzx  eax,al
c00196e8:	50                   	push   eax
c00196e9:	e8 24 f2 ff ff       	call   c0018912 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00196ee:	5a                   	pop    edx
c00196ef:	59                   	pop    ecx
c00196f0:	50                   	push   eax
c00196f1:	56                   	push   esi
c00196f2:	e8 7d 72 fe ff       	call   c0000974 <strcat>
c00196f7:	5f                   	pop    edi
c00196f8:	5d                   	pop    ebp
c00196f9:	56                   	push   esi
c00196fa:	53                   	push   ebx
c00196fb:	e8 34 ae ff ff       	call   c0014534 <Device::setName(char const*)>
c0019700:	58                   	pop    eax
c0019701:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019707:	5a                   	pop    edx
c0019708:	68 fd b9 02 c0       	push   0xc002b9fd
c001970d:	50                   	push   eax
c001970e:	e8 ad 71 fe ff       	call   c00008c0 <strcmp>
c0019713:	83 c4 10             	add    esp,0x10
c0019716:	85 c0                	test   eax,eax
c0019718:	0f 85 71 03 00 00    	jne    c0019a8f <CPU::detectFeatures()+0x9e1>
c001971e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019725:	e9 65 03 00 00       	jmp    c0019a8f <CPU::detectFeatures()+0x9e1>
c001972a:	83 f8 02             	cmp    eax,0x2
c001972d:	0f 85 b5 00 00 00    	jne    c00197e8 <CPU::detectFeatures()+0x73a>
c0019733:	57                   	push   edi
c0019734:	57                   	push   edi
c0019735:	68 0f ba 02 c0       	push   0xc002ba0f
c001973a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001973e:	56                   	push   esi
c001973f:	e8 f0 70 fe ff       	call   c0000834 <strcpy>
c0019744:	5d                   	pop    ebp
c0019745:	58                   	pop    eax
c0019746:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001974c:	66 c1 e8 06          	shr    ax,0x6
c0019750:	0f b6 c0             	movzx  eax,al
c0019753:	50                   	push   eax
c0019754:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001975a:	c1 e8 0e             	shr    eax,0xe
c001975d:	0f b6 c0             	movzx  eax,al
c0019760:	50                   	push   eax
c0019761:	e8 18 f0 ff ff       	call   c001877e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019766:	5a                   	pop    edx
c0019767:	59                   	pop    ecx
c0019768:	50                   	push   eax
c0019769:	56                   	push   esi
c001976a:	e8 05 72 fe ff       	call   c0000974 <strcat>
c001976f:	5f                   	pop    edi
c0019770:	5d                   	pop    ebp
c0019771:	56                   	push   esi
c0019772:	53                   	push   ebx
c0019773:	e8 bc ad ff ff       	call   c0014534 <Device::setName(char const*)>
c0019778:	58                   	pop    eax
c0019779:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001977f:	5a                   	pop    edx
c0019780:	68 14 ba 02 c0       	push   0xc002ba14
c0019785:	50                   	push   eax
c0019786:	e8 35 71 fe ff       	call   c00008c0 <strcmp>
c001978b:	83 c4 10             	add    esp,0x10
c001978e:	85 c0                	test   eax,eax
c0019790:	75 20                	jne    c00197b2 <CPU::detectFeatures()+0x704>
c0019792:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0019798:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001979e:	a8 01                	test   al,0x1
c00197a0:	74 10                	je     c00197b2 <CPU::detectFeatures()+0x704>
c00197a2:	83 e0 fe             	and    eax,0xfffffffe
c00197a5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197ab:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197b8:	c1 e8 0e             	shr    eax,0xe
c00197bb:	3c 05                	cmp    al,0x5
c00197bd:	0f 85 cc 02 00 00    	jne    c0019a8f <CPU::detectFeatures()+0x9e1>
c00197c3:	56                   	push   esi
c00197c4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197ca:	83 e0 0f             	and    eax,0xf
c00197cd:	50                   	push   eax
c00197ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d4:	66 c1 e8 06          	shr    ax,0x6
c00197d8:	0f b6 c0             	movzx  eax,al
c00197db:	50                   	push   eax
c00197dc:	6a 05                	push   0x5
c00197de:	e8 11 f4 ff ff       	call   c0018bf4 <CPU::AMD_K6_writeback(int, int, int)>
c00197e3:	e9 1f 02 00 00       	jmp    c0019a07 <CPU::detectFeatures()+0x959>
c00197e8:	8d 50 fd             	lea    edx,[eax-0x3]
c00197eb:	83 fa 01             	cmp    edx,0x1
c00197ee:	76 09                	jbe    c00197f9 <CPU::detectFeatures()+0x74b>
c00197f0:	83 f8 06             	cmp    eax,0x6
c00197f3:	0f 85 91 01 00 00    	jne    c001998a <CPU::detectFeatures()+0x8dc>
c00197f9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197ff:	c1 ea 0e             	shr    edx,0xe
c0019802:	80 fa 05             	cmp    dl,0x5
c0019805:	75 7b                	jne    c0019882 <CPU::detectFeatures()+0x7d4>
c0019807:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001980d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019812:	66 81 fa 00 01       	cmp    dx,0x100
c0019817:	75 0c                	jne    c0019825 <CPU::detectFeatures()+0x777>
c0019819:	51                   	push   ecx
c001981a:	51                   	push   ecx
c001981b:	68 1b ba 02 c0       	push   0xc002ba1b
c0019820:	e9 dc 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c0019825:	66 81 fa 00 02       	cmp    dx,0x200
c001982a:	75 0c                	jne    c0019838 <CPU::detectFeatures()+0x78a>
c001982c:	52                   	push   edx
c001982d:	52                   	push   edx
c001982e:	68 2e ba 02 c0       	push   0xc002ba2e
c0019833:	e9 c9 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c0019838:	66 81 fa 40 02       	cmp    dx,0x240
c001983d:	75 0c                	jne    c001984b <CPU::detectFeatures()+0x79d>
c001983f:	50                   	push   eax
c0019840:	50                   	push   eax
c0019841:	68 40 ba 02 c0       	push   0xc002ba40
c0019846:	e9 b6 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c001984b:	83 f8 06             	cmp    eax,0x6
c001984e:	75 0c                	jne    c001985c <CPU::detectFeatures()+0x7ae>
c0019850:	50                   	push   eax
c0019851:	50                   	push   eax
c0019852:	68 52 ba 02 c0       	push   0xc002ba52
c0019857:	e9 a5 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c001985c:	83 f8 04             	cmp    eax,0x4
c001985f:	75 0c                	jne    c001986d <CPU::detectFeatures()+0x7bf>
c0019861:	50                   	push   eax
c0019862:	50                   	push   eax
c0019863:	68 5e ba 02 c0       	push   0xc002ba5e
c0019868:	e9 94 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c001986d:	83 f8 03             	cmp    eax,0x3
c0019870:	0f 85 19 02 00 00    	jne    c0019a8f <CPU::detectFeatures()+0x9e1>
c0019876:	50                   	push   eax
c0019877:	50                   	push   eax
c0019878:	68 66 ba 02 c0       	push   0xc002ba66
c001987d:	e9 7f 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c0019882:	80 fa 06             	cmp    dl,0x6
c0019885:	0f 85 db 00 00 00    	jne    c0019966 <CPU::detectFeatures()+0x8b8>
c001988b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019891:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019896:	66 81 fa 80 01       	cmp    dx,0x180
c001989b:	75 0c                	jne    c00198a9 <CPU::detectFeatures()+0x7fb>
c001989d:	50                   	push   eax
c001989e:	50                   	push   eax
c001989f:	68 71 ba 02 c0       	push   0xc002ba71
c00198a4:	e9 58 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00198a9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198af:	66 f7 c1 80 ff       	test   cx,0xff80
c00198b4:	75 0c                	jne    c00198c2 <CPU::detectFeatures()+0x814>
c00198b6:	50                   	push   eax
c00198b7:	50                   	push   eax
c00198b8:	68 81 ba 02 c0       	push   0xc002ba81
c00198bd:	e9 3f 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00198c2:	66 81 fa 40 02       	cmp    dx,0x240
c00198c7:	75 0c                	jne    c00198d5 <CPU::detectFeatures()+0x827>
c00198c9:	55                   	push   ebp
c00198ca:	55                   	push   ebp
c00198cb:	68 88 ba 02 c0       	push   0xc002ba88
c00198d0:	e9 2c 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00198d5:	66 81 fa 80 02       	cmp    dx,0x280
c00198da:	75 0c                	jne    c00198e8 <CPU::detectFeatures()+0x83a>
c00198dc:	57                   	push   edi
c00198dd:	57                   	push   edi
c00198de:	68 91 ba 02 c0       	push   0xc002ba91
c00198e3:	e9 19 01 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00198e8:	66 81 fa 40 03       	cmp    dx,0x340
c00198ed:	74 ed                	je     c00198dc <CPU::detectFeatures()+0x82e>
c00198ef:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198f4:	75 0c                	jne    c0019902 <CPU::detectFeatures()+0x854>
c00198f6:	56                   	push   esi
c00198f7:	56                   	push   esi
c00198f8:	68 98 ba 02 c0       	push   0xc002ba98
c00198fd:	e9 ff 00 00 00       	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c0019902:	83 f8 06             	cmp    eax,0x6
c0019905:	0f 84 45 ff ff ff    	je     c0019850 <CPU::detectFeatures()+0x7a2>
c001990b:	83 f8 04             	cmp    eax,0x4
c001990e:	0f 84 4d ff ff ff    	je     c0019861 <CPU::detectFeatures()+0x7b3>
c0019914:	83 f8 03             	cmp    eax,0x3
c0019917:	0f 85 72 01 00 00    	jne    c0019a8f <CPU::detectFeatures()+0x9e1>
c001991d:	51                   	push   ecx
c001991e:	51                   	push   ecx
c001991f:	68 a1 ba 02 c0       	push   0xc002baa1
c0019924:	53                   	push   ebx
c0019925:	e8 0a ac ff ff       	call   c0014534 <Device::setName(char const*)>
c001992a:	b1 c1                	mov    cl,0xc1
c001992c:	88 c8                	mov    al,cl
c001992e:	e6 22                	out    0x22,al
c0019930:	e4 23                	in     al,0x23
c0019932:	88 c2                	mov    dl,al
c0019934:	88 c8                	mov    al,cl
c0019936:	e6 22                	out    0x22,al
c0019938:	88 d0                	mov    al,dl
c001993a:	83 c8 10             	or     eax,0x10
c001993d:	e6 23                	out    0x23,al
c001993f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019946:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019949:	89 d0                	mov    eax,edx
c001994b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019951:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019955:	40                   	inc    eax
c0019956:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001995c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019961:	e9 a1 00 00 00       	jmp    c0019a07 <CPU::detectFeatures()+0x959>
c0019966:	83 f8 06             	cmp    eax,0x6
c0019969:	0f 84 e1 fe ff ff    	je     c0019850 <CPU::detectFeatures()+0x7a2>
c001996f:	83 f8 04             	cmp    eax,0x4
c0019972:	0f 84 e9 fe ff ff    	je     c0019861 <CPU::detectFeatures()+0x7b3>
c0019978:	83 f8 03             	cmp    eax,0x3
c001997b:	0f 85 0e 01 00 00    	jne    c0019a8f <CPU::detectFeatures()+0x9e1>
c0019981:	52                   	push   edx
c0019982:	52                   	push   edx
c0019983:	68 ac ba 02 c0       	push   0xc002baac
c0019988:	eb 77                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c001998a:	83 f8 07             	cmp    eax,0x7
c001998d:	75 09                	jne    c0019998 <CPU::detectFeatures()+0x8ea>
c001998f:	50                   	push   eax
c0019990:	50                   	push   eax
c0019991:	68 b6 ba 02 c0       	push   0xc002bab6
c0019996:	eb 69                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c0019998:	83 f8 0a             	cmp    eax,0xa
c001999b:	75 09                	jne    c00199a6 <CPU::detectFeatures()+0x8f8>
c001999d:	50                   	push   eax
c001999e:	50                   	push   eax
c001999f:	68 c1 ba 02 c0       	push   0xc002bac1
c00199a4:	eb 5b                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00199a6:	83 f8 0b             	cmp    eax,0xb
c00199a9:	75 09                	jne    c00199b4 <CPU::detectFeatures()+0x906>
c00199ab:	50                   	push   eax
c00199ac:	50                   	push   eax
c00199ad:	68 c9 ba 02 c0       	push   0xc002bac9
c00199b2:	eb 4d                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00199b4:	83 f8 08             	cmp    eax,0x8
c00199b7:	75 09                	jne    c00199c2 <CPU::detectFeatures()+0x914>
c00199b9:	50                   	push   eax
c00199ba:	50                   	push   eax
c00199bb:	68 d2 ba 02 c0       	push   0xc002bad2
c00199c0:	eb 3f                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00199c2:	83 f8 09             	cmp    eax,0x9
c00199c5:	75 09                	jne    c00199d0 <CPU::detectFeatures()+0x922>
c00199c7:	50                   	push   eax
c00199c8:	50                   	push   eax
c00199c9:	68 da ba 02 c0       	push   0xc002bada
c00199ce:	eb 31                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00199d0:	83 f8 05             	cmp    eax,0x5
c00199d3:	75 09                	jne    c00199de <CPU::detectFeatures()+0x930>
c00199d5:	50                   	push   eax
c00199d6:	50                   	push   eax
c00199d7:	68 e2 ba 02 c0       	push   0xc002bae2
c00199dc:	eb 23                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00199de:	83 f8 0c             	cmp    eax,0xc
c00199e1:	75 09                	jne    c00199ec <CPU::detectFeatures()+0x93e>
c00199e3:	55                   	push   ebp
c00199e4:	55                   	push   ebp
c00199e5:	68 f0 ba 02 c0       	push   0xc002baf0
c00199ea:	eb 15                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00199ec:	83 f8 0d             	cmp    eax,0xd
c00199ef:	75 09                	jne    c00199fa <CPU::detectFeatures()+0x94c>
c00199f1:	57                   	push   edi
c00199f2:	57                   	push   edi
c00199f3:	68 fb ba 02 c0       	push   0xc002bafb
c00199f8:	eb 07                	jmp    c0019a01 <CPU::detectFeatures()+0x953>
c00199fa:	56                   	push   esi
c00199fb:	56                   	push   esi
c00199fc:	68 0f bb 02 c0       	push   0xc002bb0f
c0019a01:	53                   	push   ebx
c0019a02:	e8 2d ab ff ff       	call   c0014534 <Device::setName(char const*)>
c0019a07:	83 c4 10             	add    esp,0x10
c0019a0a:	e9 80 00 00 00       	jmp    c0019a8f <CPU::detectFeatures()+0x9e1>
c0019a0f:	51                   	push   ecx
c0019a10:	51                   	push   ecx
c0019a11:	68 5b b9 02 c0       	push   0xc002b95b
c0019a16:	57                   	push   edi
c0019a17:	e8 18 6e fe ff       	call   c0000834 <strcpy>
c0019a1c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a26:	e8 83 68 fe ff       	call   c00002ae <is486>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	85 c0                	test   eax,eax
c0019a30:	74 2b                	je     c0019a5d <CPU::detectFeatures()+0x9af>
c0019a32:	52                   	push   edx
c0019a33:	52                   	push   edx
c0019a34:	68 1b bb 02 c0       	push   0xc002bb1b
c0019a39:	53                   	push   ebx
c0019a3a:	e8 f5 aa ff ff       	call   c0014534 <Device::setName(char const*)>
c0019a3f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a46:	0f 20 c0             	mov    eax,cr0
c0019a49:	83 e0 14             	and    eax,0x14
c0019a4c:	83 c4 10             	add    esp,0x10
c0019a4f:	83 f8 04             	cmp    eax,0x4
c0019a52:	75 1f                	jne    c0019a73 <CPU::detectFeatures()+0x9c5>
c0019a54:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a5b:	eb 32                	jmp    c0019a8f <CPU::detectFeatures()+0x9e1>
c0019a5d:	50                   	push   eax
c0019a5e:	50                   	push   eax
c0019a5f:	68 26 bb 02 c0       	push   0xc002bb26
c0019a64:	53                   	push   ebx
c0019a65:	e8 ca aa ff ff       	call   c0014534 <Device::setName(char const*)>
c0019a6a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a71:	eb d3                	jmp    c0019a46 <CPU::detectFeatures()+0x998>
c0019a73:	e8 11 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a78:	83 e0 01             	and    eax,0x1
c0019a7b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a7e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a84:	83 e0 fd             	and    eax,0xfffffffd
c0019a87:	09 d0                	or     eax,edx
c0019a89:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a8f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a96:	83 c4 4c             	add    esp,0x4c
c0019a99:	5b                   	pop    ebx
c0019a9a:	5e                   	pop    esi
c0019a9b:	5f                   	pop    edi
c0019a9c:	5d                   	pop    ebp
c0019a9d:	c3                   	ret    

c0019a9e <CPU::setupSMEP()>:
c0019a9e:	0f 20 e0             	mov    eax,cr4
c0019aa1:	0d 00 00 10 00       	or     eax,0x100000
c0019aa6:	0f 22 e0             	mov    cr4,eax
c0019aa9:	c3                   	ret    

c0019aaa <CPU::setupUMIP()>:
c0019aaa:	0f 20 e0             	mov    eax,cr4
c0019aad:	80 cc 08             	or     ah,0x8
c0019ab0:	0f 22 e0             	mov    cr4,eax
c0019ab3:	c3                   	ret    

c0019ab4 <CPU::setupTSC()>:
c0019ab4:	0f 20 e0             	mov    eax,cr4
c0019ab7:	83 c8 04             	or     eax,0x4
c0019aba:	0f 22 e0             	mov    cr4,eax
c0019abd:	c3                   	ret    

c0019abe <CPU::setupLargePages()>:
c0019abe:	0f 20 e0             	mov    eax,cr4
c0019ac1:	83 c8 10             	or     eax,0x10
c0019ac4:	0f 22 e0             	mov    cr4,eax
c0019ac7:	c3                   	ret    

c0019ac8 <CPU::setupPAT()>:
c0019ac8:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0019acd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ad4:	74 2c                	je     c0019b02 <CPU::setupPAT()+0x3a>
c0019ad6:	53                   	push   ebx
c0019ad7:	83 ec 10             	sub    esp,0x10
c0019ada:	68 77 02 00 00       	push   0x277
c0019adf:	50                   	push   eax
c0019ae0:	e8 03 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ae5:	83 e2 f8             	and    edx,0xfffffff8
c0019ae8:	83 ca 01             	or     edx,0x1
c0019aeb:	52                   	push   edx
c0019aec:	50                   	push   eax
c0019aed:	68 77 02 00 00       	push   0x277
c0019af2:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0019af8:	e8 17 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019afd:	83 c4 28             	add    esp,0x28
c0019b00:	5b                   	pop    ebx
c0019b01:	c3                   	ret    
c0019b02:	c3                   	ret    
c0019b03:	90                   	nop

c0019b04 <CPU::setupMTRR()>:
c0019b04:	c3                   	ret    
c0019b05:	90                   	nop

c0019b06 <CPU::setupGlobalPages()>:
c0019b06:	0f 20 e0             	mov    eax,cr4
c0019b09:	0c 80                	or     al,0x80
c0019b0b:	0f 22 e0             	mov    cr4,eax
c0019b0e:	c3                   	ret    
c0019b0f:	90                   	nop

c0019b10 <CPU::allowUsermodeDataAccess()>:
c0019b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b14:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b1b:	74 03                	je     c0019b20 <CPU::allowUsermodeDataAccess()+0x10>
c0019b1d:	0f 01 cb             	stac   
c0019b20:	c3                   	ret    
c0019b21:	90                   	nop

c0019b22 <CPU::prohibitUsermodeDataAccess()>:
c0019b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b26:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b2d:	74 03                	je     c0019b32 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b2f:	0f 01 ca             	clac   
c0019b32:	c3                   	ret    
c0019b33:	90                   	nop

c0019b34 <CPU::setupSMAP()>:
c0019b34:	0f 20 e0             	mov    eax,cr4
c0019b37:	0d 00 00 20 00       	or     eax,0x200000
c0019b3c:	0f 22 e0             	mov    cr4,eax
c0019b3f:	eb e1                	jmp    c0019b22 <CPU::prohibitUsermodeDataAccess()>
c0019b41:	90                   	nop

c0019b42 <CPU::setupFeatures()>:
c0019b42:	83 ec 0c             	sub    esp,0xc
c0019b45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b49:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b50:	74 07                	je     c0019b59 <CPU::setupFeatures()+0x17>
c0019b52:	52                   	push   edx
c0019b53:	e8 46 ff ff ff       	call   c0019a9e <CPU::setupSMEP()>
c0019b58:	58                   	pop    eax
c0019b59:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b60:	74 07                	je     c0019b69 <CPU::setupFeatures()+0x27>
c0019b62:	52                   	push   edx
c0019b63:	e8 cc ff ff ff       	call   c0019b34 <CPU::setupSMAP()>
c0019b68:	58                   	pop    eax
c0019b69:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b70:	74 07                	je     c0019b79 <CPU::setupFeatures()+0x37>
c0019b72:	52                   	push   edx
c0019b73:	e8 32 ff ff ff       	call   c0019aaa <CPU::setupUMIP()>
c0019b78:	58                   	pop    eax
c0019b79:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b80:	74 07                	je     c0019b89 <CPU::setupFeatures()+0x47>
c0019b82:	52                   	push   edx
c0019b83:	e8 2c ff ff ff       	call   c0019ab4 <CPU::setupTSC()>
c0019b88:	58                   	pop    eax
c0019b89:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b90:	74 07                	je     c0019b99 <CPU::setupFeatures()+0x57>
c0019b92:	52                   	push   edx
c0019b93:	e8 26 ff ff ff       	call   c0019abe <CPU::setupLargePages()>
c0019b98:	59                   	pop    ecx
c0019b99:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019ba0:	74 07                	je     c0019ba9 <CPU::setupFeatures()+0x67>
c0019ba2:	52                   	push   edx
c0019ba3:	e8 5e ff ff ff       	call   c0019b06 <CPU::setupGlobalPages()>
c0019ba8:	58                   	pop    eax
c0019ba9:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bb0:	74 0c                	je     c0019bbe <CPU::setupFeatures()+0x7c>
c0019bb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bb6:	83 c4 0c             	add    esp,0xc
c0019bb9:	e9 0a ff ff ff       	jmp    c0019ac8 <CPU::setupPAT()>
c0019bbe:	83 c4 0c             	add    esp,0xc
c0019bc1:	c3                   	ret    

c0019bc2 <CPU::open(int, int, void*)>:
c0019bc2:	57                   	push   edi
c0019bc3:	56                   	push   esi
c0019bc4:	53                   	push   ebx
c0019bc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bcd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019bd3:	83 ec 0c             	sub    esp,0xc
c0019bd6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019bdc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019be2:	50                   	push   eax
c0019be3:	e8 ec 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019be8:	83 c4 0c             	add    esp,0xc
c0019beb:	6a 00                	push   0x0
c0019bed:	68 ef be ad de       	push   0xdeadbeef
c0019bf2:	57                   	push   edi
c0019bf3:	e8 04 79 ff ff       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c0019bf8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019bfb:	e8 dc 78 ff ff       	call   c00114dc <TSS::flush()>
c0019c00:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c06:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c09:	e8 22 57 ff ff       	call   c000f330 <IDT::setup()>
c0019c0e:	b8 00 04 00 00       	mov    eax,0x400
c0019c13:	0f 23 f8             	mov    db7,eax
c0019c16:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c20:	e8 bd 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c25:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c2b:	89 30                	mov    DWORD PTR [eax],esi
c0019c2d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c33:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c36:	58                   	pop    eax
c0019c37:	5a                   	pop    edx
c0019c38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c42:	e8 f3 89 ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c0019c47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c4a:	e8 5f f4 ff ff       	call   c00190ae <CPU::detectFeatures()>
c0019c4f:	e8 cf bc ff ff       	call   c0015923 <setupInterruptController()>
c0019c54:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c5a:	a1 00 e6 02 c0       	mov    eax,ds:0xc002e600
c0019c5f:	83 e0 10             	and    eax,0x10
c0019c62:	83 f8 01             	cmp    eax,0x1
c0019c65:	19 c0                	sbb    eax,eax
c0019c67:	83 e0 46             	and    eax,0x46
c0019c6a:	83 c0 1e             	add    eax,0x1e
c0019c6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c70:	e8 bb d1 ff ff       	call   c0016e30 <setupTimer(int)>
c0019c75:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c7e:	e8 bf fe ff ff       	call   c0019b42 <CPU::setupFeatures()>
c0019c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c86:	e8 a7 f1 ff ff       	call   c0018e32 <CPU::displayFeatures()>
c0019c8b:	83 c4 10             	add    esp,0x10
c0019c8e:	31 c0                	xor    eax,eax
c0019c90:	5b                   	pop    ebx
c0019c91:	5e                   	pop    esi
c0019c92:	5f                   	pop    edi
c0019c93:	c3                   	ret    

c0019c94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c94:	57                   	push   edi
c0019c95:	56                   	push   esi
c0019c96:	53                   	push   ebx
c0019c97:	51                   	push   ecx
c0019c98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c9c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c9f:	0f 02 c0             	lar    eax,ax
c0019ca2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019ca5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ca9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cac:	88 ca                	mov    dl,cl
c0019cae:	c0 ea 06             	shr    dl,0x6
c0019cb1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019cb5:	89 ca                	mov    edx,ecx
c0019cb7:	66 c1 ea 03          	shr    dx,0x3
c0019cbb:	83 e2 07             	and    edx,0x7
c0019cbe:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cc3:	88 17                	mov    BYTE PTR [edi],dl
c0019cc5:	0f 84 a6 01 00 00    	je     c0019e71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019ccb:	83 e1 07             	and    ecx,0x7
c0019cce:	80 f9 04             	cmp    cl,0x4
c0019cd1:	0f 84 98 00 00 00    	je     c0019d6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019cd7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cdc:	0f 95 c0             	setne  al
c0019cdf:	80 f9 05             	cmp    cl,0x5
c0019ce2:	0f 95 c2             	setne  dl
c0019ce5:	08 c2                	or     dl,al
c0019ce7:	74 79                	je     c0019d62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019ce9:	84 c9                	test   cl,cl
c0019ceb:	75 05                	jne    c0019cf2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ced:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cf0:	eb 3c                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cf2:	80 f9 01             	cmp    cl,0x1
c0019cf5:	75 05                	jne    c0019cfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019cf7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cfa:	eb 32                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cfc:	80 f9 02             	cmp    cl,0x2
c0019cff:	75 05                	jne    c0019d06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d01:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d04:	eb 28                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d06:	31 c0                	xor    eax,eax
c0019d08:	80 f9 03             	cmp    cl,0x3
c0019d0b:	75 05                	jne    c0019d12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d0d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d10:	eb 1c                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d12:	80 f9 05             	cmp    cl,0x5
c0019d15:	75 05                	jne    c0019d1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d17:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d1a:	eb 12                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d1c:	80 f9 06             	cmp    cl,0x6
c0019d1f:	75 05                	jne    c0019d26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d24:	eb 08                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d26:	80 f9 07             	cmp    cl,0x7
c0019d29:	75 03                	jne    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d2e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d33:	75 10                	jne    c0019d45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d35:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d39:	b9 03 00 00 00       	mov    ecx,0x3
c0019d3e:	01 d0                	add    eax,edx
c0019d40:	e9 37 01 00 00       	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d45:	b9 02 00 00 00       	mov    ecx,0x2
c0019d4a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d4f:	0f 85 27 01 00 00    	jne    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d55:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d58:	b9 06 00 00 00       	mov    ecx,0x6
c0019d5d:	e9 1a 01 00 00       	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d62:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d65:	b9 06 00 00 00       	mov    ecx,0x6
c0019d6a:	e9 0f 01 00 00       	jmp    c0019e7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d6f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d72:	88 ca                	mov    dl,cl
c0019d74:	c0 ea 06             	shr    dl,0x6
c0019d77:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d7b:	89 ca                	mov    edx,ecx
c0019d7d:	66 c1 ea 03          	shr    dx,0x3
c0019d81:	83 e2 07             	and    edx,0x7
c0019d84:	80 e1 07             	and    cl,0x7
c0019d87:	75 05                	jne    c0019d8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d89:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d8c:	eb 4c                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d8e:	80 f9 01             	cmp    cl,0x1
c0019d91:	75 05                	jne    c0019d98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d93:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d96:	eb 42                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d98:	80 f9 02             	cmp    cl,0x2
c0019d9b:	75 05                	jne    c0019da2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d9d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019da0:	eb 38                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019da2:	80 f9 03             	cmp    cl,0x3
c0019da5:	75 05                	jne    c0019dac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019da7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019daa:	eb 2e                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dac:	80 f9 04             	cmp    cl,0x4
c0019daf:	75 12                	jne    c0019dc3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019db1:	f6 c4 60             	test   ah,0x60
c0019db4:	75 08                	jne    c0019dbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019db6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019db9:	8d 78 14             	lea    edi,[eax+0x14]
c0019dbc:	eb 1c                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dbe:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019dc1:	eb 17                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc3:	80 f9 05             	cmp    cl,0x5
c0019dc6:	75 05                	jne    c0019dcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019dc8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019dcb:	eb 0d                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dcd:	80 f9 06             	cmp    cl,0x6
c0019dd0:	75 05                	jne    c0019dd7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019dd2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019dd5:	eb 03                	jmp    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019dda:	84 d2                	test   dl,dl
c0019ddc:	75 05                	jne    c0019de3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019dde:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019de1:	eb 3c                	jmp    c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019de3:	80 fa 01             	cmp    dl,0x1
c0019de6:	75 05                	jne    c0019ded <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019de8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019deb:	eb 32                	jmp    c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ded:	80 fa 02             	cmp    dl,0x2
c0019df0:	75 05                	jne    c0019df7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019df2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019df5:	eb 28                	jmp    c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019df7:	80 fa 03             	cmp    dl,0x3
c0019dfa:	75 05                	jne    c0019e01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019dfc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dff:	eb 1e                	jmp    c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e01:	31 c0                	xor    eax,eax
c0019e03:	80 fa 04             	cmp    dl,0x4
c0019e06:	74 17                	je     c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e08:	80 fa 05             	cmp    dl,0x5
c0019e0b:	75 05                	jne    c0019e12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e0d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e10:	eb 0d                	jmp    c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e12:	80 fa 06             	cmp    dl,0x6
c0019e15:	75 05                	jne    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e17:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e1a:	eb 03                	jmp    c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e1f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e24:	0f 94 c2             	sete   dl
c0019e27:	80 f9 05             	cmp    cl,0x5
c0019e2a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e2e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e33:	d3 e0                	shl    eax,cl
c0019e35:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e39:	74 0a                	je     c0019e45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e3b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e3e:	b9 07 00 00 00       	mov    ecx,0x7
c0019e43:	eb 37                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e45:	01 f8                	add    eax,edi
c0019e47:	b9 03 00 00 00       	mov    ecx,0x3
c0019e4c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e51:	74 2b                	je     c0019e7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e53:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e58:	75 0d                	jne    c0019e67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e5a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e5e:	01 c8                	add    eax,ecx
c0019e60:	b9 04 00 00 00       	mov    ecx,0x4
c0019e65:	eb 17                	jmp    c0019e7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e67:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e6a:	b9 07 00 00 00       	mov    ecx,0x7
c0019e6f:	eb 0d                	jmp    c0019e7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e71:	b9 02 00 00 00       	mov    ecx,0x2
c0019e76:	b2 01                	mov    dl,0x1
c0019e78:	31 c0                	xor    eax,eax
c0019e7a:	eb 02                	jmp    c0019e7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e7c:	31 d2                	xor    edx,edx
c0019e7e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e82:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e88:	88 11                	mov    BYTE PTR [ecx],dl
c0019e8a:	5a                   	pop    edx
c0019e8b:	5b                   	pop    ebx
c0019e8c:	5e                   	pop    esi
c0019e8d:	5f                   	pop    edi
c0019e8e:	c3                   	ret    

c0019e8f <Krnl::smpEntry()>:
c0019e8f:	eb fe                	jmp    c0019e8f <Krnl::smpEntry()>

c0019e91 <Krnl::startCPU(int)>:
c0019e91:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0019e96:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e9d:	0f 84 36 01 00 00    	je     c0019fd9 <Krnl::startCPU(int)+0x148>
c0019ea3:	53                   	push   ebx
c0019ea4:	83 ec 08             	sub    esp,0x8
c0019ea7:	e8 46 3f 00 00       	call   c001ddf2 <lockScheduler()>
c0019eac:	52                   	push   edx
c0019ead:	52                   	push   edx
c0019eae:	6a 1b                	push   0x1b
c0019eb0:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0019eb6:	e8 2d 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ebb:	59                   	pop    ecx
c0019ebc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ec1:	89 c3                	mov    ebx,eax
c0019ec3:	58                   	pop    eax
c0019ec4:	53                   	push   ebx
c0019ec5:	68 60 bb 02 c0       	push   0xc002bb60
c0019eca:	e8 5d 90 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0019ecf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019edd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ee7:	c1 e0 18             	shl    eax,0x18
c0019eea:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ef9:	09 c2                	or     edx,eax
c0019efb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f01:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f07:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f0d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f13:	80 cd c5             	or     ch,0xc5
c0019f16:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f1c:	f3 90                	pause  
c0019f1e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f20:	0f ba e1 0c          	bt     ecx,0xc
c0019f24:	72 f6                	jb     c0019f1c <Krnl::startCPU(int)+0x8b>
c0019f26:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f2c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f32:	09 c1                	or     ecx,eax
c0019f34:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f3a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f40:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f46:	80 cd 85             	or     ch,0x85
c0019f49:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f4f:	f3 90                	pause  
c0019f51:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f53:	0f ba e1 0c          	bt     ecx,0xc
c0019f57:	72 f6                	jb     c0019f4f <Krnl::startCPU(int)+0xbe>
c0019f59:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f63:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f69:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f6f:	09 c1                	or     ecx,eax
c0019f71:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f77:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f7d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f83:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f89:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f8f:	f3 90                	pause  
c0019f91:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f93:	0f ba e1 0c          	bt     ecx,0xc
c0019f97:	72 f6                	jb     c0019f8f <Krnl::startCPU(int)+0xfe>
c0019f99:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fa9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019faf:	09 c8                	or     eax,ecx
c0019fb1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fb7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fbd:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fc2:	0d 02 06 00 00       	or     eax,0x602
c0019fc7:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fcd:	f3 90                	pause  
c0019fcf:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fd1:	0f ba e0 0c          	bt     eax,0xc
c0019fd5:	72 f6                	jb     c0019fcd <Krnl::startCPU(int)+0x13c>
c0019fd7:	eb fe                	jmp    c0019fd7 <Krnl::startCPU(int)+0x146>
c0019fd9:	c3                   	ret    

c0019fda <Krnl::startCPUs()>:
c0019fda:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0019fdf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fe5:	88 c2                	mov    dl,al
c0019fe7:	83 e2 0a             	and    edx,0xa
c0019fea:	80 fa 0a             	cmp    dl,0xa
c0019fed:	75 09                	jne    c0019ff8 <Krnl::startCPUs()+0x1e>
c0019fef:	a8 01                	test   al,0x1
c0019ff1:	74 05                	je     c0019ff8 <Krnl::startCPUs()+0x1e>
c0019ff3:	e9 a3 61 fe ff       	jmp    c000019b <prepareTramp>
c0019ff8:	c3                   	ret    
c0019ff9:	90                   	nop

c0019ffa <EnvVarContainer::getEnv(char const*)>:
c0019ffa:	57                   	push   edi
c0019ffb:	56                   	push   esi
c0019ffc:	53                   	push   ebx
c0019ffd:	31 db                	xor    ebx,ebx
c0019fff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a003:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a005:	7e 2b                	jle    c001a032 <EnvVarContainer::getEnv(char const*)+0x38>
c001a007:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a00e:	50                   	push   eax
c001a00f:	50                   	push   eax
c001a010:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a013:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a016:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a01a:	e8 a1 68 fe ff       	call   c00008c0 <strcmp>
c001a01f:	83 c4 10             	add    esp,0x10
c001a022:	85 c0                	test   eax,eax
c001a024:	75 09                	jne    c001a02f <EnvVarContainer::getEnv(char const*)+0x35>
c001a026:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a029:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a02d:	eb 05                	jmp    c001a034 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a02f:	43                   	inc    ebx
c001a030:	eb d1                	jmp    c001a003 <EnvVarContainer::getEnv(char const*)+0x9>
c001a032:	31 c0                	xor    eax,eax
c001a034:	5b                   	pop    ebx
c001a035:	5e                   	pop    esi
c001a036:	5f                   	pop    edi
c001a037:	c3                   	ret    

c001a038 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a038:	57                   	push   edi
c001a039:	56                   	push   esi
c001a03a:	53                   	push   ebx
c001a03b:	83 ec 1c             	sub    esp,0x1c
c001a03e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a042:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a046:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a04a:	57                   	push   edi
c001a04b:	e8 44 67 fe ff       	call   c0000794 <strlen>
c001a050:	40                   	inc    eax
c001a051:	89 04 24             	mov    DWORD PTR [esp],eax
c001a054:	e8 e7 57 ff ff       	call   c000f840 <malloc>
c001a059:	89 34 24             	mov    DWORD PTR [esp],esi
c001a05c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a060:	e8 2f 67 fe ff       	call   c0000794 <strlen>
c001a065:	40                   	inc    eax
c001a066:	89 04 24             	mov    DWORD PTR [esp],eax
c001a069:	e8 d2 57 ff ff       	call   c000f840 <malloc>
c001a06e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a071:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a075:	e8 1a 67 fe ff       	call   c0000794 <strlen>
c001a07a:	83 c4 0c             	add    esp,0xc
c001a07d:	40                   	inc    eax
c001a07e:	50                   	push   eax
c001a07f:	6a 00                	push   0x0
c001a081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a085:	e8 ee 66 fe ff       	call   c0000778 <memset>
c001a08a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a08d:	e8 02 67 fe ff       	call   c0000794 <strlen>
c001a092:	83 c4 0c             	add    esp,0xc
c001a095:	40                   	inc    eax
c001a096:	50                   	push   eax
c001a097:	57                   	push   edi
c001a098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a09c:	e8 a3 66 fe ff       	call   c0000744 <memcpy>
c001a0a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0a4:	e8 eb 66 fe ff       	call   c0000794 <strlen>
c001a0a9:	83 c4 0c             	add    esp,0xc
c001a0ac:	40                   	inc    eax
c001a0ad:	50                   	push   eax
c001a0ae:	6a 00                	push   0x0
c001a0b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0b4:	e8 bf 66 fe ff       	call   c0000778 <memset>
c001a0b9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0bc:	e8 d3 66 fe ff       	call   c0000794 <strlen>
c001a0c1:	83 c4 0c             	add    esp,0xc
c001a0c4:	40                   	inc    eax
c001a0c5:	50                   	push   eax
c001a0c6:	56                   	push   esi
c001a0c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0cb:	e8 74 66 fe ff       	call   c0000744 <memcpy>
c001a0d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0d2:	40                   	inc    eax
c001a0d3:	89 03                	mov    DWORD PTR [ebx],eax
c001a0d5:	c1 e0 03             	shl    eax,0x3
c001a0d8:	5a                   	pop    edx
c001a0d9:	59                   	pop    ecx
c001a0da:	50                   	push   eax
c001a0db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0de:	e8 49 57 ff ff       	call   c000f82c <realloc>
c001a0e3:	83 c4 0c             	add    esp,0xc
c001a0e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0e9:	6a 08                	push   0x8
c001a0eb:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a0ef:	52                   	push   edx
c001a0f0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0f2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0f6:	50                   	push   eax
c001a0f7:	e8 48 66 fe ff       	call   c0000744 <memcpy>
c001a0fc:	83 c4 20             	add    esp,0x20
c001a0ff:	5b                   	pop    ebx
c001a100:	5e                   	pop    esi
c001a101:	5f                   	pop    edi
c001a102:	c3                   	ret    
c001a103:	90                   	nop

c001a104 <EnvVarContainer::deleteEnv(char const*)>:
c001a104:	c3                   	ret    
c001a105:	90                   	nop

c001a106 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a106:	55                   	push   ebp
c001a107:	57                   	push   edi
c001a108:	56                   	push   esi
c001a109:	53                   	push   ebx
c001a10a:	81 ec 38 01 00 00    	sub    esp,0x138
c001a110:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a117:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a11e:	68 14 01 00 00       	push   0x114
c001a123:	e8 18 57 ff ff       	call   c000f840 <malloc>
c001a128:	83 c4 0c             	add    esp,0xc
c001a12b:	89 c7                	mov    edi,eax
c001a12d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a130:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a137:	50                   	push   eax
c001a138:	e8 47 93 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001a13d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a140:	e8 11 96 ff ff       	call   c0013756 <File::exists()>
c001a145:	83 c4 10             	add    esp,0x10
c001a148:	84 c0                	test   al,al
c001a14a:	75 31                	jne    c001a17d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a14c:	51                   	push   ecx
c001a14d:	51                   	push   ecx
c001a14e:	6a 12                	push   0x12
c001a150:	57                   	push   edi
c001a151:	e8 92 93 ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001a156:	8b 07                	mov    eax,DWORD PTR [edi]
c001a158:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a15b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a15e:	e8 31 66 fe ff       	call   c0000794 <strlen>
c001a163:	5a                   	pop    edx
c001a164:	31 d2                	xor    edx,edx
c001a166:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a16a:	51                   	push   ecx
c001a16b:	55                   	push   ebp
c001a16c:	52                   	push   edx
c001a16d:	50                   	push   eax
c001a16e:	57                   	push   edi
c001a16f:	ff d3                	call   ebx
c001a171:	83 c4 14             	add    esp,0x14
c001a174:	57                   	push   edi
c001a175:	e8 cc 93 ff ff       	call   c0013546 <File::close()>
c001a17a:	83 c4 10             	add    esp,0x10
c001a17d:	31 db                	xor    ebx,ebx
c001a17f:	50                   	push   eax
c001a180:	31 ed                	xor    ebp,ebp
c001a182:	68 00 01 00 00       	push   0x100
c001a187:	6a 00                	push   0x0
c001a189:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a18d:	50                   	push   eax
c001a18e:	e8 e5 65 fe ff       	call   c0000778 <memset>
c001a193:	58                   	pop    eax
c001a194:	5a                   	pop    edx
c001a195:	6a 01                	push   0x1
c001a197:	57                   	push   edi
c001a198:	e8 4b 93 ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	83 ec 0c             	sub    esp,0xc
c001a1a3:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1a5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1a9:	51                   	push   ecx
c001a1aa:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1ae:	52                   	push   edx
c001a1af:	6a 00                	push   0x0
c001a1b1:	6a 01                	push   0x1
c001a1b3:	57                   	push   edi
c001a1b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1b7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1bb:	83 c4 20             	add    esp,0x20
c001a1be:	3c 0d                	cmp    al,0xd
c001a1c0:	0f 84 12 01 00 00    	je     c001a2d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1c6:	85 db                	test   ebx,ebx
c001a1c8:	0f 84 fd 00 00 00    	je     c001a2cb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1ce:	3c 0a                	cmp    al,0xa
c001a1d0:	74 13                	je     c001a1e5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1d2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1d7:	74 0c                	je     c001a1e5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1d9:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1df:	0f 8e e6 00 00 00    	jle    c001a2cb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1e5:	83 ec 0c             	sub    esp,0xc
c001a1e8:	8d 53 01             	lea    edx,[ebx+0x1]
c001a1eb:	29 dd                	sub    ebp,ebx
c001a1ed:	52                   	push   edx
c001a1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1f2:	e8 49 56 ff ff       	call   c000f840 <malloc>
c001a1f7:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1fe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a201:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a205:	e8 36 56 ff ff       	call   c000f840 <malloc>
c001a20a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a20e:	83 c4 0c             	add    esp,0xc
c001a211:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a215:	52                   	push   edx
c001a216:	6a 00                	push   0x0
c001a218:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a21c:	e8 57 65 fe ff       	call   c0000778 <memset>
c001a221:	83 c4 0c             	add    esp,0xc
c001a224:	53                   	push   ebx
c001a225:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a229:	55                   	push   ebp
c001a22a:	01 eb                	add    ebx,ebp
c001a22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a230:	e8 0f 65 fe ff       	call   c0000744 <memcpy>
c001a235:	83 c4 0c             	add    esp,0xc
c001a238:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a23c:	51                   	push   ecx
c001a23d:	6a 00                	push   0x0
c001a23f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a243:	e8 30 65 fe ff       	call   c0000778 <memset>
c001a248:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a24b:	e8 44 65 fe ff       	call   c0000794 <strlen>
c001a250:	83 c4 0c             	add    esp,0xc
c001a253:	50                   	push   eax
c001a254:	53                   	push   ebx
c001a255:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a259:	e8 e6 64 fe ff       	call   c0000744 <memcpy>
c001a25e:	5b                   	pop    ebx
c001a25f:	58                   	pop    eax
c001a260:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a264:	68 71 bb 02 c0       	push   0xc002bb71
c001a269:	e8 be 8c ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001a26e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a270:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a273:	40                   	inc    eax
c001a274:	83 c4 10             	add    esp,0x10
c001a277:	89 06                	mov    DWORD PTR [esi],eax
c001a279:	85 d2                	test   edx,edx
c001a27b:	75 0c                	jne    c001a289 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a27d:	83 ec 0c             	sub    esp,0xc
c001a280:	6a 08                	push   0x8
c001a282:	e8 b9 55 ff ff       	call   c000f840 <malloc>
c001a287:	eb 0c                	jmp    c001a295 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a289:	c1 e0 03             	shl    eax,0x3
c001a28c:	51                   	push   ecx
c001a28d:	51                   	push   ecx
c001a28e:	50                   	push   eax
c001a28f:	52                   	push   edx
c001a290:	e8 97 55 ff ff       	call   c000f82c <realloc>
c001a295:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	31 db                	xor    ebx,ebx
c001a29d:	52                   	push   edx
c001a29e:	6a 08                	push   0x8
c001a2a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2a4:	50                   	push   eax
c001a2a5:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2aa:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2ae:	50                   	push   eax
c001a2af:	e8 90 64 fe ff       	call   c0000744 <memcpy>
c001a2b4:	83 c4 0c             	add    esp,0xc
c001a2b7:	68 00 01 00 00       	push   0x100
c001a2bc:	6a 00                	push   0x0
c001a2be:	55                   	push   ebp
c001a2bf:	31 ed                	xor    ebp,ebp
c001a2c1:	e8 b2 64 fe ff       	call   c0000778 <memset>
c001a2c6:	83 c4 10             	add    esp,0x10
c001a2c9:	eb 0d                	jmp    c001a2d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2cb:	3c 3d                	cmp    al,0x3d
c001a2cd:	74 07                	je     c001a2d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2cf:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2d3:	45                   	inc    ebp
c001a2d4:	eb 02                	jmp    c001a2d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2d6:	89 eb                	mov    ebx,ebp
c001a2d8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2dd:	0f 85 bd fe ff ff    	jne    c001a1a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2e3:	50                   	push   eax
c001a2e4:	50                   	push   eax
c001a2e5:	ff 36                	push   DWORD PTR [esi]
c001a2e7:	68 7f bb 02 c0       	push   0xc002bb7f
c001a2ec:	e8 3b 8c ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001a2f1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2f7:	5b                   	pop    ebx
c001a2f8:	5e                   	pop    esi
c001a2f9:	5f                   	pop    edi
c001a2fa:	5d                   	pop    ebp
c001a2fb:	c3                   	ret    

c001a2fc <EnvVarContainer::__loadSystem()>:
c001a2fc:	83 ec 10             	sub    esp,0x10
c001a2ff:	68 20 db 02 c0       	push   0xc002db20
c001a304:	68 aa bb 02 c0       	push   0xc002bbaa
c001a309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a30d:	e8 f4 fd ff ff       	call   c001a106 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a312:	83 c4 1c             	add    esp,0x1c
c001a315:	c3                   	ret    

c001a316 <EnvVarContainer::__loadUser()>:
c001a316:	c3                   	ret    
c001a317:	90                   	nop

c001a318 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a31c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a32a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a32d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a331:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a338:	90                   	nop
c001a339:	c3                   	ret    

c001a33a <EnvVarContainer::~EnvVarContainer()>:
c001a33a:	83 ec 0c             	sub    esp,0xc
c001a33d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a341:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a344:	85 c0                	test   eax,eax
c001a346:	74 1d                	je     c001a365 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a34c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a34e:	85 c0                	test   eax,eax
c001a350:	74 13                	je     c001a365 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a356:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a359:	83 ec 0c             	sub    esp,0xc
c001a35c:	50                   	push   eax
c001a35d:	e8 ee 54 ff ff       	call   c000f850 <free>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	90                   	nop
c001a366:	83 c4 0c             	add    esp,0xc
c001a369:	c3                   	ret    

c001a36a <Krnl::getEnv(Process*, char const*)>:
c001a36a:	53                   	push   ebx
c001a36b:	83 ec 08             	sub    esp,0x8
c001a36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a372:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a376:	39 05 54 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b54,eax
c001a37c:	74 04                	je     c001a382 <Krnl::getEnv(Process*, char const*)+0x18>
c001a37e:	85 c0                	test   eax,eax
c001a380:	75 0b                	jne    c001a38d <Krnl::getEnv(Process*, char const*)+0x23>
c001a382:	a1 34 11 03 c0       	mov    eax,ds:0xc0031134
c001a387:	85 c0                	test   eax,eax
c001a389:	75 19                	jne    c001a3a4 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a38b:	eb 27                	jmp    c001a3b4 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a38d:	52                   	push   edx
c001a38e:	52                   	push   edx
c001a38f:	53                   	push   ebx
c001a390:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a396:	e8 5f fc ff ff       	call   c0019ffa <EnvVarContainer::getEnv(char const*)>
c001a39b:	83 c4 10             	add    esp,0x10
c001a39e:	85 c0                	test   eax,eax
c001a3a0:	75 28                	jne    c001a3ca <Krnl::getEnv(Process*, char const*)+0x60>
c001a3a2:	eb de                	jmp    c001a382 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3a4:	52                   	push   edx
c001a3a5:	52                   	push   edx
c001a3a6:	53                   	push   ebx
c001a3a7:	50                   	push   eax
c001a3a8:	e8 4d fc ff ff       	call   c0019ffa <EnvVarContainer::getEnv(char const*)>
c001a3ad:	83 c4 10             	add    esp,0x10
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	75 16                	jne    c001a3ca <Krnl::getEnv(Process*, char const*)+0x60>
c001a3b4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3b8:	a1 38 11 03 c0       	mov    eax,ds:0xc0031138
c001a3bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3c1:	83 c4 08             	add    esp,0x8
c001a3c4:	5b                   	pop    ebx
c001a3c5:	e9 30 fc ff ff       	jmp    c0019ffa <EnvVarContainer::getEnv(char const*)>
c001a3ca:	83 c4 08             	add    esp,0x8
c001a3cd:	5b                   	pop    ebx
c001a3ce:	c3                   	ret    

c001a3cf <Krnl::setEnvSystem(char const*, char const*)>:
c001a3cf:	83 ec 10             	sub    esp,0x10
c001a3d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3da:	ff 35 38 11 03 c0    	push   DWORD PTR ds:0xc0031138
c001a3e0:	e8 53 fc ff ff       	call   c001a038 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3e5:	83 c4 1c             	add    esp,0x1c
c001a3e8:	c3                   	ret    

c001a3e9 <Krnl::setEnvUser(char const*, char const*)>:
c001a3e9:	a1 34 11 03 c0       	mov    eax,ds:0xc0031134
c001a3ee:	85 c0                	test   eax,eax
c001a3f0:	74 15                	je     c001a407 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3f2:	83 ec 10             	sub    esp,0x10
c001a3f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3fd:	50                   	push   eax
c001a3fe:	e8 35 fc ff ff       	call   c001a038 <EnvVarContainer::setEnv(char const*, char const*)>
c001a403:	83 c4 1c             	add    esp,0x1c
c001a406:	c3                   	ret    
c001a407:	c3                   	ret    

c001a408 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a40c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a412:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a416:	e9 1d fc ff ff       	jmp    c001a038 <EnvVarContainer::setEnv(char const*, char const*)>

c001a41b <Krnl::deleteEnvSystem(char const*)>:
c001a41b:	c3                   	ret    

c001a41c <Krnl::deleteEnvUser(char const*)>:
c001a41c:	c3                   	ret    

c001a41d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a41d:	c3                   	ret    

c001a41e <Krnl::newProcessEnv(Process*)>:
c001a41e:	83 ec 28             	sub    esp,0x28
c001a421:	6a 0c                	push   0xc
c001a423:	e8 18 54 ff ff       	call   c000f840 <malloc>
c001a428:	5a                   	pop    edx
c001a429:	59                   	pop    ecx
c001a42a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a42e:	50                   	push   eax
c001a42f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a433:	e8 e0 fe ff ff       	call   c001a318 <EnvVarContainer::EnvVarContainer(Process*)>
c001a438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a43c:	83 c4 2c             	add    esp,0x2c
c001a43f:	c3                   	ret    

c001a440 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a440:	56                   	push   esi
c001a441:	53                   	push   ebx
c001a442:	83 ec 10             	sub    esp,0x10
c001a445:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a449:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a44f:	6a 0c                	push   0xc
c001a451:	e8 ea 53 ff ff       	call   c000f840 <malloc>
c001a456:	89 c3                	mov    ebx,eax
c001a458:	58                   	pop    eax
c001a459:	5a                   	pop    edx
c001a45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a45e:	53                   	push   ebx
c001a45f:	e8 b4 fe ff ff       	call   c001a318 <EnvVarContainer::EnvVarContainer(Process*)>
c001a464:	8b 06                	mov    eax,DWORD PTR [esi]
c001a466:	89 03                	mov    DWORD PTR [ebx],eax
c001a468:	c1 e0 03             	shl    eax,0x3
c001a46b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a46e:	e8 cd 53 ff ff       	call   c000f840 <malloc>
c001a473:	83 c4 0c             	add    esp,0xc
c001a476:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a479:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a47b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a482:	52                   	push   edx
c001a483:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a486:	50                   	push   eax
c001a487:	e8 b8 62 fe ff       	call   c0000744 <memcpy>
c001a48c:	89 d8                	mov    eax,ebx
c001a48e:	83 c4 14             	add    esp,0x14
c001a491:	5b                   	pop    ebx
c001a492:	5e                   	pop    esi
c001a493:	c3                   	ret    

c001a494 <Krnl::loadSystemEnv()>:
c001a494:	53                   	push   ebx
c001a495:	83 ec 14             	sub    esp,0x14
c001a498:	6a 0c                	push   0xc
c001a49a:	e8 a1 53 ff ff       	call   c000f840 <malloc>
c001a49f:	89 c3                	mov    ebx,eax
c001a4a1:	58                   	pop    eax
c001a4a2:	5a                   	pop    edx
c001a4a3:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001a4a9:	53                   	push   ebx
c001a4aa:	e8 69 fe ff ff       	call   c001a318 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4b2:	89 1d 38 11 03 c0    	mov    DWORD PTR ds:0xc0031138,ebx
c001a4b8:	e8 3f fe ff ff       	call   c001a2fc <EnvVarContainer::__loadSystem()>
c001a4bd:	83 c4 18             	add    esp,0x18
c001a4c0:	5b                   	pop    ebx
c001a4c1:	c3                   	ret    

c001a4c2 <Krnl::loadUserEnv()>:
c001a4c2:	53                   	push   ebx
c001a4c3:	83 ec 14             	sub    esp,0x14
c001a4c6:	6a 0c                	push   0xc
c001a4c8:	e8 73 53 ff ff       	call   c000f840 <malloc>
c001a4cd:	89 c3                	mov    ebx,eax
c001a4cf:	58                   	pop    eax
c001a4d0:	5a                   	pop    edx
c001a4d1:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001a4d7:	53                   	push   ebx
c001a4d8:	e8 3b fe ff ff       	call   c001a318 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4dd:	89 1d 34 11 03 c0    	mov    DWORD PTR ds:0xc0031134,ebx
c001a4e3:	83 c4 18             	add    esp,0x18
c001a4e6:	5b                   	pop    ebx
c001a4e7:	c3                   	ret    

c001a4e8 <Krnl::flushEnv()>:
c001a4e8:	c3                   	ret    

c001a4e9 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4ed:	8b 15 34 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031134
c001a4f3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a4f9:	a1 38 11 03 c0       	mov    eax,ds:0xc0031138
c001a4fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001a500:	03 01                	add    eax,DWORD PTR [ecx]
c001a502:	85 d2                	test   edx,edx
c001a504:	74 02                	je     c001a508 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a506:	03 02                	add    eax,DWORD PTR [edx]
c001a508:	c3                   	ret    

c001a509 <Krnl::getProcessEnvPair(Process*, int)>:
c001a509:	57                   	push   edi
c001a50a:	8b 0d 34 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031134
c001a510:	56                   	push   esi
c001a511:	85 c9                	test   ecx,ecx
c001a513:	53                   	push   ebx
c001a514:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a518:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a51c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a522:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a526:	8b 02                	mov    eax,DWORD PTR [edx]
c001a528:	75 47                	jne    c001a571 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a52a:	39 c3                	cmp    ebx,eax
c001a52c:	7c 47                	jl     c001a575 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a52e:	8b 15 38 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031138
c001a534:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a536:	01 c1                	add    ecx,eax
c001a538:	39 d9                	cmp    ecx,ebx
c001a53a:	7e 6c                	jle    c001a5a8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a53c:	51                   	push   ecx
c001a53d:	89 d9                	mov    ecx,ebx
c001a53f:	29 c1                	sub    ecx,eax
c001a541:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a544:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a548:	53                   	push   ebx
c001a549:	68 cc bb 02 c0       	push   0xc002bbcc
c001a54e:	e8 d9 89 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001a553:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a559:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a55b:	a1 38 11 03 c0       	mov    eax,ds:0xc0031138
c001a560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a563:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a567:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a56a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a56d:	89 06                	mov    DWORD PTR [esi],eax
c001a56f:	eb 51                	jmp    c001a5c2 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a571:	39 c3                	cmp    ebx,eax
c001a573:	7d 05                	jge    c001a57a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a575:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a578:	eb 20                	jmp    c001a59a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a57a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a57c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a57f:	39 da                	cmp    edx,ebx
c001a581:	7e 04                	jle    c001a587 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a583:	29 c3                	sub    ebx,eax
c001a585:	eb 10                	jmp    c001a597 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a587:	8b 0d 38 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031138
c001a58d:	03 11                	add    edx,DWORD PTR [ecx]
c001a58f:	39 da                	cmp    edx,ebx
c001a591:	7e 15                	jle    c001a5a8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a593:	29 c3                	sub    ebx,eax
c001a595:	29 fb                	sub    ebx,edi
c001a597:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a59a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a59e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5a1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5a4:	89 06                	mov    DWORD PTR [esi],eax
c001a5a6:	eb 1d                	jmp    c001a5c5 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5a8:	83 ec 0c             	sub    esp,0xc
c001a5ab:	68 e0 bb 02 c0       	push   0xc002bbe0
c001a5b0:	e8 18 00 00 00       	call   c001a5cd <Krnl::panic(char const*)>
c001a5b5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5bb:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	89 f0                	mov    eax,esi
c001a5c7:	5b                   	pop    ebx
c001a5c8:	5e                   	pop    esi
c001a5c9:	5f                   	pop    edi
c001a5ca:	c2 04 00             	ret    0x4

c001a5cd <Krnl::panic(char const*)>:
c001a5cd:	55                   	push   ebp
c001a5ce:	89 e5                	mov    ebp,esp
c001a5d0:	53                   	push   ebx
c001a5d1:	83 ec 0c             	sub    esp,0xc
c001a5d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5d7:	fa                   	cli    
c001a5d8:	c6 05 44 11 03 c0 01 	mov    BYTE PTR ds:0xc0031144,0x1
c001a5df:	53                   	push   ebx
c001a5e0:	c6 05 24 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d524,0x0
c001a5e7:	68 fa bb 02 c0       	push   0xc002bbfa
c001a5ec:	e8 3b 89 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001a5f1:	58                   	pop    eax
c001a5f2:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a5f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5fd:	e8 3b 67 ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001a602:	83 c4 0c             	add    esp,0xc
c001a605:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a60a:	6a 01                	push   0x1
c001a60c:	6a 0f                	push   0xf
c001a60e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a614:	e8 55 61 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a619:	58                   	pop    eax
c001a61a:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a61f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a625:	e8 b4 69 ff ff       	call   c0010fde <VgaText::clearScreen()>
c001a62a:	58                   	pop    eax
c001a62b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a630:	5a                   	pop    edx
c001a631:	68 13 bc 02 c0       	push   0xc002bc13
c001a636:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63c:	e8 1b 6b ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a641:	59                   	pop    ecx
c001a642:	58                   	pop    eax
c001a643:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a648:	68 b8 bc 02 c0       	push   0xc002bcb8
c001a64d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a653:	e8 04 6b ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a658:	58                   	pop    eax
c001a659:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a65e:	5a                   	pop    edx
c001a65f:	68 2f bc 02 c0       	push   0xc002bc2f
c001a664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66a:	e8 ed 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a66f:	59                   	pop    ecx
c001a670:	58                   	pop    eax
c001a671:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a676:	53                   	push   ebx
c001a677:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a67d:	e8 da 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a682:	58                   	pop    eax
c001a683:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a688:	5a                   	pop    edx
c001a689:	68 4f bc 02 c0       	push   0xc002bc4f
c001a68e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a694:	e8 c3 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a699:	a1 40 11 03 c0       	mov    eax,ds:0xc0031140
c001a69e:	83 c4 10             	add    esp,0x10
c001a6a1:	85 c0                	test   eax,eax
c001a6a3:	74 02                	je     c001a6a7 <Krnl::panic(char const*)+0xda>
c001a6a5:	ff d0                	call   eax
c001a6a7:	83 ec 0c             	sub    esp,0xc
c001a6aa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6ad:	e8 47 30 00 00       	call   c001d6f9 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6b2:	83 c4 10             	add    esp,0x10
c001a6b5:	89 c3                	mov    ebx,eax
c001a6b7:	85 c0                	test   eax,eax
c001a6b9:	0f 84 50 02 00 00    	je     c001a90f <Krnl::panic(char const*)+0x342>
c001a6bf:	83 ec 08             	sub    esp,0x8
c001a6c2:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c001a6c8:	68 f4 bc 02 c0       	push   0xc002bcf4
c001a6cd:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6d3:	e8 84 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6d8:	58                   	pop    eax
c001a6d9:	5a                   	pop    edx
c001a6da:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c001a6e0:	68 2f bc 02 c0       	push   0xc002bc2f
c001a6e5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6eb:	e8 6c 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6f0:	59                   	pop    ecx
c001a6f1:	58                   	pop    eax
c001a6f2:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a6f7:	53                   	push   ebx
c001a6f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6fe:	e8 59 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a703:	83 c4 10             	add    esp,0x10
c001a706:	83 ec 08             	sub    esp,0x8
c001a709:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a70e:	68 4e bc 02 c0       	push   0xc002bc4e
c001a713:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a719:	e8 3e 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a71e:	58                   	pop    eax
c001a71f:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a724:	5a                   	pop    edx
c001a725:	68 4c bd 02 c0       	push   0xc002bd4c
c001a72a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a730:	e8 27 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a735:	59                   	pop    ecx
c001a736:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a73b:	5b                   	pop    ebx
c001a73c:	68 8c bd 02 c0       	push   0xc002bd8c
c001a741:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a747:	e8 10 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a74c:	58                   	pop    eax
c001a74d:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a752:	5a                   	pop    edx
c001a753:	68 3a bc 02 c0       	push   0xc002bc3a
c001a758:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75e:	e8 f9 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a763:	59                   	pop    ecx
c001a764:	5b                   	pop    ebx
c001a765:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a768:	68 52 bc 02 c0       	push   0xc002bc52
c001a76d:	e8 ba 87 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001a772:	58                   	pop    eax
c001a773:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a776:	5a                   	pop    edx
c001a777:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a77a:	68 5b bc 02 c0       	push   0xc002bc5b
c001a77f:	e8 a8 87 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001a784:	59                   	pop    ecx
c001a785:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a788:	5b                   	pop    ebx
c001a789:	8b 00                	mov    eax,DWORD PTR [eax]
c001a78b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a78e:	68 64 bc 02 c0       	push   0xc002bc64
c001a793:	e8 94 87 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001a798:	58                   	pop    eax
c001a799:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a79e:	5a                   	pop    edx
c001a79f:	68 d0 bd 02 c0       	push   0xc002bdd0
c001a7a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7aa:	e8 ad 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7af:	59                   	pop    ecx
c001a7b0:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a7b5:	5b                   	pop    ebx
c001a7b6:	68 6d bc 02 c0       	push   0xc002bc6d
c001a7bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c1:	e8 96 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7c6:	0f 20 c0             	mov    eax,cr0
c001a7c9:	5a                   	pop    edx
c001a7ca:	59                   	pop    ecx
c001a7cb:	50                   	push   eax
c001a7cc:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a7d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d7:	e8 a6 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a7dc:	5b                   	pop    ebx
c001a7dd:	58                   	pop    eax
c001a7de:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a7e3:	68 77 bc 02 c0       	push   0xc002bc77
c001a7e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ee:	e8 69 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7f3:	0f 20 d0             	mov    eax,cr2
c001a7f6:	5a                   	pop    edx
c001a7f7:	59                   	pop    ecx
c001a7f8:	50                   	push   eax
c001a7f9:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a7fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a804:	e8 79 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a809:	5b                   	pop    ebx
c001a80a:	58                   	pop    eax
c001a80b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a810:	68 81 bc 02 c0       	push   0xc002bc81
c001a815:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81b:	e8 3c 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a820:	0f 20 d8             	mov    eax,cr3
c001a823:	5a                   	pop    edx
c001a824:	59                   	pop    ecx
c001a825:	50                   	push   eax
c001a826:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a82b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a831:	e8 4c 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a836:	5b                   	pop    ebx
c001a837:	58                   	pop    eax
c001a838:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a83d:	68 94 bc 02 c0       	push   0xc002bc94
c001a842:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a848:	e8 0f 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a84d:	0f 20 e0             	mov    eax,cr4
c001a850:	5a                   	pop    edx
c001a851:	59                   	pop    ecx
c001a852:	50                   	push   eax
c001a853:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a858:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85e:	e8 1f 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a863:	5b                   	pop    ebx
c001a864:	58                   	pop    eax
c001a865:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a86a:	68 9e bc 02 c0       	push   0xc002bc9e
c001a86f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a875:	e8 e2 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a87a:	5a                   	pop    edx
c001a87b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a880:	59                   	pop    ecx
c001a881:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a887:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a88a:	50                   	push   eax
c001a88b:	e8 f2 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a890:	5b                   	pop    ebx
c001a891:	58                   	pop    eax
c001a892:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a897:	68 b5 bc 02 c0       	push   0xc002bcb5
c001a89c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a2:	e8 b5 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8a7:	5a                   	pop    edx
c001a8a8:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a8ad:	59                   	pop    ecx
c001a8ae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8b4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8b7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8ba:	50                   	push   eax
c001a8bb:	e8 c2 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8c0:	5b                   	pop    ebx
c001a8c1:	58                   	pop    eax
c001a8c2:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a8c7:	68 b5 bc 02 c0       	push   0xc002bcb5
c001a8cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d2:	e8 85 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8d7:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a8dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8e5:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8e7:	59                   	pop    ecx
c001a8e8:	5b                   	pop    ebx
c001a8e9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8ec:	50                   	push   eax
c001a8ed:	e8 90 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	b2 fe                	mov    dl,0xfe
c001a8f7:	e4 60                	in     al,0x60
c001a8f9:	3c 1c                	cmp    al,0x1c
c001a8fb:	74 04                	je     c001a901 <Krnl::panic(char const*)+0x334>
c001a8fd:	3c 5a                	cmp    al,0x5a
c001a8ff:	75 f6                	jne    c001a8f7 <Krnl::panic(char const*)+0x32a>
c001a901:	e4 64                	in     al,0x64
c001a903:	a8 02                	test   al,0x2
c001a905:	75 fa                	jne    c001a901 <Krnl::panic(char const*)+0x334>
c001a907:	88 d0                	mov    al,dl
c001a909:	e6 64                	out    0x64,al
c001a90b:	fa                   	cli    
c001a90c:	f4                   	hlt    
c001a90d:	eb e8                	jmp    c001a8f7 <Krnl::panic(char const*)+0x32a>
c001a90f:	50                   	push   eax
c001a910:	50                   	push   eax
c001a911:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a916:	68 20 bd 02 c0       	push   0xc002bd20
c001a91b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a921:	e8 36 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a926:	58                   	pop    eax
c001a927:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a92c:	5a                   	pop    edx
c001a92d:	68 2f bc 02 c0       	push   0xc002bc2f
c001a932:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a938:	e8 1f 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a93d:	59                   	pop    ecx
c001a93e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a943:	5b                   	pop    ebx
c001a944:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a947:	83 c0 0c             	add    eax,0xc
c001a94a:	50                   	push   eax
c001a94b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a950:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a956:	e8 01 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a95b:	83 c4 10             	add    esp,0x10
c001a95e:	e9 a3 fd ff ff       	jmp    c001a706 <Krnl::panic(char const*)+0x139>

c001a963 <Net::switchEndian16(unsigned short)>:
c001a963:	83 ec 04             	sub    esp,0x4
c001a966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a96a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a96e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a972:	c1 f8 08             	sar    eax,0x8
c001a975:	89 c2                	mov    edx,eax
c001a977:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a97b:	c1 e0 08             	shl    eax,0x8
c001a97e:	09 d0                	or     eax,edx
c001a980:	83 c4 04             	add    esp,0x4
c001a983:	c3                   	ret    

c001a984 <Net::switchEndian32(unsigned int)>:
c001a984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a988:	c1 e8 18             	shr    eax,0x18
c001a98b:	89 c2                	mov    edx,eax
c001a98d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a991:	c1 e0 08             	shl    eax,0x8
c001a994:	25 00 00 ff 00       	and    eax,0xff0000
c001a999:	09 c2                	or     edx,eax
c001a99b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a99f:	c1 e8 08             	shr    eax,0x8
c001a9a2:	25 00 ff 00 00       	and    eax,0xff00
c001a9a7:	09 c2                	or     edx,eax
c001a9a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ad:	c1 e0 18             	shl    eax,0x18
c001a9b0:	09 d0                	or     eax,edx
c001a9b2:	c3                   	ret    

c001a9b3 <Net::crc32Calc(unsigned char*, int)>:
c001a9b3:	83 ec 10             	sub    esp,0x10
c001a9b6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9bb:	75 07                	jne    c001a9c4 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9bd:	b8 00 00 00 00       	mov    eax,0x0
c001a9c2:	eb 7c                	jmp    c001aa40 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9c9:	7f 07                	jg     c001a9d2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9cb:	b8 00 00 00 00       	mov    eax,0x0
c001a9d0:	eb 6e                	jmp    c001aa40 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9d2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a9ea:	7d 4e                	jge    c001aa3a <Net::crc32Calc(unsigned char*, int)+0x87>
c001a9ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9f4:	01 d0                	add    eax,edx
c001a9f6:	8a 00                	mov    al,BYTE PTR [eax]
c001a9f8:	0f b6 c0             	movzx  eax,al
c001a9fb:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa07:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa0c:	7f 26                	jg     c001aa34 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa12:	83 e0 01             	and    eax,0x1
c001aa15:	74 0d                	je     c001aa24 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1b:	d1 e8                	shr    eax,1
c001aa1d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa22:	eb 06                	jmp    c001aa2a <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa28:	d1 e8                	shr    eax,1
c001aa2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa32:	eb d3                	jmp    c001aa07 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa34:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa38:	eb a8                	jmp    c001a9e2 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa3e:	f7 d0                	not    eax
c001aa40:	83 c4 10             	add    esp,0x10
c001aa43:	c3                   	ret    

c001aa44 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa44:	83 ec 1c             	sub    esp,0x1c
c001aa47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa57:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa5c:	7f 14                	jg     c001aa72 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa62:	8d 50 01             	lea    edx,[eax+0x1]
c001aa65:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa69:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa70:	eb e5                	jmp    c001aa57 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa76:	8d 50 01             	lea    edx,[eax+0x1]
c001aa79:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa7d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa80:	83 ec 04             	sub    esp,0x4
c001aa83:	6a 06                	push   0x6
c001aa85:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa89:	50                   	push   eax
c001aa8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa8e:	e8 b1 5c fe ff       	call   c0000744 <memcpy>
c001aa93:	83 c4 10             	add    esp,0x10
c001aa96:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa9b:	83 ec 04             	sub    esp,0x4
c001aa9e:	6a 06                	push   0x6
c001aaa0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aaa4:	50                   	push   eax
c001aaa5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaa9:	e8 96 5c fe ff       	call   c0000744 <memcpy>
c001aaae:	83 c4 10             	add    esp,0x10
c001aab1:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aab6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaba:	0f b7 c0             	movzx  eax,ax
c001aabd:	c1 f8 08             	sar    eax,0x8
c001aac0:	89 c1                	mov    ecx,eax
c001aac2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac6:	8d 50 01             	lea    edx,[eax+0x1]
c001aac9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aacd:	88 ca                	mov    dl,cl
c001aacf:	88 10                	mov    BYTE PTR [eax],dl
c001aad1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aad5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aad9:	8d 48 01             	lea    ecx,[eax+0x1]
c001aadc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aae0:	88 10                	mov    BYTE PTR [eax],dl
c001aae2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaea:	83 ec 04             	sub    esp,0x4
c001aaed:	52                   	push   edx
c001aaee:	50                   	push   eax
c001aaef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaf3:	e8 4c 5c fe ff       	call   c0000744 <memcpy>
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aaff:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab07:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab0b:	83 ec 08             	sub    esp,0x8
c001ab0e:	50                   	push   eax
c001ab0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab13:	e8 9b fe ff ff       	call   c001a9b3 <Net::crc32Calc(unsigned char*, int)>
c001ab18:	83 c4 10             	add    esp,0x10
c001ab1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab23:	c1 e8 18             	shr    eax,0x18
c001ab26:	89 c1                	mov    ecx,eax
c001ab28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab33:	88 ca                	mov    dl,cl
c001ab35:	88 10                	mov    BYTE PTR [eax],dl
c001ab37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab3b:	c1 e8 10             	shr    eax,0x10
c001ab3e:	89 c1                	mov    ecx,eax
c001ab40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab44:	8d 50 01             	lea    edx,[eax+0x1]
c001ab47:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab4b:	88 ca                	mov    dl,cl
c001ab4d:	88 10                	mov    BYTE PTR [eax],dl
c001ab4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab53:	c1 e8 08             	shr    eax,0x8
c001ab56:	89 c1                	mov    ecx,eax
c001ab58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab63:	88 ca                	mov    dl,cl
c001ab65:	88 10                	mov    BYTE PTR [eax],dl
c001ab67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab6b:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab76:	88 10                	mov    BYTE PTR [eax],dl
c001ab78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab7c:	83 c4 1c             	add    esp,0x1c
c001ab7f:	c3                   	ret    

c001ab80 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab80:	83 ec 2c             	sub    esp,0x2c
c001ab83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab8b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab90:	83 ec 04             	sub    esp,0x4
c001ab93:	6a 06                	push   0x6
c001ab95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab9d:	83 c0 0e             	add    eax,0xe
c001aba0:	50                   	push   eax
c001aba1:	e8 9e 5b fe ff       	call   c0000744 <memcpy>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abae:	83 ec 04             	sub    esp,0x4
c001abb1:	6a 06                	push   0x6
c001abb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abbb:	83 c0 08             	add    eax,0x8
c001abbe:	50                   	push   eax
c001abbf:	e8 80 5b fe ff       	call   c0000744 <memcpy>
c001abc4:	83 c4 10             	add    esp,0x10
c001abc7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abd0:	8d 50 01             	lea    edx,[eax+0x1]
c001abd3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abd7:	8a 00                	mov    al,BYTE PTR [eax]
c001abd9:	0f b6 c0             	movzx  eax,al
c001abdc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001abe1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abe5:	8d 50 01             	lea    edx,[eax+0x1]
c001abe8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abec:	8a 00                	mov    al,BYTE PTR [eax]
c001abee:	0f b6 c0             	movzx  eax,al
c001abf1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001abf6:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001abfb:	c1 e0 08             	shl    eax,0x8
c001abfe:	89 c2                	mov    edx,eax
c001ac00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac04:	09 d0                	or     eax,edx
c001ac06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac0a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac0e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac13:	75 3a                	jne    c001ac4f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac19:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac1c:	66 3d dc 05          	cmp    ax,0x5dc
c001ac20:	77 10                	ja     c001ac32 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac26:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac29:	0f b7 c0             	movzx  eax,ax
c001ac2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac30:	eb 1d                	jmp    c001ac4f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac32:	83 ec 0c             	sub    esp,0xc
c001ac35:	68 f8 bd 02 c0       	push   0xc002bdf8
c001ac3a:	e8 ed 82 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac46:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac4a:	e9 c0 00 00 00       	jmp    c001ad0f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac4f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac57:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac59:	83 ec 04             	sub    esp,0x4
c001ac5c:	52                   	push   edx
c001ac5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac61:	50                   	push   eax
c001ac62:	e8 dd 5a fe ff       	call   c0000744 <memcpy>
c001ac67:	83 c4 10             	add    esp,0x10
c001ac6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac6e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac76:	8d 50 01             	lea    edx,[eax+0x1]
c001ac79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac7d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac7f:	0f b6 c0             	movzx  eax,al
c001ac82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac91:	8a 00                	mov    al,BYTE PTR [eax]
c001ac93:	0f b6 c0             	movzx  eax,al
c001ac96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac9e:	8d 50 01             	lea    edx,[eax+0x1]
c001aca1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aca5:	8a 00                	mov    al,BYTE PTR [eax]
c001aca7:	0f b6 c0             	movzx  eax,al
c001acaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb2:	8d 50 01             	lea    edx,[eax+0x1]
c001acb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acb9:	8a 00                	mov    al,BYTE PTR [eax]
c001acbb:	0f b6 c0             	movzx  eax,al
c001acbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acc6:	c1 e0 18             	shl    eax,0x18
c001acc9:	89 c2                	mov    edx,eax
c001accb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001accf:	c1 e0 10             	shl    eax,0x10
c001acd2:	09 c2                	or     edx,eax
c001acd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acd8:	c1 e0 08             	shl    eax,0x8
c001acdb:	09 d0                	or     eax,edx
c001acdd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ace1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ace5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001aced:	83 e8 04             	sub    eax,0x4
c001acf0:	83 ec 08             	sub    esp,0x8
c001acf3:	50                   	push   eax
c001acf4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001acf8:	e8 b6 fc ff ff       	call   c001a9b3 <Net::crc32Calc(unsigned char*, int)>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad04:	0f 94 c2             	sete   dl
c001ad07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad0b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad0e:	90                   	nop
c001ad0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad13:	83 c4 2c             	add    esp,0x2c
c001ad16:	c2 04 00             	ret    0x4

c001ad19 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad19:	55                   	push   ebp
c001ad1a:	57                   	push   edi
c001ad1b:	56                   	push   esi
c001ad1c:	53                   	push   ebx
c001ad1d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad23:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad2a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad2c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad2f:	80 fb 40             	cmp    bl,0x40
c001ad32:	75 1b                	jne    c001ad4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad34:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad36:	84 d2                	test   dl,dl
c001ad38:	0f 84 f1 00 00 00    	je     c001ae2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad3e:	8d 46 01             	lea    eax,[esi+0x1]
c001ad41:	80 fa 3a             	cmp    dl,0x3a
c001ad44:	74 04                	je     c001ad4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad46:	89 c6                	mov    esi,eax
c001ad48:	eb ea                	jmp    c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad4a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad4d:	89 c6                	mov    esi,eax
c001ad4f:	50                   	push   eax
c001ad50:	6a 40                	push   0x40
c001ad52:	6a 00                	push   0x0
c001ad54:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad58:	50                   	push   eax
c001ad59:	e8 1a 5a fe ff       	call   c0000778 <memset>
c001ad5e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad65:	31 c0                	xor    eax,eax
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad6c:	84 c9                	test   cl,cl
c001ad6e:	0f 84 bb 00 00 00    	je     c001ae2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad74:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad79:	0f 8f b0 00 00 00    	jg     c001ae2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad7f:	80 f9 0a             	cmp    cl,0xa
c001ad82:	0f 85 98 00 00 00    	jne    c001ae20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad88:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad8d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad91:	a8 df                	test   al,0xdf
c001ad93:	0f 94 c1             	sete   cl
c001ad96:	3c 23                	cmp    al,0x23
c001ad98:	0f 94 c2             	sete   dl
c001ad9b:	08 d1                	or     cl,dl
c001ad9d:	75 4a                	jne    c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad9f:	8d 50 f7             	lea    edx,[eax-0x9]
c001ada2:	80 fa 01             	cmp    dl,0x1
c001ada5:	76 42                	jbe    c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ada7:	3c 5b                	cmp    al,0x5b
c001ada9:	75 42                	jne    c001aded <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001adab:	80 fb 40             	cmp    bl,0x40
c001adae:	75 39                	jne    c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	8d 54 24 65          	lea    edx,[esp+0x65]
c001adb7:	52                   	push   edx
c001adb8:	e8 d7 59 fe ff       	call   c0000794 <strlen>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	83 f8 3f             	cmp    eax,0x3f
c001adc3:	77 6a                	ja     c001ae2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adc5:	50                   	push   eax
c001adc6:	50                   	push   eax
c001adc7:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adcb:	52                   	push   edx
c001adcc:	8d 54 24 24          	lea    edx,[esp+0x24]
c001add0:	52                   	push   edx
c001add1:	e8 5e 5a fe ff       	call   c0000834 <strcpy>
c001add6:	58                   	pop    eax
c001add7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001addb:	52                   	push   edx
c001addc:	e8 b3 59 fe ff       	call   c0000794 <strlen>
c001ade1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ade6:	83 c4 10             	add    esp,0x10
c001ade9:	31 d2                	xor    edx,edx
c001adeb:	eb 3a                	jmp    c001ae27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aded:	80 fb 40             	cmp    bl,0x40
c001adf0:	74 06                	je     c001adf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001adf2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001adf6:	eb 20                	jmp    c001ae18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001adf8:	50                   	push   eax
c001adf9:	50                   	push   eax
c001adfa:	55                   	push   ebp
c001adfb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adff:	50                   	push   eax
c001ae00:	e8 bb 5a fe ff       	call   c00008c0 <strcmp>
c001ae05:	83 c4 10             	add    esp,0x10
c001ae08:	85 c0                	test   eax,eax
c001ae0a:	75 dd                	jne    c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae0c:	eb e4                	jmp    c001adf2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ae11:	80 f9 3d             	cmp    cl,0x3d
c001ae14:	74 1d                	je     c001ae33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae16:	89 d0                	mov    eax,edx
c001ae18:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae1a:	84 c9                	test   cl,cl
c001ae1c:	75 f0                	jne    c001ae0e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae1e:	eb 0f                	jmp    c001ae2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae20:	8d 50 01             	lea    edx,[eax+0x1]
c001ae23:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae27:	47                   	inc    edi
c001ae28:	89 d0                	mov    eax,edx
c001ae2a:	e9 3b ff ff ff       	jmp    c001ad6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae2f:	31 c0                	xor    eax,eax
c001ae31:	eb 33                	jmp    c001ae66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae37:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae3a:	50                   	push   eax
c001ae3b:	50                   	push   eax
c001ae3c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae40:	50                   	push   eax
c001ae41:	56                   	push   esi
c001ae42:	e8 79 5a fe ff       	call   c00008c0 <strcmp>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	85 c0                	test   eax,eax
c001ae4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae50:	75 97                	jne    c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae52:	51                   	push   ecx
c001ae53:	51                   	push   ecx
c001ae54:	52                   	push   edx
c001ae55:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae5c:	e8 d3 59 fe ff       	call   c0000834 <strcpy>
c001ae61:	83 c4 10             	add    esp,0x10
c001ae64:	b0 01                	mov    al,0x1
c001ae66:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae6c:	5b                   	pop    ebx
c001ae6d:	5e                   	pop    esi
c001ae6e:	5f                   	pop    edi
c001ae6f:	5d                   	pop    ebp
c001ae70:	c3                   	ret    

c001ae71 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae71:	57                   	push   edi
c001ae72:	56                   	push   esi
c001ae73:	53                   	push   ebx
c001ae74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae7a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae81:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae88:	53                   	push   ebx
c001ae89:	e8 06 59 fe ff       	call   c0000794 <strlen>
c001ae8e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae91:	89 c7                	mov    edi,eax
c001ae93:	e8 fc 58 fe ff       	call   c0000794 <strlen>
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae9f:	3d ff 00 00 00       	cmp    eax,0xff
c001aea4:	0f 87 d3 00 00 00    	ja     c001af7d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeaa:	57                   	push   edi
c001aeab:	57                   	push   edi
c001aeac:	56                   	push   esi
c001aead:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aeb1:	56                   	push   esi
c001aeb2:	e8 7d 59 fe ff       	call   c0000834 <strcpy>
c001aeb7:	58                   	pop    eax
c001aeb8:	5a                   	pop    edx
c001aeb9:	68 c1 c3 02 c0       	push   0xc002c3c1
c001aebe:	56                   	push   esi
c001aebf:	e8 b0 5a fe ff       	call   c0000974 <strcat>
c001aec4:	59                   	pop    ecx
c001aec5:	5f                   	pop    edi
c001aec6:	53                   	push   ebx
c001aec7:	56                   	push   esi
c001aec8:	e8 a7 5a fe ff       	call   c0000974 <strcat>
c001aecd:	58                   	pop    eax
c001aece:	5a                   	pop    edx
c001aecf:	68 44 be 02 c0       	push   0xc002be44
c001aed4:	56                   	push   esi
c001aed5:	e8 9a 5a fe ff       	call   c0000974 <strcat>
c001aeda:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aee1:	e8 5a 49 ff ff       	call   c000f840 <malloc>
c001aee6:	83 c4 0c             	add    esp,0xc
c001aee9:	89 c3                	mov    ebx,eax
c001aeeb:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001aef1:	56                   	push   esi
c001aef2:	50                   	push   eax
c001aef3:	e8 8c 85 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001aef8:	83 c4 10             	add    esp,0x10
c001aefb:	85 db                	test   ebx,ebx
c001aefd:	74 7e                	je     c001af7d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeff:	51                   	push   ecx
c001af00:	51                   	push   ecx
c001af01:	6a 01                	push   0x1
c001af03:	53                   	push   ebx
c001af04:	e8 df 85 ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001af09:	83 c4 10             	add    esp,0x10
c001af0c:	85 c0                	test   eax,eax
c001af0e:	74 08                	je     c001af18 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af15:	53                   	push   ebx
c001af16:	eb 5f                	jmp    c001af77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af18:	52                   	push   edx
c001af19:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af1d:	50                   	push   eax
c001af1e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af22:	50                   	push   eax
c001af23:	53                   	push   ebx
c001af24:	e8 6b 88 ff ff       	call   c0013794 <File::stat(unsigned long long*, bool*)>
c001af29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af2d:	83 c4 10             	add    esp,0x10
c001af30:	89 c1                	mov    ecx,eax
c001af32:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af36:	74 31                	je     c001af69 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af38:	83 ec 0c             	sub    esp,0xc
c001af3b:	50                   	push   eax
c001af3c:	e8 ff 48 ff ff       	call   c000f840 <malloc>
c001af41:	89 c6                	mov    esi,eax
c001af43:	58                   	pop    eax
c001af44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af46:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af4a:	52                   	push   edx
c001af4b:	56                   	push   esi
c001af4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af54:	53                   	push   ebx
c001af55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af58:	83 c4 20             	add    esp,0x20
c001af5b:	85 c0                	test   eax,eax
c001af5d:	75 0a                	jne    c001af69 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af63:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af67:	74 18                	je     c001af81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af69:	83 ec 0c             	sub    esp,0xc
c001af6c:	53                   	push   ebx
c001af6d:	e8 d4 85 ff ff       	call   c0013546 <File::close()>
c001af72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af7a:	83 c4 10             	add    esp,0x10
c001af7d:	31 c0                	xor    eax,eax
c001af7f:	eb 3b                	jmp    c001afbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af81:	83 ec 0c             	sub    esp,0xc
c001af84:	53                   	push   ebx
c001af85:	e8 bc 85 ff ff       	call   c0013546 <File::close()>
c001af8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af92:	83 c4 0c             	add    esp,0xc
c001af95:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af9c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afa3:	56                   	push   esi
c001afa4:	e8 70 fd ff ff       	call   c001ad19 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afa9:	89 34 24             	mov    DWORD PTR [esp],esi
c001afac:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afb0:	e8 9b 48 ff ff       	call   c000f850 <free>
c001afb5:	83 c4 10             	add    esp,0x10
c001afb8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afbc:	81 c4 20 01 00 00    	add    esp,0x120
c001afc2:	5b                   	pop    ebx
c001afc3:	5e                   	pop    esi
c001afc4:	5f                   	pop    edi
c001afc5:	c3                   	ret    

c001afc6 <Reg::getLine(char*, char*, char*)>:
c001afc6:	57                   	push   edi
c001afc7:	56                   	push   esi
c001afc8:	53                   	push   ebx
c001afc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afcd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afd1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afd5:	57                   	push   edi
c001afd6:	56                   	push   esi
c001afd7:	53                   	push   ebx
c001afd8:	68 49 be 02 c0       	push   0xc002be49
c001afdd:	e8 8f fe ff ff       	call   c001ae71 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afe2:	83 c4 10             	add    esp,0x10
c001afe5:	84 c0                	test   al,al
c001afe7:	75 10                	jne    c001aff9 <Reg::getLine(char*, char*, char*)+0x33>
c001afe9:	57                   	push   edi
c001afea:	56                   	push   esi
c001afeb:	53                   	push   ebx
c001afec:	68 6e be 02 c0       	push   0xc002be6e
c001aff1:	e8 7b fe ff ff       	call   c001ae71 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aff6:	83 c4 10             	add    esp,0x10
c001aff9:	5b                   	pop    ebx
c001affa:	5e                   	pop    esi
c001affb:	5f                   	pop    edi
c001affc:	c3                   	ret    

c001affd <Reg::readInt(char*, char*, int*)>:
c001affd:	55                   	push   ebp
c001affe:	57                   	push   edi
c001afff:	56                   	push   esi
c001b000:	53                   	push   ebx
c001b001:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b007:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b00b:	57                   	push   edi
c001b00c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b013:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b01a:	e8 a7 ff ff ff       	call   c001afc6 <Reg::getLine(char*, char*, char*)>
c001b01f:	83 c4 10             	add    esp,0x10
c001b022:	84 c0                	test   al,al
c001b024:	0f 84 b3 00 00 00    	je     c001b0dd <Reg::readInt(char*, char*, int*)+0xe0>
c001b02a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b02e:	80 fa 2b             	cmp    dl,0x2b
c001b031:	74 0c                	je     c001b03f <Reg::readInt(char*, char*, int*)+0x42>
c001b033:	80 fa 2d             	cmp    dl,0x2d
c001b036:	75 0e                	jne    c001b046 <Reg::readInt(char*, char*, int*)+0x49>
c001b038:	ba 01 00 00 00       	mov    edx,0x1
c001b03d:	eb 0b                	jmp    c001b04a <Reg::readInt(char*, char*, int*)+0x4d>
c001b03f:	ba 01 00 00 00       	mov    edx,0x1
c001b044:	eb 02                	jmp    c001b048 <Reg::readInt(char*, char*, int*)+0x4b>
c001b046:	31 d2                	xor    edx,edx
c001b048:	31 c0                	xor    eax,eax
c001b04a:	be 0a 00 00 00       	mov    esi,0xa
c001b04f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b054:	75 20                	jne    c001b076 <Reg::readInt(char*, char*, int*)+0x79>
c001b056:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b05a:	80 f9 78             	cmp    cl,0x78
c001b05d:	75 0a                	jne    c001b069 <Reg::readInt(char*, char*, int*)+0x6c>
c001b05f:	83 c2 02             	add    edx,0x2
c001b062:	be 10 00 00 00       	mov    esi,0x10
c001b067:	eb 0d                	jmp    c001b076 <Reg::readInt(char*, char*, int*)+0x79>
c001b069:	80 f9 62             	cmp    cl,0x62
c001b06c:	75 08                	jne    c001b076 <Reg::readInt(char*, char*, int*)+0x79>
c001b06e:	83 c2 02             	add    edx,0x2
c001b071:	be 02 00 00 00       	mov    esi,0x2
c001b076:	01 d7                	add    edi,edx
c001b078:	31 d2                	xor    edx,edx
c001b07a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b07c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b080:	80 fb 0d             	cmp    bl,0xd
c001b083:	0f 94 c3             	sete   bl
c001b086:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b08b:	0f 94 c1             	sete   cl
c001b08e:	08 cb                	or     bl,cl
c001b090:	75 3a                	jne    c001b0cc <Reg::readInt(char*, char*, int*)+0xcf>
c001b092:	0f af d6             	imul   edx,esi
c001b095:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b09a:	83 fe 10             	cmp    esi,0x10
c001b09d:	75 26                	jne    c001b0c5 <Reg::readInt(char*, char*, int*)+0xc8>
c001b09f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0a3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0a6:	89 e9                	mov    ecx,ebp
c001b0a8:	80 f9 05             	cmp    cl,0x5
c001b0ab:	77 06                	ja     c001b0b3 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0ad:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0b1:	eb 16                	jmp    c001b0c9 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0b3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0b7:	83 e9 61             	sub    ecx,0x61
c001b0ba:	80 f9 05             	cmp    cl,0x5
c001b0bd:	77 06                	ja     c001b0c5 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0bf:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0c3:	eb 04                	jmp    c001b0c9 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0c5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0c9:	47                   	inc    edi
c001b0ca:	eb ae                	jmp    c001b07a <Reg::readInt(char*, char*, int*)+0x7d>
c001b0cc:	84 c0                	test   al,al
c001b0ce:	74 02                	je     c001b0d2 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0d0:	f7 da                	neg    edx
c001b0d2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0d9:	89 10                	mov    DWORD PTR [eax],edx
c001b0db:	88 d8                	mov    al,bl
c001b0dd:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0e3:	5b                   	pop    ebx
c001b0e4:	5e                   	pop    esi
c001b0e5:	5f                   	pop    edi
c001b0e6:	5d                   	pop    ebp
c001b0e7:	c3                   	ret    

c001b0e8 <Reg::readString(char*, char*, char*, int)>:
c001b0e8:	57                   	push   edi
c001b0e9:	56                   	push   esi
c001b0ea:	53                   	push   ebx
c001b0eb:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0f1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0f8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0fc:	57                   	push   edi
c001b0fd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b104:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b10b:	e8 b6 fe ff ff       	call   c001afc6 <Reg::getLine(char*, char*, char*)>
c001b110:	83 c4 10             	add    esp,0x10
c001b113:	89 c6                	mov    esi,eax
c001b115:	84 c0                	test   al,al
c001b117:	74 44                	je     c001b15d <Reg::readString(char*, char*, char*, int)+0x75>
c001b119:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b120:	31 c0                	xor    eax,eax
c001b122:	4a                   	dec    edx
c001b123:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b126:	84 c9                	test   cl,cl
c001b128:	74 0f                	je     c001b139 <Reg::readString(char*, char*, char*, int)+0x51>
c001b12a:	39 c2                	cmp    edx,eax
c001b12c:	7e 0b                	jle    c001b139 <Reg::readString(char*, char*, char*, int)+0x51>
c001b12e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b131:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b136:	40                   	inc    eax
c001b137:	eb ea                	jmp    c001b123 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b139:	83 ec 0c             	sub    esp,0xc
c001b13c:	53                   	push   ebx
c001b13d:	e8 52 56 fe ff       	call   c0000794 <strlen>
c001b142:	83 c4 10             	add    esp,0x10
c001b145:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b14a:	75 11                	jne    c001b15d <Reg::readString(char*, char*, char*, int)+0x75>
c001b14c:	83 ec 0c             	sub    esp,0xc
c001b14f:	53                   	push   ebx
c001b150:	e8 3f 56 fe ff       	call   c0000794 <strlen>
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b15d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b163:	89 f0                	mov    eax,esi
c001b165:	5b                   	pop    ebx
c001b166:	5e                   	pop    esi
c001b167:	5f                   	pop    edi
c001b168:	c3                   	ret    

c001b169 <Reg::readBool(char*, char*, bool*)>:
c001b169:	83 ec 20             	sub    esp,0x20
c001b16c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b170:	50                   	push   eax
c001b171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b179:	e8 7f fe ff ff       	call   c001affd <Reg::readInt(char*, char*, int*)>
c001b17e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b183:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b187:	0f 95 02             	setne  BYTE PTR [edx]
c001b18a:	83 c4 2c             	add    esp,0x2c
c001b18d:	c3                   	ret    

c001b18e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b18e:	53                   	push   ebx
c001b18f:	83 ec 1c             	sub    esp,0x1c
c001b192:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b196:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b19a:	50                   	push   eax
c001b19b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a3:	e8 c1 ff ff ff       	call   c001b169 <Reg::readBool(char*, char*, bool*)>
c001b1a8:	83 c4 10             	add    esp,0x10
c001b1ab:	84 c0                	test   al,al
c001b1ad:	74 04                	je     c001b1b3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1af:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1b3:	88 d8                	mov    al,bl
c001b1b5:	83 c4 18             	add    esp,0x18
c001b1b8:	5b                   	pop    ebx
c001b1b9:	c3                   	ret    

c001b1ba <Reg::readIntWithDefault(char*, char*, int)>:
c001b1ba:	53                   	push   ebx
c001b1bb:	83 ec 1c             	sub    esp,0x1c
c001b1be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1c6:	50                   	push   eax
c001b1c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cf:	e8 29 fe ff ff       	call   c001affd <Reg::readInt(char*, char*, int*)>
c001b1d4:	83 c4 10             	add    esp,0x10
c001b1d7:	84 c0                	test   al,al
c001b1d9:	74 04                	je     c001b1df <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1df:	89 d8                	mov    eax,ebx
c001b1e1:	83 c4 18             	add    esp,0x18
c001b1e4:	5b                   	pop    ebx
c001b1e5:	c3                   	ret    

c001b1e6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1e6:	57                   	push   edi
c001b1e7:	56                   	push   esi
c001b1e8:	53                   	push   ebx
c001b1e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1ed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1f1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1f5:	56                   	push   esi
c001b1f6:	53                   	push   ebx
c001b1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1ff:	e8 e4 fe ff ff       	call   c001b0e8 <Reg::readString(char*, char*, char*, int)>
c001b204:	83 c4 10             	add    esp,0x10
c001b207:	84 c0                	test   al,al
c001b209:	75 1b                	jne    c001b226 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b20b:	50                   	push   eax
c001b20c:	56                   	push   esi
c001b20d:	4e                   	dec    esi
c001b20e:	6a 00                	push   0x0
c001b210:	53                   	push   ebx
c001b211:	e8 62 55 fe ff       	call   c0000778 <memset>
c001b216:	83 c4 0c             	add    esp,0xc
c001b219:	56                   	push   esi
c001b21a:	57                   	push   edi
c001b21b:	53                   	push   ebx
c001b21c:	89 fb                	mov    ebx,edi
c001b21e:	e8 21 55 fe ff       	call   c0000744 <memcpy>
c001b223:	83 c4 10             	add    esp,0x10
c001b226:	89 d8                	mov    eax,ebx
c001b228:	5b                   	pop    ebx
c001b229:	5e                   	pop    esi
c001b22a:	5f                   	pop    edi
c001b22b:	c3                   	ret    

c001b22c <Sys::eject(regs*)>:
c001b22c:	83 ec 0c             	sub    esp,0xc
c001b22f:	83 ca ff             	or     edx,0xffffffff
c001b232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b236:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b239:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b23e:	83 e9 41             	sub    ecx,0x41
c001b241:	83 f9 19             	cmp    ecx,0x19
c001b244:	77 18                	ja     c001b25e <Sys::eject(regs*)+0x32>
c001b246:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001b24d:	85 c9                	test   ecx,ecx
c001b24f:	74 0d                	je     c001b25e <Sys::eject(regs*)+0x32>
c001b251:	83 ec 0c             	sub    esp,0xc
c001b254:	51                   	push   ecx
c001b255:	e8 78 b4 ff ff       	call   c00166d2 <LogicalDisk::eject()>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	99                   	cdq    
c001b25e:	83 c4 0c             	add    esp,0xc
c001b261:	c3                   	ret    

c001b262 <Sys::exit(regs*)>:
c001b262:	83 ec 18             	sub    esp,0x18
c001b265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b269:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b26c:	e8 c4 35 00 00       	call   c001e835 <terminateTask(int)>
c001b271:	83 c8 ff             	or     eax,0xffffffff
c001b274:	83 c4 1c             	add    esp,0x1c
c001b277:	89 c2                	mov    edx,eax
c001b279:	c3                   	ret    

c001b27a <Sys::getCwd(regs*)>:
c001b27a:	83 ec 10             	sub    esp,0x10
c001b27d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b281:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b284:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b28c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b28f:	e8 f2 7f ff ff       	call   c0013286 <Fs::getcwd(Process*, char*, int)>
c001b294:	83 c4 1c             	add    esp,0x1c
c001b297:	99                   	cdq    
c001b298:	c3                   	ret    

c001b299 <Sys::getPID(regs*)>:
c001b299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b29e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2a3:	99                   	cdq    
c001b2a4:	c3                   	ret    

c001b2a5 <Sys::getRAMData(regs*)>:
c001b2a5:	8b 0d 34 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e634
c001b2ab:	6b 05 30 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e630,0x64
c001b2b2:	99                   	cdq    
c001b2b3:	f7 f9                	idiv   ecx
c001b2b5:	c1 e0 18             	shl    eax,0x18
c001b2b8:	09 c8                	or     eax,ecx
c001b2ba:	99                   	cdq    
c001b2bb:	c3                   	ret    

c001b2bc <Sys::loadDLL(regs*)>:
c001b2bc:	56                   	push   esi
c001b2bd:	53                   	push   ebx
c001b2be:	31 d2                	xor    edx,edx
c001b2c0:	51                   	push   ecx
c001b2c1:	b8 01 00 00 00       	mov    eax,0x1
c001b2c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2ca:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2ce:	0f 84 8c 00 00 00    	je     c001b360 <Sys::loadDLL(regs*)+0xa4>
c001b2d4:	83 ec 0c             	sub    esp,0xc
c001b2d7:	68 14 01 00 00       	push   0x114
c001b2dc:	e8 5f 45 ff ff       	call   c000f840 <malloc>
c001b2e1:	83 c4 0c             	add    esp,0xc
c001b2e4:	89 c3                	mov    ebx,eax
c001b2e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2f1:	53                   	push   ebx
c001b2f2:	e8 8d 81 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	31 d2                	xor    edx,edx
c001b2fc:	b8 02 00 00 00       	mov    eax,0x2
c001b301:	85 db                	test   ebx,ebx
c001b303:	74 5b                	je     c001b360 <Sys::loadDLL(regs*)+0xa4>
c001b305:	83 ec 0c             	sub    esp,0xc
c001b308:	53                   	push   ebx
c001b309:	e8 48 84 ff ff       	call   c0013756 <File::exists()>
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	84 c0                	test   al,al
c001b313:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b315:	75 11                	jne    c001b328 <Sys::loadDLL(regs*)+0x6c>
c001b317:	83 ec 0c             	sub    esp,0xc
c001b31a:	53                   	push   ebx
c001b31b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b31e:	83 c4 10             	add    esp,0x10
c001b321:	b8 03 00 00 00       	mov    eax,0x3
c001b326:	eb 36                	jmp    c001b35e <Sys::loadDLL(regs*)+0xa2>
c001b328:	83 ec 0c             	sub    esp,0xc
c001b32b:	53                   	push   ebx
c001b32c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b32f:	58                   	pop    eax
c001b330:	5a                   	pop    edx
c001b331:	6a 00                	push   0x0
c001b333:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b336:	e8 0f 24 00 00       	call   c001d74a <Thr::loadDLL(char const*, bool)>
c001b33b:	83 c4 10             	add    esp,0x10
c001b33e:	89 c1                	mov    ecx,eax
c001b340:	31 d2                	xor    edx,edx
c001b342:	b8 04 00 00 00       	mov    eax,0x4
c001b347:	85 c9                	test   ecx,ecx
c001b349:	74 15                	je     c001b360 <Sys::loadDLL(regs*)+0xa4>
c001b34b:	53                   	push   ebx
c001b34c:	53                   	push   ebx
c001b34d:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c001b353:	51                   	push   ecx
c001b354:	e8 25 26 00 00       	call   c001d97e <Thr::executeDLL(unsigned long, void*)>
c001b359:	83 c4 10             	add    esp,0x10
c001b35c:	31 c0                	xor    eax,eax
c001b35e:	31 d2                	xor    edx,edx
c001b360:	59                   	pop    ecx
c001b361:	5b                   	pop    ebx
c001b362:	5e                   	pop    esi
c001b363:	c3                   	ret    

c001b364 <Sys::read(regs*)>:
c001b364:	57                   	push   edi
c001b365:	56                   	push   esi
c001b366:	53                   	push   ebx
c001b367:	83 ec 10             	sub    esp,0x10
c001b36a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b36e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b371:	83 f8 02             	cmp    eax,0x2
c001b374:	77 10                	ja     c001b386 <Sys::read(regs*)+0x22>
c001b376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b37b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b37e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b384:	eb 0e                	jmp    c001b394 <Sys::read(regs*)+0x30>
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	50                   	push   eax
c001b38a:	e8 a6 66 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	89 c1                	mov    ecx,eax
c001b394:	83 c8 ff             	or     eax,0xffffffff
c001b397:	85 c9                	test   ecx,ecx
c001b399:	89 c2                	mov    edx,eax
c001b39b:	74 28                	je     c001b3c5 <Sys::read(regs*)+0x61>
c001b39d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3a5:	31 ff                	xor    edi,edi
c001b3a7:	83 ec 0c             	sub    esp,0xc
c001b3aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3ac:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3b0:	52                   	push   edx
c001b3b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3b4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3b7:	57                   	push   edi
c001b3b8:	56                   	push   esi
c001b3b9:	51                   	push   ecx
c001b3ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3c1:	83 c4 20             	add    esp,0x20
c001b3c4:	99                   	cdq    
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	5b                   	pop    ebx
c001b3c9:	5e                   	pop    esi
c001b3ca:	5f                   	pop    edi
c001b3cb:	c3                   	ret    

c001b3cc <Sys::sbrk(regs*)>:
c001b3cc:	56                   	push   esi
c001b3cd:	53                   	push   ebx
c001b3ce:	83 ec 0c             	sub    esp,0xc
c001b3d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b3d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3dd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b3e3:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b3e6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3e9:	68 89 be 02 c0       	push   0xc002be89
c001b3ee:	e8 39 7b ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b3f3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3f6:	83 c4 10             	add    esp,0x10
c001b3f9:	85 c0                	test   eax,eax
c001b3fb:	75 0a                	jne    c001b407 <Sys::sbrk(regs*)+0x3b>
c001b3fd:	50                   	push   eax
c001b3fe:	50                   	push   eax
c001b3ff:	53                   	push   ebx
c001b400:	68 a5 be 02 c0       	push   0xc002bea5
c001b405:	eb 54                	jmp    c001b45b <Sys::sbrk(regs*)+0x8f>
c001b407:	79 0a                	jns    c001b413 <Sys::sbrk(regs*)+0x47>
c001b409:	56                   	push   esi
c001b40a:	56                   	push   esi
c001b40b:	53                   	push   ebx
c001b40c:	68 b8 be 02 c0       	push   0xc002beb8
c001b411:	eb 48                	jmp    c001b45b <Sys::sbrk(regs*)+0x8f>
c001b413:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b418:	76 17                	jbe    c001b431 <Sys::sbrk(regs*)+0x65>
c001b41a:	51                   	push   ecx
c001b41b:	51                   	push   ecx
c001b41c:	53                   	push   ebx
c001b41d:	68 ca be 02 c0       	push   0xc002beca
c001b422:	e8 05 7b ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b427:	83 c8 ff             	or     eax,0xffffffff
c001b42a:	83 c4 10             	add    esp,0x10
c001b42d:	89 c2                	mov    edx,eax
c001b42f:	eb 36                	jmp    c001b467 <Sys::sbrk(regs*)+0x9b>
c001b431:	05 ff 0f 00 00       	add    eax,0xfff
c001b436:	56                   	push   esi
c001b437:	c1 e8 0c             	shr    eax,0xc
c001b43a:	68 07 04 00 00       	push   0x407
c001b43f:	50                   	push   eax
c001b440:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b445:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b448:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b44e:	e8 0f 70 ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001b453:	58                   	pop    eax
c001b454:	5a                   	pop    edx
c001b455:	53                   	push   ebx
c001b456:	68 e3 be 02 c0       	push   0xc002bee3
c001b45b:	e8 cc 7a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b460:	89 d8                	mov    eax,ebx
c001b462:	31 d2                	xor    edx,edx
c001b464:	83 c4 10             	add    esp,0x10
c001b467:	59                   	pop    ecx
c001b468:	5b                   	pop    ebx
c001b469:	5e                   	pop    esi
c001b46a:	c3                   	ret    

c001b46b <Sys::setCwd(regs*)>:
c001b46b:	83 ec 14             	sub    esp,0x14
c001b46e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b472:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b47a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b47d:	e8 73 83 ff ff       	call   c00137f5 <Fs::setcwd(Process*, char*)>
c001b482:	83 c4 1c             	add    esp,0x1c
c001b485:	99                   	cdq    
c001b486:	c3                   	ret    

c001b487 <Sys::setTime(regs*)>:
c001b487:	55                   	push   ebp
c001b488:	31 d2                	xor    edx,edx
c001b48a:	57                   	push   edi
c001b48b:	bf 18 00 00 00       	mov    edi,0x18
c001b490:	56                   	push   esi
c001b491:	53                   	push   ebx
c001b492:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b497:	83 ec 30             	sub    esp,0x30
c001b49a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b49e:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4a1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4a4:	f7 f3                	div    ebx
c001b4a6:	89 d6                	mov    esi,edx
c001b4a8:	31 d2                	xor    edx,edx
c001b4aa:	f7 f3                	div    ebx
c001b4ac:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4b3:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4b8:	31 d2                	xor    edx,edx
c001b4ba:	f7 f3                	div    ebx
c001b4bc:	31 d2                	xor    edx,edx
c001b4be:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4c3:	f7 f7                	div    edi
c001b4c5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4c8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4cc:	0f b7 cd             	movzx  ecx,bp
c001b4cf:	56                   	push   esi
c001b4d0:	89 c7                	mov    edi,eax
c001b4d2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4d6:	c1 e6 10             	shl    esi,0x10
c001b4d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4dd:	83 e7 1f             	and    edi,0x1f
c001b4e0:	51                   	push   ecx
c001b4e1:	47                   	inc    edi
c001b4e2:	c1 e8 05             	shr    eax,0x5
c001b4e5:	31 d2                	xor    edx,edx
c001b4e7:	f7 f3                	div    ebx
c001b4e9:	31 db                	xor    ebx,ebx
c001b4eb:	52                   	push   edx
c001b4ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4f0:	57                   	push   edi
c001b4f1:	68 09 bf 02 c0       	push   0xc002bf09
c001b4f6:	e8 31 7a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b4fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4ff:	89 f8                	mov    eax,edi
c001b501:	31 c9                	xor    ecx,ecx
c001b503:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b507:	88 c1                	mov    cl,al
c001b509:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b50f:	88 d5                	mov    ch,dl
c001b511:	c1 e0 10             	shl    eax,0x10
c001b514:	0f b7 d1             	movzx  edx,cx
c001b517:	09 c2                	or     edx,eax
c001b519:	89 d8                	mov    eax,ebx
c001b51b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b520:	09 f0                	or     eax,esi
c001b522:	89 c3                	mov    ebx,eax
c001b524:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b528:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b52c:	83 c4 18             	add    esp,0x18
c001b52f:	53                   	push   ebx
c001b530:	52                   	push   edx
c001b531:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b535:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b539:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b53d:	e8 cd 89 ff ff       	call   c0013f0f <datetimeToSeconds(datetime_t)>
c001b542:	83 c4 0c             	add    esp,0xc
c001b545:	52                   	push   edx
c001b546:	50                   	push   eax
c001b547:	56                   	push   esi
c001b548:	e8 49 8b ff ff       	call   c0014096 <secondsToDatetime(unsigned long long)>
c001b54d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b551:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b555:	51                   	push   ecx
c001b556:	89 d6                	mov    esi,edx
c001b558:	51                   	push   ecx
c001b559:	c1 ee 10             	shr    esi,0x10
c001b55c:	89 f3                	mov    ebx,esi
c001b55e:	0f b6 f3             	movzx  esi,bl
c001b561:	56                   	push   esi
c001b562:	0f b6 f6             	movzx  esi,dh
c001b565:	0f b6 d2             	movzx  edx,dl
c001b568:	56                   	push   esi
c001b569:	52                   	push   edx
c001b56a:	89 c2                	mov    edx,eax
c001b56c:	c1 ea 10             	shr    edx,0x10
c001b56f:	52                   	push   edx
c001b570:	0f b6 d4             	movzx  edx,ah
c001b573:	0f b6 c0             	movzx  eax,al
c001b576:	52                   	push   edx
c001b577:	50                   	push   eax
c001b578:	68 25 bf 02 c0       	push   0xc002bf25
c001b57d:	e8 aa 79 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b582:	83 c4 2c             	add    esp,0x2c
c001b585:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001b58a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b58e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b592:	53                   	push   ebx
c001b593:	51                   	push   ecx
c001b594:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b59a:	e8 97 8a ff ff       	call   c0014036 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b59f:	83 f0 01             	xor    eax,0x1
c001b5a2:	31 d2                	xor    edx,edx
c001b5a4:	0f b6 c0             	movzx  eax,al
c001b5a7:	83 c4 3c             	add    esp,0x3c
c001b5aa:	5b                   	pop    ebx
c001b5ab:	5e                   	pop    esi
c001b5ac:	5f                   	pop    edi
c001b5ad:	5d                   	pop    ebp
c001b5ae:	c3                   	ret    

c001b5af <Sys::timezone(regs*)>:
c001b5af:	53                   	push   ebx
c001b5b0:	83 ec 08             	sub    esp,0x8
c001b5b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5b7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5bb:	75 17                	jne    c001b5d4 <Sys::timezone(regs*)+0x25>
c001b5bd:	83 ec 0c             	sub    esp,0xc
c001b5c0:	68 41 bf 02 c0       	push   0xc002bf41
c001b5c5:	e8 62 79 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b5ca:	83 c8 ff             	or     eax,0xffffffff
c001b5cd:	83 c4 10             	add    esp,0x10
c001b5d0:	89 c2                	mov    edx,eax
c001b5d2:	eb 20                	jmp    c001b5f4 <Sys::timezone(regs*)+0x45>
c001b5d4:	83 ec 0c             	sub    esp,0xc
c001b5d7:	68 79 bf 02 c0       	push   0xc002bf79
c001b5dc:	e8 4b 79 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b5e1:	58                   	pop    eax
c001b5e2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5e5:	e8 ae 87 ff ff       	call   c0013d98 <User::loadClockSettings(int)>
c001b5ea:	83 c4 10             	add    esp,0x10
c001b5ed:	b8 01 00 00 00       	mov    eax,0x1
c001b5f2:	31 d2                	xor    edx,edx
c001b5f4:	83 c4 08             	add    esp,0x8
c001b5f7:	5b                   	pop    ebx
c001b5f8:	c3                   	ret    

c001b5f9 <Sys::write(regs*)>:
c001b5f9:	57                   	push   edi
c001b5fa:	56                   	push   esi
c001b5fb:	53                   	push   ebx
c001b5fc:	83 ec 10             	sub    esp,0x10
c001b5ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b603:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b606:	83 f8 02             	cmp    eax,0x2
c001b609:	77 10                	ja     c001b61b <Sys::write(regs*)+0x22>
c001b60b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b610:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b613:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b619:	eb 0e                	jmp    c001b629 <Sys::write(regs*)+0x30>
c001b61b:	83 ec 0c             	sub    esp,0xc
c001b61e:	50                   	push   eax
c001b61f:	e8 11 64 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b624:	83 c4 10             	add    esp,0x10
c001b627:	89 c1                	mov    ecx,eax
c001b629:	83 c8 ff             	or     eax,0xffffffff
c001b62c:	85 c9                	test   ecx,ecx
c001b62e:	89 c2                	mov    edx,eax
c001b630:	74 28                	je     c001b65a <Sys::write(regs*)+0x61>
c001b632:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b63a:	31 ff                	xor    edi,edi
c001b63c:	83 ec 0c             	sub    esp,0xc
c001b63f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b641:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b645:	52                   	push   edx
c001b646:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b649:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b64c:	57                   	push   edi
c001b64d:	56                   	push   esi
c001b64e:	51                   	push   ecx
c001b64f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b652:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b656:	83 c4 20             	add    esp,0x20
c001b659:	99                   	cdq    
c001b65a:	83 c4 10             	add    esp,0x10
c001b65d:	5b                   	pop    ebx
c001b65e:	5e                   	pop    esi
c001b65f:	5f                   	pop    edi
c001b660:	c3                   	ret    

c001b661 <Sys::wsbe(regs*)>:
c001b661:	57                   	push   edi
c001b662:	b9 0b 00 00 00       	mov    ecx,0xb
c001b667:	56                   	push   esi
c001b668:	be b8 bf 02 c0       	mov    esi,0xc002bfb8
c001b66d:	53                   	push   ebx
c001b66e:	83 ec 30             	sub    esp,0x30
c001b671:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b675:	fc                   	cld    
c001b676:	83 ec 0c             	sub    esp,0xc
c001b679:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b67b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b67f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b684:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b687:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b68d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b68f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b692:	57                   	push   edi
c001b693:	e8 fc 50 fe ff       	call   c0000794 <strlen>
c001b698:	5a                   	pop    edx
c001b699:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b69d:	52                   	push   edx
c001b69e:	31 d2                	xor    edx,edx
c001b6a0:	57                   	push   edi
c001b6a1:	52                   	push   edx
c001b6a2:	50                   	push   eax
c001b6a3:	56                   	push   esi
c001b6a4:	ff d3                	call   ebx
c001b6a6:	83 c4 14             	add    esp,0x14
c001b6a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6ad:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6b0:	e8 80 31 00 00       	call   c001e835 <terminateTask(int)>
c001b6b5:	83 c4 40             	add    esp,0x40
c001b6b8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6bd:	5b                   	pop    ebx
c001b6be:	31 d2                	xor    edx,edx
c001b6c0:	5e                   	pop    esi
c001b6c1:	5f                   	pop    edi
c001b6c2:	c3                   	ret    

c001b6c3 <Sys::yield(regs*)>:
c001b6c3:	57                   	push   edi
c001b6c4:	56                   	push   esi
c001b6c5:	53                   	push   ebx
c001b6c6:	e8 27 27 00 00       	call   c001ddf2 <lockScheduler()>
c001b6cb:	e8 5e 2a 00 00       	call   c001e12e <schedule()>
c001b6d0:	e8 1f 27 00 00       	call   c001ddf4 <unlockScheduler()>
c001b6d5:	8b 35 70 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec70
c001b6db:	8b 3d 74 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec74
c001b6e1:	89 f0                	mov    eax,esi
c001b6e3:	89 fb                	mov    ebx,edi
c001b6e5:	89 f1                	mov    ecx,esi
c001b6e7:	c1 e0 07             	shl    eax,0x7
c001b6ea:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6ee:	25 80 30 0f 00       	and    eax,0xf3080
c001b6f3:	c1 eb 17             	shr    ebx,0x17
c001b6f6:	31 c8                	xor    eax,ecx
c001b6f8:	89 da                	mov    edx,ebx
c001b6fa:	5b                   	pop    ebx
c001b6fb:	5e                   	pop    esi
c001b6fc:	5f                   	pop    edi
c001b6fd:	c3                   	ret    

c001b6fe <sysCallSeekDir(regs*)>:
c001b6fe:	31 c0                	xor    eax,eax
c001b700:	31 d2                	xor    edx,edx
c001b702:	c3                   	ret    

c001b703 <sysCallTellDir(regs*)>:
c001b703:	31 c0                	xor    eax,eax
c001b705:	31 d2                	xor    edx,edx
c001b707:	c3                   	ret    

c001b708 <sysCallVerify(regs*)>:
c001b708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b70c:	31 d2                	xor    edx,edx
c001b70e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b711:	c3                   	ret    

c001b712 <sysFormatDisk(regs*)>:
c001b712:	56                   	push   esi
c001b713:	53                   	push   ebx
c001b714:	53                   	push   ebx
c001b715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b719:	8b 1d 6c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e76c
c001b71f:	eb 25                	jmp    c001b746 <sysFormatDisk(regs*)+0x34>
c001b721:	83 ec 0c             	sub    esp,0xc
c001b724:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b727:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b729:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b72c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b72f:	50                   	push   eax
c001b730:	ff 34 85 00 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1400]
c001b737:	53                   	push   ebx
c001b738:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b73b:	83 c4 20             	add    esp,0x20
c001b73e:	83 f8 08             	cmp    eax,0x8
c001b741:	75 12                	jne    c001b755 <sysFormatDisk(regs*)+0x43>
c001b743:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b746:	85 db                	test   ebx,ebx
c001b748:	75 d7                	jne    c001b721 <sysFormatDisk(regs*)+0xf>
c001b74a:	59                   	pop    ecx
c001b74b:	b8 03 00 00 00       	mov    eax,0x3
c001b750:	31 d2                	xor    edx,edx
c001b752:	5b                   	pop    ebx
c001b753:	5e                   	pop    esi
c001b754:	c3                   	ret    
c001b755:	85 c0                	test   eax,eax
c001b757:	74 1b                	je     c001b774 <sysFormatDisk(regs*)+0x62>
c001b759:	83 f8 09             	cmp    eax,0x9
c001b75c:	74 0b                	je     c001b769 <sysFormatDisk(regs*)+0x57>
c001b75e:	59                   	pop    ecx
c001b75f:	b8 02 00 00 00       	mov    eax,0x2
c001b764:	31 d2                	xor    edx,edx
c001b766:	5b                   	pop    ebx
c001b767:	5e                   	pop    esi
c001b768:	c3                   	ret    
c001b769:	59                   	pop    ecx
c001b76a:	b8 01 00 00 00       	mov    eax,0x1
c001b76f:	31 d2                	xor    edx,edx
c001b771:	5b                   	pop    ebx
c001b772:	5e                   	pop    esi
c001b773:	c3                   	ret    
c001b774:	59                   	pop    ecx
c001b775:	31 c0                	xor    eax,eax
c001b777:	31 d2                	xor    edx,edx
c001b779:	5b                   	pop    ebx
c001b77a:	5e                   	pop    esi
c001b77b:	c3                   	ret    

c001b77c <sysSetDiskVolumeLabel(regs*)>:
c001b77c:	56                   	push   esi
c001b77d:	53                   	push   ebx
c001b77e:	53                   	push   ebx
c001b77f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b783:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b786:	83 f8 19             	cmp    eax,0x19
c001b789:	77 29                	ja     c001b7b4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b78b:	8b 0c 85 00 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1400]
c001b792:	85 c9                	test   ecx,ecx
c001b794:	74 1e                	je     c001b7b4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b796:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b799:	85 d2                	test   edx,edx
c001b79b:	74 17                	je     c001b7b4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b79d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7a3:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7a5:	52                   	push   edx
c001b7a6:	50                   	push   eax
c001b7a7:	51                   	push   ecx
c001b7a8:	53                   	push   ebx
c001b7a9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7ac:	83 c4 10             	add    esp,0x10
c001b7af:	99                   	cdq    
c001b7b0:	59                   	pop    ecx
c001b7b1:	5b                   	pop    ebx
c001b7b2:	5e                   	pop    esi
c001b7b3:	c3                   	ret    
c001b7b4:	59                   	pop    ecx
c001b7b5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7bf:	5b                   	pop    ebx
c001b7c0:	5e                   	pop    esi
c001b7c1:	c3                   	ret    

c001b7c2 <sysGetDiskVolumeLabel(regs*)>:
c001b7c2:	57                   	push   edi
c001b7c3:	56                   	push   esi
c001b7c4:	53                   	push   ebx
c001b7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7cc:	83 fa 19             	cmp    edx,0x19
c001b7cf:	77 34                	ja     c001b805 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d1:	8b 0c 95 00 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1400]
c001b7d8:	85 c9                	test   ecx,ecx
c001b7da:	74 29                	je     c001b805 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7dc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7df:	85 db                	test   ebx,ebx
c001b7e1:	74 22                	je     c001b805 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7e3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7e6:	85 c0                	test   eax,eax
c001b7e8:	74 1b                	je     c001b805 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ea:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7f5:	50                   	push   eax
c001b7f6:	53                   	push   ebx
c001b7f7:	52                   	push   edx
c001b7f8:	51                   	push   ecx
c001b7f9:	56                   	push   esi
c001b7fa:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7fd:	83 c4 20             	add    esp,0x20
c001b800:	99                   	cdq    
c001b801:	5b                   	pop    ebx
c001b802:	5e                   	pop    esi
c001b803:	5f                   	pop    edi
c001b804:	c3                   	ret    
c001b805:	5b                   	pop    ebx
c001b806:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b80b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b810:	5e                   	pop    esi
c001b811:	5f                   	pop    edi
c001b812:	c3                   	ret    

c001b813 <sysShutdown(regs*)>:
c001b813:	83 ec 0c             	sub    esp,0xc
c001b816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b81a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b81d:	85 c0                	test   eax,eax
c001b81f:	74 18                	je     c001b839 <sysShutdown(regs*)+0x26>
c001b821:	83 f8 01             	cmp    eax,0x1
c001b824:	74 38                	je     c001b85e <sysShutdown(regs*)+0x4b>
c001b826:	83 f8 02             	cmp    eax,0x2
c001b829:	74 24                	je     c001b84f <sysShutdown(regs*)+0x3c>
c001b82b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b830:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b835:	83 c4 0c             	add    esp,0xc
c001b838:	c3                   	ret    
c001b839:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001b83e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b840:	6a 00                	push   0x0
c001b842:	6a 00                	push   0x0
c001b844:	6a 00                	push   0x0
c001b846:	50                   	push   eax
c001b847:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b84a:	83 c4 10             	add    esp,0x10
c001b84d:	eb dc                	jmp    c001b82b <sysShutdown(regs*)+0x18>
c001b84f:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001b854:	8b 10                	mov    edx,DWORD PTR [eax]
c001b856:	6a 00                	push   0x0
c001b858:	6a 00                	push   0x0
c001b85a:	6a 01                	push   0x1
c001b85c:	eb e8                	jmp    c001b846 <sysShutdown(regs*)+0x33>
c001b85e:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001b863:	85 c0                	test   eax,eax
c001b865:	74 02                	je     c001b869 <sysShutdown(regs*)+0x56>
c001b867:	ff d0                	call   eax
c001b869:	31 c0                	xor    eax,eax
c001b86b:	31 d2                	xor    edx,edx
c001b86d:	83 c4 0c             	add    esp,0xc
c001b870:	c3                   	ret    

c001b871 <sysCallRealpath(regs*)>:
c001b871:	83 ec 0c             	sub    esp,0xc
c001b874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b878:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b87b:	85 d2                	test   edx,edx
c001b87d:	74 07                	je     c001b886 <sysCallRealpath(regs*)+0x15>
c001b87f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b882:	85 c0                	test   eax,eax
c001b884:	75 0b                	jne    c001b891 <sysCallRealpath(regs*)+0x20>
c001b886:	b8 01 00 00 00       	mov    eax,0x1
c001b88b:	31 d2                	xor    edx,edx
c001b88d:	83 c4 0c             	add    esp,0xc
c001b890:	c3                   	ret    
c001b891:	51                   	push   ecx
c001b892:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b898:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b89b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8a1:	51                   	push   ecx
c001b8a2:	52                   	push   edx
c001b8a3:	50                   	push   eax
c001b8a4:	e8 31 7a ff ff       	call   c00132da <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8a9:	83 c4 10             	add    esp,0x10
c001b8ac:	31 c0                	xor    eax,eax
c001b8ae:	31 d2                	xor    edx,edx
c001b8b0:	83 c4 0c             	add    esp,0xc
c001b8b3:	c3                   	ret    

c001b8b4 <sysCallGetArgc(regs*)>:
c001b8b4:	83 ec 14             	sub    esp,0x14
c001b8b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8bf:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8c5:	68 e4 bf 02 c0       	push   0xc002bfe4
c001b8ca:	e8 5d 76 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b8cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8dd:	83 c4 1c             	add    esp,0x1c
c001b8e0:	99                   	cdq    
c001b8e1:	c3                   	ret    

c001b8e2 <sysCallReadDir(regs*)>:
c001b8e2:	53                   	push   ebx
c001b8e3:	83 ec 18             	sub    esp,0x18
c001b8e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8ea:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8ed:	83 f8 02             	cmp    eax,0x2
c001b8f0:	76 53                	jbe    c001b945 <sysCallReadDir(regs*)+0x63>
c001b8f2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8f5:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8fb:	77 4f                	ja     c001b94c <sysCallReadDir(regs*)+0x6a>
c001b8fd:	83 ec 0c             	sub    esp,0xc
c001b900:	50                   	push   eax
c001b901:	e8 2f 61 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b906:	83 c4 10             	add    esp,0x10
c001b909:	85 c0                	test   eax,eax
c001b90b:	74 50                	je     c001b95d <sysCallReadDir(regs*)+0x7b>
c001b90d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b915:	83 ec 0c             	sub    esp,0xc
c001b918:	8b 10                	mov    edx,DWORD PTR [eax]
c001b91a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b91e:	51                   	push   ecx
c001b91f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b922:	6a 00                	push   0x0
c001b924:	68 10 01 00 00       	push   0x110
c001b929:	50                   	push   eax
c001b92a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b92d:	83 c4 20             	add    esp,0x20
c001b930:	85 c0                	test   eax,eax
c001b932:	74 38                	je     c001b96c <sysCallReadDir(regs*)+0x8a>
c001b934:	83 f8 07             	cmp    eax,0x7
c001b937:	74 0c                	je     c001b945 <sysCallReadDir(regs*)+0x63>
c001b939:	b8 02 00 00 00       	mov    eax,0x2
c001b93e:	31 d2                	xor    edx,edx
c001b940:	83 c4 18             	add    esp,0x18
c001b943:	5b                   	pop    ebx
c001b944:	c3                   	ret    
c001b945:	b8 01 00 00 00       	mov    eax,0x1
c001b94a:	eb f2                	jmp    c001b93e <sysCallReadDir(regs*)+0x5c>
c001b94c:	83 ec 08             	sub    esp,0x8
c001b94f:	52                   	push   edx
c001b950:	68 fc c0 02 c0       	push   0xc002c0fc
c001b955:	e8 d2 75 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001b95a:	83 c4 10             	add    esp,0x10
c001b95d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b962:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b967:	83 c4 18             	add    esp,0x18
c001b96a:	5b                   	pop    ebx
c001b96b:	c3                   	ret    
c001b96c:	31 c0                	xor    eax,eax
c001b96e:	eb ce                	jmp    c001b93e <sysCallReadDir(regs*)+0x5c>

c001b970 <sysCallIsATTY(regs*)>:
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b977:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b97a:	83 f8 02             	cmp    eax,0x2
c001b97d:	76 07                	jbe    c001b986 <sysCallIsATTY(regs*)+0x16>
c001b97f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b984:	75 26                	jne    c001b9ac <sysCallIsATTY(regs*)+0x3c>
c001b986:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b98e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b994:	85 c0                	test   eax,eax
c001b996:	74 24                	je     c001b9bc <sysCallIsATTY(regs*)+0x4c>
c001b998:	83 ec 0c             	sub    esp,0xc
c001b99b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b99d:	50                   	push   eax
c001b99e:	ff 12                	call   DWORD PTR [edx]
c001b9a0:	31 d2                	xor    edx,edx
c001b9a2:	0f b6 c0             	movzx  eax,al
c001b9a5:	83 c4 10             	add    esp,0x10
c001b9a8:	83 c4 0c             	add    esp,0xc
c001b9ab:	c3                   	ret    
c001b9ac:	83 ec 0c             	sub    esp,0xc
c001b9af:	50                   	push   eax
c001b9b0:	e8 80 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9b5:	83 c4 10             	add    esp,0x10
c001b9b8:	85 c0                	test   eax,eax
c001b9ba:	75 dc                	jne    c001b998 <sysCallIsATTY(regs*)+0x28>
c001b9bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9c6:	83 c4 0c             	add    esp,0xc
c001b9c9:	c3                   	ret    

c001b9ca <sysCallSeek(regs*)>:
c001b9ca:	53                   	push   ebx
c001b9cb:	83 ec 08             	sub    esp,0x8
c001b9ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9d5:	83 f8 02             	cmp    eax,0x2
c001b9d8:	76 4a                	jbe    c001ba24 <sysCallSeek(regs*)+0x5a>
c001b9da:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9df:	77 32                	ja     c001ba13 <sysCallSeek(regs*)+0x49>
c001b9e1:	83 ec 0c             	sub    esp,0xc
c001b9e4:	50                   	push   eax
c001b9e5:	e8 4b 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9ea:	83 c4 0c             	add    esp,0xc
c001b9ed:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9f0:	31 db                	xor    ebx,ebx
c001b9f2:	53                   	push   ebx
c001b9f3:	51                   	push   ecx
c001b9f4:	50                   	push   eax
c001b9f5:	e8 ac 7b ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001b9fa:	83 c4 10             	add    esp,0x10
c001b9fd:	85 c0                	test   eax,eax
c001b9ff:	0f 95 c0             	setne  al
c001ba02:	31 d2                	xor    edx,edx
c001ba04:	0f b6 c0             	movzx  eax,al
c001ba07:	f7 d8                	neg    eax
c001ba09:	83 d2 00             	adc    edx,0x0
c001ba0c:	83 c4 08             	add    esp,0x8
c001ba0f:	f7 da                	neg    edx
c001ba11:	5b                   	pop    ebx
c001ba12:	c3                   	ret    
c001ba13:	83 ec 08             	sub    esp,0x8
c001ba16:	50                   	push   eax
c001ba17:	68 ef bf 02 c0       	push   0xc002bfef
c001ba1c:	e8 0b 75 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001ba21:	83 c4 10             	add    esp,0x10
c001ba24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba2e:	83 c4 08             	add    esp,0x8
c001ba31:	5b                   	pop    ebx
c001ba32:	c3                   	ret    

c001ba33 <sysCallTell(regs*)>:
c001ba33:	53                   	push   ebx
c001ba34:	83 ec 08             	sub    esp,0x8
c001ba37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba3b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba3e:	83 f8 02             	cmp    eax,0x2
c001ba41:	76 5e                	jbe    c001baa1 <sysCallTell(regs*)+0x6e>
c001ba43:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba48:	77 2d                	ja     c001ba77 <sysCallTell(regs*)+0x44>
c001ba4a:	83 ec 0c             	sub    esp,0xc
c001ba4d:	50                   	push   eax
c001ba4e:	e8 e2 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001ba53:	5a                   	pop    edx
c001ba54:	59                   	pop    ecx
c001ba55:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba58:	50                   	push   eax
c001ba59:	e8 9e 7b ff ff       	call   c00135fc <File::tell(unsigned long long*)>
c001ba5e:	83 c4 10             	add    esp,0x10
c001ba61:	85 c0                	test   eax,eax
c001ba63:	0f 95 c0             	setne  al
c001ba66:	31 d2                	xor    edx,edx
c001ba68:	0f b6 c0             	movzx  eax,al
c001ba6b:	f7 d8                	neg    eax
c001ba6d:	83 d2 00             	adc    edx,0x0
c001ba70:	83 c4 08             	add    esp,0x8
c001ba73:	f7 da                	neg    edx
c001ba75:	5b                   	pop    ebx
c001ba76:	c3                   	ret    
c001ba77:	83 ec 08             	sub    esp,0x8
c001ba7a:	50                   	push   eax
c001ba7b:	68 09 c0 02 c0       	push   0xc002c009
c001ba80:	e8 a7 74 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001ba85:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba88:	83 c4 10             	add    esp,0x10
c001ba8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba98:	31 d2                	xor    edx,edx
c001ba9a:	31 c0                	xor    eax,eax
c001ba9c:	83 c4 08             	add    esp,0x8
c001ba9f:	5b                   	pop    ebx
c001baa0:	c3                   	ret    
c001baa1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baa6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baab:	83 c4 08             	add    esp,0x8
c001baae:	5b                   	pop    ebx
c001baaf:	c3                   	ret    

c001bab0 <sysCallSize(regs*)>:
c001bab0:	53                   	push   ebx
c001bab1:	83 ec 18             	sub    esp,0x18
c001bab4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bab8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001babb:	83 f8 02             	cmp    eax,0x2
c001babe:	76 64                	jbe    c001bb24 <sysCallSize(regs*)+0x74>
c001bac0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bac5:	77 33                	ja     c001bafa <sysCallSize(regs*)+0x4a>
c001bac7:	83 ec 0c             	sub    esp,0xc
c001baca:	50                   	push   eax
c001bacb:	e8 65 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bad0:	83 c4 0c             	add    esp,0xc
c001bad3:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bad7:	52                   	push   edx
c001bad8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001badb:	50                   	push   eax
c001badc:	e8 b3 7c ff ff       	call   c0013794 <File::stat(unsigned long long*, bool*)>
c001bae1:	83 c4 10             	add    esp,0x10
c001bae4:	85 c0                	test   eax,eax
c001bae6:	0f 95 c0             	setne  al
c001bae9:	31 d2                	xor    edx,edx
c001baeb:	0f b6 c0             	movzx  eax,al
c001baee:	f7 d8                	neg    eax
c001baf0:	83 d2 00             	adc    edx,0x0
c001baf3:	83 c4 18             	add    esp,0x18
c001baf6:	f7 da                	neg    edx
c001baf8:	5b                   	pop    ebx
c001baf9:	c3                   	ret    
c001bafa:	83 ec 08             	sub    esp,0x8
c001bafd:	50                   	push   eax
c001bafe:	68 23 c0 02 c0       	push   0xc002c023
c001bb03:	e8 24 74 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001bb08:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb1b:	31 d2                	xor    edx,edx
c001bb1d:	31 c0                	xor    eax,eax
c001bb1f:	83 c4 18             	add    esp,0x18
c001bb22:	5b                   	pop    ebx
c001bb23:	c3                   	ret    
c001bb24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb2e:	83 c4 18             	add    esp,0x18
c001bb31:	5b                   	pop    ebx
c001bb32:	c3                   	ret    

c001bb33 <sysCallSizeFromFilename(regs*)>:
c001bb33:	57                   	push   edi
c001bb34:	56                   	push   esi
c001bb35:	53                   	push   ebx
c001bb36:	83 ec 20             	sub    esp,0x20
c001bb39:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb3d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb40:	83 fb 02             	cmp    ebx,0x2
c001bb43:	0f 86 99 00 00 00    	jbe    c001bbe2 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb49:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb4f:	77 65                	ja     c001bbb6 <sysCallSizeFromFilename(regs*)+0x83>
c001bb51:	83 ec 0c             	sub    esp,0xc
c001bb54:	68 14 01 00 00       	push   0x114
c001bb59:	e8 e2 3c ff ff       	call   c000f840 <malloc>
c001bb5e:	83 c4 0c             	add    esp,0xc
c001bb61:	89 c6                	mov    esi,eax
c001bb63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb68:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb6b:	53                   	push   ebx
c001bb6c:	56                   	push   esi
c001bb6d:	e8 12 79 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001bb72:	83 c4 0c             	add    esp,0xc
c001bb75:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb79:	50                   	push   eax
c001bb7a:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb7d:	56                   	push   esi
c001bb7e:	e8 11 7c ff ff       	call   c0013794 <File::stat(unsigned long long*, bool*)>
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	85 f6                	test   esi,esi
c001bb88:	74 14                	je     c001bb9e <sysCallSizeFromFilename(regs*)+0x6b>
c001bb8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb8e:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb90:	83 ec 0c             	sub    esp,0xc
c001bb93:	56                   	push   esi
c001bb94:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb9e:	85 c0                	test   eax,eax
c001bba0:	0f 95 c0             	setne  al
c001bba3:	31 d2                	xor    edx,edx
c001bba5:	0f b6 c0             	movzx  eax,al
c001bba8:	f7 d8                	neg    eax
c001bbaa:	83 d2 00             	adc    edx,0x0
c001bbad:	83 c4 20             	add    esp,0x20
c001bbb0:	f7 da                	neg    edx
c001bbb2:	5b                   	pop    ebx
c001bbb3:	5e                   	pop    esi
c001bbb4:	5f                   	pop    edi
c001bbb5:	c3                   	ret    
c001bbb6:	83 ec 08             	sub    esp,0x8
c001bbb9:	53                   	push   ebx
c001bbba:	68 23 c0 02 c0       	push   0xc002c023
c001bbbf:	e8 68 73 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001bbc4:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbc7:	83 c4 10             	add    esp,0x10
c001bbca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbd7:	31 d2                	xor    edx,edx
c001bbd9:	83 c4 20             	add    esp,0x20
c001bbdc:	31 c0                	xor    eax,eax
c001bbde:	5b                   	pop    ebx
c001bbdf:	5e                   	pop    esi
c001bbe0:	5f                   	pop    edi
c001bbe1:	c3                   	ret    
c001bbe2:	83 c4 20             	add    esp,0x20
c001bbe5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbea:	5b                   	pop    ebx
c001bbeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbf0:	5e                   	pop    esi
c001bbf1:	5f                   	pop    edi
c001bbf2:	c3                   	ret    

c001bbf3 <sysCallClose(regs*)>:
c001bbf3:	53                   	push   ebx
c001bbf4:	83 ec 08             	sub    esp,0x8
c001bbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbfb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbfe:	83 f8 02             	cmp    eax,0x2
c001bc01:	76 50                	jbe    c001bc53 <sysCallClose(regs*)+0x60>
c001bc03:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc08:	74 58                	je     c001bc62 <sysCallClose(regs*)+0x6f>
c001bc0a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc0f:	74 60                	je     c001bc71 <sysCallClose(regs*)+0x7e>
c001bc11:	77 2f                	ja     c001bc42 <sysCallClose(regs*)+0x4f>
c001bc13:	83 ec 0c             	sub    esp,0xc
c001bc16:	50                   	push   eax
c001bc17:	e8 19 5e ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bc1c:	89 c3                	mov    ebx,eax
c001bc1e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc21:	e8 20 79 ff ff       	call   c0013546 <File::close()>
c001bc26:	83 c4 10             	add    esp,0x10
c001bc29:	85 db                	test   ebx,ebx
c001bc2b:	74 0c                	je     c001bc39 <sysCallClose(regs*)+0x46>
c001bc2d:	83 ec 0c             	sub    esp,0xc
c001bc30:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc32:	53                   	push   ebx
c001bc33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc36:	83 c4 10             	add    esp,0x10
c001bc39:	31 c0                	xor    eax,eax
c001bc3b:	31 d2                	xor    edx,edx
c001bc3d:	83 c4 08             	add    esp,0x8
c001bc40:	5b                   	pop    ebx
c001bc41:	c3                   	ret    
c001bc42:	83 ec 08             	sub    esp,0x8
c001bc45:	50                   	push   eax
c001bc46:	68 20 c1 02 c0       	push   0xc002c120
c001bc4b:	e8 dc 72 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001bc50:	83 c4 10             	add    esp,0x10
c001bc53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc58:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc5d:	83 c4 08             	add    esp,0x8
c001bc60:	5b                   	pop    ebx
c001bc61:	c3                   	ret    
c001bc62:	83 ec 0c             	sub    esp,0xc
c001bc65:	68 3e c0 02 c0       	push   0xc002c03e
c001bc6a:	e8 bd 72 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001bc6f:	eb c5                	jmp    c001bc36 <sysCallClose(regs*)+0x43>
c001bc71:	83 ec 0c             	sub    esp,0xc
c001bc74:	68 4c c0 02 c0       	push   0xc002c04c
c001bc79:	eb ef                	jmp    c001bc6a <sysCallClose(regs*)+0x77>

c001bc7b <sysCallOpenDir(regs*)>:
c001bc7b:	56                   	push   esi
c001bc7c:	53                   	push   ebx
c001bc7d:	53                   	push   ebx
c001bc7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc82:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc85:	85 f6                	test   esi,esi
c001bc87:	74 59                	je     c001bce2 <sysCallOpenDir(regs*)+0x67>
c001bc89:	83 ec 0c             	sub    esp,0xc
c001bc8c:	68 14 01 00 00       	push   0x114
c001bc91:	e8 aa 3b ff ff       	call   c000f840 <malloc>
c001bc96:	83 c4 0c             	add    esp,0xc
c001bc99:	89 c6                	mov    esi,eax
c001bc9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bca3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bca6:	56                   	push   esi
c001bca7:	e8 84 7c ff ff       	call   c0013930 <Directory::Directory(char const*, Process*)>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	85 f6                	test   esi,esi
c001bcb1:	74 2f                	je     c001bce2 <sysCallOpenDir(regs*)+0x67>
c001bcb3:	83 ec 0c             	sub    esp,0xc
c001bcb6:	56                   	push   esi
c001bcb7:	e8 d8 7c ff ff       	call   c0013994 <Directory::open()>
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	85 c0                	test   eax,eax
c001bcc1:	75 1f                	jne    c001bce2 <sysCallOpenDir(regs*)+0x67>
c001bcc3:	83 ec 0c             	sub    esp,0xc
c001bcc6:	56                   	push   esi
c001bcc7:	e8 74 5a ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001bccc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bccf:	83 c4 10             	add    esp,0x10
c001bcd2:	89 02                	mov    DWORD PTR [edx],eax
c001bcd4:	c1 f8 1f             	sar    eax,0x1f
c001bcd7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcda:	31 c0                	xor    eax,eax
c001bcdc:	59                   	pop    ecx
c001bcdd:	31 d2                	xor    edx,edx
c001bcdf:	5b                   	pop    ebx
c001bce0:	5e                   	pop    esi
c001bce1:	c3                   	ret    
c001bce2:	59                   	pop    ecx
c001bce3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bce8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bced:	5b                   	pop    ebx
c001bcee:	5e                   	pop    esi
c001bcef:	c3                   	ret    

c001bcf0 <sysCallCloseDir(regs*)>:
c001bcf0:	53                   	push   ebx
c001bcf1:	83 ec 08             	sub    esp,0x8
c001bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcfb:	83 f8 02             	cmp    eax,0x2
c001bcfe:	76 47                	jbe    c001bd47 <sysCallCloseDir(regs*)+0x57>
c001bd00:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd05:	77 2f                	ja     c001bd36 <sysCallCloseDir(regs*)+0x46>
c001bd07:	83 ec 0c             	sub    esp,0xc
c001bd0a:	50                   	push   eax
c001bd0b:	e8 25 5d ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bd10:	89 c3                	mov    ebx,eax
c001bd12:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd15:	e8 d6 7c ff ff       	call   c00139f0 <Directory::close()>
c001bd1a:	83 c4 10             	add    esp,0x10
c001bd1d:	85 db                	test   ebx,ebx
c001bd1f:	74 0c                	je     c001bd2d <sysCallCloseDir(regs*)+0x3d>
c001bd21:	83 ec 0c             	sub    esp,0xc
c001bd24:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd26:	53                   	push   ebx
c001bd27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd2a:	83 c4 10             	add    esp,0x10
c001bd2d:	31 c0                	xor    eax,eax
c001bd2f:	31 d2                	xor    edx,edx
c001bd31:	83 c4 08             	add    esp,0x8
c001bd34:	5b                   	pop    ebx
c001bd35:	c3                   	ret    
c001bd36:	83 ec 08             	sub    esp,0x8
c001bd39:	50                   	push   eax
c001bd3a:	68 48 c1 02 c0       	push   0xc002c148
c001bd3f:	e8 e8 71 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001bd44:	83 c4 10             	add    esp,0x10
c001bd47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd51:	83 c4 08             	add    esp,0x8
c001bd54:	5b                   	pop    ebx
c001bd55:	c3                   	ret    

c001bd56 <sysCallMakeDir(regs*)>:
c001bd56:	56                   	push   esi
c001bd57:	53                   	push   ebx
c001bd58:	83 ec 10             	sub    esp,0x10
c001bd5b:	68 14 01 00 00       	push   0x114
c001bd60:	e8 db 3a ff ff       	call   c000f840 <malloc>
c001bd65:	83 c4 0c             	add    esp,0xc
c001bd68:	89 c3                	mov    ebx,eax
c001bd6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd6f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd76:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd79:	53                   	push   ebx
c001bd7a:	e8 b1 7b ff ff       	call   c0013930 <Directory::Directory(char const*, Process*)>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	85 db                	test   ebx,ebx
c001bd84:	74 32                	je     c001bdb8 <sysCallMakeDir(regs*)+0x62>
c001bd86:	83 ec 0c             	sub    esp,0xc
c001bd89:	53                   	push   ebx
c001bd8a:	e8 e5 7d ff ff       	call   c0013b74 <Directory::create()>
c001bd8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd92:	89 c6                	mov    esi,eax
c001bd94:	e8 57 7c ff ff       	call   c00139f0 <Directory::close()>
c001bd99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	31 c0                	xor    eax,eax
c001bda6:	59                   	pop    ecx
c001bda7:	85 f6                	test   esi,esi
c001bda9:	5b                   	pop    ebx
c001bdaa:	0f 95 c0             	setne  al
c001bdad:	5e                   	pop    esi
c001bdae:	31 d2                	xor    edx,edx
c001bdb0:	f7 d8                	neg    eax
c001bdb2:	83 d2 00             	adc    edx,0x0
c001bdb5:	f7 da                	neg    edx
c001bdb7:	c3                   	ret    
c001bdb8:	59                   	pop    ecx
c001bdb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdbe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdc3:	5b                   	pop    ebx
c001bdc4:	5e                   	pop    esi
c001bdc5:	c3                   	ret    

c001bdc6 <sysCallWait(regs*)>:
c001bdc6:	83 ec 10             	sub    esp,0x10
c001bdc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdcd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdd0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdd3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdd6:	e8 ce 24 00 00       	call   c001e2a9 <waitTask(int, int*, int)>
c001bddb:	83 c4 1c             	add    esp,0x1c
c001bdde:	99                   	cdq    
c001bddf:	c3                   	ret    

c001bde0 <sysCallNotImpl(regs*)>:
c001bde0:	83 ec 18             	sub    esp,0x18
c001bde3:	68 5a c0 02 c0       	push   0xc002c05a
c001bde8:	e8 e0 e7 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001bded:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdf2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf7:	83 c4 1c             	add    esp,0x1c
c001bdfa:	c3                   	ret    

c001bdfb <sysPanic(regs*)>:
c001bdfb:	83 ec 18             	sub    esp,0x18
c001bdfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be02:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be05:	e8 c3 e7 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001be0a:	c7 04 24 74 c0 02 c0 	mov    DWORD PTR [esp],0xc002c074
c001be11:	e8 b7 e7 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001be16:	b8 01 00 00 00       	mov    eax,0x1
c001be1b:	31 d2                	xor    edx,edx
c001be1d:	83 c4 1c             	add    esp,0x1c
c001be20:	c3                   	ret    

c001be21 <sysCallRmdir(regs*)>:
c001be21:	56                   	push   esi
c001be22:	53                   	push   ebx
c001be23:	83 ec 20             	sub    esp,0x20
c001be26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be2a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be2d:	68 14 01 00 00       	push   0x114
c001be32:	e8 09 3a ff ff       	call   c000f840 <malloc>
c001be37:	83 c4 0c             	add    esp,0xc
c001be3a:	89 c3                	mov    ebx,eax
c001be3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be41:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be44:	56                   	push   esi
c001be45:	53                   	push   ebx
c001be46:	e8 39 76 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001be4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be4e:	e8 0d 78 ff ff       	call   c0013660 <File::unlink()>
c001be53:	83 c4 10             	add    esp,0x10
c001be56:	85 db                	test   ebx,ebx
c001be58:	74 14                	je     c001be6e <sysCallRmdir(regs*)+0x4d>
c001be5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be5e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	53                   	push   ebx
c001be64:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be67:	83 c4 10             	add    esp,0x10
c001be6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be6e:	85 c0                	test   eax,eax
c001be70:	0f 95 c0             	setne  al
c001be73:	31 d2                	xor    edx,edx
c001be75:	0f b6 c0             	movzx  eax,al
c001be78:	f7 d8                	neg    eax
c001be7a:	83 d2 00             	adc    edx,0x0
c001be7d:	83 c4 14             	add    esp,0x14
c001be80:	f7 da                	neg    edx
c001be82:	5b                   	pop    ebx
c001be83:	5e                   	pop    esi
c001be84:	c3                   	ret    

c001be85 <sysCallUnlink(regs*)>:
c001be85:	56                   	push   esi
c001be86:	53                   	push   ebx
c001be87:	83 ec 20             	sub    esp,0x20
c001be8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be8e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be91:	68 14 01 00 00       	push   0x114
c001be96:	e8 a5 39 ff ff       	call   c000f840 <malloc>
c001be9b:	83 c4 0c             	add    esp,0xc
c001be9e:	89 c3                	mov    ebx,eax
c001bea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bea8:	56                   	push   esi
c001bea9:	53                   	push   ebx
c001beaa:	e8 d5 75 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001beaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001beb2:	e8 a9 77 ff ff       	call   c0013660 <File::unlink()>
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	85 db                	test   ebx,ebx
c001bebc:	74 14                	je     c001bed2 <sysCallUnlink(regs*)+0x4d>
c001bebe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bec2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bec4:	83 ec 0c             	sub    esp,0xc
c001bec7:	53                   	push   ebx
c001bec8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bed2:	85 c0                	test   eax,eax
c001bed4:	0f 95 c0             	setne  al
c001bed7:	31 d2                	xor    edx,edx
c001bed9:	0f b6 c0             	movzx  eax,al
c001bedc:	f7 d8                	neg    eax
c001bede:	83 d2 00             	adc    edx,0x0
c001bee1:	83 c4 14             	add    esp,0x14
c001bee4:	f7 da                	neg    edx
c001bee6:	5b                   	pop    ebx
c001bee7:	5e                   	pop    esi
c001bee8:	c3                   	ret    

c001bee9 <sysCallGetArgv(regs*)>:
c001bee9:	83 ec 0c             	sub    esp,0xc
c001beec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bef0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bef3:	85 c0                	test   eax,eax
c001bef5:	78 2b                	js     c001bf22 <sysCallGetArgv(regs*)+0x39>
c001bef7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001befd:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf00:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf06:	7d 1a                	jge    c001bf22 <sysCallGetArgv(regs*)+0x39>
c001bf08:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf0f:	85 c0                	test   eax,eax
c001bf11:	74 17                	je     c001bf2a <sysCallGetArgv(regs*)+0x41>
c001bf13:	83 ec 08             	sub    esp,0x8
c001bf16:	50                   	push   eax
c001bf17:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf1a:	e8 15 49 fe ff       	call   c0000834 <strcpy>
c001bf1f:	83 c4 10             	add    esp,0x10
c001bf22:	31 c0                	xor    eax,eax
c001bf24:	31 d2                	xor    edx,edx
c001bf26:	83 c4 0c             	add    esp,0xc
c001bf29:	c3                   	ret    
c001bf2a:	b8 01 00 00 00       	mov    eax,0x1
c001bf2f:	31 d2                	xor    edx,edx
c001bf31:	83 c4 0c             	add    esp,0xc
c001bf34:	c3                   	ret    

c001bf35 <sysCallTTYName(regs*)>:
c001bf35:	56                   	push   esi
c001bf36:	53                   	push   ebx
c001bf37:	53                   	push   ebx
c001bf38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf3c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf3f:	85 c0                	test   eax,eax
c001bf41:	74 5f                	je     c001bfa2 <sysCallTTYName(regs*)+0x6d>
c001bf43:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf46:	83 f8 02             	cmp    eax,0x2
c001bf49:	77 3e                	ja     c001bf89 <sysCallTTYName(regs*)+0x54>
c001bf4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf53:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf59:	85 db                	test   ebx,ebx
c001bf5b:	74 45                	je     c001bfa2 <sysCallTTYName(regs*)+0x6d>
c001bf5d:	83 ec 0c             	sub    esp,0xc
c001bf60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf62:	53                   	push   ebx
c001bf63:	ff 10                	call   DWORD PTR [eax]
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	84 c0                	test   al,al
c001bf6a:	74 41                	je     c001bfad <sysCallTTYName(regs*)+0x78>
c001bf6c:	83 ec 08             	sub    esp,0x8
c001bf6f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf75:	53                   	push   ebx
c001bf76:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf79:	e8 b6 48 fe ff       	call   c0000834 <strcpy>
c001bf7e:	83 c4 10             	add    esp,0x10
c001bf81:	31 c0                	xor    eax,eax
c001bf83:	59                   	pop    ecx
c001bf84:	31 d2                	xor    edx,edx
c001bf86:	5b                   	pop    ebx
c001bf87:	5e                   	pop    esi
c001bf88:	c3                   	ret    
c001bf89:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf8e:	74 bb                	je     c001bf4b <sysCallTTYName(regs*)+0x16>
c001bf90:	83 ec 0c             	sub    esp,0xc
c001bf93:	50                   	push   eax
c001bf94:	e8 9c 5a ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bf99:	83 c4 10             	add    esp,0x10
c001bf9c:	89 c3                	mov    ebx,eax
c001bf9e:	85 db                	test   ebx,ebx
c001bfa0:	75 bb                	jne    c001bf5d <sysCallTTYName(regs*)+0x28>
c001bfa2:	59                   	pop    ecx
c001bfa3:	b8 01 00 00 00       	mov    eax,0x1
c001bfa8:	31 d2                	xor    edx,edx
c001bfaa:	5b                   	pop    ebx
c001bfab:	5e                   	pop    esi
c001bfac:	c3                   	ret    
c001bfad:	59                   	pop    ecx
c001bfae:	b8 02 00 00 00       	mov    eax,0x2
c001bfb3:	31 d2                	xor    edx,edx
c001bfb5:	5b                   	pop    ebx
c001bfb6:	5e                   	pop    esi
c001bfb7:	c3                   	ret    

c001bfb8 <sysCallUSleep(regs*)>:
c001bfb8:	83 ec 14             	sub    esp,0x14
c001bfbb:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfc4:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfcb:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfce:	01 ca                	add    edx,ecx
c001bfd0:	52                   	push   edx
c001bfd1:	50                   	push   eax
c001bfd2:	e8 6b 23 00 00       	call   c001e342 <nanoSleep(unsigned long long)>
c001bfd7:	31 c0                	xor    eax,eax
c001bfd9:	31 d2                	xor    edx,edx
c001bfdb:	83 c4 1c             	add    esp,0x1c
c001bfde:	c3                   	ret    

c001bfdf <sysCallSpawn(regs*)>:
c001bfdf:	56                   	push   esi
c001bfe0:	53                   	push   ebx
c001bfe1:	53                   	push   ebx
c001bfe2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfe6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfe9:	85 f6                	test   esi,esi
c001bfeb:	75 08                	jne    c001bff5 <sysCallSpawn(regs*)+0x16>
c001bfed:	59                   	pop    ecx
c001bfee:	31 c0                	xor    eax,eax
c001bff0:	31 d2                	xor    edx,edx
c001bff2:	5b                   	pop    ebx
c001bff3:	5e                   	pop    esi
c001bff4:	c3                   	ret    
c001bff5:	83 ec 0c             	sub    esp,0xc
c001bff8:	68 3f 07 00 00       	push   0x73f
c001bffd:	e8 3e 38 ff ff       	call   c000f840 <malloc>
c001c002:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c005:	89 c6                	mov    esi,eax
c001c007:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c00c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c00f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c012:	56                   	push   esi
c001c013:	e8 2a 1a 00 00       	call   c001da42 <Process::Process(char const*, Process*, char**)>
c001c018:	83 c4 20             	add    esp,0x20
c001c01b:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c022:	75 c9                	jne    c001bfed <sysCallSpawn(regs*)+0xe>
c001c024:	83 ec 0c             	sub    esp,0xc
c001c027:	56                   	push   esi
c001c028:	e8 db 1f 00 00       	call   c001e008 <Process::createUserThread()>
c001c02d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	99                   	cdq    
c001c033:	59                   	pop    ecx
c001c034:	5b                   	pop    ebx
c001c035:	5e                   	pop    esi
c001c036:	c3                   	ret    

c001c037 <sysCallGetEnv(regs*)>:
c001c037:	55                   	push   ebp
c001c038:	57                   	push   edi
c001c039:	56                   	push   esi
c001c03a:	53                   	push   ebx
c001c03b:	83 ec 28             	sub    esp,0x28
c001c03e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c042:	68 83 c0 02 c0       	push   0xc002c083
c001c047:	e8 e0 6e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c04c:	5f                   	pop    edi
c001c04d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c050:	5d                   	pop    ebp
c001c051:	53                   	push   ebx
c001c052:	68 b2 c3 02 c0       	push   0xc002c3b2
c001c057:	e8 d0 6e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c05c:	58                   	pop    eax
c001c05d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c060:	5a                   	pop    edx
c001c061:	57                   	push   edi
c001c062:	68 8c c0 02 c0       	push   0xc002c08c
c001c067:	e8 c0 6e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c06c:	59                   	pop    ecx
c001c06d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c072:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c075:	e8 6f e4 ff ff       	call   c001a4e9 <Krnl::getProcessTotalEnvCount(Process*)>
c001c07a:	5a                   	pop    edx
c001c07b:	89 c5                	mov    ebp,eax
c001c07d:	59                   	pop    ecx
c001c07e:	50                   	push   eax
c001c07f:	68 96 c0 02 c0       	push   0xc002c096
c001c084:	e8 a3 6e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c089:	83 c4 10             	add    esp,0x10
c001c08c:	39 ef                	cmp    edi,ebp
c001c08e:	7c 15                	jl     c001c0a5 <sysCallGetEnv(regs*)+0x6e>
c001c090:	85 db                	test   ebx,ebx
c001c092:	75 0c                	jne    c001c0a0 <sysCallGetEnv(regs*)+0x69>
c001c094:	83 c4 1c             	add    esp,0x1c
c001c097:	31 c0                	xor    eax,eax
c001c099:	5b                   	pop    ebx
c001c09a:	31 d2                	xor    edx,edx
c001c09c:	5e                   	pop    esi
c001c09d:	5f                   	pop    edi
c001c09e:	5d                   	pop    ebp
c001c09f:	c3                   	ret    
c001c0a0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0a3:	eb ef                	jmp    c001c094 <sysCallGetEnv(regs*)+0x5d>
c001c0a5:	83 ec 0c             	sub    esp,0xc
c001c0a8:	68 a2 c0 02 c0       	push   0xc002c0a2
c001c0ad:	e8 7a 6e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c0b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0b6:	83 c4 0c             	add    esp,0xc
c001c0b9:	57                   	push   edi
c001c0ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0c0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0c3:	50                   	push   eax
c001c0c4:	e8 40 e4 ff ff       	call   c001a509 <Krnl::getProcessEnvPair(Process*, int)>
c001c0c9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0d1:	68 31 c4 02 c0       	push   0xc002c431
c001c0d6:	e8 51 6e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c0db:	83 c4 10             	add    esp,0x10
c001c0de:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0e1:	85 f6                	test   esi,esi
c001c0e3:	75 47                	jne    c001c12c <sysCallGetEnv(regs*)+0xf5>
c001c0e5:	83 ec 0c             	sub    esp,0xc
c001c0e8:	55                   	push   ebp
c001c0e9:	e8 a6 46 fe ff       	call   c0000794 <strlen>
c001c0ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0f1:	89 c3                	mov    ebx,eax
c001c0f3:	e8 9c 46 fe ff       	call   c0000794 <strlen>
c001c0f8:	5a                   	pop    edx
c001c0f9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0fd:	59                   	pop    ecx
c001c0fe:	50                   	push   eax
c001c0ff:	68 a5 c0 02 c0       	push   0xc002c0a5
c001c104:	e8 23 6e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c109:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c10c:	e8 83 46 fe ff       	call   c0000794 <strlen>
c001c111:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c114:	89 c3                	mov    ebx,eax
c001c116:	e8 79 46 fe ff       	call   c0000794 <strlen>
c001c11b:	83 c4 10             	add    esp,0x10
c001c11e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c122:	83 c4 1c             	add    esp,0x1c
c001c125:	31 d2                	xor    edx,edx
c001c127:	5b                   	pop    ebx
c001c128:	5e                   	pop    esi
c001c129:	5f                   	pop    edi
c001c12a:	5d                   	pop    ebp
c001c12b:	c3                   	ret    
c001c12c:	83 ec 0c             	sub    esp,0xc
c001c12f:	68 4b c4 02 c0       	push   0xc002c44b
c001c134:	e8 f3 6d ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c139:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c13c:	58                   	pop    eax
c001c13d:	5a                   	pop    edx
c001c13e:	55                   	push   ebp
c001c13f:	53                   	push   ebx
c001c140:	e8 ef 46 fe ff       	call   c0000834 <strcpy>
c001c145:	59                   	pop    ecx
c001c146:	5e                   	pop    esi
c001c147:	68 af c0 02 c0       	push   0xc002c0af
c001c14c:	53                   	push   ebx
c001c14d:	e8 22 48 fe ff       	call   c0000974 <strcat>
c001c152:	5d                   	pop    ebp
c001c153:	58                   	pop    eax
c001c154:	57                   	push   edi
c001c155:	53                   	push   ebx
c001c156:	e8 19 48 fe ff       	call   c0000974 <strcat>
c001c15b:	c7 04 24 65 c4 02 c0 	mov    DWORD PTR [esp],0xc002c465
c001c162:	e8 c5 6d ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c167:	83 c4 10             	add    esp,0x10
c001c16a:	e9 25 ff ff ff       	jmp    c001c094 <sysCallGetEnv(regs*)+0x5d>

c001c16f <sysAppSettings(regs*)>:
c001c16f:	53                   	push   ebx
c001c170:	83 ec 08             	sub    esp,0x8
c001c173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c177:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c17a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c180:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c185:	66 3d c0 09          	cmp    ax,0x9c0
c001c189:	75 2f                	jne    c001c1ba <sysAppSettings(regs*)+0x4b>
c001c18b:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c191:	83 e0 1f             	and    eax,0x1f
c001c194:	3c 01                	cmp    al,0x1
c001c196:	74 2e                	je     c001c1c6 <sysAppSettings(regs*)+0x57>
c001c198:	3c 07                	cmp    al,0x7
c001c19a:	0f 84 bd 00 00 00    	je     c001c25d <sysAppSettings(regs*)+0xee>
c001c1a0:	84 c0                	test   al,al
c001c1a2:	0f 84 dc 00 00 00    	je     c001c284 <sysAppSettings(regs*)+0x115>
c001c1a8:	3c 08                	cmp    al,0x8
c001c1aa:	74 6d                	je     c001c219 <sysAppSettings(regs*)+0xaa>
c001c1ac:	0f b6 c0             	movzx  eax,al
c001c1af:	83 c4 08             	add    esp,0x8
c001c1b2:	05 e8 03 00 00       	add    eax,0x3e8
c001c1b7:	5b                   	pop    ebx
c001c1b8:	99                   	cdq    
c001c1b9:	c3                   	ret    
c001c1ba:	b8 01 00 00 00       	mov    eax,0x1
c001c1bf:	31 d2                	xor    edx,edx
c001c1c1:	83 c4 08             	add    esp,0x8
c001c1c4:	5b                   	pop    ebx
c001c1c5:	c3                   	ret    
c001c1c6:	51                   	push   ecx
c001c1c7:	68 00 01 00 00       	push   0x100
c001c1cc:	6a 00                	push   0x0
c001c1ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d6:	83 c0 0c             	add    eax,0xc
c001c1d9:	50                   	push   eax
c001c1da:	e8 99 45 fe ff       	call   c0000778 <memset>
c001c1df:	83 c4 0c             	add    esp,0xc
c001c1e2:	68 ff 00 00 00       	push   0xff
c001c1e7:	53                   	push   ebx
c001c1e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f0:	83 c0 0c             	add    eax,0xc
c001c1f3:	50                   	push   eax
c001c1f4:	e8 4b 45 fe ff       	call   c0000744 <memcpy>
c001c1f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1fe:	5b                   	pop    ebx
c001c1ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c202:	5a                   	pop    edx
c001c203:	8d 50 0c             	lea    edx,[eax+0xc]
c001c206:	52                   	push   edx
c001c207:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c20d:	e8 9e 49 ff ff       	call   c0010bb0 <VgaText::setTitle(char*)>
c001c212:	83 c4 10             	add    esp,0x10
c001c215:	31 c0                	xor    eax,eax
c001c217:	eb a6                	jmp    c001c1bf <sysAppSettings(regs*)+0x50>
c001c219:	83 ec 08             	sub    esp,0x8
c001c21c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c222:	83 e0 0f             	and    eax,0xf
c001c225:	50                   	push   eax
c001c226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c22e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c234:	e8 67 49 ff ff       	call   c0010ba0 <VgaText::setTitleColour(VgaColour)>
c001c239:	58                   	pop    eax
c001c23a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c240:	5a                   	pop    edx
c001c241:	c1 e8 04             	shr    eax,0x4
c001c244:	83 e0 0f             	and    eax,0xf
c001c247:	50                   	push   eax
c001c248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c250:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c256:	e8 35 49 ff ff       	call   c0010b90 <VgaText::setTitleTextColour(VgaColour)>
c001c25b:	eb b5                	jmp    c001c212 <sysAppSettings(regs*)+0xa3>
c001c25d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c262:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c265:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c26b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c271:	c0 e8 06             	shr    al,0x6
c001c274:	83 e0 01             	and    eax,0x1
c001c277:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c27d:	31 c0                	xor    eax,eax
c001c27f:	e9 3b ff ff ff       	jmp    c001c1bf <sysAppSettings(regs*)+0x50>
c001c284:	b8 02 00 00 00       	mov    eax,0x2
c001c289:	e9 31 ff ff ff       	jmp    c001c1bf <sysAppSettings(regs*)+0x50>

c001c28e <sysSetFatAttrib(regs*)>:
c001c28e:	57                   	push   edi
c001c28f:	56                   	push   esi
c001c290:	53                   	push   ebx
c001c291:	83 ec 1c             	sub    esp,0x1c
c001c294:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c298:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c29b:	68 14 01 00 00       	push   0x114
c001c2a0:	e8 9b 35 ff ff       	call   c000f840 <malloc>
c001c2a5:	83 c4 0c             	add    esp,0xc
c001c2a8:	89 c3                	mov    ebx,eax
c001c2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2af:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2b2:	57                   	push   edi
c001c2b3:	53                   	push   ebx
c001c2b4:	e8 cb 71 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001c2b9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2bc:	83 c4 0c             	add    esp,0xc
c001c2bf:	0f b6 d4             	movzx  edx,ah
c001c2c2:	0f b6 c0             	movzx  eax,al
c001c2c5:	52                   	push   edx
c001c2c6:	50                   	push   eax
c001c2c7:	53                   	push   ebx
c001c2c8:	e8 2d 74 ff ff       	call   c00136fa <File::chfatattr(unsigned char, unsigned char)>
c001c2cd:	83 c4 10             	add    esp,0x10
c001c2d0:	85 db                	test   ebx,ebx
c001c2d2:	74 14                	je     c001c2e8 <sysSetFatAttrib(regs*)+0x5a>
c001c2d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2da:	83 ec 0c             	sub    esp,0xc
c001c2dd:	53                   	push   ebx
c001c2de:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2e8:	85 c0                	test   eax,eax
c001c2ea:	0f 95 c0             	setne  al
c001c2ed:	31 d2                	xor    edx,edx
c001c2ef:	0f b6 c0             	movzx  eax,al
c001c2f2:	f7 d8                	neg    eax
c001c2f4:	83 d2 00             	adc    edx,0x0
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	f7 da                	neg    edx
c001c2fc:	5b                   	pop    ebx
c001c2fd:	5e                   	pop    esi
c001c2fe:	5f                   	pop    edi
c001c2ff:	c3                   	ret    

c001c300 <sysPipe(regs*)>:
c001c300:	57                   	push   edi
c001c301:	56                   	push   esi
c001c302:	53                   	push   ebx
c001c303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c307:	83 ec 0c             	sub    esp,0xc
c001c30a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c30d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c310:	6a 20                	push   0x20
c001c312:	e8 29 35 ff ff       	call   c000f840 <malloc>
c001c317:	89 c3                	mov    ebx,eax
c001c319:	58                   	pop    eax
c001c31a:	5a                   	pop    edx
c001c31b:	68 00 50 00 00       	push   0x5000
c001c320:	53                   	push   ebx
c001c321:	e8 ba 41 ff ff       	call   c00104e0 <Pipe::Pipe(int)>
c001c326:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c329:	e8 12 54 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c32e:	89 07                	mov    DWORD PTR [edi],eax
c001c330:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c333:	e8 08 54 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c338:	83 c4 10             	add    esp,0x10
c001c33b:	89 06                	mov    DWORD PTR [esi],eax
c001c33d:	31 d2                	xor    edx,edx
c001c33f:	5b                   	pop    ebx
c001c340:	31 c0                	xor    eax,eax
c001c342:	5e                   	pop    esi
c001c343:	5f                   	pop    edi
c001c344:	c3                   	ret    

c001c345 <sysGetUnixTime(regs*)>:
c001c345:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001c34a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c354:	e9 15 7b ff ff       	jmp    c0013e6e <Clock::timeInSecondsLocal()>

c001c359 <string_ends_with(char const*, char const*)>:
c001c359:	57                   	push   edi
c001c35a:	56                   	push   esi
c001c35b:	53                   	push   ebx
c001c35c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c360:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c364:	83 ec 0c             	sub    esp,0xc
c001c367:	53                   	push   ebx
c001c368:	e8 27 44 fe ff       	call   c0000794 <strlen>
c001c36d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c370:	89 c6                	mov    esi,eax
c001c372:	e8 1d 44 fe ff       	call   c0000794 <strlen>
c001c377:	83 c4 10             	add    esp,0x10
c001c37a:	39 c6                	cmp    esi,eax
c001c37c:	7d 06                	jge    c001c384 <string_ends_with(char const*, char const*)+0x2b>
c001c37e:	5b                   	pop    ebx
c001c37f:	31 c0                	xor    eax,eax
c001c381:	5e                   	pop    esi
c001c382:	5f                   	pop    edi
c001c383:	c3                   	ret    
c001c384:	83 ec 08             	sub    esp,0x8
c001c387:	29 c6                	sub    esi,eax
c001c389:	57                   	push   edi
c001c38a:	01 f3                	add    ebx,esi
c001c38c:	53                   	push   ebx
c001c38d:	e8 2e 45 fe ff       	call   c00008c0 <strcmp>
c001c392:	83 c4 10             	add    esp,0x10
c001c395:	85 c0                	test   eax,eax
c001c397:	5b                   	pop    ebx
c001c398:	0f 94 c0             	sete   al
c001c39b:	5e                   	pop    esi
c001c39c:	0f b6 c0             	movzx  eax,al
c001c39f:	5f                   	pop    edi
c001c3a0:	c3                   	ret    

c001c3a1 <sysCallOpen(regs*)>:
c001c3a1:	56                   	push   esi
c001c3a2:	53                   	push   ebx
c001c3a3:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3a9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3b0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3b3:	85 c9                	test   ecx,ecx
c001c3b5:	0f 84 b3 00 00 00    	je     c001c46e <sysCallOpen(regs*)+0xcd>
c001c3bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3be:	85 c0                	test   eax,eax
c001c3c0:	0f 84 a8 00 00 00    	je     c001c46e <sysCallOpen(regs*)+0xcd>
c001c3c6:	52                   	push   edx
c001c3c7:	68 b1 c0 02 c0       	push   0xc002c0b1
c001c3cc:	50                   	push   eax
c001c3cd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3d1:	56                   	push   esi
c001c3d2:	e8 03 6f ff ff       	call   c00132da <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3d7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3da:	e8 b5 43 fe ff       	call   c0000794 <strlen>
c001c3df:	83 c4 10             	add    esp,0x10
c001c3e2:	48                   	dec    eax
c001c3e3:	74 1d                	je     c001c402 <sysCallOpen(regs*)+0x61>
c001c3e5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3e8:	eb 0f                	jmp    c001c3f9 <sysCallOpen(regs*)+0x58>
c001c3ea:	80 fa 3a             	cmp    dl,0x3a
c001c3ed:	74 0f                	je     c001c3fe <sysCallOpen(regs*)+0x5d>
c001c3ef:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3f3:	48                   	dec    eax
c001c3f4:	74 0c                	je     c001c402 <sysCallOpen(regs*)+0x61>
c001c3f6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3f9:	80 fa 2e             	cmp    dl,0x2e
c001c3fc:	75 ec                	jne    c001c3ea <sysCallOpen(regs*)+0x49>
c001c3fe:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c402:	83 ec 08             	sub    esp,0x8
c001c405:	68 b5 c0 02 c0       	push   0xc002c0b5
c001c40a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c40d:	e8 47 ff ff ff       	call   c001c359 <string_ends_with(char const*, char const*)>
c001c412:	83 c4 10             	add    esp,0x10
c001c415:	85 c0                	test   eax,eax
c001c417:	75 17                	jne    c001c430 <sysCallOpen(regs*)+0x8f>
c001c419:	83 ec 08             	sub    esp,0x8
c001c41c:	68 d6 c0 02 c0       	push   0xc002c0d6
c001c421:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c424:	e8 30 ff ff ff       	call   c001c359 <string_ends_with(char const*, char const*)>
c001c429:	83 c4 10             	add    esp,0x10
c001c42c:	85 c0                	test   eax,eax
c001c42e:	74 51                	je     c001c481 <sysCallOpen(regs*)+0xe0>
c001c430:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c433:	83 ec 08             	sub    esp,0x8
c001c436:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c43c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c443:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c446:	ff 30                	push   DWORD PTR [eax]
c001c448:	68 ba c0 02 c0       	push   0xc002c0ba
c001c44d:	e8 da 6a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c452:	c7 04 24 c9 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0c9
c001c459:	e8 ce 6a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c45e:	83 c4 10             	add    esp,0x10
c001c461:	81 c4 04 01 00 00    	add    esp,0x104
c001c467:	31 c0                	xor    eax,eax
c001c469:	31 d2                	xor    edx,edx
c001c46b:	5b                   	pop    ebx
c001c46c:	5e                   	pop    esi
c001c46d:	c3                   	ret    
c001c46e:	81 c4 04 01 00 00    	add    esp,0x104
c001c474:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c479:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c47e:	5b                   	pop    ebx
c001c47f:	5e                   	pop    esi
c001c480:	c3                   	ret    
c001c481:	83 ec 08             	sub    esp,0x8
c001c484:	68 b6 c0 02 c0       	push   0xc002c0b6
c001c489:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c48c:	e8 2f 44 fe ff       	call   c00008c0 <strcmp>
c001c491:	83 c4 10             	add    esp,0x10
c001c494:	85 c0                	test   eax,eax
c001c496:	74 98                	je     c001c430 <sysCallOpen(regs*)+0x8f>
c001c498:	83 ec 08             	sub    esp,0x8
c001c49b:	68 b5 c0 02 c0       	push   0xc002c0b5
c001c4a0:	56                   	push   esi
c001c4a1:	e8 b3 fe ff ff       	call   c001c359 <string_ends_with(char const*, char const*)>
c001c4a6:	83 c4 10             	add    esp,0x10
c001c4a9:	85 c0                	test   eax,eax
c001c4ab:	75 83                	jne    c001c430 <sysCallOpen(regs*)+0x8f>
c001c4ad:	83 ec 08             	sub    esp,0x8
c001c4b0:	68 db c0 02 c0       	push   0xc002c0db
c001c4b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4b8:	e8 9c fe ff ff       	call   c001c359 <string_ends_with(char const*, char const*)>
c001c4bd:	83 c4 10             	add    esp,0x10
c001c4c0:	85 c0                	test   eax,eax
c001c4c2:	0f 85 d9 00 00 00    	jne    c001c5a1 <sysCallOpen(regs*)+0x200>
c001c4c8:	83 ec 08             	sub    esp,0x8
c001c4cb:	68 e0 c0 02 c0       	push   0xc002c0e0
c001c4d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4d3:	e8 81 fe ff ff       	call   c001c359 <string_ends_with(char const*, char const*)>
c001c4d8:	83 c4 10             	add    esp,0x10
c001c4db:	85 c0                	test   eax,eax
c001c4dd:	0f 85 be 00 00 00    	jne    c001c5a1 <sysCallOpen(regs*)+0x200>
c001c4e3:	83 ec 08             	sub    esp,0x8
c001c4e6:	68 dc c0 02 c0       	push   0xc002c0dc
c001c4eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ee:	e8 cd 43 fe ff       	call   c00008c0 <strcmp>
c001c4f3:	83 c4 10             	add    esp,0x10
c001c4f6:	85 c0                	test   eax,eax
c001c4f8:	0f 84 a3 00 00 00    	je     c001c5a1 <sysCallOpen(regs*)+0x200>
c001c4fe:	83 ec 08             	sub    esp,0x8
c001c501:	68 db c0 02 c0       	push   0xc002c0db
c001c506:	56                   	push   esi
c001c507:	e8 4d fe ff ff       	call   c001c359 <string_ends_with(char const*, char const*)>
c001c50c:	83 c4 10             	add    esp,0x10
c001c50f:	85 c0                	test   eax,eax
c001c511:	0f 85 8a 00 00 00    	jne    c001c5a1 <sysCallOpen(regs*)+0x200>
c001c517:	83 ec 0c             	sub    esp,0xc
c001c51a:	68 14 01 00 00       	push   0x114
c001c51f:	e8 1c 33 ff ff       	call   c000f840 <malloc>
c001c524:	83 c4 0c             	add    esp,0xc
c001c527:	89 c6                	mov    esi,eax
c001c529:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c52e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c531:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c534:	56                   	push   esi
c001c535:	e8 4a 6f ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	85 f6                	test   esi,esi
c001c53f:	0f 84 29 ff ff ff    	je     c001c46e <sysCallOpen(regs*)+0xcd>
c001c545:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c548:	0f b6 c2             	movzx  eax,dl
c001c54b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c54e:	89 d0                	mov    eax,edx
c001c550:	83 e0 01             	and    eax,0x1
c001c553:	f6 c2 02             	test   dl,0x2
c001c556:	74 03                	je     c001c55b <sysCallOpen(regs*)+0x1ba>
c001c558:	83 c8 02             	or     eax,0x2
c001c55b:	f6 c2 04             	test   dl,0x4
c001c55e:	74 03                	je     c001c563 <sysCallOpen(regs*)+0x1c2>
c001c560:	83 c8 04             	or     eax,0x4
c001c563:	f6 c2 08             	test   dl,0x8
c001c566:	74 03                	je     c001c56b <sysCallOpen(regs*)+0x1ca>
c001c568:	83 c8 0a             	or     eax,0xa
c001c56b:	83 e2 10             	and    edx,0x10
c001c56e:	74 03                	je     c001c573 <sysCallOpen(regs*)+0x1d2>
c001c570:	83 c8 12             	or     eax,0x12
c001c573:	83 ec 08             	sub    esp,0x8
c001c576:	50                   	push   eax
c001c577:	56                   	push   esi
c001c578:	e8 6b 6f ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001c57d:	83 c4 10             	add    esp,0x10
c001c580:	85 c0                	test   eax,eax
c001c582:	0f 85 e6 fe ff ff    	jne    c001c46e <sysCallOpen(regs*)+0xcd>
c001c588:	83 ec 0c             	sub    esp,0xc
c001c58b:	56                   	push   esi
c001c58c:	e8 af 51 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c591:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c594:	89 02                	mov    DWORD PTR [edx],eax
c001c596:	c1 f8 1f             	sar    eax,0x1f
c001c599:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c59c:	e9 bd fe ff ff       	jmp    c001c45e <sysCallOpen(regs*)+0xbd>
c001c5a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5a4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5b1:	e9 ab fe ff ff       	jmp    c001c461 <sysCallOpen(regs*)+0xc0>

c001c5b6 <Sys::loadSyscalls()>:
c001c5b6:	c7 05 60 11 03 c0 c3 b6 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001b6c3
c001c5c0:	c7 05 64 11 03 c0 62 b2 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001b262
c001c5ca:	c7 05 68 11 03 c0 cc b3 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001b3cc
c001c5d4:	c7 05 6c 11 03 c0 f9 b5 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b5f9
c001c5de:	c7 05 70 11 03 c0 64 b3 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001b364
c001c5e8:	c7 05 74 11 03 c0 99 b2 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b299
c001c5f2:	c7 05 78 11 03 c0 7a b2 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001b27a
c001c5fc:	c7 05 7c 11 03 c0 6b b4 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001b46b
c001c606:	c7 05 84 11 03 c0 f3 bb 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001bbf3
c001c610:	c7 05 80 11 03 c0 a1 c3 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001c3a1
c001c61a:	c7 05 88 11 03 c0 7b bc 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001bc7b
c001c624:	c7 05 8c 11 03 c0 e2 b8 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b8e2
c001c62e:	c7 05 90 11 03 c0 fe b6 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001b6fe
c001c638:	c7 05 94 11 03 c0 03 b7 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b703
c001c642:	c7 05 98 11 03 c0 56 bd 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001bd56
c001c64c:	c7 05 9c 11 03 c0 f0 bc 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001bcf0
c001c656:	c7 05 a0 11 03 c0 ca b9 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001b9ca
c001c660:	c7 05 a4 11 03 c0 33 ba 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001ba33
c001c66a:	c7 05 a8 11 03 c0 b0 ba 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001bab0
c001c674:	c7 05 ac 11 03 c0 08 b7 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b708
c001c67e:	c7 05 b0 11 03 c0 c6 bd 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001bdc6
c001c688:	c7 05 b4 11 03 c0 e0 bd 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001bde0
c001c692:	c7 05 b8 11 03 c0 e0 bd 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001bde0
c001c69c:	c7 05 bc 11 03 c0 21 be 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001be21
c001c6a6:	c7 05 c0 11 03 c0 85 be 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001be85
c001c6b0:	c7 05 c4 11 03 c0 b4 b8 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001b8b4
c001c6ba:	c7 05 c8 11 03 c0 e9 be 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001bee9
c001c6c4:	c7 05 cc 11 03 c0 71 b8 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b871
c001c6ce:	c7 05 d0 11 03 c0 35 bf 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001bf35
c001c6d8:	c7 05 d4 11 03 c0 70 b9 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b970
c001c6e2:	c7 05 d8 11 03 c0 b8 bf 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001bfb8
c001c6ec:	c7 05 dc 11 03 c0 33 bb 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001bb33
c001c6f6:	c7 05 e0 11 03 c0 df bf 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001bfdf
c001c700:	c7 05 e4 11 03 c0 37 c0 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001c037
c001c70a:	c7 05 e8 11 03 c0 6f c1 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001c16f
c001c714:	c7 05 ec 11 03 c0 12 b7 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b712
c001c71e:	c7 05 f0 11 03 c0 7c b7 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b77c
c001c728:	c7 05 f4 11 03 c0 c2 b7 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b7c2
c001c732:	c7 05 f8 11 03 c0 8e c2 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001c28e
c001c73c:	c7 05 fc 11 03 c0 fb bd 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001bdfb
c001c746:	c7 05 00 12 03 c0 13 b8 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001b813
c001c750:	c7 05 04 12 03 c0 00 c3 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001c300
c001c75a:	c7 05 08 12 03 c0 45 c3 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001c345
c001c764:	c7 05 0c 12 03 c0 bc b2 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b2bc
c001c76e:	c7 05 10 12 03 c0 87 b4 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001b487
c001c778:	c7 05 14 12 03 c0 af b5 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001b5af
c001c782:	c7 05 18 12 03 c0 2c b2 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001b22c
c001c78c:	c7 05 1c 12 03 c0 61 b6 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001b661
c001c796:	c7 05 20 12 03 c0 a5 b2 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001b2a5
c001c7a0:	c3                   	ret    

c001c7a1 <Sys::systemCall(regs*, void*)>:
c001c7a1:	53                   	push   ebx
c001c7a2:	83 ec 08             	sub    esp,0x8
c001c7a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7ac:	83 f8 7f             	cmp    eax,0x7f
c001c7af:	77 16                	ja     c001c7c7 <Sys::systemCall(regs*, void*)+0x26>
c001c7b1:	8b 14 85 60 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceea0]
c001c7b8:	85 d2                	test   edx,edx
c001c7ba:	74 0b                	je     c001c7c7 <Sys::systemCall(regs*, void*)+0x26>
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	53                   	push   ebx
c001c7c0:	ff d2                	call   edx
c001c7c2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7c5:	eb 0d                	jmp    c001c7d4 <Sys::systemCall(regs*, void*)+0x33>
c001c7c7:	52                   	push   edx
c001c7c8:	52                   	push   edx
c001c7c9:	50                   	push   eax
c001c7ca:	68 e5 c0 02 c0       	push   0xc002c0e5
c001c7cf:	e8 58 67 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c7d4:	83 c4 10             	add    esp,0x10
c001c7d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7dc:	31 d2                	xor    edx,edx
c001c7de:	83 c4 08             	add    esp,0x8
c001c7e1:	5b                   	pop    ebx
c001c7e2:	c3                   	ret    

c001c7e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7e3:	55                   	push   ebp
c001c7e4:	57                   	push   edi
c001c7e5:	56                   	push   esi
c001c7e6:	53                   	push   ebx
c001c7e7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7ed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7f4:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7fb:	85 c0                	test   eax,eax
c001c7fd:	0f 95 c1             	setne  cl
c001c800:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c808:	0f 94 c2             	sete   dl
c001c80b:	84 d1                	test   cl,dl
c001c80d:	74 23                	je     c001c832 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c80f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c815:	74 1b                	je     c001c832 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c817:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c81d:	89 da                	mov    edx,ebx
c001c81f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c825:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c82b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c832:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c839:	05 ff 0f 00 00       	add    eax,0xfff
c001c83e:	83 ec 0c             	sub    esp,0xc
c001c841:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c845:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c84b:	c1 e8 0c             	shr    eax,0xc
c001c84e:	89 ef                	mov    edi,ebp
c001c850:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c854:	c1 ef 0c             	shr    edi,0xc
c001c857:	6a 01                	push   0x1
c001c859:	e8 2d 53 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001c85e:	89 c6                	mov    esi,eax
c001c860:	58                   	pop    eax
c001c861:	5a                   	pop    edx
c001c862:	57                   	push   edi
c001c863:	68 6b c1 02 c0       	push   0xc002c16b
c001c868:	e8 bf 66 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c86d:	59                   	pop    ecx
c001c86e:	58                   	pop    eax
c001c86f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c873:	68 7d c1 02 c0       	push   0xc002c17d
c001c878:	e8 af 66 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c87d:	83 c4 10             	add    esp,0x10
c001c880:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c886:	0f 86 24 01 00 00    	jbe    c001c9b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c88c:	c1 e7 0c             	shl    edi,0xc
c001c88f:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c892:	89 df                	mov    edi,ebx
c001c894:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c898:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c89f:	01 dd                	add    ebp,ebx
c001c8a1:	29 fd                	sub    ebp,edi
c001c8a3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8a7:	0f 84 01 01 00 00    	je     c001c9ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8ad:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8b3:	76 05                	jbe    c001c8ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8b5:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8ba:	83 ec 0c             	sub    esp,0xc
c001c8bd:	31 d2                	xor    edx,edx
c001c8bf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8cc:	50                   	push   eax
c001c8cd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8d1:	50                   	push   eax
c001c8d2:	52                   	push   edx
c001c8d3:	55                   	push   ebp
c001c8d4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8de:	83 c4 20             	add    esp,0x20
c001c8e1:	85 c0                	test   eax,eax
c001c8e3:	74 0a                	je     c001c8ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8e5:	53                   	push   ebx
c001c8e6:	53                   	push   ebx
c001c8e7:	50                   	push   eax
c001c8e8:	68 8f c1 02 c0       	push   0xc002c18f
c001c8ed:	eb 0f                	jmp    c001c8fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8ef:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8f3:	74 20                	je     c001c915 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8f5:	51                   	push   ecx
c001c8f6:	51                   	push   ecx
c001c8f7:	6a 00                	push   0x0
c001c8f9:	68 ba c1 02 c0       	push   0xc002c1ba
c001c8fe:	e8 29 66 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001c903:	89 34 24             	mov    DWORD PTR [esp],esi
c001c906:	e8 f0 56 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	31 c0                	xor    eax,eax
c001c910:	e9 55 01 00 00       	jmp    c001ca6a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c915:	e8 d8 14 00 00       	call   c001ddf2 <lockScheduler()>
c001c91a:	e8 c3 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c91f:	6a 07                	push   0x7
c001c921:	89 c5                	mov    ebp,eax
c001c923:	56                   	push   esi
c001c924:	50                   	push   eax
c001c925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c92a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c92d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c933:	e8 2a 5a ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c938:	83 c4 0c             	add    esp,0xc
c001c93b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c942:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c948:	6a 00                	push   0x0
c001c94a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c94f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c952:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c958:	e8 6f 58 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c95d:	58                   	pop    eax
c001c95e:	5a                   	pop    edx
c001c95f:	68 07 0c 00 00       	push   0xc07
c001c964:	57                   	push   edi
c001c965:	81 c7 00 10 00 00    	add    edi,0x1000
c001c96b:	55                   	push   ebp
c001c96c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c973:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c979:	6a 00                	push   0x0
c001c97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c980:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c983:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c989:	e8 8e 5d ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c98e:	83 c4 1c             	add    esp,0x1c
c001c991:	68 00 10 00 00       	push   0x1000
c001c996:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c99a:	50                   	push   eax
c001c99b:	56                   	push   esi
c001c99c:	e8 a3 3d fe ff       	call   c0000744 <memcpy>
c001c9a1:	e8 4e 14 00 00       	call   c001ddf4 <unlockScheduler()>
c001c9a6:	83 c4 10             	add    esp,0x10
c001c9a9:	e9 ea fe ff ff       	jmp    c001c898 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9ae:	89 fb                	mov    ebx,edi
c001c9b0:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9b8:	0f 86 9e 00 00 00    	jbe    c001ca5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9be:	e8 2f 14 00 00       	call   c001ddf2 <lockScheduler()>
c001c9c3:	51                   	push   ecx
c001c9c4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9cb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d1:	6a 00                	push   0x0
c001c9d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9db:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e1:	e8 e6 57 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c9e6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9ea:	c1 e7 0c             	shl    edi,0xc
c001c9ed:	01 df                	add    edi,ebx
c001c9ef:	83 c4 10             	add    esp,0x10
c001c9f2:	39 fb                	cmp    ebx,edi
c001c9f4:	74 61                	je     c001ca57 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9f6:	e8 e7 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9fb:	6a 07                	push   0x7
c001c9fd:	89 c5                	mov    ebp,eax
c001c9ff:	56                   	push   esi
c001ca00:	50                   	push   eax
c001ca01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca09:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca0f:	e8 4e 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca14:	58                   	pop    eax
c001ca15:	5a                   	pop    edx
c001ca16:	68 07 0c 00 00       	push   0xc07
c001ca1b:	53                   	push   ebx
c001ca1c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca22:	55                   	push   ebp
c001ca23:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca2a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca30:	6a 00                	push   0x0
c001ca32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca37:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca3a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca40:	e8 d7 5c ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca45:	83 c4 1c             	add    esp,0x1c
c001ca48:	68 00 10 00 00       	push   0x1000
c001ca4d:	6a 00                	push   0x0
c001ca4f:	56                   	push   esi
c001ca50:	e8 23 3d fe ff       	call   c0000778 <memset>
c001ca55:	eb 98                	jmp    c001c9ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca57:	e8 98 13 00 00       	call   c001ddf4 <unlockScheduler()>
c001ca5c:	83 ec 0c             	sub    esp,0xc
c001ca5f:	56                   	push   esi
c001ca60:	e8 96 55 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001ca65:	83 c4 10             	add    esp,0x10
c001ca68:	b0 01                	mov    al,0x1
c001ca6a:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca70:	5b                   	pop    ebx
c001ca71:	5e                   	pop    esi
c001ca72:	5f                   	pop    edi
c001ca73:	5d                   	pop    ebp
c001ca74:	c3                   	ret    

c001ca75 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca75:	55                   	push   ebp
c001ca76:	57                   	push   edi
c001ca77:	56                   	push   esi
c001ca78:	53                   	push   ebx
c001ca79:	83 ec 48             	sub    esp,0x48
c001ca7c:	68 14 01 00 00       	push   0x114
c001ca81:	e8 ba 2d ff ff       	call   c000f840 <malloc>
c001ca86:	83 c4 0c             	add    esp,0xc
c001ca89:	89 c6                	mov    esi,eax
c001ca8b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca93:	50                   	push   eax
c001ca94:	e8 eb 69 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001ca99:	58                   	pop    eax
c001ca9a:	5a                   	pop    edx
c001ca9b:	6a 01                	push   0x1
c001ca9d:	56                   	push   esi
c001ca9e:	e8 45 6a ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	85 c0                	test   eax,eax
c001caa8:	0f 85 47 01 00 00    	jne    c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caae:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cab6:	83 ec 0c             	sub    esp,0xc
c001cab9:	6a 34                	push   0x34
c001cabb:	e8 80 2d ff ff       	call   c000f840 <malloc>
c001cac0:	89 c3                	mov    ebx,eax
c001cac2:	58                   	pop    eax
c001cac3:	8b 06                	mov    eax,DWORD PTR [esi]
c001cac5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cac9:	57                   	push   edi
c001caca:	53                   	push   ebx
c001cacb:	6a 00                	push   0x0
c001cacd:	6a 34                	push   0x34
c001cacf:	56                   	push   esi
c001cad0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cad3:	83 c4 20             	add    esp,0x20
c001cad6:	85 c0                	test   eax,eax
c001cad8:	0f 85 17 01 00 00    	jne    c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cade:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cae4:	0f 85 0b 01 00 00    	jne    c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001caed:	85 c0                	test   eax,eax
c001caef:	0f 84 00 01 00 00    	je     c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf5:	31 d2                	xor    edx,edx
c001caf7:	55                   	push   ebp
c001caf8:	52                   	push   edx
c001caf9:	50                   	push   eax
c001cafa:	56                   	push   esi
c001cafb:	e8 a6 6a ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001cb00:	83 c4 10             	add    esp,0x10
c001cb03:	85 c0                	test   eax,eax
c001cb05:	0f 85 ea 00 00 00    	jne    c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb0b:	83 ec 0c             	sub    esp,0xc
c001cb0e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb11:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb15:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb19:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb1d:	0f af c2             	imul   eax,edx
c001cb20:	50                   	push   eax
c001cb21:	e8 1a 2d ff ff       	call   c000f840 <malloc>
c001cb26:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb2f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb33:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb37:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb3b:	0f af c2             	imul   eax,edx
c001cb3e:	99                   	cdq    
c001cb3f:	52                   	push   edx
c001cb40:	50                   	push   eax
c001cb41:	56                   	push   esi
c001cb42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb45:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb48:	83 c4 20             	add    esp,0x20
c001cb4b:	85 c0                	test   eax,eax
c001cb4d:	0f 84 a2 00 00 00    	je     c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb53:	31 d2                	xor    edx,edx
c001cb55:	51                   	push   ecx
c001cb56:	52                   	push   edx
c001cb57:	50                   	push   eax
c001cb58:	56                   	push   esi
c001cb59:	e8 48 6a ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001cb5e:	83 c4 10             	add    esp,0x10
c001cb61:	85 c0                	test   eax,eax
c001cb63:	0f 85 8c 00 00 00    	jne    c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb69:	83 ec 0c             	sub    esp,0xc
c001cb6c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb70:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb74:	31 ed                	xor    ebp,ebp
c001cb76:	0f af c2             	imul   eax,edx
c001cb79:	50                   	push   eax
c001cb7a:	e8 c1 2c ff ff       	call   c000f840 <malloc>
c001cb7f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb85:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb8c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb90:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb94:	0f af c2             	imul   eax,edx
c001cb97:	99                   	cdq    
c001cb98:	52                   	push   edx
c001cb99:	50                   	push   eax
c001cb9a:	56                   	push   esi
c001cb9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb9e:	83 c4 20             	add    esp,0x20
c001cba1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cba9:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbad:	0f 86 80 00 00 00    	jbe    c001cc33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbb3:	0f b7 fd             	movzx  edi,bp
c001cbb6:	c1 e7 05             	shl    edi,0x5
c001cbb9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbbd:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbc0:	75 6b                	jne    c001cc2d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbc2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbc9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbd0:	52                   	push   edx
c001cbd1:	31 d2                	xor    edx,edx
c001cbd3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbd6:	52                   	push   edx
c001cbd7:	50                   	push   eax
c001cbd8:	56                   	push   esi
c001cbd9:	e8 c8 69 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001cbde:	83 c4 10             	add    esp,0x10
c001cbe1:	85 c0                	test   eax,eax
c001cbe3:	74 17                	je     c001cbfc <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbe5:	83 ec 0c             	sub    esp,0xc
c001cbe8:	68 e6 c1 02 c0       	push   0xc002c1e6
c001cbed:	e8 3a 63 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001cbf2:	83 c4 10             	add    esp,0x10
c001cbf5:	31 c0                	xor    eax,eax
c001cbf7:	e9 87 00 00 00       	jmp    c001cc83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc02:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc05:	50                   	push   eax
c001cc06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc0e:	56                   	push   esi
c001cc0f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc13:	e8 cb fb ff ff       	call   c001c7e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc1c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc20:	83 c4 20             	add    esp,0x20
c001cc23:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc27:	73 04                	jae    c001cc2d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc2d:	45                   	inc    ebp
c001cc2e:	e9 76 ff ff ff       	jmp    c001cba9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc33:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc3f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc45:	83 ec 0c             	sub    esp,0xc
c001cc48:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc4e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc53:	05 00 10 00 00       	add    eax,0x1000
c001cc58:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5f:	e8 ec 2b ff ff       	call   c000f850 <free>
c001cc64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc67:	e8 e4 2b ff ff       	call   c000f850 <free>
c001cc6c:	58                   	pop    eax
c001cc6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc71:	e8 da 2b ff ff       	call   c000f850 <free>
c001cc76:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc79:	e8 c8 68 ff ff       	call   c0013546 <File::close()>
c001cc7e:	83 c4 10             	add    esp,0x10
c001cc81:	b0 01                	mov    al,0x1
c001cc83:	83 c4 3c             	add    esp,0x3c
c001cc86:	5b                   	pop    ebx
c001cc87:	5e                   	pop    esi
c001cc88:	5f                   	pop    edi
c001cc89:	5d                   	pop    ebp
c001cc8a:	c3                   	ret    

c001cc8b <Thr::runtimeReferenceHelper()>:
c001cc8b:	83 ec 18             	sub    esp,0x18
c001cc8e:	68 ee c1 02 c0       	push   0xc002c1ee
c001cc93:	e8 94 62 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001cc98:	fa                   	cli    
c001cc99:	83 c4 10             	add    esp,0x10
c001cc9c:	eb fe                	jmp    c001cc9c <Thr::runtimeReferenceHelper()+0x11>

c001cc9e <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc9e:	57                   	push   edi
c001cc9f:	56                   	push   esi
c001cca0:	53                   	push   ebx
c001cca1:	31 db                	xor    ebx,ebx
c001cca3:	39 1d 00 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b00,ebx
c001cca9:	7e 3c                	jle    c001cce7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccab:	8b 34 9d 80 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce580]
c001ccb2:	31 ff                	xor    edi,edi
c001ccb4:	39 3c 9d 80 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce680],edi
c001ccbb:	7e 27                	jle    c001cce4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccbd:	50                   	push   eax
c001ccbe:	50                   	push   eax
c001ccbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccc3:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccc5:	03 04 9d 00 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce600]
c001cccc:	50                   	push   eax
c001cccd:	e8 ee 3b fe ff       	call   c00008c0 <strcmp>
c001ccd2:	83 c4 10             	add    esp,0x10
c001ccd5:	85 c0                	test   eax,eax
c001ccd7:	75 05                	jne    c001ccde <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccd9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccdc:	eb 0b                	jmp    c001cce9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccde:	83 c6 10             	add    esi,0x10
c001cce1:	47                   	inc    edi
c001cce2:	eb d0                	jmp    c001ccb4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cce4:	43                   	inc    ebx
c001cce5:	eb bc                	jmp    c001cca3 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cce7:	31 c0                	xor    eax,eax
c001cce9:	5b                   	pop    ebx
c001ccea:	5e                   	pop    esi
c001cceb:	5f                   	pop    edi
c001ccec:	c3                   	ret    

c001cced <Thr::loadKernelSymbolTable(char const*)>:
c001cced:	55                   	push   ebp
c001ccee:	57                   	push   edi
c001ccef:	56                   	push   esi
c001ccf0:	53                   	push   ebx
c001ccf1:	83 ec 68             	sub    esp,0x68
c001ccf4:	8b 35 54 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b54
c001ccfa:	68 14 01 00 00       	push   0x114
c001ccff:	e8 3c 2b ff ff       	call   c000f840 <malloc>
c001cd04:	83 c4 0c             	add    esp,0xc
c001cd07:	89 c3                	mov    ebx,eax
c001cd09:	56                   	push   esi
c001cd0a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd0e:	50                   	push   eax
c001cd0f:	e8 70 67 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001cd14:	5e                   	pop    esi
c001cd15:	5f                   	pop    edi
c001cd16:	6a 01                	push   0x1
c001cd18:	53                   	push   ebx
c001cd19:	e8 ca 67 ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001cd1e:	83 c4 10             	add    esp,0x10
c001cd21:	85 c0                	test   eax,eax
c001cd23:	74 0a                	je     c001cd2f <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd25:	83 ec 0c             	sub    esp,0xc
c001cd28:	68 10 c2 02 c0       	push   0xc002c210
c001cd2d:	eb 34                	jmp    c001cd63 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd2f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd37:	83 ec 0c             	sub    esp,0xc
c001cd3a:	6a 34                	push   0x34
c001cd3c:	e8 ff 2a ff ff       	call   c000f840 <malloc>
c001cd41:	59                   	pop    ecx
c001cd42:	89 c7                	mov    edi,eax
c001cd44:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd48:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd4a:	56                   	push   esi
c001cd4b:	57                   	push   edi
c001cd4c:	6a 00                	push   0x0
c001cd4e:	6a 34                	push   0x34
c001cd50:	53                   	push   ebx
c001cd51:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd54:	83 c4 20             	add    esp,0x20
c001cd57:	85 c0                	test   eax,eax
c001cd59:	74 17                	je     c001cd72 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd5b:	83 ec 0c             	sub    esp,0xc
c001cd5e:	68 27 c2 02 c0       	push   0xc002c227
c001cd63:	e8 65 d8 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001cd68:	83 c4 10             	add    esp,0x10
c001cd6b:	31 c0                	xor    eax,eax
c001cd6d:	e9 31 02 00 00       	jmp    c001cfa3 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd72:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd78:	75 e1                	jne    c001cd5b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd7a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd7d:	85 c0                	test   eax,eax
c001cd7f:	74 da                	je     c001cd5b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd81:	52                   	push   edx
c001cd82:	31 d2                	xor    edx,edx
c001cd84:	52                   	push   edx
c001cd85:	50                   	push   eax
c001cd86:	53                   	push   ebx
c001cd87:	e8 1a 68 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001cd8c:	83 c4 10             	add    esp,0x10
c001cd8f:	85 c0                	test   eax,eax
c001cd91:	75 c8                	jne    c001cd5b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd93:	83 ec 0c             	sub    esp,0xc
c001cd96:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd9a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd9e:	31 ed                	xor    ebp,ebp
c001cda0:	0f af c2             	imul   eax,edx
c001cda3:	50                   	push   eax
c001cda4:	e8 97 2a ff ff       	call   c000f840 <malloc>
c001cda9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdaf:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdb6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdbe:	0f af c2             	imul   eax,edx
c001cdc1:	99                   	cdq    
c001cdc2:	52                   	push   edx
c001cdc3:	50                   	push   eax
c001cdc4:	53                   	push   ebx
c001cdc5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdc8:	83 c4 20             	add    esp,0x20
c001cdcb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdd3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cddb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cde3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdeb:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdef:	0f 86 aa 00 00 00    	jbe    c001ce9f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cdf5:	0f b7 f5             	movzx  esi,bp
c001cdf8:	6b f6 28             	imul   esi,esi,0x28
c001cdfb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cdff:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce06:	50                   	push   eax
c001ce07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce0b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce0f:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce11:	6b c0 28             	imul   eax,eax,0x28
c001ce14:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce18:	89 d0                	mov    eax,edx
c001ce1a:	31 d2                	xor    edx,edx
c001ce1c:	52                   	push   edx
c001ce1d:	50                   	push   eax
c001ce1e:	53                   	push   ebx
c001ce1f:	e8 82 67 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001ce24:	83 c4 0c             	add    esp,0xc
c001ce27:	6a 20                	push   0x20
c001ce29:	6a 00                	push   0x0
c001ce2b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce2f:	52                   	push   edx
c001ce30:	e8 43 39 fe ff       	call   c0000778 <memset>
c001ce35:	58                   	pop    eax
c001ce36:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce38:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce3c:	51                   	push   ecx
c001ce3d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce41:	52                   	push   edx
c001ce42:	6a 00                	push   0x0
c001ce44:	6a 1f                	push   0x1f
c001ce46:	53                   	push   ebx
c001ce47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce4a:	83 c4 18             	add    esp,0x18
c001ce4d:	68 3e c2 02 c0       	push   0xc002c23e
c001ce52:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce56:	52                   	push   edx
c001ce57:	e8 64 3a fe ff       	call   c00008c0 <strcmp>
c001ce5c:	83 c4 10             	add    esp,0x10
c001ce5f:	85 c0                	test   eax,eax
c001ce61:	75 0f                	jne    c001ce72 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce63:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce72:	50                   	push   eax
c001ce73:	50                   	push   eax
c001ce74:	68 46 c2 02 c0       	push   0xc002c246
c001ce79:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce7d:	50                   	push   eax
c001ce7e:	e8 3d 3a fe ff       	call   c00008c0 <strcmp>
c001ce83:	83 c4 10             	add    esp,0x10
c001ce86:	85 c0                	test   eax,eax
c001ce88:	75 0f                	jne    c001ce99 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce8a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce99:	45                   	inc    ebp
c001ce9a:	e9 4c ff ff ff       	jmp    c001cdeb <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cea4:	75 10                	jne    c001ceb6 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cea6:	83 ec 0c             	sub    esp,0xc
c001cea9:	68 4e c2 02 c0       	push   0xc002c24e
c001ceae:	e8 1a d7 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001ceb3:	83 c4 10             	add    esp,0x10
c001ceb6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cebb:	75 10                	jne    c001cecd <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cebd:	83 ec 0c             	sub    esp,0xc
c001cec0:	68 4e c2 02 c0       	push   0xc002c24e
c001cec5:	e8 03 d7 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001ceca:	83 c4 10             	add    esp,0x10
c001cecd:	31 d2                	xor    edx,edx
c001cecf:	50                   	push   eax
c001ced0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced4:	52                   	push   edx
c001ced5:	50                   	push   eax
c001ced6:	53                   	push   ebx
c001ced7:	e8 ca 66 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001cedc:	5a                   	pop    edx
c001cedd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cee1:	e8 5a 29 ff ff       	call   c000f840 <malloc>
c001cee6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ceea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ceee:	31 c9                	xor    ecx,ecx
c001cef0:	5e                   	pop    esi
c001cef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cef3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cef7:	55                   	push   ebp
c001cef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cefc:	51                   	push   ecx
c001cefd:	52                   	push   edx
c001cefe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf02:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf06:	53                   	push   ebx
c001cf07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf0a:	83 c4 14             	add    esp,0x14
c001cf0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf11:	e8 2a 29 ff ff       	call   c000f840 <malloc>
c001cf16:	89 c6                	mov    esi,eax
c001cf18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf1a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf1d:	56                   	push   esi
c001cf1e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf26:	51                   	push   ecx
c001cf27:	52                   	push   edx
c001cf28:	53                   	push   ebx
c001cf29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf30:	8b 15 00 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b00
c001cf36:	83 c4 1c             	add    esp,0x1c
c001cf39:	c1 e8 04             	shr    eax,0x4
c001cf3c:	89 04 95 80 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce680],eax
c001cf43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf47:	31 d2                	xor    edx,edx
c001cf49:	52                   	push   edx
c001cf4a:	50                   	push   eax
c001cf4b:	53                   	push   ebx
c001cf4c:	e8 55 66 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001cf51:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf53:	31 d2                	xor    edx,edx
c001cf55:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf58:	56                   	push   esi
c001cf59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf5d:	52                   	push   edx
c001cf5e:	50                   	push   eax
c001cf5f:	53                   	push   ebx
c001cf60:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf63:	83 c4 14             	add    esp,0x14
c001cf66:	53                   	push   ebx
c001cf67:	e8 da 65 ff ff       	call   c0013546 <File::close()>
c001cf6c:	5d                   	pop    ebp
c001cf6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf71:	e8 da 28 ff ff       	call   c000f850 <free>
c001cf76:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf79:	e8 d2 28 ff ff       	call   c000f850 <free>
c001cf7e:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c001cf83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf87:	8d 50 01             	lea    edx,[eax+0x1]
c001cf8a:	89 0c 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],ecx
c001cf91:	89 34 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],esi
c001cf98:	89 15 00 1b 03 c0    	mov    DWORD PTR ds:0xc0031b00,edx
c001cf9e:	83 c4 10             	add    esp,0x10
c001cfa1:	b0 01                	mov    al,0x1
c001cfa3:	83 c4 5c             	add    esp,0x5c
c001cfa6:	5b                   	pop    ebx
c001cfa7:	5e                   	pop    esi
c001cfa8:	5f                   	pop    edi
c001cfa9:	5d                   	pop    ebp
c001cfaa:	c3                   	ret    

c001cfab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfab:	55                   	push   ebp
c001cfac:	57                   	push   edi
c001cfad:	56                   	push   esi
c001cfae:	53                   	push   ebx
c001cfaf:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfb5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfbc:	8b 1d 54 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b54
c001cfc2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfc6:	68 14 01 00 00       	push   0x114
c001cfcb:	e8 70 28 ff ff       	call   c000f840 <malloc>
c001cfd0:	83 c4 0c             	add    esp,0xc
c001cfd3:	89 c5                	mov    ebp,eax
c001cfd5:	53                   	push   ebx
c001cfd6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfdd:	50                   	push   eax
c001cfde:	e8 a1 64 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001cfe3:	5e                   	pop    esi
c001cfe4:	5f                   	pop    edi
c001cfe5:	6a 01                	push   0x1
c001cfe7:	55                   	push   ebp
c001cfe8:	e8 fb 64 ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001cfed:	83 c4 10             	add    esp,0x10
c001cff0:	85 c0                	test   eax,eax
c001cff2:	0f 85 8d 06 00 00    	jne    c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cff8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d000:	83 ec 0c             	sub    esp,0xc
c001d003:	6a 34                	push   0x34
c001d005:	e8 36 28 ff ff       	call   c000f840 <malloc>
c001d00a:	5b                   	pop    ebx
c001d00b:	89 c7                	mov    edi,eax
c001d00d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d011:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d014:	53                   	push   ebx
c001d015:	57                   	push   edi
c001d016:	6a 00                	push   0x0
c001d018:	6a 34                	push   0x34
c001d01a:	55                   	push   ebp
c001d01b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d01e:	83 c4 20             	add    esp,0x20
c001d021:	85 c0                	test   eax,eax
c001d023:	0f 85 5c 06 00 00    	jne    c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d029:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d02f:	0f 85 50 06 00 00    	jne    c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d035:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d038:	85 c0                	test   eax,eax
c001d03a:	0f 84 45 06 00 00    	je     c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d040:	31 d2                	xor    edx,edx
c001d042:	51                   	push   ecx
c001d043:	52                   	push   edx
c001d044:	50                   	push   eax
c001d045:	55                   	push   ebp
c001d046:	e8 5b 65 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001d04b:	83 c4 10             	add    esp,0x10
c001d04e:	85 c0                	test   eax,eax
c001d050:	0f 85 2f 06 00 00    	jne    c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d056:	83 ec 0c             	sub    esp,0xc
c001d059:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d05c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d060:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d064:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d068:	0f af c2             	imul   eax,edx
c001d06b:	50                   	push   eax
c001d06c:	e8 cf 27 ff ff       	call   c000f840 <malloc>
c001d071:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d078:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d07b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d07f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d083:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d087:	0f af c2             	imul   eax,edx
c001d08a:	99                   	cdq    
c001d08b:	52                   	push   edx
c001d08c:	50                   	push   eax
c001d08d:	55                   	push   ebp
c001d08e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d091:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d094:	83 c4 20             	add    esp,0x20
c001d097:	85 c0                	test   eax,eax
c001d099:	0f 84 e6 05 00 00    	je     c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d09f:	52                   	push   edx
c001d0a0:	31 d2                	xor    edx,edx
c001d0a2:	52                   	push   edx
c001d0a3:	50                   	push   eax
c001d0a4:	55                   	push   ebp
c001d0a5:	e8 fc 64 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001d0aa:	83 c4 10             	add    esp,0x10
c001d0ad:	85 c0                	test   eax,eax
c001d0af:	0f 85 d0 05 00 00    	jne    c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0b5:	83 ec 0c             	sub    esp,0xc
c001d0b8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0bc:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0c0:	31 f6                	xor    esi,esi
c001d0c2:	0f af c2             	imul   eax,edx
c001d0c5:	50                   	push   eax
c001d0c6:	e8 75 27 ff ff       	call   c000f840 <malloc>
c001d0cb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0d9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0dd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0e1:	0f af c2             	imul   eax,edx
c001d0e4:	99                   	cdq    
c001d0e5:	52                   	push   edx
c001d0e6:	50                   	push   eax
c001d0e7:	55                   	push   ebp
c001d0e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0eb:	83 c4 20             	add    esp,0x20
c001d0ee:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0f2:	0f 86 8a 00 00 00    	jbe    c001d182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0f8:	0f b7 de             	movzx  ebx,si
c001d0fb:	c1 e3 05             	shl    ebx,0x5
c001d0fe:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d102:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d105:	75 75                	jne    c001d17c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d107:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d10a:	31 d2                	xor    edx,edx
c001d10c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d110:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d117:	50                   	push   eax
c001d118:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d11b:	52                   	push   edx
c001d11c:	50                   	push   eax
c001d11d:	55                   	push   ebp
c001d11e:	e8 83 64 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001d123:	83 c4 10             	add    esp,0x10
c001d126:	85 c0                	test   eax,eax
c001d128:	0f 85 57 05 00 00    	jne    c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d12e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d135:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d138:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d13c:	31 d2                	xor    edx,edx
c001d13e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d142:	83 ec 0c             	sub    esp,0xc
c001d145:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d149:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d150:	50                   	push   eax
c001d151:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d159:	52                   	push   edx
c001d15a:	50                   	push   eax
c001d15b:	55                   	push   ebp
c001d15c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d15f:	83 c4 1c             	add    esp,0x1c
c001d162:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d165:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d168:	50                   	push   eax
c001d169:	6a 00                	push   0x0
c001d16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d173:	50                   	push   eax
c001d174:	e8 ff 35 fe ff       	call   c0000778 <memset>
c001d179:	83 c4 10             	add    esp,0x10
c001d17c:	46                   	inc    esi
c001d17d:	e9 6c ff ff ff       	jmp    c001d0ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d182:	53                   	push   ebx
c001d183:	31 db                	xor    ebx,ebx
c001d185:	68 00 01 00 00       	push   0x100
c001d18a:	6a 00                	push   0x0
c001d18c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d190:	50                   	push   eax
c001d191:	e8 e2 35 fe ff       	call   c0000778 <memset>
c001d196:	83 c4 0c             	add    esp,0xc
c001d199:	68 00 01 00 00       	push   0x100
c001d19e:	6a 00                	push   0x0
c001d1a0:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1a7:	50                   	push   eax
c001d1a8:	e8 cb 35 fe ff       	call   c0000778 <memset>
c001d1ad:	83 c4 10             	add    esp,0x10
c001d1b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1b8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1c0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1d8:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1dc:	0f 86 30 01 00 00    	jbe    c001d312 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1e2:	0f b7 f3             	movzx  esi,bx
c001d1e5:	6b f6 28             	imul   esi,esi,0x28
c001d1e8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1ec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1f3:	52                   	push   edx
c001d1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1f8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1fc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1fe:	6b d2 28             	imul   edx,edx,0x28
c001d201:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d205:	31 d2                	xor    edx,edx
c001d207:	52                   	push   edx
c001d208:	50                   	push   eax
c001d209:	55                   	push   ebp
c001d20a:	e8 97 63 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001d20f:	83 c4 0c             	add    esp,0xc
c001d212:	6a 20                	push   0x20
c001d214:	6a 00                	push   0x0
c001d216:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d21d:	51                   	push   ecx
c001d21e:	e8 55 35 fe ff       	call   c0000778 <memset>
c001d223:	59                   	pop    ecx
c001d224:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d227:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d22b:	52                   	push   edx
c001d22c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d233:	51                   	push   ecx
c001d234:	6a 00                	push   0x0
c001d236:	6a 1f                	push   0x1f
c001d238:	55                   	push   ebp
c001d239:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d23c:	83 c4 1c             	add    esp,0x1c
c001d23f:	6a 09                	push   0x9
c001d241:	68 68 c2 02 c0       	push   0xc002c268
c001d246:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d24d:	51                   	push   ecx
c001d24e:	e8 ed 33 fe ff       	call   c0000640 <memcmp>
c001d253:	83 c4 10             	add    esp,0x10
c001d256:	85 c0                	test   eax,eax
c001d258:	75 21                	jne    c001d27b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d25e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d262:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d266:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d26a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d26d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d274:	89 d0                	mov    eax,edx
c001d276:	40                   	inc    eax
c001d277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d27b:	50                   	push   eax
c001d27c:	6a 09                	push   0x9
c001d27e:	68 72 c2 02 c0       	push   0xc002c272
c001d283:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d28a:	50                   	push   eax
c001d28b:	e8 b0 33 fe ff       	call   c0000640 <memcmp>
c001d290:	83 c4 10             	add    esp,0x10
c001d293:	85 c0                	test   eax,eax
c001d295:	75 21                	jne    c001d2b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d29b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d29f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2aa:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2b1:	89 d0                	mov    eax,edx
c001d2b3:	40                   	inc    eax
c001d2b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2b8:	50                   	push   eax
c001d2b9:	50                   	push   eax
c001d2ba:	68 3e c2 02 c0       	push   0xc002c23e
c001d2bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2c6:	50                   	push   eax
c001d2c7:	e8 f4 35 fe ff       	call   c00008c0 <strcmp>
c001d2cc:	83 c4 10             	add    esp,0x10
c001d2cf:	85 c0                	test   eax,eax
c001d2d1:	75 0f                	jne    c001d2e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2d3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2e2:	50                   	push   eax
c001d2e3:	50                   	push   eax
c001d2e4:	68 46 c2 02 c0       	push   0xc002c246
c001d2e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f0:	50                   	push   eax
c001d2f1:	e8 ca 35 fe ff       	call   c00008c0 <strcmp>
c001d2f6:	83 c4 10             	add    esp,0x10
c001d2f9:	85 c0                	test   eax,eax
c001d2fb:	75 0f                	jne    c001d30c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d300:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d304:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d30c:	43                   	inc    ebx
c001d30d:	e9 c6 fe ff ff       	jmp    c001d1d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d312:	31 d2                	xor    edx,edx
c001d314:	50                   	push   eax
c001d315:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d319:	52                   	push   edx
c001d31a:	50                   	push   eax
c001d31b:	55                   	push   ebp
c001d31c:	e8 85 62 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001d321:	58                   	pop    eax
c001d322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d326:	e8 15 25 ff ff       	call   c000f840 <malloc>
c001d32b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d32e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d332:	31 d2                	xor    edx,edx
c001d334:	58                   	pop    eax
c001d335:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d339:	53                   	push   ebx
c001d33a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d33e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d342:	52                   	push   edx
c001d343:	50                   	push   eax
c001d344:	55                   	push   ebp
c001d345:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d348:	83 c4 14             	add    esp,0x14
c001d34b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d34f:	e8 ec 24 ff ff       	call   c000f840 <malloc>
c001d354:	31 d2                	xor    edx,edx
c001d356:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d35a:	83 c4 0c             	add    esp,0xc
c001d35d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d361:	52                   	push   edx
c001d362:	50                   	push   eax
c001d363:	55                   	push   ebp
c001d364:	e8 3d 62 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001d369:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d36c:	31 d2                	xor    edx,edx
c001d36e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d371:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d375:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d379:	52                   	push   edx
c001d37a:	50                   	push   eax
c001d37b:	55                   	push   ebp
c001d37c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d37f:	83 c4 20             	add    esp,0x20
c001d382:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d38a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d38e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d392:	0f 84 f1 02 00 00    	je     c001d689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d398:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d39f:	31 d2                	xor    edx,edx
c001d3a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3a5:	c1 e8 03             	shr    eax,0x3
c001d3a8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3ac:	51                   	push   ecx
c001d3ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3b1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3b5:	52                   	push   edx
c001d3b6:	50                   	push   eax
c001d3b7:	55                   	push   ebp
c001d3b8:	e8 e9 61 ff ff       	call   c00135a6 <File::seek(unsigned long long)>
c001d3bd:	5b                   	pop    ebx
c001d3be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3c9:	e8 72 24 ff ff       	call   c000f840 <malloc>
c001d3ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3d5:	31 d2                	xor    edx,edx
c001d3d7:	5e                   	pop    esi
c001d3d8:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3dc:	50                   	push   eax
c001d3dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3e5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3ec:	52                   	push   edx
c001d3ed:	50                   	push   eax
c001d3ee:	55                   	push   ebp
c001d3ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3f2:	83 c4 20             	add    esp,0x20
c001d3f5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d401:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d405:	0f 8d 62 02 00 00    	jge    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d40b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d40f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d413:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d418:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d41b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d41f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d423:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d427:	89 d8                	mov    eax,ebx
c001d429:	c1 e8 08             	shr    eax,0x8
c001d42c:	89 c6                	mov    esi,eax
c001d42e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d432:	c1 e6 04             	shl    esi,0x4
c001d435:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d439:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d43c:	85 d2                	test   edx,edx
c001d43e:	0f 85 bf 00 00 00    	jne    c001d503 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d444:	83 ec 0c             	sub    esp,0xc
c001d447:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d44b:	03 06                	add    eax,DWORD PTR [esi]
c001d44d:	50                   	push   eax
c001d44e:	e8 4b f8 ff ff       	call   c001cc9e <Thr::getAddressOfKernelSymbol(char const*)>
c001d453:	83 c4 10             	add    esp,0x10
c001d456:	89 c2                	mov    edx,eax
c001d458:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d45d:	85 c0                	test   eax,eax
c001d45f:	0f 85 9e 00 00 00    	jne    c001d503 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d465:	83 ec 0c             	sub    esp,0xc
c001d468:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d46c:	03 06                	add    eax,DWORD PTR [esi]
c001d46e:	50                   	push   eax
c001d46f:	e8 81 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d474:	83 c4 10             	add    esp,0x10
c001d477:	89 c2                	mov    edx,eax
c001d479:	85 c0                	test   eax,eax
c001d47b:	0f 85 82 00 00 00    	jne    c001d503 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d481:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d485:	50                   	push   eax
c001d486:	50                   	push   eax
c001d487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48b:	03 06                	add    eax,DWORD PTR [esi]
c001d48d:	50                   	push   eax
c001d48e:	68 7c c2 02 c0       	push   0xc002c27c
c001d493:	e8 94 5a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001d498:	58                   	pop    eax
c001d499:	5a                   	pop    edx
c001d49a:	68 96 c2 02 c0       	push   0xc002c296
c001d49f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4a6:	50                   	push   eax
c001d4a7:	e8 88 33 fe ff       	call   c0000834 <strcpy>
c001d4ac:	59                   	pop    ecx
c001d4ad:	58                   	pop    eax
c001d4ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b2:	03 06                	add    eax,DWORD PTR [esi]
c001d4b4:	50                   	push   eax
c001d4b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4bc:	50                   	push   eax
c001d4bd:	e8 b2 34 fe ff       	call   c0000974 <strcat>
c001d4c2:	58                   	pop    eax
c001d4c3:	5a                   	pop    edx
c001d4c4:	68 2c c3 02 c0       	push   0xc002c32c
c001d4c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d0:	50                   	push   eax
c001d4d1:	e8 9e 34 fe ff       	call   c0000974 <strcat>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4de:	0f 84 43 01 00 00    	je     c001d627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4e4:	83 ec 0c             	sub    esp,0xc
c001d4e7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ee:	50                   	push   eax
c001d4ef:	e8 d9 d0 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d4f4:	83 c4 10             	add    esp,0x10
c001d4f7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4ff:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d503:	80 fb 01             	cmp    bl,0x1
c001d506:	75 7d                	jne    c001d585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d508:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d50f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d513:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d517:	01 ce                	add    esi,ecx
c001d519:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d51f:	0f 94 c0             	sete   al
c001d522:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d528:	0f 94 c3             	sete   bl
c001d52b:	09 c3                	or     ebx,eax
c001d52d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d52f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d534:	74 36                	je     c001d56c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d536:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d539:	84 db                	test   bl,bl
c001d53b:	75 0a                	jne    c001d547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d53d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d541:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d545:	76 37                	jbe    c001d57e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d547:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d54b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d550:	0f 84 d1 00 00 00    	je     c001d627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d556:	83 ec 0c             	sub    esp,0xc
c001d559:	68 ad c2 02 c0       	push   0xc002c2ad
c001d55e:	e8 6a d0 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d563:	83 c4 10             	add    esp,0x10
c001d566:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d56a:	eb 12                	jmp    c001d57e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d56c:	01 c1                	add    ecx,eax
c001d56e:	84 db                	test   bl,bl
c001d570:	75 0c                	jne    c001d57e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d572:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d576:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d57a:	77 02                	ja     c001d57e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d57c:	01 d1                	add    ecx,edx
c001d57e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d580:	e9 df 00 00 00       	jmp    c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d585:	80 fb 02             	cmp    bl,0x2
c001d588:	75 71                	jne    c001d5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d58a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d591:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d595:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d599:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d59f:	74 15                	je     c001d5b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5a1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5a7:	74 0d                	je     c001d5b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5ad:	83 e8 04             	sub    eax,0x4
c001d5b0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5b4:	76 1f                	jbe    c001d5d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5bf:	74 66                	je     c001d627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5c1:	83 ec 0c             	sub    esp,0xc
c001d5c4:	68 c9 c2 02 c0       	push   0xc002c2c9
c001d5c9:	e8 ff cf ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d5ce:	83 c4 10             	add    esp,0x10
c001d5d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5d5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5d7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5dc:	74 13                	je     c001d5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5e2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5e9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5ed:	01 c8                	add    eax,ecx
c001d5ef:	eb 04                	jmp    c001d5f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5f1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5f5:	01 c2                	add    edx,eax
c001d5f7:	89 16                	mov    DWORD PTR [esi],edx
c001d5f9:	eb 69                	jmp    c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5fb:	0f b6 db             	movzx  ebx,bl
c001d5fe:	50                   	push   eax
c001d5ff:	50                   	push   eax
c001d600:	53                   	push   ebx
c001d601:	68 e5 c2 02 c0       	push   0xc002c2e5
c001d606:	e8 21 59 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001d60b:	83 c4 10             	add    esp,0x10
c001d60e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d613:	74 12                	je     c001d627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d615:	83 ec 0c             	sub    esp,0xc
c001d618:	68 f0 c2 02 c0       	push   0xc002c2f0
c001d61d:	e8 ab cf ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d622:	83 c4 10             	add    esp,0x10
c001d625:	eb 3d                	jmp    c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d627:	83 ec 0c             	sub    esp,0xc
c001d62a:	55                   	push   ebp
c001d62b:	e8 16 5f ff ff       	call   c0013546 <File::close()>
c001d630:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d633:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d636:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d639:	59                   	pop    ecx
c001d63a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d63e:	e8 0d 22 ff ff       	call   c000f850 <free>
c001d643:	5b                   	pop    ebx
c001d644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d648:	e8 03 22 ff ff       	call   c000f850 <free>
c001d64d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d650:	e8 fb 21 ff ff       	call   c000f850 <free>
c001d655:	5e                   	pop    esi
c001d656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d65a:	e8 f1 21 ff ff       	call   c000f850 <free>
c001d65f:	83 c4 10             	add    esp,0x10
c001d662:	eb 21                	jmp    c001d685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d664:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d668:	e9 90 fd ff ff       	jmp    c001d3fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d66d:	83 ec 0c             	sub    esp,0xc
c001d670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d674:	e8 d7 21 ff ff       	call   c000f850 <free>
c001d679:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d67d:	83 c4 10             	add    esp,0x10
c001d680:	e9 05 fd ff ff       	jmp    c001d38a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d685:	31 c0                	xor    eax,eax
c001d687:	eb 33                	jmp    c001d6bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d689:	83 ec 0c             	sub    esp,0xc
c001d68c:	55                   	push   ebp
c001d68d:	e8 b4 5e ff ff       	call   c0013546 <File::close()>
c001d692:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d695:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d698:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d69b:	58                   	pop    eax
c001d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6a0:	e8 ab 21 ff ff       	call   c000f850 <free>
c001d6a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6a8:	e8 a3 21 ff ff       	call   c000f850 <free>
c001d6ad:	5a                   	pop    edx
c001d6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6b2:	e8 99 21 ff ff       	call   c000f850 <free>
c001d6b7:	83 c4 10             	add    esp,0x10
c001d6ba:	b0 01                	mov    al,0x1
c001d6bc:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6c2:	5b                   	pop    ebx
c001d6c3:	5e                   	pop    esi
c001d6c4:	5f                   	pop    edi
c001d6c5:	5d                   	pop    ebp
c001d6c6:	c3                   	ret    

c001d6c7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6c7:	56                   	push   esi
c001d6c8:	31 d2                	xor    edx,edx
c001d6ca:	53                   	push   ebx
c001d6cb:	8b 1d 60 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031360
c001d6d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6d5:	39 d3                	cmp    ebx,edx
c001d6d7:	7e 1b                	jle    c001d6f4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6d9:	8b 04 95 80 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcea80]
c001d6e0:	39 c8                	cmp    eax,ecx
c001d6e2:	77 0d                	ja     c001d6f1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6e4:	8b 34 95 80 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcec80]
c001d6eb:	01 c6                	add    esi,eax
c001d6ed:	39 ce                	cmp    esi,ecx
c001d6ef:	77 05                	ja     c001d6f6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6f1:	42                   	inc    edx
c001d6f2:	eb e1                	jmp    c001d6d5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6f4:	31 c0                	xor    eax,eax
c001d6f6:	5b                   	pop    ebx
c001d6f7:	5e                   	pop    esi
c001d6f8:	c3                   	ret    

c001d6f9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6f9:	53                   	push   ebx
c001d6fa:	31 c0                	xor    eax,eax
c001d6fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d700:	8b 1d 60 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031360
c001d706:	39 c3                	cmp    ebx,eax
c001d708:	7e 22                	jle    c001d72c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d70a:	8b 14 85 80 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcea80]
c001d711:	39 ca                	cmp    edx,ecx
c001d713:	77 14                	ja     c001d729 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d715:	03 14 85 80 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcec80]
c001d71c:	39 ca                	cmp    edx,ecx
c001d71e:	76 09                	jbe    c001d729 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d720:	8b 04 85 80 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce880]
c001d727:	eb 05                	jmp    c001d72e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d729:	40                   	inc    eax
c001d72a:	eb da                	jmp    c001d706 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d72c:	31 c0                	xor    eax,eax
c001d72e:	5b                   	pop    ebx
c001d72f:	c3                   	ret    

c001d730 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d730:	53                   	push   ebx
c001d731:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d735:	53                   	push   ebx
c001d736:	e8 8c ff ff ff       	call   c001d6c7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d73b:	5a                   	pop    edx
c001d73c:	31 d2                	xor    edx,edx
c001d73e:	85 c0                	test   eax,eax
c001d740:	74 04                	je     c001d746 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d742:	89 da                	mov    edx,ebx
c001d744:	29 c2                	sub    edx,eax
c001d746:	89 d0                	mov    eax,edx
c001d748:	5b                   	pop    ebx
c001d749:	c3                   	ret    

c001d74a <Thr::loadDLL(char const*, bool)>:
c001d74a:	55                   	push   ebp
c001d74b:	57                   	push   edi
c001d74c:	56                   	push   esi
c001d74d:	53                   	push   ebx
c001d74e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d754:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d75b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d762:	56                   	push   esi
c001d763:	68 08 c3 02 c0       	push   0xc002c308
c001d768:	e8 bf 57 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001d76d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d774:	e8 c7 20 ff ff       	call   c000f840 <malloc>
c001d779:	83 c4 0c             	add    esp,0xc
c001d77c:	89 c3                	mov    ebx,eax
c001d77e:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001d784:	56                   	push   esi
c001d785:	50                   	push   eax
c001d786:	e8 f9 5c ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001d78b:	83 c4 10             	add    esp,0x10
c001d78e:	85 db                	test   ebx,ebx
c001d790:	75 3c                	jne    c001d7ce <Thr::loadDLL(char const*, bool)+0x84>
c001d792:	89 e8                	mov    eax,ebp
c001d794:	84 c0                	test   al,al
c001d796:	0f 84 d5 01 00 00    	je     c001d971 <Thr::loadDLL(char const*, bool)+0x227>
c001d79c:	57                   	push   edi
c001d79d:	57                   	push   edi
c001d79e:	68 19 c3 02 c0       	push   0xc002c319
c001d7a3:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7a7:	57                   	push   edi
c001d7a8:	e8 87 30 fe ff       	call   c0000834 <strcpy>
c001d7ad:	58                   	pop    eax
c001d7ae:	5a                   	pop    edx
c001d7af:	56                   	push   esi
c001d7b0:	57                   	push   edi
c001d7b1:	e8 be 31 fe ff       	call   c0000974 <strcat>
c001d7b6:	59                   	pop    ecx
c001d7b7:	58                   	pop    eax
c001d7b8:	68 2c c3 02 c0       	push   0xc002c32c
c001d7bd:	57                   	push   edi
c001d7be:	e8 b1 31 fe ff       	call   c0000974 <strcat>
c001d7c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7c6:	e8 02 ce ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d7cb:	83 c4 10             	add    esp,0x10
c001d7ce:	51                   	push   ecx
c001d7cf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7d3:	50                   	push   eax
c001d7d4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7d8:	50                   	push   eax
c001d7d9:	53                   	push   ebx
c001d7da:	e8 b5 5f ff ff       	call   c0013794 <File::stat(unsigned long long*, bool*)>
c001d7df:	83 c4 10             	add    esp,0x10
c001d7e2:	85 db                	test   ebx,ebx
c001d7e4:	74 0c                	je     c001d7f2 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7e6:	83 ec 0c             	sub    esp,0xc
c001d7e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7eb:	53                   	push   ebx
c001d7ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7f7:	75 0a                	jne    c001d803 <Thr::loadDLL(char const*, bool)+0xb9>
c001d7f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7fd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d801:	75 3c                	jne    c001d83f <Thr::loadDLL(char const*, bool)+0xf5>
c001d803:	89 e8                	mov    eax,ebp
c001d805:	84 c0                	test   al,al
c001d807:	0f 84 4c 01 00 00    	je     c001d959 <Thr::loadDLL(char const*, bool)+0x20f>
c001d80d:	51                   	push   ecx
c001d80e:	51                   	push   ecx
c001d80f:	68 19 c3 02 c0       	push   0xc002c319
c001d814:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d818:	53                   	push   ebx
c001d819:	e8 16 30 fe ff       	call   c0000834 <strcpy>
c001d81e:	5f                   	pop    edi
c001d81f:	58                   	pop    eax
c001d820:	56                   	push   esi
c001d821:	53                   	push   ebx
c001d822:	e8 4d 31 fe ff       	call   c0000974 <strcat>
c001d827:	58                   	pop    eax
c001d828:	5a                   	pop    edx
c001d829:	68 2c c3 02 c0       	push   0xc002c32c
c001d82e:	53                   	push   ebx
c001d82f:	e8 40 31 fe ff       	call   c0000974 <strcat>
c001d834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d837:	e8 91 cd ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d83c:	83 c4 10             	add    esp,0x10
c001d83f:	e8 e2 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d844:	51                   	push   ecx
c001d845:	6a 03                	push   0x3
c001d847:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d84b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d84f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d855:	83 d3 00             	adc    ebx,0x0
c001d858:	89 ca                	mov    edx,ecx
c001d85a:	89 d1                	mov    ecx,edx
c001d85c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d860:	51                   	push   ecx
c001d861:	50                   	push   eax
c001d862:	e8 fb 4b ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001d867:	5f                   	pop    edi
c001d868:	89 c3                	mov    ebx,eax
c001d86a:	58                   	pop    eax
c001d86b:	53                   	push   ebx
c001d86c:	68 2e c3 02 c0       	push   0xc002c32e
c001d871:	e8 b6 56 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001d876:	89 34 24             	mov    DWORD PTR [esp],esi
c001d879:	e8 16 2f fe ff       	call   c0000794 <strlen>
c001d87e:	8b 3d 60 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031360
c001d884:	40                   	inc    eax
c001d885:	89 04 24             	mov    DWORD PTR [esp],eax
c001d888:	e8 b3 1f ff ff       	call   c000f840 <malloc>
c001d88d:	89 04 bd 80 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce880],eax
c001d894:	58                   	pop    eax
c001d895:	a1 60 13 03 c0       	mov    eax,ds:0xc0031360
c001d89a:	5a                   	pop    edx
c001d89b:	56                   	push   esi
c001d89c:	ff 34 85 80 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce880]
c001d8a3:	e8 8c 2f fe ff       	call   c0000834 <strcpy>
c001d8a8:	a1 60 13 03 c0       	mov    eax,ds:0xc0031360
c001d8ad:	8d 50 01             	lea    edx,[eax+0x1]
c001d8b0:	89 1c 85 80 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea80],ebx
c001d8b7:	89 15 60 13 03 c0    	mov    DWORD PTR ds:0xc0031360,edx
c001d8bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8c1:	83 c4 0c             	add    esp,0xc
c001d8c4:	89 14 85 80 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec80],edx
c001d8cb:	6a 01                	push   0x1
c001d8cd:	53                   	push   ebx
c001d8ce:	56                   	push   esi
c001d8cf:	e8 d7 f6 ff ff       	call   c001cfab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8d4:	83 c4 10             	add    esp,0x10
c001d8d7:	89 c7                	mov    edi,eax
c001d8d9:	84 c0                	test   al,al
c001d8db:	0f 85 8c 00 00 00    	jne    c001d96d <Thr::loadDLL(char const*, bool)+0x223>
c001d8e1:	89 e8                	mov    eax,ebp
c001d8e3:	84 c0                	test   al,al
c001d8e5:	74 76                	je     c001d95d <Thr::loadDLL(char const*, bool)+0x213>
c001d8e7:	83 ec 0c             	sub    esp,0xc
c001d8ea:	68 3b c3 02 c0       	push   0xc002c33b
c001d8ef:	e8 d9 cc ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d8f4:	83 c4 10             	add    esp,0x10
c001d8f7:	eb 64                	jmp    c001d95d <Thr::loadDLL(char const*, bool)+0x213>
c001d8f9:	e8 28 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d8fe:	89 f5                	mov    ebp,esi
c001d900:	c1 e5 0c             	shl    ebp,0xc
c001d903:	52                   	push   edx
c001d904:	01 dd                	add    ebp,ebx
c001d906:	52                   	push   edx
c001d907:	55                   	push   ebp
c001d908:	50                   	push   eax
c001d909:	e8 ce 46 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001d90e:	83 c4 10             	add    esp,0x10
c001d911:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d914:	75 0c                	jne    c001d922 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d916:	83 ec 0c             	sub    esp,0xc
c001d919:	55                   	push   ebp
c001d91a:	e8 39 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d91f:	83 c4 10             	add    esp,0x10
c001d922:	46                   	inc    esi
c001d923:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d927:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d92b:	05 ff 0f 00 00       	add    eax,0xfff
c001d930:	83 d2 00             	adc    edx,0x0
c001d933:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d937:	c1 ea 0c             	shr    edx,0xc
c001d93a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d93e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d942:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d946:	ba 00 00 00 00       	mov    edx,0x0
c001d94b:	89 d0                	mov    eax,edx
c001d94d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d951:	72 a6                	jb     c001d8f9 <Thr::loadDLL(char const*, bool)+0x1af>
c001d953:	89 f8                	mov    eax,edi
c001d955:	84 c0                	test   al,al
c001d957:	75 18                	jne    c001d971 <Thr::loadDLL(char const*, bool)+0x227>
c001d959:	31 db                	xor    ebx,ebx
c001d95b:	eb 14                	jmp    c001d971 <Thr::loadDLL(char const*, bool)+0x227>
c001d95d:	83 ec 0c             	sub    esp,0xc
c001d960:	68 5a c3 02 c0       	push   0xc002c35a
c001d965:	e8 63 cc ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d96a:	83 c4 10             	add    esp,0x10
c001d96d:	31 f6                	xor    esi,esi
c001d96f:	eb b2                	jmp    c001d923 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d971:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d977:	89 d8                	mov    eax,ebx
c001d979:	5b                   	pop    ebx
c001d97a:	5e                   	pop    esi
c001d97b:	5f                   	pop    edi
c001d97c:	5d                   	pop    ebp
c001d97d:	c3                   	ret    

c001d97e <Thr::executeDLL(unsigned long, void*)>:
c001d97e:	56                   	push   esi
c001d97f:	53                   	push   ebx
c001d980:	52                   	push   edx
c001d981:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d985:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d989:	85 db                	test   ebx,ebx
c001d98b:	75 10                	jne    c001d99d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d98d:	83 ec 0c             	sub    esp,0xc
c001d990:	68 76 c3 02 c0       	push   0xc002c376
c001d995:	e8 33 cc ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001d99a:	83 c4 10             	add    esp,0x10
c001d99d:	50                   	push   eax
c001d99e:	50                   	push   eax
c001d99f:	53                   	push   ebx
c001d9a0:	68 a0 c3 02 c0       	push   0xc002c3a0
c001d9a5:	e8 82 55 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001d9aa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9ae:	89 d8                	mov    eax,ebx
c001d9b0:	83 c4 14             	add    esp,0x14
c001d9b3:	5b                   	pop    ebx
c001d9b4:	5e                   	pop    esi
c001d9b5:	ff e0                	jmp    eax
c001d9b7:	90                   	nop

c001d9b8 <changeTSS>:
c001d9b8:	83 ec 14             	sub    esp,0x14
c001d9bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9c0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9c3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9c8:	c1 e2 15             	shl    edx,0x15
c001d9cb:	29 d0                	sub    eax,edx
c001d9cd:	50                   	push   eax
c001d9ce:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001d9d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9d9:	05 7c 11 00 00       	add    eax,0x117c
c001d9de:	50                   	push   eax
c001d9df:	e8 e6 3a ff ff       	call   c00114ca <TSS::setESP(unsigned long)>
c001d9e4:	83 c4 1c             	add    esp,0x1c
c001d9e7:	c3                   	ret    

c001d9e8 <Process::addArgs(char**)>:
c001d9e8:	57                   	push   edi
c001d9e9:	56                   	push   esi
c001d9ea:	53                   	push   ebx
c001d9eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9f3:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9fd:	85 ff                	test   edi,edi
c001d9ff:	74 3d                	je     c001da3e <Process::addArgs(char**)+0x56>
c001da01:	8b 07                	mov    eax,DWORD PTR [edi]
c001da03:	85 c0                	test   eax,eax
c001da05:	74 37                	je     c001da3e <Process::addArgs(char**)+0x56>
c001da07:	31 db                	xor    ebx,ebx
c001da09:	83 ec 0c             	sub    esp,0xc
c001da0c:	50                   	push   eax
c001da0d:	e8 82 2d fe ff       	call   c0000794 <strlen>
c001da12:	40                   	inc    eax
c001da13:	89 04 24             	mov    DWORD PTR [esp],eax
c001da16:	e8 25 1e ff ff       	call   c000f840 <malloc>
c001da1b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da22:	5a                   	pop    edx
c001da23:	59                   	pop    ecx
c001da24:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da27:	43                   	inc    ebx
c001da28:	50                   	push   eax
c001da29:	e8 06 2e fe ff       	call   c0000834 <strcpy>
c001da2e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da34:	83 c4 10             	add    esp,0x10
c001da37:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da3a:	85 c0                	test   eax,eax
c001da3c:	75 cb                	jne    c001da09 <Process::addArgs(char**)+0x21>
c001da3e:	5b                   	pop    ebx
c001da3f:	5e                   	pop    esi
c001da40:	5f                   	pop    edi
c001da41:	c3                   	ret    

c001da42 <Process::Process(char const*, Process*, char**)>:
c001da42:	56                   	push   esi
c001da43:	53                   	push   ebx
c001da44:	83 ec 14             	sub    esp,0x14
c001da47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da4b:	05 0c 02 00 00       	add    eax,0x20c
c001da50:	bb 07 00 00 00       	mov    ebx,0x7
c001da55:	89 c6                	mov    esi,eax
c001da57:	85 db                	test   ebx,ebx
c001da59:	78 12                	js     c001da6d <Process::Process(char const*, Process*, char**)+0x2b>
c001da5b:	83 ec 0c             	sub    esp,0xc
c001da5e:	56                   	push   esi
c001da5f:	e8 1e b2 00 00       	call   c0028c82 <ThreadControlBlock::ThreadControlBlock()>
c001da64:	83 c4 10             	add    esp,0x10
c001da67:	83 c6 63             	add    esi,0x63
c001da6a:	4b                   	dec    ebx
c001da6b:	eb ea                	jmp    c001da57 <Process::Process(char const*, Process*, char**)+0x15>
c001da6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da71:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da78:	83 ec 0c             	sub    esp,0xc
c001da7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da7f:	e8 9a c9 ff ff       	call   c001a41e <Krnl::newProcessEnv(Process*)>
c001da84:	83 c4 10             	add    esp,0x10
c001da87:	89 c2                	mov    edx,eax
c001da89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da8d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da97:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001daa0:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c001daa5:	8d 50 01             	lea    edx,[eax+0x1]
c001daa8:	89 15 70 db 02 c0    	mov    DWORD PTR ds:0xc002db70,edx
c001daae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dab2:	89 02                	mov    DWORD PTR [edx],eax
c001dab4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dac3:	e8 78 1d ff ff       	call   c000f840 <malloc>
c001dac8:	83 c4 10             	add    esp,0x10
c001dacb:	89 c3                	mov    ebx,eax
c001dacd:	83 ec 08             	sub    esp,0x8
c001dad0:	6a 00                	push   0x0
c001dad2:	53                   	push   ebx
c001dad3:	e8 32 4d ff ff       	call   c001280a <VAS::VAS(bool)>
c001dad8:	83 c4 10             	add    esp,0x10
c001dadb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadf:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001daf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dafb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db05:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db0b:	85 c0                	test   eax,eax
c001db0d:	74 42                	je     c001db51 <Process::Process(char const*, Process*, char**)+0x10f>
c001db0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db13:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db19:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db23:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db33:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3d:	05 0c 01 00 00       	add    eax,0x10c
c001db42:	83 ec 08             	sub    esp,0x8
c001db45:	52                   	push   edx
c001db46:	50                   	push   eax
c001db47:	e8 e8 2c fe ff       	call   c0000834 <strcpy>
c001db4c:	83 c4 10             	add    esp,0x10
c001db4f:	eb 63                	jmp    c001dbb4 <Process::Process(char const*, Process*, char**)+0x172>
c001db51:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db59:	83 ec 0c             	sub    esp,0xc
c001db5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db60:	e8 db 1c ff ff       	call   c000f840 <malloc>
c001db65:	83 c4 10             	add    esp,0x10
c001db68:	89 c3                	mov    ebx,eax
c001db6a:	83 ec 08             	sub    esp,0x8
c001db6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db71:	53                   	push   ebx
c001db72:	e8 51 36 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001db77:	83 c4 10             	add    esp,0x10
c001db7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db88:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db8e:	83 ec 0c             	sub    esp,0xc
c001db91:	50                   	push   eax
c001db92:	e8 24 2a ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001db97:	83 c4 10             	add    esp,0x10
c001db9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9e:	05 0c 01 00 00       	add    eax,0x10c
c001dba3:	83 ec 08             	sub    esp,0x8
c001dba6:	68 bf c3 02 c0       	push   0xc002c3bf
c001dbab:	50                   	push   eax
c001dbac:	e8 83 2c fe ff       	call   c0000834 <strcpy>
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb8:	83 c0 0c             	add    eax,0xc
c001dbbb:	83 ec 08             	sub    esp,0x8
c001dbbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc2:	50                   	push   eax
c001dbc3:	e8 6c 2c fe ff       	call   c0000834 <strcpy>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	83 ec 08             	sub    esp,0x8
c001dbce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd6:	e8 0d fe ff ff       	call   c001d9e8 <Process::addArgs(char**)>
c001dbdb:	83 c4 10             	add    esp,0x10
c001dbde:	83 ec 08             	sub    esp,0x8
c001dbe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbe9:	e8 87 ee ff ff       	call   c001ca75 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbee:	83 c4 10             	add    esp,0x10
c001dbf1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbf5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbf9:	83 f0 01             	xor    eax,0x1
c001dbfc:	88 c2                	mov    dl,al
c001dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc02:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc08:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc0d:	83 ec 08             	sub    esp,0x8
c001dc10:	50                   	push   eax
c001dc11:	68 bc c4 02 c0       	push   0xc002c4bc
c001dc16:	e8 11 53 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001dc1b:	83 c4 10             	add    esp,0x10
c001dc1e:	90                   	nop
c001dc1f:	83 c4 14             	add    esp,0x14
c001dc22:	5b                   	pop    ebx
c001dc23:	5e                   	pop    esi
c001dc24:	c3                   	ret    
c001dc25:	90                   	nop

c001dc26 <Process::Process(bool, char const*, Process*, char**)>:
c001dc26:	56                   	push   esi
c001dc27:	53                   	push   ebx
c001dc28:	83 ec 24             	sub    esp,0x24
c001dc2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc37:	05 0c 02 00 00       	add    eax,0x20c
c001dc3c:	bb 07 00 00 00       	mov    ebx,0x7
c001dc41:	89 c6                	mov    esi,eax
c001dc43:	85 db                	test   ebx,ebx
c001dc45:	78 12                	js     c001dc59 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc47:	83 ec 0c             	sub    esp,0xc
c001dc4a:	56                   	push   esi
c001dc4b:	e8 32 b0 00 00       	call   c0028c82 <ThreadControlBlock::ThreadControlBlock()>
c001dc50:	83 c4 10             	add    esp,0x10
c001dc53:	83 c6 63             	add    esi,0x63
c001dc56:	4b                   	dec    ebx
c001dc57:	eb ea                	jmp    c001dc43 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc64:	83 ec 0c             	sub    esp,0xc
c001dc67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc6b:	e8 ae c7 ff ff       	call   c001a41e <Krnl::newProcessEnv(Process*)>
c001dc70:	83 c4 10             	add    esp,0x10
c001dc73:	89 c2                	mov    edx,eax
c001dc75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc79:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc83:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc8c:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c001dc91:	8d 50 01             	lea    edx,[eax+0x1]
c001dc94:	89 15 70 db 02 c0    	mov    DWORD PTR ds:0xc002db70,edx
c001dc9a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc9e:	89 02                	mov    DWORD PTR [edx],eax
c001dca0:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dca8:	83 ec 0c             	sub    esp,0xc
c001dcab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcaf:	e8 8c 1b ff ff       	call   c000f840 <malloc>
c001dcb4:	83 c4 10             	add    esp,0x10
c001dcb7:	89 c3                	mov    ebx,eax
c001dcb9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcbe:	83 ec 08             	sub    esp,0x8
c001dcc1:	50                   	push   eax
c001dcc2:	53                   	push   ebx
c001dcc3:	e8 42 4b ff ff       	call   c001280a <VAS::VAS(bool)>
c001dcc8:	83 c4 10             	add    esp,0x10
c001dccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccf:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dceb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcfb:	85 c0                	test   eax,eax
c001dcfd:	74 42                	je     c001dd41 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dcff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd03:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd09:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd13:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd23:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2d:	05 0c 01 00 00       	add    eax,0x10c
c001dd32:	83 ec 08             	sub    esp,0x8
c001dd35:	52                   	push   edx
c001dd36:	50                   	push   eax
c001dd37:	e8 f8 2a fe ff       	call   c0000834 <strcpy>
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	eb 63                	jmp    c001dda4 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd41:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd49:	83 ec 0c             	sub    esp,0xc
c001dd4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd50:	e8 eb 1a ff ff       	call   c000f840 <malloc>
c001dd55:	83 c4 10             	add    esp,0x10
c001dd58:	89 c3                	mov    ebx,eax
c001dd5a:	83 ec 08             	sub    esp,0x8
c001dd5d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd61:	53                   	push   ebx
c001dd62:	e8 61 34 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001dd67:	83 c4 10             	add    esp,0x10
c001dd6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd78:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd7e:	83 ec 0c             	sub    esp,0xc
c001dd81:	50                   	push   eax
c001dd82:	e8 34 28 ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8e:	05 0c 01 00 00       	add    eax,0x10c
c001dd93:	83 ec 08             	sub    esp,0x8
c001dd96:	68 bf c3 02 c0       	push   0xc002c3bf
c001dd9b:	50                   	push   eax
c001dd9c:	e8 93 2a fe ff       	call   c0000834 <strcpy>
c001dda1:	83 c4 10             	add    esp,0x10
c001dda4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda8:	83 c0 0c             	add    eax,0xc
c001ddab:	83 ec 08             	sub    esp,0x8
c001ddae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddb2:	50                   	push   eax
c001ddb3:	e8 7c 2a fe ff       	call   c0000834 <strcpy>
c001ddb8:	83 c4 10             	add    esp,0x10
c001ddbb:	83 ec 08             	sub    esp,0x8
c001ddbe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddc6:	e8 1d fc ff ff       	call   c001d9e8 <Process::addArgs(char**)>
c001ddcb:	83 c4 10             	add    esp,0x10
c001ddce:	90                   	nop
c001ddcf:	83 c4 24             	add    esp,0x24
c001ddd2:	5b                   	pop    ebx
c001ddd3:	5e                   	pop    esi
c001ddd4:	c3                   	ret    

c001ddd5 <disableIRQs()>:
c001ddd5:	fa                   	cli    
c001ddd6:	ff 05 2c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b2c
c001dddc:	c3                   	ret    

c001dddd <getIRQNestingLevel()>:
c001dddd:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c001dde2:	c3                   	ret    

c001dde3 <enableIRQs()>:
c001dde3:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c001dde8:	48                   	dec    eax
c001dde9:	a3 2c 1b 03 c0       	mov    ds:0xc0031b2c,eax
c001ddee:	75 01                	jne    c001ddf1 <enableIRQs()+0xe>
c001ddf0:	fb                   	sti    
c001ddf1:	c3                   	ret    

c001ddf2 <lockScheduler()>:
c001ddf2:	eb e1                	jmp    c001ddd5 <disableIRQs()>

c001ddf4 <unlockScheduler()>:
c001ddf4:	eb ed                	jmp    c001dde3 <enableIRQs()>

c001ddf6 <userModeEntryPoint(void*)>:
c001ddf6:	83 ec 0c             	sub    esp,0xc
c001ddf9:	e8 f6 ff ff ff       	call   c001ddf4 <unlockScheduler()>
c001ddfe:	fb                   	sti    
c001ddff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de07:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de11:	83 c4 0c             	add    esp,0xc
c001de14:	e9 11 25 fe ff       	jmp    c000032a <goToUsermode>

c001de19 <lockStuff()>:
c001de19:	e8 b7 ff ff ff       	call   c001ddd5 <disableIRQs()>
c001de1e:	ff 05 28 1b 03 c0    	inc    DWORD PTR ds:0xc0031b28
c001de24:	c3                   	ret    

c001de25 <taskStartupFunction>:
c001de25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de2a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de2d:	c3                   	ret    

c001de2e <updateTimeUsed()>:
c001de2e:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001de33:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de39:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de40:	74 50                	je     c001de92 <updateTimeUsed()+0x64>
c001de42:	57                   	push   edi
c001de43:	56                   	push   esi
c001de44:	53                   	push   ebx
c001de45:	0f 31                	rdtsc  
c001de47:	89 c1                	mov    ecx,eax
c001de49:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c001de4e:	2b 0d 58 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b58
c001de54:	89 d3                	mov    ebx,edx
c001de56:	89 0d 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,ecx
c001de5c:	1b 1d 5c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b5c
c001de62:	a3 58 1b 03 c0       	mov    ds:0xc0031b58,eax
c001de67:	89 1d 64 1b 03 c0    	mov    DWORD PTR ds:0xc0031b64,ebx
c001de6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de72:	89 15 6c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b6c,edx
c001de78:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de7b:	89 15 5c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b5c,edx
c001de81:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de84:	01 f1                	add    ecx,esi
c001de86:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de89:	11 fb                	adc    ebx,edi
c001de8b:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de8e:	5b                   	pop    ebx
c001de8f:	5e                   	pop    esi
c001de90:	5f                   	pop    edi
c001de91:	c3                   	ret    
c001de92:	c3                   	ret    

c001de93 <switchToThread(ThreadControlBlock*)>:
c001de93:	53                   	push   ebx
c001de94:	83 ec 08             	sub    esp,0x8
c001de97:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001de9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dea0:	85 c0                	test   eax,eax
c001dea2:	75 30                	jne    c001ded4 <switchToThread(ThreadControlBlock*)+0x41>
c001dea4:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dea7:	3c ff                	cmp    al,0xff
c001dea9:	74 25                	je     c001ded0 <switchToThread(ThreadControlBlock*)+0x3d>
c001deab:	0f b6 d0             	movzx  edx,al
c001deae:	b8 84 03 00 00       	mov    eax,0x384
c001deb3:	29 d0                	sub    eax,edx
c001deb5:	c1 e0 10             	shl    eax,0x10
c001deb8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001debb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001debe:	e8 6b ff ff ff       	call   c001de2e <updateTimeUsed()>
c001dec3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dec7:	83 c4 08             	add    esp,0x8
c001deca:	5b                   	pop    ebx
c001decb:	e9 92 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ded0:	31 c0                	xor    eax,eax
c001ded2:	eb e7                	jmp    c001debb <switchToThread(ThreadControlBlock*)+0x28>
c001ded4:	c7 05 24 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b24,0x1
c001dede:	83 c4 08             	add    esp,0x8
c001dee1:	5b                   	pop    ebx
c001dee2:	c3                   	ret    
c001dee3:	90                   	nop

c001dee4 <Semaphore::Semaphore(int)>:
c001dee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001deec:	89 10                	mov    DWORD PTR [eax],edx
c001deee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001def9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df0f:	90                   	nop
c001df10:	c3                   	ret    
c001df11:	90                   	nop

c001df12 <Mutex::Mutex()>:
c001df12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df16:	6a 01                	push   0x1
c001df18:	50                   	push   eax
c001df19:	e8 c6 ff ff ff       	call   c001dee4 <Semaphore::Semaphore(int)>
c001df1e:	83 c4 08             	add    esp,0x8
c001df21:	90                   	nop
c001df22:	c3                   	ret    
c001df23:	90                   	nop

c001df24 <Process::createThread(void (*)(void*), void*, int)>:
c001df24:	55                   	push   ebp
c001df25:	31 c9                	xor    ecx,ecx
c001df27:	57                   	push   edi
c001df28:	56                   	push   esi
c001df29:	53                   	push   ebx
c001df2a:	83 ec 1c             	sub    esp,0x1c
c001df2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df31:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df38:	89 f2                	mov    edx,esi
c001df3a:	0f b7 c2             	movzx  eax,dx
c001df3d:	83 e2 01             	and    edx,0x1
c001df40:	74 14                	je     c001df56 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df42:	d1 f8                	sar    eax,1
c001df44:	41                   	inc    ecx
c001df45:	89 c2                	mov    edx,eax
c001df47:	83 f9 10             	cmp    ecx,0x10
c001df4a:	75 ee                	jne    c001df3a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df4c:	83 c4 1c             	add    esp,0x1c
c001df4f:	31 c0                	xor    eax,eax
c001df51:	5b                   	pop    ebx
c001df52:	5e                   	pop    esi
c001df53:	5f                   	pop    edi
c001df54:	5d                   	pop    ebp
c001df55:	c3                   	ret    
c001df56:	83 ec 08             	sub    esp,0x8
c001df59:	b8 01 00 00 00       	mov    eax,0x1
c001df5e:	d3 e0                	shl    eax,cl
c001df60:	09 c6                	or     esi,eax
c001df62:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df68:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df6f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df72:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df75:	01 ce                	add    esi,ecx
c001df77:	89 f0                	mov    eax,esi
c001df79:	c1 e0 05             	shl    eax,0x5
c001df7c:	01 c6                	add    esi,eax
c001df7e:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df81:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df87:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df91:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df97:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df9d:	89 ca                	mov    edx,ecx
c001df9f:	f7 da                	neg    edx
c001dfa1:	c1 e2 15             	shl    edx,0x15
c001dfa4:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfaa:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfb0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfb4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfbe:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfc4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfc8:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfce:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfd8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfe2:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfe9:	50                   	push   eax
c001dfea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfee:	68 48 1b 03 c0       	push   0xc0031b48
c001dff3:	e8 18 ab 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dff8:	83 c4 10             	add    esp,0x10
c001dffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfff:	83 c4 1c             	add    esp,0x1c
c001e002:	5b                   	pop    ebx
c001e003:	5e                   	pop    esi
c001e004:	5f                   	pop    edi
c001e005:	5d                   	pop    ebp
c001e006:	c3                   	ret    
c001e007:	90                   	nop

c001e008 <Process::createUserThread()>:
c001e008:	83 ec 0c             	sub    esp,0xc
c001e00b:	68 80 00 00 00       	push   0x80
c001e010:	6a 00                	push   0x0
c001e012:	68 f6 dd 01 c0       	push   0xc001ddf6
c001e017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e01b:	e8 04 ff ff ff       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c001e020:	83 c4 1c             	add    esp,0x1c
c001e023:	c3                   	ret    

c001e024 <setupMultitasking(void (*)())>:
c001e024:	56                   	push   esi
c001e025:	53                   	push   ebx
c001e026:	53                   	push   ebx
c001e027:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e02b:	eb 10                	jmp    c001e03d <setupMultitasking(void (*)())+0x19>
c001e02d:	83 ec 0c             	sub    esp,0xc
c001e030:	68 48 1b 03 c0       	push   0xc0031b48
c001e035:	e8 28 aa 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	83 ec 0c             	sub    esp,0xc
c001e040:	68 48 1b 03 c0       	push   0xc0031b48
c001e045:	e8 fc a9 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e04a:	83 c4 10             	add    esp,0x10
c001e04d:	84 c0                	test   al,al
c001e04f:	74 dc                	je     c001e02d <setupMultitasking(void (*)())+0x9>
c001e051:	83 ec 0c             	sub    esp,0xc
c001e054:	68 3f 07 00 00       	push   0x73f
c001e059:	e8 e2 17 ff ff       	call   c000f840 <malloc>
c001e05e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e065:	89 c3                	mov    ebx,eax
c001e067:	6a 00                	push   0x0
c001e069:	68 c3 c3 02 c0       	push   0xc002c3c3
c001e06e:	6a 01                	push   0x1
c001e070:	50                   	push   eax
c001e071:	e8 b0 fb ff ff       	call   c001dc26 <Process::Process(bool, char const*, Process*, char**)>
c001e076:	83 c4 18             	add    esp,0x18
c001e079:	89 1d 54 1b 03 c0    	mov    DWORD PTR ds:0xc0031b54,ebx
c001e07f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e085:	68 e4 c4 02 c0       	push   0xc002c4e4
c001e08a:	e8 9d 4e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e08f:	58                   	pop    eax
c001e090:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e096:	e8 a2 2c ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001e09b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0a3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0ac:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0b6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0bc:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0c2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0cc:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0d6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0e0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0e6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0ec:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0f6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0fc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e106:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e10c:	5a                   	pop    edx
c001e10d:	59                   	pop    ecx
c001e10e:	68 bf c3 02 c0       	push   0xc002c3bf
c001e113:	50                   	push   eax
c001e114:	e8 1b 27 fe ff       	call   c0000834 <strcpy>
c001e119:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e120:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e124:	83 c4 14             	add    esp,0x14
c001e127:	5b                   	pop    ebx
c001e128:	5e                   	pop    esi
c001e129:	e9 26 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e12e <schedule()>:
c001e12e:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001e133:	85 c0                	test   eax,eax
c001e135:	74 0b                	je     c001e142 <schedule()+0x14>
c001e137:	c7 05 24 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b24,0x1
c001e141:	c3                   	ret    
c001e142:	53                   	push   ebx
c001e143:	83 ec 14             	sub    esp,0x14
c001e146:	68 48 1b 03 c0       	push   0xc0031b48
c001e14b:	e8 f6 a8 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e150:	83 c4 10             	add    esp,0x10
c001e153:	84 c0                	test   al,al
c001e155:	75 38                	jne    c001e18f <schedule()+0x61>
c001e157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e15c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e15f:	4a                   	dec    edx
c001e160:	74 32                	je     c001e194 <schedule()+0x66>
c001e162:	83 ec 0c             	sub    esp,0xc
c001e165:	68 48 1b 03 c0       	push   0xc0031b48
c001e16a:	e8 cf a8 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e16f:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e176:	89 c3                	mov    ebx,eax
c001e178:	e8 e5 a8 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e17d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e187:	e8 07 fd ff ff       	call   c001de93 <switchToThread(ThreadControlBlock*)>
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	83 c4 08             	add    esp,0x8
c001e192:	5b                   	pop    ebx
c001e193:	c3                   	ret    
c001e194:	83 ec 08             	sub    esp,0x8
c001e197:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e19e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1a4:	68 48 1b 03 c0       	push   0xc0031b48
c001e1a9:	e8 62 a9 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1ae:	83 c4 10             	add    esp,0x10
c001e1b1:	eb af                	jmp    c001e162 <schedule()+0x34>

c001e1b3 <unlockStuff()>:
c001e1b3:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001e1b8:	48                   	dec    eax
c001e1b9:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c001e1be:	75 09                	jne    c001e1c9 <unlockStuff()+0x16>
c001e1c0:	a1 24 1b 03 c0       	mov    eax,ds:0xc0031b24
c001e1c5:	85 c0                	test   eax,eax
c001e1c7:	75 05                	jne    c001e1ce <unlockStuff()+0x1b>
c001e1c9:	e9 15 fc ff ff       	jmp    c001dde3 <enableIRQs()>
c001e1ce:	83 ec 0c             	sub    esp,0xc
c001e1d1:	c7 05 24 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b24,0x0
c001e1db:	e8 4e ff ff ff       	call   c001e12e <schedule()>
c001e1e0:	83 c4 0c             	add    esp,0xc
c001e1e3:	e9 fb fb ff ff       	jmp    c001dde3 <enableIRQs()>

c001e1e8 <Semaphore::tryAcquire()>:
c001e1e8:	83 ec 0c             	sub    esp,0xc
c001e1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ef:	e8 25 fc ff ff       	call   c001de19 <lockStuff()>
c001e1f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1f7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1f9:	7c 0b                	jl     c001e206 <Semaphore::tryAcquire()+0x1e>
c001e1fb:	e8 b3 ff ff ff       	call   c001e1b3 <unlockStuff()>
c001e200:	31 c0                	xor    eax,eax
c001e202:	83 c4 0c             	add    esp,0xc
c001e205:	c3                   	ret    
c001e206:	42                   	inc    edx
c001e207:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e20a:	e8 a4 ff ff ff       	call   c001e1b3 <unlockStuff()>
c001e20f:	b0 01                	mov    al,0x1
c001e211:	83 c4 0c             	add    esp,0xc
c001e214:	c3                   	ret    
c001e215:	90                   	nop

c001e216 <Semaphore::assertLocked(char const*)>:
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e221:	e8 f3 fb ff ff       	call   c001de19 <lockStuff()>
c001e226:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e228:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e22b:	7c 05                	jl     c001e232 <Semaphore::assertLocked(char const*)+0x1c>
c001e22d:	83 c4 0c             	add    esp,0xc
c001e230:	eb 81                	jmp    c001e1b3 <unlockStuff()>
c001e232:	83 ec 0c             	sub    esp,0xc
c001e235:	52                   	push   edx
c001e236:	e8 92 c3 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001e23b:	83 c4 10             	add    esp,0x10
c001e23e:	83 c4 0c             	add    esp,0xc
c001e241:	e9 6d ff ff ff       	jmp    c001e1b3 <unlockStuff()>

c001e246 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e246:	83 ec 0c             	sub    esp,0xc
c001e249:	e8 8f fb ff ff       	call   c001dddd <getIRQNestingLevel()>
c001e24e:	83 ec 08             	sub    esp,0x8
c001e251:	50                   	push   eax
c001e252:	68 18 c5 02 c0       	push   0xc002c518
c001e257:	e8 d0 4c ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e25c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e265:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e268:	e8 c1 fe ff ff       	call   c001e12e <schedule()>
c001e26d:	e8 82 fb ff ff       	call   c001ddf4 <unlockScheduler()>
c001e272:	e8 66 fb ff ff       	call   c001dddd <getIRQNestingLevel()>
c001e277:	5a                   	pop    edx
c001e278:	59                   	pop    ecx
c001e279:	50                   	push   eax
c001e27a:	68 4c c5 02 c0       	push   0xc002c54c
c001e27f:	e8 a8 4c ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e284:	83 c4 1c             	add    esp,0x1c
c001e287:	c3                   	ret    

c001e288 <blockTask(TaskState)>:
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e28f:	e8 5e fb ff ff       	call   c001ddf2 <lockScheduler()>
c001e294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e299:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e29c:	e8 8d fe ff ff       	call   c001e12e <schedule()>
c001e2a1:	83 c4 0c             	add    esp,0xc
c001e2a4:	e9 4b fb ff ff       	jmp    c001ddf4 <unlockScheduler()>

c001e2a9 <waitTask(int, int*, int)>:
c001e2a9:	83 ec 18             	sub    esp,0x18
c001e2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2b5:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c1:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2c4:	6a 07                	push   0x7
c001e2c6:	e8 bd ff ff ff       	call   c001e288 <blockTask(TaskState)>
c001e2cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2d6:	85 d2                	test   edx,edx
c001e2d8:	74 0a                	je     c001e2e4 <waitTask(int, int*, int)+0x3b>
c001e2da:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2dd:	89 02                	mov    DWORD PTR [edx],eax
c001e2df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e4:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2e7:	83 c4 0c             	add    esp,0xc
c001e2ea:	c3                   	ret    

c001e2eb <nanoSleepUntil(unsigned long long)>:
c001e2eb:	83 ec 0c             	sub    esp,0xc
c001e2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2f6:	3b 05 70 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec70
c001e2fc:	89 d1                	mov    ecx,edx
c001e2fe:	1b 0d 74 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec74
c001e304:	73 04                	jae    c001e30a <nanoSleepUntil(unsigned long long)+0x1f>
c001e306:	83 c4 0c             	add    esp,0xc
c001e309:	c3                   	ret    
c001e30a:	e8 0a fb ff ff       	call   c001de19 <lockStuff()>
c001e30f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e315:	83 ec 08             	sub    esp,0x8
c001e318:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e31b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e31e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e324:	68 3c 1b 03 c0       	push   0xc0031b3c
c001e329:	e8 e2 a7 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e32e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e335:	e8 4e ff ff ff       	call   c001e288 <blockTask(TaskState)>
c001e33a:	83 c4 1c             	add    esp,0x1c
c001e33d:	e9 71 fe ff ff       	jmp    c001e1b3 <unlockStuff()>

c001e342 <nanoSleep(unsigned long long)>:
c001e342:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c001e347:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c001e34d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e351:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e355:	eb 94                	jmp    c001e2eb <nanoSleepUntil(unsigned long long)>

c001e357 <sleep(unsigned long long)>:
c001e357:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e35f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e364:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e368:	01 ca                	add    edx,ecx
c001e36a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e36e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e372:	eb ce                	jmp    c001e342 <nanoSleep(unsigned long long)>

c001e374 <Semaphore::acquire()>:
c001e374:	83 ec 0c             	sub    esp,0xc
c001e377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37b:	e8 99 fa ff ff       	call   c001de19 <lockStuff()>
c001e380:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e383:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e385:	7d 0c                	jge    c001e393 <Semaphore::acquire()+0x1f>
c001e387:	42                   	inc    edx
c001e388:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e38b:	83 c4 0c             	add    esp,0xc
c001e38e:	e9 20 fe ff ff       	jmp    c001e1b3 <unlockStuff()>
c001e393:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e399:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3a3:	85 d2                	test   edx,edx
c001e3a5:	74 2a                	je     c001e3d1 <Semaphore::acquire()+0x5d>
c001e3a7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3aa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3b0:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3bf:	6a 05                	push   0x5
c001e3c1:	e8 c2 fe ff ff       	call   c001e288 <blockTask(TaskState)>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	83 c4 0c             	add    esp,0xc
c001e3cc:	e9 e2 fd ff ff       	jmp    c001e1b3 <unlockStuff()>
c001e3d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3da:	eb d7                	jmp    c001e3b3 <Semaphore::acquire()+0x3f>

c001e3dc <taskReturned>:
c001e3dc:	83 ec 18             	sub    esp,0x18
c001e3df:	68 80 c5 02 c0       	push   0xc002c580
c001e3e4:	e8 e4 c1 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	6a 02                	push   0x2
c001e3f1:	e8 92 fe ff ff       	call   c001e288 <blockTask(TaskState)>
c001e3f6:	e8 f7 f9 ff ff       	call   c001ddf2 <lockScheduler()>
c001e3fb:	e8 2e fd ff ff       	call   c001e12e <schedule()>
c001e400:	e8 ef f9 ff ff       	call   c001ddf4 <unlockScheduler()>
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	eb e2                	jmp    c001e3ec <taskReturned+0x10>

c001e40a <unblockTask(ThreadControlBlock*)>:
c001e40a:	53                   	push   ebx
c001e40b:	83 ec 08             	sub    esp,0x8
c001e40e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e412:	e8 db f9 ff ff       	call   c001ddf2 <lockScheduler()>
c001e417:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e41a:	85 c0                	test   eax,eax
c001e41c:	74 5c                	je     c001e47a <unblockTask(ThreadControlBlock*)+0x70>
c001e41e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e421:	48                   	dec    eax
c001e422:	74 31                	je     c001e455 <unblockTask(ThreadControlBlock*)+0x4b>
c001e424:	83 ec 0c             	sub    esp,0xc
c001e427:	68 48 1b 03 c0       	push   0xc0031b48
c001e42c:	e8 0d a6 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e431:	83 c4 10             	add    esp,0x10
c001e434:	85 c0                	test   eax,eax
c001e436:	75 17                	jne    c001e44f <unblockTask(ThreadControlBlock*)+0x45>
c001e438:	eb 65                	jmp    c001e49f <unblockTask(ThreadControlBlock*)+0x95>
c001e43a:	83 ec 08             	sub    esp,0x8
c001e43d:	50                   	push   eax
c001e43e:	68 48 1b 03 c0       	push   0xc0031b48
c001e443:	e8 d0 a8 00 00       	call   c0028d18 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e448:	83 c4 10             	add    esp,0x10
c001e44b:	85 c0                	test   eax,eax
c001e44d:	74 50                	je     c001e49f <unblockTask(ThreadControlBlock*)+0x95>
c001e44f:	39 c3                	cmp    ebx,eax
c001e451:	75 e7                	jne    c001e43a <unblockTask(ThreadControlBlock*)+0x30>
c001e453:	eb 1c                	jmp    c001e471 <unblockTask(ThreadControlBlock*)+0x67>
c001e455:	83 ec 0c             	sub    esp,0xc
c001e458:	68 70 c6 02 c0       	push   0xc002c670
c001e45d:	e8 ca 4a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e462:	c7 04 24 fc c5 02 c0 	mov    DWORD PTR [esp],0xc002c5fc
c001e469:	e8 be 4a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e46e:	83 c4 10             	add    esp,0x10
c001e471:	83 c4 08             	add    esp,0x8
c001e474:	5b                   	pop    ebx
c001e475:	e9 7a f9 ff ff       	jmp    c001ddf4 <unlockScheduler()>
c001e47a:	83 ec 0c             	sub    esp,0xc
c001e47d:	68 b4 c5 02 c0       	push   0xc002c5b4
c001e482:	e8 a5 4a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e487:	c7 04 24 fc c5 02 c0 	mov    DWORD PTR [esp],0xc002c5fc
c001e48e:	e8 99 4a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e493:	83 c4 10             	add    esp,0x10
c001e496:	83 c4 08             	add    esp,0x8
c001e499:	5b                   	pop    ebx
c001e49a:	e9 55 f9 ff ff       	jmp    c001ddf4 <unlockScheduler()>
c001e49f:	83 ec 08             	sub    esp,0x8
c001e4a2:	53                   	push   ebx
c001e4a3:	68 48 1b 03 c0       	push   0xc0031b48
c001e4a8:	e8 63 a6 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	83 c4 08             	add    esp,0x8
c001e4b3:	5b                   	pop    ebx
c001e4b4:	e9 3b f9 ff ff       	jmp    c001ddf4 <unlockScheduler()>

c001e4b9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4b9:	55                   	push   ebp
c001e4ba:	57                   	push   edi
c001e4bb:	56                   	push   esi
c001e4bc:	53                   	push   ebx
c001e4bd:	83 ec 1c             	sub    esp,0x1c
c001e4c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4c7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4cd:	85 ff                	test   edi,edi
c001e4cf:	7e 20                	jle    c001e4f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4d1:	31 f6                	xor    esi,esi
c001e4d3:	83 ec 0c             	sub    esp,0xc
c001e4d6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4dd:	46                   	inc    esi
c001e4de:	e8 6d 13 ff ff       	call   c000f850 <free>
c001e4e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4e6:	83 c4 10             	add    esp,0x10
c001e4e9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4ef:	7f e2                	jg     c001e4d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4f1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e500:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e503:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e506:	d3 c0                	rol    eax,cl
c001e508:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e50f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e512:	89 f7                	mov    edi,esi
c001e514:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e51c:	0f 85 74 01 00 00    	jne    c001e696 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e522:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e528:	85 ed                	test   ebp,ebp
c001e52a:	74 1b                	je     c001e547 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e52c:	83 ec 0c             	sub    esp,0xc
c001e52f:	55                   	push   ebp
c001e530:	e8 05 be ff ff       	call   c001a33a <EnvVarContainer::~EnvVarContainer()>
c001e535:	59                   	pop    ecx
c001e536:	5e                   	pop    esi
c001e537:	6a 0c                	push   0xc
c001e539:	55                   	push   ebp
c001e53a:	e8 0d 49 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c001e53f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e542:	83 c4 10             	add    esp,0x10
c001e545:	89 f7                	mov    edi,esi
c001e547:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e54d:	85 c0                	test   eax,eax
c001e54f:	0f 84 aa 00 00 00    	je     c001e5ff <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e555:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e558:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e55c:	31 c9                	xor    ecx,ecx
c001e55e:	eb 10                	jmp    c001e570 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e560:	41                   	inc    ecx
c001e561:	83 f9 10             	cmp    ecx,0x10
c001e564:	0f 84 95 00 00 00    	je     c001e5ff <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e56a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e570:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e577:	d3 fa                	sar    edx,cl
c001e579:	83 e2 01             	and    edx,0x1
c001e57c:	74 e2                	je     c001e560 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e57e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e581:	01 ca                	add    edx,ecx
c001e583:	89 d5                	mov    ebp,edx
c001e585:	c1 e5 05             	shl    ebp,0x5
c001e588:	01 ea                	add    edx,ebp
c001e58a:	01 d0                	add    eax,edx
c001e58c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e592:	83 fd 07             	cmp    ebp,0x7
c001e595:	75 c9                	jne    c001e560 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e597:	05 40 02 00 00       	add    eax,0x240
c001e59c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e59f:	83 fd ff             	cmp    ebp,0xffffffff
c001e5a2:	0f 8c 08 01 00 00    	jl     c001e6b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5a8:	0f 84 b9 01 00 00    	je     c001e767 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5ae:	85 ed                	test   ebp,ebp
c001e5b0:	0f 84 a0 01 00 00    	je     c001e756 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5b6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5b8:	75 a6                	jne    c001e560 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ba:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5c4:	01 d0                	add    eax,edx
c001e5c6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5d3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5d6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5dc:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5e3:	50                   	push   eax
c001e5e4:	e8 21 fe ff ff       	call   c001e40a <unblockTask(ThreadControlBlock*)>
c001e5e9:	83 c4 10             	add    esp,0x10
c001e5ec:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5f3:	89 f7                	mov    edi,esi
c001e5f5:	41                   	inc    ecx
c001e5f6:	83 f9 10             	cmp    ecx,0x10
c001e5f9:	0f 85 6b ff ff ff    	jne    c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5ff:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e605:	85 c0                	test   eax,eax
c001e607:	74 5d                	je     c001e666 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e609:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e60f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e615:	74 4f                	je     c001e666 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e617:	83 ec 0c             	sub    esp,0xc
c001e61a:	68 48 1b 03 c0       	push   0xc0031b48
c001e61f:	e8 1a a4 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e624:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e62b:	89 c7                	mov    edi,eax
c001e62d:	e8 14 a4 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e632:	83 c4 10             	add    esp,0x10
c001e635:	84 c0                	test   al,al
c001e637:	0f 84 e4 00 00 00    	je     c001e721 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e63d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e640:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e646:	85 d2                	test   edx,edx
c001e648:	74 0f                	je     c001e659 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e64a:	83 ec 0c             	sub    esp,0xc
c001e64d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e64f:	52                   	push   edx
c001e650:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e653:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e656:	83 c4 10             	add    esp,0x10
c001e659:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e663:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e666:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e66c:	85 db                	test   ebx,ebx
c001e66e:	74 16                	je     c001e686 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e670:	83 ec 0c             	sub    esp,0xc
c001e673:	53                   	push   ebx
c001e674:	e8 7d 3b ff ff       	call   c00121f6 <VAS::~VAS()>
c001e679:	58                   	pop    eax
c001e67a:	5a                   	pop    edx
c001e67b:	6a 10                	push   0x10
c001e67d:	53                   	push   ebx
c001e67e:	e8 c9 47 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	83 ec 0c             	sub    esp,0xc
c001e689:	68 ca c3 02 c0       	push   0xc002c3ca
c001e68e:	e8 99 48 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e693:	83 c4 10             	add    esp,0x10
c001e696:	83 ec 08             	sub    esp,0x8
c001e699:	68 3f 07 00 00       	push   0x73f
c001e69e:	68 d8 c3 02 c0       	push   0xc002c3d8
c001e6a3:	e8 84 48 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e6a8:	83 c4 2c             	add    esp,0x2c
c001e6ab:	5b                   	pop    ebx
c001e6ac:	5e                   	pop    esi
c001e6ad:	5f                   	pop    edi
c001e6ae:	5d                   	pop    ebp
c001e6af:	c3                   	ret    
c001e6b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6b4:	83 ec 0c             	sub    esp,0xc
c001e6b7:	68 b4 c6 02 c0       	push   0xc002c6b4
c001e6bc:	e8 0c bf ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001e6c1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	89 f7                	mov    edi,esi
c001e6c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6cd:	e9 8e fe ff ff       	jmp    c001e560 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6d2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6d8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6de:	75 1c                	jne    c001e6fc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	68 1c c7 02 c0       	push   0xc002c71c
c001e6e8:	e8 3f 48 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e6ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6f4:	e8 8f fb ff ff       	call   c001e288 <blockTask(TaskState)>
c001e6f9:	83 c4 10             	add    esp,0x10
c001e6fc:	83 ec 08             	sub    esp,0x8
c001e6ff:	56                   	push   esi
c001e700:	68 48 1b 03 c0       	push   0xc0031b48
c001e705:	e8 06 a4 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e70a:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e711:	e8 28 a3 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e716:	83 c4 10             	add    esp,0x10
c001e719:	39 f8                	cmp    eax,edi
c001e71b:	0f 84 1c ff ff ff    	je     c001e63d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e721:	83 ec 0c             	sub    esp,0xc
c001e724:	68 48 1b 03 c0       	push   0xc0031b48
c001e729:	e8 10 a3 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e72e:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e735:	89 c6                	mov    esi,eax
c001e737:	e8 26 a3 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e73c:	83 c4 10             	add    esp,0x10
c001e73f:	39 f3                	cmp    ebx,esi
c001e741:	74 b9                	je     c001e6fc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e743:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e746:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e749:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e74f:	75 ab                	jne    c001e6fc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e751:	e9 7c ff ff ff       	jmp    c001e6d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e756:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e75a:	83 ec 0c             	sub    esp,0xc
c001e75d:	68 e8 c6 02 c0       	push   0xc002c6e8
c001e762:	e9 55 ff ff ff       	jmp    c001e6bc <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e767:	8b 36                	mov    esi,DWORD PTR [esi]
c001e769:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e76d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e770:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e773:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e779:	01 d7                	add    edi,edx
c001e77b:	89 f8                	mov    eax,edi
c001e77d:	e9 44 fe ff ff       	jmp    c001e5c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e782 <cleanerTaskFunction(void*)>:
c001e782:	53                   	push   ebx
c001e783:	83 ec 08             	sub    esp,0x8
c001e786:	e8 69 f6 ff ff       	call   c001ddf4 <unlockScheduler()>
c001e78b:	e8 62 f6 ff ff       	call   c001ddf2 <lockScheduler()>
c001e790:	80 3d 0c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b0c,0x0
c001e797:	0f 85 8e 00 00 00    	jne    c001e82b <cleanerTaskFunction(void*)+0xa9>
c001e79d:	83 ec 0c             	sub    esp,0xc
c001e7a0:	6a 02                	push   0x2
c001e7a2:	e8 9f fa ff ff       	call   c001e246 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7a7:	83 c4 10             	add    esp,0x10
c001e7aa:	c6 05 0c 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b0c,0x0
c001e7b1:	e8 63 f6 ff ff       	call   c001de19 <lockStuff()>
c001e7b6:	e8 37 f6 ff ff       	call   c001ddf2 <lockScheduler()>
c001e7bb:	83 ec 0c             	sub    esp,0xc
c001e7be:	68 30 1b 03 c0       	push   0xc0031b30
c001e7c3:	e8 7e a2 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7c8:	83 c4 10             	add    esp,0x10
c001e7cb:	84 c0                	test   al,al
c001e7cd:	75 40                	jne    c001e80f <cleanerTaskFunction(void*)+0x8d>
c001e7cf:	83 ec 0c             	sub    esp,0xc
c001e7d2:	68 30 1b 03 c0       	push   0xc0031b30
c001e7d7:	e8 62 a2 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7dc:	c7 04 24 30 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b30
c001e7e3:	89 c3                	mov    ebx,eax
c001e7e5:	e8 78 a2 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7ea:	c7 04 24 ee c3 02 c0 	mov    DWORD PTR [esp],0xc002c3ee
c001e7f1:	e8 36 47 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e7f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7f9:	e8 bb fc ff ff       	call   c001e4b9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7fe:	c7 04 24 07 c4 02 c0 	mov    DWORD PTR [esp],0xc002c407
c001e805:	e8 22 47 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e80a:	83 c4 10             	add    esp,0x10
c001e80d:	eb ac                	jmp    c001e7bb <cleanerTaskFunction(void*)+0x39>
c001e80f:	e8 e0 f5 ff ff       	call   c001ddf4 <unlockScheduler()>
c001e814:	e8 9a f9 ff ff       	call   c001e1b3 <unlockStuff()>
c001e819:	e8 d4 f5 ff ff       	call   c001ddf2 <lockScheduler()>
c001e81e:	80 3d 0c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b0c,0x0
c001e825:	0f 84 72 ff ff ff    	je     c001e79d <cleanerTaskFunction(void*)+0x1b>
c001e82b:	e8 c4 f5 ff ff       	call   c001ddf4 <unlockScheduler()>
c001e830:	e9 75 ff ff ff       	jmp    c001e7aa <cleanerTaskFunction(void*)+0x28>

c001e835 <terminateTask(int)>:
c001e835:	83 ec 14             	sub    esp,0x14
c001e838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e83d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e840:	83 c0 0c             	add    eax,0xc
c001e843:	50                   	push   eax
c001e844:	68 44 c7 02 c0       	push   0xc002c744
c001e849:	e8 de 46 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e84e:	e8 c6 f5 ff ff       	call   c001de19 <lockStuff()>
c001e853:	e8 9a f5 ff ff       	call   c001ddf2 <lockScheduler()>
c001e858:	c7 04 24 1a c4 02 c0 	mov    DWORD PTR [esp],0xc002c41a
c001e85f:	e8 c8 46 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e864:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e868:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e86d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e875:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e878:	5a                   	pop    edx
c001e879:	59                   	pop    ecx
c001e87a:	50                   	push   eax
c001e87b:	68 30 1b 03 c0       	push   0xc0031b30
c001e880:	e8 8b a2 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e88a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e891:	c7 04 24 34 c4 02 c0 	mov    DWORD PTR [esp],0xc002c434
c001e898:	e8 8f 46 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e89d:	83 c4 10             	add    esp,0x10
c001e8a0:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e8a5:	85 c0                	test   eax,eax
c001e8a7:	74 5a                	je     c001e903 <terminateTask(int)+0xce>
c001e8a9:	83 ec 0c             	sub    esp,0xc
c001e8ac:	68 4e c4 02 c0       	push   0xc002c44e
c001e8b1:	e8 76 46 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e8b6:	58                   	pop    eax
c001e8b7:	c6 05 0c 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b0c,0x1
c001e8be:	ff 35 08 1b 03 c0    	push   DWORD PTR ds:0xc0031b08
c001e8c4:	e8 41 fb ff ff       	call   c001e40a <unblockTask(ThreadControlBlock*)>
c001e8c9:	c7 04 24 68 c4 02 c0 	mov    DWORD PTR [esp],0xc002c468
c001e8d0:	e8 57 46 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	e8 17 f5 ff ff       	call   c001ddf4 <unlockScheduler()>
c001e8dd:	e8 d1 f8 ff ff       	call   c001e1b3 <unlockStuff()>
c001e8e2:	83 ec 0c             	sub    esp,0xc
c001e8e5:	68 a0 c4 02 c0       	push   0xc002c4a0
c001e8ea:	e8 3d 46 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e8ef:	83 c4 10             	add    esp,0x10
c001e8f2:	e8 fb f4 ff ff       	call   c001ddf2 <lockScheduler()>
c001e8f7:	e8 32 f8 ff ff       	call   c001e12e <schedule()>
c001e8fc:	e8 f3 f4 ff ff       	call   c001ddf4 <unlockScheduler()>
c001e901:	eb ef                	jmp    c001e8f2 <terminateTask(int)+0xbd>
c001e903:	83 ec 0c             	sub    esp,0xc
c001e906:	68 82 c4 02 c0       	push   0xc002c482
c001e90b:	e8 1c 46 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001e910:	83 c4 10             	add    esp,0x10
c001e913:	eb c3                	jmp    c001e8d8 <terminateTask(int)+0xa3>

c001e915 <Thr::terminateFromIRQ(int)>:
c001e915:	83 ec 18             	sub    esp,0x18
c001e918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e91c:	e8 14 ff ff ff       	call   c001e835 <terminateTask(int)>
c001e921:	90                   	nop

c001e922 <Semaphore::release()>:
c001e922:	83 ec 0c             	sub    esp,0xc
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	e8 eb f4 ff ff       	call   c001de19 <lockStuff()>
c001e92e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e931:	85 d2                	test   edx,edx
c001e933:	74 1a                	je     c001e94f <Semaphore::release()+0x2d>
c001e935:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e93e:	52                   	push   edx
c001e93f:	e8 c6 fa ff ff       	call   c001e40a <unblockTask(ThreadControlBlock*)>
c001e944:	83 c4 10             	add    esp,0x10
c001e947:	83 c4 0c             	add    esp,0xc
c001e94a:	e9 64 f8 ff ff       	jmp    c001e1b3 <unlockStuff()>
c001e94f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e952:	83 c4 0c             	add    esp,0xc
c001e955:	e9 59 f8 ff ff       	jmp    c001e1b3 <unlockStuff()>

c001e95a <__static_initialization_and_destruction_0(int, int)>:
c001e95a:	83 ec 0c             	sub    esp,0xc
c001e95d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e962:	0f 85 88 00 00 00    	jne    c001e9f0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e968:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e970:	75 7e                	jne    c001e9f0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	68 48 1b 03 c0       	push   0xc0031b48
c001e97a:	e8 41 a3 00 00       	call   c0028cc0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e97f:	83 c4 10             	add    esp,0x10
c001e982:	83 ec 04             	sub    esp,0x4
c001e985:	68 fc d4 02 c0       	push   0xc002d4fc
c001e98a:	68 48 1b 03 c0       	push   0xc0031b48
c001e98f:	68 80 8c 02 c0       	push   0xc0028c80
c001e994:	e8 2d 44 ff ff       	call   c0012dc6 <__cxa_atexit>
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	83 ec 0c             	sub    esp,0xc
c001e99f:	68 3c 1b 03 c0       	push   0xc0031b3c
c001e9a4:	e8 17 a3 00 00       	call   c0028cc0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9a9:	83 c4 10             	add    esp,0x10
c001e9ac:	83 ec 04             	sub    esp,0x4
c001e9af:	68 fc d4 02 c0       	push   0xc002d4fc
c001e9b4:	68 3c 1b 03 c0       	push   0xc0031b3c
c001e9b9:	68 80 8c 02 c0       	push   0xc0028c80
c001e9be:	e8 03 44 ff ff       	call   c0012dc6 <__cxa_atexit>
c001e9c3:	83 c4 10             	add    esp,0x10
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	68 30 1b 03 c0       	push   0xc0031b30
c001e9ce:	e8 ed a2 00 00       	call   c0028cc0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9d3:	83 c4 10             	add    esp,0x10
c001e9d6:	83 ec 04             	sub    esp,0x4
c001e9d9:	68 fc d4 02 c0       	push   0xc002d4fc
c001e9de:	68 30 1b 03 c0       	push   0xc0031b30
c001e9e3:	68 80 8c 02 c0       	push   0xc0028c80
c001e9e8:	e8 d9 43 ff ff       	call   c0012dc6 <__cxa_atexit>
c001e9ed:	83 c4 10             	add    esp,0x10
c001e9f0:	90                   	nop
c001e9f1:	83 c4 0c             	add    esp,0xc
c001e9f4:	c3                   	ret    

c001e9f5 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9f5:	83 ec 0c             	sub    esp,0xc
c001e9f8:	83 ec 08             	sub    esp,0x8
c001e9fb:	68 ff ff 00 00       	push   0xffff
c001ea00:	6a 01                	push   0x1
c001ea02:	e8 53 ff ff ff       	call   c001e95a <__static_initialization_and_destruction_0(int, int)>
c001ea07:	83 c4 10             	add    esp,0x10
c001ea0a:	83 c4 0c             	add    esp,0xc
c001ea0d:	c3                   	ret    

c001ea0e <Vm::inbv(unsigned short)>:
c001ea0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea12:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea17:	75 06                	jne    c001ea1f <Vm::inbv(unsigned short)+0x11>
c001ea19:	a0 8c 1b 03 c0       	mov    al,ds:0xc0031b8c
c001ea1e:	c3                   	ret    
c001ea1f:	ec                   	in     al,dx
c001ea20:	c3                   	ret    

c001ea21 <Vm::outbv(unsigned short, unsigned char)>:
c001ea21:	53                   	push   ebx
c001ea22:	83 ec 08             	sub    esp,0x8
c001ea25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea29:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea2d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea32:	75 38                	jne    c001ea6c <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea34:	0f b6 c3             	movzx  eax,bl
c001ea37:	51                   	push   ecx
c001ea38:	51                   	push   ecx
c001ea39:	50                   	push   eax
c001ea3a:	68 63 c7 02 c0       	push   0xc002c763
c001ea3f:	e8 e8 44 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001ea44:	8b 15 8c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b8c
c001ea4a:	83 c4 10             	add    esp,0x10
c001ea4d:	8d 42 01             	lea    eax,[edx+0x1]
c001ea50:	88 9a a0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce460],bl
c001ea56:	a3 8c 1b 03 c0       	mov    ds:0xc0031b8c,eax
c001ea5b:	83 f8 20             	cmp    eax,0x20
c001ea5e:	75 0f                	jne    c001ea6f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea60:	c7 05 8c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b8c,0x1f
c001ea6a:	eb 03                	jmp    c001ea6f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea6c:	88 d8                	mov    al,bl
c001ea6e:	ee                   	out    dx,al
c001ea6f:	83 c4 08             	add    esp,0x8
c001ea72:	5b                   	pop    ebx
c001ea73:	c3                   	ret    

c001ea74 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea74:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea79:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea7e:	c1 e0 04             	shl    eax,0x4
c001ea81:	01 d0                	add    eax,edx
c001ea83:	c3                   	ret    

c001ea84 <Vm::getSegment(unsigned int)>:
c001ea84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea88:	c1 e8 10             	shr    eax,0x10
c001ea8b:	c3                   	ret    

c001ea8c <Vm::getOffset(unsigned int)>:
c001ea8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea90:	c3                   	ret    

c001ea91 <Vm::mainloop2()>:
c001ea91:	83 ec 0c             	sub    esp,0xc
c001ea94:	e8 59 f3 ff ff       	call   c001ddf2 <lockScheduler()>
c001ea99:	83 ec 0c             	sub    esp,0xc
c001ea9c:	c6 05 85 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b85,0x1
c001eaa3:	6a 02                	push   0x2
c001eaa5:	e8 9c f7 ff ff       	call   c001e246 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eaaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaaf:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eab3:	52                   	push   edx
c001eab4:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eab8:	52                   	push   edx
c001eab9:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eabd:	52                   	push   edx
c001eabe:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eac2:	50                   	push   eax
c001eac3:	e8 32 18 fe ff       	call   c00002fa <goToVM86>
c001eac8:	83 c4 2c             	add    esp,0x2c
c001eacb:	c3                   	ret    

c001eacc <Vm::mainVm8086Loop(void*)>:
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	e8 20 f3 ff ff       	call   c001ddf4 <unlockScheduler()>
c001ead4:	83 c4 0c             	add    esp,0xc
c001ead7:	eb b8                	jmp    c001ea91 <Vm::mainloop2()>

c001ead9 <Vm::mainloop3(unsigned long)>:
c001ead9:	53                   	push   ebx
c001eada:	83 ec 08             	sub    esp,0x8
c001eadd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eae1:	e8 0c f3 ff ff       	call   c001ddf2 <lockScheduler()>
c001eae6:	83 ec 0c             	sub    esp,0xc
c001eae9:	89 1d 80 1b 03 c0    	mov    DWORD PTR ds:0xc0031b80,ebx
c001eaef:	6a 02                	push   0x2
c001eaf1:	c6 05 84 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b84,0x1
c001eaf8:	e8 49 f7 ff ff       	call   c001e246 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eafd:	83 c4 18             	add    esp,0x18
c001eb00:	5b                   	pop    ebx
c001eb01:	eb 8e                	jmp    c001ea91 <Vm::mainloop2()>

c001eb03 <Vm::initialise8086()>:
c001eb03:	83 ec 0c             	sub    esp,0xc
c001eb06:	68 80 00 00 00       	push   0x80
c001eb0b:	6a 00                	push   0x0
c001eb0d:	68 cc ea 01 c0       	push   0xc001eacc
c001eb12:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001eb18:	e8 07 f4 ff ff       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c001eb1d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb24:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c001eb29:	68 00 01 00 00       	push   0x100
c001eb2e:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001eb33:	6a 00                	push   0x0
c001eb35:	6a 00                	push   0x0
c001eb37:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb3d:	e8 14 3b ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb42:	83 c4 2c             	add    esp,0x2c
c001eb45:	c3                   	ret    

c001eb46 <Vm::finish8086()>:
c001eb46:	53                   	push   ebx
c001eb47:	83 ec 08             	sub    esp,0x8
c001eb4a:	e8 a3 f2 ff ff       	call   c001ddf2 <lockScheduler()>
c001eb4f:	80 3d 84 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b84,0x0
c001eb56:	75 0c                	jne    c001eb64 <Vm::finish8086()+0x1e>
c001eb58:	e8 d1 f5 ff ff       	call   c001e12e <schedule()>
c001eb5d:	e8 92 f2 ff ff       	call   c001ddf4 <unlockScheduler()>
c001eb62:	eb e6                	jmp    c001eb4a <Vm::finish8086()+0x4>
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	8b 1d 80 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b80
c001eb6d:	ff 35 88 1b 03 c0    	push   DWORD PTR ds:0xc0031b88
c001eb73:	c6 05 84 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b84,0x0
c001eb7a:	e8 8b f8 ff ff       	call   c001e40a <unblockTask(ThreadControlBlock*)>
c001eb7f:	e8 70 f2 ff ff       	call   c001ddf4 <unlockScheduler()>
c001eb84:	89 d8                	mov    eax,ebx
c001eb86:	83 c4 18             	add    esp,0x18
c001eb89:	5b                   	pop    ebx
c001eb8a:	c3                   	ret    

c001eb8b <Vm::getOutput8086(unsigned char*)>:
c001eb8b:	83 ec 10             	sub    esp,0x10
c001eb8e:	ff 35 8c 1b 03 c0    	push   DWORD PTR ds:0xc0031b8c
c001eb94:	68 a0 1b 03 c0       	push   0xc0031ba0
c001eb99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb9d:	e8 a2 1b fe ff       	call   c0000744 <memcpy>
c001eba2:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c001eba7:	c7 05 8c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b8c,0x0
c001ebb1:	83 c4 1c             	add    esp,0x1c
c001ebb4:	c3                   	ret    

c001ebb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebb5:	55                   	push   ebp
c001ebb6:	57                   	push   edi
c001ebb7:	56                   	push   esi
c001ebb8:	53                   	push   ebx
c001ebb9:	83 ec 2c             	sub    esp,0x2c
c001ebbc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebc0:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebc4:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebc8:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebcc:	e8 21 f2 ff ff       	call   c001ddf2 <lockScheduler()>
c001ebd1:	a0 85 1b 03 c0       	mov    al,ds:0xc0031b85
c001ebd6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebda:	84 c0                	test   al,al
c001ebdc:	75 0c                	jne    c001ebea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebde:	e8 4b f5 ff ff       	call   c001e12e <schedule()>
c001ebe3:	e8 0c f2 ff ff       	call   c001ddf4 <unlockScheduler()>
c001ebe8:	eb e2                	jmp    c001ebcc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebea:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001ebef:	c7 05 8c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b8c,0x0
c001ebf9:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ebfd:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec01:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec05:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec09:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec0d:	50                   	push   eax
c001ec0e:	6a 20                	push   0x20
c001ec10:	6a 00                	push   0x0
c001ec12:	68 a0 1b 03 c0       	push   0xc0031ba0
c001ec17:	e8 5c 1b fe ff       	call   c0000778 <memset>
c001ec1c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec23:	e8 18 0c ff ff       	call   c000f840 <malloc>
c001ec28:	83 c4 0c             	add    esp,0xc
c001ec2b:	89 c7                	mov    edi,eax
c001ec2d:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001ec33:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec37:	50                   	push   eax
c001ec38:	e8 47 48 ff ff       	call   c0013484 <File::File(char const*, Process*)>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	85 ff                	test   edi,edi
c001ec42:	75 0a                	jne    c001ec4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec44:	83 ec 0c             	sub    esp,0xc
c001ec47:	68 7f c7 02 c0       	push   0xc002c77f
c001ec4c:	eb 27                	jmp    c001ec75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec4e:	50                   	push   eax
c001ec4f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec53:	50                   	push   eax
c001ec54:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec58:	50                   	push   eax
c001ec59:	57                   	push   edi
c001ec5a:	e8 35 4b ff ff       	call   c0013794 <File::stat(unsigned long long*, bool*)>
c001ec5f:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec64:	83 c4 10             	add    esp,0x10
c001ec67:	89 e8                	mov    eax,ebp
c001ec69:	84 c0                	test   al,al
c001ec6b:	74 19                	je     c001ec86 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec6d:	83 ec 0c             	sub    esp,0xc
c001ec70:	68 93 c7 02 c0       	push   0xc002c793
c001ec75:	e8 53 b9 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001ec7a:	31 ed                	xor    ebp,ebp
c001ec7c:	e8 73 f1 ff ff       	call   c001ddf4 <unlockScheduler()>
c001ec81:	83 c4 10             	add    esp,0x10
c001ec84:	eb 75                	jmp    c001ecfb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec86:	50                   	push   eax
c001ec87:	50                   	push   eax
c001ec88:	6a 01                	push   0x1
c001ec8a:	57                   	push   edi
c001ec8b:	e8 58 48 ff ff       	call   c00134e8 <File::open(FileOpenMode)>
c001ec90:	83 c4 10             	add    esp,0x10
c001ec93:	85 c0                	test   eax,eax
c001ec95:	74 17                	je     c001ecae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec97:	83 ec 0c             	sub    esp,0xc
c001ec9a:	68 ac c7 02 c0       	push   0xc002c7ac
c001ec9f:	e8 29 b9 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001eca4:	e8 4b f1 ff ff       	call   c001ddf4 <unlockScheduler()>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	eb 4d                	jmp    c001ecfb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecae:	0f b7 f6             	movzx  esi,si
c001ecb1:	50                   	push   eax
c001ecb2:	0f b7 db             	movzx  ebx,bx
c001ecb5:	50                   	push   eax
c001ecb6:	56                   	push   esi
c001ecb7:	53                   	push   ebx
c001ecb8:	e8 b7 fd ff ff       	call   c001ea74 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecbd:	5a                   	pop    edx
c001ecbe:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecc0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecc4:	51                   	push   ecx
c001ecc5:	50                   	push   eax
c001ecc6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecce:	57                   	push   edi
c001eccf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecd2:	83 c4 14             	add    esp,0x14
c001ecd5:	57                   	push   edi
c001ecd6:	e8 6b 48 ff ff       	call   c0013546 <File::close()>
c001ecdb:	c6 05 85 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b85,0x0
c001ece2:	e8 0d f1 ff ff       	call   c001ddf4 <unlockScheduler()>
c001ece7:	59                   	pop    ecx
c001ece8:	ff 35 88 1b 03 c0    	push   DWORD PTR ds:0xc0031b88
c001ecee:	e8 17 f7 ff ff       	call   c001e40a <unblockTask(ThreadControlBlock*)>
c001ecf3:	83 c4 10             	add    esp,0x10
c001ecf6:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ecfb:	83 c4 2c             	add    esp,0x2c
c001ecfe:	89 e8                	mov    eax,ebp
c001ed00:	5b                   	pop    ebx
c001ed01:	5e                   	pop    esi
c001ed02:	5f                   	pop    edi
c001ed03:	5d                   	pop    ebp
c001ed04:	c3                   	ret    

c001ed05 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed05:	57                   	push   edi
c001ed06:	56                   	push   esi
c001ed07:	53                   	push   ebx
c001ed08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed14:	83 e8 06             	sub    eax,0x6
c001ed17:	0f b7 c0             	movzx  eax,ax
c001ed1a:	50                   	push   eax
c001ed1b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed20:	50                   	push   eax
c001ed21:	e8 4e fd ff ff       	call   c001ea74 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed26:	5a                   	pop    edx
c001ed27:	5e                   	pop    esi
c001ed28:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed2b:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed2e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed34:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed37:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed3a:	83 c2 02             	add    edx,0x2
c001ed3d:	66 89 10             	mov    WORD PTR [eax],dx
c001ed40:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed43:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed47:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed4a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed4e:	89 d6                	mov    esi,edx
c001ed50:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed56:	66 81 e6 ff fd       	and    si,0xfdff
c001ed5b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed5f:	74 07                	je     c001ed68 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed61:	89 d6                	mov    esi,edx
c001ed63:	66 81 ce 00 02       	or     si,0x200
c001ed68:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed71:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed75:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed7d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed80:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed88:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed8b:	5b                   	pop    ebx
c001ed8c:	5e                   	pop    esi
c001ed8d:	5f                   	pop    edi
c001ed8e:	c3                   	ret    

c001ed8f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed8f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed94:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed99:	c1 e0 04             	shl    eax,0x4
c001ed9c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed9f:	c3                   	ret    

c001eda0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001eda0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eda5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edaa:	c1 e0 04             	shl    eax,0x4
c001edad:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001edb1:	c3                   	ret    

c001edb2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001edb2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edbc:	c1 e0 04             	shl    eax,0x4
c001edbf:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edc2:	c3                   	ret    

c001edc3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edc3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edcd:	c1 e0 04             	shl    eax,0x4
c001edd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edd4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edd7:	c3                   	ret    

c001edd8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edd8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eddd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ede2:	c1 e0 04             	shl    eax,0x4
c001ede5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ede9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eded:	c3                   	ret    

c001edee <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edf3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edf8:	c1 e0 04             	shl    eax,0x4
c001edfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edff:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee02:	c3                   	ret    

c001ee03 <Vm::faultHandler(regs*)>:
c001ee03:	55                   	push   ebp
c001ee04:	57                   	push   edi
c001ee05:	56                   	push   esi
c001ee06:	53                   	push   ebx
c001ee07:	83 ec 1c             	sub    esp,0x1c
c001ee0a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee0e:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee11:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee14:	0f b7 c1             	movzx  eax,cx
c001ee17:	50                   	push   eax
c001ee18:	0f b7 c3             	movzx  eax,bx
c001ee1b:	c1 e3 04             	shl    ebx,0x4
c001ee1e:	50                   	push   eax
c001ee1f:	e8 50 fc ff ff       	call   c001ea74 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee24:	5a                   	pop    edx
c001ee25:	89 c5                	mov    ebp,eax
c001ee27:	5e                   	pop    esi
c001ee28:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee2c:	50                   	push   eax
c001ee2d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee31:	50                   	push   eax
c001ee32:	e8 3d fc ff ff       	call   c001ea74 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee37:	01 cb                	add    ebx,ecx
c001ee39:	89 c6                	mov    esi,eax
c001ee3b:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee3f:	50                   	push   eax
c001ee40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee44:	50                   	push   eax
c001ee45:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee49:	50                   	push   eax
c001ee4a:	55                   	push   ebp
c001ee4b:	53                   	push   ebx
c001ee4c:	b3 06                	mov    bl,0x6
c001ee4e:	68 c5 c7 02 c0       	push   0xc002c7c5
c001ee53:	e8 d4 40 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001ee58:	83 c4 20             	add    esp,0x20
c001ee5b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee60:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee65:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee69:	3c 9d                	cmp    al,0x9d
c001ee6b:	0f 84 d7 02 00 00    	je     c001f148 <Vm::faultHandler(regs*)+0x345>
c001ee71:	0f 87 a3 00 00 00    	ja     c001ef1a <Vm::faultHandler(regs*)+0x117>
c001ee77:	3c 66                	cmp    al,0x66
c001ee79:	0f 84 15 02 00 00    	je     c001f094 <Vm::faultHandler(regs*)+0x291>
c001ee7f:	77 5f                	ja     c001eee0 <Vm::faultHandler(regs*)+0xdd>
c001ee81:	3c 36                	cmp    al,0x36
c001ee83:	0f 84 f1 01 00 00    	je     c001f07a <Vm::faultHandler(regs*)+0x277>
c001ee89:	77 28                	ja     c001eeb3 <Vm::faultHandler(regs*)+0xb0>
c001ee8b:	3c 26                	cmp    al,0x26
c001ee8d:	0f 84 99 01 00 00    	je     c001f02c <Vm::faultHandler(regs*)+0x229>
c001ee93:	3c 2e                	cmp    al,0x2e
c001ee95:	0f 85 3b 07 00 00    	jne    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001ee9b:	83 ec 0c             	sub    esp,0xc
c001ee9e:	31 db                	xor    ebx,ebx
c001eea0:	68 da c7 02 c0       	push   0xc002c7da
c001eea5:	e8 82 40 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001eeaa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eead:	83 c4 10             	add    esp,0x10
c001eeb0:	45                   	inc    ebp
c001eeb1:	eb b2                	jmp    c001ee65 <Vm::faultHandler(regs*)+0x62>
c001eeb3:	3c 64                	cmp    al,0x64
c001eeb5:	0f 84 8b 01 00 00    	je     c001f046 <Vm::faultHandler(regs*)+0x243>
c001eebb:	0f 87 9f 01 00 00    	ja     c001f060 <Vm::faultHandler(regs*)+0x25d>
c001eec1:	3c 3e                	cmp    al,0x3e
c001eec3:	0f 85 0d 07 00 00    	jne    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001eec9:	83 ec 0c             	sub    esp,0xc
c001eecc:	b3 01                	mov    bl,0x1
c001eece:	68 de c7 02 c0       	push   0xc002c7de
c001eed3:	e8 54 40 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001eed8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	eb d0                	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001eee0:	3c 6d                	cmp    al,0x6d
c001eee2:	0f 84 af 03 00 00    	je     c001f297 <Vm::faultHandler(regs*)+0x494>
c001eee8:	77 15                	ja     c001eeff <Vm::faultHandler(regs*)+0xfc>
c001eeea:	3c 67                	cmp    al,0x67
c001eeec:	0f 84 bf 01 00 00    	je     c001f0b1 <Vm::faultHandler(regs*)+0x2ae>
c001eef2:	3c 6c                	cmp    al,0x6c
c001eef4:	0f 84 3f 03 00 00    	je     c001f239 <Vm::faultHandler(regs*)+0x436>
c001eefa:	e9 d7 06 00 00       	jmp    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001eeff:	3c 6f                	cmp    al,0x6f
c001ef01:	0f 84 a4 04 00 00    	je     c001f3ab <Vm::faultHandler(regs*)+0x5a8>
c001ef07:	0f 82 11 04 00 00    	jb     c001f31e <Vm::faultHandler(regs*)+0x51b>
c001ef0d:	3c 9c                	cmp    al,0x9c
c001ef0f:	0f 84 ba 01 00 00    	je     c001f0cf <Vm::faultHandler(regs*)+0x2cc>
c001ef15:	e9 bc 06 00 00       	jmp    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001ef1a:	3c ec                	cmp    al,0xec
c001ef1c:	0f 84 24 06 00 00    	je     c001f546 <Vm::faultHandler(regs*)+0x743>
c001ef22:	0f 87 93 00 00 00    	ja     c001efbb <Vm::faultHandler(regs*)+0x1b8>
c001ef28:	3c e4                	cmp    al,0xe4
c001ef2a:	0f 84 5c 05 00 00    	je     c001f48c <Vm::faultHandler(regs*)+0x689>
c001ef30:	77 6a                	ja     c001ef9c <Vm::faultHandler(regs*)+0x199>
c001ef32:	3c cd                	cmp    al,0xcd
c001ef34:	0f 84 7e 02 00 00    	je     c001f1b8 <Vm::faultHandler(regs*)+0x3b5>
c001ef3a:	3c cf                	cmp    al,0xcf
c001ef3c:	0f 85 94 06 00 00    	jne    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001ef42:	83 ec 0c             	sub    esp,0xc
c001ef45:	68 22 c8 02 c0       	push   0xc002c822
c001ef4a:	e8 dd 3f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001ef4f:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef52:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef55:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef59:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef5c:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef60:	0d 00 02 02 00       	or     eax,0x20200
c001ef65:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef68:	56                   	push   esi
c001ef69:	53                   	push   ebx
c001ef6a:	52                   	push   edx
c001ef6b:	68 28 c8 02 c0       	push   0xc002c828
c001ef70:	e8 b7 3f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001ef75:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef79:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef7f:	66 c1 e8 09          	shr    ax,0x9
c001ef83:	83 e0 01             	and    eax,0x1
c001ef86:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef89:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef8c:	83 c0 06             	add    eax,0x6
c001ef8f:	25 ff ff 00 00       	and    eax,0xffff
c001ef94:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef97:	e9 95 02 00 00       	jmp    c001f231 <Vm::faultHandler(regs*)+0x42e>
c001ef9c:	3c e6                	cmp    al,0xe6
c001ef9e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efa2:	0f 84 4e 05 00 00    	je     c001f4f6 <Vm::faultHandler(regs*)+0x6f3>
c001efa8:	0f 82 0a 05 00 00    	jb     c001f4b8 <Vm::faultHandler(regs*)+0x6b5>
c001efae:	3c e7                	cmp    al,0xe7
c001efb0:	0f 84 69 05 00 00    	je     c001f51f <Vm::faultHandler(regs*)+0x71c>
c001efb6:	e9 1b 06 00 00       	jmp    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001efbb:	3c ef                	cmp    al,0xef
c001efbd:	0f 84 e6 05 00 00    	je     c001f5a9 <Vm::faultHandler(regs*)+0x7a6>
c001efc3:	77 37                	ja     c001effc <Vm::faultHandler(regs*)+0x1f9>
c001efc5:	3c ed                	cmp    al,0xed
c001efc7:	0f 84 a3 05 00 00    	je     c001f570 <Vm::faultHandler(regs*)+0x76d>
c001efcd:	3c ee                	cmp    al,0xee
c001efcf:	0f 85 01 06 00 00    	jne    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001efd5:	52                   	push   edx
c001efd6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efd9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efdc:	68 c3 c8 02 c0       	push   0xc002c8c3
c001efe1:	e8 46 3f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001efe6:	59                   	pop    ecx
c001efe7:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001efeb:	5b                   	pop    ebx
c001efec:	50                   	push   eax
c001efed:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eff1:	50                   	push   eax
c001eff2:	e8 2a fa ff ff       	call   c001ea21 <Vm::outbv(unsigned short, unsigned char)>
c001eff7:	e9 a5 05 00 00       	jmp    c001f5a1 <Vm::faultHandler(regs*)+0x79e>
c001effc:	3c fa                	cmp    al,0xfa
c001effe:	0f 84 f7 01 00 00    	je     c001f1fb <Vm::faultHandler(regs*)+0x3f8>
c001f004:	3c fb                	cmp    al,0xfb
c001f006:	0f 84 0a 02 00 00    	je     c001f216 <Vm::faultHandler(regs*)+0x413>
c001f00c:	3c f3                	cmp    al,0xf3
c001f00e:	0f 85 c2 05 00 00    	jne    c001f5d6 <Vm::faultHandler(regs*)+0x7d3>
c001f014:	83 ec 0c             	sub    esp,0xc
c001f017:	68 fb c7 02 c0       	push   0xc002c7fb
c001f01c:	e8 0b 3f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f021:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	e9 84 fe ff ff       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	b3 02                	mov    bl,0x2
c001f031:	68 d6 c7 02 c0       	push   0xc002c7d6
c001f036:	e8 f1 3e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f03b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f03e:	83 c4 10             	add    esp,0x10
c001f041:	e9 6a fe ff ff       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	b3 03                	mov    bl,0x3
c001f04b:	68 e2 c7 02 c0       	push   0xc002c7e2
c001f050:	e8 d7 3e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f055:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f058:	83 c4 10             	add    esp,0x10
c001f05b:	e9 50 fe ff ff       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	b3 04                	mov    bl,0x4
c001f065:	68 e6 c7 02 c0       	push   0xc002c7e6
c001f06a:	e8 bd 3e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f06f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f072:	83 c4 10             	add    esp,0x10
c001f075:	e9 36 fe ff ff       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001f07a:	83 ec 0c             	sub    esp,0xc
c001f07d:	b3 05                	mov    bl,0x5
c001f07f:	68 ea c7 02 c0       	push   0xc002c7ea
c001f084:	e8 a3 3e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f089:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08c:	83 c4 10             	add    esp,0x10
c001f08f:	e9 1c fe ff ff       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	68 ee c7 02 c0       	push   0xc002c7ee
c001f09c:	e8 8b 3e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f0a1:	83 c4 10             	add    esp,0x10
c001f0a4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a7:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0ac:	e9 ff fd ff ff       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001f0b1:	50                   	push   eax
c001f0b2:	50                   	push   eax
c001f0b3:	6a 01                	push   0x1
c001f0b5:	68 f3 c7 02 c0       	push   0xc002c7f3
c001f0ba:	e8 6d 3e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f0bf:	83 c4 10             	add    esp,0x10
c001f0c2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0ca:	e9 e1 fd ff ff       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0xad>
c001f0cf:	83 ec 0c             	sub    esp,0xc
c001f0d2:	68 01 c8 02 c0       	push   0xc002c801
c001f0d7:	e8 50 3e ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0e2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0e7:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0ea:	74 2f                	je     c001f11b <Vm::faultHandler(regs*)+0x318>
c001f0ec:	83 ea 04             	sub    edx,0x4
c001f0ef:	25 ff 0d 00 00       	and    eax,0xdff
c001f0f4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0fa:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f100:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f106:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f10a:	0f 84 bf 04 00 00    	je     c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f110:	80 cc 02             	or     ah,0x2
c001f113:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f116:	e9 b4 04 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f11b:	83 ea 02             	sub    edx,0x2
c001f11e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f124:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f127:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f12b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f131:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f135:	74 05                	je     c001f13c <Vm::faultHandler(regs*)+0x339>
c001f137:	80 cc 02             	or     ah,0x2
c001f13a:	eb 03                	jmp    c001f13f <Vm::faultHandler(regs*)+0x33c>
c001f13c:	80 e4 fd             	and    ah,0xfd
c001f13f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f143:	e9 87 04 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	68 08 c8 02 c0       	push   0xc002c808
c001f150:	e8 d7 3d ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f155:	83 c4 10             	add    esp,0x10
c001f158:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f15d:	74 28                	je     c001f187 <Vm::faultHandler(regs*)+0x384>
c001f15f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f161:	25 ff 0d 00 00       	and    eax,0xdff
c001f166:	0d 00 02 02 00       	or     eax,0x20200
c001f16b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f16e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f170:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f176:	c1 e8 09             	shr    eax,0x9
c001f179:	83 e0 01             	and    eax,0x1
c001f17c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f17f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f182:	83 c0 04             	add    eax,0x4
c001f185:	eb 24                	jmp    c001f1ab <Vm::faultHandler(regs*)+0x3a8>
c001f187:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f18a:	0d 00 02 02 00       	or     eax,0x20200
c001f18f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f192:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f195:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f19b:	66 c1 e8 09          	shr    ax,0x9
c001f19f:	83 e0 01             	and    eax,0x1
c001f1a2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1a5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1a8:	83 c0 02             	add    eax,0x2
c001f1ab:	25 ff ff 00 00       	and    eax,0xffff
c001f1b0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1b3:	e9 17 04 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f1b8:	53                   	push   ebx
c001f1b9:	53                   	push   ebx
c001f1ba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1be:	50                   	push   eax
c001f1bf:	68 0e c8 02 c0       	push   0xc002c80e
c001f1c4:	e8 63 3d ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f1c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1cd:	83 c4 10             	add    esp,0x10
c001f1d0:	3c ee                	cmp    al,0xee
c001f1d2:	75 10                	jne    c001f1e4 <Vm::faultHandler(regs*)+0x3e1>
c001f1d4:	83 ec 0c             	sub    esp,0xc
c001f1d7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1da:	e8 fa f8 ff ff       	call   c001ead9 <Vm::mainloop3(unsigned long)>
c001f1df:	e9 c0 03 00 00       	jmp    c001f5a4 <Vm::faultHandler(regs*)+0x7a1>
c001f1e4:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	53                   	push   ebx
c001f1ec:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1f0:	53                   	push   ebx
c001f1f1:	55                   	push   ebp
c001f1f2:	50                   	push   eax
c001f1f3:	57                   	push   edi
c001f1f4:	e8 0c fb ff ff       	call   c001ed05 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1f9:	eb 36                	jmp    c001f231 <Vm::faultHandler(regs*)+0x42e>
c001f1fb:	83 ec 0c             	sub    esp,0xc
c001f1fe:	68 18 c8 02 c0       	push   0xc002c818
c001f203:	e8 24 3d ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f20d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f211:	e9 8b 03 00 00       	jmp    c001f5a1 <Vm::faultHandler(regs*)+0x79e>
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	68 1d c8 02 c0       	push   0xc002c81d
c001f21e:	e8 09 3d ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f223:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f228:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f22c:	e9 70 03 00 00       	jmp    c001f5a1 <Vm::faultHandler(regs*)+0x79e>
c001f231:	83 c4 20             	add    esp,0x20
c001f234:	e9 99 03 00 00       	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x7cf>
c001f239:	83 ec 0c             	sub    esp,0xc
c001f23c:	68 5b c8 02 c0       	push   0xc002c85b
c001f241:	e8 e6 3c ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f246:	83 c4 10             	add    esp,0x10
c001f249:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f24c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f251:	74 0d                	je     c001f260 <Vm::faultHandler(regs*)+0x45d>
c001f253:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f25a:	0f 87 9e 01 00 00    	ja     c001f3fe <Vm::faultHandler(regs*)+0x5fb>
c001f260:	83 ec 0c             	sub    esp,0xc
c001f263:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f267:	0f b7 db             	movzx  ebx,bx
c001f26a:	50                   	push   eax
c001f26b:	e8 9e f7 ff ff       	call   c001ea0e <Vm::inbv(unsigned short)>
c001f270:	83 c4 0c             	add    esp,0xc
c001f273:	0f b6 c0             	movzx  eax,al
c001f276:	50                   	push   eax
c001f277:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f27b:	50                   	push   eax
c001f27c:	53                   	push   ebx
c001f27d:	e8 41 fb ff ff       	call   c001edc3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f282:	83 c4 10             	add    esp,0x10
c001f285:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f288:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f28c:	74 03                	je     c001f291 <Vm::faultHandler(regs*)+0x48e>
c001f28e:	48                   	dec    eax
c001f28f:	eb 01                	jmp    c001f292 <Vm::faultHandler(regs*)+0x48f>
c001f291:	40                   	inc    eax
c001f292:	0f b7 c0             	movzx  eax,ax
c001f295:	eb 7f                	jmp    c001f316 <Vm::faultHandler(regs*)+0x513>
c001f297:	83 ec 0c             	sub    esp,0xc
c001f29a:	68 8d c8 02 c0       	push   0xc002c88d
c001f29f:	e8 88 3c ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f2a4:	83 c4 10             	add    esp,0x10
c001f2a7:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2aa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2af:	74 0d                	je     c001f2be <Vm::faultHandler(regs*)+0x4bb>
c001f2b1:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2b8:	0f 87 40 01 00 00    	ja     c001f3fe <Vm::faultHandler(regs*)+0x5fb>
c001f2be:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2c1:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2c5:	0f b7 db             	movzx  ebx,bx
c001f2c8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2cd:	74 20                	je     c001f2ef <Vm::faultHandler(regs*)+0x4ec>
c001f2cf:	ed                   	in     eax,dx
c001f2d0:	51                   	push   ecx
c001f2d1:	50                   	push   eax
c001f2d2:	56                   	push   esi
c001f2d3:	53                   	push   ebx
c001f2d4:	e8 15 fb ff ff       	call   c001edee <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2d9:	83 c4 10             	add    esp,0x10
c001f2dc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2df:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2e3:	74 05                	je     c001f2ea <Vm::faultHandler(regs*)+0x4e7>
c001f2e5:	83 e8 04             	sub    eax,0x4
c001f2e8:	eb 27                	jmp    c001f311 <Vm::faultHandler(regs*)+0x50e>
c001f2ea:	83 c0 04             	add    eax,0x4
c001f2ed:	eb 22                	jmp    c001f311 <Vm::faultHandler(regs*)+0x50e>
c001f2ef:	66 ed                	in     ax,dx
c001f2f1:	0f b7 c0             	movzx  eax,ax
c001f2f4:	52                   	push   edx
c001f2f5:	50                   	push   eax
c001f2f6:	56                   	push   esi
c001f2f7:	53                   	push   ebx
c001f2f8:	e8 db fa ff ff       	call   c001edd8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2fd:	83 c4 10             	add    esp,0x10
c001f300:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f303:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f307:	74 05                	je     c001f30e <Vm::faultHandler(regs*)+0x50b>
c001f309:	83 e8 02             	sub    eax,0x2
c001f30c:	eb 03                	jmp    c001f311 <Vm::faultHandler(regs*)+0x50e>
c001f30e:	83 c0 02             	add    eax,0x2
c001f311:	25 ff ff 00 00       	and    eax,0xffff
c001f316:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f319:	e9 b1 02 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f31e:	83 ec 0c             	sub    esp,0xc
c001f321:	4b                   	dec    ebx
c001f322:	68 93 c8 02 c0       	push   0xc002c893
c001f327:	e8 00 3c ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f32c:	83 c4 10             	add    esp,0x10
c001f32f:	80 fb 05             	cmp    bl,0x5
c001f332:	77 0a                	ja     c001f33e <Vm::faultHandler(regs*)+0x53b>
c001f334:	0f b6 db             	movzx  ebx,bl
c001f337:	ff 24 9d 04 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36fc]
c001f33e:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f342:	eb 1b                	jmp    c001f35f <Vm::faultHandler(regs*)+0x55c>
c001f344:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f348:	eb 15                	jmp    c001f35f <Vm::faultHandler(regs*)+0x55c>
c001f34a:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f34e:	eb 0f                	jmp    c001f35f <Vm::faultHandler(regs*)+0x55c>
c001f350:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f354:	eb 09                	jmp    c001f35f <Vm::faultHandler(regs*)+0x55c>
c001f356:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f359:	eb 04                	jmp    c001f35f <Vm::faultHandler(regs*)+0x55c>
c001f35b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f35f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f364:	74 0d                	je     c001f373 <Vm::faultHandler(regs*)+0x570>
c001f366:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f36d:	0f 87 8b 00 00 00    	ja     c001f3fe <Vm::faultHandler(regs*)+0x5fb>
c001f373:	53                   	push   ebx
c001f374:	53                   	push   ebx
c001f375:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f379:	52                   	push   edx
c001f37a:	50                   	push   eax
c001f37b:	e8 0f fa ff ff       	call   c001ed8f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f380:	5e                   	pop    esi
c001f381:	0f b6 c0             	movzx  eax,al
c001f384:	5d                   	pop    ebp
c001f385:	50                   	push   eax
c001f386:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f38a:	50                   	push   eax
c001f38b:	e8 91 f6 ff ff       	call   c001ea21 <Vm::outbv(unsigned short, unsigned char)>
c001f390:	83 c4 10             	add    esp,0x10
c001f393:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f396:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f39a:	74 03                	je     c001f39f <Vm::faultHandler(regs*)+0x59c>
c001f39c:	48                   	dec    eax
c001f39d:	eb 01                	jmp    c001f3a0 <Vm::faultHandler(regs*)+0x59d>
c001f39f:	40                   	inc    eax
c001f3a0:	0f b7 c0             	movzx  eax,ax
c001f3a3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3a6:	e9 24 02 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f3ab:	83 ec 0c             	sub    esp,0xc
c001f3ae:	4b                   	dec    ebx
c001f3af:	68 93 c8 02 c0       	push   0xc002c893
c001f3b4:	e8 73 3b ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f3b9:	83 c4 10             	add    esp,0x10
c001f3bc:	80 fb 05             	cmp    bl,0x5
c001f3bf:	77 0a                	ja     c001f3cb <Vm::faultHandler(regs*)+0x5c8>
c001f3c1:	0f b6 db             	movzx  ebx,bl
c001f3c4:	ff 24 9d 1c c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36e4]
c001f3cb:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3cf:	eb 1b                	jmp    c001f3ec <Vm::faultHandler(regs*)+0x5e9>
c001f3d1:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3d5:	eb 15                	jmp    c001f3ec <Vm::faultHandler(regs*)+0x5e9>
c001f3d7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3db:	eb 0f                	jmp    c001f3ec <Vm::faultHandler(regs*)+0x5e9>
c001f3dd:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3e1:	eb 09                	jmp    c001f3ec <Vm::faultHandler(regs*)+0x5e9>
c001f3e3:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3e6:	eb 04                	jmp    c001f3ec <Vm::faultHandler(regs*)+0x5e9>
c001f3e8:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3ec:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3ef:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3f4:	74 39                	je     c001f42f <Vm::faultHandler(regs*)+0x62c>
c001f3f6:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3fc:	76 31                	jbe    c001f42f <Vm::faultHandler(regs*)+0x62c>
c001f3fe:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f402:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f406:	51                   	push   ecx
c001f407:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f40b:	51                   	push   ecx
c001f40c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f410:	51                   	push   ecx
c001f411:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f415:	51                   	push   ecx
c001f416:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f41a:	52                   	push   edx
c001f41b:	50                   	push   eax
c001f41c:	50                   	push   eax
c001f41d:	68 60 c8 02 c0       	push   0xc002c860
c001f422:	e8 05 3b ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f427:	83 c4 20             	add    esp,0x20
c001f42a:	e9 fb 01 00 00       	jmp    c001f62a <Vm::faultHandler(regs*)+0x827>
c001f42f:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f432:	0f b7 d3             	movzx  edx,bx
c001f435:	81 e6 00 04 00 00    	and    esi,0x400
c001f43b:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f43e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f443:	74 1d                	je     c001f462 <Vm::faultHandler(regs*)+0x65f>
c001f445:	51                   	push   ecx
c001f446:	51                   	push   ecx
c001f447:	52                   	push   edx
c001f448:	50                   	push   eax
c001f449:	e8 64 f9 ff ff       	call   c001edb2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f44e:	83 c4 10             	add    esp,0x10
c001f451:	89 ea                	mov    edx,ebp
c001f453:	ef                   	out    dx,eax
c001f454:	85 f6                	test   esi,esi
c001f456:	74 05                	je     c001f45d <Vm::faultHandler(regs*)+0x65a>
c001f458:	83 eb 04             	sub    ebx,0x4
c001f45b:	eb 21                	jmp    c001f47e <Vm::faultHandler(regs*)+0x67b>
c001f45d:	83 c3 04             	add    ebx,0x4
c001f460:	eb 1c                	jmp    c001f47e <Vm::faultHandler(regs*)+0x67b>
c001f462:	51                   	push   ecx
c001f463:	51                   	push   ecx
c001f464:	52                   	push   edx
c001f465:	50                   	push   eax
c001f466:	e8 35 f9 ff ff       	call   c001eda0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f46b:	83 c4 10             	add    esp,0x10
c001f46e:	89 ea                	mov    edx,ebp
c001f470:	66 ef                	out    dx,ax
c001f472:	85 f6                	test   esi,esi
c001f474:	74 05                	je     c001f47b <Vm::faultHandler(regs*)+0x678>
c001f476:	83 eb 02             	sub    ebx,0x2
c001f479:	eb 03                	jmp    c001f47e <Vm::faultHandler(regs*)+0x67b>
c001f47b:	83 c3 02             	add    ebx,0x2
c001f47e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f484:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f487:	e9 43 01 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f48c:	53                   	push   ebx
c001f48d:	53                   	push   ebx
c001f48e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f492:	50                   	push   eax
c001f493:	68 99 c8 02 c0       	push   0xc002c899
c001f498:	e8 8f 3a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f49d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4ab:	e8 5e f5 ff ff       	call   c001ea0e <Vm::inbv(unsigned short)>
c001f4b0:	0f b6 c0             	movzx  eax,al
c001f4b3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4b6:	eb 5e                	jmp    c001f516 <Vm::faultHandler(regs*)+0x713>
c001f4b8:	51                   	push   ecx
c001f4b9:	51                   	push   ecx
c001f4ba:	53                   	push   ebx
c001f4bb:	68 9f c8 02 c0       	push   0xc002c89f
c001f4c0:	e8 67 3a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f4c5:	83 c4 10             	add    esp,0x10
c001f4c8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4cd:	74 07                	je     c001f4d6 <Vm::faultHandler(regs*)+0x6d3>
c001f4cf:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4d3:	ed                   	in     eax,dx
c001f4d4:	eb 14                	jmp    c001f4ea <Vm::faultHandler(regs*)+0x6e7>
c001f4d6:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4d9:	66 31 db             	xor    bx,bx
c001f4dc:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4df:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4e3:	66 ed                	in     ax,dx
c001f4e5:	0f b7 c0             	movzx  eax,ax
c001f4e8:	09 d8                	or     eax,ebx
c001f4ea:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4ed:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4f1:	e9 dc 00 00 00       	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x7cf>
c001f4f6:	50                   	push   eax
c001f4f7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4fa:	53                   	push   ebx
c001f4fb:	68 a5 c8 02 c0       	push   0xc002c8a5
c001f500:	e8 27 3a ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f505:	58                   	pop    eax
c001f506:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f50a:	5a                   	pop    edx
c001f50b:	50                   	push   eax
c001f50c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f510:	50                   	push   eax
c001f511:	e8 0b f5 ff ff       	call   c001ea21 <Vm::outbv(unsigned short, unsigned char)>
c001f516:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f51a:	e9 85 00 00 00       	jmp    c001f5a4 <Vm::faultHandler(regs*)+0x7a1>
c001f51f:	50                   	push   eax
c001f520:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f523:	53                   	push   ebx
c001f524:	68 ae c8 02 c0       	push   0xc002c8ae
c001f529:	e8 fe 39 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f535:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f53a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f53d:	74 03                	je     c001f542 <Vm::faultHandler(regs*)+0x73f>
c001f53f:	ef                   	out    dx,eax
c001f540:	eb ab                	jmp    c001f4ed <Vm::faultHandler(regs*)+0x6ea>
c001f542:	66 ef                	out    dx,ax
c001f544:	eb a7                	jmp    c001f4ed <Vm::faultHandler(regs*)+0x6ea>
c001f546:	55                   	push   ebp
c001f547:	55                   	push   ebp
c001f548:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f54b:	68 b7 c8 02 c0       	push   0xc002c8b7
c001f550:	e8 d7 39 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f555:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f55c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f560:	89 04 24             	mov    DWORD PTR [esp],eax
c001f563:	e8 a6 f4 ff ff       	call   c001ea0e <Vm::inbv(unsigned short)>
c001f568:	0f b6 c0             	movzx  eax,al
c001f56b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f56e:	eb 31                	jmp    c001f5a1 <Vm::faultHandler(regs*)+0x79e>
c001f570:	56                   	push   esi
c001f571:	56                   	push   esi
c001f572:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f575:	68 bd c8 02 c0       	push   0xc002c8bd
c001f57a:	e8 ad 39 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f57f:	83 c4 10             	add    esp,0x10
c001f582:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f585:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f58a:	74 03                	je     c001f58f <Vm::faultHandler(regs*)+0x78c>
c001f58c:	ed                   	in     eax,dx
c001f58d:	eb 0d                	jmp    c001f59c <Vm::faultHandler(regs*)+0x799>
c001f58f:	66 ed                	in     ax,dx
c001f591:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f594:	0f b7 c0             	movzx  eax,ax
c001f597:	66 31 d2             	xor    dx,dx
c001f59a:	09 d0                	or     eax,edx
c001f59c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f59f:	eb 2e                	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f5a1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5a4:	83 c4 10             	add    esp,0x10
c001f5a7:	eb 29                	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x7cf>
c001f5a9:	50                   	push   eax
c001f5aa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5ad:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5b0:	68 cc c8 02 c0       	push   0xc002c8cc
c001f5b5:	e8 72 39 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f5ba:	83 c4 10             	add    esp,0x10
c001f5bd:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5c0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5c5:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5c8:	74 03                	je     c001f5cd <Vm::faultHandler(regs*)+0x7ca>
c001f5ca:	ef                   	out    dx,eax
c001f5cb:	eb 02                	jmp    c001f5cf <Vm::faultHandler(regs*)+0x7cc>
c001f5cd:	66 ef                	out    dx,ax
c001f5cf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5d2:	b0 01                	mov    al,0x1
c001f5d4:	eb 56                	jmp    c001f62c <Vm::faultHandler(regs*)+0x829>
c001f5d6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5da:	51                   	push   ecx
c001f5db:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5df:	51                   	push   ecx
c001f5e0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5e4:	51                   	push   ecx
c001f5e5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5e9:	51                   	push   ecx
c001f5ea:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5ee:	52                   	push   edx
c001f5ef:	50                   	push   eax
c001f5f0:	50                   	push   eax
c001f5f1:	68 d5 c8 02 c0       	push   0xc002c8d5
c001f5f6:	e8 31 39 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c001f5fb:	83 c4 20             	add    esp,0x20
c001f5fe:	83 ec 0c             	sub    esp,0xc
c001f601:	6a 60                	push   0x60
c001f603:	e8 06 f4 ff ff       	call   c001ea0e <Vm::inbv(unsigned short)>
c001f608:	83 c4 10             	add    esp,0x10
c001f60b:	3c 1c                	cmp    al,0x1c
c001f60d:	74 04                	je     c001f613 <Vm::faultHandler(regs*)+0x810>
c001f60f:	3c 5a                	cmp    al,0x5a
c001f611:	75 eb                	jne    c001f5fe <Vm::faultHandler(regs*)+0x7fb>
c001f613:	3c 1c                	cmp    al,0x1c
c001f615:	74 04                	je     c001f61b <Vm::faultHandler(regs*)+0x818>
c001f617:	3c 5a                	cmp    al,0x5a
c001f619:	75 0f                	jne    c001f62a <Vm::faultHandler(regs*)+0x827>
c001f61b:	83 ec 0c             	sub    esp,0xc
c001f61e:	6a 60                	push   0x60
c001f620:	e8 e9 f3 ff ff       	call   c001ea0e <Vm::inbv(unsigned short)>
c001f625:	83 c4 10             	add    esp,0x10
c001f628:	eb e9                	jmp    c001f613 <Vm::faultHandler(regs*)+0x810>
c001f62a:	31 c0                	xor    eax,eax
c001f62c:	83 c4 1c             	add    esp,0x1c
c001f62f:	5b                   	pop    ebx
c001f630:	5e                   	pop    esi
c001f631:	5f                   	pop    edi
c001f632:	5d                   	pop    ebp
c001f633:	c3                   	ret    

c001f634 <Vm::fpuInternalTo32(unsigned long long)>:
c001f634:	57                   	push   edi
c001f635:	56                   	push   esi
c001f636:	53                   	push   ebx
c001f637:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63f:	89 d6                	mov    esi,edx
c001f641:	89 d7                	mov    edi,edx
c001f643:	89 c1                	mov    ecx,eax
c001f645:	c1 ef 14             	shr    edi,0x14
c001f648:	89 d3                	mov    ebx,edx
c001f64a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f650:	31 d2                	xor    edx,edx
c001f652:	89 f8                	mov    eax,edi
c001f654:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f65a:	bf ff 00 00 00       	mov    edi,0xff
c001f65f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f664:	83 d2 ff             	adc    edx,0xffffffff
c001f667:	39 c7                	cmp    edi,eax
c001f669:	bf 00 00 00 00       	mov    edi,0x0
c001f66e:	19 d7                	sbb    edi,edx
c001f670:	72 15                	jb     c001f687 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f672:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f676:	c1 e0 17             	shl    eax,0x17
c001f679:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f67f:	09 f1                	or     ecx,esi
c001f681:	09 c1                	or     ecx,eax
c001f683:	89 cf                	mov    edi,ecx
c001f685:	eb 02                	jmp    c001f689 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f687:	31 ff                	xor    edi,edi
c001f689:	89 f8                	mov    eax,edi
c001f68b:	5b                   	pop    ebx
c001f68c:	5e                   	pop    esi
c001f68d:	5f                   	pop    edi
c001f68e:	c3                   	ret    

c001f68f <Vm::fpuInternalTo64(unsigned long long)>:
c001f68f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f693:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f697:	c3                   	ret    

c001f698 <Vm::fpu32ToInternal(unsigned int)>:
c001f698:	57                   	push   edi
c001f699:	31 ff                	xor    edi,edi
c001f69b:	56                   	push   esi
c001f69c:	53                   	push   ebx
c001f69d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6a1:	89 cb                	mov    ebx,ecx
c001f6a3:	89 ce                	mov    esi,ecx
c001f6a5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6ab:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6b1:	c1 e9 17             	shr    ecx,0x17
c001f6b4:	89 f0                	mov    eax,esi
c001f6b6:	0f b6 d1             	movzx  edx,cl
c001f6b9:	81 c2 80 03 00 00    	add    edx,0x380
c001f6bf:	89 d1                	mov    ecx,edx
c001f6c1:	89 fa                	mov    edx,edi
c001f6c3:	c1 e1 14             	shl    ecx,0x14
c001f6c6:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6ca:	c1 e0 1d             	shl    eax,0x1d
c001f6cd:	89 d7                	mov    edi,edx
c001f6cf:	89 c6                	mov    esi,eax
c001f6d1:	89 ca                	mov    edx,ecx
c001f6d3:	89 f0                	mov    eax,esi
c001f6d5:	09 fa                	or     edx,edi
c001f6d7:	09 da                	or     edx,ebx
c001f6d9:	5b                   	pop    ebx
c001f6da:	5e                   	pop    esi
c001f6db:	5f                   	pop    edi
c001f6dc:	c3                   	ret    

c001f6dd <Vm::fpu64ToInternal(unsigned long long)>:
c001f6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6e5:	c3                   	ret    

c001f6e6 <Vm::fpuFloatToLong(unsigned long long)>:
c001f6e6:	57                   	push   edi
c001f6e7:	31 c0                	xor    eax,eax
c001f6e9:	56                   	push   esi
c001f6ea:	31 d2                	xor    edx,edx
c001f6ec:	53                   	push   ebx
c001f6ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6f5:	89 d9                	mov    ecx,ebx
c001f6f7:	c1 e9 14             	shr    ecx,0x14
c001f6fa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f700:	89 cf                	mov    edi,ecx
c001f702:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f708:	78 33                	js     c001f73d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f70a:	89 d9                	mov    ecx,ebx
c001f70c:	89 f0                	mov    eax,esi
c001f70e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f714:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f71a:	89 ca                	mov    edx,ecx
c001f71c:	b9 34 00 00 00       	mov    ecx,0x34
c001f721:	29 f9                	sub    ecx,edi
c001f723:	0f ad d0             	shrd   eax,edx,cl
c001f726:	d3 fa                	sar    edx,cl
c001f728:	f6 c1 20             	test   cl,0x20
c001f72b:	74 05                	je     c001f732 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f72d:	89 d0                	mov    eax,edx
c001f72f:	c1 fa 1f             	sar    edx,0x1f
c001f732:	85 db                	test   ebx,ebx
c001f734:	79 07                	jns    c001f73d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f736:	f7 d8                	neg    eax
c001f738:	83 d2 00             	adc    edx,0x0
c001f73b:	f7 da                	neg    edx
c001f73d:	5b                   	pop    ebx
c001f73e:	5e                   	pop    esi
c001f73f:	5f                   	pop    edi
c001f740:	c3                   	ret    

c001f741 <Vm::fpuULongToFloat(unsigned long long)>:
c001f741:	57                   	push   edi
c001f742:	31 c9                	xor    ecx,ecx
c001f744:	56                   	push   esi
c001f745:	53                   	push   ebx
c001f746:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f74a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f74e:	0f ba e7 14          	bt     edi,0x14
c001f752:	72 07                	jb     c001f75b <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f754:	01 f6                	add    esi,esi
c001f756:	11 ff                	adc    edi,edi
c001f758:	41                   	inc    ecx
c001f759:	eb f3                	jmp    c001f74e <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f75b:	89 fa                	mov    edx,edi
c001f75d:	89 f0                	mov    eax,esi
c001f75f:	bb 33 04 00 00       	mov    ebx,0x433
c001f764:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f76a:	29 cb                	sub    ebx,ecx
c001f76c:	89 d9                	mov    ecx,ebx
c001f76e:	5b                   	pop    ebx
c001f76f:	c1 e1 14             	shl    ecx,0x14
c001f772:	5e                   	pop    esi
c001f773:	09 ca                	or     edx,ecx
c001f775:	5f                   	pop    edi
c001f776:	c3                   	ret    

c001f777 <Vm::fpuLongToFloat(long long)>:
c001f777:	56                   	push   esi
c001f778:	31 c0                	xor    eax,eax
c001f77a:	53                   	push   ebx
c001f77b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f77f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f783:	39 c8                	cmp    eax,ecx
c001f785:	19 d8                	sbb    eax,ebx
c001f787:	7d 04                	jge    c001f78d <Vm::fpuLongToFloat(long long)+0x16>
c001f789:	31 f6                	xor    esi,esi
c001f78b:	eb 0c                	jmp    c001f799 <Vm::fpuLongToFloat(long long)+0x22>
c001f78d:	f7 d9                	neg    ecx
c001f78f:	be 01 00 00 00       	mov    esi,0x1
c001f794:	83 d3 00             	adc    ebx,0x0
c001f797:	f7 db                	neg    ebx
c001f799:	31 c0                	xor    eax,eax
c001f79b:	0f ba e3 14          	bt     ebx,0x14
c001f79f:	72 07                	jb     c001f7a8 <Vm::fpuLongToFloat(long long)+0x31>
c001f7a1:	01 c9                	add    ecx,ecx
c001f7a3:	11 db                	adc    ebx,ebx
c001f7a5:	40                   	inc    eax
c001f7a6:	eb f3                	jmp    c001f79b <Vm::fpuLongToFloat(long long)+0x24>
c001f7a8:	ba 33 04 00 00       	mov    edx,0x433
c001f7ad:	29 c2                	sub    edx,eax
c001f7af:	89 c8                	mov    eax,ecx
c001f7b1:	c1 e2 14             	shl    edx,0x14
c001f7b4:	89 d9                	mov    ecx,ebx
c001f7b6:	89 f3                	mov    ebx,esi
c001f7b8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7be:	09 ca                	or     edx,ecx
c001f7c0:	84 db                	test   bl,bl
c001f7c2:	74 06                	je     c001f7ca <Vm::fpuLongToFloat(long long)+0x53>
c001f7c4:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7ca:	5b                   	pop    ebx
c001f7cb:	5e                   	pop    esi
c001f7cc:	c3                   	ret    

c001f7cd <Vm::fpuGet0()>:
c001f7cd:	31 c0                	xor    eax,eax
c001f7cf:	31 d2                	xor    edx,edx
c001f7d1:	c3                   	ret    

c001f7d2 <Vm::fpuGet1()>:
c001f7d2:	b8 01 00 00 00       	mov    eax,0x1
c001f7d7:	31 d2                	xor    edx,edx
c001f7d9:	c3                   	ret    

c001f7da <Vm::fpuGetPi()>:
c001f7da:	b8 03 00 00 00       	mov    eax,0x3
c001f7df:	31 d2                	xor    edx,edx
c001f7e1:	c3                   	ret    

c001f7e2 <Vm::fpuGetLog2E()>:
c001f7e2:	83 ec 18             	sub    esp,0x18
c001f7e5:	68 34 c9 02 c0       	push   0xc002c934
c001f7ea:	e8 de ad ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001f7ef:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7f4:	31 d2                	xor    edx,edx
c001f7f6:	83 c4 1c             	add    esp,0x1c
c001f7f9:	c3                   	ret    

c001f7fa <Vm::fpuGetLogE2()>:
c001f7fa:	83 ec 18             	sub    esp,0x18
c001f7fd:	68 40 c9 02 c0       	push   0xc002c940
c001f802:	e8 c6 ad ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001f807:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f80c:	31 d2                	xor    edx,edx
c001f80e:	83 c4 1c             	add    esp,0x1c
c001f811:	c3                   	ret    

c001f812 <Vm::fpuGetLog210()>:
c001f812:	83 ec 18             	sub    esp,0x18
c001f815:	68 4c c9 02 c0       	push   0xc002c94c
c001f81a:	e8 ae ad ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001f81f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f824:	31 d2                	xor    edx,edx
c001f826:	83 c4 1c             	add    esp,0x1c
c001f829:	c3                   	ret    

c001f82a <Vm::fpuGetLog102()>:
c001f82a:	83 ec 18             	sub    esp,0x18
c001f82d:	68 59 c9 02 c0       	push   0xc002c959
c001f832:	e8 96 ad ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001f837:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f83c:	31 d2                	xor    edx,edx
c001f83e:	83 c4 1c             	add    esp,0x1c
c001f841:	c3                   	ret    

c001f842 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f846:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f84a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f84e:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f852:	0f 92 c0             	setb   al
c001f855:	c3                   	ret    

c001f856 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f856:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85e:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f862:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f866:	09 c2                	or     edx,eax
c001f868:	0f 94 c0             	sete   al
c001f86b:	c3                   	ret    

c001f86c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f86c:	57                   	push   edi
c001f86d:	56                   	push   esi
c001f86e:	53                   	push   ebx
c001f86f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f873:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f877:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f87b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f87f:	57                   	push   edi
c001f880:	56                   	push   esi
c001f881:	53                   	push   ebx
c001f882:	51                   	push   ecx
c001f883:	e8 ce ff ff ff       	call   c001f856 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f888:	83 c4 10             	add    esp,0x10
c001f88b:	88 c2                	mov    dl,al
c001f88d:	31 c0                	xor    eax,eax
c001f88f:	84 d2                	test   dl,dl
c001f891:	75 0c                	jne    c001f89f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f893:	57                   	push   edi
c001f894:	56                   	push   esi
c001f895:	53                   	push   ebx
c001f896:	51                   	push   ecx
c001f897:	e8 a6 ff ff ff       	call   c001f842 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f89c:	83 c4 10             	add    esp,0x10
c001f89f:	83 e0 01             	and    eax,0x1
c001f8a2:	5b                   	pop    ebx
c001f8a3:	88 c1                	mov    cl,al
c001f8a5:	83 e2 01             	and    edx,0x1
c001f8a8:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001f8ad:	c1 e2 06             	shl    edx,0x6
c001f8b0:	83 e0 ba             	and    eax,0xffffffba
c001f8b3:	5e                   	pop    esi
c001f8b4:	09 c8                	or     eax,ecx
c001f8b6:	5f                   	pop    edi
c001f8b7:	09 d0                	or     eax,edx
c001f8b9:	a2 c1 1b 03 c0       	mov    ds:0xc0031bc1,al
c001f8be:	c3                   	ret    

c001f8bf <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8c7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8cb:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8cf:	c3                   	ret    

c001f8d0 <Vm::fpuAbs(unsigned long long)>:
c001f8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8d8:	c3                   	ret    

c001f8d9 <Vm::fpuChs(unsigned long long)>:
c001f8d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8e1:	f7 d8                	neg    eax
c001f8e3:	83 d2 00             	adc    edx,0x0
c001f8e6:	f7 da                	neg    edx
c001f8e8:	c3                   	ret    

c001f8e9 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8e9:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8ed:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8f2:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8f6:	eb c7                	jmp    c001f8bf <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8f8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8f8:	53                   	push   ebx
c001f8f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f901:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f905:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f909:	0f af ca             	imul   ecx,edx
c001f90c:	0f af d8             	imul   ebx,eax
c001f90f:	f7 e2                	mul    edx
c001f911:	01 d9                	add    ecx,ebx
c001f913:	5b                   	pop    ebx
c001f914:	01 ca                	add    edx,ecx
c001f916:	c3                   	ret    

c001f917 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f917:	83 ec 0c             	sub    esp,0xc
c001f91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f92a:	e8 9d 70 00 00       	call   c00269cc <__udivdi3>
c001f92f:	83 c4 1c             	add    esp,0x1c
c001f932:	c3                   	ret    

c001f933 <Vm::fpuSquare(unsigned long long)>:
c001f933:	50                   	push   eax
c001f934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f938:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f93c:	52                   	push   edx
c001f93d:	50                   	push   eax
c001f93e:	52                   	push   edx
c001f93f:	50                   	push   eax
c001f940:	e8 b3 ff ff ff       	call   c001f8f8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f945:	83 c4 14             	add    esp,0x14
c001f948:	c3                   	ret    

c001f949 <Vm::fpuGetReg(int)>:
c001f949:	83 ec 0c             	sub    esp,0xc
c001f94c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f951:	76 10                	jbe    c001f963 <Vm::fpuGetReg(int)+0x1a>
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	68 66 c9 02 c0       	push   0xc002c966
c001f95b:	e8 6d ac ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001f960:	83 c4 10             	add    esp,0x10
c001f963:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001f968:	b9 08 00 00 00       	mov    ecx,0x8
c001f96d:	c0 e8 03             	shr    al,0x3
c001f970:	83 e0 07             	and    eax,0x7
c001f973:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f977:	99                   	cdq    
c001f978:	f7 f9                	idiv   ecx
c001f97a:	8b 04 d5 c4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce43c]
c001f981:	8b 14 d5 c8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce438]
c001f988:	83 c4 0c             	add    esp,0xc
c001f98b:	c3                   	ret    

c001f98c <Vm::fpuSetReg(int, unsigned long long)>:
c001f98c:	57                   	push   edi
c001f98d:	56                   	push   esi
c001f98e:	52                   	push   edx
c001f98f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f993:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f997:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f99c:	76 10                	jbe    c001f9ae <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	68 79 c9 02 c0       	push   0xc002c979
c001f9a6:	e8 22 ac ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001f9b3:	b9 08 00 00 00       	mov    ecx,0x8
c001f9b8:	c0 e8 03             	shr    al,0x3
c001f9bb:	83 e0 07             	and    eax,0x7
c001f9be:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9c2:	99                   	cdq    
c001f9c3:	f7 f9                	idiv   ecx
c001f9c5:	89 34 d5 c4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce43c],esi
c001f9cc:	89 3c d5 c8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce438],edi
c001f9d3:	58                   	pop    eax
c001f9d4:	5e                   	pop    esi
c001f9d5:	5f                   	pop    edi
c001f9d6:	c3                   	ret    

c001f9d7 <Vm::fpuPush(unsigned long long)>:
c001f9d7:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001f9dc:	c0 e8 03             	shr    al,0x3
c001f9df:	83 e0 07             	and    eax,0x7
c001f9e2:	83 c0 07             	add    eax,0x7
c001f9e5:	88 c2                	mov    dl,al
c001f9e7:	83 e0 07             	and    eax,0x7
c001f9ea:	83 e2 07             	and    edx,0x7
c001f9ed:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9f4:	8a 15 c1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031bc1
c001f9fa:	83 e2 c7             	and    edx,0xffffffc7
c001f9fd:	09 ca                	or     edx,ecx
c001f9ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa03:	88 15 c1 1b 03 c0    	mov    BYTE PTR ds:0xc0031bc1,dl
c001fa09:	89 0c c5 c8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce438],ecx
c001fa10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa14:	89 14 c5 c4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce43c],edx
c001fa1b:	a1 04 1c 03 c0       	mov    eax,ds:0xc0031c04
c001fa20:	83 f8 08             	cmp    eax,0x8
c001fa23:	75 08                	jne    c001fa2d <Vm::fpuPush(unsigned long long)+0x56>
c001fa25:	80 0d c0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031bc0,0x40
c001fa2c:	c3                   	ret    
c001fa2d:	40                   	inc    eax
c001fa2e:	a3 04 1c 03 c0       	mov    ds:0xc0031c04,eax
c001fa33:	c3                   	ret    

c001fa34 <Vm::fpuPop()>:
c001fa34:	8a 0d c1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031bc1
c001fa3a:	53                   	push   ebx
c001fa3b:	c0 e9 03             	shr    cl,0x3
c001fa3e:	8a 1d c1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031bc1
c001fa44:	83 e1 07             	and    ecx,0x7
c001fa47:	83 e3 c7             	and    ebx,0xffffffc7
c001fa4a:	8b 04 cd c4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce43c]
c001fa51:	8b 14 cd c8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce438]
c001fa58:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa5f:	83 e1 38             	and    ecx,0x38
c001fa62:	09 d9                	or     ecx,ebx
c001fa64:	88 0d c1 1b 03 c0    	mov    BYTE PTR ds:0xc0031bc1,cl
c001fa6a:	8b 0d 04 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c04
c001fa70:	85 c9                	test   ecx,ecx
c001fa72:	74 09                	je     c001fa7d <Vm::fpuPop()+0x49>
c001fa74:	49                   	dec    ecx
c001fa75:	89 0d 04 1c 03 c0    	mov    DWORD PTR ds:0xc0031c04,ecx
c001fa7b:	eb 07                	jmp    c001fa84 <Vm::fpuPop()+0x50>
c001fa7d:	80 0d c0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031bc0,0x40
c001fa84:	5b                   	pop    ebx
c001fa85:	c3                   	ret    

c001fa86 <Vm::x87Handler(regs*)>:
c001fa86:	55                   	push   ebp
c001fa87:	57                   	push   edi
c001fa88:	56                   	push   esi
c001fa89:	53                   	push   ebx
c001fa8a:	83 ec 1c             	sub    esp,0x1c
c001fa8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa91:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa96:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa99:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001faa1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001faa5:	50                   	push   eax
c001faa6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001faaa:	50                   	push   eax
c001faab:	8d 44 24 14          	lea    eax,[esp+0x14]
c001faaf:	50                   	push   eax
c001fab0:	53                   	push   ebx
c001fab1:	e8 de a1 ff ff       	call   c0019c94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fab6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fab9:	83 c4 10             	add    esp,0x10
c001fabc:	89 c6                	mov    esi,eax
c001fabe:	80 fa d9             	cmp    dl,0xd9
c001fac1:	0f 85 52 01 00 00    	jne    c001fc19 <Vm::x87Handler(regs*)+0x193>
c001fac7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001facb:	8d 50 20             	lea    edx,[eax+0x20]
c001face:	80 fa 0e             	cmp    dl,0xe
c001fad1:	0f 87 86 00 00 00    	ja     c001fb5d <Vm::x87Handler(regs*)+0xd7>
c001fad7:	0f b6 d2             	movzx  edx,dl
c001fada:	ff 24 95 8c c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3674]
c001fae1:	e8 e7 fc ff ff       	call   c001f7cd <Vm::fpuGet0()>
c001fae6:	eb 05                	jmp    c001faed <Vm::x87Handler(regs*)+0x67>
c001fae8:	e8 e5 fc ff ff       	call   c001f7d2 <Vm::fpuGet1()>
c001faed:	57                   	push   edi
c001faee:	57                   	push   edi
c001faef:	52                   	push   edx
c001faf0:	50                   	push   eax
c001faf1:	e8 e1 fe ff ff       	call   c001f9d7 <Vm::fpuPush(unsigned long long)>
c001faf6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fafa:	83 c4 10             	add    esp,0x10
c001fafd:	b0 01                	mov    al,0x1
c001faff:	e9 e3 09 00 00       	jmp    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	6a 00                	push   0x0
c001fb09:	e8 3b fe ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fb0e:	59                   	pop    ecx
c001fb0f:	5e                   	pop    esi
c001fb10:	52                   	push   edx
c001fb11:	50                   	push   eax
c001fb12:	e8 c2 fd ff ff       	call   c001f8d9 <Vm::fpuChs(unsigned long long)>
c001fb17:	eb 13                	jmp    c001fb2c <Vm::x87Handler(regs*)+0xa6>
c001fb19:	83 ec 0c             	sub    esp,0xc
c001fb1c:	6a 00                	push   0x0
c001fb1e:	e8 26 fe ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fb23:	5f                   	pop    edi
c001fb24:	5d                   	pop    ebp
c001fb25:	52                   	push   edx
c001fb26:	50                   	push   eax
c001fb27:	e8 a4 fd ff ff       	call   c001f8d0 <Vm::fpuAbs(unsigned long long)>
c001fb2c:	83 c4 0c             	add    esp,0xc
c001fb2f:	52                   	push   edx
c001fb30:	50                   	push   eax
c001fb31:	6a 00                	push   0x0
c001fb33:	e8 54 fe ff ff       	call   c001f98c <Vm::fpuSetReg(int, unsigned long long)>
c001fb38:	eb bc                	jmp    c001faf6 <Vm::x87Handler(regs*)+0x70>
c001fb3a:	e8 d3 fc ff ff       	call   c001f812 <Vm::fpuGetLog210()>
c001fb3f:	eb ac                	jmp    c001faed <Vm::x87Handler(regs*)+0x67>
c001fb41:	e8 9c fc ff ff       	call   c001f7e2 <Vm::fpuGetLog2E()>
c001fb46:	eb a5                	jmp    c001faed <Vm::x87Handler(regs*)+0x67>
c001fb48:	e8 8d fc ff ff       	call   c001f7da <Vm::fpuGetPi()>
c001fb4d:	eb 9e                	jmp    c001faed <Vm::x87Handler(regs*)+0x67>
c001fb4f:	e8 d6 fc ff ff       	call   c001f82a <Vm::fpuGetLog102()>
c001fb54:	eb 97                	jmp    c001faed <Vm::x87Handler(regs*)+0x67>
c001fb56:	e8 9f fc ff ff       	call   c001f7fa <Vm::fpuGetLogE2()>
c001fb5b:	eb 90                	jmp    c001faed <Vm::x87Handler(regs*)+0x67>
c001fb5d:	8d 50 40             	lea    edx,[eax+0x40]
c001fb60:	80 fa 07             	cmp    dl,0x7
c001fb63:	77 15                	ja     c001fb7a <Vm::x87Handler(regs*)+0xf4>
c001fb65:	83 ec 0c             	sub    esp,0xc
c001fb68:	2d c0 00 00 00       	sub    eax,0xc0
c001fb6d:	50                   	push   eax
c001fb6e:	e8 d6 fd ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fb73:	59                   	pop    ecx
c001fb74:	5e                   	pop    esi
c001fb75:	e9 75 ff ff ff       	jmp    c001faef <Vm::x87Handler(regs*)+0x69>
c001fb7a:	8d 50 38             	lea    edx,[eax+0x38]
c001fb7d:	80 fa 07             	cmp    dl,0x7
c001fb80:	77 3c                	ja     c001fbbe <Vm::x87Handler(regs*)+0x138>
c001fb82:	83 ec 0c             	sub    esp,0xc
c001fb85:	2d c8 00 00 00       	sub    eax,0xc8
c001fb8a:	50                   	push   eax
c001fb8b:	e8 b9 fd ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fb90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb97:	89 c6                	mov    esi,eax
c001fb99:	89 d7                	mov    edi,edx
c001fb9b:	e8 a9 fd ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fba0:	83 c4 0c             	add    esp,0xc
c001fba3:	52                   	push   edx
c001fba4:	50                   	push   eax
c001fba5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fba9:	2d c8 00 00 00       	sub    eax,0xc8
c001fbae:	50                   	push   eax
c001fbaf:	e8 d8 fd ff ff       	call   c001f98c <Vm::fpuSetReg(int, unsigned long long)>
c001fbb4:	83 c4 0c             	add    esp,0xc
c001fbb7:	57                   	push   edi
c001fbb8:	56                   	push   esi
c001fbb9:	e9 73 ff ff ff       	jmp    c001fb31 <Vm::x87Handler(regs*)+0xab>
c001fbbe:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbc2:	84 d2                	test   dl,dl
c001fbc4:	75 0f                	jne    c001fbd5 <Vm::x87Handler(regs*)+0x14f>
c001fbc6:	83 ec 0c             	sub    esp,0xc
c001fbc9:	ff 36                	push   DWORD PTR [esi]
c001fbcb:	e8 c8 fa ff ff       	call   c001f698 <Vm::fpu32ToInternal(unsigned int)>
c001fbd0:	e9 bf 00 00 00       	jmp    c001fc94 <Vm::x87Handler(regs*)+0x20e>
c001fbd5:	80 fa 03             	cmp    dl,0x3
c001fbd8:	75 13                	jne    c001fbed <Vm::x87Handler(regs*)+0x167>
c001fbda:	e8 55 fe ff ff       	call   c001fa34 <Vm::fpuPop()>
c001fbdf:	55                   	push   ebp
c001fbe0:	55                   	push   ebp
c001fbe1:	52                   	push   edx
c001fbe2:	50                   	push   eax
c001fbe3:	e8 4c fa ff ff       	call   c001f634 <Vm::fpuInternalTo32(unsigned long long)>
c001fbe8:	e9 88 00 00 00       	jmp    c001fc75 <Vm::x87Handler(regs*)+0x1ef>
c001fbed:	80 fa 05             	cmp    dl,0x5
c001fbf0:	75 0e                	jne    c001fc00 <Vm::x87Handler(regs*)+0x17a>
c001fbf2:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbf5:	66 a3 c2 1b 03 c0    	mov    ds:0xc0031bc2,ax
c001fbfb:	e9 df 00 00 00       	jmp    c001fcdf <Vm::x87Handler(regs*)+0x259>
c001fc00:	31 c0                	xor    eax,eax
c001fc02:	80 fa 07             	cmp    dl,0x7
c001fc05:	0f 85 dc 08 00 00    	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c001fc0b:	66 a1 c2 1b 03 c0    	mov    ax,ds:0xc0031bc2
c001fc11:	66 89 06             	mov    WORD PTR [esi],ax
c001fc14:	e9 c6 00 00 00       	jmp    c001fcdf <Vm::x87Handler(regs*)+0x259>
c001fc19:	80 fa d8             	cmp    dl,0xd8
c001fc1c:	0f 84 c9 00 00 00    	je     c001fceb <Vm::x87Handler(regs*)+0x265>
c001fc22:	80 fa dc             	cmp    dl,0xdc
c001fc25:	0f 84 0d 02 00 00    	je     c001fe38 <Vm::x87Handler(regs*)+0x3b2>
c001fc2b:	80 fa de             	cmp    dl,0xde
c001fc2e:	0f 84 cd 02 00 00    	je     c001ff01 <Vm::x87Handler(regs*)+0x47b>
c001fc34:	80 fa dd             	cmp    dl,0xdd
c001fc37:	0f 84 5f 04 00 00    	je     c002009c <Vm::x87Handler(regs*)+0x616>
c001fc3d:	80 fa da             	cmp    dl,0xda
c001fc40:	0f 84 24 05 00 00    	je     c002016a <Vm::x87Handler(regs*)+0x6e4>
c001fc46:	80 fa df             	cmp    dl,0xdf
c001fc49:	0f 84 68 05 00 00    	je     c00201b7 <Vm::x87Handler(regs*)+0x731>
c001fc4f:	31 c0                	xor    eax,eax
c001fc51:	80 fa db             	cmp    dl,0xdb
c001fc54:	0f 85 8d 08 00 00    	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c001fc5a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc5e:	80 fa 03             	cmp    dl,0x3
c001fc61:	0f 85 70 06 00 00    	jne    c00202d7 <Vm::x87Handler(regs*)+0x851>
c001fc67:	e8 c8 fd ff ff       	call   c001fa34 <Vm::fpuPop()>
c001fc6c:	55                   	push   ebp
c001fc6d:	55                   	push   ebp
c001fc6e:	52                   	push   edx
c001fc6f:	50                   	push   eax
c001fc70:	e8 71 fa ff ff       	call   c001f6e6 <Vm::fpuFloatToLong(unsigned long long)>
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	89 06                	mov    DWORD PTR [esi],eax
c001fc7a:	eb 63                	jmp    c001fcdf <Vm::x87Handler(regs*)+0x259>
c001fc7c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc80:	84 d2                	test   dl,dl
c001fc82:	0f 85 e6 05 00 00    	jne    c002026e <Vm::x87Handler(regs*)+0x7e8>
c001fc88:	57                   	push   edi
c001fc89:	57                   	push   edi
c001fc8a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc8d:	ff 36                	push   DWORD PTR [esi]
c001fc8f:	e8 49 fa ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c001fc94:	5e                   	pop    esi
c001fc95:	5f                   	pop    edi
c001fc96:	52                   	push   edx
c001fc97:	50                   	push   eax
c001fc98:	e8 3a fd ff ff       	call   c001f9d7 <Vm::fpuPush(unsigned long long)>
c001fc9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fca1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fca4:	e9 51 fe ff ff       	jmp    c001fafa <Vm::x87Handler(regs*)+0x74>
c001fca9:	80 fa 03             	cmp    dl,0x3
c001fcac:	0f 85 d7 06 00 00    	jne    c0020389 <Vm::x87Handler(regs*)+0x903>
c001fcb2:	57                   	push   edi
c001fcb3:	57                   	push   edi
c001fcb4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcb7:	ff 36                	push   DWORD PTR [esi]
c001fcb9:	e8 1f fa ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c001fcbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcc5:	89 c6                	mov    esi,eax
c001fcc7:	89 d7                	mov    edi,edx
c001fcc9:	e8 7b fc ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fcce:	57                   	push   edi
c001fccf:	56                   	push   esi
c001fcd0:	52                   	push   edx
c001fcd1:	50                   	push   eax
c001fcd2:	e8 95 fb ff ff       	call   c001f86c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcd7:	83 c4 20             	add    esp,0x20
c001fcda:	e8 55 fd ff ff       	call   c001fa34 <Vm::fpuPop()>
c001fcdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fce3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fce6:	e9 12 fe ff ff       	jmp    c001fafd <Vm::x87Handler(regs*)+0x77>
c001fceb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcef:	8d 50 40             	lea    edx,[eax+0x40]
c001fcf2:	80 fa 07             	cmp    dl,0x7
c001fcf5:	77 29                	ja     c001fd20 <Vm::x87Handler(regs*)+0x29a>
c001fcf7:	83 ec 0c             	sub    esp,0xc
c001fcfa:	2d c0 00 00 00       	sub    eax,0xc0
c001fcff:	50                   	push   eax
c001fd00:	e8 44 fc ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fd05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd0c:	89 c6                	mov    esi,eax
c001fd0e:	89 d7                	mov    edi,edx
c001fd10:	e8 34 fc ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fd15:	57                   	push   edi
c001fd16:	56                   	push   esi
c001fd17:	52                   	push   edx
c001fd18:	50                   	push   eax
c001fd19:	e8 a1 fb ff ff       	call   c001f8bf <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd1e:	eb 2f                	jmp    c001fd4f <Vm::x87Handler(regs*)+0x2c9>
c001fd20:	8d 50 38             	lea    edx,[eax+0x38]
c001fd23:	80 fa 07             	cmp    dl,0x7
c001fd26:	77 2f                	ja     c001fd57 <Vm::x87Handler(regs*)+0x2d1>
c001fd28:	83 ec 0c             	sub    esp,0xc
c001fd2b:	2d c8 00 00 00       	sub    eax,0xc8
c001fd30:	50                   	push   eax
c001fd31:	e8 13 fc ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fd36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd3d:	89 c6                	mov    esi,eax
c001fd3f:	89 d7                	mov    edi,edx
c001fd41:	e8 03 fc ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fd46:	57                   	push   edi
c001fd47:	56                   	push   esi
c001fd48:	52                   	push   edx
c001fd49:	50                   	push   eax
c001fd4a:	e8 a9 fb ff ff       	call   c001f8f8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd4f:	83 c4 1c             	add    esp,0x1c
c001fd52:	e9 d8 fd ff ff       	jmp    c001fb2f <Vm::x87Handler(regs*)+0xa9>
c001fd57:	8d 50 30             	lea    edx,[eax+0x30]
c001fd5a:	80 fa 07             	cmp    dl,0x7
c001fd5d:	77 0d                	ja     c001fd6c <Vm::x87Handler(regs*)+0x2e6>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	2d d0 00 00 00       	sub    eax,0xd0
c001fd67:	e9 99 03 00 00       	jmp    c0020105 <Vm::x87Handler(regs*)+0x67f>
c001fd6c:	8d 50 28             	lea    edx,[eax+0x28]
c001fd6f:	80 fa 07             	cmp    dl,0x7
c001fd72:	77 0d                	ja     c001fd81 <Vm::x87Handler(regs*)+0x2fb>
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	2d d8 00 00 00       	sub    eax,0xd8
c001fd7c:	e9 c0 03 00 00       	jmp    c0020141 <Vm::x87Handler(regs*)+0x6bb>
c001fd81:	8d 50 20             	lea    edx,[eax+0x20]
c001fd84:	80 fa 07             	cmp    dl,0x7
c001fd87:	77 1b                	ja     c001fda4 <Vm::x87Handler(regs*)+0x31e>
c001fd89:	83 ec 0c             	sub    esp,0xc
c001fd8c:	2d e0 00 00 00       	sub    eax,0xe0
c001fd91:	50                   	push   eax
c001fd92:	e8 b2 fb ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fd97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9e:	89 c6                	mov    esi,eax
c001fda0:	89 d7                	mov    edi,edx
c001fda2:	eb 22                	jmp    c001fdc6 <Vm::x87Handler(regs*)+0x340>
c001fda4:	8d 50 18             	lea    edx,[eax+0x18]
c001fda7:	80 fa 07             	cmp    dl,0x7
c001fdaa:	77 2d                	ja     c001fdd9 <Vm::x87Handler(regs*)+0x353>
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	6a 00                	push   0x0
c001fdb1:	e8 93 fb ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fdb6:	89 c6                	mov    esi,eax
c001fdb8:	89 d7                	mov    edi,edx
c001fdba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdbe:	2d e8 00 00 00       	sub    eax,0xe8
c001fdc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdc6:	e8 7e fb ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fdcb:	57                   	push   edi
c001fdcc:	56                   	push   esi
c001fdcd:	52                   	push   edx
c001fdce:	50                   	push   eax
c001fdcf:	e8 15 fb ff ff       	call   c001f8e9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdd4:	e9 76 ff ff ff       	jmp    c001fd4f <Vm::x87Handler(regs*)+0x2c9>
c001fdd9:	8d 50 10             	lea    edx,[eax+0x10]
c001fddc:	80 fa 07             	cmp    dl,0x7
c001fddf:	77 1b                	ja     c001fdfc <Vm::x87Handler(regs*)+0x376>
c001fde1:	83 ec 0c             	sub    esp,0xc
c001fde4:	2d f0 00 00 00       	sub    eax,0xf0
c001fde9:	50                   	push   eax
c001fdea:	e8 5a fb ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fdef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdf6:	89 c6                	mov    esi,eax
c001fdf8:	89 d7                	mov    edi,edx
c001fdfa:	eb 22                	jmp    c001fe1e <Vm::x87Handler(regs*)+0x398>
c001fdfc:	3c f7                	cmp    al,0xf7
c001fdfe:	0f 86 d1 03 00 00    	jbe    c00201d5 <Vm::x87Handler(regs*)+0x74f>
c001fe04:	83 ec 0c             	sub    esp,0xc
c001fe07:	6a 00                	push   0x0
c001fe09:	e8 3b fb ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fe0e:	89 c6                	mov    esi,eax
c001fe10:	89 d7                	mov    edi,edx
c001fe12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe16:	2d f8 00 00 00       	sub    eax,0xf8
c001fe1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe1e:	e8 26 fb ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fe23:	57                   	push   edi
c001fe24:	56                   	push   esi
c001fe25:	52                   	push   edx
c001fe26:	50                   	push   eax
c001fe27:	e8 eb fa ff ff       	call   c001f917 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe2c:	83 c4 1c             	add    esp,0x1c
c001fe2f:	52                   	push   edx
c001fe30:	50                   	push   eax
c001fe31:	6a 00                	push   0x0
c001fe33:	e9 51 02 00 00       	jmp    c0020089 <Vm::x87Handler(regs*)+0x603>
c001fe38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe3c:	8d 50 40             	lea    edx,[eax+0x40]
c001fe3f:	80 fa 07             	cmp    dl,0x7
c001fe42:	77 37                	ja     c001fe7b <Vm::x87Handler(regs*)+0x3f5>
c001fe44:	83 ec 0c             	sub    esp,0xc
c001fe47:	2d c0 00 00 00       	sub    eax,0xc0
c001fe4c:	50                   	push   eax
c001fe4d:	e8 f7 fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fe52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe59:	89 c6                	mov    esi,eax
c001fe5b:	89 d7                	mov    edi,edx
c001fe5d:	e8 e7 fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fe62:	57                   	push   edi
c001fe63:	56                   	push   esi
c001fe64:	52                   	push   edx
c001fe65:	50                   	push   eax
c001fe66:	e8 54 fa ff ff       	call   c001f8bf <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe6b:	83 c4 1c             	add    esp,0x1c
c001fe6e:	52                   	push   edx
c001fe6f:	50                   	push   eax
c001fe70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe74:	2d c0 00 00 00       	sub    eax,0xc0
c001fe79:	eb 3d                	jmp    c001feb8 <Vm::x87Handler(regs*)+0x432>
c001fe7b:	8d 50 38             	lea    edx,[eax+0x38]
c001fe7e:	80 fa 07             	cmp    dl,0x7
c001fe81:	77 3b                	ja     c001febe <Vm::x87Handler(regs*)+0x438>
c001fe83:	83 ec 0c             	sub    esp,0xc
c001fe86:	2d c8 00 00 00       	sub    eax,0xc8
c001fe8b:	50                   	push   eax
c001fe8c:	e8 b8 fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fe91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe98:	89 c6                	mov    esi,eax
c001fe9a:	89 d7                	mov    edi,edx
c001fe9c:	e8 a8 fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fea1:	57                   	push   edi
c001fea2:	56                   	push   esi
c001fea3:	52                   	push   edx
c001fea4:	50                   	push   eax
c001fea5:	e8 4e fa ff ff       	call   c001f8f8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feaa:	83 c4 1c             	add    esp,0x1c
c001fead:	52                   	push   edx
c001feae:	50                   	push   eax
c001feaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb3:	2d c8 00 00 00       	sub    eax,0xc8
c001feb8:	50                   	push   eax
c001feb9:	e9 75 fc ff ff       	jmp    c001fb33 <Vm::x87Handler(regs*)+0xad>
c001febe:	83 c0 18             	add    eax,0x18
c001fec1:	3c 07                	cmp    al,0x7
c001fec3:	0f 87 3b 04 00 00    	ja     c0020304 <Vm::x87Handler(regs*)+0x87e>
c001fec9:	83 ec 0c             	sub    esp,0xc
c001fecc:	6a 00                	push   0x0
c001fece:	e8 76 fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fed3:	89 c6                	mov    esi,eax
c001fed5:	89 d7                	mov    edi,edx
c001fed7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedb:	2d e8 00 00 00       	sub    eax,0xe8
c001fee0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fee3:	e8 61 fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fee8:	57                   	push   edi
c001fee9:	56                   	push   esi
c001feea:	52                   	push   edx
c001feeb:	50                   	push   eax
c001feec:	e8 f8 f9 ff ff       	call   c001f8e9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fef1:	83 c4 1c             	add    esp,0x1c
c001fef4:	52                   	push   edx
c001fef5:	50                   	push   eax
c001fef6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fefa:	2d e8 00 00 00       	sub    eax,0xe8
c001feff:	eb b7                	jmp    c001feb8 <Vm::x87Handler(regs*)+0x432>
c001ff01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff05:	8d 50 40             	lea    edx,[eax+0x40]
c001ff08:	80 fa 07             	cmp    dl,0x7
c001ff0b:	77 3a                	ja     c001ff47 <Vm::x87Handler(regs*)+0x4c1>
c001ff0d:	83 ec 0c             	sub    esp,0xc
c001ff10:	2d c0 00 00 00       	sub    eax,0xc0
c001ff15:	50                   	push   eax
c001ff16:	e8 2e fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001ff1b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff22:	89 c6                	mov    esi,eax
c001ff24:	89 d7                	mov    edi,edx
c001ff26:	e8 1e fa ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001ff2b:	57                   	push   edi
c001ff2c:	56                   	push   esi
c001ff2d:	52                   	push   edx
c001ff2e:	50                   	push   eax
c001ff2f:	e8 8b f9 ff ff       	call   c001f8bf <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff34:	83 c4 1c             	add    esp,0x1c
c001ff37:	52                   	push   edx
c001ff38:	50                   	push   eax
c001ff39:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff3d:	2d c0 00 00 00       	sub    eax,0xc0
c001ff42:	e9 9e 01 00 00       	jmp    c00200e5 <Vm::x87Handler(regs*)+0x65f>
c001ff47:	8d 50 20             	lea    edx,[eax+0x20]
c001ff4a:	80 fa 07             	cmp    dl,0x7
c001ff4d:	77 3a                	ja     c001ff89 <Vm::x87Handler(regs*)+0x503>
c001ff4f:	83 ec 0c             	sub    esp,0xc
c001ff52:	2d e0 00 00 00       	sub    eax,0xe0
c001ff57:	50                   	push   eax
c001ff58:	e8 ec f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001ff5d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff64:	89 c6                	mov    esi,eax
c001ff66:	89 d7                	mov    edi,edx
c001ff68:	e8 dc f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001ff6d:	57                   	push   edi
c001ff6e:	56                   	push   esi
c001ff6f:	52                   	push   edx
c001ff70:	50                   	push   eax
c001ff71:	e8 73 f9 ff ff       	call   c001f8e9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff76:	83 c4 1c             	add    esp,0x1c
c001ff79:	52                   	push   edx
c001ff7a:	50                   	push   eax
c001ff7b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7f:	2d e0 00 00 00       	sub    eax,0xe0
c001ff84:	e9 5c 01 00 00       	jmp    c00200e5 <Vm::x87Handler(regs*)+0x65f>
c001ff89:	8d 50 18             	lea    edx,[eax+0x18]
c001ff8c:	80 fa 07             	cmp    dl,0x7
c001ff8f:	77 3b                	ja     c001ffcc <Vm::x87Handler(regs*)+0x546>
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	6a 00                	push   0x0
c001ff96:	e8 ae f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001ff9b:	89 c6                	mov    esi,eax
c001ff9d:	89 d7                	mov    edi,edx
c001ff9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa3:	2d e8 00 00 00       	sub    eax,0xe8
c001ffa8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffab:	e8 99 f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001ffb0:	57                   	push   edi
c001ffb1:	56                   	push   esi
c001ffb2:	52                   	push   edx
c001ffb3:	50                   	push   eax
c001ffb4:	e8 30 f9 ff ff       	call   c001f8e9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffb9:	83 c4 1c             	add    esp,0x1c
c001ffbc:	52                   	push   edx
c001ffbd:	50                   	push   eax
c001ffbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc2:	2d e8 00 00 00       	sub    eax,0xe8
c001ffc7:	e9 19 01 00 00       	jmp    c00200e5 <Vm::x87Handler(regs*)+0x65f>
c001ffcc:	8d 50 38             	lea    edx,[eax+0x38]
c001ffcf:	80 fa 07             	cmp    dl,0x7
c001ffd2:	77 37                	ja     c002000b <Vm::x87Handler(regs*)+0x585>
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	2d c8 00 00 00       	sub    eax,0xc8
c001ffdc:	50                   	push   eax
c001ffdd:	e8 67 f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001ffe2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffe9:	89 c6                	mov    esi,eax
c001ffeb:	89 d7                	mov    edi,edx
c001ffed:	e8 57 f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c001fff2:	57                   	push   edi
c001fff3:	56                   	push   esi
c001fff4:	52                   	push   edx
c001fff5:	50                   	push   eax
c001fff6:	e8 fd f8 ff ff       	call   c001f8f8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fffb:	83 c4 1c             	add    esp,0x1c
c001fffe:	52                   	push   edx
c001ffff:	50                   	push   eax
c0020000:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020004:	2d c8 00 00 00       	sub    eax,0xc8
c0020009:	eb 7d                	jmp    c0020088 <Vm::x87Handler(regs*)+0x602>
c002000b:	3c f7                	cmp    al,0xf7
c002000d:	76 38                	jbe    c0020047 <Vm::x87Handler(regs*)+0x5c1>
c002000f:	83 ec 0c             	sub    esp,0xc
c0020012:	6a 00                	push   0x0
c0020014:	e8 30 f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020019:	89 c6                	mov    esi,eax
c002001b:	89 d7                	mov    edi,edx
c002001d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020021:	2d f8 00 00 00       	sub    eax,0xf8
c0020026:	89 04 24             	mov    DWORD PTR [esp],eax
c0020029:	e8 1b f9 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c002002e:	57                   	push   edi
c002002f:	56                   	push   esi
c0020030:	52                   	push   edx
c0020031:	50                   	push   eax
c0020032:	e8 e0 f8 ff ff       	call   c001f917 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020037:	83 c4 1c             	add    esp,0x1c
c002003a:	52                   	push   edx
c002003b:	50                   	push   eax
c002003c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020040:	2d f8 00 00 00       	sub    eax,0xf8
c0020045:	eb 41                	jmp    c0020088 <Vm::x87Handler(regs*)+0x602>
c0020047:	8d 50 10             	lea    edx,[eax+0x10]
c002004a:	80 fa 07             	cmp    dl,0x7
c002004d:	0f 87 5a 01 00 00    	ja     c00201ad <Vm::x87Handler(regs*)+0x727>
c0020053:	83 ec 0c             	sub    esp,0xc
c0020056:	2d f0 00 00 00       	sub    eax,0xf0
c002005b:	50                   	push   eax
c002005c:	e8 e8 f8 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020061:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020068:	89 c6                	mov    esi,eax
c002006a:	89 d7                	mov    edi,edx
c002006c:	e8 d8 f8 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020071:	57                   	push   edi
c0020072:	56                   	push   esi
c0020073:	52                   	push   edx
c0020074:	50                   	push   eax
c0020075:	e8 9d f8 ff ff       	call   c001f917 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002007a:	83 c4 1c             	add    esp,0x1c
c002007d:	52                   	push   edx
c002007e:	50                   	push   eax
c002007f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020083:	2d f0 00 00 00       	sub    eax,0xf0
c0020088:	50                   	push   eax
c0020089:	e8 fe f8 ff ff       	call   c001f98c <Vm::fpuSetReg(int, unsigned long long)>
c002008e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020092:	e8 9d f9 ff ff       	call   c001fa34 <Vm::fpuPop()>
c0020097:	e9 5e fa ff ff       	jmp    c001fafa <Vm::x87Handler(regs*)+0x74>
c002009c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a0:	8d 50 30             	lea    edx,[eax+0x30]
c00200a3:	80 fa 07             	cmp    dl,0x7
c00200a6:	77 1d                	ja     c00200c5 <Vm::x87Handler(regs*)+0x63f>
c00200a8:	83 ec 0c             	sub    esp,0xc
c00200ab:	6a 00                	push   0x0
c00200ad:	e8 97 f8 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c00200b2:	83 c4 0c             	add    esp,0xc
c00200b5:	52                   	push   edx
c00200b6:	50                   	push   eax
c00200b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200bb:	2d d0 00 00 00       	sub    eax,0xd0
c00200c0:	e9 f3 fd ff ff       	jmp    c001feb8 <Vm::x87Handler(regs*)+0x432>
c00200c5:	8d 50 28             	lea    edx,[eax+0x28]
c00200c8:	80 fa 07             	cmp    dl,0x7
c00200cb:	77 28                	ja     c00200f5 <Vm::x87Handler(regs*)+0x66f>
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	6a 00                	push   0x0
c00200d2:	e8 72 f8 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c00200d7:	83 c4 0c             	add    esp,0xc
c00200da:	52                   	push   edx
c00200db:	50                   	push   eax
c00200dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e0:	2d d8 00 00 00       	sub    eax,0xd8
c00200e5:	50                   	push   eax
c00200e6:	e8 a1 f8 ff ff       	call   c001f98c <Vm::fpuSetReg(int, unsigned long long)>
c00200eb:	e8 44 f9 ff ff       	call   c001fa34 <Vm::fpuPop()>
c00200f0:	e9 01 fa ff ff       	jmp    c001faf6 <Vm::x87Handler(regs*)+0x70>
c00200f5:	8d 50 20             	lea    edx,[eax+0x20]
c00200f8:	80 fa 07             	cmp    dl,0x7
c00200fb:	77 30                	ja     c002012d <Vm::x87Handler(regs*)+0x6a7>
c00200fd:	83 ec 0c             	sub    esp,0xc
c0020100:	2d e0 00 00 00       	sub    eax,0xe0
c0020105:	50                   	push   eax
c0020106:	e8 3e f8 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c002010b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020112:	89 c6                	mov    esi,eax
c0020114:	89 d7                	mov    edi,edx
c0020116:	e8 2e f8 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c002011b:	57                   	push   edi
c002011c:	56                   	push   esi
c002011d:	52                   	push   edx
c002011e:	50                   	push   eax
c002011f:	e8 48 f7 ff ff       	call   c001f86c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020124:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020128:	e9 54 02 00 00       	jmp    c0020381 <Vm::x87Handler(regs*)+0x8fb>
c002012d:	8d 50 18             	lea    edx,[eax+0x18]
c0020130:	80 fa 07             	cmp    dl,0x7
c0020133:	0f 87 43 fb ff ff    	ja     c001fc7c <Vm::x87Handler(regs*)+0x1f6>
c0020139:	83 ec 0c             	sub    esp,0xc
c002013c:	2d e8 00 00 00       	sub    eax,0xe8
c0020141:	50                   	push   eax
c0020142:	e8 02 f8 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020147:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002014e:	89 c6                	mov    esi,eax
c0020150:	89 d7                	mov    edi,edx
c0020152:	e8 f2 f7 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020157:	57                   	push   edi
c0020158:	56                   	push   esi
c0020159:	52                   	push   edx
c002015a:	50                   	push   eax
c002015b:	e8 0c f7 ff ff       	call   c001f86c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020160:	83 c4 20             	add    esp,0x20
c0020163:	e8 cc f8 ff ff       	call   c001fa34 <Vm::fpuPop()>
c0020168:	eb 62                	jmp    c00201cc <Vm::x87Handler(regs*)+0x746>
c002016a:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002016e:	0f 85 0f 01 00 00    	jne    c0020283 <Vm::x87Handler(regs*)+0x7fd>
c0020174:	83 ec 0c             	sub    esp,0xc
c0020177:	6a 01                	push   0x1
c0020179:	e8 cb f7 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c002017e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020185:	89 c6                	mov    esi,eax
c0020187:	89 d7                	mov    edi,edx
c0020189:	e8 bb f7 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c002018e:	57                   	push   edi
c002018f:	56                   	push   esi
c0020190:	52                   	push   edx
c0020191:	50                   	push   eax
c0020192:	e8 d5 f6 ff ff       	call   c001f86c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020197:	83 c4 20             	add    esp,0x20
c002019a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002019e:	e8 91 f8 ff ff       	call   c001fa34 <Vm::fpuPop()>
c00201a3:	e8 8c f8 ff ff       	call   c001fa34 <Vm::fpuPop()>
c00201a8:	e9 50 f9 ff ff       	jmp    c001fafd <Vm::x87Handler(regs*)+0x77>
c00201ad:	3c d9                	cmp    al,0xd9
c00201af:	0f 85 b5 02 00 00    	jne    c002046a <Vm::x87Handler(regs*)+0x9e4>
c00201b5:	eb bd                	jmp    c0020174 <Vm::x87Handler(regs*)+0x6ee>
c00201b7:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201bb:	0f 85 ea 02 00 00    	jne    c00204ab <Vm::x87Handler(regs*)+0xa25>
c00201c1:	0f b7 05 c0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031bc0
c00201c8:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201d0:	e9 28 f9 ff ff       	jmp    c001fafd <Vm::x87Handler(regs*)+0x77>
c00201d5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201d9:	84 d2                	test   dl,dl
c00201db:	75 0f                	jne    c00201ec <Vm::x87Handler(regs*)+0x766>
c00201dd:	83 ec 0c             	sub    esp,0xc
c00201e0:	ff 36                	push   DWORD PTR [esi]
c00201e2:	e8 b1 f4 ff ff       	call   c001f698 <Vm::fpu32ToInternal(unsigned int)>
c00201e7:	e9 2c 01 00 00       	jmp    c0020318 <Vm::x87Handler(regs*)+0x892>
c00201ec:	80 fa 01             	cmp    dl,0x1
c00201ef:	75 0f                	jne    c0020200 <Vm::x87Handler(regs*)+0x77a>
c00201f1:	83 ec 0c             	sub    esp,0xc
c00201f4:	ff 36                	push   DWORD PTR [esi]
c00201f6:	e8 9d f4 ff ff       	call   c001f698 <Vm::fpu32ToInternal(unsigned int)>
c00201fb:	e9 81 02 00 00       	jmp    c0020481 <Vm::x87Handler(regs*)+0x9fb>
c0020200:	80 fa 04             	cmp    dl,0x4
c0020203:	75 0f                	jne    c0020214 <Vm::x87Handler(regs*)+0x78e>
c0020205:	83 ec 0c             	sub    esp,0xc
c0020208:	ff 36                	push   DWORD PTR [esi]
c002020a:	e8 89 f4 ff ff       	call   c001f698 <Vm::fpu32ToInternal(unsigned int)>
c002020f:	e9 86 01 00 00       	jmp    c002039a <Vm::x87Handler(regs*)+0x914>
c0020214:	80 fa 05             	cmp    dl,0x5
c0020217:	75 1b                	jne    c0020234 <Vm::x87Handler(regs*)+0x7ae>
c0020219:	83 ec 0c             	sub    esp,0xc
c002021c:	6a 00                	push   0x0
c002021e:	e8 26 f7 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020223:	89 c7                	mov    edi,eax
c0020225:	89 d5                	mov    ebp,edx
c0020227:	58                   	pop    eax
c0020228:	ff 36                	push   DWORD PTR [esi]
c002022a:	e8 69 f4 ff ff       	call   c001f698 <Vm::fpu32ToInternal(unsigned int)>
c002022f:	e9 a3 01 00 00       	jmp    c00203d7 <Vm::x87Handler(regs*)+0x951>
c0020234:	80 fa 06             	cmp    dl,0x6
c0020237:	75 0f                	jne    c0020248 <Vm::x87Handler(regs*)+0x7c2>
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	ff 36                	push   DWORD PTR [esi]
c002023e:	e8 55 f4 ff ff       	call   c001f698 <Vm::fpu32ToInternal(unsigned int)>
c0020243:	e9 ae 01 00 00       	jmp    c00203f6 <Vm::x87Handler(regs*)+0x970>
c0020248:	31 c0                	xor    eax,eax
c002024a:	80 fa 07             	cmp    dl,0x7
c002024d:	0f 85 94 02 00 00    	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c0020253:	83 ec 0c             	sub    esp,0xc
c0020256:	6a 00                	push   0x0
c0020258:	e8 ec f6 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c002025d:	89 c7                	mov    edi,eax
c002025f:	89 d5                	mov    ebp,edx
c0020261:	58                   	pop    eax
c0020262:	ff 36                	push   DWORD PTR [esi]
c0020264:	e8 2f f4 ff ff       	call   c001f698 <Vm::fpu32ToInternal(unsigned int)>
c0020269:	e9 cb 01 00 00       	jmp    c0020439 <Vm::x87Handler(regs*)+0x9b3>
c002026e:	80 fa 03             	cmp    dl,0x3
c0020271:	0f 85 d3 01 00 00    	jne    c002044a <Vm::x87Handler(regs*)+0x9c4>
c0020277:	e8 b8 f7 ff ff       	call   c001fa34 <Vm::fpuPop()>
c002027c:	51                   	push   ecx
c002027d:	51                   	push   ecx
c002027e:	e9 de 01 00 00       	jmp    c0020461 <Vm::x87Handler(regs*)+0x9db>
c0020283:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020287:	80 fa 01             	cmp    dl,0x1
c002028a:	75 09                	jne    c0020295 <Vm::x87Handler(regs*)+0x80f>
c002028c:	57                   	push   edi
c002028d:	57                   	push   edi
c002028e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020290:	e9 e3 01 00 00       	jmp    c0020478 <Vm::x87Handler(regs*)+0x9f2>
c0020295:	80 fa 04             	cmp    dl,0x4
c0020298:	75 12                	jne    c00202ac <Vm::x87Handler(regs*)+0x826>
c002029a:	31 d2                	xor    edx,edx
c002029c:	51                   	push   ecx
c002029d:	51                   	push   ecx
c002029e:	8b 06                	mov    eax,DWORD PTR [esi]
c00202a0:	52                   	push   edx
c00202a1:	50                   	push   eax
c00202a2:	e8 d0 f4 ff ff       	call   c001f777 <Vm::fpuLongToFloat(long long)>
c00202a7:	e9 ee 00 00 00       	jmp    c002039a <Vm::x87Handler(regs*)+0x914>
c00202ac:	31 c0                	xor    eax,eax
c00202ae:	80 fa 07             	cmp    dl,0x7
c00202b1:	0f 85 30 02 00 00    	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c00202b7:	83 ec 0c             	sub    esp,0xc
c00202ba:	6a 00                	push   0x0
c00202bc:	e8 88 f6 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c00202c1:	89 c7                	mov    edi,eax
c00202c3:	89 d5                	mov    ebp,edx
c00202c5:	58                   	pop    eax
c00202c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00202c8:	5a                   	pop    edx
c00202c9:	31 d2                	xor    edx,edx
c00202cb:	52                   	push   edx
c00202cc:	50                   	push   eax
c00202cd:	e8 a5 f4 ff ff       	call   c001f777 <Vm::fpuLongToFloat(long long)>
c00202d2:	e9 62 01 00 00       	jmp    c0020439 <Vm::x87Handler(regs*)+0x9b3>
c00202d7:	84 d2                	test   dl,dl
c00202d9:	75 0d                	jne    c00202e8 <Vm::x87Handler(regs*)+0x862>
c00202db:	31 d2                	xor    edx,edx
c00202dd:	55                   	push   ebp
c00202de:	55                   	push   ebp
c00202df:	8b 06                	mov    eax,DWORD PTR [esi]
c00202e1:	52                   	push   edx
c00202e2:	50                   	push   eax
c00202e3:	e9 d3 01 00 00       	jmp    c00204bb <Vm::x87Handler(regs*)+0xa35>
c00202e8:	31 c0                	xor    eax,eax
c00202ea:	80 fa 02             	cmp    dl,0x2
c00202ed:	0f 85 f4 01 00 00    	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c00202f3:	83 ec 0c             	sub    esp,0xc
c00202f6:	6a 00                	push   0x0
c00202f8:	e8 4c f6 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c00202fd:	59                   	pop    ecx
c00202fe:	5f                   	pop    edi
c00202ff:	e9 6a f9 ff ff       	jmp    c001fc6e <Vm::x87Handler(regs*)+0x1e8>
c0020304:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020308:	84 d2                	test   dl,dl
c002030a:	75 2a                	jne    c0020336 <Vm::x87Handler(regs*)+0x8b0>
c002030c:	50                   	push   eax
c002030d:	50                   	push   eax
c002030e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020311:	ff 36                	push   DWORD PTR [esi]
c0020313:	e8 c5 f3 ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c0020318:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002031f:	89 c6                	mov    esi,eax
c0020321:	89 d7                	mov    edi,edx
c0020323:	e8 21 f6 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020328:	57                   	push   edi
c0020329:	56                   	push   esi
c002032a:	52                   	push   edx
c002032b:	50                   	push   eax
c002032c:	e8 8e f5 ff ff       	call   c001f8bf <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020331:	e9 64 01 00 00       	jmp    c002049a <Vm::x87Handler(regs*)+0xa14>
c0020336:	80 fa 01             	cmp    dl,0x1
c0020339:	75 11                	jne    c002034c <Vm::x87Handler(regs*)+0x8c6>
c002033b:	50                   	push   eax
c002033c:	50                   	push   eax
c002033d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020340:	ff 36                	push   DWORD PTR [esi]
c0020342:	e8 96 f3 ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c0020347:	e9 35 01 00 00       	jmp    c0020481 <Vm::x87Handler(regs*)+0x9fb>
c002034c:	80 fa 02             	cmp    dl,0x2
c002034f:	0f 85 54 f9 ff ff    	jne    c001fca9 <Vm::x87Handler(regs*)+0x223>
c0020355:	55                   	push   ebp
c0020356:	55                   	push   ebp
c0020357:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002035a:	ff 36                	push   DWORD PTR [esi]
c002035c:	e8 7c f3 ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c0020361:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020368:	89 c6                	mov    esi,eax
c002036a:	89 d7                	mov    edi,edx
c002036c:	e8 d8 f5 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020371:	57                   	push   edi
c0020372:	56                   	push   esi
c0020373:	52                   	push   edx
c0020374:	50                   	push   eax
c0020375:	e8 f2 f4 ff ff       	call   c001f86c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002037a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002037e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020381:	83 c4 20             	add    esp,0x20
c0020384:	e9 74 f7 ff ff       	jmp    c001fafd <Vm::x87Handler(regs*)+0x77>
c0020389:	80 fa 04             	cmp    dl,0x4
c002038c:	75 2a                	jne    c00203b8 <Vm::x87Handler(regs*)+0x932>
c002038e:	51                   	push   ecx
c002038f:	51                   	push   ecx
c0020390:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020393:	ff 36                	push   DWORD PTR [esi]
c0020395:	e8 43 f3 ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c002039a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203a1:	89 c6                	mov    esi,eax
c00203a3:	89 d7                	mov    edi,edx
c00203a5:	e8 9f f5 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c00203aa:	57                   	push   edi
c00203ab:	56                   	push   esi
c00203ac:	52                   	push   edx
c00203ad:	50                   	push   eax
c00203ae:	e8 36 f5 ff ff       	call   c001f8e9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203b3:	e9 e2 00 00 00       	jmp    c002049a <Vm::x87Handler(regs*)+0xa14>
c00203b8:	80 fa 05             	cmp    dl,0x5
c00203bb:	75 28                	jne    c00203e5 <Vm::x87Handler(regs*)+0x95f>
c00203bd:	83 ec 0c             	sub    esp,0xc
c00203c0:	6a 00                	push   0x0
c00203c2:	e8 82 f5 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c00203c7:	89 c7                	mov    edi,eax
c00203c9:	89 d5                	mov    ebp,edx
c00203cb:	58                   	pop    eax
c00203cc:	5a                   	pop    edx
c00203cd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d0:	ff 36                	push   DWORD PTR [esi]
c00203d2:	e8 06 f3 ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c00203d7:	83 c4 10             	add    esp,0x10
c00203da:	55                   	push   ebp
c00203db:	57                   	push   edi
c00203dc:	52                   	push   edx
c00203dd:	50                   	push   eax
c00203de:	e8 06 f5 ff ff       	call   c001f8e9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203e3:	eb 60                	jmp    c0020445 <Vm::x87Handler(regs*)+0x9bf>
c00203e5:	80 fa 06             	cmp    dl,0x6
c00203e8:	75 2a                	jne    c0020414 <Vm::x87Handler(regs*)+0x98e>
c00203ea:	51                   	push   ecx
c00203eb:	51                   	push   ecx
c00203ec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203ef:	ff 36                	push   DWORD PTR [esi]
c00203f1:	e8 e7 f2 ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c00203f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203fd:	89 c6                	mov    esi,eax
c00203ff:	89 d7                	mov    edi,edx
c0020401:	e8 43 f5 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020406:	57                   	push   edi
c0020407:	56                   	push   esi
c0020408:	52                   	push   edx
c0020409:	50                   	push   eax
c002040a:	e8 08 f5 ff ff       	call   c001f917 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002040f:	e9 86 00 00 00       	jmp    c002049a <Vm::x87Handler(regs*)+0xa14>
c0020414:	31 c0                	xor    eax,eax
c0020416:	80 fa 07             	cmp    dl,0x7
c0020419:	0f 85 c8 00 00 00    	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c002041f:	83 ec 0c             	sub    esp,0xc
c0020422:	6a 00                	push   0x0
c0020424:	e8 20 f5 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020429:	89 c7                	mov    edi,eax
c002042b:	89 d5                	mov    ebp,edx
c002042d:	58                   	pop    eax
c002042e:	5a                   	pop    edx
c002042f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020432:	ff 36                	push   DWORD PTR [esi]
c0020434:	e8 a4 f2 ff ff       	call   c001f6dd <Vm::fpu64ToInternal(unsigned long long)>
c0020439:	83 c4 10             	add    esp,0x10
c002043c:	55                   	push   ebp
c002043d:	57                   	push   edi
c002043e:	52                   	push   edx
c002043f:	50                   	push   eax
c0020440:	e8 d2 f4 ff ff       	call   c001f917 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020445:	83 c4 0c             	add    esp,0xc
c0020448:	eb 53                	jmp    c002049d <Vm::x87Handler(regs*)+0xa17>
c002044a:	31 c0                	xor    eax,eax
c002044c:	80 fa 02             	cmp    dl,0x2
c002044f:	0f 85 92 00 00 00    	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c0020455:	83 ec 0c             	sub    esp,0xc
c0020458:	6a 00                	push   0x0
c002045a:	e8 ea f4 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c002045f:	59                   	pop    ecx
c0020460:	5f                   	pop    edi
c0020461:	52                   	push   edx
c0020462:	50                   	push   eax
c0020463:	e8 27 f2 ff ff       	call   c001f68f <Vm::fpuInternalTo64(unsigned long long)>
c0020468:	eb 70                	jmp    c00204da <Vm::x87Handler(regs*)+0xa54>
c002046a:	31 c0                	xor    eax,eax
c002046c:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020471:	75 74                	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c0020473:	50                   	push   eax
c0020474:	50                   	push   eax
c0020475:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020478:	31 d2                	xor    edx,edx
c002047a:	52                   	push   edx
c002047b:	50                   	push   eax
c002047c:	e8 f6 f2 ff ff       	call   c001f777 <Vm::fpuLongToFloat(long long)>
c0020481:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020488:	89 c6                	mov    esi,eax
c002048a:	89 d7                	mov    edi,edx
c002048c:	e8 b8 f4 ff ff       	call   c001f949 <Vm::fpuGetReg(int)>
c0020491:	57                   	push   edi
c0020492:	56                   	push   esi
c0020493:	52                   	push   edx
c0020494:	50                   	push   eax
c0020495:	e8 5e f4 ff ff       	call   c001f8f8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002049a:	83 c4 1c             	add    esp,0x1c
c002049d:	52                   	push   edx
c002049e:	50                   	push   eax
c002049f:	6a 00                	push   0x0
c00204a1:	e8 e6 f4 ff ff       	call   c001f98c <Vm::fpuSetReg(int, unsigned long long)>
c00204a6:	e9 f2 f7 ff ff       	jmp    c001fc9d <Vm::x87Handler(regs*)+0x217>
c00204ab:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204af:	80 fa 05             	cmp    dl,0x5
c00204b2:	75 11                	jne    c00204c5 <Vm::x87Handler(regs*)+0xa3f>
c00204b4:	55                   	push   ebp
c00204b5:	55                   	push   ebp
c00204b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204b9:	ff 36                	push   DWORD PTR [esi]
c00204bb:	e8 81 f2 ff ff       	call   c001f741 <Vm::fpuULongToFloat(unsigned long long)>
c00204c0:	e9 cf f7 ff ff       	jmp    c001fc94 <Vm::x87Handler(regs*)+0x20e>
c00204c5:	31 c0                	xor    eax,eax
c00204c7:	80 fa 07             	cmp    dl,0x7
c00204ca:	75 1b                	jne    c00204e7 <Vm::x87Handler(regs*)+0xa61>
c00204cc:	e8 63 f5 ff ff       	call   c001fa34 <Vm::fpuPop()>
c00204d1:	51                   	push   ecx
c00204d2:	51                   	push   ecx
c00204d3:	52                   	push   edx
c00204d4:	50                   	push   eax
c00204d5:	e8 0c f2 ff ff       	call   c001f6e6 <Vm::fpuFloatToLong(unsigned long long)>
c00204da:	83 c4 10             	add    esp,0x10
c00204dd:	89 06                	mov    DWORD PTR [esi],eax
c00204df:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204e2:	e9 f8 f7 ff ff       	jmp    c001fcdf <Vm::x87Handler(regs*)+0x259>
c00204e7:	83 c4 1c             	add    esp,0x1c
c00204ea:	5b                   	pop    ebx
c00204eb:	5e                   	pop    esi
c00204ec:	5f                   	pop    edi
c00204ed:	5d                   	pop    ebp
c00204ee:	c3                   	ret    

c00204ef <__static_initialization_and_destruction_0(int, int)>:
c00204ef:	83 ec 0c             	sub    esp,0xc
c00204f2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204f7:	75 1a                	jne    c0020513 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204f9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020501:	75 10                	jne    c0020513 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020503:	83 ec 0c             	sub    esp,0xc
c0020506:	68 c0 1b 03 c0       	push   0xc0031bc0
c002050b:	e8 10 88 00 00       	call   c0028d20 <Vm::_FPUState::_FPUState()>
c0020510:	83 c4 10             	add    esp,0x10
c0020513:	90                   	nop
c0020514:	83 c4 0c             	add    esp,0xc
c0020517:	c3                   	ret    

c0020518 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020518:	83 ec 0c             	sub    esp,0xc
c002051b:	83 ec 08             	sub    esp,0x8
c002051e:	68 ff ff 00 00       	push   0xffff
c0020523:	6a 01                	push   0x1
c0020525:	e8 c5 ff ff ff       	call   c00204ef <__static_initialization_and_destruction_0(int, int)>
c002052a:	83 c4 10             	add    esp,0x10
c002052d:	83 c4 0c             	add    esp,0xc
c0020530:	c3                   	ret    
c0020531:	90                   	nop

c0020532 <FAT::getName()>:
c0020532:	b8 c8 c9 02 c0       	mov    eax,0xc002c9c8
c0020537:	c3                   	ret    

c0020538 <FAT::tell(void*, unsigned long long*)>:
c0020538:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002053d:	75 06                	jne    c0020545 <FAT::tell(void*, unsigned long long*)+0xd>
c002053f:	b8 04 00 00 00       	mov    eax,0x4
c0020544:	c3                   	ret    
c0020545:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002054a:	75 06                	jne    c0020552 <FAT::tell(void*, unsigned long long*)+0x1a>
c002054c:	b8 04 00 00 00       	mov    eax,0x4
c0020551:	c3                   	ret    
c0020552:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020556:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020559:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002055c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020560:	89 01                	mov    DWORD PTR [ecx],eax
c0020562:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020565:	b8 00 00 00 00       	mov    eax,0x0
c002056a:	c3                   	ret    
c002056b:	90                   	nop

c002056c <FAT::stat(void*, unsigned long long*)>:
c002056c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020571:	75 06                	jne    c0020579 <FAT::stat(void*, unsigned long long*)+0xd>
c0020573:	b8 04 00 00 00       	mov    eax,0x4
c0020578:	c3                   	ret    
c0020579:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002057e:	75 06                	jne    c0020586 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020580:	b8 04 00 00 00       	mov    eax,0x4
c0020585:	c3                   	ret    
c0020586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002058a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002058d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020590:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020594:	89 01                	mov    DWORD PTR [ecx],eax
c0020596:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020599:	b8 00 00 00 00       	mov    eax,0x0
c002059e:	c3                   	ret    
c002059f:	90                   	nop

c00205a0 <FAT::~FAT()>:
c00205a0:	83 ec 0c             	sub    esp,0xc
c00205a3:	ba 4c ca 02 c0       	mov    edx,0xc002ca4c
c00205a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ac:	89 10                	mov    DWORD PTR [eax],edx
c00205ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b2:	83 ec 0c             	sub    esp,0xc
c00205b5:	50                   	push   eax
c00205b6:	e8 99 2c ff ff       	call   c0013254 <Filesystem::~Filesystem()>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	90                   	nop
c00205bf:	83 c4 0c             	add    esp,0xc
c00205c2:	c3                   	ret    
c00205c3:	90                   	nop

c00205c4 <FAT::~FAT()>:
c00205c4:	83 ec 0c             	sub    esp,0xc
c00205c7:	83 ec 0c             	sub    esp,0xc
c00205ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205ce:	e8 cd ff ff ff       	call   c00205a0 <FAT::~FAT()>
c00205d3:	83 c4 10             	add    esp,0x10
c00205d6:	83 ec 08             	sub    esp,0x8
c00205d9:	6a 08                	push   0x8
c00205db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205df:	e8 68 28 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00205e4:	83 c4 10             	add    esp,0x10
c00205e7:	83 c4 0c             	add    esp,0xc
c00205ea:	c3                   	ret    
c00205eb:	90                   	nop

c00205ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205ec:	83 ec 1c             	sub    esp,0x1c
c00205ef:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205f6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205ff:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020606:	83 f8 ff             	cmp    eax,0xffffffff
c0020609:	75 34                	jne    c002063f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002060b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002060f:	88 c2                	mov    dl,al
c0020611:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020616:	01 d0                	add    eax,edx
c0020618:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002061c:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c0020622:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020626:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c002062d:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020632:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020636:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c002063d:	eb 17                	jmp    c0020656 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002063f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020643:	88 c2                	mov    dl,al
c0020645:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020649:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020650:	01 d0                	add    eax,edx
c0020652:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020656:	83 ec 04             	sub    esp,0x4
c0020659:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002065d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020661:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020665:	50                   	push   eax
c0020666:	e8 cd 66 fe ff       	call   c0006d38 <f_getlabel>
c002066b:	83 c4 10             	add    esp,0x10
c002066e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020672:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020677:	75 07                	jne    c0020680 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020679:	b8 00 00 00 00       	mov    eax,0x0
c002067e:	eb 05                	jmp    c0020685 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020680:	b8 01 00 00 00       	mov    eax,0x1
c0020685:	83 c4 1c             	add    esp,0x1c
c0020688:	c3                   	ret    
c0020689:	90                   	nop

c002068a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002068a:	57                   	push   edi
c002068b:	83 ec 58             	sub    esp,0x58
c002068e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020696:	8d 54 24 10          	lea    edx,[esp+0x10]
c002069a:	b9 0f 00 00 00       	mov    ecx,0xf
c002069f:	b8 00 00 00 00       	mov    eax,0x0
c00206a4:	fc                   	cld    
c00206a5:	89 d7                	mov    edi,edx
c00206a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206a9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206ad:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c00206b4:	83 f8 ff             	cmp    eax,0xffffffff
c00206b7:	75 34                	jne    c00206ed <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206b9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206bd:	88 c2                	mov    dl,al
c00206bf:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c00206c4:	01 d0                	add    eax,edx
c00206c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ca:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c00206d0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206d4:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c00206db:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c00206e0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206e4:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c00206eb:	eb 17                	jmp    c0020704 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206ed:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206f1:	88 c2                	mov    dl,al
c00206f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206f7:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c00206fe:	01 d0                	add    eax,edx
c0020700:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020704:	83 ec 08             	sub    esp,0x8
c0020707:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002070b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002070f:	50                   	push   eax
c0020710:	e8 5f 02 fe ff       	call   c0000974 <strcat>
c0020715:	83 c4 10             	add    esp,0x10
c0020718:	83 ec 0c             	sub    esp,0xc
c002071b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002071f:	50                   	push   eax
c0020720:	e8 01 68 fe ff       	call   c0006f26 <f_setlabel>
c0020725:	83 c4 10             	add    esp,0x10
c0020728:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002072c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020731:	75 07                	jne    c002073a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020733:	b8 00 00 00 00       	mov    eax,0x0
c0020738:	eb 05                	jmp    c002073f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002073a:	b8 01 00 00 00       	mov    eax,0x1
c002073f:	83 c4 58             	add    esp,0x58
c0020742:	5f                   	pop    edi
c0020743:	c3                   	ret    

c0020744 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020744:	83 ec 2c             	sub    esp,0x2c
c0020747:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002074f:	83 ec 08             	sub    esp,0x8
c0020752:	68 ec c9 02 c0       	push   0xc002c9ec
c0020757:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002075b:	e8 60 01 fe ff       	call   c00008c0 <strcmp>
c0020760:	83 c4 10             	add    esp,0x10
c0020763:	85 c0                	test   eax,eax
c0020765:	0f 94 c0             	sete   al
c0020768:	84 c0                	test   al,al
c002076a:	74 0d                	je     c0020779 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002076c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020774:	e9 a6 00 00 00       	jmp    c002081f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020779:	83 ec 08             	sub    esp,0x8
c002077c:	68 de c9 02 c0       	push   0xc002c9de
c0020781:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020785:	e8 36 01 fe ff       	call   c00008c0 <strcmp>
c002078a:	83 c4 10             	add    esp,0x10
c002078d:	85 c0                	test   eax,eax
c002078f:	0f 94 c0             	sete   al
c0020792:	84 c0                	test   al,al
c0020794:	74 0a                	je     c00207a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020796:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002079e:	eb 7f                	jmp    c002081f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207a0:	83 ec 08             	sub    esp,0x8
c00207a3:	68 e4 c9 02 c0       	push   0xc002c9e4
c00207a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ac:	e8 0f 01 fe ff       	call   c00008c0 <strcmp>
c00207b1:	83 c4 10             	add    esp,0x10
c00207b4:	85 c0                	test   eax,eax
c00207b6:	0f 94 c0             	sete   al
c00207b9:	84 c0                	test   al,al
c00207bb:	74 0a                	je     c00207c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207bd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207c5:	eb 58                	jmp    c002081f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207c7:	83 ec 08             	sub    esp,0x8
c00207ca:	68 8c 94 02 c0       	push   0xc002948c
c00207cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207d3:	e8 e8 00 fe ff       	call   c00008c0 <strcmp>
c00207d8:	83 c4 10             	add    esp,0x10
c00207db:	85 c0                	test   eax,eax
c00207dd:	0f 94 c0             	sete   al
c00207e0:	84 c0                	test   al,al
c00207e2:	74 0a                	je     c00207ee <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207e4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207ec:	eb 31                	jmp    c002081f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207ee:	83 ec 08             	sub    esp,0x8
c00207f1:	68 ea c9 02 c0       	push   0xc002c9ea
c00207f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207fa:	e8 c1 00 fe ff       	call   c00008c0 <strcmp>
c00207ff:	83 c4 10             	add    esp,0x10
c0020802:	85 c0                	test   eax,eax
c0020804:	0f 94 c0             	sete   al
c0020807:	84 c0                	test   al,al
c0020809:	74 0a                	je     c0020815 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002080b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020813:	eb 0a                	jmp    c002081f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020815:	b8 08 00 00 00       	mov    eax,0x8
c002081a:	e9 04 01 00 00       	jmp    c0020923 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002081f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020826:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002082b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002082f:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020836:	83 f8 ff             	cmp    eax,0xffffffff
c0020839:	75 34                	jne    c002086f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002083b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002083f:	88 c2                	mov    dl,al
c0020841:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020846:	01 d0                	add    eax,edx
c0020848:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002084c:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c0020852:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020856:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c002085d:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020862:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020866:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c002086d:	eb 17                	jmp    c0020886 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002086f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020873:	88 c2                	mov    dl,al
c0020875:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020879:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020880:	01 d0                	add    eax,edx
c0020882:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020886:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002088a:	88 04 24             	mov    BYTE PTR [esp],al
c002088d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020891:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020895:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002089d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208a2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208aa:	83 ec 0c             	sub    esp,0xc
c00208ad:	68 00 20 00 00       	push   0x2000
c00208b2:	e8 89 ef fe ff       	call   c000f840 <malloc>
c00208b7:	83 c4 10             	add    esp,0x10
c00208ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208be:	68 00 20 00 00       	push   0x2000
c00208c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208cb:	50                   	push   eax
c00208cc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208d0:	50                   	push   eax
c00208d1:	e8 9b 6a fe ff       	call   c0007371 <f_mkfs>
c00208d6:	83 c4 10             	add    esp,0x10
c00208d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208e2:	75 07                	jne    c00208eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208e4:	b8 00 00 00 00       	mov    eax,0x0
c00208e9:	eb 38                	jmp    c0020923 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208eb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208f0:	75 17                	jne    c0020909 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208f2:	83 ec 0c             	sub    esp,0xc
c00208f5:	68 1c ca 02 c0       	push   0xc002ca1c
c00208fa:	e8 2d 26 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	b8 09 00 00 00       	mov    eax,0x9
c0020907:	eb 1a                	jmp    c0020923 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020909:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002090d:	83 ec 08             	sub    esp,0x8
c0020910:	50                   	push   eax
c0020911:	68 f0 c9 02 c0       	push   0xc002c9f0
c0020916:	e8 11 26 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c002091b:	83 c4 10             	add    esp,0x10
c002091e:	b8 01 00 00 00       	mov    eax,0x1
c0020923:	83 c4 2c             	add    esp,0x2c
c0020926:	c3                   	ret    
c0020927:	90                   	nop

c0020928 <FAT::tryMount(LogicalDisk*, int)>:
c0020928:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002092e:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020933:	83 f8 14             	cmp    eax,0x14
c0020936:	75 17                	jne    c002094f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020938:	83 ec 0c             	sub    esp,0xc
c002093b:	68 02 ca 02 c0       	push   0xc002ca02
c0020940:	e8 88 9c ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0020945:	83 c4 10             	add    esp,0x10
c0020948:	b0 00                	mov    al,0x0
c002094a:	e9 d7 01 00 00       	jmp    c0020b26 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002094f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020956:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002095c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020962:	3d 00 02 00 00       	cmp    eax,0x200
c0020967:	74 07                	je     c0020970 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020969:	b0 00                	mov    al,0x0
c002096b:	e9 b6 01 00 00       	jmp    c0020b26 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020970:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020978:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002097f:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020986:	83 f8 ff             	cmp    eax,0xffffffff
c0020989:	74 07                	je     c0020992 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002098b:	b0 01                	mov    al,0x1
c002098d:	e9 94 01 00 00       	jmp    c0020b26 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020992:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002099c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209a4:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209ab:	88 c2                	mov    dl,al
c00209ad:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c00209b2:	01 d0                	add    eax,edx
c00209b4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209bb:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c00209c1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209c8:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c00209cf:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c00209d4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209db:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c00209e2:	83 ec 0c             	sub    esp,0xc
c00209e5:	68 54 02 00 00       	push   0x254
c00209ea:	e8 51 ee fe ff       	call   c000f840 <malloc>
c00209ef:	83 c4 10             	add    esp,0x10
c00209f2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209f9:	83 ec 04             	sub    esp,0x4
c00209fc:	6a 00                	push   0x0
c00209fe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a05:	50                   	push   eax
c0020a06:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a0d:	e8 1d 45 fe ff       	call   c0004f2f <f_mount>
c0020a12:	83 c4 10             	add    esp,0x10
c0020a15:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a1c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a24:	74 19                	je     c0020a3f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a26:	83 ec 0c             	sub    esp,0xc
c0020a29:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a30:	e8 2b ee fe ff       	call   c000f860 <rfree>
c0020a35:	83 c4 10             	add    esp,0x10
c0020a38:	b0 00                	mov    al,0x0
c0020a3a:	e9 e7 00 00 00       	jmp    c0020b26 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a3f:	83 ec 04             	sub    esp,0x4
c0020a42:	68 00 01 00 00       	push   0x100
c0020a47:	6a 00                	push   0x0
c0020a49:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a50:	50                   	push   eax
c0020a51:	e8 22 fd fd ff       	call   c0000778 <memset>
c0020a56:	83 c4 10             	add    esp,0x10
c0020a59:	83 ec 08             	sub    esp,0x8
c0020a5c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a63:	50                   	push   eax
c0020a64:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a6b:	50                   	push   eax
c0020a6c:	e8 03 ff fd ff       	call   c0000974 <strcat>
c0020a71:	83 c4 10             	add    esp,0x10
c0020a74:	83 ec 08             	sub    esp,0x8
c0020a77:	68 10 ca 02 c0       	push   0xc002ca10
c0020a7c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a83:	50                   	push   eax
c0020a84:	e8 eb fe fd ff       	call   c0000974 <strcat>
c0020a89:	83 c4 10             	add    esp,0x10
c0020a8c:	83 ec 04             	sub    esp,0x4
c0020a8f:	6a 01                	push   0x1
c0020a91:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a98:	50                   	push   eax
c0020a99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a9d:	50                   	push   eax
c0020a9e:	e8 ee 44 fe ff       	call   c0004f91 <f_open>
c0020aa3:	83 c4 10             	add    esp,0x10
c0020aa6:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020aad:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020ab4:	85 c0                	test   eax,eax
c0020ab6:	74 0a                	je     c0020ac2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ab8:	78 2d                	js     c0020ae7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aba:	83 e8 04             	sub    eax,0x4
c0020abd:	83 f8 01             	cmp    eax,0x1
c0020ac0:	77 25                	ja     c0020ae7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ac2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020aca:	83 ec 0c             	sub    esp,0xc
c0020acd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ad1:	50                   	push   eax
c0020ad2:	e8 0c 50 fe ff       	call   c0005ae3 <f_close>
c0020ad7:	83 c4 10             	add    esp,0x10
c0020ada:	90                   	nop
c0020adb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020ae3:	74 3a                	je     c0020b1f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020ae5:	eb 2d                	jmp    c0020b14 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020ae7:	83 ec 0c             	sub    esp,0xc
c0020aea:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020af1:	e8 6a ed fe ff       	call   c000f860 <rfree>
c0020af6:	83 c4 10             	add    esp,0x10
c0020af9:	83 ec 04             	sub    esp,0x4
c0020afc:	6a 00                	push   0x0
c0020afe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b05:	50                   	push   eax
c0020b06:	6a 00                	push   0x0
c0020b08:	e8 22 44 fe ff       	call   c0004f2f <f_mount>
c0020b0d:	83 c4 10             	add    esp,0x10
c0020b10:	b0 00                	mov    al,0x0
c0020b12:	eb 12                	jmp    c0020b26 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b14:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020b19:	40                   	inc    eax
c0020b1a:	a3 20 1c 03 c0       	mov    ds:0xc0031c20,eax
c0020b1f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b26:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b2c:	c3                   	ret    
c0020b2d:	90                   	nop

c0020b2e <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b2e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b34:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b3c:	74 0a                	je     c0020b48 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b3e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b46:	75 0a                	jne    c0020b52 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b48:	b8 04 00 00 00       	mov    eax,0x4
c0020b4d:	e9 db 00 00 00       	jmp    c0020c2d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b52:	83 ec 08             	sub    esp,0x8
c0020b55:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b5c:	50                   	push   eax
c0020b5d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b64:	e8 84 55 fe ff       	call   c00060ed <f_readdir>
c0020b69:	83 c4 10             	add    esp,0x10
c0020b6c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b73:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b79:	83 ec 0c             	sub    esp,0xc
c0020b7c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b83:	83 c0 1a             	add    eax,0x1a
c0020b86:	50                   	push   eax
c0020b87:	e8 08 fc fd ff       	call   c0000794 <strlen>
c0020b8c:	83 c4 10             	add    esp,0x10
c0020b8f:	ba 00 00 00 00       	mov    edx,0x0
c0020b94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b9c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020ba3:	0f b6 c0             	movzx  eax,al
c0020ba6:	83 e0 10             	and    eax,0x10
c0020ba9:	74 07                	je     c0020bb2 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bab:	b8 02 00 00 00       	mov    eax,0x2
c0020bb0:	eb 05                	jmp    c0020bb7 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020bb2:	b8 01 00 00 00       	mov    eax,0x1
c0020bb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bbb:	83 ec 08             	sub    esp,0x8
c0020bbe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bc5:	83 c0 1a             	add    eax,0x1a
c0020bc8:	50                   	push   eax
c0020bc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bcd:	83 c0 10             	add    eax,0x10
c0020bd0:	50                   	push   eax
c0020bd1:	e8 5e fc fd ff       	call   c0000834 <strcpy>
c0020bd6:	83 c4 10             	add    esp,0x10
c0020bd9:	83 ec 04             	sub    esp,0x4
c0020bdc:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020be3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020be7:	50                   	push   eax
c0020be8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bef:	e8 50 fb fd ff       	call   c0000744 <memcpy>
c0020bf4:	83 c4 10             	add    esp,0x10
c0020bf7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020bfe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c04:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c0b:	84 c0                	test   al,al
c0020c0d:	75 07                	jne    c0020c16 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c0f:	b8 07 00 00 00       	mov    eax,0x7
c0020c14:	eb 17                	jmp    c0020c2d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c16:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c1d:	85 c0                	test   eax,eax
c0020c1f:	75 07                	jne    c0020c28 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c21:	b8 00 00 00 00       	mov    eax,0x0
c0020c26:	eb 05                	jmp    c0020c2d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c28:	b8 01 00 00 00       	mov    eax,0x1
c0020c2d:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c33:	c3                   	ret    

c0020c34 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c34:	83 ec 1c             	sub    esp,0x1c
c0020c37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c3c:	74 07                	je     c0020c45 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c43:	75 07                	jne    c0020c4c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c45:	b8 04 00 00 00       	mov    eax,0x4
c0020c4a:	eb 3d                	jmp    c0020c89 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c50:	50                   	push   eax
c0020c51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c5d:	e8 6b 47 fe ff       	call   c00053cd <f_read>
c0020c62:	83 c4 10             	add    esp,0x10
c0020c65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c6d:	89 c2                	mov    edx,eax
c0020c6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c73:	89 10                	mov    DWORD PTR [eax],edx
c0020c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c79:	85 c0                	test   eax,eax
c0020c7b:	75 07                	jne    c0020c84 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c7d:	b8 00 00 00 00       	mov    eax,0x0
c0020c82:	eb 05                	jmp    c0020c89 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c84:	b8 01 00 00 00       	mov    eax,0x1
c0020c89:	83 c4 1c             	add    esp,0x1c
c0020c8c:	c3                   	ret    
c0020c8d:	90                   	nop

c0020c8e <FAT::write(void*, unsigned long, void*, int*)>:
c0020c8e:	83 ec 1c             	sub    esp,0x1c
c0020c91:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c96:	74 07                	je     c0020c9f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c98:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c9d:	75 07                	jne    c0020ca6 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c9f:	b8 04 00 00 00       	mov    eax,0x4
c0020ca4:	eb 3d                	jmp    c0020ce3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ca6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020caa:	50                   	push   eax
c0020cab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020caf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cb3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb7:	e8 91 49 fe ff       	call   c000564d <f_write>
c0020cbc:	83 c4 10             	add    esp,0x10
c0020cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cc7:	89 c2                	mov    edx,eax
c0020cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ccd:	89 10                	mov    DWORD PTR [eax],edx
c0020ccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cd3:	85 c0                	test   eax,eax
c0020cd5:	75 07                	jne    c0020cde <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cd7:	b8 00 00 00 00       	mov    eax,0x0
c0020cdc:	eb 05                	jmp    c0020ce3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cde:	b8 01 00 00 00       	mov    eax,0x1
c0020ce3:	83 c4 1c             	add    esp,0x1c
c0020ce6:	c3                   	ret    
c0020ce7:	90                   	nop

c0020ce8 <FAT::close(void*)>:
c0020ce8:	83 ec 1c             	sub    esp,0x1c
c0020ceb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cf0:	75 07                	jne    c0020cf9 <FAT::close(void*)+0x11>
c0020cf2:	b8 04 00 00 00       	mov    eax,0x4
c0020cf7:	eb 36                	jmp    c0020d2f <FAT::close(void*)+0x47>
c0020cf9:	83 ec 0c             	sub    esp,0xc
c0020cfc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d00:	e8 de 4d fe ff       	call   c0005ae3 <f_close>
c0020d05:	83 c4 10             	add    esp,0x10
c0020d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d0c:	83 ec 0c             	sub    esp,0xc
c0020d0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d13:	e8 38 eb fe ff       	call   c000f850 <free>
c0020d18:	83 c4 10             	add    esp,0x10
c0020d1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d1f:	85 c0                	test   eax,eax
c0020d21:	75 07                	jne    c0020d2a <FAT::close(void*)+0x42>
c0020d23:	b8 00 00 00 00       	mov    eax,0x0
c0020d28:	eb 05                	jmp    c0020d2f <FAT::close(void*)+0x47>
c0020d2a:	b8 01 00 00 00       	mov    eax,0x1
c0020d2f:	83 c4 1c             	add    esp,0x1c
c0020d32:	c3                   	ret    
c0020d33:	90                   	nop

c0020d34 <FAT::closeDir(void*)>:
c0020d34:	83 ec 1c             	sub    esp,0x1c
c0020d37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d3c:	75 07                	jne    c0020d45 <FAT::closeDir(void*)+0x11>
c0020d3e:	b8 04 00 00 00       	mov    eax,0x4
c0020d43:	eb 36                	jmp    c0020d7b <FAT::closeDir(void*)+0x47>
c0020d45:	83 ec 0c             	sub    esp,0xc
c0020d48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d4c:	e8 7a 53 fe ff       	call   c00060cb <f_closedir>
c0020d51:	83 c4 10             	add    esp,0x10
c0020d54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d58:	83 ec 0c             	sub    esp,0xc
c0020d5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d5f:	e8 ec ea fe ff       	call   c000f850 <free>
c0020d64:	83 c4 10             	add    esp,0x10
c0020d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d6b:	85 c0                	test   eax,eax
c0020d6d:	75 07                	jne    c0020d76 <FAT::closeDir(void*)+0x42>
c0020d6f:	b8 00 00 00 00       	mov    eax,0x0
c0020d74:	eb 05                	jmp    c0020d7b <FAT::closeDir(void*)+0x47>
c0020d76:	b8 01 00 00 00       	mov    eax,0x1
c0020d7b:	83 c4 1c             	add    esp,0x1c
c0020d7e:	c3                   	ret    
c0020d7f:	90                   	nop

c0020d80 <FAT::seek(void*, unsigned long long)>:
c0020d80:	83 ec 2c             	sub    esp,0x2c
c0020d83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d93:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d98:	75 07                	jne    c0020da1 <FAT::seek(void*, unsigned long long)+0x21>
c0020d9a:	b8 04 00 00 00       	mov    eax,0x4
c0020d9f:	eb 2f                	jmp    c0020dd0 <FAT::seek(void*, unsigned long long)+0x50>
c0020da1:	83 ec 04             	sub    esp,0x4
c0020da4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020da8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020db0:	e8 5d 4d fe ff       	call   c0005b12 <f_lseek>
c0020db5:	83 c4 10             	add    esp,0x10
c0020db8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dc0:	85 c0                	test   eax,eax
c0020dc2:	75 07                	jne    c0020dcb <FAT::seek(void*, unsigned long long)+0x4b>
c0020dc4:	b8 00 00 00 00       	mov    eax,0x0
c0020dc9:	eb 05                	jmp    c0020dd0 <FAT::seek(void*, unsigned long long)+0x50>
c0020dcb:	b8 01 00 00 00       	mov    eax,0x1
c0020dd0:	83 c4 2c             	add    esp,0x2c
c0020dd3:	c3                   	ret    

c0020dd4 <fatWrapperReadDisk>:
c0020dd4:	83 ec 1c             	sub    esp,0x1c
c0020dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ddb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020de3:	89 04 24             	mov    DWORD PTR [esp],eax
c0020de6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020df3:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020dfa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dfe:	83 ec 0c             	sub    esp,0xc
c0020e01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e05:	52                   	push   edx
c0020e06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e0e:	50                   	push   eax
c0020e0f:	e8 28 59 ff ff       	call   c001673c <LogicalDisk::read(unsigned long long, int, void*)>
c0020e14:	83 c4 20             	add    esp,0x20
c0020e17:	83 c4 1c             	add    esp,0x1c
c0020e1a:	c3                   	ret    

c0020e1b <fatWrapperWriteDisk>:
c0020e1b:	83 ec 1c             	sub    esp,0x1c
c0020e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e22:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e35:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e3a:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020e41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e45:	83 ec 0c             	sub    esp,0xc
c0020e48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e4c:	52                   	push   edx
c0020e4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e55:	50                   	push   eax
c0020e56:	e8 4d 59 ff ff       	call   c00167a8 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e5b:	83 c4 20             	add    esp,0x20
c0020e5e:	83 c4 1c             	add    esp,0x1c
c0020e61:	c3                   	ret    

c0020e62 <fatWrapperIoctl>:
c0020e62:	53                   	push   ebx
c0020e63:	83 ec 28             	sub    esp,0x28
c0020e66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e6e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e76:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e7b:	75 31                	jne    c0020eae <fatWrapperIoctl+0x4c>
c0020e7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e85:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e8a:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020e91:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e97:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ea1:	66 89 02             	mov    WORD PTR [edx],ax
c0020ea4:	b8 00 00 00 00       	mov    eax,0x0
c0020ea9:	e9 b2 00 00 00       	jmp    c0020f60 <fatWrapperIoctl+0xfe>
c0020eae:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020eb3:	75 6a                	jne    c0020f1f <fatWrapperIoctl+0xbd>
c0020eb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ebd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ec2:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020ec9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ecf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ed5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020edb:	89 c8                	mov    eax,ecx
c0020edd:	89 da                	mov    edx,ebx
c0020edf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ee3:	c1 e0 0a             	shl    eax,0xa
c0020ee6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020eeb:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0020ef2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ef8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020efe:	89 cb                	mov    ebx,ecx
c0020f00:	c1 fb 1f             	sar    ebx,0x1f
c0020f03:	53                   	push   ebx
c0020f04:	51                   	push   ecx
c0020f05:	52                   	push   edx
c0020f06:	50                   	push   eax
c0020f07:	e8 c0 5a 00 00       	call   c00269cc <__udivdi3>
c0020f0c:	83 c4 10             	add    esp,0x10
c0020f0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f13:	89 01                	mov    DWORD PTR [ecx],eax
c0020f15:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f18:	b8 00 00 00 00       	mov    eax,0x0
c0020f1d:	eb 41                	jmp    c0020f60 <fatWrapperIoctl+0xfe>
c0020f1f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f24:	75 07                	jne    c0020f2d <fatWrapperIoctl+0xcb>
c0020f26:	b8 00 00 00 00       	mov    eax,0x0
c0020f2b:	eb 33                	jmp    c0020f60 <fatWrapperIoctl+0xfe>
c0020f2d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f32:	75 19                	jne    c0020f4d <fatWrapperIoctl+0xeb>
c0020f34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f40:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f46:	b8 00 00 00 00       	mov    eax,0x0
c0020f4b:	eb 13                	jmp    c0020f60 <fatWrapperIoctl+0xfe>
c0020f4d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f52:	75 07                	jne    c0020f5b <fatWrapperIoctl+0xf9>
c0020f54:	b8 00 00 00 00       	mov    eax,0x0
c0020f59:	eb 05                	jmp    c0020f60 <fatWrapperIoctl+0xfe>
c0020f5b:	b8 04 00 00 00       	mov    eax,0x4
c0020f60:	83 c4 28             	add    esp,0x28
c0020f63:	5b                   	pop    ebx
c0020f64:	c3                   	ret    
c0020f65:	90                   	nop

c0020f66 <FAT::FAT()>:
c0020f66:	83 ec 1c             	sub    esp,0x1c
c0020f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f6d:	83 ec 0c             	sub    esp,0xc
c0020f70:	50                   	push   eax
c0020f71:	e8 ba 22 ff ff       	call   c0013230 <Filesystem::Filesystem()>
c0020f76:	83 c4 10             	add    esp,0x10
c0020f79:	ba 4c ca 02 c0       	mov    edx,0xc002ca4c
c0020f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f82:	89 10                	mov    DWORD PTR [eax],edx
c0020f84:	c7 05 20 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c20,0x0
c0020f8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f96:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f9b:	7f 15                	jg     c0020fb2 <FAT::FAT()+0x4c>
c0020f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fa1:	c7 04 85 40 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3c0],0xffffffff
c0020fac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fb0:	eb e4                	jmp    c0020f96 <FAT::FAT()+0x30>
c0020fb2:	90                   	nop
c0020fb3:	83 c4 1c             	add    esp,0x1c
c0020fb6:	c3                   	ret    
c0020fb7:	90                   	nop

c0020fb8 <FAT::fixFilepath(char*)>:
c0020fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fbc:	8a 00                	mov    al,BYTE PTR [eax]
c0020fbe:	3c 40                	cmp    al,0x40
c0020fc0:	7e 2c                	jle    c0020fee <FAT::fixFilepath(char*)+0x36>
c0020fc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fc6:	8a 00                	mov    al,BYTE PTR [eax]
c0020fc8:	83 e8 41             	sub    eax,0x41
c0020fcb:	88 c2                	mov    dl,al
c0020fcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd1:	88 10                	mov    BYTE PTR [eax],dl
c0020fd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0020fd9:	0f be c0             	movsx  eax,al
c0020fdc:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020fe3:	83 c0 30             	add    eax,0x30
c0020fe6:	88 c2                	mov    dl,al
c0020fe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fec:	88 10                	mov    BYTE PTR [eax],dl
c0020fee:	90                   	nop
c0020fef:	c3                   	ret    

c0020ff0 <FAT::open(char const*, void**, FileOpenMode)>:
c0020ff0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ff6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ffe:	74 0a                	je     c002100a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021000:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021008:	75 0a                	jne    c0021014 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002100a:	b8 04 00 00 00       	mov    eax,0x4
c002100f:	e9 fd 00 00 00       	jmp    c0021111 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021014:	83 ec 08             	sub    esp,0x8
c0021017:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002101e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021022:	50                   	push   eax
c0021023:	e8 0c f8 fd ff       	call   c0000834 <strcpy>
c0021028:	83 c4 10             	add    esp,0x10
c002102b:	83 ec 08             	sub    esp,0x8
c002102e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021032:	50                   	push   eax
c0021033:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002103a:	e8 79 ff ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c002103f:	83 c4 10             	add    esp,0x10
c0021042:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002104a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021051:	83 e0 01             	and    eax,0x1
c0021054:	74 08                	je     c002105e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021056:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002105e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021065:	83 e0 04             	and    eax,0x4
c0021068:	74 10                	je     c002107a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002106a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021072:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002107a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021081:	83 e0 02             	and    eax,0x2
c0021084:	74 08                	je     c002108e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021086:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002108e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021095:	83 e0 08             	and    eax,0x8
c0021098:	74 08                	je     c00210a2 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002109a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210a9:	83 e0 10             	and    eax,0x10
c00210ac:	74 08                	je     c00210b6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210ae:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210b6:	83 ec 0c             	sub    esp,0xc
c00210b9:	68 50 02 00 00       	push   0x250
c00210be:	e8 7d e7 fe ff       	call   c000f840 <malloc>
c00210c3:	83 c4 10             	add    esp,0x10
c00210c6:	89 c2                	mov    edx,eax
c00210c8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210cf:	89 10                	mov    DWORD PTR [eax],edx
c00210d1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210d9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00210e2:	83 ec 04             	sub    esp,0x4
c00210e5:	52                   	push   edx
c00210e6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210ea:	52                   	push   edx
c00210eb:	50                   	push   eax
c00210ec:	e8 a0 3e fe ff       	call   c0004f91 <f_open>
c00210f1:	83 c4 10             	add    esp,0x10
c00210f4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210fb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021103:	74 07                	je     c002110c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021105:	b8 01 00 00 00       	mov    eax,0x1
c002110a:	eb 05                	jmp    c0021111 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002110c:	b8 00 00 00 00       	mov    eax,0x0
c0021111:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021117:	c3                   	ret    

c0021118 <FAT::openDir(char const*, void**)>:
c0021118:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002111e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021126:	74 0a                	je     c0021132 <FAT::openDir(char const*, void**)+0x1a>
c0021128:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021130:	75 07                	jne    c0021139 <FAT::openDir(char const*, void**)+0x21>
c0021132:	b8 04 00 00 00       	mov    eax,0x4
c0021137:	eb 7d                	jmp    c00211b6 <FAT::openDir(char const*, void**)+0x9e>
c0021139:	83 ec 08             	sub    esp,0x8
c002113c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021143:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021147:	50                   	push   eax
c0021148:	e8 e7 f6 fd ff       	call   c0000834 <strcpy>
c002114d:	83 c4 10             	add    esp,0x10
c0021150:	83 ec 08             	sub    esp,0x8
c0021153:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021157:	50                   	push   eax
c0021158:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002115f:	e8 54 fe ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c0021164:	83 c4 10             	add    esp,0x10
c0021167:	83 ec 0c             	sub    esp,0xc
c002116a:	6a 4c                	push   0x4c
c002116c:	e8 cf e6 fe ff       	call   c000f840 <malloc>
c0021171:	83 c4 10             	add    esp,0x10
c0021174:	89 c2                	mov    edx,eax
c0021176:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002117d:	89 10                	mov    DWORD PTR [eax],edx
c002117f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021186:	8b 00                	mov    eax,DWORD PTR [eax]
c0021188:	83 ec 08             	sub    esp,0x8
c002118b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002118f:	52                   	push   edx
c0021190:	50                   	push   eax
c0021191:	e8 33 4e fe ff       	call   c0005fc9 <f_opendir>
c0021196:	83 c4 10             	add    esp,0x10
c0021199:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211a0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211a8:	74 07                	je     c00211b1 <FAT::openDir(char const*, void**)+0x99>
c00211aa:	b8 01 00 00 00       	mov    eax,0x1
c00211af:	eb 05                	jmp    c00211b6 <FAT::openDir(char const*, void**)+0x9e>
c00211b1:	b8 00 00 00 00       	mov    eax,0x0
c00211b6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211bc:	c3                   	ret    
c00211bd:	90                   	nop

c00211be <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211be:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211c4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211cc:	75 0a                	jne    c00211d8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211ce:	b8 04 00 00 00       	mov    eax,0x4
c00211d3:	e9 c9 00 00 00       	jmp    c00212a1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211d8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211e0:	75 0a                	jne    c00211ec <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211e2:	b8 04 00 00 00       	mov    eax,0x4
c00211e7:	e9 b5 00 00 00       	jmp    c00212a1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211ec:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211f4:	75 0a                	jne    c0021200 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211f6:	b8 04 00 00 00       	mov    eax,0x4
c00211fb:	e9 a1 00 00 00       	jmp    c00212a1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021200:	83 ec 08             	sub    esp,0x8
c0021203:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002120a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021211:	50                   	push   eax
c0021212:	e8 1d f6 fd ff       	call   c0000834 <strcpy>
c0021217:	83 c4 10             	add    esp,0x10
c002121a:	83 ec 08             	sub    esp,0x8
c002121d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021224:	50                   	push   eax
c0021225:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002122c:	e8 87 fd ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c0021231:	83 c4 10             	add    esp,0x10
c0021234:	83 ec 08             	sub    esp,0x8
c0021237:	8d 44 24 08          	lea    eax,[esp+0x8]
c002123b:	50                   	push   eax
c002123c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021243:	50                   	push   eax
c0021244:	e8 3f 4f fe ff       	call   c0006188 <f_stat>
c0021249:	83 c4 10             	add    esp,0x10
c002124c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021253:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002125a:	85 c0                	test   eax,eax
c002125c:	74 07                	je     c0021265 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002125e:	83 f8 04             	cmp    eax,0x4
c0021261:	74 32                	je     c0021295 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021263:	eb 37                	jmp    c002129c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021265:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021269:	0f b6 c0             	movzx  eax,al
c002126c:	83 e0 10             	and    eax,0x10
c002126f:	0f 95 c2             	setne  dl
c0021272:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021279:	88 10                	mov    BYTE PTR [eax],dl
c002127b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002127e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021282:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021289:	89 01                	mov    DWORD PTR [ecx],eax
c002128b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002128e:	b8 00 00 00 00       	mov    eax,0x0
c0021293:	eb 0c                	jmp    c00212a1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021295:	b8 02 00 00 00       	mov    eax,0x2
c002129a:	eb 05                	jmp    c00212a1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002129c:	b8 01 00 00 00       	mov    eax,0x1
c00212a1:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212a7:	c3                   	ret    

c00212a8 <FAT::unlink(char const*)>:
c00212a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212b6:	75 07                	jne    c00212bf <FAT::unlink(char const*)+0x17>
c00212b8:	b8 04 00 00 00       	mov    eax,0x4
c00212bd:	eb 5c                	jmp    c002131b <FAT::unlink(char const*)+0x73>
c00212bf:	83 ec 08             	sub    esp,0x8
c00212c2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212cd:	50                   	push   eax
c00212ce:	e8 61 f5 fd ff       	call   c0000834 <strcpy>
c00212d3:	83 c4 10             	add    esp,0x10
c00212d6:	83 ec 08             	sub    esp,0x8
c00212d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212dd:	50                   	push   eax
c00212de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212e5:	e8 ce fc ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c00212ea:	83 c4 10             	add    esp,0x10
c00212ed:	83 ec 0c             	sub    esp,0xc
c00212f0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212f4:	50                   	push   eax
c00212f5:	e8 e0 51 fe ff       	call   c00064da <f_unlink>
c00212fa:	83 c4 10             	add    esp,0x10
c00212fd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021304:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002130b:	85 c0                	test   eax,eax
c002130d:	75 07                	jne    c0021316 <FAT::unlink(char const*)+0x6e>
c002130f:	b8 00 00 00 00       	mov    eax,0x0
c0021314:	eb 05                	jmp    c002131b <FAT::unlink(char const*)+0x73>
c0021316:	b8 01 00 00 00       	mov    eax,0x1
c002131b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021321:	c3                   	ret    

c0021322 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021322:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021328:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002132f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021336:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002133a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002133e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021346:	75 0a                	jne    c0021352 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021348:	b8 04 00 00 00       	mov    eax,0x4
c002134d:	e9 1c 01 00 00       	jmp    c002146e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021352:	83 ec 08             	sub    esp,0x8
c0021355:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002135c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021360:	50                   	push   eax
c0021361:	e8 ce f4 fd ff       	call   c0000834 <strcpy>
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	83 ec 08             	sub    esp,0x8
c002136c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021370:	50                   	push   eax
c0021371:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021378:	e8 3b fc ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c002137d:	83 c4 10             	add    esp,0x10
c0021380:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021388:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021390:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021395:	83 e0 01             	and    eax,0x1
c0021398:	74 08                	je     c00213a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002139a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213a7:	83 e0 02             	and    eax,0x2
c00213aa:	74 08                	je     c00213b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213ac:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b9:	83 e0 04             	and    eax,0x4
c00213bc:	74 08                	je     c00213c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213be:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213cb:	83 e0 08             	and    eax,0x8
c00213ce:	74 08                	je     c00213d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213d0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213dd:	83 e0 01             	and    eax,0x1
c00213e0:	74 08                	je     c00213ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213e2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213ea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213ef:	83 e0 02             	and    eax,0x2
c00213f2:	74 08                	je     c00213fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213f4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021401:	83 e0 04             	and    eax,0x4
c0021404:	74 08                	je     c002140e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021406:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002140e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021413:	83 e0 08             	and    eax,0x8
c0021416:	74 08                	je     c0021420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021418:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021420:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021427:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002142e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021436:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002143e:	83 ec 04             	sub    esp,0x4
c0021441:	52                   	push   edx
c0021442:	50                   	push   eax
c0021443:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021447:	50                   	push   eax
c0021448:	e8 2f 57 fe ff       	call   c0006b7c <f_chmod>
c002144d:	83 c4 10             	add    esp,0x10
c0021450:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021457:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002145e:	85 c0                	test   eax,eax
c0021460:	75 07                	jne    c0021469 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021462:	b8 00 00 00 00       	mov    eax,0x0
c0021467:	eb 05                	jmp    c002146e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021469:	b8 01 00 00 00       	mov    eax,0x1
c002146e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021474:	c3                   	ret    
c0021475:	90                   	nop

c0021476 <FAT::rename(char const*, char const*)>:
c0021476:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002147c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021484:	74 0a                	je     c0021490 <FAT::rename(char const*, char const*)+0x1a>
c0021486:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002148e:	75 0a                	jne    c002149a <FAT::rename(char const*, char const*)+0x24>
c0021490:	b8 04 00 00 00       	mov    eax,0x4
c0021495:	e9 98 00 00 00       	jmp    c0021532 <FAT::rename(char const*, char const*)+0xbc>
c002149a:	83 ec 08             	sub    esp,0x8
c002149d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214a4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214ab:	50                   	push   eax
c00214ac:	e8 83 f3 fd ff       	call   c0000834 <strcpy>
c00214b1:	83 c4 10             	add    esp,0x10
c00214b4:	83 ec 08             	sub    esp,0x8
c00214b7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214be:	50                   	push   eax
c00214bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214c6:	e8 ed fa ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c00214cb:	83 c4 10             	add    esp,0x10
c00214ce:	83 ec 08             	sub    esp,0x8
c00214d1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214dc:	50                   	push   eax
c00214dd:	e8 52 f3 fd ff       	call   c0000834 <strcpy>
c00214e2:	83 c4 10             	add    esp,0x10
c00214e5:	83 ec 08             	sub    esp,0x8
c00214e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214ec:	50                   	push   eax
c00214ed:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214f4:	e8 bf fa ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c00214f9:	83 c4 10             	add    esp,0x10
c00214fc:	83 ec 08             	sub    esp,0x8
c00214ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021503:	50                   	push   eax
c0021504:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002150b:	50                   	push   eax
c002150c:	e8 78 53 fe ff       	call   c0006889 <f_rename>
c0021511:	83 c4 10             	add    esp,0x10
c0021514:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002151b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021522:	85 c0                	test   eax,eax
c0021524:	75 07                	jne    c002152d <FAT::rename(char const*, char const*)+0xb7>
c0021526:	b8 00 00 00 00       	mov    eax,0x0
c002152b:	eb 05                	jmp    c0021532 <FAT::rename(char const*, char const*)+0xbc>
c002152d:	b8 01 00 00 00       	mov    eax,0x1
c0021532:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021538:	c3                   	ret    
c0021539:	90                   	nop

c002153a <FAT::mkdir(char const*)>:
c002153a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021540:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021548:	75 07                	jne    c0021551 <FAT::mkdir(char const*)+0x17>
c002154a:	b8 04 00 00 00       	mov    eax,0x4
c002154f:	eb 5c                	jmp    c00215ad <FAT::mkdir(char const*)+0x73>
c0021551:	83 ec 08             	sub    esp,0x8
c0021554:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002155b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002155f:	50                   	push   eax
c0021560:	e8 cf f2 fd ff       	call   c0000834 <strcpy>
c0021565:	83 c4 10             	add    esp,0x10
c0021568:	83 ec 08             	sub    esp,0x8
c002156b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002156f:	50                   	push   eax
c0021570:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021577:	e8 3c fa ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c002157c:	83 c4 10             	add    esp,0x10
c002157f:	83 ec 0c             	sub    esp,0xc
c0021582:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021586:	50                   	push   eax
c0021587:	e8 d1 50 fe ff       	call   c000665d <f_mkdir>
c002158c:	83 c4 10             	add    esp,0x10
c002158f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021596:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002159d:	85 c0                	test   eax,eax
c002159f:	75 07                	jne    c00215a8 <FAT::mkdir(char const*)+0x6e>
c00215a1:	b8 00 00 00 00       	mov    eax,0x0
c00215a6:	eb 05                	jmp    c00215ad <FAT::mkdir(char const*)+0x73>
c00215a8:	b8 01 00 00 00       	mov    eax,0x1
c00215ad:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215b3:	c3                   	ret    

c00215b4 <FAT::exists(char const*)>:
c00215b4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215ba:	83 ec 08             	sub    esp,0x8
c00215bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215c8:	50                   	push   eax
c00215c9:	e8 66 f2 fd ff       	call   c0000834 <strcpy>
c00215ce:	83 c4 10             	add    esp,0x10
c00215d1:	83 ec 08             	sub    esp,0x8
c00215d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215d8:	50                   	push   eax
c00215d9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215e0:	e8 d3 f9 ff ff       	call   c0020fb8 <FAT::fixFilepath(char*)>
c00215e5:	83 c4 10             	add    esp,0x10
c00215e8:	83 ec 08             	sub    esp,0x8
c00215eb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215f2:	50                   	push   eax
c00215f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215f7:	50                   	push   eax
c00215f8:	e8 8b 4b fe ff       	call   c0006188 <f_stat>
c00215fd:	83 c4 10             	add    esp,0x10
c0021600:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021607:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002160e:	85 c0                	test   eax,eax
c0021610:	75 04                	jne    c0021616 <FAT::exists(char const*)+0x62>
c0021612:	b0 01                	mov    al,0x1
c0021614:	eb 02                	jmp    c0021618 <FAT::exists(char const*)+0x64>
c0021616:	b0 00                	mov    al,0x0
c0021618:	81 c4 2c 02 00 00    	add    esp,0x22c
c002161e:	c3                   	ret    
c002161f:	90                   	nop

c0021620 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021620:	b8 08 00 00 00       	mov    eax,0x8
c0021625:	c3                   	ret    

c0021626 <ISO9660::seek(void*, unsigned long long)>:
c0021626:	53                   	push   ebx
c0021627:	b8 04 00 00 00       	mov    eax,0x4
c002162c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021634:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021638:	85 d2                	test   edx,edx
c002163a:	74 17                	je     c0021653 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002163c:	89 c8                	mov    eax,ecx
c002163e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021641:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021644:	b8 01 00 00 00       	mov    eax,0x1
c0021649:	73 08                	jae    c0021653 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002164b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002164e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021651:	31 c0                	xor    eax,eax
c0021653:	5b                   	pop    ebx
c0021654:	c3                   	ret    
c0021655:	90                   	nop

c0021656 <ISO9660::tell(void*, unsigned long long*)>:
c0021656:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002165a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002165e:	85 d2                	test   edx,edx
c0021660:	74 12                	je     c0021674 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021662:	85 c0                	test   eax,eax
c0021664:	74 0e                	je     c0021674 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021666:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021669:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002166c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002166f:	89 10                	mov    DWORD PTR [eax],edx
c0021671:	31 c0                	xor    eax,eax
c0021673:	c3                   	ret    
c0021674:	b8 04 00 00 00       	mov    eax,0x4
c0021679:	c3                   	ret    

c002167a <ISO9660::getName()>:
c002167a:	b8 a8 ca 02 c0       	mov    eax,0xc002caa8
c002167f:	c3                   	ret    

c0021680 <ISO9660::stat(void*, unsigned long long*)>:
c0021680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021688:	85 d2                	test   edx,edx
c002168a:	74 12                	je     c002169e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002168c:	85 c0                	test   eax,eax
c002168e:	74 0e                	je     c002169e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021690:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021693:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021696:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021699:	89 10                	mov    DWORD PTR [eax],edx
c002169b:	31 c0                	xor    eax,eax
c002169d:	c3                   	ret    
c002169e:	b8 04 00 00 00       	mov    eax,0x4
c00216a3:	c3                   	ret    

c00216a4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216a4:	b8 01 00 00 00       	mov    eax,0x1
c00216a9:	c3                   	ret    

c00216aa <ISO9660::unlink(char const*)>:
c00216aa:	b8 01 00 00 00       	mov    eax,0x1
c00216af:	c3                   	ret    

c00216b0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216b0:	b8 01 00 00 00       	mov    eax,0x1
c00216b5:	c3                   	ret    

c00216b6 <ISO9660::rename(char const*, char const*)>:
c00216b6:	b8 01 00 00 00       	mov    eax,0x1
c00216bb:	c3                   	ret    

c00216bc <ISO9660::mkdir(char const*)>:
c00216bc:	b8 01 00 00 00       	mov    eax,0x1
c00216c1:	c3                   	ret    

c00216c2 <ISO9660::close(void*)>:
c00216c2:	83 ec 0c             	sub    esp,0xc
c00216c5:	b8 04 00 00 00       	mov    eax,0x4
c00216ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216ce:	85 d2                	test   edx,edx
c00216d0:	74 0e                	je     c00216e0 <ISO9660::close(void*)+0x1e>
c00216d2:	83 ec 0c             	sub    esp,0xc
c00216d5:	52                   	push   edx
c00216d6:	e8 75 e1 fe ff       	call   c000f850 <free>
c00216db:	83 c4 10             	add    esp,0x10
c00216de:	31 c0                	xor    eax,eax
c00216e0:	83 c4 0c             	add    esp,0xc
c00216e3:	c3                   	ret    

c00216e4 <ISO9660::closeDir(void*)>:
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	b8 04 00 00 00       	mov    eax,0x4
c00216ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216f0:	85 d2                	test   edx,edx
c00216f2:	74 0e                	je     c0021702 <ISO9660::closeDir(void*)+0x1e>
c00216f4:	83 ec 0c             	sub    esp,0xc
c00216f7:	52                   	push   edx
c00216f8:	e8 53 e1 fe ff       	call   c000f850 <free>
c00216fd:	83 c4 10             	add    esp,0x10
c0021700:	31 c0                	xor    eax,eax
c0021702:	83 c4 0c             	add    esp,0xc
c0021705:	c3                   	ret    

c0021706 <ISO9660::~ISO9660()>:
c0021706:	83 ec 0c             	sub    esp,0xc
c0021709:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c002170e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021712:	89 10                	mov    DWORD PTR [eax],edx
c0021714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	50                   	push   eax
c002171c:	e8 33 1b ff ff       	call   c0013254 <Filesystem::~Filesystem()>
c0021721:	83 c4 10             	add    esp,0x10
c0021724:	90                   	nop
c0021725:	83 c4 0c             	add    esp,0xc
c0021728:	c3                   	ret    
c0021729:	90                   	nop

c002172a <ISO9660::~ISO9660()>:
c002172a:	83 ec 0c             	sub    esp,0xc
c002172d:	83 ec 0c             	sub    esp,0xc
c0021730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021734:	e8 cd ff ff ff       	call   c0021706 <ISO9660::~ISO9660()>
c0021739:	83 c4 10             	add    esp,0x10
c002173c:	83 ec 08             	sub    esp,0x8
c002173f:	6a 08                	push   0x8
c0021741:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021745:	e8 02 17 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c002174a:	83 c4 10             	add    esp,0x10
c002174d:	83 c4 0c             	add    esp,0xc
c0021750:	c3                   	ret    

c0021751 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021751:	55                   	push   ebp
c0021752:	31 c9                	xor    ecx,ecx
c0021754:	57                   	push   edi
c0021755:	56                   	push   esi
c0021756:	53                   	push   ebx
c0021757:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002175b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002175f:	89 eb                	mov    ebx,ebp
c0021761:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021765:	39 ce                	cmp    esi,ecx
c0021767:	7e 17                	jle    c0021780 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021769:	31 d2                	xor    edx,edx
c002176b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002176f:	7d 13                	jge    c0021784 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021771:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021775:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021778:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002177b:	75 0d                	jne    c002178a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002177d:	42                   	inc    edx
c002177e:	eb eb                	jmp    c002176b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021780:	31 c0                	xor    eax,eax
c0021782:	eb 0a                	jmp    c002178e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021784:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021788:	eb 04                	jmp    c002178e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002178a:	41                   	inc    ecx
c002178b:	43                   	inc    ebx
c002178c:	eb d7                	jmp    c0021765 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002178e:	5b                   	pop    ebx
c002178f:	5e                   	pop    esi
c0021790:	5f                   	pop    edi
c0021791:	5d                   	pop    ebp
c0021792:	c3                   	ret    

c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021793:	56                   	push   esi
c0021794:	53                   	push   ebx
c0021795:	52                   	push   edx
c0021796:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002179a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002179e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217a2:	39 0d 20 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d20,ecx
c00217a8:	75 08                	jne    c00217b2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217aa:	38 05 74 db 02 c0    	cmp    BYTE PTR ds:0xc002db74,al
c00217b0:	74 2b                	je     c00217dd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217b2:	83 ec 0c             	sub    esp,0xc
c00217b5:	a2 74 db 02 c0       	mov    ds:0xc002db74,al
c00217ba:	68 40 1d 03 c0       	push   0xc0031d40
c00217bf:	0f be c0             	movsx  eax,al
c00217c2:	6a 01                	push   0x1
c00217c4:	89 0d 20 1d 03 c0    	mov    DWORD PTR ds:0xc0031d20,ecx
c00217ca:	31 db                	xor    ebx,ebx
c00217cc:	53                   	push   ebx
c00217cd:	51                   	push   ecx
c00217ce:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c00217d5:	e8 62 4f ff ff       	call   c001673c <LogicalDisk::read(unsigned long long, int, void*)>
c00217da:	83 c4 20             	add    esp,0x20
c00217dd:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217e5:	c7 44 24 14 40 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d40
c00217ed:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217f1:	58                   	pop    eax
c00217f2:	5b                   	pop    ebx
c00217f3:	5e                   	pop    esi
c00217f4:	e9 4b ef fd ff       	jmp    c0000744 <memcpy>
c00217f9:	90                   	nop

c00217fa <ISO9660::tryMount(LogicalDisk*, int)>:
c00217fa:	81 ec 10 08 00 00    	sub    esp,0x810
c0021800:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021807:	83 c0 41             	add    eax,0x41
c002180a:	0f be c0             	movsx  eax,al
c002180d:	50                   	push   eax
c002180e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021812:	50                   	push   eax
c0021813:	6a 10                	push   0x10
c0021815:	e8 79 ff ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002181a:	83 c4 10             	add    esp,0x10
c002181d:	31 c0                	xor    eax,eax
c002181f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021824:	75 1d                	jne    c0021843 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021826:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002182b:	75 16                	jne    c0021843 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002182d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021832:	75 0f                	jne    c0021843 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021834:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021839:	75 08                	jne    c0021843 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002183b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021840:	0f 94 c0             	sete   al
c0021843:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021849:	c3                   	ret    

c002184a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002184a:	55                   	push   ebp
c002184b:	57                   	push   edi
c002184c:	56                   	push   esi
c002184d:	53                   	push   ebx
c002184e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021854:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002185b:	85 ed                	test   ebp,ebp
c002185d:	0f 84 d6 01 00 00    	je     c0021a39 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021863:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002186b:	0f 84 c8 01 00 00    	je     c0021a39 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021871:	b8 01 00 00 00       	mov    eax,0x1
c0021876:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002187a:	0f 85 be 01 00 00    	jne    c0021a3e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021880:	31 d2                	xor    edx,edx
c0021882:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021889:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002188c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002188f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021893:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021896:	89 04 24             	mov    DWORD PTR [esp],eax
c0021899:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002189d:	01 f0                	add    eax,esi
c002189f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218a2:	11 fa                	adc    edx,edi
c00218a4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218a8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218b0:	19 d1                	sbb    ecx,edx
c00218b2:	72 0a                	jb     c00218be <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218bc:	eb 13                	jmp    c00218d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218c6:	29 f0                	sub    eax,esi
c00218c8:	19 fa                	sbb    edx,edi
c00218ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00218cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218d4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218d7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218db:	51                   	push   ecx
c00218dc:	c1 e0 0b             	shl    eax,0xb
c00218df:	01 c6                	add    esi,eax
c00218e1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218e5:	11 d7                	adc    edi,edx
c00218e7:	50                   	push   eax
c00218e8:	89 fa                	mov    edx,edi
c00218ea:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218ee:	89 f0                	mov    eax,esi
c00218f0:	53                   	push   ebx
c00218f1:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218f5:	50                   	push   eax
c00218f6:	e8 98 fe ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021902:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021906:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002190c:	83 c4 10             	add    esp,0x10
c002190f:	b8 00 08 00 00       	mov    eax,0x800
c0021914:	29 d0                	sub    eax,edx
c0021916:	39 c1                	cmp    ecx,eax
c0021918:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002191c:	83 d9 00             	sbb    ecx,0x0
c002191f:	7d 1c                	jge    c002193d <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021921:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021926:	75 12                	jne    c002193a <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021928:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002192f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021935:	e9 fb 00 00 00       	jmp    c0021a35 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002193a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002193d:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021940:	31 d2                	xor    edx,edx
c0021942:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021946:	39 c2                	cmp    edx,eax
c0021948:	7d 14                	jge    c002195e <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002194a:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021951:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021955:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021958:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002195b:	42                   	inc    edx
c002195c:	eb e8                	jmp    c0021946 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002195e:	89 c3                	mov    ebx,eax
c0021960:	85 c0                	test   eax,eax
c0021962:	79 02                	jns    c0021966 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021964:	31 db                	xor    ebx,ebx
c0021966:	99                   	cdq    
c0021967:	01 c3                	add    ebx,eax
c0021969:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021970:	01 c6                	add    esi,eax
c0021972:	11 d7                	adc    edi,edx
c0021974:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021978:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002197c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002197f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021983:	29 c6                	sub    esi,eax
c0021985:	19 d7                	sbb    edi,edx
c0021987:	89 34 24             	mov    DWORD PTR [esp],esi
c002198a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002198e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021993:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021996:	b8 00 00 00 00       	mov    eax,0x0
c002199b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002199f:	7d 3e                	jge    c00219df <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219a1:	52                   	push   edx
c00219a2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219a6:	50                   	push   eax
c00219a7:	53                   	push   ebx
c00219a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219b0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219b4:	50                   	push   eax
c00219b5:	e8 d9 fd ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219ba:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219c2:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219c7:	81 c3 00 08 00 00    	add    ebx,0x800
c00219cd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219d5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219da:	83 c4 10             	add    esp,0x10
c00219dd:	eb af                	jmp    c002198e <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219e3:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219e6:	74 32                	je     c0021a1a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219e8:	50                   	push   eax
c00219e9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219ed:	50                   	push   eax
c00219ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219f2:	50                   	push   eax
c00219f3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219f7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219fb:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219ff:	56                   	push   esi
c0021a00:	e8 8e fd ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a05:	83 c4 0c             	add    esp,0xc
c0021a08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a0c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a10:	50                   	push   eax
c0021a11:	53                   	push   ebx
c0021a12:	e8 2d ed fd ff       	call   c0000744 <memcpy>
c0021a17:	83 c4 10             	add    esp,0x10
c0021a1a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a29:	89 38                	mov    DWORD PTR [eax],edi
c0021a2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a2f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a32:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a35:	31 c0                	xor    eax,eax
c0021a37:	eb 05                	jmp    c0021a3e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a39:	b8 04 00 00 00       	mov    eax,0x4
c0021a3e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a44:	5b                   	pop    ebx
c0021a45:	5e                   	pop    esi
c0021a46:	5f                   	pop    edi
c0021a47:	5d                   	pop    ebp
c0021a48:	c3                   	ret    
c0021a49:	90                   	nop

c0021a4a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a4a:	55                   	push   ebp
c0021a4b:	57                   	push   edi
c0021a4c:	56                   	push   esi
c0021a4d:	53                   	push   ebx
c0021a4e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a54:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a5b:	85 f6                	test   esi,esi
c0021a5d:	0f 84 64 02 00 00    	je     c0021cc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a63:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a6b:	0f 84 56 02 00 00    	je     c0021cc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a71:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a74:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a77:	75 0a                	jne    c0021a83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a79:	b8 07 00 00 00       	mov    eax,0x7
c0021a7e:	e9 49 02 00 00       	jmp    c0021ccc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a83:	50                   	push   eax
c0021a84:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a88:	50                   	push   eax
c0021a89:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a90:	53                   	push   ebx
c0021a91:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a93:	c1 e0 0b             	shl    eax,0xb
c0021a96:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a99:	c1 e8 0b             	shr    eax,0xb
c0021a9c:	50                   	push   eax
c0021a9d:	e8 f1 fc ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aa2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021aa5:	83 c4 10             	add    esp,0x10
c0021aa8:	89 c1                	mov    ecx,eax
c0021aaa:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021aad:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021ab3:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ab6:	84 db                	test   bl,bl
c0021ab8:	0f 85 90 00 00 00    	jne    c0021b4e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021abe:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021ac4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021aca:	29 c7                	sub    edi,eax
c0021acc:	89 fb                	mov    ebx,edi
c0021ace:	c1 fb 1f             	sar    ebx,0x1f
c0021ad1:	01 f8                	add    eax,edi
c0021ad3:	11 da                	adc    edx,ebx
c0021ad5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ad9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021add:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ae0:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021ae3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021ae6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ae9:	89 04 24             	mov    DWORD PTR [esp],eax
c0021aec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021af0:	89 d8                	mov    eax,ebx
c0021af2:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021af5:	ba 00 00 00 00       	mov    edx,0x0
c0021afa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021afe:	b8 00 00 00 00       	mov    eax,0x0
c0021b03:	73 0b                	jae    c0021b10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b0c:	29 f8                	sub    eax,edi
c0021b0e:	19 da                	sbb    edx,ebx
c0021b10:	89 d3                	mov    ebx,edx
c0021b12:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b15:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b18:	09 c3                	or     ebx,eax
c0021b1a:	0f 84 59 ff ff ff    	je     c0021a79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b20:	55                   	push   ebp
c0021b21:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b25:	50                   	push   eax
c0021b26:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b2d:	53                   	push   ebx
c0021b2e:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b30:	c1 e0 0b             	shl    eax,0xb
c0021b33:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b37:	c1 e8 0b             	shr    eax,0xb
c0021b3a:	50                   	push   eax
c0021b3b:	e8 53 fc ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b40:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b43:	83 c4 10             	add    esp,0x10
c0021b46:	25 ff 07 00 00       	and    eax,0x7ff
c0021b4b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b4e:	57                   	push   edi
c0021b4f:	6a 28                	push   0x28
c0021b51:	6a 00                	push   0x0
c0021b53:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b57:	50                   	push   eax
c0021b58:	e8 1b ec fd ff       	call   c0000778 <memset>
c0021b5d:	31 d2                	xor    edx,edx
c0021b5f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b62:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b68:	89 f8                	mov    eax,edi
c0021b6a:	83 c0 21             	add    eax,0x21
c0021b6d:	83 d2 00             	adc    edx,0x0
c0021b70:	89 c7                	mov    edi,eax
c0021b72:	89 d5                	mov    ebp,edx
c0021b74:	83 c4 10             	add    esp,0x10
c0021b77:	31 c9                	xor    ecx,ecx
c0021b79:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b80:	83 f9 28             	cmp    ecx,0x28
c0021b83:	88 04 24             	mov    BYTE PTR [esp],al
c0021b86:	0f 94 c2             	sete   dl
c0021b89:	88 d0                	mov    al,dl
c0021b8b:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b90:	39 fa                	cmp    edx,edi
c0021b92:	ba 00 00 00 00       	mov    edx,0x0
c0021b97:	19 ea                	sbb    edx,ebp
c0021b99:	0f 92 c2             	setb   dl
c0021b9c:	09 c2                	or     edx,eax
c0021b9e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021ba2:	0f 94 c0             	sete   al
c0021ba5:	08 d0                	or     al,dl
c0021ba7:	75 16                	jne    c0021bbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021ba9:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bad:	74 10                	je     c0021bbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021baf:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bb2:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bb6:	41                   	inc    ecx
c0021bb7:	83 c7 01             	add    edi,0x1
c0021bba:	83 d5 00             	adc    ebp,0x0
c0021bbd:	eb ba                	jmp    c0021b79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021bbf:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bc6:	83 ec 0c             	sub    esp,0xc
c0021bc9:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bcd:	57                   	push   edi
c0021bce:	e8 c1 eb fd ff       	call   c0000794 <strlen>
c0021bd3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bdb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bdf:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021be6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021be9:	5a                   	pop    edx
c0021bea:	25 ff 07 00 00       	and    eax,0x7ff
c0021bef:	01 c8                	add    eax,ecx
c0021bf1:	59                   	pop    ecx
c0021bf2:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bf8:	83 e0 02             	and    eax,0x2
c0021bfb:	3c 01                	cmp    al,0x1
c0021bfd:	19 c0                	sbb    eax,eax
c0021bff:	83 c0 02             	add    eax,0x2
c0021c02:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c06:	57                   	push   edi
c0021c07:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c0b:	50                   	push   eax
c0021c0c:	e8 23 ec fd ff       	call   c0000834 <strcpy>
c0021c11:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c15:	83 c4 10             	add    esp,0x10
c0021c18:	84 c0                	test   al,al
c0021c1a:	75 21                	jne    c0021c3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c1c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c24:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c2c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c34:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c3b:	eb 28                	jmp    c0021c65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c3d:	fe c8                	dec    al
c0021c3f:	75 24                	jne    c0021c65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c41:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c49:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c51:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c59:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c60:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c65:	0f b6 fb             	movzx  edi,bl
c0021c68:	31 db                	xor    ebx,ebx
c0021c6a:	50                   	push   eax
c0021c6b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c72:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c76:	50                   	push   eax
c0021c77:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c7e:	e8 c1 ea fd ff       	call   c0000744 <memcpy>
c0021c83:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c8a:	89 f9                	mov    ecx,edi
c0021c8c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c92:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c95:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c98:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c9b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c9e:	83 c4 10             	add    esp,0x10
c0021ca1:	39 c7                	cmp    edi,eax
c0021ca3:	89 df                	mov    edi,ebx
c0021ca5:	19 d7                	sbb    edi,edx
c0021ca7:	72 10                	jb     c0021cb9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ca9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cb0:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021cb7:	eb 0a                	jmp    c0021cc3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021cb9:	29 c8                	sub    eax,ecx
c0021cbb:	19 da                	sbb    edx,ebx
c0021cbd:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cc0:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021cc3:	31 c0                	xor    eax,eax
c0021cc5:	eb 05                	jmp    c0021ccc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cc7:	b8 04 00 00 00       	mov    eax,0x4
c0021ccc:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cd2:	5b                   	pop    ebx
c0021cd3:	5e                   	pop    esi
c0021cd4:	5f                   	pop    edi
c0021cd5:	5d                   	pop    ebp
c0021cd6:	c3                   	ret    

c0021cd7 <readRoot(unsigned int*, unsigned int*, char)>:
c0021cd7:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cdd:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ce5:	50                   	push   eax
c0021ce6:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cea:	50                   	push   eax
c0021ceb:	6a 10                	push   0x10
c0021ced:	e8 a1 fa ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cf2:	83 c4 0c             	add    esp,0xc
c0021cf5:	6a 22                	push   0x22
c0021cf7:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021cfe:	50                   	push   eax
c0021cff:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d03:	50                   	push   eax
c0021d04:	e8 3b ea fd ff       	call   c0000744 <memcpy>
c0021d09:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d14:	89 10                	mov    DWORD PTR [eax],edx
c0021d16:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d21:	89 10                	mov    DWORD PTR [eax],edx
c0021d23:	b0 01                	mov    al,0x1
c0021d25:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d2b:	c3                   	ret    

c0021d2c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d2c:	55                   	push   ebp
c0021d2d:	57                   	push   edi
c0021d2e:	56                   	push   esi
c0021d2f:	53                   	push   ebx
c0021d30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d36:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d3d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d48:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d4c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d54:	75 03                	jne    c0021d59 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d56:	83 c3 02             	add    ebx,0x2
c0021d59:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d5c:	75 03                	jne    c0021d61 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d5e:	43                   	inc    ebx
c0021d5f:	eb f8                	jmp    c0021d59 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d61:	51                   	push   ecx
c0021d62:	68 00 01 00 00       	push   0x100
c0021d67:	6a 00                	push   0x0
c0021d69:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d6d:	50                   	push   eax
c0021d6e:	e8 05 ea fd ff       	call   c0000778 <memset>
c0021d73:	83 c4 10             	add    esp,0x10
c0021d76:	31 d2                	xor    edx,edx
c0021d78:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d7b:	84 c0                	test   al,al
c0021d7d:	74 21                	je     c0021da0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d7f:	3c 2f                	cmp    al,0x2f
c0021d81:	75 0b                	jne    c0021d8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d83:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d87:	bd 01 00 00 00       	mov    ebp,0x1
c0021d8c:	eb 14                	jmp    c0021da2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d8e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d91:	80 f9 19             	cmp    cl,0x19
c0021d94:	77 03                	ja     c0021d99 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d96:	83 e8 20             	sub    eax,0x20
c0021d99:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d9d:	42                   	inc    edx
c0021d9e:	eb d8                	jmp    c0021d78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021da0:	31 ed                	xor    ebp,ebp
c0021da2:	83 ec 0c             	sub    esp,0xc
c0021da5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dac:	e8 8f da fe ff       	call   c000f840 <malloc>
c0021db1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021db8:	89 c6                	mov    esi,eax
c0021dba:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021dc0:	c1 ef 0b             	shr    edi,0xb
c0021dc3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dca:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dce:	83 c4 10             	add    esp,0x10
c0021dd1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dd6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dda:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021de1:	74 28                	je     c0021e0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021de3:	52                   	push   edx
c0021de4:	57                   	push   edi
c0021de5:	50                   	push   eax
c0021de6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dea:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021df1:	e8 9d f9 ff ff       	call   c0021793 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021df6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dfa:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e01:	05 00 08 00 00       	add    eax,0x800
c0021e06:	83 c4 10             	add    esp,0x10
c0021e09:	eb cb                	jmp    c0021dd6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e0b:	83 ec 0c             	sub    esp,0xc
c0021e0e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e12:	57                   	push   edi
c0021e13:	e8 7c e9 fd ff       	call   c0000794 <strlen>
c0021e18:	50                   	push   eax
c0021e19:	57                   	push   edi
c0021e1a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e21:	56                   	push   esi
c0021e22:	e8 2a f9 ff ff       	call   c0021751 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e27:	83 c4 20             	add    esp,0x20
c0021e2a:	85 c0                	test   eax,eax
c0021e2c:	75 13                	jne    c0021e41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e2e:	83 ec 0c             	sub    esp,0xc
c0021e31:	56                   	push   esi
c0021e32:	e8 19 da fe ff       	call   c000f850 <free>
c0021e37:	83 c4 10             	add    esp,0x10
c0021e3a:	31 c0                	xor    eax,eax
c0021e3c:	e9 b3 00 00 00       	jmp    c0021ef4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e41:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e45:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e49:	c1 e7 08             	shl    edi,0x8
c0021e4c:	c1 e2 10             	shl    edx,0x10
c0021e4f:	09 d7                	or     edi,edx
c0021e51:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e55:	09 d7                	or     edi,edx
c0021e57:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e5b:	c1 e2 18             	shl    edx,0x18
c0021e5e:	09 d7                	or     edi,edx
c0021e60:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e64:	89 d1                	mov    ecx,edx
c0021e66:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e6a:	c1 e1 08             	shl    ecx,0x8
c0021e6d:	c1 e2 10             	shl    edx,0x10
c0021e70:	09 ca                	or     edx,ecx
c0021e72:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e76:	09 ca                	or     edx,ecx
c0021e78:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e7c:	c1 e1 18             	shl    ecx,0x18
c0021e7f:	09 ca                	or     edx,ecx
c0021e81:	89 e9                	mov    ecx,ebp
c0021e83:	84 c9                	test   cl,cl
c0021e85:	74 3c                	je     c0021ec3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e87:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e8b:	83 ec 0c             	sub    esp,0xc
c0021e8e:	56                   	push   esi
c0021e8f:	e8 bc d9 fe ff       	call   c000f850 <free>
c0021e94:	83 c4 0c             	add    esp,0xc
c0021e97:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e9e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ea3:	50                   	push   eax
c0021ea4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eab:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021eb6:	52                   	push   edx
c0021eb7:	57                   	push   edi
c0021eb8:	53                   	push   ebx
c0021eb9:	e8 6e fe ff ff       	call   c0021d2c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ebe:	83 c4 20             	add    esp,0x20
c0021ec1:	eb 31                	jmp    c0021ef4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ec3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ec6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ecd:	d0 e8                	shr    al,1
c0021ecf:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ed1:	83 e0 01             	and    eax,0x1
c0021ed4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021edb:	83 ec 0c             	sub    esp,0xc
c0021ede:	89 13                	mov    DWORD PTR [ebx],edx
c0021ee0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ee7:	89 03                	mov    DWORD PTR [ebx],eax
c0021ee9:	56                   	push   esi
c0021eea:	e8 61 d9 fe ff       	call   c000f850 <free>
c0021eef:	83 c4 10             	add    esp,0x10
c0021ef2:	b0 01                	mov    al,0x1
c0021ef4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021efa:	5b                   	pop    ebx
c0021efb:	5e                   	pop    esi
c0021efc:	5f                   	pop    edi
c0021efd:	5d                   	pop    ebp
c0021efe:	c3                   	ret    

c0021eff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021eff:	55                   	push   ebp
c0021f00:	57                   	push   edi
c0021f01:	56                   	push   esi
c0021f02:	53                   	push   ebx
c0021f03:	83 ec 20             	sub    esp,0x20
c0021f06:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f0a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f0e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f1a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f22:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f27:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f2d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f33:	57                   	push   edi
c0021f34:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f38:	50                   	push   eax
c0021f39:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f3d:	50                   	push   eax
c0021f3e:	e8 94 fd ff ff       	call   c0021cd7 <readRoot(unsigned int*, unsigned int*, char)>
c0021f43:	5a                   	pop    edx
c0021f44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f48:	e8 47 e8 fd ff       	call   c0000794 <strlen>
c0021f4d:	83 c4 10             	add    esp,0x10
c0021f50:	83 f8 03             	cmp    eax,0x3
c0021f53:	77 17                	ja     c0021f6c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f59:	89 03                	mov    DWORD PTR [ebx],eax
c0021f5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f5f:	89 06                	mov    DWORD PTR [esi],eax
c0021f61:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f68:	b0 01                	mov    al,0x1
c0021f6a:	eb 19                	jmp    c0021f85 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f6c:	50                   	push   eax
c0021f6d:	55                   	push   ebp
c0021f6e:	57                   	push   edi
c0021f6f:	56                   	push   esi
c0021f70:	53                   	push   ebx
c0021f71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f7d:	e8 aa fd ff ff       	call   c0021d2c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f82:	83 c4 20             	add    esp,0x20
c0021f85:	83 c4 1c             	add    esp,0x1c
c0021f88:	5b                   	pop    ebx
c0021f89:	5e                   	pop    esi
c0021f8a:	5f                   	pop    edi
c0021f8b:	5d                   	pop    ebp
c0021f8c:	c3                   	ret    
c0021f8d:	90                   	nop

c0021f8e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f8e:	57                   	push   edi
c0021f8f:	56                   	push   esi
c0021f90:	53                   	push   ebx
c0021f91:	83 ec 10             	sub    esp,0x10
c0021f94:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f98:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f9c:	85 ff                	test   edi,edi
c0021f9e:	0f 84 9d 00 00 00    	je     c0022041 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fa4:	85 f6                	test   esi,esi
c0021fa6:	0f 84 95 00 00 00    	je     c0022041 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fac:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fb1:	74 17                	je     c0021fca <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fb3:	83 ec 0c             	sub    esp,0xc
c0021fb6:	68 c3 ca 02 c0       	push   0xc002cac3
c0021fbb:	e8 6c 0f ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0021fc0:	83 c4 10             	add    esp,0x10
c0021fc3:	b8 03 00 00 00       	mov    eax,0x3
c0021fc8:	eb 7c                	jmp    c0022046 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fca:	83 ec 0c             	sub    esp,0xc
c0021fcd:	6a 1c                	push   0x1c
c0021fcf:	e8 6c d8 fe ff       	call   c000f840 <malloc>
c0021fd4:	89 07                	mov    DWORD PTR [edi],eax
c0021fd6:	89 c3                	mov    ebx,eax
c0021fd8:	58                   	pop    eax
c0021fd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fdd:	50                   	push   eax
c0021fde:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fe1:	50                   	push   eax
c0021fe2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fe6:	50                   	push   eax
c0021fe7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021feb:	50                   	push   eax
c0021fec:	56                   	push   esi
c0021fed:	e8 0d ff ff ff       	call   c0021eff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ff2:	83 c4 20             	add    esp,0x20
c0021ff5:	84 c0                	test   al,al
c0021ff7:	74 07                	je     c0022000 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021ff9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ffe:	74 0b                	je     c002200b <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022000:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022004:	b8 01 00 00 00       	mov    eax,0x1
c0022009:	eb 3b                	jmp    c0022046 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002200b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002200f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022013:	89 03                	mov    DWORD PTR [ebx],eax
c0022015:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002201c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022020:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022027:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002202e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022031:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022038:	8a 06                	mov    al,BYTE PTR [esi]
c002203a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002203d:	31 c0                	xor    eax,eax
c002203f:	eb 05                	jmp    c0022046 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022041:	b8 04 00 00 00       	mov    eax,0x4
c0022046:	83 c4 10             	add    esp,0x10
c0022049:	5b                   	pop    ebx
c002204a:	5e                   	pop    esi
c002204b:	5f                   	pop    edi
c002204c:	c3                   	ret    
c002204d:	90                   	nop

c002204e <ISO9660::exists(char const*)>:
c002204e:	83 ec 28             	sub    esp,0x28
c0022051:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022055:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022059:	52                   	push   edx
c002205a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002205d:	52                   	push   edx
c002205e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022062:	52                   	push   edx
c0022063:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022067:	52                   	push   edx
c0022068:	50                   	push   eax
c0022069:	e8 91 fe ff ff       	call   c0021eff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002206e:	83 c4 3c             	add    esp,0x3c
c0022071:	c3                   	ret    

c0022072 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022072:	56                   	push   esi
c0022073:	53                   	push   ebx
c0022074:	83 ec 14             	sub    esp,0x14
c0022077:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002207b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002207f:	85 db                	test   ebx,ebx
c0022081:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022085:	0f 94 c2             	sete   dl
c0022088:	85 f6                	test   esi,esi
c002208a:	0f 94 c0             	sete   al
c002208d:	08 c2                	or     dl,al
c002208f:	75 68                	jne    c00220f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022091:	85 c9                	test   ecx,ecx
c0022093:	74 64                	je     c00220f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022095:	83 ec 0c             	sub    esp,0xc
c0022098:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002209b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002209f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220ac:	50                   	push   eax
c00220ad:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220b0:	50                   	push   eax
c00220b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b5:	50                   	push   eax
c00220b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220ba:	50                   	push   eax
c00220bb:	51                   	push   ecx
c00220bc:	e8 3e fe ff ff       	call   c0021eff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220c1:	83 c4 20             	add    esp,0x20
c00220c4:	ba 01 00 00 00       	mov    edx,0x1
c00220c9:	84 c0                	test   al,al
c00220cb:	74 31                	je     c00220fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220d8:	89 03                	mov    DWORD PTR [ebx],eax
c00220da:	ba 00 00 00 00       	mov    edx,0x0
c00220df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220e3:	85 c0                	test   eax,eax
c00220e5:	0f 95 06             	setne  BYTE PTR [esi]
c00220e8:	74 14                	je     c00220fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220f0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220f7:	eb 05                	jmp    c00220fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220f9:	ba 04 00 00 00       	mov    edx,0x4
c00220fe:	83 c4 14             	add    esp,0x14
c0022101:	89 d0                	mov    eax,edx
c0022103:	5b                   	pop    ebx
c0022104:	5e                   	pop    esi
c0022105:	c3                   	ret    

c0022106 <ISO9660::openDir(char const*, void**)>:
c0022106:	57                   	push   edi
c0022107:	56                   	push   esi
c0022108:	53                   	push   ebx
c0022109:	83 ec 10             	sub    esp,0x10
c002210c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022110:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022114:	85 ff                	test   edi,edi
c0022116:	0f 84 95 00 00 00    	je     c00221b1 <ISO9660::openDir(char const*, void**)+0xab>
c002211c:	85 f6                	test   esi,esi
c002211e:	0f 84 8d 00 00 00    	je     c00221b1 <ISO9660::openDir(char const*, void**)+0xab>
c0022124:	83 ec 0c             	sub    esp,0xc
c0022127:	6a 1c                	push   0x1c
c0022129:	e8 12 d7 fe ff       	call   c000f840 <malloc>
c002212e:	89 07                	mov    DWORD PTR [edi],eax
c0022130:	89 c3                	mov    ebx,eax
c0022132:	59                   	pop    ecx
c0022133:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022137:	50                   	push   eax
c0022138:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002213b:	50                   	push   eax
c002213c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022140:	50                   	push   eax
c0022141:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022145:	50                   	push   eax
c0022146:	56                   	push   esi
c0022147:	e8 b3 fd ff ff       	call   c0021eff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002214c:	83 c4 20             	add    esp,0x20
c002214f:	84 c0                	test   al,al
c0022151:	74 07                	je     c002215a <ISO9660::openDir(char const*, void**)+0x54>
c0022153:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022158:	75 21                	jne    c002217b <ISO9660::openDir(char const*, void**)+0x75>
c002215a:	0f b6 c0             	movzx  eax,al
c002215d:	52                   	push   edx
c002215e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022162:	50                   	push   eax
c0022163:	68 e9 ca 02 c0       	push   0xc002cae9
c0022168:	e8 bf 0d ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c002216d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022171:	83 c4 10             	add    esp,0x10
c0022174:	b8 01 00 00 00       	mov    eax,0x1
c0022179:	eb 3b                	jmp    c00221b6 <ISO9660::openDir(char const*, void**)+0xb0>
c002217b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002217f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022183:	89 03                	mov    DWORD PTR [ebx],eax
c0022185:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002218c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022190:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022197:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002219e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221a8:	8a 06                	mov    al,BYTE PTR [esi]
c00221aa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221ad:	31 c0                	xor    eax,eax
c00221af:	eb 05                	jmp    c00221b6 <ISO9660::openDir(char const*, void**)+0xb0>
c00221b1:	b8 04 00 00 00       	mov    eax,0x4
c00221b6:	83 c4 10             	add    esp,0x10
c00221b9:	5b                   	pop    ebx
c00221ba:	5e                   	pop    esi
c00221bb:	5f                   	pop    edi
c00221bc:	c3                   	ret    
c00221bd:	90                   	nop

c00221be <ISO9660::ISO9660()>:
c00221be:	83 ec 0c             	sub    esp,0xc
c00221c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c5:	83 ec 0c             	sub    esp,0xc
c00221c8:	50                   	push   eax
c00221c9:	e8 62 10 ff ff       	call   c0013230 <Filesystem::Filesystem()>
c00221ce:	83 c4 10             	add    esp,0x10
c00221d1:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c00221d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221da:	89 10                	mov    DWORD PTR [eax],edx
c00221dc:	90                   	nop
c00221dd:	83 c4 0c             	add    esp,0xc
c00221e0:	c3                   	ret    
c00221e1:	90                   	nop

c00221e2 <SoundChannel::~SoundChannel()>:
c00221e2:	83 ec 0c             	sub    esp,0xc
c00221e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221ec:	83 ec 0c             	sub    esp,0xc
c00221ef:	50                   	push   eax
c00221f0:	e8 5b d6 fe ff       	call   c000f850 <free>
c00221f5:	83 c4 10             	add    esp,0x10
c00221f8:	90                   	nop
c00221f9:	83 c4 0c             	add    esp,0xc
c00221fc:	c3                   	ret    
c00221fd:	90                   	nop

c00221fe <SoundChannel::setSpeed(float)>:
c00221fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022202:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022206:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022209:	c3                   	ret    

c002220a <SoundChannel::getSpeed()>:
c002220a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022211:	c3                   	ret    

c0022212 <SoundChannel::setVolume(int)>:
c0022212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022216:	83 f8 64             	cmp    eax,0x64
c0022219:	7e 05                	jle    c0022220 <SoundChannel::setVolume(int)+0xe>
c002221b:	b8 64 00 00 00       	mov    eax,0x64
c0022220:	85 c0                	test   eax,eax
c0022222:	79 02                	jns    c0022226 <SoundChannel::setVolume(int)+0x14>
c0022224:	31 c0                	xor    eax,eax
c0022226:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002222a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002222d:	c3                   	ret    

c002222e <SoundChannel::getVolume()>:
c002222e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022232:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022235:	c3                   	ret    

c0022236 <SoundChannel::pause()>:
c0022236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002223a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002223e:	c3                   	ret    
c002223f:	90                   	nop

c0022240 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022240:	83 ec 1c             	sub    esp,0x1c
c0022243:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022247:	e8 ea ff ff ff       	call   c0022236 <SoundChannel::pause()>
c002224c:	83 c4 04             	add    esp,0x4
c002224f:	6a 50                	push   0x50
c0022251:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022255:	e8 b8 ff ff ff       	call   c0022212 <SoundChannel::setVolume(int)>
c002225a:	83 c4 08             	add    esp,0x8
c002225d:	a1 84 cb 02 c0       	mov    eax,ds:0xc002cb84
c0022262:	50                   	push   eax
c0022263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022267:	e8 92 ff ff ff       	call   c00221fe <SoundChannel::setSpeed(float)>
c002226c:	83 c4 08             	add    esp,0x8
c002226f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022273:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022277:	89 10                	mov    DWORD PTR [eax],edx
c0022279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022281:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022288:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002228c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002228f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022294:	75 23                	jne    c00222b9 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022296:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002229a:	8b 10                	mov    edx,DWORD PTR [eax]
c002229c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222a3:	0f af c2             	imul   eax,edx
c00222a6:	85 c0                	test   eax,eax
c00222a8:	79 03                	jns    c00222ad <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222aa:	83 c0 03             	add    eax,0x3
c00222ad:	c1 f8 02             	sar    eax,0x2
c00222b0:	05 a0 0f 00 00       	add    eax,0xfa0
c00222b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222c1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222de:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222e1:	c1 e0 02             	shl    eax,0x2
c00222e4:	83 ec 0c             	sub    esp,0xc
c00222e7:	50                   	push   eax
c00222e8:	e8 53 d5 fe ff       	call   c000f840 <malloc>
c00222ed:	83 c4 10             	add    esp,0x10
c00222f0:	89 c2                	mov    edx,eax
c00222f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222f9:	83 ec 04             	sub    esp,0x4
c00222fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022300:	50                   	push   eax
c0022301:	6a 01                	push   0x1
c0022303:	6a 04                	push   0x4
c0022305:	e8 95 68 fe ff       	call   c0008b9f <src_new>
c002230a:	83 c4 10             	add    esp,0x10
c002230d:	89 c2                	mov    edx,eax
c002230f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022313:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002231a:	85 c0                	test   eax,eax
c002231c:	74 10                	je     c002232e <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002231e:	83 ec 0c             	sub    esp,0xc
c0022321:	68 68 cb 02 c0       	push   0xc002cb68
c0022326:	e8 a2 82 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c002232b:	83 c4 10             	add    esp,0x10
c002232e:	a0 40 29 03 c0       	mov    al,ds:0xc0032940
c0022333:	83 f0 01             	xor    eax,0x1
c0022336:	84 c0                	test   al,al
c0022338:	74 57                	je     c0022391 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002233a:	a1 88 cb 02 c0       	mov    eax,ds:0xc002cb88
c002233f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022343:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002234b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022353:	7f 35                	jg     c002238a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022355:	83 ec 0c             	sub    esp,0xc
c0022358:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002235c:	e8 96 4f 00 00       	call   c00272f7 <__floatsisf>
c0022361:	83 c4 10             	add    esp,0x10
c0022364:	8b 15 88 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb88
c002236a:	83 ec 08             	sub    esp,0x8
c002236d:	52                   	push   edx
c002236e:	50                   	push   eax
c002236f:	e8 95 4b 00 00       	call   c0026f09 <__mulsf3>
c0022374:	83 c4 10             	add    esp,0x10
c0022377:	89 c2                	mov    edx,eax
c0022379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002237d:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0022384:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022388:	eb c1                	jmp    c002234b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002238a:	c6 05 40 29 03 c0 01 	mov    BYTE PTR ds:0xc0032940,0x1
c0022391:	90                   	nop
c0022392:	83 c4 1c             	add    esp,0x1c
c0022395:	c3                   	ret    

c0022396 <SoundChannel::play()>:
c0022396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002239e:	c3                   	ret    
c002239f:	90                   	nop

c00223a0 <SoundChannel::paused()>:
c00223a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a4:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223a7:	c3                   	ret    

c00223a8 <SoundChannel::getSampleRate()>:
c00223a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ae:	c3                   	ret    
c00223af:	90                   	nop

c00223b0 <SoundChannel::getBits()>:
c00223b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223b7:	c3                   	ret    

c00223b8 <SoundChannel::getBufferUsed()>:
c00223b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223bc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223bf:	c3                   	ret    

c00223c0 <SoundChannel::getBufferSize()>:
c00223c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223c7:	c3                   	ret    

c00223c8 <SoundChannel::unbuffer(float*, int, int)>:
c00223c8:	56                   	push   esi
c00223c9:	53                   	push   ebx
c00223ca:	83 ec 40             	sub    esp,0x40
c00223cd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223d8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223df:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223ef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223f3:	e8 ff 4e 00 00       	call   c00272f7 <__floatsisf>
c00223f8:	5a                   	pop    edx
c00223f9:	89 c6                	mov    esi,eax
c00223fb:	ff 33                	push   DWORD PTR [ebx]
c00223fd:	e8 f5 4e 00 00       	call   c00272f7 <__floatsisf>
c0022402:	59                   	pop    ecx
c0022403:	5a                   	pop    edx
c0022404:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022407:	50                   	push   eax
c0022408:	e8 fc 4a 00 00       	call   c0026f09 <__mulsf3>
c002240d:	59                   	pop    ecx
c002240e:	5a                   	pop    edx
c002240f:	50                   	push   eax
c0022410:	56                   	push   esi
c0022411:	e8 b6 4c 00 00       	call   c00270cc <__divsf3>
c0022416:	89 04 24             	mov    DWORD PTR [esp],eax
c0022419:	e8 a9 61 00 00       	call   c00285c7 <__extendsfdf2>
c002241e:	59                   	pop    ecx
c002241f:	5e                   	pop    esi
c0022420:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022424:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022428:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022430:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022434:	50                   	push   eax
c0022435:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022438:	e8 57 63 fe ff       	call   c0008794 <src_process>
c002243d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022441:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022444:	83 c4 0c             	add    esp,0xc
c0022447:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002244a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002244d:	29 d0                	sub    eax,edx
c002244f:	c1 e0 02             	shl    eax,0x2
c0022452:	50                   	push   eax
c0022453:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022456:	50                   	push   eax
c0022457:	51                   	push   ecx
c0022458:	e8 1f e2 fd ff       	call   c000067c <memmove>
c002245d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022461:	83 c4 44             	add    esp,0x44
c0022464:	5b                   	pop    ebx
c0022465:	5e                   	pop    esi
c0022466:	c3                   	ret    
c0022467:	90                   	nop

c0022468 <SoundChannel::buffer8(unsigned char*, int)>:
c0022468:	55                   	push   ebp
c0022469:	57                   	push   edi
c002246a:	56                   	push   esi
c002246b:	53                   	push   ebx
c002246c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022470:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022474:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022477:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002247b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002247e:	74 7a                	je     c00224fa <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022480:	85 ff                	test   edi,edi
c0022482:	7e 76                	jle    c00224fa <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022484:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022488:	8d 70 01             	lea    esi,[eax+0x1]
c002248b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002248e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022491:	8b 1c 9d 40 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdac0]
c0022498:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002249b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002249e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224a1:	74 5e                	je     c0022501 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224a3:	83 ff 01             	cmp    edi,0x1
c00224a6:	74 4b                	je     c00224f3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224a8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224ac:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224af:	8d 70 01             	lea    esi,[eax+0x1]
c00224b2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224b5:	8b 1c 9d 40 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdac0]
c00224bc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224bf:	b8 02 00 00 00       	mov    eax,0x2
c00224c4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224c7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224ca:	75 23                	jne    c00224ef <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224cc:	eb 27                	jmp    c00224f5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224ce:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224d3:	8d 71 01             	lea    esi,[ecx+0x1]
c00224d6:	40                   	inc    eax
c00224d7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224da:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224dd:	8b 1c 9d 40 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdac0]
c00224e4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224e7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224ea:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224ed:	74 06                	je     c00224f5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224ef:	39 c7                	cmp    edi,eax
c00224f1:	75 db                	jne    c00224ce <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224f3:	89 f8                	mov    eax,edi
c00224f5:	5b                   	pop    ebx
c00224f6:	5e                   	pop    esi
c00224f7:	5f                   	pop    edi
c00224f8:	5d                   	pop    ebp
c00224f9:	c3                   	ret    
c00224fa:	5b                   	pop    ebx
c00224fb:	31 c0                	xor    eax,eax
c00224fd:	5e                   	pop    esi
c00224fe:	5f                   	pop    edi
c00224ff:	5d                   	pop    ebp
c0022500:	c3                   	ret    
c0022501:	b8 01 00 00 00       	mov    eax,0x1
c0022506:	eb ed                	jmp    c00224f5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022508 <SoundDevice::SoundDevice(char const*)>:
c0022508:	83 ec 1c             	sub    esp,0x1c
c002250b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250f:	83 ec 08             	sub    esp,0x8
c0022512:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022516:	50                   	push   eax
c0022517:	e8 26 20 ff ff       	call   c0014542 <Device::Device(char const*)>
c002251c:	83 c4 10             	add    esp,0x10
c002251f:	ba 94 cb 02 c0       	mov    edx,0xc002cb94
c0022524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022528:	89 10                	mov    DWORD PTR [eax],edx
c002252a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002252e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022546:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002254e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022553:	7f 19                	jg     c002256e <SoundDevice::SoundDevice(char const*)+0x66>
c0022555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022559:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002255d:	83 c2 54             	add    edx,0x54
c0022560:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022568:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002256c:	eb e0                	jmp    c002254e <SoundDevice::SoundDevice(char const*)+0x46>
c002256e:	90                   	nop
c002256f:	83 c4 1c             	add    esp,0x1c
c0022572:	c3                   	ret    
c0022573:	90                   	nop

c0022574 <SoundDevice::~SoundDevice()>:
c0022574:	53                   	push   ebx
c0022575:	83 ec 18             	sub    esp,0x18
c0022578:	ba 94 cb 02 c0       	mov    edx,0xc002cb94
c002257d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022581:	89 10                	mov    DWORD PTR [eax],edx
c0022583:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002258b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022590:	7f 46                	jg     c00225d8 <SoundDevice::~SoundDevice()+0x64>
c0022592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002259a:	83 c2 54             	add    edx,0x54
c002259d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225a1:	85 c0                	test   eax,eax
c00225a3:	74 2d                	je     c00225d2 <SoundDevice::~SoundDevice()+0x5e>
c00225a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225ad:	83 c2 54             	add    edx,0x54
c00225b0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225b4:	85 db                	test   ebx,ebx
c00225b6:	74 1a                	je     c00225d2 <SoundDevice::~SoundDevice()+0x5e>
c00225b8:	83 ec 0c             	sub    esp,0xc
c00225bb:	53                   	push   ebx
c00225bc:	e8 21 fc ff ff       	call   c00221e2 <SoundChannel::~SoundChannel()>
c00225c1:	83 c4 10             	add    esp,0x10
c00225c4:	83 ec 08             	sub    esp,0x8
c00225c7:	6a 2c                	push   0x2c
c00225c9:	53                   	push   ebx
c00225ca:	e8 7d 08 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00225cf:	83 c4 10             	add    esp,0x10
c00225d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225d6:	eb b3                	jmp    c002258b <SoundDevice::~SoundDevice()+0x17>
c00225d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225dc:	83 ec 0c             	sub    esp,0xc
c00225df:	50                   	push   eax
c00225e0:	e8 3f 1c ff ff       	call   c0014224 <Device::~Device()>
c00225e5:	83 c4 10             	add    esp,0x10
c00225e8:	90                   	nop
c00225e9:	83 c4 18             	add    esp,0x18
c00225ec:	5b                   	pop    ebx
c00225ed:	c3                   	ret    

c00225ee <SoundDevice::~SoundDevice()>:
c00225ee:	83 ec 0c             	sub    esp,0xc
c00225f1:	83 ec 0c             	sub    esp,0xc
c00225f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225f8:	e8 77 ff ff ff       	call   c0022574 <SoundDevice::~SoundDevice()>
c00225fd:	83 c4 10             	add    esp,0x10
c0022600:	83 ec 08             	sub    esp,0x8
c0022603:	68 e4 01 00 00       	push   0x1e4
c0022608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002260c:	e8 3b 08 ff ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0022611:	83 c4 10             	add    esp,0x10
c0022614:	83 c4 0c             	add    esp,0xc
c0022617:	c3                   	ret    

c0022618 <SoundDevice::getFreeChannelNum()>:
c0022618:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002261c:	31 c0                	xor    eax,eax
c002261e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022626:	74 09                	je     c0022631 <SoundDevice::getFreeChannelNum()+0x19>
c0022628:	40                   	inc    eax
c0022629:	83 f8 20             	cmp    eax,0x20
c002262c:	75 f0                	jne    c002261e <SoundDevice::getFreeChannelNum()+0x6>
c002262e:	83 c8 ff             	or     eax,0xffffffff
c0022631:	c3                   	ret    

c0022632 <SoundDevice::addChannel(SoundChannel*)>:
c0022632:	56                   	push   esi
c0022633:	53                   	push   ebx
c0022634:	51                   	push   ecx
c0022635:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022639:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002263d:	53                   	push   ebx
c002263e:	e8 d5 ff ff ff       	call   c0022618 <SoundDevice::getFreeChannelNum()>
c0022643:	5a                   	pop    edx
c0022644:	83 f8 ff             	cmp    eax,0xffffffff
c0022647:	74 51                	je     c002269a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022649:	85 f6                	test   esi,esi
c002264b:	74 4d                	je     c002269a <SoundDevice::addChannel(SoundChannel*)+0x68>
c002264d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022654:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002265b:	75 30                	jne    c002268d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002265d:	83 ec 0c             	sub    esp,0xc
c0022660:	56                   	push   esi
c0022661:	e8 42 fd ff ff       	call   c00223a8 <SoundChannel::getSampleRate()>
c0022666:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002266c:	89 34 24             	mov    DWORD PTR [esp],esi
c002266f:	e8 3c fd ff ff       	call   c00223b0 <SoundChannel::getBits()>
c0022674:	83 c4 0c             	add    esp,0xc
c0022677:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002267d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002267f:	50                   	push   eax
c0022680:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022686:	53                   	push   ebx
c0022687:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002268a:	83 c4 10             	add    esp,0x10
c002268d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022693:	b8 01 00 00 00       	mov    eax,0x1
c0022698:	eb 03                	jmp    c002269d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002269a:	83 c8 ff             	or     eax,0xffffffff
c002269d:	5a                   	pop    edx
c002269e:	5b                   	pop    ebx
c002269f:	5e                   	pop    esi
c00226a0:	c3                   	ret    
c00226a1:	90                   	nop

c00226a2 <SoundDevice::removeChannel(int)>:
c00226a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226aa:	83 fa 1f             	cmp    edx,0x1f
c00226ad:	77 23                	ja     c00226d2 <SoundDevice::removeChannel(int)+0x30>
c00226af:	8d 14 90             	lea    edx,[eax+edx*4]
c00226b2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226b9:	74 17                	je     c00226d2 <SoundDevice::removeChannel(int)+0x30>
c00226bb:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226c5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226cb:	75 05                	jne    c00226d2 <SoundDevice::removeChannel(int)+0x30>
c00226cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00226cf:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226d2:	c3                   	ret    
c00226d3:	90                   	nop

c00226d4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226d4:	57                   	push   edi
c00226d5:	56                   	push   esi
c00226d6:	53                   	push   ebx
c00226d7:	31 db                	xor    ebx,ebx
c00226d9:	83 ec 10             	sub    esp,0x10
c00226dc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226e0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226e4:	0f 8d cb 00 00 00    	jge    c00227b5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226ea:	83 ec 0c             	sub    esp,0xc
c00226ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226f1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226f4:	e8 ce 5e 00 00       	call   c00285c7 <__extendsfdf2>
c00226f9:	83 c4 10             	add    esp,0x10
c00226fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022700:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022704:	68 00 00 f0 3f       	push   0x3ff00000
c0022709:	6a 00                	push   0x0
c002270b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022713:	e8 3b 4e 00 00       	call   c0027553 <__adddf3>
c0022718:	83 c4 10             	add    esp,0x10
c002271b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002271f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022723:	68 00 00 e0 3f       	push   0x3fe00000
c0022728:	6a 00                	push   0x0
c002272a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002272e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022732:	e8 99 54 00 00       	call   c0027bd0 <__muldf3>
c0022737:	83 c4 10             	add    esp,0x10
c002273a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002273e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022742:	68 00 00 60 40       	push   0x40600000
c0022747:	6a 00                	push   0x0
c0022749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022751:	e8 7a 54 00 00       	call   c0027bd0 <__muldf3>
c0022756:	59                   	pop    ecx
c0022757:	5f                   	pop    edi
c0022758:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002275c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022764:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022768:	e8 36 5d 00 00       	call   c00284a3 <__truncdfsf2>
c002276d:	5a                   	pop    edx
c002276e:	89 c7                	mov    edi,eax
c0022770:	59                   	pop    ecx
c0022771:	68 00 00 fe 42       	push   0x42fe0000
c0022776:	50                   	push   eax
c0022777:	e8 d1 4d 00 00       	call   c002754d <__gesf2>
c002277c:	83 c4 10             	add    esp,0x10
c002277f:	85 c0                	test   eax,eax
c0022781:	78 06                	js     c0022789 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022783:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022787:	eb 26                	jmp    c00227af <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022789:	50                   	push   eax
c002278a:	50                   	push   eax
c002278b:	6a 00                	push   0x0
c002278d:	57                   	push   edi
c002278e:	e8 be 4d 00 00       	call   c0027551 <__lesf2>
c0022793:	83 c4 10             	add    esp,0x10
c0022796:	85 c0                	test   eax,eax
c0022798:	7f 06                	jg     c00227a0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002279a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002279e:	eb 0f                	jmp    c00227af <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227a0:	83 ec 0c             	sub    esp,0xc
c00227a3:	57                   	push   edi
c00227a4:	e8 b3 5e 00 00       	call   c002865c <lrintf>
c00227a9:	83 c4 10             	add    esp,0x10
c00227ac:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227af:	43                   	inc    ebx
c00227b0:	e9 2b ff ff ff       	jmp    c00226e0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227b5:	83 c4 10             	add    esp,0x10
c00227b8:	5b                   	pop    ebx
c00227b9:	5e                   	pop    esi
c00227ba:	5f                   	pop    edi
c00227bb:	c3                   	ret    

c00227bc <SoundDevice::getAudio(int, float*, float*)>:
c00227bc:	55                   	push   ebp
c00227bd:	57                   	push   edi
c00227be:	56                   	push   esi
c00227bf:	53                   	push   ebx
c00227c0:	31 db                	xor    ebx,ebx
c00227c2:	83 ec 20             	sub    esp,0x20
c00227c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227c9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227cd:	c1 e0 02             	shl    eax,0x2
c00227d0:	50                   	push   eax
c00227d1:	6a 00                	push   0x0
c00227d3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227d7:	e8 9c df fd ff       	call   c0000778 <memset>
c00227dc:	83 c4 10             	add    esp,0x10
c00227df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227e3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227ea:	85 c0                	test   eax,eax
c00227ec:	0f 84 d7 00 00 00    	je     c00228c9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227f2:	83 ec 0c             	sub    esp,0xc
c00227f5:	50                   	push   eax
c00227f6:	e8 a5 fb ff ff       	call   c00223a0 <SoundChannel::paused()>
c00227fb:	83 c4 10             	add    esp,0x10
c00227fe:	84 c0                	test   al,al
c0022800:	0f 85 c3 00 00 00    	jne    c00228c9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022806:	83 ec 0c             	sub    esp,0xc
c0022809:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022810:	e8 19 fa ff ff       	call   c002222e <SoundChannel::getVolume()>
c0022815:	83 c4 10             	add    esp,0x10
c0022818:	85 c0                	test   eax,eax
c002281a:	0f 84 a9 00 00 00    	je     c00228c9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022820:	83 ec 0c             	sub    esp,0xc
c0022823:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002282a:	e8 ff f9 ff ff       	call   c002222e <SoundChannel::getVolume()>
c002282f:	83 ec 0c             	sub    esp,0xc
c0022832:	50                   	push   eax
c0022833:	e8 bf 4a 00 00       	call   c00272f7 <__floatsisf>
c0022838:	59                   	pop    ecx
c0022839:	5d                   	pop    ebp
c002283a:	31 ed                	xor    ebp,ebp
c002283c:	68 00 00 c8 42       	push   0x42c80000
c0022841:	50                   	push   eax
c0022842:	e8 85 48 00 00       	call   c00270cc <__divsf3>
c0022847:	83 c4 10             	add    esp,0x10
c002284a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002284e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022852:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022858:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002285c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022863:	e8 60 fb ff ff       	call   c00223c8 <SoundChannel::unbuffer(float*, int, int)>
c0022868:	83 c4 20             	add    esp,0x20
c002286b:	89 c1                	mov    ecx,eax
c002286d:	39 cd                	cmp    ebp,ecx
c002286f:	7d 52                	jge    c00228c3 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022871:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022875:	50                   	push   eax
c0022876:	50                   	push   eax
c0022877:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002287b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002287e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022882:	e8 82 46 00 00       	call   c0026f09 <__mulsf3>
c0022887:	5a                   	pop    edx
c0022888:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002288c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022892:	e8 60 4a 00 00       	call   c00272f7 <__floatsisf>
c0022897:	59                   	pop    ecx
c0022898:	5a                   	pop    edx
c0022899:	50                   	push   eax
c002289a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002289e:	e8 29 48 00 00       	call   c00270cc <__divsf3>
c00228a3:	59                   	pop    ecx
c00228a4:	5a                   	pop    edx
c00228a5:	50                   	push   eax
c00228a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228aa:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228ad:	e8 34 43 00 00       	call   c0026be6 <__addsf3>
c00228b2:	83 c4 10             	add    esp,0x10
c00228b5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228bd:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228c0:	45                   	inc    ebp
c00228c1:	eb aa                	jmp    c002286d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228c3:	39 cf                	cmp    edi,ecx
c00228c5:	7e 02                	jle    c00228c9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228c7:	89 cf                	mov    edi,ecx
c00228c9:	43                   	inc    ebx
c00228ca:	83 fb 20             	cmp    ebx,0x20
c00228cd:	0f 85 10 ff ff ff    	jne    c00227e3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228d3:	83 c4 1c             	add    esp,0x1c
c00228d6:	89 f8                	mov    eax,edi
c00228d8:	5b                   	pop    ebx
c00228d9:	5e                   	pop    esi
c00228da:	5f                   	pop    edi
c00228db:	5d                   	pop    ebp
c00228dc:	c3                   	ret    
c00228dd:	90                   	nop

c00228de <PCI::open(int, int, void*)>:
c00228de:	83 ec 18             	sub    esp,0x18
c00228e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00228e7:	50                   	push   eax
c00228e8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228eb:	31 c0                	xor    eax,eax
c00228ed:	83 c4 1c             	add    esp,0x1c
c00228f0:	c3                   	ret    
c00228f1:	90                   	nop

c00228f2 <PCI::close(int, int, void*)>:
c00228f2:	31 c0                	xor    eax,eax
c00228f4:	c3                   	ret    
c00228f5:	90                   	nop

c00228f6 <PCI::PCI()>:
c00228f6:	83 ec 0c             	sub    esp,0xc
c00228f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fd:	83 ec 08             	sub    esp,0x8
c0022900:	68 c4 cb 02 c0       	push   0xc002cbc4
c0022905:	50                   	push   eax
c0022906:	e8 bb 12 ff ff       	call   c0013bc6 <Bus::Bus(char const*)>
c002290b:	83 c4 10             	add    esp,0x10
c002290e:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c0022913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022917:	89 10                	mov    DWORD PTR [eax],edx
c0022919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022923:	0f b6 d0             	movzx  edx,al
c0022926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022935:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002293b:	0f b6 d0             	movzx  edx,al
c002293e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022942:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022951:	8d 50 01             	lea    edx,[eax+0x1]
c0022954:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022958:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002295e:	0f b6 d0             	movzx  edx,al
c0022961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022965:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022969:	83 c9 c0             	or     ecx,0xffffffc0
c002296c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022970:	90                   	nop
c0022971:	83 c4 0c             	add    esp,0xc
c0022974:	c3                   	ret    
c0022975:	90                   	nop

c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022976:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002297a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002297f:	89 ca                	mov    edx,ecx
c0022981:	c1 e0 10             	shl    eax,0x10
c0022984:	81 e2 fc 00 00 00    	and    edx,0xfc
c002298a:	09 d0                	or     eax,edx
c002298c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022991:	c1 e2 08             	shl    edx,0x8
c0022994:	09 d0                	or     eax,edx
c0022996:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002299b:	c1 e2 0b             	shl    edx,0xb
c002299e:	09 d0                	or     eax,edx
c00229a0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229a5:	0d 00 00 00 80       	or     eax,0x80000000
c00229aa:	ef                   	out    dx,eax
c00229ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229b0:	ed                   	in     eax,dx
c00229b1:	83 e1 02             	and    ecx,0x2
c00229b4:	0f b6 c9             	movzx  ecx,cl
c00229b7:	c1 e1 03             	shl    ecx,0x3
c00229ba:	d3 e8                	shr    eax,cl
c00229bc:	c3                   	ret    
c00229bd:	90                   	nop

c00229be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229be:	6a 00                	push   0x0
c00229c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c5:	50                   	push   eax
c00229c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cb:	50                   	push   eax
c00229cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d1:	50                   	push   eax
c00229d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d6:	e8 9b ff ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229db:	83 c4 14             	add    esp,0x14
c00229de:	c3                   	ret    
c00229df:	90                   	nop

c00229e0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229e0:	6a 0e                	push   0xe
c00229e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e7:	50                   	push   eax
c00229e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ed:	50                   	push   eax
c00229ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f3:	50                   	push   eax
c00229f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229f8:	e8 79 ff ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229fd:	83 c4 14             	add    esp,0x14
c0022a00:	0f b6 c0             	movzx  eax,al
c0022a03:	c3                   	ret    

c0022a04 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a04:	55                   	push   ebp
c0022a05:	57                   	push   edi
c0022a06:	56                   	push   esi
c0022a07:	53                   	push   ebx
c0022a08:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a0d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a12:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a17:	6a 0a                	push   0xa
c0022a19:	56                   	push   esi
c0022a1a:	55                   	push   ebp
c0022a1b:	57                   	push   edi
c0022a1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a20:	e8 51 ff ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a25:	6a 0a                	push   0xa
c0022a27:	89 c3                	mov    ebx,eax
c0022a29:	56                   	push   esi
c0022a2a:	0f b6 db             	movzx  ebx,bl
c0022a2d:	55                   	push   ebp
c0022a2e:	57                   	push   edi
c0022a2f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a33:	e8 3e ff ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a38:	83 c4 28             	add    esp,0x28
c0022a3b:	25 00 ff 00 00       	and    eax,0xff00
c0022a40:	09 d8                	or     eax,ebx
c0022a42:	5b                   	pop    ebx
c0022a43:	5e                   	pop    esi
c0022a44:	5f                   	pop    edi
c0022a45:	5d                   	pop    ebp
c0022a46:	c3                   	ret    
c0022a47:	90                   	nop

c0022a48 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a48:	6a 08                	push   0x8
c0022a4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4f:	50                   	push   eax
c0022a50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a55:	50                   	push   eax
c0022a56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5b:	50                   	push   eax
c0022a5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a60:	e8 11 ff ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a65:	83 c4 14             	add    esp,0x14
c0022a68:	0f b6 c4             	movzx  eax,ah
c0022a6b:	c3                   	ret    

c0022a6c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a6c:	6a 08                	push   0x8
c0022a6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a73:	50                   	push   eax
c0022a74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a79:	50                   	push   eax
c0022a7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7f:	50                   	push   eax
c0022a80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a84:	e8 ed fe ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a89:	83 c4 14             	add    esp,0x14
c0022a8c:	c3                   	ret    
c0022a8d:	90                   	nop

c0022a8e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a8e:	6a 3c                	push   0x3c
c0022a90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a95:	50                   	push   eax
c0022a96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9b:	50                   	push   eax
c0022a9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa1:	50                   	push   eax
c0022aa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa6:	e8 cb fe ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aab:	83 c4 14             	add    esp,0x14
c0022aae:	c3                   	ret    
c0022aaf:	90                   	nop

c0022ab0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ab0:	6a 18                	push   0x18
c0022ab2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab7:	50                   	push   eax
c0022ab8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abd:	50                   	push   eax
c0022abe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac3:	50                   	push   eax
c0022ac4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac8:	e8 a9 fe ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022acd:	83 c4 14             	add    esp,0x14
c0022ad0:	0f b6 c4             	movzx  eax,ah
c0022ad3:	c3                   	ret    

c0022ad4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ad4:	55                   	push   ebp
c0022ad5:	57                   	push   edi
c0022ad6:	56                   	push   esi
c0022ad7:	53                   	push   ebx
c0022ad8:	50                   	push   eax
c0022ad9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022add:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022ae2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ae7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022aec:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022af3:	8d 43 12             	lea    eax,[ebx+0x12]
c0022af6:	83 c3 10             	add    ebx,0x10
c0022af9:	0f b6 c0             	movzx  eax,al
c0022afc:	0f b6 db             	movzx  ebx,bl
c0022aff:	50                   	push   eax
c0022b00:	51                   	push   ecx
c0022b01:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b05:	57                   	push   edi
c0022b06:	55                   	push   ebp
c0022b07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b0b:	e8 66 fe ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b10:	53                   	push   ebx
c0022b11:	89 c6                	mov    esi,eax
c0022b13:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b17:	c1 e6 10             	shl    esi,0x10
c0022b1a:	51                   	push   ecx
c0022b1b:	57                   	push   edi
c0022b1c:	55                   	push   ebp
c0022b1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b21:	e8 50 fe ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b26:	83 c4 2c             	add    esp,0x2c
c0022b29:	0f b7 c0             	movzx  eax,ax
c0022b2c:	5b                   	pop    ebx
c0022b2d:	09 f0                	or     eax,esi
c0022b2f:	5e                   	pop    esi
c0022b30:	5f                   	pop    edi
c0022b31:	5d                   	pop    ebp
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b34:	53                   	push   ebx
c0022b35:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b3a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b43:	c1 e1 10             	shl    ecx,0x10
c0022b46:	25 fc 00 00 00       	and    eax,0xfc
c0022b4b:	09 c1                	or     ecx,eax
c0022b4d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b52:	c1 e0 08             	shl    eax,0x8
c0022b55:	09 c1                	or     ecx,eax
c0022b57:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b5c:	c1 e0 0b             	shl    eax,0xb
c0022b5f:	09 c1                	or     ecx,eax
c0022b61:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b67:	89 c8                	mov    eax,ecx
c0022b69:	ef                   	out    dx,eax
c0022b6a:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b6f:	ed                   	in     eax,dx
c0022b70:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b75:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b7a:	74 0a                	je     c0022b86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b7c:	0f b7 d8             	movzx  ebx,ax
c0022b7f:	89 d0                	mov    eax,edx
c0022b81:	c1 e0 10             	shl    eax,0x10
c0022b84:	eb 05                	jmp    c0022b8b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b86:	66 31 c0             	xor    ax,ax
c0022b89:	89 d3                	mov    ebx,edx
c0022b8b:	09 c3                	or     ebx,eax
c0022b8d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b92:	89 c8                	mov    eax,ecx
c0022b94:	ef                   	out    dx,eax
c0022b95:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b9a:	89 d8                	mov    eax,ebx
c0022b9c:	ef                   	out    dx,eax
c0022b9d:	5b                   	pop    ebx
c0022b9e:	c3                   	ret    
c0022b9f:	90                   	nop

c0022ba0 <PCI::checkBus(unsigned char)>:
c0022ba0:	56                   	push   esi
c0022ba1:	53                   	push   ebx
c0022ba2:	31 db                	xor    ebx,ebx
c0022ba4:	51                   	push   ecx
c0022ba5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022baa:	52                   	push   edx
c0022bab:	53                   	push   ebx
c0022bac:	43                   	inc    ebx
c0022bad:	56                   	push   esi
c0022bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bb2:	e8 2b 03 00 00       	call   c0022ee2 <PCI::checkDevice(unsigned char, unsigned char)>
c0022bb7:	83 c4 10             	add    esp,0x10
c0022bba:	83 fb 20             	cmp    ebx,0x20
c0022bbd:	75 eb                	jne    c0022baa <PCI::checkBus(unsigned char)+0xa>
c0022bbf:	58                   	pop    eax
c0022bc0:	5b                   	pop    ebx
c0022bc1:	5e                   	pop    esi
c0022bc2:	c3                   	ret    
c0022bc3:	90                   	nop

c0022bc4 <PCI::foundDevice(PCIDeviceInfo)>:
c0022bc4:	55                   	push   ebp
c0022bc5:	57                   	push   edi
c0022bc6:	56                   	push   esi
c0022bc7:	53                   	push   ebx
c0022bc8:	83 ec 1c             	sub    esp,0x1c
c0022bcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bcf:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bd5:	0f 84 52 01 00 00    	je     c0022d2d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bdb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bdf:	66 81 f9 06 04       	cmp    cx,0x406
c0022be4:	75 2c                	jne    c0022c12 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022be6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022beb:	50                   	push   eax
c0022bec:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bf1:	50                   	push   eax
c0022bf2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bf7:	50                   	push   eax
c0022bf8:	56                   	push   esi
c0022bf9:	e8 b2 fe ff ff       	call   c0022ab0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022bfe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c02:	0f b6 c0             	movzx  eax,al
c0022c05:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c09:	83 c4 2c             	add    esp,0x2c
c0022c0c:	5b                   	pop    ebx
c0022c0d:	5e                   	pop    esi
c0022c0e:	5f                   	pop    edi
c0022c0f:	5d                   	pop    ebp
c0022c10:	eb 8e                	jmp    c0022ba0 <PCI::checkBus(unsigned char)>
c0022c12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c16:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c24:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c28:	88 d3                	mov    bl,dl
c0022c2a:	85 c0                	test   eax,eax
c0022c2c:	74 33                	je     c0022c61 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c31:	85 d2                	test   edx,edx
c0022c33:	74 28                	je     c0022c5d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c35:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c3b:	31 ef                	xor    edi,ebp
c0022c3d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c43:	75 18                	jne    c0022c5d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c49:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c4f:	75 0c                	jne    c0022c5d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c51:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c57:	0f 84 d0 00 00 00    	je     c0022d2d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c5f:	eb c9                	jmp    c0022c2a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c61:	66 81 f9 01 06       	cmp    cx,0x601
c0022c66:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c6a:	75 19                	jne    c0022c85 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c6c:	83 ec 0c             	sub    esp,0xc
c0022c6f:	68 64 01 00 00       	push   0x164
c0022c74:	e8 c7 cb fe ff       	call   c000f840 <malloc>
c0022c79:	89 c5                	mov    ebp,eax
c0022c7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c7e:	e8 95 0f 00 00       	call   c0023c18 <SATABus::SATABus()>
c0022c83:	eb 1e                	jmp    c0022ca3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c85:	66 81 f9 01 01       	cmp    cx,0x101
c0022c8a:	75 60                	jne    c0022cec <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c8c:	83 ec 0c             	sub    esp,0xc
c0022c8f:	68 70 02 00 00       	push   0x270
c0022c94:	e8 a7 cb fe ff       	call   c000f840 <malloc>
c0022c99:	89 c5                	mov    ebp,eax
c0022c9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c9e:	e8 03 03 00 00       	call   c0022fa6 <IDE::IDE()>
c0022ca3:	58                   	pop    eax
c0022ca4:	5a                   	pop    edx
c0022ca5:	55                   	push   ebp
c0022ca6:	56                   	push   esi
c0022ca7:	e8 a6 16 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0022cac:	83 ec 1c             	sub    esp,0x1c
c0022caf:	b9 09 00 00 00       	mov    ecx,0x9
c0022cb4:	fc                   	cld    
c0022cb5:	89 e7                	mov    edi,esp
c0022cb7:	89 de                	mov    esi,ebx
c0022cb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cbb:	55                   	push   ebp
c0022cbc:	e8 9b 15 ff ff       	call   c001425c <Device::preOpenPCI(PCIDeviceInfo)>
c0022cc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cc4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cc8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cd0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cd8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022ce0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ce3:	83 c4 4c             	add    esp,0x4c
c0022ce6:	5b                   	pop    ebx
c0022ce7:	5e                   	pop    esi
c0022ce8:	5f                   	pop    edi
c0022ce9:	5d                   	pop    ebp
c0022cea:	ff e0                	jmp    eax
c0022cec:	83 ec 0c             	sub    esp,0xc
c0022cef:	68 58 01 00 00       	push   0x158
c0022cf4:	e8 47 cb fe ff       	call   c000f840 <malloc>
c0022cf9:	89 c5                	mov    ebp,eax
c0022cfb:	58                   	pop    eax
c0022cfc:	5a                   	pop    edx
c0022cfd:	68 cc cb 02 c0       	push   0xc002cbcc
c0022d02:	55                   	push   ebp
c0022d03:	e8 40 19 ff ff       	call   c0014648 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d08:	59                   	pop    ecx
c0022d09:	5f                   	pop    edi
c0022d0a:	55                   	push   ebp
c0022d0b:	56                   	push   esi
c0022d0c:	e8 41 16 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0022d11:	b9 09 00 00 00       	mov    ecx,0x9
c0022d16:	fc                   	cld    
c0022d17:	89 df                	mov    edi,ebx
c0022d19:	89 de                	mov    esi,ebx
c0022d1b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d1d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d21:	83 c4 2c             	add    esp,0x2c
c0022d24:	5b                   	pop    ebx
c0022d25:	5e                   	pop    esi
c0022d26:	5f                   	pop    edi
c0022d27:	5d                   	pop    ebp
c0022d28:	e9 2f 15 ff ff       	jmp    c001425c <Device::preOpenPCI(PCIDeviceInfo)>
c0022d2d:	83 c4 1c             	add    esp,0x1c
c0022d30:	5b                   	pop    ebx
c0022d31:	5e                   	pop    esi
c0022d32:	5f                   	pop    edi
c0022d33:	5d                   	pop    ebp
c0022d34:	c3                   	ret    
c0022d35:	90                   	nop

c0022d36 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d36:	55                   	push   ebp
c0022d37:	57                   	push   edi
c0022d38:	56                   	push   esi
c0022d39:	53                   	push   ebx
c0022d3a:	83 ec 5c             	sub    esp,0x5c
c0022d3d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d45:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d49:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d52:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d56:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d5f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d64:	6a 0c                	push   0xc
c0022d66:	55                   	push   ebp
c0022d67:	53                   	push   ebx
c0022d68:	57                   	push   edi
c0022d69:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d70:	e8 01 fc ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d75:	55                   	push   ebp
c0022d76:	53                   	push   ebx
c0022d77:	57                   	push   edi
c0022d78:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d7f:	e8 80 fc ff ff       	call   c0022a04 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d84:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d89:	83 c4 24             	add    esp,0x24
c0022d8c:	55                   	push   ebp
c0022d8d:	53                   	push   ebx
c0022d8e:	57                   	push   edi
c0022d8f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d93:	e8 f6 fc ff ff       	call   c0022a8e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d98:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d9c:	6a 3c                	push   0x3c
c0022d9e:	55                   	push   ebp
c0022d9f:	53                   	push   ebx
c0022da0:	57                   	push   edi
c0022da1:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022da8:	e8 c9 fb ff ff       	call   c0022976 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dad:	0f b6 c4             	movzx  eax,ah
c0022db0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022db4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022db8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dbc:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0022dc1:	83 c4 24             	add    esp,0x24
c0022dc4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022dca:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022dd1:	74 6c                	je     c0022e3f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dd3:	31 f6                	xor    esi,esi
c0022dd5:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0022ddb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022de1:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022de7:	7e 56                	jle    c0022e3f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022de9:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022dec:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022df3:	39 cb                	cmp    ebx,ecx
c0022df5:	75 45                	jne    c0022e3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022df7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022dfe:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e02:	75 38                	jne    c0022e3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e04:	83 ec 0c             	sub    esp,0xc
c0022e07:	68 e6 cb 02 c0       	push   0xc002cbe6
c0022e0c:	e8 1b 01 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0022e11:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0022e17:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e1d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e25:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e29:	52                   	push   edx
c0022e2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e2e:	53                   	push   ebx
c0022e2f:	68 0b cc 02 c0       	push   0xc002cc0b
c0022e34:	e8 f3 00 ff ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0022e39:	83 c4 20             	add    esp,0x20
c0022e3c:	46                   	inc    esi
c0022e3d:	eb 96                	jmp    c0022dd5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e3f:	31 d2                	xor    edx,edx
c0022e41:	83 ec 0c             	sub    esp,0xc
c0022e44:	55                   	push   ebp
c0022e45:	53                   	push   ebx
c0022e46:	57                   	push   edi
c0022e47:	52                   	push   edx
c0022e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e4c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e53:	e8 7c fc ff ff       	call   c0022ad4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e58:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e60:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e64:	42                   	inc    edx
c0022e65:	83 c4 20             	add    esp,0x20
c0022e68:	83 fa 06             	cmp    edx,0x6
c0022e6b:	75 d4                	jne    c0022e41 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e6d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e71:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e75:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e79:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e7d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e81:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e85:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e8a:	86 e0                	xchg   al,ah
c0022e8c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e91:	55                   	push   ebp
c0022e92:	53                   	push   ebx
c0022e93:	57                   	push   edi
c0022e94:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e98:	e8 ab fb ff ff       	call   c0022a48 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e9d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ea1:	55                   	push   ebp
c0022ea2:	53                   	push   ebx
c0022ea3:	57                   	push   edi
c0022ea4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022eab:	e8 0e fb ff ff       	call   c00229be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eb0:	83 ec 0c             	sub    esp,0xc
c0022eb3:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022eb8:	b9 09 00 00 00       	mov    ecx,0x9
c0022ebd:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ec1:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ec5:	fc                   	cld    
c0022ec6:	89 e7                	mov    edi,esp
c0022ec8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022ed1:	e8 ee fc ff ff       	call   c0022bc4 <PCI::foundDevice(PCIDeviceInfo)>
c0022ed6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022edc:	5b                   	pop    ebx
c0022edd:	5e                   	pop    esi
c0022ede:	5f                   	pop    edi
c0022edf:	5d                   	pop    ebp
c0022ee0:	c3                   	ret    
c0022ee1:	90                   	nop

c0022ee2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ee2:	55                   	push   ebp
c0022ee3:	57                   	push   edi
c0022ee4:	56                   	push   esi
c0022ee5:	53                   	push   ebx
c0022ee6:	83 ec 0c             	sub    esp,0xc
c0022ee9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022eed:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ef2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ef7:	6a 00                	push   0x0
c0022ef9:	56                   	push   esi
c0022efa:	57                   	push   edi
c0022efb:	55                   	push   ebp
c0022efc:	e8 bd fa ff ff       	call   c00229be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f01:	6a 00                	push   0x0
c0022f03:	56                   	push   esi
c0022f04:	57                   	push   edi
c0022f05:	55                   	push   ebp
c0022f06:	e8 2b fe ff ff       	call   c0022d36 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f0b:	83 c4 20             	add    esp,0x20
c0022f0e:	6a 00                	push   0x0
c0022f10:	56                   	push   esi
c0022f11:	57                   	push   edi
c0022f12:	55                   	push   ebp
c0022f13:	e8 c8 fa ff ff       	call   c00229e0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f18:	83 c4 10             	add    esp,0x10
c0022f1b:	84 c0                	test   al,al
c0022f1d:	79 27                	jns    c0022f46 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f1f:	bb 01 00 00 00       	mov    ebx,0x1
c0022f24:	53                   	push   ebx
c0022f25:	56                   	push   esi
c0022f26:	57                   	push   edi
c0022f27:	55                   	push   ebp
c0022f28:	e8 91 fa ff ff       	call   c00229be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f2d:	83 c4 10             	add    esp,0x10
c0022f30:	66 40                	inc    ax
c0022f32:	74 0c                	je     c0022f40 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f34:	53                   	push   ebx
c0022f35:	56                   	push   esi
c0022f36:	57                   	push   edi
c0022f37:	55                   	push   ebp
c0022f38:	e8 f9 fd ff ff       	call   c0022d36 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f3d:	83 c4 10             	add    esp,0x10
c0022f40:	43                   	inc    ebx
c0022f41:	83 fb 08             	cmp    ebx,0x8
c0022f44:	75 de                	jne    c0022f24 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f46:	83 c4 0c             	add    esp,0xc
c0022f49:	5b                   	pop    ebx
c0022f4a:	5e                   	pop    esi
c0022f4b:	5f                   	pop    edi
c0022f4c:	5d                   	pop    ebp
c0022f4d:	c3                   	ret    

c0022f4e <PCI::detect()>:
c0022f4e:	56                   	push   esi
c0022f4f:	53                   	push   ebx
c0022f50:	53                   	push   ebx
c0022f51:	31 db                	xor    ebx,ebx
c0022f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f57:	6a 00                	push   0x0
c0022f59:	6a 00                	push   0x0
c0022f5b:	6a 00                	push   0x0
c0022f5d:	56                   	push   esi
c0022f5e:	e8 7d fa ff ff       	call   c00229e0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f63:	83 c4 10             	add    esp,0x10
c0022f66:	a8 80                	test   al,0x80
c0022f68:	75 21                	jne    c0022f8b <PCI::detect()+0x3d>
c0022f6a:	51                   	push   ecx
c0022f6b:	51                   	push   ecx
c0022f6c:	6a 00                	push   0x0
c0022f6e:	56                   	push   esi
c0022f6f:	e8 2c fc ff ff       	call   c0022ba0 <PCI::checkBus(unsigned char)>
c0022f74:	83 c4 10             	add    esp,0x10
c0022f77:	eb 24                	jmp    c0022f9d <PCI::detect()+0x4f>
c0022f79:	52                   	push   edx
c0022f7a:	52                   	push   edx
c0022f7b:	53                   	push   ebx
c0022f7c:	43                   	inc    ebx
c0022f7d:	56                   	push   esi
c0022f7e:	e8 1d fc ff ff       	call   c0022ba0 <PCI::checkBus(unsigned char)>
c0022f83:	83 c4 10             	add    esp,0x10
c0022f86:	83 fb 08             	cmp    ebx,0x8
c0022f89:	74 12                	je     c0022f9d <PCI::detect()+0x4f>
c0022f8b:	53                   	push   ebx
c0022f8c:	6a 00                	push   0x0
c0022f8e:	6a 00                	push   0x0
c0022f90:	56                   	push   esi
c0022f91:	e8 28 fa ff ff       	call   c00229be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f96:	83 c4 10             	add    esp,0x10
c0022f99:	66 40                	inc    ax
c0022f9b:	74 dc                	je     c0022f79 <PCI::detect()+0x2b>
c0022f9d:	58                   	pop    eax
c0022f9e:	5b                   	pop    ebx
c0022f9f:	5e                   	pop    esi
c0022fa0:	c3                   	ret    
c0022fa1:	90                   	nop

c0022fa2 <IDE::close(int, int, void*)>:
c0022fa2:	83 c8 ff             	or     eax,0xffffffff
c0022fa5:	c3                   	ret    

c0022fa6 <IDE::IDE()>:
c0022fa6:	83 ec 0c             	sub    esp,0xc
c0022fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fad:	83 ec 08             	sub    esp,0x8
c0022fb0:	68 54 cc 02 c0       	push   0xc002cc54
c0022fb5:	50                   	push   eax
c0022fb6:	e8 23 17 ff ff       	call   c00146de <HardDiskController::HardDiskController(char const*)>
c0022fbb:	83 c4 10             	add    esp,0x10
c0022fbe:	ba 94 ce 02 c0       	mov    edx,0xc002ce94
c0022fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fc7:	89 10                	mov    DWORD PTR [eax],edx
c0022fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fcd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fd4:	90                   	nop
c0022fd5:	83 c4 0c             	add    esp,0xc
c0022fd8:	c3                   	ret    
c0022fd9:	90                   	nop

c0022fda <IDE::prepareInterrupt(unsigned char)>:
c0022fda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fdf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fe3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022feb:	c3                   	ret    

c0022fec <selectDrive(unsigned char, unsigned char)>:
c0022fec:	c3                   	ret    
c0022fed:	90                   	nop

c0022fee <IDE::getBase(unsigned char)>:
c0022fee:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ff7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fff:	c3                   	ret    

c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023000:	55                   	push   ebp
c0023001:	57                   	push   edi
c0023002:	56                   	push   esi
c0023003:	53                   	push   ebx
c0023004:	83 ec 1c             	sub    esp,0x1c
c0023007:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002300b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002300f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023012:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023016:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002301a:	80 f9 03             	cmp    cl,0x3
c002301d:	77 51                	ja     c0023070 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002301f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023023:	0f b6 f2             	movzx  esi,dl
c0023026:	0f b6 db             	movzx  ebx,bl
c0023029:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002302c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023030:	83 ca 80             	or     edx,0xffffff80
c0023033:	0f b6 d2             	movzx  edx,dl
c0023036:	52                   	push   edx
c0023037:	6a 0c                	push   0xc
c0023039:	56                   	push   esi
c002303a:	57                   	push   edi
c002303b:	e8 c0 ff ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023040:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023045:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023049:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002304d:	ee                   	out    dx,al
c002304e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023053:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023057:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002305b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002305f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023067:	83 c4 2c             	add    esp,0x2c
c002306a:	5b                   	pop    ebx
c002306b:	5e                   	pop    esi
c002306c:	5f                   	pop    edi
c002306d:	5d                   	pop    ebp
c002306e:	eb 90                	jmp    c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023070:	80 fb 07             	cmp    bl,0x7
c0023073:	77 12                	ja     c0023087 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023075:	0f b6 d2             	movzx  edx,dl
c0023078:	0f b6 db             	movzx  ebx,bl
c002307b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023083:	89 da                	mov    edx,ebx
c0023085:	eb 2f                	jmp    c00230b6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023087:	80 fb 0d             	cmp    bl,0xd
c002308a:	77 13                	ja     c002309f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002308c:	0f b6 d2             	movzx  edx,dl
c002308f:	0f b6 db             	movzx  ebx,bl
c0023092:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023099:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002309d:	eb 17                	jmp    c00230b6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002309f:	80 fb 15             	cmp    bl,0x15
c00230a2:	77 13                	ja     c00230b7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230a4:	0f b6 d2             	movzx  edx,dl
c00230a7:	0f b6 db             	movzx  ebx,bl
c00230aa:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230b2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230b6:	ee                   	out    dx,al
c00230b7:	83 c4 1c             	add    esp,0x1c
c00230ba:	5b                   	pop    ebx
c00230bb:	5e                   	pop    esi
c00230bc:	5f                   	pop    edi
c00230bd:	5d                   	pop    ebp
c00230be:	c3                   	ret    
c00230bf:	90                   	nop

c00230c0 <IDE::read(unsigned char, unsigned char)>:
c00230c0:	55                   	push   ebp
c00230c1:	57                   	push   edi
c00230c2:	56                   	push   esi
c00230c3:	53                   	push   ebx
c00230c4:	83 ec 1c             	sub    esp,0x1c
c00230c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230cf:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230d2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230d6:	3c 03                	cmp    al,0x3
c00230d8:	77 43                	ja     c002311d <IDE::read(unsigned char, unsigned char)+0x5d>
c00230da:	0f b6 f2             	movzx  esi,dl
c00230dd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230e0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230e4:	83 c8 80             	or     eax,0xffffff80
c00230e7:	0f b6 c0             	movzx  eax,al
c00230ea:	50                   	push   eax
c00230eb:	6a 0c                	push   0xc
c00230ed:	56                   	push   esi
c00230ee:	57                   	push   edi
c00230ef:	e8 0c ff ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230f9:	0f b6 c3             	movzx  eax,bl
c00230fc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023100:	ec                   	in     al,dx
c0023101:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023105:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002310a:	52                   	push   edx
c002310b:	6a 0c                	push   0xc
c002310d:	56                   	push   esi
c002310e:	57                   	push   edi
c002310f:	e8 ec fe ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023114:	83 c4 20             	add    esp,0x20
c0023117:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002311b:	eb 49                	jmp    c0023166 <IDE::read(unsigned char, unsigned char)+0xa6>
c002311d:	80 fb 07             	cmp    bl,0x7
c0023120:	77 12                	ja     c0023134 <IDE::read(unsigned char, unsigned char)+0x74>
c0023122:	0f b6 d2             	movzx  edx,dl
c0023125:	0f b6 c3             	movzx  eax,bl
c0023128:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023130:	89 c2                	mov    edx,eax
c0023132:	eb 31                	jmp    c0023165 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023134:	80 fb 0d             	cmp    bl,0xd
c0023137:	77 13                	ja     c002314c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023139:	0f b6 d2             	movzx  edx,dl
c002313c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023143:	0f b6 d3             	movzx  edx,bl
c0023146:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002314a:	eb 19                	jmp    c0023165 <IDE::read(unsigned char, unsigned char)+0xa5>
c002314c:	31 c0                	xor    eax,eax
c002314e:	80 fb 15             	cmp    bl,0x15
c0023151:	77 13                	ja     c0023166 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023153:	0f b6 d2             	movzx  edx,dl
c0023156:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002315e:	0f b6 d3             	movzx  edx,bl
c0023161:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023165:	ec                   	in     al,dx
c0023166:	83 c4 1c             	add    esp,0x1c
c0023169:	5b                   	pop    ebx
c002316a:	5e                   	pop    esi
c002316b:	5f                   	pop    edi
c002316c:	5d                   	pop    ebp
c002316d:	c3                   	ret    

c002316e <IDE::waitInterrupt(unsigned char)>:
c002316e:	55                   	push   ebp
c002316f:	57                   	push   edi
c0023170:	56                   	push   esi
c0023171:	53                   	push   ebx
c0023172:	31 db                	xor    ebx,ebx
c0023174:	83 ec 0c             	sub    esp,0xc
c0023177:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002317b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023180:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023188:	89 e8                	mov    eax,ebp
c002318a:	84 c0                	test   al,al
c002318c:	75 34                	jne    c00231c2 <IDE::waitInterrupt(unsigned char)+0x54>
c002318e:	52                   	push   edx
c002318f:	6a 0c                	push   0xc
c0023191:	56                   	push   esi
c0023192:	57                   	push   edi
c0023193:	e8 28 ff ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023198:	83 c4 10             	add    esp,0x10
c002319b:	a8 01                	test   al,0x1
c002319d:	75 2b                	jne    c00231ca <IDE::waitInterrupt(unsigned char)+0x5c>
c002319f:	f6 c3 04             	test   bl,0x4
c00231a2:	75 16                	jne    c00231ba <IDE::waitInterrupt(unsigned char)+0x4c>
c00231a4:	83 fb 32             	cmp    ebx,0x32
c00231a7:	7e 11                	jle    c00231ba <IDE::waitInterrupt(unsigned char)+0x4c>
c00231a9:	50                   	push   eax
c00231aa:	50                   	push   eax
c00231ab:	6a 00                	push   0x0
c00231ad:	68 80 96 98 00       	push   0x989680
c00231b2:	e8 8b b1 ff ff       	call   c001e342 <nanoSleep(unsigned long long)>
c00231b7:	83 c4 10             	add    esp,0x10
c00231ba:	83 fb 3c             	cmp    ebx,0x3c
c00231bd:	74 0b                	je     c00231ca <IDE::waitInterrupt(unsigned char)+0x5c>
c00231bf:	43                   	inc    ebx
c00231c0:	eb be                	jmp    c0023180 <IDE::waitInterrupt(unsigned char)+0x12>
c00231c2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231ca:	83 c4 0c             	add    esp,0xc
c00231cd:	89 e8                	mov    eax,ebp
c00231cf:	5b                   	pop    ebx
c00231d0:	5e                   	pop    esi
c00231d1:	5f                   	pop    edi
c00231d2:	5d                   	pop    ebp
c00231d3:	c3                   	ret    

c00231d4 <ideChannel0IRQHandler(regs*, void*)>:
c00231d4:	83 ec 10             	sub    esp,0x10
c00231d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231db:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231e2:	6a 07                	push   0x7
c00231e4:	6a 00                	push   0x0
c00231e6:	50                   	push   eax
c00231e7:	e8 d4 fe ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00231ec:	83 c4 1c             	add    esp,0x1c
c00231ef:	c3                   	ret    

c00231f0 <ideChannel1IRQHandler(regs*, void*)>:
c00231f0:	83 ec 10             	sub    esp,0x10
c00231f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231f7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231fe:	6a 07                	push   0x7
c0023200:	6a 01                	push   0x1
c0023202:	50                   	push   eax
c0023203:	e8 b8 fe ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023208:	83 c4 1c             	add    esp,0x1c
c002320b:	c3                   	ret    

c002320c <IDE::enableIRQs(unsigned char, bool)>:
c002320c:	57                   	push   edi
c002320d:	56                   	push   esi
c002320e:	be 04 00 00 00       	mov    esi,0x4
c0023213:	53                   	push   ebx
c0023214:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023219:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002321d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023222:	0f 94 c0             	sete   al
c0023225:	d1 e0                	shl    eax,1
c0023227:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002322e:	0f b6 c0             	movzx  eax,al
c0023231:	50                   	push   eax
c0023232:	6a 0c                	push   0xc
c0023234:	57                   	push   edi
c0023235:	53                   	push   ebx
c0023236:	e8 c5 fd ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002323b:	83 c4 10             	add    esp,0x10
c002323e:	50                   	push   eax
c002323f:	6a 0c                	push   0xc
c0023241:	57                   	push   edi
c0023242:	53                   	push   ebx
c0023243:	e8 78 fe ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023248:	83 c4 10             	add    esp,0x10
c002324b:	4e                   	dec    esi
c002324c:	75 f0                	jne    c002323e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002324e:	5b                   	pop    ebx
c002324f:	5e                   	pop    esi
c0023250:	5f                   	pop    edi
c0023251:	c3                   	ret    

c0023252 <IDE::open(int, int, void*)>:
c0023252:	55                   	push   ebp
c0023253:	57                   	push   edi
c0023254:	56                   	push   esi
c0023255:	53                   	push   ebx
c0023256:	83 ec 1c             	sub    esp,0x1c
c0023259:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002325d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023266:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002326f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023276:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002327d:	0f 85 b0 02 00 00    	jne    c0023533 <IDE::open(int, int, void*)+0x2e1>
c0023283:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023289:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002328d:	83 e0 7f             	and    eax,0x7f
c0023290:	3c 05                	cmp    al,0x5
c0023292:	74 04                	je     c0023298 <IDE::open(int, int, void*)+0x46>
c0023294:	3c 0f                	cmp    al,0xf
c0023296:	75 32                	jne    c00232ca <IDE::open(int, int, void*)+0x78>
c0023298:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002329e:	83 e0 fc             	and    eax,0xfffffffc
c00232a1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232a8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232ae:	83 e0 fc             	and    eax,0xfffffffc
c00232b1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232b8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232be:	83 e0 fc             	and    eax,0xfffffffc
c00232c1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232c8:	eb 14                	jmp    c00232de <IDE::open(int, int, void*)+0x8c>
c00232ca:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232d4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232de:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232e5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232f0:	89 c6                	mov    esi,eax
c00232f2:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232f7:	c1 e6 10             	shl    esi,0x10
c00232fa:	89 e8                	mov    eax,ebp
c00232fc:	89 fa                	mov    edx,edi
c00232fe:	c1 e0 0b             	shl    eax,0xb
c0023301:	09 f0                	or     eax,esi
c0023303:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002330a:	c1 e6 08             	shl    esi,0x8
c002330d:	09 c6                	or     esi,eax
c002330f:	89 f0                	mov    eax,esi
c0023311:	0d 08 00 00 80       	or     eax,0x80000008
c0023316:	ef                   	out    dx,eax
c0023317:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002331c:	89 ca                	mov    edx,ecx
c002331e:	ed                   	in     eax,dx
c002331f:	c1 e8 10             	shr    eax,0x10
c0023322:	3d ff ff 00 00       	cmp    eax,0xffff
c0023327:	0f 84 f5 00 00 00    	je     c0023422 <IDE::open(int, int, void*)+0x1d0>
c002332d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023333:	89 fa                	mov    edx,edi
c0023335:	89 f0                	mov    eax,esi
c0023337:	ef                   	out    dx,eax
c0023338:	b0 fe                	mov    al,0xfe
c002333a:	89 ca                	mov    edx,ecx
c002333c:	ee                   	out    dx,al
c002333d:	89 f0                	mov    eax,esi
c002333f:	89 fa                	mov    edx,edi
c0023341:	ef                   	out    dx,eax
c0023342:	89 ca                	mov    edx,ecx
c0023344:	ed                   	in     eax,dx
c0023345:	3c fe                	cmp    al,0xfe
c0023347:	0f 85 a9 00 00 00    	jne    c00233f6 <IDE::open(int, int, void*)+0x1a4>
c002334d:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0023353:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002335a:	74 33                	je     c002338f <IDE::open(int, int, void*)+0x13d>
c002335c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023362:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023366:	40                   	inc    eax
c0023367:	83 ec 0c             	sub    esp,0xc
c002336a:	0f b6 c0             	movzx  eax,al
c002336d:	50                   	push   eax
c002336e:	55                   	push   ebp
c002336f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023373:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023379:	51                   	push   ecx
c002337a:	e8 a7 4e ff ff       	call   c0018226 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002337f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023384:	83 c4 1c             	add    esp,0x1c
c0023387:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002338d:	eb 0a                	jmp    c0023399 <IDE::open(int, int, void*)+0x147>
c002338f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023399:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233a0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233a7:	c1 e1 10             	shl    ecx,0x10
c00233aa:	c1 e0 08             	shl    eax,0x8
c00233ad:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233b2:	09 c1                	or     ecx,eax
c00233b4:	89 fa                	mov    edx,edi
c00233b6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233bd:	c1 e0 0b             	shl    eax,0xb
c00233c0:	09 c1                	or     ecx,eax
c00233c2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233c8:	89 c8                	mov    eax,ecx
c00233ca:	ef                   	out    dx,eax
c00233cb:	be fc 0c 00 00       	mov    esi,0xcfc
c00233d0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233d6:	89 f2                	mov    edx,esi
c00233d8:	ee                   	out    dx,al
c00233d9:	89 c8                	mov    eax,ecx
c00233db:	89 fa                	mov    edx,edi
c00233dd:	ef                   	out    dx,eax
c00233de:	89 f2                	mov    edx,esi
c00233e0:	ed                   	in     eax,dx
c00233e1:	0f b6 c0             	movzx  eax,al
c00233e4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233ea:	74 46                	je     c0023432 <IDE::open(int, int, void*)+0x1e0>
c00233ec:	83 ec 0c             	sub    esp,0xc
c00233ef:	68 6c cc 02 c0       	push   0xc002cc6c
c00233f4:	eb 34                	jmp    c002342a <IDE::open(int, int, void*)+0x1d8>
c00233f6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233ff:	75 17                	jne    c0023418 <IDE::open(int, int, void*)+0x1c6>
c0023401:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023406:	74 07                	je     c002340f <IDE::open(int, int, void*)+0x1bd>
c0023408:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002340d:	75 09                	jne    c0023418 <IDE::open(int, int, void*)+0x1c6>
c002340f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023416:	eb 1a                	jmp    c0023432 <IDE::open(int, int, void*)+0x1e0>
c0023418:	83 ec 0c             	sub    esp,0xc
c002341b:	68 74 cc 02 c0       	push   0xc002cc74
c0023420:	eb 08                	jmp    c002342a <IDE::open(int, int, void*)+0x1d8>
c0023422:	83 ec 0c             	sub    esp,0xc
c0023425:	68 a5 cc 02 c0       	push   0xc002cca5
c002342a:	e8 9e 71 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c002342f:	83 c4 10             	add    esp,0x10
c0023432:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023439:	79 1a                	jns    c0023455 <IDE::open(int, int, void*)+0x203>
c002343b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023441:	83 e0 fc             	and    eax,0xfffffffc
c0023444:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002344b:	83 c0 08             	add    eax,0x8
c002344e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023455:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002345b:	89 c2                	mov    edx,eax
c002345d:	83 e2 0f             	and    edx,0xf
c0023460:	66 83 fa 08          	cmp    dx,0x8
c0023464:	75 0a                	jne    c0023470 <IDE::open(int, int, void*)+0x21e>
c0023466:	83 e8 02             	sub    eax,0x2
c0023469:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023470:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023476:	89 c2                	mov    edx,eax
c0023478:	83 e2 0f             	and    edx,0xf
c002347b:	66 83 fa 08          	cmp    dx,0x8
c002347f:	75 0a                	jne    c002348b <IDE::open(int, int, void*)+0x239>
c0023481:	83 e8 02             	sub    eax,0x2
c0023484:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002348b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023492:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023499:	89 d0                	mov    eax,edx
c002349b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002349e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234a2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234a6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234a9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234ae:	0f b6 c9             	movzx  ecx,cl
c00234b1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234b8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234bb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234bf:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234c3:	8d 50 02             	lea    edx,[eax+0x2]
c00234c6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234cb:	0f b6 d2             	movzx  edx,dl
c00234ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234d4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234d7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234db:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234df:	8d 48 03             	lea    ecx,[eax+0x3]
c00234e2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234e7:	0f b6 c9             	movzx  ecx,cl
c00234ea:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234f0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234f3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234f7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234fb:	8d 50 04             	lea    edx,[eax+0x4]
c00234fe:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023504:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023509:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023510:	66 85 f6             	test   si,si
c0023513:	74 3e                	je     c0023553 <IDE::open(int, int, void*)+0x301>
c0023515:	0f b6 d2             	movzx  edx,dl
c0023518:	83 c0 05             	add    eax,0x5
c002351b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002351e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023522:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023526:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002352c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023531:	eb 20                	jmp    c0023553 <IDE::open(int, int, void*)+0x301>
c0023533:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002353d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023547:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002354e:	e9 02 ff ff ff       	jmp    c0023455 <IDE::open(int, int, void*)+0x203>
c0023553:	52                   	push   edx
c0023554:	52                   	push   edx
c0023555:	6a 00                	push   0x0
c0023557:	53                   	push   ebx
c0023558:	e8 7d fa ff ff       	call   c0022fda <IDE::prepareInterrupt(unsigned char)>
c002355d:	59                   	pop    ecx
c002355e:	5e                   	pop    esi
c002355f:	6a 01                	push   0x1
c0023561:	53                   	push   ebx
c0023562:	e8 73 fa ff ff       	call   c0022fda <IDE::prepareInterrupt(unsigned char)>
c0023567:	83 c4 0c             	add    esp,0xc
c002356a:	6a 00                	push   0x0
c002356c:	6a 00                	push   0x0
c002356e:	53                   	push   ebx
c002356f:	e8 98 fc ff ff       	call   c002320c <IDE::enableIRQs(unsigned char, bool)>
c0023574:	83 c4 0c             	add    esp,0xc
c0023577:	6a 00                	push   0x0
c0023579:	6a 01                	push   0x1
c002357b:	53                   	push   ebx
c002357c:	e8 8b fc ff ff       	call   c002320c <IDE::enableIRQs(unsigned char, bool)>
c0023581:	83 c4 10             	add    esp,0x10
c0023584:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002358b:	74 40                	je     c00235cd <IDE::open(int, int, void*)+0x37b>
c002358d:	83 ec 0c             	sub    esp,0xc
c0023590:	68 cf cc 02 c0       	push   0xc002cccf
c0023595:	e8 92 f9 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c002359a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002359d:	6a 01                	push   0x1
c002359f:	68 d4 31 02 c0       	push   0xc00231d4
c00235a4:	6a 0e                	push   0xe
c00235a6:	53                   	push   ebx
c00235a7:	e8 2a 0d ff ff       	call   c00142d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ac:	83 c4 14             	add    esp,0x14
c00235af:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235b5:	53                   	push   ebx
c00235b6:	6a 01                	push   0x1
c00235b8:	68 f0 31 02 c0       	push   0xc00231f0
c00235bd:	6a 0f                	push   0xf
c00235bf:	53                   	push   ebx
c00235c0:	e8 11 0d ff ff       	call   c00142d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235c5:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235cb:	eb 4a                	jmp    c0023617 <IDE::open(int, int, void*)+0x3c5>
c00235cd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235d7:	50                   	push   eax
c00235d8:	6a 0f                	push   0xf
c00235da:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235e0:	68 eb cc 02 c0       	push   0xc002cceb
c00235e5:	e8 42 f9 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00235ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235ed:	6a 00                	push   0x0
c00235ef:	68 d4 31 02 c0       	push   0xc00231d4
c00235f4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235fa:	53                   	push   ebx
c00235fb:	e8 d6 0c ff ff       	call   c00142d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023600:	83 c4 14             	add    esp,0x14
c0023603:	53                   	push   ebx
c0023604:	6a 00                	push   0x0
c0023606:	68 f0 31 02 c0       	push   0xc00231f0
c002360b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023611:	53                   	push   ebx
c0023612:	e8 bf 0c ff ff       	call   c00142d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023617:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023619:	83 c4 20             	add    esp,0x20
c002361c:	83 ec 0c             	sub    esp,0xc
c002361f:	53                   	push   ebx
c0023620:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023623:	83 c4 0c             	add    esp,0xc
c0023626:	6a 07                	push   0x7
c0023628:	6a 00                	push   0x0
c002362a:	53                   	push   ebx
c002362b:	e8 90 fa ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023630:	83 c4 0c             	add    esp,0xc
c0023633:	6a 07                	push   0x7
c0023635:	6a 01                	push   0x1
c0023637:	53                   	push   ebx
c0023638:	e8 83 fa ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c002363d:	83 c4 0c             	add    esp,0xc
c0023640:	6a 01                	push   0x1
c0023642:	6a 00                	push   0x0
c0023644:	53                   	push   ebx
c0023645:	e8 c2 fb ff ff       	call   c002320c <IDE::enableIRQs(unsigned char, bool)>
c002364a:	83 c4 0c             	add    esp,0xc
c002364d:	6a 01                	push   0x1
c002364f:	6a 01                	push   0x1
c0023651:	53                   	push   ebx
c0023652:	e8 b5 fb ff ff       	call   c002320c <IDE::enableIRQs(unsigned char, bool)>
c0023657:	83 c4 2c             	add    esp,0x2c
c002365a:	31 c0                	xor    eax,eax
c002365c:	5b                   	pop    ebx
c002365d:	5e                   	pop    esi
c002365e:	5f                   	pop    edi
c002365f:	5d                   	pop    ebp
c0023660:	c3                   	ret    
c0023661:	90                   	nop

c0023662 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023662:	55                   	push   ebp
c0023663:	57                   	push   edi
c0023664:	56                   	push   esi
c0023665:	53                   	push   ebx
c0023666:	83 ec 1c             	sub    esp,0x1c
c0023669:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002366d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023671:	8d 50 f8             	lea    edx,[eax-0x8]
c0023674:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023678:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002367c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023680:	80 fa 03             	cmp    dl,0x3
c0023683:	77 5d                	ja     c00236e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023685:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023689:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002368d:	0f b6 db             	movzx  ebx,bl
c0023690:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023693:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023697:	83 ca 80             	or     edx,0xffffff80
c002369a:	0f b6 d2             	movzx  edx,dl
c002369d:	52                   	push   edx
c002369e:	6a 0c                	push   0xc
c00236a0:	53                   	push   ebx
c00236a1:	56                   	push   esi
c00236a2:	e8 59 f9 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236b4:	0f b6 c0             	movzx  eax,al
c00236b7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236bb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236bd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236c2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236ce:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236d6:	83 c4 2c             	add    esp,0x2c
c00236d9:	5b                   	pop    ebx
c00236da:	5e                   	pop    esi
c00236db:	5f                   	pop    edi
c00236dc:	5d                   	pop    ebp
c00236dd:	e9 1e f9 ff ff       	jmp    c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236e2:	3c 07                	cmp    al,0x7
c00236e4:	77 10                	ja     c00236f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236e6:	0f b6 db             	movzx  ebx,bl
c00236e9:	0f b6 d0             	movzx  edx,al
c00236ec:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236f4:	eb 2d                	jmp    c0023723 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236f6:	3c 0d                	cmp    al,0xd
c00236f8:	77 13                	ja     c002370d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236fa:	0f b6 db             	movzx  ebx,bl
c00236fd:	0f b6 c0             	movzx  eax,al
c0023700:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023707:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002370b:	eb 16                	jmp    c0023723 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002370d:	3c 15                	cmp    al,0x15
c002370f:	77 14                	ja     c0023725 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023711:	0f b6 db             	movzx  ebx,bl
c0023714:	0f b6 c0             	movzx  eax,al
c0023717:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002371f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023723:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023725:	83 c4 1c             	add    esp,0x1c
c0023728:	5b                   	pop    ebx
c0023729:	5e                   	pop    esi
c002372a:	5f                   	pop    edi
c002372b:	5d                   	pop    ebp
c002372c:	c3                   	ret    
c002372d:	90                   	nop

c002372e <IDE::detect()>:
c002372e:	55                   	push   ebp
c002372f:	57                   	push   edi
c0023730:	56                   	push   esi
c0023731:	53                   	push   ebx
c0023732:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023738:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002373f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023746:	0f 85 be 02 00 00    	jne    c0023a0a <IDE::detect()+0x2dc>
c002374c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023753:	31 f6                	xor    esi,esi
c0023755:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002375d:	31 ed                	xor    ebp,ebp
c002375f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023763:	c1 e0 06             	shl    eax,0x6
c0023766:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002376e:	89 e8                	mov    eax,ebp
c0023770:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023774:	c1 e0 04             	shl    eax,0x4
c0023777:	83 c8 a0             	or     eax,0xffffffa0
c002377a:	0f b6 c0             	movzx  eax,al
c002377d:	50                   	push   eax
c002377e:	6a 06                	push   0x6
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	e8 79 f8 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023787:	83 c4 0c             	add    esp,0xc
c002378a:	6a 0c                	push   0xc
c002378c:	56                   	push   esi
c002378d:	53                   	push   ebx
c002378e:	e8 2d f9 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023793:	83 c4 0c             	add    esp,0xc
c0023796:	6a 0c                	push   0xc
c0023798:	56                   	push   esi
c0023799:	53                   	push   ebx
c002379a:	e8 21 f9 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c002379f:	83 c4 0c             	add    esp,0xc
c00237a2:	6a 0c                	push   0xc
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	e8 15 f9 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00237ab:	83 c4 0c             	add    esp,0xc
c00237ae:	6a 0c                	push   0xc
c00237b0:	56                   	push   esi
c00237b1:	53                   	push   ebx
c00237b2:	e8 09 f9 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00237b7:	68 ec 00 00 00       	push   0xec
c00237bc:	6a 07                	push   0x7
c00237be:	56                   	push   esi
c00237bf:	53                   	push   ebx
c00237c0:	e8 3b f8 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237c5:	83 c4 1c             	add    esp,0x1c
c00237c8:	6a 0c                	push   0xc
c00237ca:	56                   	push   esi
c00237cb:	53                   	push   ebx
c00237cc:	e8 ef f8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00237d1:	83 c4 0c             	add    esp,0xc
c00237d4:	6a 0c                	push   0xc
c00237d6:	56                   	push   esi
c00237d7:	53                   	push   ebx
c00237d8:	e8 e3 f8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00237dd:	83 c4 0c             	add    esp,0xc
c00237e0:	6a 0c                	push   0xc
c00237e2:	56                   	push   esi
c00237e3:	53                   	push   ebx
c00237e4:	e8 d7 f8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00237e9:	83 c4 0c             	add    esp,0xc
c00237ec:	6a 0c                	push   0xc
c00237ee:	56                   	push   esi
c00237ef:	53                   	push   ebx
c00237f0:	e8 cb f8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00237f5:	83 c4 0c             	add    esp,0xc
c00237f8:	6a 0c                	push   0xc
c00237fa:	56                   	push   esi
c00237fb:	53                   	push   ebx
c00237fc:	e8 bf f8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023801:	83 c4 10             	add    esp,0x10
c0023804:	84 c0                	test   al,al
c0023806:	0f 84 8b 01 00 00    	je     c0023997 <IDE::detect()+0x269>
c002380c:	31 ff                	xor    edi,edi
c002380e:	50                   	push   eax
c002380f:	6a 0c                	push   0xc
c0023811:	56                   	push   esi
c0023812:	53                   	push   ebx
c0023813:	e8 a8 f8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023818:	83 c4 10             	add    esp,0x10
c002381b:	a8 01                	test   al,0x1
c002381d:	0f 85 8e 01 00 00    	jne    c00239b1 <IDE::detect()+0x283>
c0023823:	84 c0                	test   al,al
c0023825:	78 04                	js     c002382b <IDE::detect()+0xfd>
c0023827:	a8 08                	test   al,0x8
c0023829:	75 27                	jne    c0023852 <IDE::detect()+0x124>
c002382b:	47                   	inc    edi
c002382c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023832:	7e da                	jle    c002380e <IDE::detect()+0xe0>
c0023834:	50                   	push   eax
c0023835:	50                   	push   eax
c0023836:	6a 00                	push   0x0
c0023838:	68 40 4b 4c 00       	push   0x4c4b40
c002383d:	e8 00 ab ff ff       	call   c001e342 <nanoSleep(unsigned long long)>
c0023842:	83 c4 10             	add    esp,0x10
c0023845:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002384b:	75 c1                	jne    c002380e <IDE::detect()+0xe0>
c002384d:	e9 5f 01 00 00       	jmp    c00239b1 <IDE::detect()+0x283>
c0023852:	31 c9                	xor    ecx,ecx
c0023854:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023858:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002385c:	83 ec 0c             	sub    esp,0xc
c002385f:	68 80 00 00 00       	push   0x80
c0023864:	57                   	push   edi
c0023865:	6a 00                	push   0x0
c0023867:	56                   	push   esi
c0023868:	53                   	push   ebx
c0023869:	e8 f4 fd ff ff       	call   c0023662 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002386e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023873:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023877:	89 d1                	mov    ecx,edx
c0023879:	c1 e0 06             	shl    eax,0x6
c002387c:	01 d8                	add    eax,ebx
c002387e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023885:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002388c:	89 f2                	mov    edx,esi
c002388e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023894:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023898:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002389e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238a2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238a9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238b1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238b8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238c0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238c6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238cd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238d3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238d7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238db:	83 c4 20             	add    esp,0x20
c00238de:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238e1:	83 c0 02             	add    eax,0x2
c00238e4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238ea:	83 c7 02             	add    edi,0x2
c00238ed:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238f0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238f6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238fa:	75 e2                	jne    c00238de <IDE::detect()+0x1b0>
c00238fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023900:	c1 e0 06             	shl    eax,0x6
c0023903:	01 d8                	add    eax,ebx
c0023905:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002390b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023912:	66 c1 ea 09          	shr    dx,0x9
c0023916:	83 e2 01             	and    edx,0x1
c0023919:	84 c9                	test   cl,cl
c002391b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023921:	75 2f                	jne    c0023952 <IDE::detect()+0x224>
c0023923:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023929:	85 c0                	test   eax,eax
c002392b:	74 66                	je     c0023993 <IDE::detect()+0x265>
c002392d:	50                   	push   eax
c002392e:	55                   	push   ebp
c002392f:	56                   	push   esi
c0023930:	68 07 cd 02 c0       	push   0xc002cd07
c0023935:	e8 f2 f5 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c002393a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023941:	e8 fa be fe ff       	call   c000f840 <malloc>
c0023946:	89 c7                	mov    edi,eax
c0023948:	89 04 24             	mov    DWORD PTR [esp],eax
c002394b:	e8 78 06 00 00       	call   c0023fc8 <ATA::ATA()>
c0023950:	eb 28                	jmp    c002397a <IDE::detect()+0x24c>
c0023952:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023958:	55                   	push   ebp
c0023959:	56                   	push   esi
c002395a:	68 36 cd 02 c0       	push   0xc002cd36
c002395f:	e8 c8 f5 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023964:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002396b:	e8 d0 be fe ff       	call   c000f840 <malloc>
c0023970:	89 c7                	mov    edi,eax
c0023972:	89 04 24             	mov    DWORD PTR [esp],eax
c0023975:	e8 8e 0c 00 00       	call   c0024608 <ATAPI::ATAPI()>
c002397a:	5a                   	pop    edx
c002397b:	59                   	pop    ecx
c002397c:	57                   	push   edi
c002397d:	53                   	push   ebx
c002397e:	e8 cf 09 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0023983:	8b 07                	mov    eax,DWORD PTR [edi]
c0023985:	53                   	push   ebx
c0023986:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002398a:	6a 00                	push   0x0
c002398c:	57                   	push   edi
c002398d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023990:	83 c4 20             	add    esp,0x20
c0023993:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023997:	4d                   	dec    ebp
c0023998:	74 0a                	je     c00239a4 <IDE::detect()+0x276>
c002399a:	bd 01 00 00 00       	mov    ebp,0x1
c002399f:	e9 bb fd ff ff       	jmp    c002375f <IDE::detect()+0x31>
c00239a4:	4e                   	dec    esi
c00239a5:	74 63                	je     c0023a0a <IDE::detect()+0x2dc>
c00239a7:	be 01 00 00 00       	mov    esi,0x1
c00239ac:	e9 ac fd ff ff       	jmp    c002375d <IDE::detect()+0x2f>
c00239b1:	50                   	push   eax
c00239b2:	6a 04                	push   0x4
c00239b4:	56                   	push   esi
c00239b5:	53                   	push   ebx
c00239b6:	e8 05 f7 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00239bb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239bf:	83 c4 0c             	add    esp,0xc
c00239c2:	6a 05                	push   0x5
c00239c4:	56                   	push   esi
c00239c5:	53                   	push   ebx
c00239c6:	e8 f5 f6 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c00239cb:	83 c4 10             	add    esp,0x10
c00239ce:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239d2:	80 fa 14             	cmp    dl,0x14
c00239d5:	75 04                	jne    c00239db <IDE::detect()+0x2ad>
c00239d7:	3c eb                	cmp    al,0xeb
c00239d9:	eb 07                	jmp    c00239e2 <IDE::detect()+0x2b4>
c00239db:	3c 96                	cmp    al,0x96
c00239dd:	75 b8                	jne    c0023997 <IDE::detect()+0x269>
c00239df:	80 fa 69             	cmp    dl,0x69
c00239e2:	75 b3                	jne    c0023997 <IDE::detect()+0x269>
c00239e4:	68 a1 00 00 00       	push   0xa1
c00239e9:	6a 07                	push   0x7
c00239eb:	56                   	push   esi
c00239ec:	53                   	push   ebx
c00239ed:	e8 0e f6 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239f2:	5f                   	pop    edi
c00239f3:	58                   	pop    eax
c00239f4:	6a 00                	push   0x0
c00239f6:	68 40 42 0f 00       	push   0xf4240
c00239fb:	e8 42 a9 ff ff       	call   c001e342 <nanoSleep(unsigned long long)>
c0023a00:	83 c4 10             	add    esp,0x10
c0023a03:	b1 01                	mov    cl,0x1
c0023a05:	e9 4a fe ff ff       	jmp    c0023854 <IDE::detect()+0x126>
c0023a0a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a10:	5b                   	pop    ebx
c0023a11:	5e                   	pop    esi
c0023a12:	5f                   	pop    edi
c0023a13:	5d                   	pop    ebp
c0023a14:	c3                   	ret    
c0023a15:	90                   	nop

c0023a16 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a16:	55                   	push   ebp
c0023a17:	57                   	push   edi
c0023a18:	56                   	push   esi
c0023a19:	53                   	push   ebx
c0023a1a:	83 ec 1c             	sub    esp,0x1c
c0023a1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a25:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a29:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a2d:	88 c3                	mov    bl,al
c0023a2f:	84 c0                	test   al,al
c0023a31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a35:	0f 84 67 01 00 00    	je     c0023ba2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a3b:	83 ec 0c             	sub    esp,0xc
c0023a3e:	68 67 cd 02 c0       	push   0xc002cd67
c0023a43:	e8 e4 f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023a48:	83 c4 10             	add    esp,0x10
c0023a4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a4f:	3c 01                	cmp    al,0x1
c0023a51:	75 17                	jne    c0023a6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a53:	83 ec 0c             	sub    esp,0xc
c0023a56:	b3 13                	mov    bl,0x13
c0023a58:	68 73 cd 02 c0       	push   0xc002cd73
c0023a5d:	e8 ca f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023a62:	83 c4 10             	add    esp,0x10
c0023a65:	e9 25 01 00 00       	jmp    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a6a:	3c 02                	cmp    al,0x2
c0023a6c:	0f 85 ef 00 00 00    	jne    c0023b61 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a72:	d1 e6                	shl    esi,1
c0023a74:	09 ee                	or     esi,ebp
c0023a76:	52                   	push   edx
c0023a77:	89 f0                	mov    eax,esi
c0023a79:	6a 01                	push   0x1
c0023a7b:	0f b6 f0             	movzx  esi,al
c0023a7e:	c1 e6 06             	shl    esi,0x6
c0023a81:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a89:	50                   	push   eax
c0023a8a:	57                   	push   edi
c0023a8b:	e8 30 f6 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023a90:	83 c4 10             	add    esp,0x10
c0023a93:	89 c6                	mov    esi,eax
c0023a95:	a8 01                	test   al,0x1
c0023a97:	74 12                	je     c0023aab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a99:	83 ec 0c             	sub    esp,0xc
c0023a9c:	b3 07                	mov    bl,0x7
c0023a9e:	68 88 cd 02 c0       	push   0xc002cd88
c0023aa3:	e8 84 f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023aa8:	83 c4 10             	add    esp,0x10
c0023aab:	f7 c6 02 00 00 00    	test   esi,0x2
c0023ab1:	74 12                	je     c0023ac5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023ab3:	83 ec 0c             	sub    esp,0xc
c0023ab6:	b3 03                	mov    bl,0x3
c0023ab8:	68 a6 cd 02 c0       	push   0xc002cda6
c0023abd:	e8 6a f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023ac2:	83 c4 10             	add    esp,0x10
c0023ac5:	f7 c6 04 00 00 00    	test   esi,0x4
c0023acb:	74 12                	je     c0023adf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023acd:	83 ec 0c             	sub    esp,0xc
c0023ad0:	b3 14                	mov    bl,0x14
c0023ad2:	68 c6 cd 02 c0       	push   0xc002cdc6
c0023ad7:	e8 50 f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023adc:	83 c4 10             	add    esp,0x10
c0023adf:	f7 c6 08 00 00 00    	test   esi,0x8
c0023ae5:	74 12                	je     c0023af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023ae7:	83 ec 0c             	sub    esp,0xc
c0023aea:	b3 03                	mov    bl,0x3
c0023aec:	68 a6 cd 02 c0       	push   0xc002cda6
c0023af1:	e8 36 f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023af6:	83 c4 10             	add    esp,0x10
c0023af9:	f7 c6 10 00 00 00    	test   esi,0x10
c0023aff:	74 12                	je     c0023b13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b01:	83 ec 0c             	sub    esp,0xc
c0023b04:	b3 15                	mov    bl,0x15
c0023b06:	68 de cd 02 c0       	push   0xc002cdde
c0023b0b:	e8 1c f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023b10:	83 c4 10             	add    esp,0x10
c0023b13:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b19:	74 12                	je     c0023b2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b1b:	83 ec 0c             	sub    esp,0xc
c0023b1e:	b3 03                	mov    bl,0x3
c0023b20:	68 a6 cd 02 c0       	push   0xc002cda6
c0023b25:	e8 02 f4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023b2a:	83 c4 10             	add    esp,0x10
c0023b2d:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b33:	74 12                	je     c0023b47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b35:	83 ec 0c             	sub    esp,0xc
c0023b38:	b3 16                	mov    bl,0x16
c0023b3a:	68 f8 cd 02 c0       	push   0xc002cdf8
c0023b3f:	e8 e8 f3 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023b44:	83 c4 10             	add    esp,0x10
c0023b47:	89 f0                	mov    eax,esi
c0023b49:	84 c0                	test   al,al
c0023b4b:	79 42                	jns    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b4d:	83 ec 0c             	sub    esp,0xc
c0023b50:	b3 0d                	mov    bl,0xd
c0023b52:	68 19 ce 02 c0       	push   0xc002ce19
c0023b57:	e8 d0 f3 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023b5c:	83 c4 10             	add    esp,0x10
c0023b5f:	eb 2e                	jmp    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b61:	3c 03                	cmp    al,0x3
c0023b63:	75 14                	jne    c0023b79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b65:	83 ec 0c             	sub    esp,0xc
c0023b68:	b3 17                	mov    bl,0x17
c0023b6a:	68 2d ce 02 c0       	push   0xc002ce2d
c0023b6f:	e8 b8 f3 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023b74:	83 c4 10             	add    esp,0x10
c0023b77:	eb 16                	jmp    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b79:	3c 04                	cmp    al,0x4
c0023b7b:	75 12                	jne    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	b3 08                	mov    bl,0x8
c0023b82:	68 43 ce 02 c0       	push   0xc002ce43
c0023b87:	e8 a0 f3 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	50                   	push   eax
c0023b90:	50                   	push   eax
c0023b91:	0f b6 c3             	movzx  eax,bl
c0023b94:	50                   	push   eax
c0023b95:	68 5b ce 02 c0       	push   0xc002ce5b
c0023b9a:	e8 8d f3 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023b9f:	83 c4 10             	add    esp,0x10
c0023ba2:	83 c4 1c             	add    esp,0x1c
c0023ba5:	88 d8                	mov    al,bl
c0023ba7:	5b                   	pop    ebx
c0023ba8:	5e                   	pop    esi
c0023ba9:	5f                   	pop    edi
c0023baa:	5d                   	pop    ebp
c0023bab:	c3                   	ret    

c0023bac <IDE::polling(unsigned char, unsigned int)>:
c0023bac:	57                   	push   edi
c0023bad:	56                   	push   esi
c0023bae:	53                   	push   ebx
c0023baf:	bb 04 00 00 00       	mov    ebx,0x4
c0023bb4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023bb8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023bbd:	52                   	push   edx
c0023bbe:	6a 0c                	push   0xc
c0023bc0:	56                   	push   esi
c0023bc1:	57                   	push   edi
c0023bc2:	e8 f9 f4 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023bc7:	83 c4 10             	add    esp,0x10
c0023bca:	4b                   	dec    ebx
c0023bcb:	75 f0                	jne    c0023bbd <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bcd:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bd2:	50                   	push   eax
c0023bd3:	6a 0c                	push   0xc
c0023bd5:	56                   	push   esi
c0023bd6:	57                   	push   edi
c0023bd7:	e8 e4 f4 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0023bdc:	83 c4 10             	add    esp,0x10
c0023bdf:	a8 01                	test   al,0x1
c0023be1:	74 12                	je     c0023bf5 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023be3:	83 ec 0c             	sub    esp,0xc
c0023be6:	68 75 ce 02 c0       	push   0xc002ce75
c0023beb:	e8 3c f3 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023bf0:	83 c4 10             	add    esp,0x10
c0023bf3:	eb 17                	jmp    c0023c0c <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bf5:	a8 20                	test   al,0x20
c0023bf7:	75 0f                	jne    c0023c08 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bf9:	4b                   	dec    ebx
c0023bfa:	74 10                	je     c0023c0c <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bfc:	84 c0                	test   al,al
c0023bfe:	78 d2                	js     c0023bd2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c00:	a8 08                	test   al,0x8
c0023c02:	74 ce                	je     c0023bd2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c04:	31 c0                	xor    eax,eax
c0023c06:	eb 06                	jmp    c0023c0e <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c08:	b0 01                	mov    al,0x1
c0023c0a:	eb 02                	jmp    c0023c0e <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c0c:	b0 02                	mov    al,0x2
c0023c0e:	5b                   	pop    ebx
c0023c0f:	5e                   	pop    esi
c0023c10:	5f                   	pop    edi
c0023c11:	c3                   	ret    

c0023c12 <SATABus::close(int, int, void*)>:
c0023c12:	31 c0                	xor    eax,eax
c0023c14:	c3                   	ret    
c0023c15:	90                   	nop

c0023c16 <SATABus::detect()>:
c0023c16:	c3                   	ret    
c0023c17:	90                   	nop

c0023c18 <SATABus::SATABus()>:
c0023c18:	83 ec 0c             	sub    esp,0xc
c0023c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1f:	83 ec 08             	sub    esp,0x8
c0023c22:	68 b8 ce 02 c0       	push   0xc002ceb8
c0023c27:	50                   	push   eax
c0023c28:	e8 b1 0a ff ff       	call   c00146de <HardDiskController::HardDiskController(char const*)>
c0023c2d:	83 c4 10             	add    esp,0x10
c0023c30:	ba 74 cf 02 c0       	mov    edx,0xc002cf74
c0023c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c39:	89 10                	mov    DWORD PTR [eax],edx
c0023c3b:	83 ec 0c             	sub    esp,0xc
c0023c3e:	6a 50                	push   0x50
c0023c40:	e8 cc c3 fe ff       	call   c0010011 <Phys::allocateContiguousPages(int)>
c0023c45:	83 c4 10             	add    esp,0x10
c0023c48:	89 c2                	mov    edx,eax
c0023c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c54:	83 ec 0c             	sub    esp,0xc
c0023c57:	6a 50                	push   0x50
c0023c59:	e8 2d df fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0023c5e:	83 c4 10             	add    esp,0x10
c0023c61:	89 c2                	mov    edx,eax
c0023c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c6d:	e8 b4 e1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0023c72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c76:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c80:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c86:	83 ec 0c             	sub    esp,0xc
c0023c89:	6a 03                	push   0x3
c0023c8b:	6a 50                	push   0x50
c0023c8d:	51                   	push   ecx
c0023c8e:	52                   	push   edx
c0023c8f:	50                   	push   eax
c0023c90:	e8 c1 e9 fe ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c95:	83 c4 20             	add    esp,0x20
c0023c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c9c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cac:	83 ec 04             	sub    esp,0x4
c0023caf:	52                   	push   edx
c0023cb0:	50                   	push   eax
c0023cb1:	68 dc ce 02 c0       	push   0xc002cedc
c0023cb6:	e8 71 f2 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023cbb:	83 c4 10             	add    esp,0x10
c0023cbe:	90                   	nop
c0023cbf:	83 c4 0c             	add    esp,0xc
c0023cc2:	c3                   	ret    
c0023cc3:	90                   	nop

c0023cc4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cc4:	83 ec 0c             	sub    esp,0xc
c0023cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ccb:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cd1:	09 c2                	or     edx,eax
c0023cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023cdf:	31 c0                	xor    eax,eax
c0023ce1:	c1 e9 08             	shr    ecx,0x8
c0023ce4:	83 e1 0f             	and    ecx,0xf
c0023ce7:	39 c8                	cmp    eax,ecx
c0023ce9:	74 0a                	je     c0023cf5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023ceb:	f6 c2 01             	test   dl,0x1
c0023cee:	74 18                	je     c0023d08 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cf0:	d1 ea                	shr    edx,1
c0023cf2:	40                   	inc    eax
c0023cf3:	eb f2                	jmp    c0023ce7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cf5:	83 ec 0c             	sub    esp,0xc
c0023cf8:	68 00 cf 02 c0       	push   0xc002cf00
c0023cfd:	e8 cb 68 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0023d02:	83 c4 10             	add    esp,0x10
c0023d05:	83 c8 ff             	or     eax,0xffffffff
c0023d08:	83 c4 0c             	add    esp,0xc
c0023d0b:	c3                   	ret    

c0023d0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d10:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d13:	89 c2                	mov    edx,eax
c0023d15:	c1 ea 08             	shr    edx,0x8
c0023d18:	83 e2 0f             	and    edx,0xf
c0023d1b:	fe ca                	dec    dl
c0023d1d:	75 31                	jne    c0023d50 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d1f:	83 e0 0f             	and    eax,0xf
c0023d22:	3c 03                	cmp    al,0x3
c0023d24:	75 2a                	jne    c0023d50 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d26:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d29:	b8 02 00 00 00       	mov    eax,0x2
c0023d2e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d34:	74 1c                	je     c0023d52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d36:	b8 04 00 00 00       	mov    eax,0x4
c0023d3b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d41:	74 0f                	je     c0023d52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d43:	31 c0                	xor    eax,eax
c0023d45:	83 fa 03             	cmp    edx,0x3
c0023d48:	0f 94 c0             	sete   al
c0023d4b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d4f:	c3                   	ret    
c0023d50:	31 c0                	xor    eax,eax
c0023d52:	c3                   	ret    
c0023d53:	90                   	nop

c0023d54 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d5b:	0f ba e2 0f          	bt     edx,0xf
c0023d5f:	72 f7                	jb     c0023d58 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d61:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d64:	83 ca 10             	or     edx,0x10
c0023d67:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d6d:	83 ca 01             	or     edx,0x1
c0023d70:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d73:	c3                   	ret    

c0023d74 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d78:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7b:	83 e2 fe             	and    edx,0xfffffffe
c0023d7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d81:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d84:	83 e2 ef             	and    edx,0xffffffef
c0023d87:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d8d:	0f ba e2 0e          	bt     edx,0xe
c0023d91:	72 f7                	jb     c0023d8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d93:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d96:	0f ba e2 0f          	bt     edx,0xf
c0023d9a:	72 ee                	jb     c0023d8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d9c:	c3                   	ret    
c0023d9d:	90                   	nop

c0023d9e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d9e:	55                   	push   ebp
c0023d9f:	57                   	push   edi
c0023da0:	56                   	push   esi
c0023da1:	53                   	push   ebx
c0023da2:	83 ec 1c             	sub    esp,0x1c
c0023da5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023da9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023dad:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023db1:	53                   	push   ebx
c0023db2:	89 fd                	mov    ebp,edi
c0023db4:	56                   	push   esi
c0023db5:	c1 e5 0a             	shl    ebp,0xa
c0023db8:	e8 b7 ff ff ff       	call   c0023d74 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023dbd:	83 ec 0c             	sub    esp,0xc
c0023dc0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023dc6:	01 e8                	add    eax,ebp
c0023dc8:	89 03                	mov    DWORD PTR [ebx],eax
c0023dca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dcc:	68 00 04 00 00       	push   0x400
c0023dd1:	6a 00                	push   0x0
c0023dd3:	50                   	push   eax
c0023dd4:	e8 9f c9 fd ff       	call   c0000778 <memset>
c0023dd9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ddf:	89 fa                	mov    edx,edi
c0023de1:	01 e8                	add    eax,ebp
c0023de3:	c1 e7 0d             	shl    edi,0xd
c0023de6:	89 03                	mov    DWORD PTR [ebx],eax
c0023de8:	c1 e2 08             	shl    edx,0x8
c0023deb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023df2:	81 c2 00 80 00 00    	add    edx,0x8000
c0023df8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023dfc:	89 d0                	mov    eax,edx
c0023dfe:	83 c4 1c             	add    esp,0x1c
c0023e01:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e0a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e0d:	68 00 01 00 00       	push   0x100
c0023e12:	6a 00                	push   0x0
c0023e14:	50                   	push   eax
c0023e15:	e8 5e c9 fd ff       	call   c0000778 <memset>
c0023e1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e1e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e24:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e2e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e31:	83 c4 10             	add    esp,0x10
c0023e34:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e3b:	31 ff                	xor    edi,edi
c0023e3d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e43:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e4d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e53:	83 c5 20             	add    ebp,0x20
c0023e56:	01 f8                	add    eax,edi
c0023e58:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e5b:	52                   	push   edx
c0023e5c:	68 00 01 00 00       	push   0x100
c0023e61:	6a 00                	push   0x0
c0023e63:	50                   	push   eax
c0023e64:	e8 0f c9 fd ff       	call   c0000778 <memset>
c0023e69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e6d:	83 c4 10             	add    esp,0x10
c0023e70:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e76:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e7d:	01 f8                	add    eax,edi
c0023e7f:	81 c7 00 01 00 00    	add    edi,0x100
c0023e85:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e88:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e8e:	75 b3                	jne    c0023e43 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e90:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e94:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e98:	83 c4 1c             	add    esp,0x1c
c0023e9b:	5b                   	pop    ebx
c0023e9c:	5e                   	pop    esi
c0023e9d:	5f                   	pop    edi
c0023e9e:	5d                   	pop    ebp
c0023e9f:	e9 b0 fe ff ff       	jmp    c0023d54 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ea4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ea4:	55                   	push   ebp
c0023ea5:	57                   	push   edi
c0023ea6:	56                   	push   esi
c0023ea7:	53                   	push   ebx
c0023ea8:	31 db                	xor    ebx,ebx
c0023eaa:	83 ec 0c             	sub    esp,0xc
c0023ead:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023eb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023eb5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023eb8:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ebe:	0f 84 aa 00 00 00    	je     c0023f6e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ec4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ec8:	89 d8                	mov    eax,ebx
c0023eca:	c1 e0 07             	shl    eax,0x7
c0023ecd:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023ed4:	55                   	push   ebp
c0023ed5:	56                   	push   esi
c0023ed6:	e8 31 fe ff ff       	call   c0023d0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023edb:	5a                   	pop    edx
c0023edc:	83 f8 01             	cmp    eax,0x1
c0023edf:	59                   	pop    ecx
c0023ee0:	75 30                	jne    c0023f12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ee2:	50                   	push   eax
c0023ee3:	50                   	push   eax
c0023ee4:	53                   	push   ebx
c0023ee5:	68 25 cf 02 c0       	push   0xc002cf25
c0023eea:	e8 3d f0 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023eef:	83 c4 0c             	add    esp,0xc
c0023ef2:	53                   	push   ebx
c0023ef3:	55                   	push   ebp
c0023ef4:	56                   	push   esi
c0023ef5:	e8 a4 fe ff ff       	call   c0023d9e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023efa:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f01:	e8 3a b9 fe ff       	call   c000f840 <malloc>
c0023f06:	89 c5                	mov    ebp,eax
c0023f08:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f0b:	e8 60 0d 00 00       	call   c0024c70 <SATA::SATA()>
c0023f10:	eb 33                	jmp    c0023f45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f12:	83 f8 04             	cmp    eax,0x4
c0023f15:	75 47                	jne    c0023f5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f17:	50                   	push   eax
c0023f18:	50                   	push   eax
c0023f19:	53                   	push   ebx
c0023f1a:	68 3c cf 02 c0       	push   0xc002cf3c
c0023f1f:	e8 08 f0 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023f24:	83 c4 0c             	add    esp,0xc
c0023f27:	53                   	push   ebx
c0023f28:	55                   	push   ebp
c0023f29:	56                   	push   esi
c0023f2a:	e8 6f fe ff ff       	call   c0023d9e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f2f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f36:	e8 05 b9 fe ff       	call   c000f840 <malloc>
c0023f3b:	89 c5                	mov    ebp,eax
c0023f3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f40:	e8 d7 10 00 00       	call   c002501c <SATAPI::SATAPI()>
c0023f45:	5a                   	pop    edx
c0023f46:	59                   	pop    ecx
c0023f47:	55                   	push   ebp
c0023f48:	56                   	push   esi
c0023f49:	e8 04 04 ff ff       	call   c0014352 <Device::addChild(Device*)>
c0023f4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f51:	56                   	push   esi
c0023f52:	6a 00                	push   0x0
c0023f54:	53                   	push   ebx
c0023f55:	55                   	push   ebp
c0023f56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f59:	83 c4 20             	add    esp,0x20
c0023f5c:	eb 10                	jmp    c0023f6e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f5e:	50                   	push   eax
c0023f5f:	50                   	push   eax
c0023f60:	53                   	push   ebx
c0023f61:	68 55 cf 02 c0       	push   0xc002cf55
c0023f66:	e8 c1 ef fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0023f6b:	83 c4 10             	add    esp,0x10
c0023f6e:	d1 ef                	shr    edi,1
c0023f70:	43                   	inc    ebx
c0023f71:	83 fb 20             	cmp    ebx,0x20
c0023f74:	0f 85 3e ff ff ff    	jne    c0023eb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f7a:	83 c4 0c             	add    esp,0xc
c0023f7d:	5b                   	pop    ebx
c0023f7e:	5e                   	pop    esi
c0023f7f:	5f                   	pop    edi
c0023f80:	5d                   	pop    ebp
c0023f81:	c3                   	ret    

c0023f82 <SATABus::open(int, int, void*)>:
c0023f82:	83 ec 14             	sub    esp,0x14
c0023f85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f89:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f8f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f95:	52                   	push   edx
c0023f96:	50                   	push   eax
c0023f97:	e8 08 ff ff ff       	call   c0023ea4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f9c:	31 c0                	xor    eax,eax
c0023f9e:	83 c4 1c             	add    esp,0x1c
c0023fa1:	c3                   	ret    

c0023fa2 <ATA::close(int, int, void*)>:
c0023fa2:	83 ec 0c             	sub    esp,0xc
c0023fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fa9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023faf:	85 c0                	test   eax,eax
c0023fb1:	74 0c                	je     c0023fbf <ATA::close(int, int, void*)+0x1d>
c0023fb3:	83 ec 0c             	sub    esp,0xc
c0023fb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fb8:	50                   	push   eax
c0023fb9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fbc:	83 c4 10             	add    esp,0x10
c0023fbf:	31 c0                	xor    eax,eax
c0023fc1:	83 c4 0c             	add    esp,0xc
c0023fc4:	c3                   	ret    
c0023fc5:	90                   	nop

c0023fc6 <ATA::powerSaving(PowerSavingLevel)>:
c0023fc6:	c3                   	ret    
c0023fc7:	90                   	nop

c0023fc8 <ATA::ATA()>:
c0023fc8:	83 ec 0c             	sub    esp,0xc
c0023fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fcf:	83 ec 04             	sub    esp,0x4
c0023fd2:	68 00 02 00 00       	push   0x200
c0023fd7:	68 3d d0 02 c0       	push   0xc002d03d
c0023fdc:	50                   	push   eax
c0023fdd:	e8 94 07 ff ff       	call   c0014776 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fe2:	83 c4 10             	add    esp,0x10
c0023fe5:	ba c0 cf 02 c0       	mov    edx,0xc002cfc0
c0023fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fee:	89 10                	mov    DWORD PTR [eax],edx
c0023ff0:	90                   	nop
c0023ff1:	83 c4 0c             	add    esp,0xc
c0023ff4:	c3                   	ret    
c0023ff5:	90                   	nop

c0023ff6 <ATA::flush(bool)>:
c0023ff6:	53                   	push   ebx
c0023ff7:	83 ec 08             	sub    esp,0x8
c0023ffa:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024003:	19 c0                	sbb    eax,eax
c0024005:	83 e0 fd             	and    eax,0xfffffffd
c0024008:	05 ea 00 00 00       	add    eax,0xea
c002400d:	50                   	push   eax
c002400e:	6a 07                	push   0x7
c0024010:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024017:	50                   	push   eax
c0024018:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401e:	e8 dd ef ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024023:	83 c4 0c             	add    esp,0xc
c0024026:	6a 00                	push   0x0
c0024028:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002402f:	50                   	push   eax
c0024030:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024036:	e8 71 fb ff ff       	call   c0023bac <IDE::polling(unsigned char, unsigned int)>
c002403b:	83 c4 18             	add    esp,0x18
c002403e:	5b                   	pop    ebx
c002403f:	c3                   	ret    

c0024040 <ATA::readyForCommand()>:
c0024040:	56                   	push   esi
c0024041:	53                   	push   ebx
c0024042:	31 db                	xor    ebx,ebx
c0024044:	50                   	push   eax
c0024045:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024049:	50                   	push   eax
c002404a:	6a 0c                	push   0xc
c002404c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024053:	50                   	push   eax
c0024054:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002405a:	e8 61 f0 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c002405f:	83 c4 10             	add    esp,0x10
c0024062:	a8 88                	test   al,0x88
c0024064:	74 23                	je     c0024089 <ATA::readyForCommand()+0x49>
c0024066:	43                   	inc    ebx
c0024067:	83 fb 63             	cmp    ebx,0x63
c002406a:	7e dd                	jle    c0024049 <ATA::readyForCommand()+0x9>
c002406c:	51                   	push   ecx
c002406d:	51                   	push   ecx
c002406e:	6a 00                	push   0x0
c0024070:	68 40 42 0f 00       	push   0xf4240
c0024075:	e8 c8 a2 ff ff       	call   c001e342 <nanoSleep(unsigned long long)>
c002407a:	83 c4 10             	add    esp,0x10
c002407d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024083:	75 c4                	jne    c0024049 <ATA::readyForCommand()+0x9>
c0024085:	31 c0                	xor    eax,eax
c0024087:	eb 02                	jmp    c002408b <ATA::readyForCommand()+0x4b>
c0024089:	b0 01                	mov    al,0x1
c002408b:	5a                   	pop    edx
c002408c:	5b                   	pop    ebx
c002408d:	5e                   	pop    esi
c002408e:	c3                   	ret    
c002408f:	90                   	nop

c0024090 <ATA::access(unsigned long long, int, void*, bool)>:
c0024090:	55                   	push   ebp
c0024091:	57                   	push   edi
c0024092:	56                   	push   esi
c0024093:	53                   	push   ebx
c0024094:	83 ec 2c             	sub    esp,0x2c
c0024097:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002409b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002409f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240a7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240b3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240bd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240c7:	c1 e0 06             	shl    eax,0x6
c00240ca:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240d2:	74 5d                	je     c0024131 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240d4:	89 fa                	mov    edx,edi
c00240d6:	89 f0                	mov    eax,esi
c00240d8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240dc:	c1 ea 1c             	shr    edx,0x1c
c00240df:	89 d1                	mov    ecx,edx
c00240e1:	09 c1                	or     ecx,eax
c00240e3:	74 25                	je     c002410a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240e5:	31 ed                	xor    ebp,ebp
c00240e7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240ee:	89 fa                	mov    edx,edi
c00240f0:	89 f0                	mov    eax,esi
c00240f2:	0f ad d0             	shrd   eax,edx,cl
c00240f5:	d3 ea                	shr    edx,cl
c00240f7:	f6 c1 20             	test   cl,0x20
c00240fa:	74 02                	je     c00240fe <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240fc:	89 d0                	mov    eax,edx
c00240fe:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024102:	45                   	inc    ebp
c0024103:	83 fd 06             	cmp    ebp,0x6
c0024106:	75 df                	jne    c00240e7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024108:	eb 76                	jmp    c0024180 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002410a:	89 f0                	mov    eax,esi
c002410c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024111:	89 fa                	mov    edx,edi
c0024113:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002411a:	0f ac d0 10          	shrd   eax,edx,0x10
c002411e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024123:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024127:	c1 ee 18             	shr    esi,0x18
c002412a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002412f:	eb 56                	jmp    c0024187 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024131:	6a 00                	push   0x0
c0024133:	6a 3f                	push   0x3f
c0024135:	57                   	push   edi
c0024136:	56                   	push   esi
c0024137:	e8 90 29 00 00       	call   c0026acc <__umoddi3>
c002413c:	83 c4 10             	add    esp,0x10
c002413f:	40                   	inc    eax
c0024140:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024144:	6a 00                	push   0x0
c0024146:	68 f0 03 00 00       	push   0x3f0
c002414b:	57                   	push   edi
c002414c:	56                   	push   esi
c002414d:	e8 7a 28 00 00       	call   c00269cc <__udivdi3>
c0024152:	83 c4 10             	add    esp,0x10
c0024155:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002415a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024161:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024166:	6a 00                	push   0x0
c0024168:	6a 3f                	push   0x3f
c002416a:	57                   	push   edi
c002416b:	56                   	push   esi
c002416c:	e8 5b 28 00 00       	call   c00269cc <__udivdi3>
c0024171:	83 c4 10             	add    esp,0x10
c0024174:	89 c6                	mov    esi,eax
c0024176:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002417b:	83 e6 0f             	and    esi,0xf
c002417e:	eb 07                	jmp    c0024187 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024180:	31 f6                	xor    esi,esi
c0024182:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024187:	bf 01 00 00 00       	mov    edi,0x1
c002418c:	50                   	push   eax
c002418d:	6a 00                	push   0x0
c002418f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024196:	50                   	push   eax
c0024197:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002419b:	e8 6c f0 ff ff       	call   c002320c <IDE::enableIRQs(unsigned char, bool)>
c00241a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241a3:	e8 98 fe ff ff       	call   c0024040 <ATA::readyForCommand()>
c00241a8:	83 c4 10             	add    esp,0x10
c00241ab:	84 c0                	test   al,al
c00241ad:	0f 84 5a 02 00 00    	je     c002440d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241b3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241b9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241bf:	c1 e0 04             	shl    eax,0x4
c00241c2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241c9:	09 c6                	or     esi,eax
c00241cb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241d0:	75 05                	jne    c00241d7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241d2:	83 ce a0             	or     esi,0xffffffa0
c00241d5:	eb 03                	jmp    c00241da <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241d7:	83 ce e0             	or     esi,0xffffffe0
c00241da:	89 f0                	mov    eax,esi
c00241dc:	0f b6 f0             	movzx  esi,al
c00241df:	56                   	push   esi
c00241e0:	6a 06                	push   0x6
c00241e2:	51                   	push   ecx
c00241e3:	52                   	push   edx
c00241e4:	e8 17 ee ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e9:	83 c4 10             	add    esp,0x10
c00241ec:	6a 00                	push   0x0
c00241ee:	6a 01                	push   0x1
c00241f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f7:	50                   	push   eax
c00241f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241fe:	e8 fd ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024203:	83 c4 10             	add    esp,0x10
c0024206:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002420b:	75 6e                	jne    c002427b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002420d:	6a 00                	push   0x0
c002420f:	6a 08                	push   0x8
c0024211:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024218:	50                   	push   eax
c0024219:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421f:	e8 dc ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024224:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024229:	50                   	push   eax
c002422a:	6a 09                	push   0x9
c002422c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024233:	50                   	push   eax
c0024234:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423a:	e8 c1 ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002423f:	83 c4 20             	add    esp,0x20
c0024242:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024247:	50                   	push   eax
c0024248:	6a 0a                	push   0xa
c002424a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024251:	50                   	push   eax
c0024252:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024258:	e8 a3 ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024262:	50                   	push   eax
c0024263:	6a 0b                	push   0xb
c0024265:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002426c:	50                   	push   eax
c002426d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024273:	e8 88 ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024278:	83 c4 20             	add    esp,0x20
c002427b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024280:	50                   	push   eax
c0024281:	6a 02                	push   0x2
c0024283:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002428a:	50                   	push   eax
c002428b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024291:	e8 6a ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024296:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002429b:	50                   	push   eax
c002429c:	6a 03                	push   0x3
c002429e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a5:	50                   	push   eax
c00242a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ac:	e8 4f ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b1:	83 c4 20             	add    esp,0x20
c00242b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242b9:	50                   	push   eax
c00242ba:	6a 04                	push   0x4
c00242bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c3:	50                   	push   eax
c00242c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ca:	e8 31 ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242d4:	50                   	push   eax
c00242d5:	6a 05                	push   0x5
c00242d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242de:	50                   	push   eax
c00242df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e5:	e8 16 ed ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ea:	83 c4 20             	add    esp,0x20
c00242ed:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242f2:	0f 94 c0             	sete   al
c00242f5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242fa:	74 09                	je     c0024305 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242fc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024303:	eb 07                	jmp    c002430c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024305:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002430c:	0f b6 c0             	movzx  eax,al
c002430f:	50                   	push   eax
c0024310:	6a 07                	push   0x7
c0024312:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024319:	50                   	push   eax
c002431a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024320:	e8 db ec ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024325:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024329:	83 c4 10             	add    esp,0x10
c002432c:	85 f6                	test   esi,esi
c002432e:	0f 84 ba 00 00 00    	je     c00243ee <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024334:	50                   	push   eax
c0024335:	6a 01                	push   0x1
c0024337:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433e:	50                   	push   eax
c002433f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024345:	e8 62 f8 ff ff       	call   c0023bac <IDE::polling(unsigned char, unsigned int)>
c002434a:	83 c4 10             	add    esp,0x10
c002434d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024353:	84 c0                	test   al,al
c0024355:	74 2c                	je     c0024383 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024357:	0f b6 f8             	movzx  edi,al
c002435a:	0f b6 d2             	movzx  edx,dl
c002435d:	57                   	push   edi
c002435e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024365:	50                   	push   eax
c0024366:	52                   	push   edx
c0024367:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002436d:	e8 a4 f6 ff ff       	call   c0023a16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024372:	c7 04 24 98 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf98
c0024379:	e8 ae eb fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c002437e:	e9 87 00 00 00       	jmp    c002440a <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024383:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024388:	74 33                	je     c00243bd <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002438a:	31 ed                	xor    ebp,ebp
c002438c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024390:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024394:	50                   	push   eax
c0024395:	50                   	push   eax
c0024396:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002439d:	50                   	push   eax
c002439e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243a4:	e8 45 ec ff ff       	call   c0022fee <IDE::getBase(unsigned char)>
c00243a9:	89 c2                	mov    edx,eax
c00243ab:	89 f8                	mov    eax,edi
c00243ad:	66 ef                	out    dx,ax
c00243af:	45                   	inc    ebp
c00243b0:	83 c4 10             	add    esp,0x10
c00243b3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243b9:	75 d1                	jne    c002438c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243bb:	eb 23                	jmp    c00243e0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243bd:	0f b6 d2             	movzx  edx,dl
c00243c0:	51                   	push   ecx
c00243c1:	51                   	push   ecx
c00243c2:	52                   	push   edx
c00243c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c9:	e8 20 ec ff ff       	call   c0022fee <IDE::getBase(unsigned char)>
c00243ce:	b9 00 01 00 00       	mov    ecx,0x100
c00243d3:	89 c2                	mov    edx,eax
c00243d5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243d9:	fc                   	cld    
c00243da:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243dd:	83 c4 10             	add    esp,0x10
c00243e0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243e8:	4e                   	dec    esi
c00243e9:	e9 3e ff ff ff       	jmp    c002432c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243ee:	31 ff                	xor    edi,edi
c00243f0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243f5:	74 16                	je     c002440d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243f7:	50                   	push   eax
c00243f8:	50                   	push   eax
c00243f9:	31 c0                	xor    eax,eax
c00243fb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024400:	0f 94 c0             	sete   al
c0024403:	50                   	push   eax
c0024404:	53                   	push   ebx
c0024405:	e8 ec fb ff ff       	call   c0023ff6 <ATA::flush(bool)>
c002440a:	83 c4 10             	add    esp,0x10
c002440d:	83 c4 2c             	add    esp,0x2c
c0024410:	89 f8                	mov    eax,edi
c0024412:	5b                   	pop    ebx
c0024413:	5e                   	pop    esi
c0024414:	5f                   	pop    edi
c0024415:	5d                   	pop    ebp
c0024416:	c3                   	ret    
c0024417:	90                   	nop

c0024418 <ATA::read(unsigned long long, int, void*)>:
c0024418:	57                   	push   edi
c0024419:	b8 04 00 00 00       	mov    eax,0x4
c002441e:	56                   	push   esi
c002441f:	53                   	push   ebx
c0024420:	83 ec 10             	sub    esp,0x10
c0024423:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002442b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002442e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024432:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024436:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002443c:	77 3b                	ja     c0024479 <ATA::read(unsigned long long, int, void*)+0x61>
c002443e:	b8 06 00 00 00       	mov    eax,0x6
c0024443:	85 d2                	test   edx,edx
c0024445:	74 32                	je     c0024479 <ATA::read(unsigned long long, int, void*)+0x61>
c0024447:	50                   	push   eax
c0024448:	50                   	push   eax
c0024449:	6a 00                	push   0x0
c002444b:	52                   	push   edx
c002444c:	53                   	push   ebx
c002444d:	57                   	push   edi
c002444e:	56                   	push   esi
c002444f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024453:	e8 38 fc ff ff       	call   c0024090 <ATA::access(unsigned long long, int, void*, bool)>
c0024458:	83 c4 20             	add    esp,0x20
c002445b:	85 c0                	test   eax,eax
c002445d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024461:	75 11                	jne    c0024474 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024463:	01 1d 48 29 03 c0    	add    DWORD PTR ds:0xc0032948,ebx
c0024469:	e8 72 c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c002446e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024472:	eb 05                	jmp    c0024479 <ATA::read(unsigned long long, int, void*)+0x61>
c0024474:	b8 01 00 00 00       	mov    eax,0x1
c0024479:	83 c4 10             	add    esp,0x10
c002447c:	5b                   	pop    ebx
c002447d:	5e                   	pop    esi
c002447e:	5f                   	pop    edi
c002447f:	c3                   	ret    

c0024480 <ATA::write(unsigned long long, int, void*)>:
c0024480:	57                   	push   edi
c0024481:	b8 04 00 00 00       	mov    eax,0x4
c0024486:	56                   	push   esi
c0024487:	53                   	push   ebx
c0024488:	83 ec 10             	sub    esp,0x10
c002448b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002448f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024493:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024496:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002449a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002449e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244a4:	77 3b                	ja     c00244e1 <ATA::write(unsigned long long, int, void*)+0x61>
c00244a6:	b8 06 00 00 00       	mov    eax,0x6
c00244ab:	85 d2                	test   edx,edx
c00244ad:	74 32                	je     c00244e1 <ATA::write(unsigned long long, int, void*)+0x61>
c00244af:	50                   	push   eax
c00244b0:	50                   	push   eax
c00244b1:	6a 01                	push   0x1
c00244b3:	52                   	push   edx
c00244b4:	53                   	push   ebx
c00244b5:	57                   	push   edi
c00244b6:	56                   	push   esi
c00244b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244bb:	e8 d0 fb ff ff       	call   c0024090 <ATA::access(unsigned long long, int, void*, bool)>
c00244c0:	83 c4 20             	add    esp,0x20
c00244c3:	85 c0                	test   eax,eax
c00244c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244c9:	75 11                	jne    c00244dc <ATA::write(unsigned long long, int, void*)+0x5c>
c00244cb:	01 1d 44 29 03 c0    	add    DWORD PTR ds:0xc0032944,ebx
c00244d1:	e8 0a c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c00244d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244da:	eb 05                	jmp    c00244e1 <ATA::write(unsigned long long, int, void*)+0x61>
c00244dc:	b8 01 00 00 00       	mov    eax,0x1
c00244e1:	83 c4 10             	add    esp,0x10
c00244e4:	5b                   	pop    ebx
c00244e5:	5e                   	pop    esi
c00244e6:	5f                   	pop    edi
c00244e7:	c3                   	ret    

c00244e8 <ATA::detectCHS()>:
c00244e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244ec:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244f2:	c1 e0 06             	shl    eax,0x6
c00244f5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244fb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024505:	c7 44 24 04 a3 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cfa3
c002450d:	e9 bb 60 ff ff       	jmp    c001a5cd <Krnl::panic(char const*)>

c0024512 <ATA::open(int, int, void*)>:
c0024512:	53                   	push   ebx
c0024513:	83 ec 08             	sub    esp,0x8
c0024516:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002451a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002451e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024522:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024528:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002452e:	c1 e0 06             	shl    eax,0x6
c0024531:	01 d0                	add    eax,edx
c0024533:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002453a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024540:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024547:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024551:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024557:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002455e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024565:	75 0c                	jne    c0024573 <ATA::open(int, int, void*)+0x61>
c0024567:	83 ec 0c             	sub    esp,0xc
c002456a:	53                   	push   ebx
c002456b:	e8 78 ff ff ff       	call   c00244e8 <ATA::detectCHS()>
c0024570:	83 c4 10             	add    esp,0x10
c0024573:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024579:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002457f:	c1 e0 06             	shl    eax,0x6
c0024582:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024589:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024593:	d1 e8                	shr    eax,1
c0024595:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002459b:	6a 04                	push   0x4
c002459d:	6a 0c                	push   0xc
c002459f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245a6:	50                   	push   eax
c00245a7:	52                   	push   edx
c00245a8:	e8 53 ea ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ad:	90                   	nop
c00245ae:	90                   	nop
c00245af:	6a 00                	push   0x0
c00245b1:	6a 0c                	push   0xc
c00245b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245ba:	50                   	push   eax
c00245bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245c1:	e8 3a ea ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245c6:	83 c4 14             	add    esp,0x14
c00245c9:	53                   	push   ebx
c00245ca:	e8 0f 02 ff ff       	call   c00147de <PhysicalDisk::startCache()>
c00245cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245d2:	e8 7d 23 ff ff       	call   c0016954 <createPartitionsForDisk(PhysicalDisk*)>
c00245d7:	31 c0                	xor    eax,eax
c00245d9:	83 c4 18             	add    esp,0x18
c00245dc:	5b                   	pop    ebx
c00245dd:	c3                   	ret    

c00245de <ATAPI::write(unsigned long long, int, void*)>:
c00245de:	b8 03 00 00 00       	mov    eax,0x3
c00245e3:	c3                   	ret    

c00245e4 <ATAPI::close(int, int, void*)>:
c00245e4:	83 ec 0c             	sub    esp,0xc
c00245e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245f1:	85 c0                	test   eax,eax
c00245f3:	74 0c                	je     c0024601 <ATAPI::close(int, int, void*)+0x1d>
c00245f5:	83 ec 0c             	sub    esp,0xc
c00245f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00245fa:	50                   	push   eax
c00245fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245fe:	83 c4 10             	add    esp,0x10
c0024601:	31 c0                	xor    eax,eax
c0024603:	83 c4 0c             	add    esp,0xc
c0024606:	c3                   	ret    
c0024607:	90                   	nop

c0024608 <ATAPI::ATAPI()>:
c0024608:	83 ec 0c             	sub    esp,0xc
c002460b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002460f:	83 ec 04             	sub    esp,0x4
c0024612:	68 00 08 00 00       	push   0x800
c0024617:	68 dd d0 02 c0       	push   0xc002d0dd
c002461c:	50                   	push   eax
c002461d:	e8 54 01 ff ff       	call   c0014776 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024622:	83 c4 10             	add    esp,0x10
c0024625:	ba f8 cf 02 c0       	mov    edx,0xc002cff8
c002462a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002462e:	89 10                	mov    DWORD PTR [eax],edx
c0024630:	90                   	nop
c0024631:	83 c4 0c             	add    esp,0xc
c0024634:	c3                   	ret    
c0024635:	90                   	nop

c0024636 <ATAPI::readyForCommand()>:
c0024636:	56                   	push   esi
c0024637:	53                   	push   ebx
c0024638:	31 db                	xor    ebx,ebx
c002463a:	50                   	push   eax
c002463b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002463f:	50                   	push   eax
c0024640:	6a 0c                	push   0xc
c0024642:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024649:	50                   	push   eax
c002464a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024650:	e8 6b ea ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0024655:	83 c4 10             	add    esp,0x10
c0024658:	a8 88                	test   al,0x88
c002465a:	74 23                	je     c002467f <ATAPI::readyForCommand()+0x49>
c002465c:	43                   	inc    ebx
c002465d:	83 fb 63             	cmp    ebx,0x63
c0024660:	7e dd                	jle    c002463f <ATAPI::readyForCommand()+0x9>
c0024662:	51                   	push   ecx
c0024663:	51                   	push   ecx
c0024664:	6a 00                	push   0x0
c0024666:	68 40 42 0f 00       	push   0xf4240
c002466b:	e8 d2 9c ff ff       	call   c001e342 <nanoSleep(unsigned long long)>
c0024670:	83 c4 10             	add    esp,0x10
c0024673:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024679:	75 c4                	jne    c002463f <ATAPI::readyForCommand()+0x9>
c002467b:	31 c0                	xor    eax,eax
c002467d:	eb 02                	jmp    c0024681 <ATAPI::readyForCommand()+0x4b>
c002467f:	b0 01                	mov    al,0x1
c0024681:	5a                   	pop    edx
c0024682:	5b                   	pop    ebx
c0024683:	5e                   	pop    esi
c0024684:	c3                   	ret    
c0024685:	90                   	nop

c0024686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024686:	55                   	push   ebp
c0024687:	57                   	push   edi
c0024688:	56                   	push   esi
c0024689:	53                   	push   ebx
c002468a:	83 ec 20             	sub    esp,0x20
c002468d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024691:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024695:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024699:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002469d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246a1:	6a 01                	push   0x1
c00246a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246aa:	50                   	push   eax
c00246ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b1:	e8 56 eb ff ff       	call   c002320c <IDE::enableIRQs(unsigned char, bool)>
c00246b6:	5e                   	pop    esi
c00246b7:	58                   	pop    eax
c00246b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246bf:	50                   	push   eax
c00246c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c6:	e8 0f e9 ff ff       	call   c0022fda <IDE::prepareInterrupt(unsigned char)>
c00246cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246ce:	e8 63 ff ff ff       	call   c0024636 <ATAPI::readyForCommand()>
c00246d3:	83 c4 10             	add    esp,0x10
c00246d6:	84 c0                	test   al,al
c00246d8:	75 0a                	jne    c00246e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246da:	bb 01 00 00 00       	mov    ebx,0x1
c00246df:	e9 57 02 00 00       	jmp    c002493b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246e4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246ea:	c1 e0 04             	shl    eax,0x4
c00246ed:	0f b6 c0             	movzx  eax,al
c00246f0:	50                   	push   eax
c00246f1:	6a 06                	push   0x6
c00246f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246fa:	50                   	push   eax
c00246fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024701:	e8 fa e8 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024706:	6a 00                	push   0x0
c0024708:	6a 01                	push   0x1
c002470a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024711:	50                   	push   eax
c0024712:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024718:	e8 e3 e8 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002471d:	83 c4 20             	add    esp,0x20
c0024720:	0f b6 c3             	movzx  eax,bl
c0024723:	0f b6 df             	movzx  ebx,bh
c0024726:	50                   	push   eax
c0024727:	6a 04                	push   0x4
c0024729:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024730:	50                   	push   eax
c0024731:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024737:	e8 c4 e8 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002473c:	53                   	push   ebx
c002473d:	6a 05                	push   0x5
c002473f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024746:	50                   	push   eax
c0024747:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002474d:	e8 ae e8 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024752:	83 c4 20             	add    esp,0x20
c0024755:	68 a0 00 00 00       	push   0xa0
c002475a:	6a 07                	push   0x7
c002475c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024763:	50                   	push   eax
c0024764:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002476a:	e8 91 e8 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476f:	83 c4 0c             	add    esp,0xc
c0024772:	6a 01                	push   0x1
c0024774:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002477b:	50                   	push   eax
c002477c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024782:	e8 25 f4 ff ff       	call   c0023bac <IDE::polling(unsigned char, unsigned int)>
c0024787:	83 c4 10             	add    esp,0x10
c002478a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024790:	84 c0                	test   al,al
c0024792:	74 23                	je     c00247b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024794:	0f b6 d8             	movzx  ebx,al
c0024797:	0f b6 d2             	movzx  edx,dl
c002479a:	53                   	push   ebx
c002479b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247a2:	50                   	push   eax
c00247a3:	52                   	push   edx
c00247a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247aa:	e8 67 f2 ff ff       	call   c0023a16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247af:	83 c4 10             	add    esp,0x10
c00247b2:	e9 84 01 00 00       	jmp    c002493b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247b7:	0f b6 d2             	movzx  edx,dl
c00247ba:	53                   	push   ebx
c00247bb:	53                   	push   ebx
c00247bc:	52                   	push   edx
c00247bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c3:	e8 26 e8 ff ff       	call   c0022fee <IDE::getBase(unsigned char)>
c00247c8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247cc:	b9 06 00 00 00       	mov    ecx,0x6
c00247d1:	89 c2                	mov    edx,eax
c00247d3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247d6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247da:	83 c4 10             	add    esp,0x10
c00247dd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247e3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247ea:	85 db                	test   ebx,ebx
c00247ec:	0f 84 ec 00 00 00    	je     c00248de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247f2:	51                   	push   ecx
c00247f3:	51                   	push   ecx
c00247f4:	52                   	push   edx
c00247f5:	50                   	push   eax
c00247f6:	e8 73 e9 ff ff       	call   c002316e <IDE::waitInterrupt(unsigned char)>
c00247fb:	83 c4 10             	add    esp,0x10
c00247fe:	84 c0                	test   al,al
c0024800:	0f 84 d4 fe ff ff    	je     c00246da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024806:	56                   	push   esi
c0024807:	56                   	push   esi
c0024808:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480f:	50                   	push   eax
c0024810:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024816:	e8 bf e7 ff ff       	call   c0022fda <IDE::prepareInterrupt(unsigned char)>
c002481b:	83 c4 0c             	add    esp,0xc
c002481e:	6a 04                	push   0x4
c0024820:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024827:	50                   	push   eax
c0024828:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482e:	e8 8d e8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c0024833:	83 c4 0c             	add    esp,0xc
c0024836:	89 c6                	mov    esi,eax
c0024838:	6a 05                	push   0x5
c002483a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024841:	50                   	push   eax
c0024842:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024848:	e8 73 e8 ff ff       	call   c00230c0 <IDE::read(unsigned char, unsigned char)>
c002484d:	89 f1                	mov    ecx,esi
c002484f:	0f b6 c0             	movzx  eax,al
c0024852:	0f b6 f1             	movzx  esi,cl
c0024855:	c1 e0 08             	shl    eax,0x8
c0024858:	09 c6                	or     esi,eax
c002485a:	d1 fe                	sar    esi,1
c002485c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024860:	83 c4 10             	add    esp,0x10
c0024863:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024868:	74 41                	je     c00248ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002486a:	31 c9                	xor    ecx,ecx
c002486c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024872:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024879:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002487d:	75 0a                	jne    c0024889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002487f:	01 c9                	add    ecx,ecx
c0024881:	01 cd                	add    ebp,ecx
c0024883:	4b                   	dec    ebx
c0024884:	e9 54 ff ff ff       	jmp    c00247dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024889:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002488e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024892:	51                   	push   ecx
c0024893:	51                   	push   ecx
c0024894:	52                   	push   edx
c0024895:	50                   	push   eax
c0024896:	e8 53 e7 ff ff       	call   c0022fee <IDE::getBase(unsigned char)>
c002489b:	89 c2                	mov    edx,eax
c002489d:	89 f0                	mov    eax,esi
c002489f:	66 ef                	out    dx,ax
c00248a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248a5:	83 c4 10             	add    esp,0x10
c00248a8:	41                   	inc    ecx
c00248a9:	eb c1                	jmp    c002486c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248ab:	31 f6                	xor    esi,esi
c00248ad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248b3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248ba:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248be:	75 06                	jne    c00248c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248c0:	01 f6                	add    esi,esi
c00248c2:	01 f5                	add    ebp,esi
c00248c4:	eb bd                	jmp    c0024883 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248c6:	51                   	push   ecx
c00248c7:	51                   	push   ecx
c00248c8:	52                   	push   edx
c00248c9:	50                   	push   eax
c00248ca:	e8 1f e7 ff ff       	call   c0022fee <IDE::getBase(unsigned char)>
c00248cf:	89 c2                	mov    edx,eax
c00248d1:	66 ed                	in     ax,dx
c00248d3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248d8:	83 c4 10             	add    esp,0x10
c00248db:	46                   	inc    esi
c00248dc:	eb cf                	jmp    c00248ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248de:	51                   	push   ecx
c00248df:	51                   	push   ecx
c00248e0:	52                   	push   edx
c00248e1:	50                   	push   eax
c00248e2:	e8 87 e8 ff ff       	call   c002316e <IDE::waitInterrupt(unsigned char)>
c00248e7:	83 c4 10             	add    esp,0x10
c00248ea:	84 c0                	test   al,al
c00248ec:	0f 84 e8 fd ff ff    	je     c00246da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248f2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248f7:	52                   	push   edx
c00248f8:	52                   	push   edx
c00248f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024900:	50                   	push   eax
c0024901:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024907:	e8 ce e6 ff ff       	call   c0022fda <IDE::prepareInterrupt(unsigned char)>
c002490c:	83 c4 10             	add    esp,0x10
c002490f:	50                   	push   eax
c0024910:	50                   	push   eax
c0024911:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024918:	50                   	push   eax
c0024919:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002491f:	e8 ca e6 ff ff       	call   c0022fee <IDE::getBase(unsigned char)>
c0024924:	8d 50 07             	lea    edx,[eax+0x7]
c0024927:	ec                   	in     al,dx
c0024928:	83 c4 10             	add    esp,0x10
c002492b:	a8 88                	test   al,0x88
c002492d:	74 0a                	je     c0024939 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002492f:	4b                   	dec    ebx
c0024930:	75 dd                	jne    c002490f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024932:	bb 02 00 00 00       	mov    ebx,0x2
c0024937:	eb 02                	jmp    c002493b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024939:	31 db                	xor    ebx,ebx
c002493b:	83 c4 1c             	add    esp,0x1c
c002493e:	89 d8                	mov    eax,ebx
c0024940:	5b                   	pop    ebx
c0024941:	5e                   	pop    esi
c0024942:	5f                   	pop    edi
c0024943:	5d                   	pop    ebp
c0024944:	c3                   	ret    
c0024945:	90                   	nop

c0024946 <ATAPI::diskRemoved()>:
c0024946:	83 ec 18             	sub    esp,0x18
c0024949:	68 e9 d0 02 c0       	push   0xc002d0e9
c002494e:	e8 d9 e5 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0024953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024957:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002495e:	83 c4 1c             	add    esp,0x1c
c0024961:	c3                   	ret    

c0024962 <ATAPI::eject()>:
c0024962:	57                   	push   edi
c0024963:	b9 03 00 00 00       	mov    ecx,0x3
c0024968:	53                   	push   ebx
c0024969:	83 ec 14             	sub    esp,0x14
c002496c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024970:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024974:	fc                   	cld    
c0024975:	31 c0                	xor    eax,eax
c0024977:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024979:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002497e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024983:	50                   	push   eax
c0024984:	50                   	push   eax
c0024985:	6a 00                	push   0x0
c0024987:	6a 00                	push   0x0
c0024989:	6a 00                	push   0x0
c002498b:	6a 02                	push   0x2
c002498d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024991:	50                   	push   eax
c0024992:	53                   	push   ebx
c0024993:	e8 ee fc ff ff       	call   c0024686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024998:	83 c4 14             	add    esp,0x14
c002499b:	53                   	push   ebx
c002499c:	e8 a5 ff ff ff       	call   c0024946 <ATAPI::diskRemoved()>
c00249a1:	83 c4 24             	add    esp,0x24
c00249a4:	31 c0                	xor    eax,eax
c00249a6:	5b                   	pop    ebx
c00249a7:	5f                   	pop    edi
c00249a8:	c3                   	ret    
c00249a9:	90                   	nop

c00249aa <ATAPI::diskInserted()>:
c00249aa:	53                   	push   ebx
c00249ab:	83 ec 14             	sub    esp,0x14
c00249ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249b2:	68 00 d1 02 c0       	push   0xc002d100
c00249b7:	e8 70 e5 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c00249bc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249c6:	e8 13 fe fe ff       	call   c00147de <PhysicalDisk::startCache()>
c00249cb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249cf:	83 c4 18             	add    esp,0x18
c00249d2:	5b                   	pop    ebx
c00249d3:	e9 7c 1f ff ff       	jmp    c0016954 <createPartitionsForDisk(PhysicalDisk*)>

c00249d8 <ATAPI::detectMedia()>:
c00249d8:	56                   	push   esi
c00249d9:	53                   	push   ebx
c00249da:	83 ec 28             	sub    esp,0x28
c00249dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249e1:	6a 0c                	push   0xc
c00249e3:	6a 00                	push   0x0
c00249e5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249e9:	56                   	push   esi
c00249ea:	e8 89 bd fd ff       	call   c0000778 <memset>
c00249ef:	58                   	pop    eax
c00249f0:	5a                   	pop    edx
c00249f1:	6a 00                	push   0x0
c00249f3:	6a 00                	push   0x0
c00249f5:	6a 00                	push   0x0
c00249f7:	6a 00                	push   0x0
c00249f9:	56                   	push   esi
c00249fa:	53                   	push   ebx
c00249fb:	e8 86 fc ff ff       	call   c0024686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a00:	83 c4 1c             	add    esp,0x1c
c0024a03:	6a 0c                	push   0xc
c0024a05:	6a 00                	push   0x0
c0024a07:	56                   	push   esi
c0024a08:	e8 6b bd fd ff       	call   c0000778 <memset>
c0024a0d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a12:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a17:	59                   	pop    ecx
c0024a18:	58                   	pop    eax
c0024a19:	6a 01                	push   0x1
c0024a1b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a1f:	50                   	push   eax
c0024a20:	6a 00                	push   0x0
c0024a22:	6a 12                	push   0x12
c0024a24:	56                   	push   esi
c0024a25:	53                   	push   ebx
c0024a26:	e8 5b fc ff ff       	call   c0024686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a2b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a2f:	83 c4 20             	add    esp,0x20
c0024a32:	83 e0 7f             	and    eax,0x7f
c0024a35:	3c 70                	cmp    al,0x70
c0024a37:	74 15                	je     c0024a4e <ATAPI::detectMedia()+0x76>
c0024a39:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a40:	75 0c                	jne    c0024a4e <ATAPI::detectMedia()+0x76>
c0024a42:	83 ec 0c             	sub    esp,0xc
c0024a45:	53                   	push   ebx
c0024a46:	e8 5f ff ff ff       	call   c00249aa <ATAPI::diskInserted()>
c0024a4b:	83 c4 10             	add    esp,0x10
c0024a4e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a52:	83 e0 0f             	and    eax,0xf
c0024a55:	3c 02                	cmp    al,0x2
c0024a57:	75 1b                	jne    c0024a74 <ATAPI::detectMedia()+0x9c>
c0024a59:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a5e:	75 2d                	jne    c0024a8d <ATAPI::detectMedia()+0xb5>
c0024a60:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a67:	74 24                	je     c0024a8d <ATAPI::detectMedia()+0xb5>
c0024a69:	83 ec 0c             	sub    esp,0xc
c0024a6c:	53                   	push   ebx
c0024a6d:	e8 d4 fe ff ff       	call   c0024946 <ATAPI::diskRemoved()>
c0024a72:	eb 16                	jmp    c0024a8a <ATAPI::detectMedia()+0xb2>
c0024a74:	84 c0                	test   al,al
c0024a76:	75 15                	jne    c0024a8d <ATAPI::detectMedia()+0xb5>
c0024a78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a7f:	75 0c                	jne    c0024a8d <ATAPI::detectMedia()+0xb5>
c0024a81:	83 ec 0c             	sub    esp,0xc
c0024a84:	53                   	push   ebx
c0024a85:	e8 20 ff ff ff       	call   c00249aa <ATAPI::diskInserted()>
c0024a8a:	83 c4 10             	add    esp,0x10
c0024a8d:	83 c4 24             	add    esp,0x24
c0024a90:	5b                   	pop    ebx
c0024a91:	5e                   	pop    esi
c0024a92:	c3                   	ret    
c0024a93:	90                   	nop

c0024a94 <ATAPI::open(int, int, void*)>:
c0024a94:	53                   	push   ebx
c0024a95:	83 ec 08             	sub    esp,0x8
c0024a98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024aa0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aa4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024aaa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ab0:	c1 e0 06             	shl    eax,0x6
c0024ab3:	01 d0                	add    eax,edx
c0024ab5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024abc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024ac2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024ac9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ad3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ad9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ae0:	6a 04                	push   0x4
c0024ae2:	6a 0c                	push   0xc
c0024ae4:	51                   	push   ecx
c0024ae5:	52                   	push   edx
c0024ae6:	e8 15 e5 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aeb:	90                   	nop
c0024aec:	90                   	nop
c0024aed:	6a 00                	push   0x0
c0024aef:	6a 0c                	push   0xc
c0024af1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024af8:	50                   	push   eax
c0024af9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aff:	e8 fc e4 ff ff       	call   c0023000 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b04:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b0b:	83 c4 14             	add    esp,0x14
c0024b0e:	53                   	push   ebx
c0024b0f:	e8 c4 fe ff ff       	call   c00249d8 <ATAPI::detectMedia()>
c0024b14:	31 c0                	xor    eax,eax
c0024b16:	83 c4 18             	add    esp,0x18
c0024b19:	5b                   	pop    ebx
c0024b1a:	c3                   	ret    
c0024b1b:	90                   	nop

c0024b1c <ATAPI::read(unsigned long long, int, void*)>:
c0024b1c:	55                   	push   ebp
c0024b1d:	57                   	push   edi
c0024b1e:	56                   	push   esi
c0024b1f:	53                   	push   ebx
c0024b20:	83 ec 1c             	sub    esp,0x1c
c0024b23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b27:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b2b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b2f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b36:	74 41                	je     c0024b79 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b38:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b3c:	b9 03 00 00 00       	mov    ecx,0x3
c0024b41:	fc                   	cld    
c0024b42:	31 c0                	xor    eax,eax
c0024b44:	86 fb                	xchg   bl,bh
c0024b46:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b48:	c1 c3 10             	rol    ebx,0x10
c0024b4b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b50:	89 e8                	mov    eax,ebp
c0024b52:	86 fb                	xchg   bl,bh
c0024b54:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b58:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b5c:	50                   	push   eax
c0024b5d:	50                   	push   eax
c0024b5e:	55                   	push   ebp
c0024b5f:	c1 e5 0b             	shl    ebp,0xb
c0024b62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b66:	6a 00                	push   0x0
c0024b68:	55                   	push   ebp
c0024b69:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b6d:	50                   	push   eax
c0024b6e:	56                   	push   esi
c0024b6f:	e8 12 fb ff ff       	call   c0024686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b74:	83 c4 20             	add    esp,0x20
c0024b77:	eb 1a                	jmp    c0024b93 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b79:	83 ec 0c             	sub    esp,0xc
c0024b7c:	56                   	push   esi
c0024b7d:	e8 56 fe ff ff       	call   c00249d8 <ATAPI::detectMedia()>
c0024b82:	83 c4 10             	add    esp,0x10
c0024b85:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b8c:	75 aa                	jne    c0024b38 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b8e:	b8 02 00 00 00       	mov    eax,0x2
c0024b93:	83 c4 1c             	add    esp,0x1c
c0024b96:	5b                   	pop    ebx
c0024b97:	5e                   	pop    esi
c0024b98:	5f                   	pop    edi
c0024b99:	5d                   	pop    ebp
c0024b9a:	c3                   	ret    
c0024b9b:	90                   	nop

c0024b9c <SATA::close(int, int, void*)>:
c0024b9c:	83 ec 0c             	sub    esp,0xc
c0024b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ba3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ba9:	85 c0                	test   eax,eax
c0024bab:	74 0c                	je     c0024bb9 <SATA::close(int, int, void*)+0x1d>
c0024bad:	83 ec 0c             	sub    esp,0xc
c0024bb0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bb2:	50                   	push   eax
c0024bb3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bb6:	83 c4 10             	add    esp,0x10
c0024bb9:	31 c0                	xor    eax,eax
c0024bbb:	83 c4 0c             	add    esp,0xc
c0024bbe:	c3                   	ret    
c0024bbf:	90                   	nop

c0024bc0 <SATA::powerSaving(PowerSavingLevel)>:
c0024bc0:	c3                   	ret    
c0024bc1:	90                   	nop

c0024bc2 <SATA::open(int, int, void*)>:
c0024bc2:	56                   	push   esi
c0024bc3:	53                   	push   ebx
c0024bc4:	50                   	push   eax
c0024bc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bcd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bd7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bdd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024be7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024beb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bf5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024bfb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c02:	e8 db b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c07:	89 c6                	mov    esi,eax
c0024c09:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c0f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c15:	e8 c8 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c1a:	39 c6                	cmp    esi,eax
c0024c1c:	74 10                	je     c0024c2e <SATA::open(int, int, void*)+0x6c>
c0024c1e:	83 ec 0c             	sub    esp,0xc
c0024c21:	68 28 d0 02 c0       	push   0xc002d028
c0024c26:	e8 a2 59 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0024c2b:	83 c4 10             	add    esp,0x10
c0024c2e:	83 ec 0c             	sub    esp,0xc
c0024c31:	6a 02                	push   0x2
c0024c33:	e8 53 cf fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0024c38:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c3e:	e8 e3 d1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0024c43:	6a 03                	push   0x3
c0024c45:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c4b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c51:	50                   	push   eax
c0024c52:	e8 0b d7 fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c57:	83 c4 14             	add    esp,0x14
c0024c5a:	53                   	push   ebx
c0024c5b:	e8 7e fb fe ff       	call   c00147de <PhysicalDisk::startCache()>
c0024c60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c63:	e8 ec 1c ff ff       	call   c0016954 <createPartitionsForDisk(PhysicalDisk*)>
c0024c68:	83 c4 14             	add    esp,0x14
c0024c6b:	31 c0                	xor    eax,eax
c0024c6d:	5b                   	pop    ebx
c0024c6e:	5e                   	pop    esi
c0024c6f:	c3                   	ret    

c0024c70 <SATA::SATA()>:
c0024c70:	83 ec 0c             	sub    esp,0xc
c0024c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c77:	83 ec 04             	sub    esp,0x4
c0024c7a:	68 00 02 00 00       	push   0x200
c0024c7f:	68 3c d0 02 c0       	push   0xc002d03c
c0024c84:	50                   	push   eax
c0024c85:	e8 ec fa fe ff       	call   c0014776 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c8a:	83 c4 10             	add    esp,0x10
c0024c8d:	ba ac d0 02 c0       	mov    edx,0xc002d0ac
c0024c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c96:	89 10                	mov    DWORD PTR [eax],edx
c0024c98:	90                   	nop
c0024c99:	83 c4 0c             	add    esp,0xc
c0024c9c:	c3                   	ret    
c0024c9d:	90                   	nop

c0024c9e <SATA::access(unsigned long long, int, void*, bool)>:
c0024c9e:	55                   	push   ebp
c0024c9f:	57                   	push   edi
c0024ca0:	56                   	push   esi
c0024ca1:	53                   	push   ebx
c0024ca2:	83 ec 2c             	sub    esp,0x2c
c0024ca5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024ca9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cb1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024cb5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024cb9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cc2:	7e 10                	jle    c0024cd4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cc4:	83 ec 0c             	sub    esp,0xc
c0024cc7:	68 4c d0 02 c0       	push   0xc002d04c
c0024ccc:	e8 fc 58 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0024cd1:	83 c4 10             	add    esp,0x10
c0024cd4:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cda:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cea:	89 f0                	mov    eax,esi
c0024cec:	c1 e0 07             	shl    eax,0x7
c0024cef:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cf3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024cfd:	53                   	push   ebx
c0024cfe:	8d 46 02             	lea    eax,[esi+0x2]
c0024d01:	53                   	push   ebx
c0024d02:	c1 e0 07             	shl    eax,0x7
c0024d05:	bb 01 00 00 00       	mov    ebx,0x1
c0024d0a:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d0e:	50                   	push   eax
c0024d0f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d15:	e8 aa ef ff ff       	call   c0023cc4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d1a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d1e:	83 c4 10             	add    esp,0x10
c0024d21:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d26:	0f 84 ce 01 00 00    	je     c0024efa <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d2c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d30:	c1 e0 09             	shl    eax,0x9
c0024d33:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d3c:	74 17                	je     c0024d55 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d3e:	51                   	push   ecx
c0024d3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d43:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d47:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d4d:	e8 f2 b9 fd ff       	call   c0000744 <memcpy>
c0024d52:	83 c4 10             	add    esp,0x10
c0024d55:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d5b:	8d 46 02             	lea    eax,[esi+0x2]
c0024d5e:	c1 e0 07             	shl    eax,0x7
c0024d61:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d67:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d6d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d73:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d77:	c1 e1 05             	shl    ecx,0x5
c0024d7a:	01 c8                	add    eax,ecx
c0024d7c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d80:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d82:	83 e1 01             	and    ecx,0x1
c0024d85:	83 e3 bf             	and    ebx,0xffffffbf
c0024d88:	c1 e1 06             	shl    ecx,0x6
c0024d8b:	09 d9                	or     ecx,ebx
c0024d8d:	88 08                	mov    BYTE PTR [eax],cl
c0024d8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d91:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d97:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d9d:	89 08                	mov    DWORD PTR [eax],ecx
c0024d9f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024da5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024dab:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024db1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024db4:	52                   	push   edx
c0024db5:	68 90 00 00 00       	push   0x90
c0024dba:	6a 00                	push   0x0
c0024dbc:	53                   	push   ebx
c0024dbd:	e8 b6 b9 fd ff       	call   c0000778 <memset>
c0024dc2:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dc8:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024dcc:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dd2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024dda:	83 c4 10             	add    esp,0x10
c0024ddd:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024de0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024de6:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dec:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024df1:	09 c8                	or     eax,ecx
c0024df3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024df9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dfc:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e03:	66 25 00 7f          	and    ax,0x7f00
c0024e07:	66 0d 27 80          	or     ax,0x8027
c0024e0b:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e10:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e13:	19 c0                	sbb    eax,eax
c0024e15:	83 e0 f0             	and    eax,0xfffffff0
c0024e18:	83 c0 35             	add    eax,0x35
c0024e1b:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e1e:	89 f8                	mov    eax,edi
c0024e20:	c1 e8 10             	shr    eax,0x10
c0024e23:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e26:	89 f8                	mov    eax,edi
c0024e28:	c1 e8 18             	shr    eax,0x18
c0024e2b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e2e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e32:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e39:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e40:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e44:	89 f3                	mov    ebx,esi
c0024e46:	31 c0                	xor    eax,eax
c0024e48:	c1 e3 07             	shl    ebx,0x7
c0024e4b:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e4f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e55:	80 e1 88             	and    cl,0x88
c0024e58:	74 0a                	je     c0024e64 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e5a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e5f:	74 0a                	je     c0024e6b <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e61:	40                   	inc    eax
c0024e62:	eb eb                	jmp    c0024e4f <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e64:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e69:	75 0a                	jne    c0024e75 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e6b:	83 ec 0c             	sub    esp,0xc
c0024e6e:	68 85 d0 02 c0       	push   0xc002d085
c0024e73:	eb 56                	jmp    c0024ecb <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e75:	b8 01 00 00 00       	mov    eax,0x1
c0024e7a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e7e:	c1 e6 07             	shl    esi,0x7
c0024e81:	d3 e0                	shl    eax,cl
c0024e83:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e87:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e8d:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e93:	85 c8                	test   eax,ecx
c0024e95:	74 20                	je     c0024eb7 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e97:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e9d:	0f ba e1 1e          	bt     ecx,0x1e
c0024ea1:	73 ea                	jae    c0024e8d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ea3:	83 ec 0c             	sub    esp,0xc
c0024ea6:	31 db                	xor    ebx,ebx
c0024ea8:	68 93 d0 02 c0       	push   0xc002d093
c0024ead:	e8 1b 57 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0024eb2:	83 c4 10             	add    esp,0x10
c0024eb5:	eb 43                	jmp    c0024efa <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eb7:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ebd:	0f ba e0 1e          	bt     eax,0x1e
c0024ec1:	73 17                	jae    c0024eda <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ec3:	83 ec 0c             	sub    esp,0xc
c0024ec6:	68 93 d0 02 c0       	push   0xc002d093
c0024ecb:	e8 fd 56 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0024ed0:	bb 01 00 00 00       	mov    ebx,0x1
c0024ed5:	83 c4 10             	add    esp,0x10
c0024ed8:	eb 20                	jmp    c0024efa <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eda:	31 db                	xor    ebx,ebx
c0024edc:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ee1:	75 17                	jne    c0024efa <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ee3:	50                   	push   eax
c0024ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ee8:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024eee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ef2:	e8 4d b8 fd ff       	call   c0000744 <memcpy>
c0024ef7:	83 c4 10             	add    esp,0x10
c0024efa:	83 c4 2c             	add    esp,0x2c
c0024efd:	89 d8                	mov    eax,ebx
c0024eff:	5b                   	pop    ebx
c0024f00:	5e                   	pop    esi
c0024f01:	5f                   	pop    edi
c0024f02:	5d                   	pop    ebp
c0024f03:	c3                   	ret    

c0024f04 <SATA::read(unsigned long long, int, void*)>:
c0024f04:	57                   	push   edi
c0024f05:	b8 04 00 00 00       	mov    eax,0x4
c0024f0a:	56                   	push   esi
c0024f0b:	53                   	push   ebx
c0024f0c:	83 ec 10             	sub    esp,0x10
c0024f0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f13:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f17:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f1a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f22:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f28:	77 3b                	ja     c0024f65 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f2a:	b8 06 00 00 00       	mov    eax,0x6
c0024f2f:	85 d2                	test   edx,edx
c0024f31:	74 32                	je     c0024f65 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f33:	50                   	push   eax
c0024f34:	50                   	push   eax
c0024f35:	6a 00                	push   0x0
c0024f37:	52                   	push   edx
c0024f38:	53                   	push   ebx
c0024f39:	57                   	push   edi
c0024f3a:	56                   	push   esi
c0024f3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f3f:	e8 5a fd ff ff       	call   c0024c9e <SATA::access(unsigned long long, int, void*, bool)>
c0024f44:	83 c4 20             	add    esp,0x20
c0024f47:	85 c0                	test   eax,eax
c0024f49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f4d:	75 11                	jne    c0024f60 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f4f:	01 1d 48 29 03 c0    	add    DWORD PTR ds:0xc0032948,ebx
c0024f55:	e8 86 ba fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024f5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f5e:	eb 05                	jmp    c0024f65 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f60:	b8 01 00 00 00       	mov    eax,0x1
c0024f65:	83 c4 10             	add    esp,0x10
c0024f68:	5b                   	pop    ebx
c0024f69:	5e                   	pop    esi
c0024f6a:	5f                   	pop    edi
c0024f6b:	c3                   	ret    

c0024f6c <SATA::write(unsigned long long, int, void*)>:
c0024f6c:	55                   	push   ebp
c0024f6d:	b8 04 00 00 00       	mov    eax,0x4
c0024f72:	57                   	push   edi
c0024f73:	56                   	push   esi
c0024f74:	53                   	push   ebx
c0024f75:	83 ec 1c             	sub    esp,0x1c
c0024f78:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f7c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f80:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f87:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f8b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f91:	77 56                	ja     c0024fe9 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f93:	b8 06 00 00 00       	mov    eax,0x6
c0024f98:	85 ff                	test   edi,edi
c0024f9a:	74 4d                	je     c0024fe9 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f9c:	89 ee                	mov    esi,ebp
c0024f9e:	c1 e6 09             	shl    esi,0x9
c0024fa1:	01 fe                	add    esi,edi
c0024fa3:	89 c8                	mov    eax,ecx
c0024fa5:	89 da                	mov    edx,ebx
c0024fa7:	83 c0 01             	add    eax,0x1
c0024faa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fae:	83 d2 00             	adc    edx,0x0
c0024fb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fb5:	50                   	push   eax
c0024fb6:	50                   	push   eax
c0024fb7:	6a 01                	push   0x1
c0024fb9:	57                   	push   edi
c0024fba:	81 c7 00 02 00 00    	add    edi,0x200
c0024fc0:	6a 01                	push   0x1
c0024fc2:	53                   	push   ebx
c0024fc3:	51                   	push   ecx
c0024fc4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fc8:	e8 d1 fc ff ff       	call   c0024c9e <SATA::access(unsigned long long, int, void*, bool)>
c0024fcd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fd1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fd5:	83 c4 20             	add    esp,0x20
c0024fd8:	39 f7                	cmp    edi,esi
c0024fda:	75 c7                	jne    c0024fa3 <SATA::write(unsigned long long, int, void*)+0x37>
c0024fdc:	01 2d 44 29 03 c0    	add    DWORD PTR ds:0xc0032944,ebp
c0024fe2:	e8 f9 b9 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024fe7:	31 c0                	xor    eax,eax
c0024fe9:	83 c4 1c             	add    esp,0x1c
c0024fec:	5b                   	pop    ebx
c0024fed:	5e                   	pop    esi
c0024fee:	5f                   	pop    edi
c0024fef:	5d                   	pop    ebp
c0024ff0:	c3                   	ret    
c0024ff1:	90                   	nop

c0024ff2 <SATAPI::write(unsigned long long, int, void*)>:
c0024ff2:	b8 03 00 00 00       	mov    eax,0x3
c0024ff7:	c3                   	ret    

c0024ff8 <SATAPI::close(int, int, void*)>:
c0024ff8:	83 ec 0c             	sub    esp,0xc
c0024ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025005:	85 c0                	test   eax,eax
c0025007:	74 0c                	je     c0025015 <SATAPI::close(int, int, void*)+0x1d>
c0025009:	83 ec 0c             	sub    esp,0xc
c002500c:	8b 10                	mov    edx,DWORD PTR [eax]
c002500e:	50                   	push   eax
c002500f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025012:	83 c4 10             	add    esp,0x10
c0025015:	31 c0                	xor    eax,eax
c0025017:	83 c4 0c             	add    esp,0xc
c002501a:	c3                   	ret    
c002501b:	90                   	nop

c002501c <SATAPI::SATAPI()>:
c002501c:	83 ec 0c             	sub    esp,0xc
c002501f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025023:	83 ec 04             	sub    esp,0x4
c0025026:	68 00 08 00 00       	push   0x800
c002502b:	68 dc d0 02 c0       	push   0xc002d0dc
c0025030:	50                   	push   eax
c0025031:	e8 40 f7 fe ff       	call   c0014776 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025036:	83 c4 10             	add    esp,0x10
c0025039:	ba 88 d1 02 c0       	mov    edx,0xc002d188
c002503e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025042:	89 10                	mov    DWORD PTR [eax],edx
c0025044:	90                   	nop
c0025045:	83 c4 0c             	add    esp,0xc
c0025048:	c3                   	ret    
c0025049:	90                   	nop

c002504a <SATAPI::diskRemoved()>:
c002504a:	83 ec 18             	sub    esp,0x18
c002504d:	68 e8 d0 02 c0       	push   0xc002d0e8
c0025052:	e8 d5 de fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0025057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002505b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025062:	83 c4 1c             	add    esp,0x1c
c0025065:	c3                   	ret    

c0025066 <SATAPI::diskInserted()>:
c0025066:	53                   	push   ebx
c0025067:	83 ec 14             	sub    esp,0x14
c002506a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002506e:	68 ff d0 02 c0       	push   0xc002d0ff
c0025073:	e8 b4 de fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0025078:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002507f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025082:	e8 57 f7 fe ff       	call   c00147de <PhysicalDisk::startCache()>
c0025087:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002508b:	83 c4 18             	add    esp,0x18
c002508e:	5b                   	pop    ebx
c002508f:	e9 c0 18 ff ff       	jmp    c0016954 <createPartitionsForDisk(PhysicalDisk*)>

c0025094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025094:	55                   	push   ebp
c0025095:	57                   	push   edi
c0025096:	56                   	push   esi
c0025097:	53                   	push   ebx
c0025098:	83 ec 24             	sub    esp,0x24
c002509b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002509f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250a3:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250ad:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250b1:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250b7:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250c0:	c1 e3 07             	shl    ebx,0x7
c00250c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250c7:	89 f8                	mov    eax,edi
c00250c9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250cd:	c1 e0 07             	shl    eax,0x7
c00250d0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250d8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250e2:	53                   	push   ebx
c00250e3:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250e9:	e8 d6 eb ff ff       	call   c0023cc4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250f2:	83 c4 10             	add    esp,0x10
c00250f5:	b8 01 00 00 00       	mov    eax,0x1
c00250fa:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250ff:	0f 84 8a 01 00 00    	je     c002528f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025105:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002510b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002510d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025113:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025119:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002511d:	c1 e1 05             	shl    ecx,0x5
c0025120:	01 c8                	add    eax,ecx
c0025122:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025124:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002512a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025130:	89 08                	mov    DWORD PTR [eax],ecx
c0025132:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025138:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002513e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025144:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025147:	52                   	push   edx
c0025148:	68 90 00 00 00       	push   0x90
c002514d:	6a 00                	push   0x0
c002514f:	53                   	push   ebx
c0025150:	e8 23 b6 fd ff       	call   c0000778 <memset>
c0025155:	83 c4 0c             	add    esp,0xc
c0025158:	8d 43 40             	lea    eax,[ebx+0x40]
c002515b:	6a 0c                	push   0xc
c002515d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025161:	50                   	push   eax
c0025162:	e8 dd b5 fd ff       	call   c0000744 <memcpy>
c0025167:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002516d:	89 ea                	mov    edx,ebp
c002516f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025175:	c1 ea 18             	shr    edx,0x18
c0025178:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002517c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002517f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025182:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025186:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002518c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025192:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025197:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002519b:	09 c8                	or     eax,ecx
c002519d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251a1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251a7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251aa:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251b1:	66 25 00 7f          	and    ax,0x7f00
c00251b5:	66 0d 27 80          	or     ax,0x8027
c00251b9:	66 89 03             	mov    WORD PTR [ebx],ax
c00251bc:	89 e8                	mov    eax,ebp
c00251be:	c1 e8 10             	shr    eax,0x10
c00251c1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251c4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251c8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251cf:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251d2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251d6:	83 c4 10             	add    esp,0x10
c00251d9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251e1:	31 c0                	xor    eax,eax
c00251e3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251e9:	80 e1 88             	and    cl,0x88
c00251ec:	74 0a                	je     c00251f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251ee:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251f3:	74 0a                	je     c00251ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251f5:	40                   	inc    eax
c00251f6:	eb eb                	jmp    c00251e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251f8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251fd:	75 0f                	jne    c002520e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251ff:	83 ec 0c             	sub    esp,0xc
c0025202:	68 85 d0 02 c0       	push   0xc002d085
c0025207:	e8 c1 53 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c002520c:	eb 3a                	jmp    c0025248 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c002520e:	b8 01 00 00 00       	mov    eax,0x1
c0025213:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025217:	c1 e7 07             	shl    edi,0x7
c002521a:	d3 e0                	shl    eax,cl
c002521c:	03 3c 24             	add    edi,DWORD PTR [esp]
c002521f:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025225:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002522b:	85 d0                	test   eax,edx
c002522d:	74 23                	je     c0025252 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c002522f:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025235:	0f ba e2 1e          	bt     edx,0x1e
c0025239:	73 ea                	jae    c0025225 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002523b:	83 ec 0c             	sub    esp,0xc
c002523e:	68 17 d1 02 c0       	push   0xc002d117
c0025243:	e8 e4 dc fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0025248:	83 c4 10             	add    esp,0x10
c002524b:	b8 01 00 00 00       	mov    eax,0x1
c0025250:	eb 3d                	jmp    c002528f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025252:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025258:	0f ba e0 1e          	bt     eax,0x1e
c002525c:	73 0a                	jae    c0025268 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002525e:	83 ec 0c             	sub    esp,0xc
c0025261:	68 2a d1 02 c0       	push   0xc002d12a
c0025266:	eb db                	jmp    c0025243 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025268:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002526d:	74 1e                	je     c002528d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002526f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025274:	74 17                	je     c002528d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025276:	50                   	push   eax
c0025277:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002527b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025281:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025285:	e8 ba b4 fd ff       	call   c0000744 <memcpy>
c002528a:	83 c4 10             	add    esp,0x10
c002528d:	31 c0                	xor    eax,eax
c002528f:	83 c4 1c             	add    esp,0x1c
c0025292:	5b                   	pop    ebx
c0025293:	5e                   	pop    esi
c0025294:	5f                   	pop    edi
c0025295:	5d                   	pop    ebp
c0025296:	c3                   	ret    
c0025297:	90                   	nop

c0025298 <SATAPI::eject()>:
c0025298:	57                   	push   edi
c0025299:	b9 03 00 00 00       	mov    ecx,0x3
c002529e:	53                   	push   ebx
c002529f:	83 ec 14             	sub    esp,0x14
c00252a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252a6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252aa:	fc                   	cld    
c00252ab:	31 c0                	xor    eax,eax
c00252ad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252af:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252b4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252b9:	50                   	push   eax
c00252ba:	6a 00                	push   0x0
c00252bc:	6a 00                	push   0x0
c00252be:	6a 00                	push   0x0
c00252c0:	6a 00                	push   0x0
c00252c2:	6a 02                	push   0x2
c00252c4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252c8:	50                   	push   eax
c00252c9:	53                   	push   ebx
c00252ca:	e8 c5 fd ff ff       	call   c0025094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252cf:	83 c4 14             	add    esp,0x14
c00252d2:	53                   	push   ebx
c00252d3:	e8 72 fd ff ff       	call   c002504a <SATAPI::diskRemoved()>
c00252d8:	83 c4 24             	add    esp,0x24
c00252db:	31 c0                	xor    eax,eax
c00252dd:	5b                   	pop    ebx
c00252de:	5f                   	pop    edi
c00252df:	c3                   	ret    

c00252e0 <SATAPI::detectMedia()>:
c00252e0:	56                   	push   esi
c00252e1:	53                   	push   ebx
c00252e2:	83 ec 28             	sub    esp,0x28
c00252e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252e9:	6a 0c                	push   0xc
c00252eb:	6a 00                	push   0x0
c00252ed:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252f1:	56                   	push   esi
c00252f2:	e8 81 b4 fd ff       	call   c0000778 <memset>
c00252f7:	83 c4 0c             	add    esp,0xc
c00252fa:	6a 00                	push   0x0
c00252fc:	6a 00                	push   0x0
c00252fe:	6a 00                	push   0x0
c0025300:	6a 00                	push   0x0
c0025302:	6a 00                	push   0x0
c0025304:	56                   	push   esi
c0025305:	53                   	push   ebx
c0025306:	e8 89 fd ff ff       	call   c0025094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002530b:	83 c4 1c             	add    esp,0x1c
c002530e:	6a 0c                	push   0xc
c0025310:	6a 00                	push   0x0
c0025312:	56                   	push   esi
c0025313:	e8 60 b4 fd ff       	call   c0000778 <memset>
c0025318:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002531d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025322:	83 c4 0c             	add    esp,0xc
c0025325:	6a 01                	push   0x1
c0025327:	8d 44 24 16          	lea    eax,[esp+0x16]
c002532b:	50                   	push   eax
c002532c:	6a 00                	push   0x0
c002532e:	6a 00                	push   0x0
c0025330:	6a 12                	push   0x12
c0025332:	56                   	push   esi
c0025333:	53                   	push   ebx
c0025334:	e8 5b fd ff ff       	call   c0025094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025339:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002533d:	83 c4 20             	add    esp,0x20
c0025340:	83 e0 7f             	and    eax,0x7f
c0025343:	3c 70                	cmp    al,0x70
c0025345:	74 15                	je     c002535c <SATAPI::detectMedia()+0x7c>
c0025347:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002534e:	75 0c                	jne    c002535c <SATAPI::detectMedia()+0x7c>
c0025350:	83 ec 0c             	sub    esp,0xc
c0025353:	53                   	push   ebx
c0025354:	e8 0d fd ff ff       	call   c0025066 <SATAPI::diskInserted()>
c0025359:	83 c4 10             	add    esp,0x10
c002535c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025360:	83 e0 0f             	and    eax,0xf
c0025363:	3c 02                	cmp    al,0x2
c0025365:	75 1b                	jne    c0025382 <SATAPI::detectMedia()+0xa2>
c0025367:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002536c:	75 2d                	jne    c002539b <SATAPI::detectMedia()+0xbb>
c002536e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025375:	74 24                	je     c002539b <SATAPI::detectMedia()+0xbb>
c0025377:	83 ec 0c             	sub    esp,0xc
c002537a:	53                   	push   ebx
c002537b:	e8 ca fc ff ff       	call   c002504a <SATAPI::diskRemoved()>
c0025380:	eb 16                	jmp    c0025398 <SATAPI::detectMedia()+0xb8>
c0025382:	84 c0                	test   al,al
c0025384:	75 15                	jne    c002539b <SATAPI::detectMedia()+0xbb>
c0025386:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002538d:	75 0c                	jne    c002539b <SATAPI::detectMedia()+0xbb>
c002538f:	83 ec 0c             	sub    esp,0xc
c0025392:	53                   	push   ebx
c0025393:	e8 ce fc ff ff       	call   c0025066 <SATAPI::diskInserted()>
c0025398:	83 c4 10             	add    esp,0x10
c002539b:	83 c4 24             	add    esp,0x24
c002539e:	5b                   	pop    ebx
c002539f:	5e                   	pop    esi
c00253a0:	c3                   	ret    
c00253a1:	90                   	nop

c00253a2 <SATAPI::open(int, int, void*)>:
c00253a2:	56                   	push   esi
c00253a3:	53                   	push   ebx
c00253a4:	50                   	push   eax
c00253a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253ad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253b7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253bd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253cb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253d5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253db:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253e2:	e8 fb aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253e7:	89 c6                	mov    esi,eax
c00253e9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253ef:	81 c6 00 10 00 00    	add    esi,0x1000
c00253f5:	e8 e8 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253fa:	39 c6                	cmp    esi,eax
c00253fc:	74 10                	je     c002540e <SATAPI::open(int, int, void*)+0x6c>
c00253fe:	83 ec 0c             	sub    esp,0xc
c0025401:	68 3f d1 02 c0       	push   0xc002d13f
c0025406:	e8 c2 51 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c002540b:	83 c4 10             	add    esp,0x10
c002540e:	83 ec 0c             	sub    esp,0xc
c0025411:	6a 02                	push   0x2
c0025413:	e8 73 c7 fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0025418:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002541e:	e8 03 ca fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0025423:	6a 03                	push   0x3
c0025425:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002542b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025431:	50                   	push   eax
c0025432:	e8 2b cf fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025437:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002543e:	83 c4 14             	add    esp,0x14
c0025441:	53                   	push   ebx
c0025442:	e8 99 fe ff ff       	call   c00252e0 <SATAPI::detectMedia()>
c0025447:	83 c4 14             	add    esp,0x14
c002544a:	31 c0                	xor    eax,eax
c002544c:	5b                   	pop    ebx
c002544d:	5e                   	pop    esi
c002544e:	c3                   	ret    
c002544f:	90                   	nop

c0025450 <SATAPI::read(unsigned long long, int, void*)>:
c0025450:	55                   	push   ebp
c0025451:	57                   	push   edi
c0025452:	56                   	push   esi
c0025453:	53                   	push   ebx
c0025454:	83 ec 1c             	sub    esp,0x1c
c0025457:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002545b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002545f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025463:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002546a:	74 19                	je     c0025485 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002546c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025471:	7e 2e                	jle    c00254a1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025473:	83 ec 0c             	sub    esp,0xc
c0025476:	68 55 d1 02 c0       	push   0xc002d155
c002547b:	e8 4d 51 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0025480:	83 c4 10             	add    esp,0x10
c0025483:	eb 1c                	jmp    c00254a1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025485:	83 ec 0c             	sub    esp,0xc
c0025488:	55                   	push   ebp
c0025489:	e8 52 fe ff ff       	call   c00252e0 <SATAPI::detectMedia()>
c002548e:	83 c4 10             	add    esp,0x10
c0025491:	b8 02 00 00 00       	mov    eax,0x2
c0025496:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002549d:	75 cd                	jne    c002546c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002549f:	eb 49                	jmp    c00254ea <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254a1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254a5:	b9 03 00 00 00       	mov    ecx,0x3
c00254aa:	fc                   	cld    
c00254ab:	31 c0                	xor    eax,eax
c00254ad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254af:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254b4:	89 d8                	mov    eax,ebx
c00254b6:	86 e0                	xchg   al,ah
c00254b8:	c1 c0 10             	rol    eax,0x10
c00254bb:	86 e0                	xchg   al,ah
c00254bd:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254c1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254c5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254c9:	50                   	push   eax
c00254ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254d2:	56                   	push   esi
c00254d3:	53                   	push   ebx
c00254d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254d8:	c1 e0 0b             	shl    eax,0xb
c00254db:	50                   	push   eax
c00254dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254e0:	50                   	push   eax
c00254e1:	55                   	push   ebp
c00254e2:	e8 ad fb ff ff       	call   c0025094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254e7:	83 c4 20             	add    esp,0x20
c00254ea:	83 c4 1c             	add    esp,0x1c
c00254ed:	5b                   	pop    ebx
c00254ee:	5e                   	pop    esi
c00254ef:	5f                   	pop    edi
c00254f0:	5d                   	pop    ebp
c00254f1:	c3                   	ret    

c00254f2 <AVX::open(int, int, void*)>:
c00254f2:	83 ec 0c             	sub    esp,0xc
c00254f5:	e8 3e 11 00 00       	call   c0026638 <avxInit>
c00254fa:	b8 00 00 00 00       	mov    eax,0x0
c00254ff:	83 c4 0c             	add    esp,0xc
c0025502:	c3                   	ret    
c0025503:	90                   	nop

c0025504 <AVX::close(int, int, void*)>:
c0025504:	83 ec 0c             	sub    esp,0xc
c0025507:	e8 2d 11 00 00       	call   c0026639 <avxClose>
c002550c:	b8 00 00 00 00       	mov    eax,0x0
c0025511:	83 c4 0c             	add    esp,0xc
c0025514:	c3                   	ret    
c0025515:	90                   	nop

c0025516 <AVX::available()>:
c0025516:	83 ec 0c             	sub    esp,0xc
c0025519:	e8 12 11 00 00       	call   c0026630 <avxDetect>
c002551e:	85 c0                	test   eax,eax
c0025520:	0f 95 c0             	setne  al
c0025523:	83 c4 0c             	add    esp,0xc
c0025526:	c3                   	ret    
c0025527:	90                   	nop

c0025528 <AVX::save(void*)>:
c0025528:	83 ec 0c             	sub    esp,0xc
c002552b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002552f:	83 ec 0c             	sub    esp,0xc
c0025532:	50                   	push   eax
c0025533:	e8 fe 10 00 00       	call   c0026636 <avxSave>
c0025538:	83 c4 10             	add    esp,0x10
c002553b:	90                   	nop
c002553c:	83 c4 0c             	add    esp,0xc
c002553f:	c3                   	ret    

c0025540 <AVX::load(void*)>:
c0025540:	83 ec 0c             	sub    esp,0xc
c0025543:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025547:	83 ec 0c             	sub    esp,0xc
c002554a:	50                   	push   eax
c002554b:	e8 e7 10 00 00       	call   c0026637 <avxLoad>
c0025550:	83 c4 10             	add    esp,0x10
c0025553:	90                   	nop
c0025554:	83 c4 0c             	add    esp,0xc
c0025557:	c3                   	ret    

c0025558 <AVX::AVX()>:
c0025558:	83 ec 0c             	sub    esp,0xc
c002555b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555f:	83 ec 08             	sub    esp,0x8
c0025562:	68 b8 d1 02 c0       	push   0xc002d1b8
c0025567:	50                   	push   eax
c0025568:	e8 e7 f2 fe ff       	call   c0014854 <FPU::FPU(char const*)>
c002556d:	83 c4 10             	add    esp,0x10
c0025570:	ba c8 d1 02 c0       	mov    edx,0xc002d1c8
c0025575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025579:	89 10                	mov    DWORD PTR [eax],edx
c002557b:	90                   	nop
c002557c:	83 c4 0c             	add    esp,0xc
c002557f:	c3                   	ret    

c0025580 <MMX::available()>:
c0025580:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0025585:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002558b:	83 e0 20             	and    eax,0x20
c002558e:	84 c0                	test   al,al
c0025590:	0f 95 c0             	setne  al
c0025593:	c3                   	ret    

c0025594 <MMX::open(int, int, void*)>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	e8 20 11 00 00       	call   c00266bc <x87Init>
c002559c:	b8 00 00 00 00       	mov    eax,0x0
c00255a1:	83 c4 0c             	add    esp,0xc
c00255a4:	c3                   	ret    
c00255a5:	90                   	nop

c00255a6 <MMX::close(int, int, void*)>:
c00255a6:	83 ec 0c             	sub    esp,0xc
c00255a9:	e8 28 11 00 00       	call   c00266d6 <x87Close>
c00255ae:	b8 00 00 00 00       	mov    eax,0x0
c00255b3:	83 c4 0c             	add    esp,0xc
c00255b6:	c3                   	ret    
c00255b7:	90                   	nop

c00255b8 <MMX::save(void*)>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255bf:	83 ec 0c             	sub    esp,0xc
c00255c2:	50                   	push   eax
c00255c3:	e8 e9 10 00 00       	call   c00266b1 <x87Save>
c00255c8:	83 c4 10             	add    esp,0x10
c00255cb:	90                   	nop
c00255cc:	83 c4 0c             	add    esp,0xc
c00255cf:	c3                   	ret    

c00255d0 <MMX::load(void*)>:
c00255d0:	83 ec 0c             	sub    esp,0xc
c00255d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255d7:	83 ec 0c             	sub    esp,0xc
c00255da:	50                   	push   eax
c00255db:	e8 d7 10 00 00       	call   c00266b7 <x87Load>
c00255e0:	83 c4 10             	add    esp,0x10
c00255e3:	90                   	nop
c00255e4:	83 c4 0c             	add    esp,0xc
c00255e7:	c3                   	ret    

c00255e8 <MMX::MMX()>:
c00255e8:	83 ec 0c             	sub    esp,0xc
c00255eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ef:	83 ec 08             	sub    esp,0x8
c00255f2:	68 f8 d1 02 c0       	push   0xc002d1f8
c00255f7:	50                   	push   eax
c00255f8:	e8 57 f2 fe ff       	call   c0014854 <FPU::FPU(char const*)>
c00255fd:	83 c4 10             	add    esp,0x10
c0025600:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c0025605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025609:	89 10                	mov    DWORD PTR [eax],edx
c002560b:	90                   	nop
c002560c:	83 c4 0c             	add    esp,0xc
c002560f:	c3                   	ret    

c0025610 <SSE::open(int, int, void*)>:
c0025610:	83 ec 0c             	sub    esp,0xc
c0025613:	e8 5c 10 00 00       	call   c0026674 <sseInit>
c0025618:	b8 00 00 00 00       	mov    eax,0x0
c002561d:	83 c4 0c             	add    esp,0xc
c0025620:	c3                   	ret    
c0025621:	90                   	nop

c0025622 <SSE::close(int, int, void*)>:
c0025622:	83 ec 0c             	sub    esp,0xc
c0025625:	e8 5a 10 00 00       	call   c0026684 <sseClose>
c002562a:	b8 00 00 00 00       	mov    eax,0x0
c002562f:	83 c4 0c             	add    esp,0xc
c0025632:	c3                   	ret    
c0025633:	90                   	nop

c0025634 <SSE::available()>:
c0025634:	83 ec 1c             	sub    esp,0x1c
c0025637:	e8 14 10 00 00       	call   c0026650 <absolutelyNoChanceInHell>
c002563c:	85 c0                	test   eax,eax
c002563e:	0f 95 c0             	setne  al
c0025641:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025645:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025649:	83 c4 1c             	add    esp,0x1c
c002564c:	c3                   	ret    
c002564d:	90                   	nop

c002564e <SSE::save(void*)>:
c002564e:	83 ec 0c             	sub    esp,0xc
c0025651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025655:	83 ec 0c             	sub    esp,0xc
c0025658:	50                   	push   eax
c0025659:	e8 0a 10 00 00       	call   c0026668 <sseSave>
c002565e:	83 c4 10             	add    esp,0x10
c0025661:	90                   	nop
c0025662:	83 c4 0c             	add    esp,0xc
c0025665:	c3                   	ret    

c0025666 <SSE::load(void*)>:
c0025666:	83 ec 0c             	sub    esp,0xc
c0025669:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002566d:	83 ec 0c             	sub    esp,0xc
c0025670:	50                   	push   eax
c0025671:	e8 f8 0f 00 00       	call   c002666e <sseLoad>
c0025676:	83 c4 10             	add    esp,0x10
c0025679:	90                   	nop
c002567a:	83 c4 0c             	add    esp,0xc
c002567d:	c3                   	ret    

c002567e <SSE::SSE()>:
c002567e:	83 ec 0c             	sub    esp,0xc
c0025681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025685:	83 ec 08             	sub    esp,0x8
c0025688:	68 38 d2 02 c0       	push   0xc002d238
c002568d:	50                   	push   eax
c002568e:	e8 c1 f1 fe ff       	call   c0014854 <FPU::FPU(char const*)>
c0025693:	83 c4 10             	add    esp,0x10
c0025696:	ba 48 d2 02 c0       	mov    edx,0xc002d248
c002569b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002569f:	89 10                	mov    DWORD PTR [eax],edx
c00256a1:	90                   	nop
c00256a2:	83 c4 0c             	add    esp,0xc
c00256a5:	c3                   	ret    

c00256a6 <x87::open(int, int, void*)>:
c00256a6:	83 ec 0c             	sub    esp,0xc
c00256a9:	e8 0e 10 00 00       	call   c00266bc <x87Init>
c00256ae:	b8 00 00 00 00       	mov    eax,0x0
c00256b3:	83 c4 0c             	add    esp,0xc
c00256b6:	c3                   	ret    
c00256b7:	90                   	nop

c00256b8 <x87::close(int, int, void*)>:
c00256b8:	83 ec 0c             	sub    esp,0xc
c00256bb:	e8 16 10 00 00       	call   c00266d6 <x87Close>
c00256c0:	b8 00 00 00 00       	mov    eax,0x0
c00256c5:	83 c4 0c             	add    esp,0xc
c00256c8:	c3                   	ret    
c00256c9:	90                   	nop

c00256ca <x87::available()>:
c00256ca:	83 ec 0c             	sub    esp,0xc
c00256cd:	e8 c4 0f 00 00       	call   c0026696 <x87Detect>
c00256d2:	85 c0                	test   eax,eax
c00256d4:	0f 95 c0             	setne  al
c00256d7:	83 c4 0c             	add    esp,0xc
c00256da:	c3                   	ret    
c00256db:	90                   	nop

c00256dc <x87::save(void*)>:
c00256dc:	83 ec 0c             	sub    esp,0xc
c00256df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256e3:	83 ec 0c             	sub    esp,0xc
c00256e6:	50                   	push   eax
c00256e7:	e8 c5 0f 00 00       	call   c00266b1 <x87Save>
c00256ec:	83 c4 10             	add    esp,0x10
c00256ef:	90                   	nop
c00256f0:	83 c4 0c             	add    esp,0xc
c00256f3:	c3                   	ret    

c00256f4 <x87::load(void*)>:
c00256f4:	83 ec 0c             	sub    esp,0xc
c00256f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256fb:	83 ec 0c             	sub    esp,0xc
c00256fe:	50                   	push   eax
c00256ff:	e8 b3 0f 00 00       	call   c00266b7 <x87Load>
c0025704:	83 c4 10             	add    esp,0x10
c0025707:	90                   	nop
c0025708:	83 c4 0c             	add    esp,0xc
c002570b:	c3                   	ret    

c002570c <x87::x87()>:
c002570c:	83 ec 0c             	sub    esp,0xc
c002570f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025713:	83 ec 08             	sub    esp,0x8
c0025716:	68 78 d2 02 c0       	push   0xc002d278
c002571b:	50                   	push   eax
c002571c:	e8 33 f1 fe ff       	call   c0014854 <FPU::FPU(char const*)>
c0025721:	83 c4 10             	add    esp,0x10
c0025724:	ba 88 d2 02 c0       	mov    edx,0xc002d288
c0025729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572d:	89 10                	mov    DWORD PTR [eax],edx
c002572f:	90                   	nop
c0025730:	83 c4 0c             	add    esp,0xc
c0025733:	c3                   	ret    

c0025734 <APIC::disable()>:
c0025734:	90                   	nop
c0025735:	c3                   	ret    

c0025736 <APIC::close(int, int, void*)>:
c0025736:	55                   	push   ebp
c0025737:	89 e5                	mov    ebp,esp
c0025739:	83 ec 08             	sub    esp,0x8
c002573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002573f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025741:	83 c0 3c             	add    eax,0x3c
c0025744:	8b 00                	mov    eax,DWORD PTR [eax]
c0025746:	83 ec 0c             	sub    esp,0xc
c0025749:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002574c:	ff d0                	call   eax
c002574e:	83 c4 10             	add    esp,0x10
c0025751:	b8 00 00 00 00       	mov    eax,0x0
c0025756:	c9                   	leave  
c0025757:	c3                   	ret    

c0025758 <IOAPIC::close(int, int, void*)>:
c0025758:	b8 00 00 00 00       	mov    eax,0x0
c002575d:	c3                   	ret    

c002575e <APIC::io_wait()>:
c002575e:	eb 00                	jmp    c0025760 <APIC::io_wait()+0x2>
c0025760:	eb 00                	jmp    c0025762 <APIC::io_wait()+0x4>
c0025762:	90                   	nop
c0025763:	c3                   	ret    

c0025764 <APIC::getBase()>:
c0025764:	55                   	push   ebp
c0025765:	89 e5                	mov    ebp,esp
c0025767:	83 ec 18             	sub    esp,0x18
c002576a:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c002576f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025775:	83 e0 08             	and    eax,0x8
c0025778:	84 c0                	test   al,al
c002577a:	75 07                	jne    c0025783 <APIC::getBase()+0x1f>
c002577c:	b8 00 00 00 00       	mov    eax,0x0
c0025781:	eb 21                	jmp    c00257a4 <APIC::getBase()+0x40>
c0025783:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0025788:	83 ec 08             	sub    esp,0x8
c002578b:	6a 1b                	push   0x1b
c002578d:	50                   	push   eax
c002578e:	e8 55 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025793:	83 c4 10             	add    esp,0x10
c0025796:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025799:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002579c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002579f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257a4:	c9                   	leave  
c00257a5:	c3                   	ret    

c00257a6 <APIC::eoi(unsigned char)>:
c00257a6:	55                   	push   ebp
c00257a7:	89 e5                	mov    ebp,esp
c00257a9:	83 ec 28             	sub    esp,0x28
c00257ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257b2:	83 ec 0c             	sub    esp,0xc
c00257b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257b8:	e8 a7 ff ff ff       	call   c0025764 <APIC::getBase()>
c00257bd:	83 c4 10             	add    esp,0x10
c00257c0:	05 b0 00 00 00       	add    eax,0xb0
c00257c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257cb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257d1:	90                   	nop
c00257d2:	c9                   	leave  
c00257d3:	c3                   	ret    

c00257d4 <APIC::open(int, int, void*)>:
c00257d4:	55                   	push   ebp
c00257d5:	89 e5                	mov    ebp,esp
c00257d7:	57                   	push   edi
c00257d8:	56                   	push   esi
c00257d9:	53                   	push   ebx
c00257da:	83 ec 2c             	sub    esp,0x2c
c00257dd:	83 ec 0c             	sub    esp,0xc
c00257e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257e3:	e8 7c ff ff ff       	call   c0025764 <APIC::getBase()>
c00257e8:	83 c4 10             	add    esp,0x10
c00257eb:	89 c2                	mov    edx,eax
c00257ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257f6:	0f b6 f8             	movzx  edi,al
c00257f9:	89 d0                	mov    eax,edx
c00257fb:	ba 00 00 00 00       	mov    edx,0x0
c0025800:	89 c1                	mov    ecx,eax
c0025802:	80 e5 ff             	and    ch,0xff
c0025805:	89 cb                	mov    ebx,ecx
c0025807:	0f b6 f2             	movzx  esi,dl
c002580a:	89 d8                	mov    eax,ebx
c002580c:	89 f2                	mov    edx,esi
c002580e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025811:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025814:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025818:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002581c:	83 e0 00             	and    eax,0x0
c002581f:	09 d0                	or     eax,edx
c0025821:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025828:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002582e:	8d 50 01             	lea    edx,[eax+0x1]
c0025831:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025834:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002583a:	0f b6 d0             	movzx  edx,al
c002583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025840:	83 c2 08             	add    edx,0x8
c0025843:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025847:	0f b6 c9             	movzx  ecx,cl
c002584a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025850:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025854:	83 ec 0c             	sub    esp,0xc
c0025857:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585a:	e8 05 ff ff ff       	call   c0025764 <APIC::getBase()>
c002585f:	83 c4 10             	add    esp,0x10
c0025862:	05 f0 00 00 00       	add    eax,0xf0
c0025867:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002586a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002586d:	8b 00                	mov    eax,DWORD PTR [eax]
c002586f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025872:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025879:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025880:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025883:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025886:	89 10                	mov    DWORD PTR [eax],edx
c0025888:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002588f:	a1 d0 0e 03 c0       	mov    eax,ds:0xc0030ed0
c0025894:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025897:	7d 7c                	jge    c0025915 <APIC::open(int, int, void*)+0x141>
c0025899:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002589c:	8b 04 85 e0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf120]
c00258a3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258a9:	8b 04 85 e0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf120]
c00258b0:	c1 e8 08             	shr    eax,0x8
c00258b3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258ba:	8b 04 85 e0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf120]
c00258c1:	c1 e8 18             	shr    eax,0x18
c00258c4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258c7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258cb:	75 40                	jne    c002590d <APIC::open(int, int, void*)+0x139>
c00258cd:	83 ec 0c             	sub    esp,0xc
c00258d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258d3:	e8 8c fe ff ff       	call   c0025764 <APIC::getBase()>
c00258d8:	83 c4 10             	add    esp,0x10
c00258db:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258df:	75 07                	jne    c00258e8 <APIC::open(int, int, void*)+0x114>
c00258e1:	ba 60 03 00 00       	mov    edx,0x360
c00258e6:	eb 05                	jmp    c00258ed <APIC::open(int, int, void*)+0x119>
c00258e8:	ba 50 03 00 00       	mov    edx,0x350
c00258ed:	01 d0                	add    eax,edx
c00258ef:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258f2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00258f7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258fa:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025901:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025905:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025908:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002590b:	89 10                	mov    DWORD PTR [eax],edx
c002590d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025910:	e9 7a ff ff ff       	jmp    c002588f <APIC::open(int, int, void*)+0xbb>
c0025915:	b8 00 00 00 00       	mov    eax,0x0
c002591a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002591d:	5b                   	pop    ebx
c002591e:	5e                   	pop    esi
c002591f:	5f                   	pop    edi
c0025920:	5d                   	pop    ebp
c0025921:	c3                   	ret    

c0025922 <IOAPIC::IOAPIC()>:
c0025922:	83 ec 0c             	sub    esp,0xc
c0025925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025929:	83 ec 08             	sub    esp,0x8
c002592c:	68 b8 d2 02 c0       	push   0xc002d2b8
c0025931:	50                   	push   eax
c0025932:	e8 0b ec fe ff       	call   c0014542 <Device::Device(char const*)>
c0025937:	83 c4 10             	add    esp,0x10
c002593a:	ba e0 d3 02 c0       	mov    edx,0xc002d3e0
c002593f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025943:	89 10                	mov    DWORD PTR [eax],edx
c0025945:	90                   	nop
c0025946:	83 c4 0c             	add    esp,0xc
c0025949:	c3                   	ret    

c002594a <APIC::APIC()>:
c002594a:	53                   	push   ebx
c002594b:	83 ec 18             	sub    esp,0x18
c002594e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025952:	83 ec 08             	sub    esp,0x8
c0025955:	68 c0 d2 02 c0       	push   0xc002d2c0
c002595a:	50                   	push   eax
c002595b:	e8 4e f3 fe ff       	call   c0014cae <InterruptController::InterruptController(char const*)>
c0025960:	83 c4 10             	add    esp,0x10
c0025963:	ba 98 d3 02 c0       	mov    edx,0xc002d398
c0025968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002596c:	89 10                	mov    DWORD PTR [eax],edx
c002596e:	a0 a0 29 03 c0       	mov    al,ds:0xc00329a0
c0025973:	83 f0 01             	xor    eax,0x1
c0025976:	84 c0                	test   al,al
c0025978:	0f 84 a1 00 00 00    	je     c0025a1f <APIC::APIC()+0xd5>
c002597e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025983:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c0025988:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002598c:	0f 83 86 00 00 00    	jae    c0025a18 <APIC::APIC()+0xce>
c0025992:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002599a:	83 ec 0c             	sub    esp,0xc
c002599d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259a1:	e8 9a 9e fe ff       	call   c000f840 <malloc>
c00259a6:	83 c4 10             	add    esp,0x10
c00259a9:	89 c3                	mov    ebx,eax
c00259ab:	83 ec 0c             	sub    esp,0xc
c00259ae:	53                   	push   ebx
c00259af:	e8 6e ff ff ff       	call   c0025922 <IOAPIC::IOAPIC()>
c00259b4:	83 c4 10             	add    esp,0x10
c00259b7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259bb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259c4:	89 14 85 80 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd680],edx
c00259cb:	a1 60 29 03 c0       	mov    eax,ds:0xc0032960
c00259d0:	40                   	inc    eax
c00259d1:	a3 60 29 03 c0       	mov    ds:0xc0032960,eax
c00259d6:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00259db:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259e1:	83 ec 08             	sub    esp,0x8
c00259e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259e8:	50                   	push   eax
c00259e9:	e8 64 e9 fe ff       	call   c0014352 <Device::addChild(Device*)>
c00259ee:	83 c4 10             	add    esp,0x10
c00259f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00259f7:	83 c0 08             	add    eax,0x8
c00259fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00259fc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a01:	6a 00                	push   0x0
c0025a03:	6a 00                	push   0x0
c0025a05:	52                   	push   edx
c0025a06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a0a:	ff d0                	call   eax
c0025a0c:	83 c4 10             	add    esp,0x10
c0025a0f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a13:	e9 6b ff ff ff       	jmp    c0025983 <APIC::APIC()+0x39>
c0025a18:	c6 05 a0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329a0,0x1
c0025a1f:	90                   	nop
c0025a20:	83 c4 18             	add    esp,0x18
c0025a23:	5b                   	pop    ebx
c0025a24:	c3                   	ret    
c0025a25:	90                   	nop

c0025a26 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a26:	55                   	push   ebp
c0025a27:	89 e5                	mov    ebp,esp
c0025a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a32:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a35:	72 1d                	jb     c0025a54 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a43:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a49:	01 d0                	add    eax,edx
c0025a4b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a4e:	73 04                	jae    c0025a54 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a50:	b0 01                	mov    al,0x1
c0025a52:	eb 02                	jmp    c0025a56 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a54:	b0 00                	mov    al,0x0
c0025a56:	5d                   	pop    ebp
c0025a57:	c3                   	ret    

c0025a58 <IOAPIC::read(int)>:
c0025a58:	55                   	push   ebp
c0025a59:	89 e5                	mov    ebp,esp
c0025a5b:	83 ec 10             	sub    esp,0x10
c0025a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a67:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a6d:	0f b6 d0             	movzx  edx,al
c0025a70:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a73:	89 10                	mov    DWORD PTR [eax],edx
c0025a75:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a78:	83 c0 10             	add    eax,0x10
c0025a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a7d:	c9                   	leave  
c0025a7e:	c3                   	ret    
c0025a7f:	90                   	nop

c0025a80 <IOAPIC::open(int, int, void*)>:
c0025a80:	55                   	push   ebp
c0025a81:	89 e5                	mov    ebp,esp
c0025a83:	57                   	push   edi
c0025a84:	56                   	push   esi
c0025a85:	53                   	push   ebx
c0025a86:	83 ec 0c             	sub    esp,0xc
c0025a89:	83 ec 0c             	sub    esp,0xc
c0025a8c:	68 eb d2 02 c0       	push   0xc002d2eb
c0025a91:	e8 96 d4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0025a96:	83 c4 10             	add    esp,0x10
c0025a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aae:	8b 14 85 c0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf040]
c0025ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ac7:	8b 14 85 40 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefc0]
c0025ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ada:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ae9:	0f b6 f8             	movzx  edi,al
c0025aec:	89 d0                	mov    eax,edx
c0025aee:	ba 00 00 00 00       	mov    edx,0x0
c0025af3:	89 c1                	mov    ecx,eax
c0025af5:	80 e5 ff             	and    ch,0xff
c0025af8:	89 cb                	mov    ebx,ecx
c0025afa:	0f b6 f2             	movzx  esi,dl
c0025afd:	89 d8                	mov    eax,ebx
c0025aff:	89 f2                	mov    edx,esi
c0025b01:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b04:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b07:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b0b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b0f:	83 e0 00             	and    eax,0x0
c0025b12:	09 d0                	or     eax,edx
c0025b14:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b1b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b21:	8d 50 01             	lea    edx,[eax+0x1]
c0025b24:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b27:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b2d:	0f b6 d0             	movzx  edx,al
c0025b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b33:	83 c2 08             	add    edx,0x8
c0025b36:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b3a:	0f b6 c9             	movzx  ecx,cl
c0025b3d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b43:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b47:	83 ec 08             	sub    esp,0x8
c0025b4a:	6a 01                	push   0x1
c0025b4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b4f:	e8 04 ff ff ff       	call   c0025a58 <IOAPIC::read(int)>
c0025b54:	83 c4 10             	add    esp,0x10
c0025b57:	c1 f8 10             	sar    eax,0x10
c0025b5a:	0f b6 c0             	movzx  eax,al
c0025b5d:	8d 50 01             	lea    edx,[eax+0x1]
c0025b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b63:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b69:	b8 00 00 00 00       	mov    eax,0x0
c0025b6e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b71:	5b                   	pop    ebx
c0025b72:	5e                   	pop    esi
c0025b73:	5f                   	pop    edi
c0025b74:	5d                   	pop    ebp
c0025b75:	c3                   	ret    

c0025b76 <IOAPIC::write(int, int)>:
c0025b76:	55                   	push   ebp
c0025b77:	89 e5                	mov    ebp,esp
c0025b79:	83 ec 10             	sub    esp,0x10
c0025b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b85:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b8b:	0f b6 d0             	movzx  edx,al
c0025b8e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b91:	89 10                	mov    DWORD PTR [eax],edx
c0025b93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b96:	8d 50 10             	lea    edx,[eax+0x10]
c0025b99:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b9c:	89 02                	mov    DWORD PTR [edx],eax
c0025b9e:	90                   	nop
c0025b9f:	c9                   	leave  
c0025ba0:	c3                   	ret    
c0025ba1:	90                   	nop

c0025ba2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025ba2:	55                   	push   ebp
c0025ba3:	89 e5                	mov    ebp,esp
c0025ba5:	53                   	push   ebx
c0025ba6:	83 ec 2c             	sub    esp,0x2c
c0025ba9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bac:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025baf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025bb2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025bb5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bb8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bbb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bbe:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bc1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bc4:	88 d8                	mov    al,bl
c0025bc6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bc9:	88 c8                	mov    al,cl
c0025bcb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bce:	88 d0                	mov    al,dl
c0025bd0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bd3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bd7:	83 c0 08             	add    eax,0x8
c0025bda:	01 c0                	add    eax,eax
c0025bdc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bdf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025be3:	83 c0 08             	add    eax,0x8
c0025be6:	01 c0                	add    eax,eax
c0025be8:	40                   	inc    eax
c0025be9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bef:	50                   	push   eax
c0025bf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf3:	e8 60 fe ff ff       	call   c0025a58 <IOAPIC::read(int)>
c0025bf8:	83 c4 08             	add    esp,0x8
c0025bfb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025bfe:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c05:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c08:	c1 e0 18             	shl    eax,0x18
c0025c0b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c0e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c11:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c14:	52                   	push   edx
c0025c15:	50                   	push   eax
c0025c16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c19:	e8 58 ff ff ff       	call   c0025b76 <IOAPIC::write(int, int)>
c0025c1e:	83 c4 0c             	add    esp,0xc
c0025c21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c24:	50                   	push   eax
c0025c25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c28:	e8 2b fe ff ff       	call   c0025a58 <IOAPIC::read(int)>
c0025c2d:	83 c4 08             	add    esp,0x8
c0025c30:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c33:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c3a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c41:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c48:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c4c:	74 09                	je     c0025c57 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c4e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c55:	eb 07                	jmp    c0025c5e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c57:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c5e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c62:	74 09                	je     c0025c6d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c64:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c6b:	eb 07                	jmp    c0025c74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c6d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c74:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c7b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c7f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c82:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c88:	52                   	push   edx
c0025c89:	50                   	push   eax
c0025c8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c8d:	e8 e4 fe ff ff       	call   c0025b76 <IOAPIC::write(int, int)>
c0025c92:	83 c4 0c             	add    esp,0xc
c0025c95:	90                   	nop
c0025c96:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c99:	c9                   	leave  
c0025c9a:	c3                   	ret    
c0025c9b:	90                   	nop

c0025c9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c9c:	55                   	push   ebp
c0025c9d:	89 e5                	mov    ebp,esp
c0025c9f:	57                   	push   edi
c0025ca0:	56                   	push   esi
c0025ca1:	53                   	push   ebx
c0025ca2:	83 ec 2c             	sub    esp,0x2c
c0025ca5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ca8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cab:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025caf:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025cb3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cb7:	74 5a                	je     c0025d13 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cb9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025cbd:	7f 44                	jg     c0025d03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025cbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cc2:	05 40 d8 02 c0       	add    eax,0xc002d840
c0025cc7:	8a 00                	mov    al,BYTE PTR [eax]
c0025cc9:	0f b6 c0             	movzx  eax,al
c0025ccc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025ccf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd2:	66 8b 84 00 60 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0a0]
c0025cda:	0f b7 c0             	movzx  eax,ax
c0025cdd:	83 e0 02             	and    eax,0x2
c0025ce0:	85 c0                	test   eax,eax
c0025ce2:	74 04                	je     c0025ce8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025ce4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025ce8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ceb:	66 8b 84 00 60 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0a0]
c0025cf3:	0f b7 c0             	movzx  eax,ax
c0025cf6:	83 e0 08             	and    eax,0x8
c0025cf9:	85 c0                	test   eax,eax
c0025cfb:	74 16                	je     c0025d13 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cfd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d01:	eb 10                	jmp    c0025d13 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d03:	83 ec 0c             	sub    esp,0xc
c0025d06:	68 fc d2 02 c0       	push   0xc002d2fc
c0025d0b:	e8 bd 48 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0025d10:	83 c4 10             	add    esp,0x10
c0025d13:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d17:	a1 60 29 03 c0       	mov    eax,ds:0xc0032960
c0025d1c:	83 ec 08             	sub    esp,0x8
c0025d1f:	50                   	push   eax
c0025d20:	68 34 d3 02 c0       	push   0xc002d334
c0025d25:	e8 02 d2 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0025d2a:	83 c4 10             	add    esp,0x10
c0025d2d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d34:	a1 60 29 03 c0       	mov    eax,ds:0xc0032960
c0025d39:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d3c:	7d 67                	jge    c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d3e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d41:	8b 04 85 80 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd680]
c0025d48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d4b:	83 ec 08             	sub    esp,0x8
c0025d4e:	52                   	push   edx
c0025d4f:	50                   	push   eax
c0025d50:	e8 d1 fc ff ff       	call   c0025a26 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d55:	83 c4 10             	add    esp,0x10
c0025d58:	84 c0                	test   al,al
c0025d5a:	74 44                	je     c0025da0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d5c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d5f:	8b 1c 85 80 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd680]
c0025d66:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d6a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d6d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d74:	83 c0 20             	add    eax,0x20
c0025d77:	0f b6 f0             	movzx  esi,al
c0025d7a:	b8 00 00 00 00       	mov    eax,0x0
c0025d7f:	99                   	cdq    
c0025d80:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d83:	0f b6 c9             	movzx  ecx,cl
c0025d86:	83 ec 04             	sub    esp,0x4
c0025d89:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d8c:	57                   	push   edi
c0025d8d:	56                   	push   esi
c0025d8e:	52                   	push   edx
c0025d8f:	50                   	push   eax
c0025d90:	51                   	push   ecx
c0025d91:	53                   	push   ebx
c0025d92:	e8 0b fe ff ff       	call   c0025ba2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d97:	83 c4 20             	add    esp,0x20
c0025d9a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d9e:	eb 05                	jmp    c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025da0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025da3:	eb 8f                	jmp    c0025d34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025da5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025da8:	83 f0 01             	xor    eax,0x1
c0025dab:	84 c0                	test   al,al
c0025dad:	74 10                	je     c0025dbf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025daf:	83 ec 0c             	sub    esp,0xc
c0025db2:	68 4b d3 02 c0       	push   0xc002d34b
c0025db7:	e8 11 48 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0025dbc:	83 c4 10             	add    esp,0x10
c0025dbf:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025dc3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025dca:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025dce:	7f 65                	jg     c0025e35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dd6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ddd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025de0:	01 ca                	add    edx,ecx
c0025de2:	83 c2 54             	add    edx,0x54
c0025de5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025de9:	85 c0                	test   eax,eax
c0025deb:	75 43                	jne    c0025e30 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025df3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dfa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dfd:	01 ca                	add    edx,ecx
c0025dff:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e02:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e05:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e0c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e0f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e16:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e19:	01 ca                	add    edx,ecx
c0025e1b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e21:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e24:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e2b:	83 e8 20             	sub    eax,0x20
c0025e2e:	eb 1a                	jmp    c0025e4a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e30:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e33:	eb 95                	jmp    c0025dca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e35:	83 ec 0c             	sub    esp,0xc
c0025e38:	68 58 d3 02 c0       	push   0xc002d358
c0025e3d:	e8 8b 47 ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0025e42:	83 c4 10             	add    esp,0x10
c0025e45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e4a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e4d:	5b                   	pop    ebx
c0025e4e:	5e                   	pop    esi
c0025e4f:	5f                   	pop    edi
c0025e50:	5d                   	pop    ebp
c0025e51:	c3                   	ret    

c0025e52 <PIC::disable()>:
c0025e52:	55                   	push   ebp
c0025e53:	89 e5                	mov    ebp,esp
c0025e55:	83 ec 10             	sub    esp,0x10
c0025e58:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e5e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e62:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e65:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e69:	ee                   	out    dx,al
c0025e6a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e70:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e74:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e77:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e7b:	ee                   	out    dx,al
c0025e7c:	90                   	nop
c0025e7d:	c9                   	leave  
c0025e7e:	c3                   	ret    
c0025e7f:	90                   	nop

c0025e80 <PIC::close(int, int, void*)>:
c0025e80:	55                   	push   ebp
c0025e81:	89 e5                	mov    ebp,esp
c0025e83:	83 ec 08             	sub    esp,0x8
c0025e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e89:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e8b:	83 c0 3c             	add    eax,0x3c
c0025e8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e90:	83 ec 0c             	sub    esp,0xc
c0025e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e96:	ff d0                	call   eax
c0025e98:	83 c4 10             	add    esp,0x10
c0025e9b:	b8 00 00 00 00       	mov    eax,0x0
c0025ea0:	c9                   	leave  
c0025ea1:	c3                   	ret    

c0025ea2 <PIC::PIC()>:
c0025ea2:	83 ec 0c             	sub    esp,0xc
c0025ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea9:	83 ec 08             	sub    esp,0x8
c0025eac:	68 04 d4 02 c0       	push   0xc002d404
c0025eb1:	50                   	push   eax
c0025eb2:	e8 f7 ed fe ff       	call   c0014cae <InterruptController::InterruptController(char const*)>
c0025eb7:	83 c4 10             	add    esp,0x10
c0025eba:	ba 30 d4 02 c0       	mov    edx,0xc002d430
c0025ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec3:	89 10                	mov    DWORD PTR [eax],edx
c0025ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ecf:	0f b6 d0             	movzx  edx,al
c0025ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee7:	0f b6 d0             	movzx  edx,al
c0025eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eee:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025efd:	8d 50 01             	lea    edx,[eax+0x1]
c0025f00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f04:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f0a:	0f b6 d0             	movzx  edx,al
c0025f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f11:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f15:	83 e1 3f             	and    ecx,0x3f
c0025f18:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f26:	0f b6 d0             	movzx  edx,al
c0025f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f3e:	0f b6 d0             	movzx  edx,al
c0025f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f45:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f54:	8d 50 01             	lea    edx,[eax+0x1]
c0025f57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f5b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f61:	0f b6 d0             	movzx  edx,al
c0025f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f68:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f6c:	83 e1 3f             	and    ecx,0x3f
c0025f6f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f73:	90                   	nop
c0025f74:	83 c4 0c             	add    esp,0xc
c0025f77:	c3                   	ret    

c0025f78 <PIC::ioWait()>:
c0025f78:	eb 00                	jmp    c0025f7a <PIC::ioWait()+0x2>
c0025f7a:	eb 00                	jmp    c0025f7c <PIC::ioWait()+0x4>
c0025f7c:	90                   	nop
c0025f7d:	c3                   	ret    

c0025f7e <PIC::getIRQReg(int)>:
c0025f7e:	55                   	push   ebp
c0025f7f:	89 e5                	mov    ebp,esp
c0025f81:	83 ec 10             	sub    esp,0x10
c0025f84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f87:	0f b6 c0             	movzx  eax,al
c0025f8a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f90:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f93:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f96:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f9a:	ee                   	out    dx,al
c0025f9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f9e:	0f b6 c0             	movzx  eax,al
c0025fa1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fa7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025faa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fb1:	ee                   	out    dx,al
c0025fb2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fb8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fbc:	89 c2                	mov    edx,eax
c0025fbe:	ec                   	in     al,dx
c0025fbf:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fc2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fc5:	0f b6 c0             	movzx  eax,al
c0025fc8:	c1 e0 08             	shl    eax,0x8
c0025fcb:	89 c1                	mov    ecx,eax
c0025fcd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fd3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fd7:	89 c2                	mov    edx,eax
c0025fd9:	ec                   	in     al,dx
c0025fda:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fdd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fe0:	0f b6 c0             	movzx  eax,al
c0025fe3:	09 c8                	or     eax,ecx
c0025fe5:	c9                   	leave  
c0025fe6:	c3                   	ret    
c0025fe7:	90                   	nop

c0025fe8 <PIC::eoi(unsigned char)>:
c0025fe8:	55                   	push   ebp
c0025fe9:	89 e5                	mov    ebp,esp
c0025feb:	83 ec 14             	sub    esp,0x14
c0025fee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ff1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025ff4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ff8:	75 1e                	jne    c0026018 <PIC::eoi(unsigned char)+0x30>
c0025ffa:	6a 0b                	push   0xb
c0025ffc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fff:	e8 7a ff ff ff       	call   c0025f7e <PIC::getIRQReg(int)>
c0026004:	83 c4 08             	add    esp,0x8
c0026007:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002600b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002600f:	25 80 00 00 00       	and    eax,0x80
c0026014:	85 c0                	test   eax,eax
c0026016:	74 5f                	je     c0026077 <PIC::eoi(unsigned char)+0x8f>
c0026018:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002601c:	75 2d                	jne    c002604b <PIC::eoi(unsigned char)+0x63>
c002601e:	6a 0b                	push   0xb
c0026020:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026023:	e8 56 ff ff ff       	call   c0025f7e <PIC::getIRQReg(int)>
c0026028:	83 c4 08             	add    esp,0x8
c002602b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002602f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026032:	66 85 c0             	test   ax,ax
c0026035:	78 14                	js     c002604b <PIC::eoi(unsigned char)+0x63>
c0026037:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002603d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026041:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026044:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026048:	ee                   	out    dx,al
c0026049:	eb 2d                	jmp    c0026078 <PIC::eoi(unsigned char)+0x90>
c002604b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002604f:	76 12                	jbe    c0026063 <PIC::eoi(unsigned char)+0x7b>
c0026051:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026057:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002605b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002605e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026062:	ee                   	out    dx,al
c0026063:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026069:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002606d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026070:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026074:	ee                   	out    dx,al
c0026075:	eb 01                	jmp    c0026078 <PIC::eoi(unsigned char)+0x90>
c0026077:	90                   	nop
c0026078:	c9                   	leave  
c0026079:	c3                   	ret    

c002607a <PIC::remap()>:
c002607a:	55                   	push   ebp
c002607b:	89 e5                	mov    ebp,esp
c002607d:	83 ec 48             	sub    esp,0x48
c0026080:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026087:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002608e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026094:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026097:	89 c2                	mov    edx,eax
c0026099:	ec                   	in     al,dx
c002609a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002609d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260a0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260a3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260a9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260ac:	89 c2                	mov    edx,eax
c00260ae:	ec                   	in     al,dx
c00260af:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260b2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260b5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260b8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260be:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260c2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260c5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260c8:	ee                   	out    dx,al
c00260c9:	83 ec 0c             	sub    esp,0xc
c00260cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260cf:	e8 a4 fe ff ff       	call   c0025f78 <PIC::ioWait()>
c00260d4:	83 c4 10             	add    esp,0x10
c00260d7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260dd:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260e1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260e4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260e7:	ee                   	out    dx,al
c00260e8:	83 ec 0c             	sub    esp,0xc
c00260eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260ee:	e8 85 fe ff ff       	call   c0025f78 <PIC::ioWait()>
c00260f3:	83 c4 10             	add    esp,0x10
c00260f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260f9:	0f b6 c0             	movzx  eax,al
c00260fc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026102:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026105:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026108:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002610b:	ee                   	out    dx,al
c002610c:	83 ec 0c             	sub    esp,0xc
c002610f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026112:	e8 61 fe ff ff       	call   c0025f78 <PIC::ioWait()>
c0026117:	83 c4 10             	add    esp,0x10
c002611a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002611d:	0f b6 c0             	movzx  eax,al
c0026120:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026126:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026129:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002612c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002612f:	ee                   	out    dx,al
c0026130:	83 ec 0c             	sub    esp,0xc
c0026133:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026136:	e8 3d fe ff ff       	call   c0025f78 <PIC::ioWait()>
c002613b:	83 c4 10             	add    esp,0x10
c002613e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026144:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026148:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002614b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002614e:	ee                   	out    dx,al
c002614f:	83 ec 0c             	sub    esp,0xc
c0026152:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026155:	e8 1e fe ff ff       	call   c0025f78 <PIC::ioWait()>
c002615a:	83 c4 10             	add    esp,0x10
c002615d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026163:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026167:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002616a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002616d:	ee                   	out    dx,al
c002616e:	83 ec 0c             	sub    esp,0xc
c0026171:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026174:	e8 ff fd ff ff       	call   c0025f78 <PIC::ioWait()>
c0026179:	83 c4 10             	add    esp,0x10
c002617c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026182:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026186:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026189:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002618c:	ee                   	out    dx,al
c002618d:	83 ec 0c             	sub    esp,0xc
c0026190:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026193:	e8 e0 fd ff ff       	call   c0025f78 <PIC::ioWait()>
c0026198:	83 c4 10             	add    esp,0x10
c002619b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261a1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261a5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261a8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261ab:	ee                   	out    dx,al
c00261ac:	83 ec 0c             	sub    esp,0xc
c00261af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b2:	e8 c1 fd ff ff       	call   c0025f78 <PIC::ioWait()>
c00261b7:	83 c4 10             	add    esp,0x10
c00261ba:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261be:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261c4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261c7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261ca:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261cd:	ee                   	out    dx,al
c00261ce:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261d2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261d8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261db:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261de:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261e1:	ee                   	out    dx,al
c00261e2:	90                   	nop
c00261e3:	c9                   	leave  
c00261e4:	c3                   	ret    
c00261e5:	90                   	nop

c00261e6 <PIC::open(int, int, void*)>:
c00261e6:	55                   	push   ebp
c00261e7:	89 e5                	mov    ebp,esp
c00261e9:	83 ec 18             	sub    esp,0x18
c00261ec:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261f2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261f6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261f9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261fd:	ee                   	out    dx,al
c00261fe:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026204:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026208:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002620b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002620f:	ee                   	out    dx,al
c0026210:	83 ec 0c             	sub    esp,0xc
c0026213:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026216:	e8 5f fe ff ff       	call   c002607a <PIC::remap()>
c002621b:	83 c4 10             	add    esp,0x10
c002621e:	b8 00 00 00 00       	mov    eax,0x0
c0026223:	c9                   	leave  
c0026224:	c3                   	ret    
c0026225:	90                   	nop

c0026226 <APICTimer::close(int, int, void*)>:
c0026226:	b8 00 00 00 00       	mov    eax,0x0
c002622b:	c3                   	ret    

c002622c <apicTimerHandler(regs*, void*)>:
c002622c:	83 ec 0c             	sub    esp,0xc
c002622f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026233:	8b 00                	mov    eax,DWORD PTR [eax]
c0026235:	99                   	cdq    
c0026236:	52                   	push   edx
c0026237:	50                   	push   eax
c0026238:	6a 00                	push   0x0
c002623a:	68 00 ca 9a 3b       	push   0x3b9aca00
c002623f:	e8 88 07 00 00       	call   c00269cc <__udivdi3>
c0026244:	83 c4 10             	add    esp,0x10
c0026247:	83 ec 08             	sub    esp,0x8
c002624a:	52                   	push   edx
c002624b:	50                   	push   eax
c002624c:	e8 a8 0a ff ff       	call   c0016cf9 <timerHandler(unsigned long long)>
c0026251:	83 c4 10             	add    esp,0x10
c0026254:	90                   	nop
c0026255:	83 c4 0c             	add    esp,0xc
c0026258:	c3                   	ret    
c0026259:	90                   	nop

c002625a <APICTimer::write(int)>:
c002625a:	53                   	push   ebx
c002625b:	83 ec 28             	sub    esp,0x28
c002625e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026262:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026266:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002626c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0026271:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026277:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002627d:	83 ec 0c             	sub    esp,0xc
c0026280:	50                   	push   eax
c0026281:	e8 de f4 ff ff       	call   c0025764 <APIC::getBase()>
c0026286:	83 c4 10             	add    esp,0x10
c0026289:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002628d:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c0026292:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c0026298:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002629c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262a4:	05 e0 03 00 00       	add    eax,0x3e0
c00262a9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262b3:	05 80 03 00 00       	add    eax,0x380
c00262b8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262be:	fb                   	sti    
c00262bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262c7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262cc:	83 d2 00             	adc    edx,0x0
c00262cf:	89 c1                	mov    ecx,eax
c00262d1:	89 d3                	mov    ebx,edx
c00262d3:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c00262d8:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c00262de:	39 c8                	cmp    eax,ecx
c00262e0:	89 d0                	mov    eax,edx
c00262e2:	19 d8                	sbb    eax,ebx
c00262e4:	73 02                	jae    c00262e8 <APICTimer::write(int)+0x8e>
c00262e6:	eb d7                	jmp    c00262bf <APICTimer::write(int)+0x65>
c00262e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ec:	05 20 03 00 00       	add    eax,0x320
c00262f1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262fb:	05 90 03 00 00       	add    eax,0x390
c0026300:	8b 00                	mov    eax,DWORD PTR [eax]
c0026302:	f7 d0                	not    eax
c0026304:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026308:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002630c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026310:	ba 00 00 00 00       	mov    edx,0x0
c0026315:	f7 f3                	div    ebx
c0026317:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002631b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002631f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026325:	0d 00 00 02 00       	or     eax,0x20000
c002632a:	89 c2                	mov    edx,eax
c002632c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026330:	05 20 03 00 00       	add    eax,0x320
c0026335:	89 10                	mov    DWORD PTR [eax],edx
c0026337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002633b:	05 e0 03 00 00       	add    eax,0x3e0
c0026340:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002634a:	05 80 03 00 00       	add    eax,0x380
c002634f:	89 c2                	mov    edx,eax
c0026351:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026355:	89 02                	mov    DWORD PTR [edx],eax
c0026357:	90                   	nop
c0026358:	83 c4 28             	add    esp,0x28
c002635b:	5b                   	pop    ebx
c002635c:	c3                   	ret    
c002635d:	90                   	nop

c002635e <APICTimer::open(int, int, void*)>:
c002635e:	57                   	push   edi
c002635f:	56                   	push   esi
c0026360:	53                   	push   ebx
c0026361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026365:	8b 00                	mov    eax,DWORD PTR [eax]
c0026367:	83 c0 24             	add    eax,0x24
c002636a:	8b 00                	mov    eax,DWORD PTR [eax]
c002636c:	83 ec 08             	sub    esp,0x8
c002636f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026377:	ff d0                	call   eax
c0026379:	83 c4 10             	add    esp,0x10
c002637c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0026381:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026387:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002638d:	83 ec 0c             	sub    esp,0xc
c0026390:	50                   	push   eax
c0026391:	e8 ce f3 ff ff       	call   c0025764 <APIC::getBase()>
c0026396:	83 c4 10             	add    esp,0x10
c0026399:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002639f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263a9:	0f b6 f8             	movzx  edi,al
c00263ac:	89 d0                	mov    eax,edx
c00263ae:	ba 00 00 00 00       	mov    edx,0x0
c00263b3:	89 c1                	mov    ecx,eax
c00263b5:	80 e5 ff             	and    ch,0xff
c00263b8:	89 cb                	mov    ebx,ecx
c00263ba:	0f b6 f2             	movzx  esi,dl
c00263bd:	89 d8                	mov    eax,ebx
c00263bf:	89 f2                	mov    edx,esi
c00263c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263c5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263c8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263cc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263d0:	83 e0 00             	and    eax,0x0
c00263d3:	09 d0                	or     eax,edx
c00263d5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263e3:	8d 50 01             	lea    edx,[eax+0x1]
c00263e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263ea:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263f0:	0f b6 d0             	movzx  edx,al
c00263f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f7:	83 c2 08             	add    edx,0x8
c00263fa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263fe:	0f b6 c9             	movzx  ecx,cl
c0026401:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026407:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002640b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026413:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026421:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026427:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002642b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026431:	83 ec 0c             	sub    esp,0xc
c0026434:	51                   	push   ecx
c0026435:	6a 01                	push   0x1
c0026437:	68 2c 62 02 c0       	push   0xc002622c
c002643c:	52                   	push   edx
c002643d:	50                   	push   eax
c002643e:	e8 93 de fe ff       	call   c00142d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026443:	83 c4 20             	add    esp,0x20
c0026446:	89 c2                	mov    edx,eax
c0026448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026452:	b8 00 00 00 00       	mov    eax,0x0
c0026457:	5b                   	pop    ebx
c0026458:	5e                   	pop    esi
c0026459:	5f                   	pop    edi
c002645a:	c3                   	ret    
c002645b:	90                   	nop

c002645c <APICTimer::APICTimer()>:
c002645c:	83 ec 0c             	sub    esp,0xc
c002645f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026463:	83 ec 08             	sub    esp,0x8
c0026466:	68 70 d4 02 c0       	push   0xc002d470
c002646b:	50                   	push   eax
c002646c:	e8 f9 07 ff ff       	call   c0016c6a <Timer::Timer(char const*)>
c0026471:	83 c4 10             	add    esp,0x10
c0026474:	ba 84 d4 02 c0       	mov    edx,0xc002d484
c0026479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647d:	89 10                	mov    DWORD PTR [eax],edx
c002647f:	90                   	nop
c0026480:	83 c4 0c             	add    esp,0xc
c0026483:	c3                   	ret    

c0026484 <PIT::write(int)>:
c0026484:	83 ec 10             	sub    esp,0x10
c0026487:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002648b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002648f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026495:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026499:	a3 a4 29 03 c0       	mov    ds:0xc00329a4,eax
c002649e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264a3:	99                   	cdq    
c00264a4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264ac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264b3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264b8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264bc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264c1:	ee                   	out    dx,al
c00264c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264c6:	0f b6 c0             	movzx  eax,al
c00264c9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264d0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264d4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264d8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264dd:	ee                   	out    dx,al
c00264de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264e2:	c1 f8 08             	sar    eax,0x8
c00264e5:	0f b6 c0             	movzx  eax,al
c00264e8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264fc:	ee                   	out    dx,al
c00264fd:	90                   	nop
c00264fe:	83 c4 10             	add    esp,0x10
c0026501:	c3                   	ret    

c0026502 <pitHandler(regs*, void*)>:
c0026502:	83 ec 0c             	sub    esp,0xc
c0026505:	a1 a4 29 03 c0       	mov    eax,ds:0xc00329a4
c002650a:	99                   	cdq    
c002650b:	52                   	push   edx
c002650c:	50                   	push   eax
c002650d:	6a 00                	push   0x0
c002650f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026514:	e8 b3 04 00 00       	call   c00269cc <__udivdi3>
c0026519:	83 c4 10             	add    esp,0x10
c002651c:	83 ec 08             	sub    esp,0x8
c002651f:	52                   	push   edx
c0026520:	50                   	push   eax
c0026521:	e8 d3 07 ff ff       	call   c0016cf9 <timerHandler(unsigned long long)>
c0026526:	83 c4 10             	add    esp,0x10
c0026529:	90                   	nop
c002652a:	83 c4 0c             	add    esp,0xc
c002652d:	c3                   	ret    

c002652e <PIT::open(int, int, void*)>:
c002652e:	83 ec 0c             	sub    esp,0xc
c0026531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026535:	8b 00                	mov    eax,DWORD PTR [eax]
c0026537:	83 c0 24             	add    eax,0x24
c002653a:	8b 00                	mov    eax,DWORD PTR [eax]
c002653c:	83 ec 08             	sub    esp,0x8
c002653f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026547:	ff d0                	call   eax
c0026549:	83 c4 10             	add    esp,0x10
c002654c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026550:	83 ec 0c             	sub    esp,0xc
c0026553:	6a 00                	push   0x0
c0026555:	6a 01                	push   0x1
c0026557:	68 02 65 02 c0       	push   0xc0026502
c002655c:	6a 00                	push   0x0
c002655e:	50                   	push   eax
c002655f:	e8 72 dd fe ff       	call   c00142d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026564:	83 c4 20             	add    esp,0x20
c0026567:	89 c2                	mov    edx,eax
c0026569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026573:	b8 00 00 00 00       	mov    eax,0x0
c0026578:	83 c4 0c             	add    esp,0xc
c002657b:	c3                   	ret    

c002657c <PIT::close(int, int, void*)>:
c002657c:	83 ec 0c             	sub    esp,0xc
c002657f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026583:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002658d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026591:	6a 01                	push   0x1
c0026593:	68 02 65 02 c0       	push   0xc0026502
c0026598:	6a 00                	push   0x0
c002659a:	50                   	push   eax
c002659b:	e8 74 dd fe ff       	call   c0014314 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265a0:	83 c4 10             	add    esp,0x10
c00265a3:	b8 00 00 00 00       	mov    eax,0x0
c00265a8:	83 c4 0c             	add    esp,0xc
c00265ab:	c3                   	ret    

c00265ac <PIT::PIT()>:
c00265ac:	83 ec 0c             	sub    esp,0xc
c00265af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b3:	83 ec 08             	sub    esp,0x8
c00265b6:	68 ac d4 02 c0       	push   0xc002d4ac
c00265bb:	50                   	push   eax
c00265bc:	e8 a9 06 ff ff       	call   c0016c6a <Timer::Timer(char const*)>
c00265c1:	83 c4 10             	add    esp,0x10
c00265c4:	ba d4 d4 02 c0       	mov    edx,0xc002d4d4
c00265c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265cd:	89 10                	mov    DWORD PTR [eax],edx
c00265cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265d9:	0f b6 d0             	movzx  edx,al
c00265dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265f1:	0f b6 d0             	movzx  edx,al
c00265f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026607:	8d 50 01             	lea    edx,[eax+0x1]
c002660a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002660e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026614:	0f b6 d0             	movzx  edx,al
c0026617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002661f:	83 e1 3f             	and    ecx,0x3f
c0026622:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026626:	90                   	nop
c0026627:	83 c4 0c             	add    esp,0xc
c002662a:	c3                   	ret    
c002662b:	66 90                	xchg   ax,ax
c002662d:	66 90                	xchg   ax,ax
c002662f:	90                   	nop

c0026630 <avxDetect>:
c0026630:	b8 00 00 00 00       	mov    eax,0x0
c0026635:	c3                   	ret    

c0026636 <avxSave>:
c0026636:	c3                   	ret    

c0026637 <avxLoad>:
c0026637:	c3                   	ret    

c0026638 <avxInit>:
c0026638:	c3                   	ret    

c0026639 <avxClose>:
c0026639:	c3                   	ret    

c002663a <wouldSheSayYes>:
c002663a:	c3                   	ret    
c002663b:	49                   	dec    ecx
c002663c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026640:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026644:	75 20                	jne    c0026666 <sseDetect.noSSE+0x1>
c0026646:	4e                   	dec    esi
c0026647:	79 61                	jns    c00266aa <x87Detect+0x14>
c0026649:	68 2e 2e 2e 00       	push   0x2e2e2e
c002664e:	66 90                	xchg   ax,ax

c0026650 <absolutelyNoChanceInHell>:
c0026650:	b8 01 00 00 00       	mov    eax,0x1
c0026655:	0f a2                	cpuid  
c0026657:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002665d:	74 06                	je     c0026665 <sseDetect.noSSE>
c002665f:	b8 01 00 00 00       	mov    eax,0x1
c0026664:	c3                   	ret    

c0026665 <sseDetect.noSSE>:
c0026665:	31 c0                	xor    eax,eax
c0026667:	c3                   	ret    

c0026668 <sseSave>:
c0026668:	0f ae 44 24 08       	fxsave [esp+0x8]
c002666d:	c3                   	ret    

c002666e <sseLoad>:
c002666e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026673:	c3                   	ret    

c0026674 <sseInit>:
c0026674:	e8 43 00 00 00       	call   c00266bc <x87Init>
c0026679:	0f 20 e0             	mov    eax,cr4
c002667c:	66 0d 00 06          	or     ax,0x600
c0026680:	0f 22 e0             	mov    cr4,eax
c0026683:	c3                   	ret    

c0026684 <sseClose>:
c0026684:	c3                   	ret    
c0026685:	66 90                	xchg   ax,ax
c0026687:	66 90                	xchg   ax,ax
c0026689:	66 90                	xchg   ax,ax
c002668b:	66 90                	xchg   ax,ax
c002668d:	66 90                	xchg   ax,ax
c002668f:	90                   	nop

c0026690 <value_37F>:
c0026690:	7f 03                	jg     c0026695 <value_37A+0x1>

c0026692 <value_37E>:
c0026692:	7e 03                	jle    c0026697 <x87Detect+0x1>

c0026694 <value_37A>:
c0026694:	7a 03                	jp     c0026699 <x87Detect+0x3>

c0026696 <x87Detect>:
c0026696:	b8 01 00 00 00       	mov    eax,0x1
c002669b:	0f a2                	cpuid  
c002669d:	f7 c2 01 00 00 00    	test   edx,0x1
c00266a3:	74 06                	je     c00266ab <x87Detect.nox87>
c00266a5:	b8 01 00 00 00       	mov    eax,0x1
c00266aa:	c3                   	ret    

c00266ab <x87Detect.nox87>:
c00266ab:	b8 00 00 00 00       	mov    eax,0x0
c00266b0:	c3                   	ret    

c00266b1 <x87Save>:
c00266b1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266b6:	c3                   	ret    

c00266b7 <x87Load>:
c00266b7:	dd 64 24 08          	frstor [esp+0x8]
c00266bb:	c3                   	ret    

c00266bc <x87Init>:
c00266bc:	9b db e3             	finit  
c00266bf:	0f 20 c0             	mov    eax,cr0
c00266c2:	66 25 fb ff          	and    ax,0xfffb
c00266c6:	66 0d 22 00          	or     ax,0x22
c00266ca:	0f 22 c0             	mov    cr0,eax
c00266cd:	0f 06                	clts   
c00266cf:	d9 2d 94 66 02 c0    	fldcw  WORD PTR ds:0xc0026694
c00266d5:	c3                   	ret    

c00266d6 <x87Close>:
c00266d6:	c3                   	ret    
c00266d7:	90                   	nop

c00266d8 <__do_global_ctors_aux>:
c00266d8:	a1 1c 92 02 c0       	mov    eax,ds:0xc002921c
c00266dd:	83 f8 ff             	cmp    eax,0xffffffff
c00266e0:	74 1a                	je     c00266fc <__do_global_ctors_aux+0x24>
c00266e2:	55                   	push   ebp
c00266e3:	89 e5                	mov    ebp,esp
c00266e5:	53                   	push   ebx
c00266e6:	52                   	push   edx
c00266e7:	bb 1c 92 02 c0       	mov    ebx,0xc002921c
c00266ec:	ff d0                	call   eax
c00266ee:	83 eb 04             	sub    ebx,0x4
c00266f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266f3:	83 f8 ff             	cmp    eax,0xffffffff
c00266f6:	75 f4                	jne    c00266ec <__do_global_ctors_aux+0x14>
c00266f8:	58                   	pop    eax
c00266f9:	5b                   	pop    ebx
c00266fa:	5d                   	pop    ebp
c00266fb:	c3                   	ret    
c00266fc:	c3                   	ret    
c00266fd:	66 90                	xchg   ax,ax
c00266ff:	90                   	nop

c0026700 <__divdi3>:
c0026700:	55                   	push   ebp
c0026701:	57                   	push   edi
c0026702:	56                   	push   esi
c0026703:	53                   	push   ebx
c0026704:	83 ec 1c             	sub    esp,0x1c
c0026707:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002670b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002670f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026712:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026716:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002671a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002671e:	85 db                	test   ebx,ebx
c0026720:	0f 88 8e 00 00 00    	js     c00267b4 <__divdi3+0xb4>
c0026726:	89 dd                	mov    ebp,ebx
c0026728:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026730:	89 d3                	mov    ebx,edx
c0026732:	85 d2                	test   edx,edx
c0026734:	79 0d                	jns    c0026743 <__divdi3+0x43>
c0026736:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002673a:	f7 d8                	neg    eax
c002673c:	83 d2 00             	adc    edx,0x0
c002673f:	f7 da                	neg    edx
c0026741:	89 d3                	mov    ebx,edx
c0026743:	89 c7                	mov    edi,eax
c0026745:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026748:	85 db                	test   ebx,ebx
c002674a:	75 48                	jne    c0026794 <__divdi3+0x94>
c002674c:	39 ef                	cmp    edi,ebp
c002674e:	76 24                	jbe    c0026774 <__divdi3+0x74>
c0026750:	89 ea                	mov    edx,ebp
c0026752:	f7 f7                	div    edi
c0026754:	89 c1                	mov    ecx,eax
c0026756:	31 f6                	xor    esi,esi
c0026758:	89 c8                	mov    eax,ecx
c002675a:	89 f2                	mov    edx,esi
c002675c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026760:	85 c9                	test   ecx,ecx
c0026762:	74 07                	je     c002676b <__divdi3+0x6b>
c0026764:	f7 d8                	neg    eax
c0026766:	83 d2 00             	adc    edx,0x0
c0026769:	f7 da                	neg    edx
c002676b:	83 c4 1c             	add    esp,0x1c
c002676e:	5b                   	pop    ebx
c002676f:	5e                   	pop    esi
c0026770:	5f                   	pop    edi
c0026771:	5d                   	pop    ebp
c0026772:	c3                   	ret    
c0026773:	90                   	nop
c0026774:	85 ff                	test   edi,edi
c0026776:	75 0b                	jne    c0026783 <__divdi3+0x83>
c0026778:	b8 01 00 00 00       	mov    eax,0x1
c002677d:	31 d2                	xor    edx,edx
c002677f:	f7 f3                	div    ebx
c0026781:	89 c7                	mov    edi,eax
c0026783:	31 d2                	xor    edx,edx
c0026785:	89 e8                	mov    eax,ebp
c0026787:	f7 f7                	div    edi
c0026789:	89 c6                	mov    esi,eax
c002678b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002678e:	f7 f7                	div    edi
c0026790:	89 c1                	mov    ecx,eax
c0026792:	eb c4                	jmp    c0026758 <__divdi3+0x58>
c0026794:	39 eb                	cmp    ebx,ebp
c0026796:	77 3c                	ja     c00267d4 <__divdi3+0xd4>
c0026798:	0f bd f3             	bsr    esi,ebx
c002679b:	83 f6 1f             	xor    esi,0x1f
c002679e:	75 40                	jne    c00267e0 <__divdi3+0xe0>
c00267a0:	39 eb                	cmp    ebx,ebp
c00267a2:	72 09                	jb     c00267ad <__divdi3+0xad>
c00267a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267a7:	0f 87 97 00 00 00    	ja     c0026844 <__divdi3+0x144>
c00267ad:	b9 01 00 00 00       	mov    ecx,0x1
c00267b2:	eb a4                	jmp    c0026758 <__divdi3+0x58>
c00267b4:	f7 d9                	neg    ecx
c00267b6:	83 d3 00             	adc    ebx,0x0
c00267b9:	f7 db                	neg    ebx
c00267bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267be:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267c2:	89 dd                	mov    ebp,ebx
c00267c4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267cc:	e9 5f ff ff ff       	jmp    c0026730 <__divdi3+0x30>
c00267d1:	8d 76 00             	lea    esi,[esi+0x0]
c00267d4:	31 f6                	xor    esi,esi
c00267d6:	31 c9                	xor    ecx,ecx
c00267d8:	e9 7b ff ff ff       	jmp    c0026758 <__divdi3+0x58>
c00267dd:	8d 76 00             	lea    esi,[esi+0x0]
c00267e0:	b8 20 00 00 00       	mov    eax,0x20
c00267e5:	29 f0                	sub    eax,esi
c00267e7:	89 f1                	mov    ecx,esi
c00267e9:	d3 e3                	shl    ebx,cl
c00267eb:	89 fa                	mov    edx,edi
c00267ed:	88 c1                	mov    cl,al
c00267ef:	d3 ea                	shr    edx,cl
c00267f1:	09 da                	or     edx,ebx
c00267f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267f7:	89 f1                	mov    ecx,esi
c00267f9:	d3 e7                	shl    edi,cl
c00267fb:	89 eb                	mov    ebx,ebp
c00267fd:	88 c1                	mov    cl,al
c00267ff:	d3 eb                	shr    ebx,cl
c0026801:	89 f1                	mov    ecx,esi
c0026803:	d3 e5                	shl    ebp,cl
c0026805:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026808:	88 c1                	mov    cl,al
c002680a:	d3 ea                	shr    edx,cl
c002680c:	09 d5                	or     ebp,edx
c002680e:	89 e8                	mov    eax,ebp
c0026810:	89 da                	mov    edx,ebx
c0026812:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026816:	89 d3                	mov    ebx,edx
c0026818:	89 c5                	mov    ebp,eax
c002681a:	f7 e7                	mul    edi
c002681c:	39 d3                	cmp    ebx,edx
c002681e:	72 18                	jb     c0026838 <__divdi3+0x138>
c0026820:	74 0a                	je     c002682c <__divdi3+0x12c>
c0026822:	89 e9                	mov    ecx,ebp
c0026824:	31 f6                	xor    esi,esi
c0026826:	e9 2d ff ff ff       	jmp    c0026758 <__divdi3+0x58>
c002682b:	90                   	nop
c002682c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002682f:	89 f1                	mov    ecx,esi
c0026831:	d3 e7                	shl    edi,cl
c0026833:	39 c7                	cmp    edi,eax
c0026835:	73 eb                	jae    c0026822 <__divdi3+0x122>
c0026837:	90                   	nop
c0026838:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002683b:	31 f6                	xor    esi,esi
c002683d:	e9 16 ff ff ff       	jmp    c0026758 <__divdi3+0x58>
c0026842:	66 90                	xchg   ax,ax
c0026844:	31 c9                	xor    ecx,ecx
c0026846:	e9 0d ff ff ff       	jmp    c0026758 <__divdi3+0x58>
c002684b:	90                   	nop

c002684c <__moddi3>:
c002684c:	55                   	push   ebp
c002684d:	57                   	push   edi
c002684e:	56                   	push   esi
c002684f:	53                   	push   ebx
c0026850:	83 ec 2c             	sub    esp,0x2c
c0026853:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026857:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002685b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002685f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026863:	85 db                	test   ebx,ebx
c0026865:	0f 88 85 00 00 00    	js     c00268f0 <__moddi3+0xa4>
c002686b:	89 de                	mov    esi,ebx
c002686d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026875:	89 d7                	mov    edi,edx
c0026877:	85 d2                	test   edx,edx
c0026879:	79 09                	jns    c0026884 <__moddi3+0x38>
c002687b:	f7 d8                	neg    eax
c002687d:	83 d2 00             	adc    edx,0x0
c0026880:	f7 da                	neg    edx
c0026882:	89 d7                	mov    edi,edx
c0026884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026888:	89 cd                	mov    ebp,ecx
c002688a:	85 ff                	test   edi,edi
c002688c:	75 52                	jne    c00268e0 <__moddi3+0x94>
c002688e:	89 c3                	mov    ebx,eax
c0026890:	39 f0                	cmp    eax,esi
c0026892:	76 24                	jbe    c00268b8 <__moddi3+0x6c>
c0026894:	89 c8                	mov    eax,ecx
c0026896:	89 f2                	mov    edx,esi
c0026898:	f7 f3                	div    ebx
c002689a:	89 d6                	mov    esi,edx
c002689c:	89 f0                	mov    eax,esi
c002689e:	31 d2                	xor    edx,edx
c00268a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268a4:	85 c9                	test   ecx,ecx
c00268a6:	74 07                	je     c00268af <__moddi3+0x63>
c00268a8:	f7 d8                	neg    eax
c00268aa:	83 d2 00             	adc    edx,0x0
c00268ad:	f7 da                	neg    edx
c00268af:	83 c4 2c             	add    esp,0x2c
c00268b2:	5b                   	pop    ebx
c00268b3:	5e                   	pop    esi
c00268b4:	5f                   	pop    edi
c00268b5:	5d                   	pop    ebp
c00268b6:	c3                   	ret    
c00268b7:	90                   	nop
c00268b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268bc:	85 db                	test   ebx,ebx
c00268be:	75 0d                	jne    c00268cd <__moddi3+0x81>
c00268c0:	b8 01 00 00 00       	mov    eax,0x1
c00268c5:	31 d2                	xor    edx,edx
c00268c7:	f7 f7                	div    edi
c00268c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268cd:	89 f0                	mov    eax,esi
c00268cf:	31 d2                	xor    edx,edx
c00268d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268d5:	f7 f7                	div    edi
c00268d7:	89 e8                	mov    eax,ebp
c00268d9:	f7 f7                	div    edi
c00268db:	89 d6                	mov    esi,edx
c00268dd:	eb bd                	jmp    c002689c <__moddi3+0x50>
c00268df:	90                   	nop
c00268e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268e4:	39 f7                	cmp    edi,esi
c00268e6:	76 20                	jbe    c0026908 <__moddi3+0xbc>
c00268e8:	89 c8                	mov    eax,ecx
c00268ea:	89 f2                	mov    edx,esi
c00268ec:	eb b2                	jmp    c00268a0 <__moddi3+0x54>
c00268ee:	66 90                	xchg   ax,ax
c00268f0:	f7 d9                	neg    ecx
c00268f2:	83 d3 00             	adc    ebx,0x0
c00268f5:	f7 db                	neg    ebx
c00268f7:	89 de                	mov    esi,ebx
c00268f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026901:	e9 6f ff ff ff       	jmp    c0026875 <__moddi3+0x29>
c0026906:	66 90                	xchg   ax,ax
c0026908:	0f bd c7             	bsr    eax,edi
c002690b:	83 f0 1f             	xor    eax,0x1f
c002690e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026912:	75 24                	jne    c0026938 <__moddi3+0xec>
c0026914:	39 f7                	cmp    edi,esi
c0026916:	72 06                	jb     c002691e <__moddi3+0xd2>
c0026918:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002691c:	77 0c                	ja     c002692a <__moddi3+0xde>
c002691e:	89 e9                	mov    ecx,ebp
c0026920:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026924:	19 fe                	sbb    esi,edi
c0026926:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002692a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002692e:	89 f2                	mov    edx,esi
c0026930:	e9 6b ff ff ff       	jmp    c00268a0 <__moddi3+0x54>
c0026935:	8d 76 00             	lea    esi,[esi+0x0]
c0026938:	b8 20 00 00 00       	mov    eax,0x20
c002693d:	89 c2                	mov    edx,eax
c002693f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026943:	29 da                	sub    edx,ebx
c0026945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026949:	88 d9                	mov    cl,bl
c002694b:	d3 e7                	shl    edi,cl
c002694d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026951:	88 d1                	mov    cl,dl
c0026953:	d3 e8                	shr    eax,cl
c0026955:	09 c7                	or     edi,eax
c0026957:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002695b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002695f:	89 d8                	mov    eax,ebx
c0026961:	88 d9                	mov    cl,bl
c0026963:	d3 e7                	shl    edi,cl
c0026965:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026969:	89 f3                	mov    ebx,esi
c002696b:	88 d1                	mov    cl,dl
c002696d:	d3 eb                	shr    ebx,cl
c002696f:	89 c7                	mov    edi,eax
c0026971:	88 c1                	mov    cl,al
c0026973:	d3 e6                	shl    esi,cl
c0026975:	89 e8                	mov    eax,ebp
c0026977:	88 d1                	mov    cl,dl
c0026979:	d3 e8                	shr    eax,cl
c002697b:	09 f0                	or     eax,esi
c002697d:	89 f9                	mov    ecx,edi
c002697f:	d3 e5                	shl    ebp,cl
c0026981:	89 da                	mov    edx,ebx
c0026983:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026987:	89 d3                	mov    ebx,edx
c0026989:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002698d:	89 c6                	mov    esi,eax
c002698f:	89 d1                	mov    ecx,edx
c0026991:	39 d3                	cmp    ebx,edx
c0026993:	72 27                	jb     c00269bc <__moddi3+0x170>
c0026995:	74 21                	je     c00269b8 <__moddi3+0x16c>
c0026997:	29 f5                	sub    ebp,esi
c0026999:	19 cb                	sbb    ebx,ecx
c002699b:	89 de                	mov    esi,ebx
c002699d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269a1:	d3 e6                	shl    esi,cl
c00269a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269a7:	89 f9                	mov    ecx,edi
c00269a9:	d3 ed                	shr    ebp,cl
c00269ab:	09 ee                	or     esi,ebp
c00269ad:	89 f0                	mov    eax,esi
c00269af:	d3 eb                	shr    ebx,cl
c00269b1:	89 da                	mov    edx,ebx
c00269b3:	e9 e8 fe ff ff       	jmp    c00268a0 <__moddi3+0x54>
c00269b8:	39 c5                	cmp    ebp,eax
c00269ba:	73 db                	jae    c0026997 <__moddi3+0x14b>
c00269bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269c4:	89 d1                	mov    ecx,edx
c00269c6:	89 c6                	mov    esi,eax
c00269c8:	eb cd                	jmp    c0026997 <__moddi3+0x14b>
c00269ca:	66 90                	xchg   ax,ax

c00269cc <__udivdi3>:
c00269cc:	55                   	push   ebp
c00269cd:	57                   	push   edi
c00269ce:	56                   	push   esi
c00269cf:	53                   	push   ebx
c00269d0:	83 ec 1c             	sub    esp,0x1c
c00269d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269e3:	85 d2                	test   edx,edx
c00269e5:	75 41                	jne    c0026a28 <__udivdi3+0x5c>
c00269e7:	39 f7                	cmp    edi,esi
c00269e9:	76 15                	jbe    c0026a00 <__udivdi3+0x34>
c00269eb:	89 e8                	mov    eax,ebp
c00269ed:	89 f2                	mov    edx,esi
c00269ef:	f7 f7                	div    edi
c00269f1:	31 db                	xor    ebx,ebx
c00269f3:	89 da                	mov    edx,ebx
c00269f5:	83 c4 1c             	add    esp,0x1c
c00269f8:	5b                   	pop    ebx
c00269f9:	5e                   	pop    esi
c00269fa:	5f                   	pop    edi
c00269fb:	5d                   	pop    ebp
c00269fc:	c3                   	ret    
c00269fd:	8d 76 00             	lea    esi,[esi+0x0]
c0026a00:	89 f9                	mov    ecx,edi
c0026a02:	85 ff                	test   edi,edi
c0026a04:	75 0b                	jne    c0026a11 <__udivdi3+0x45>
c0026a06:	b8 01 00 00 00       	mov    eax,0x1
c0026a0b:	31 d2                	xor    edx,edx
c0026a0d:	f7 f7                	div    edi
c0026a0f:	89 c1                	mov    ecx,eax
c0026a11:	31 d2                	xor    edx,edx
c0026a13:	89 f0                	mov    eax,esi
c0026a15:	f7 f1                	div    ecx
c0026a17:	89 c3                	mov    ebx,eax
c0026a19:	89 e8                	mov    eax,ebp
c0026a1b:	f7 f1                	div    ecx
c0026a1d:	89 da                	mov    edx,ebx
c0026a1f:	83 c4 1c             	add    esp,0x1c
c0026a22:	5b                   	pop    ebx
c0026a23:	5e                   	pop    esi
c0026a24:	5f                   	pop    edi
c0026a25:	5d                   	pop    ebp
c0026a26:	c3                   	ret    
c0026a27:	90                   	nop
c0026a28:	39 f2                	cmp    edx,esi
c0026a2a:	77 1c                	ja     c0026a48 <__udivdi3+0x7c>
c0026a2c:	0f bd da             	bsr    ebx,edx
c0026a2f:	83 f3 1f             	xor    ebx,0x1f
c0026a32:	75 24                	jne    c0026a58 <__udivdi3+0x8c>
c0026a34:	39 f2                	cmp    edx,esi
c0026a36:	72 08                	jb     c0026a40 <__udivdi3+0x74>
c0026a38:	39 ef                	cmp    edi,ebp
c0026a3a:	0f 87 84 00 00 00    	ja     c0026ac4 <__udivdi3+0xf8>
c0026a40:	b8 01 00 00 00       	mov    eax,0x1
c0026a45:	eb ac                	jmp    c00269f3 <__udivdi3+0x27>
c0026a47:	90                   	nop
c0026a48:	31 db                	xor    ebx,ebx
c0026a4a:	31 c0                	xor    eax,eax
c0026a4c:	89 da                	mov    edx,ebx
c0026a4e:	83 c4 1c             	add    esp,0x1c
c0026a51:	5b                   	pop    ebx
c0026a52:	5e                   	pop    esi
c0026a53:	5f                   	pop    edi
c0026a54:	5d                   	pop    ebp
c0026a55:	c3                   	ret    
c0026a56:	66 90                	xchg   ax,ax
c0026a58:	b8 20 00 00 00       	mov    eax,0x20
c0026a5d:	29 d8                	sub    eax,ebx
c0026a5f:	88 d9                	mov    cl,bl
c0026a61:	d3 e2                	shl    edx,cl
c0026a63:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a67:	89 fa                	mov    edx,edi
c0026a69:	88 c1                	mov    cl,al
c0026a6b:	d3 ea                	shr    edx,cl
c0026a6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a71:	09 d1                	or     ecx,edx
c0026a73:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a77:	88 d9                	mov    cl,bl
c0026a79:	d3 e7                	shl    edi,cl
c0026a7b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a7f:	89 f7                	mov    edi,esi
c0026a81:	88 c1                	mov    cl,al
c0026a83:	d3 ef                	shr    edi,cl
c0026a85:	88 d9                	mov    cl,bl
c0026a87:	d3 e6                	shl    esi,cl
c0026a89:	89 ea                	mov    edx,ebp
c0026a8b:	88 c1                	mov    cl,al
c0026a8d:	d3 ea                	shr    edx,cl
c0026a8f:	09 d6                	or     esi,edx
c0026a91:	89 f0                	mov    eax,esi
c0026a93:	89 fa                	mov    edx,edi
c0026a95:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a99:	89 d7                	mov    edi,edx
c0026a9b:	89 c6                	mov    esi,eax
c0026a9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026aa1:	39 d7                	cmp    edi,edx
c0026aa3:	72 13                	jb     c0026ab8 <__udivdi3+0xec>
c0026aa5:	74 09                	je     c0026ab0 <__udivdi3+0xe4>
c0026aa7:	89 f0                	mov    eax,esi
c0026aa9:	31 db                	xor    ebx,ebx
c0026aab:	e9 43 ff ff ff       	jmp    c00269f3 <__udivdi3+0x27>
c0026ab0:	88 d9                	mov    cl,bl
c0026ab2:	d3 e5                	shl    ebp,cl
c0026ab4:	39 c5                	cmp    ebp,eax
c0026ab6:	73 ef                	jae    c0026aa7 <__udivdi3+0xdb>
c0026ab8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026abb:	31 db                	xor    ebx,ebx
c0026abd:	e9 31 ff ff ff       	jmp    c00269f3 <__udivdi3+0x27>
c0026ac2:	66 90                	xchg   ax,ax
c0026ac4:	31 c0                	xor    eax,eax
c0026ac6:	e9 28 ff ff ff       	jmp    c00269f3 <__udivdi3+0x27>
c0026acb:	90                   	nop

c0026acc <__umoddi3>:
c0026acc:	55                   	push   ebp
c0026acd:	57                   	push   edi
c0026ace:	56                   	push   esi
c0026acf:	53                   	push   ebx
c0026ad0:	83 ec 1c             	sub    esp,0x1c
c0026ad3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ad7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026adb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026adf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026ae3:	89 da                	mov    edx,ebx
c0026ae5:	85 c0                	test   eax,eax
c0026ae7:	75 37                	jne    c0026b20 <__umoddi3+0x54>
c0026ae9:	39 df                	cmp    edi,ebx
c0026aeb:	76 13                	jbe    c0026b00 <__umoddi3+0x34>
c0026aed:	89 f0                	mov    eax,esi
c0026aef:	f7 f7                	div    edi
c0026af1:	89 d0                	mov    eax,edx
c0026af3:	31 d2                	xor    edx,edx
c0026af5:	83 c4 1c             	add    esp,0x1c
c0026af8:	5b                   	pop    ebx
c0026af9:	5e                   	pop    esi
c0026afa:	5f                   	pop    edi
c0026afb:	5d                   	pop    ebp
c0026afc:	c3                   	ret    
c0026afd:	8d 76 00             	lea    esi,[esi+0x0]
c0026b00:	89 fd                	mov    ebp,edi
c0026b02:	85 ff                	test   edi,edi
c0026b04:	75 0b                	jne    c0026b11 <__umoddi3+0x45>
c0026b06:	b8 01 00 00 00       	mov    eax,0x1
c0026b0b:	31 d2                	xor    edx,edx
c0026b0d:	f7 f7                	div    edi
c0026b0f:	89 c5                	mov    ebp,eax
c0026b11:	89 d8                	mov    eax,ebx
c0026b13:	31 d2                	xor    edx,edx
c0026b15:	f7 f5                	div    ebp
c0026b17:	89 f0                	mov    eax,esi
c0026b19:	f7 f5                	div    ebp
c0026b1b:	89 d0                	mov    eax,edx
c0026b1d:	eb d4                	jmp    c0026af3 <__umoddi3+0x27>
c0026b1f:	90                   	nop
c0026b20:	89 f1                	mov    ecx,esi
c0026b22:	39 d8                	cmp    eax,ebx
c0026b24:	76 0a                	jbe    c0026b30 <__umoddi3+0x64>
c0026b26:	89 f0                	mov    eax,esi
c0026b28:	83 c4 1c             	add    esp,0x1c
c0026b2b:	5b                   	pop    ebx
c0026b2c:	5e                   	pop    esi
c0026b2d:	5f                   	pop    edi
c0026b2e:	5d                   	pop    ebp
c0026b2f:	c3                   	ret    
c0026b30:	0f bd e8             	bsr    ebp,eax
c0026b33:	83 f5 1f             	xor    ebp,0x1f
c0026b36:	75 1c                	jne    c0026b54 <__umoddi3+0x88>
c0026b38:	39 d8                	cmp    eax,ebx
c0026b3a:	72 04                	jb     c0026b40 <__umoddi3+0x74>
c0026b3c:	39 f7                	cmp    edi,esi
c0026b3e:	77 08                	ja     c0026b48 <__umoddi3+0x7c>
c0026b40:	89 da                	mov    edx,ebx
c0026b42:	29 fe                	sub    esi,edi
c0026b44:	19 c2                	sbb    edx,eax
c0026b46:	89 f1                	mov    ecx,esi
c0026b48:	89 c8                	mov    eax,ecx
c0026b4a:	83 c4 1c             	add    esp,0x1c
c0026b4d:	5b                   	pop    ebx
c0026b4e:	5e                   	pop    esi
c0026b4f:	5f                   	pop    edi
c0026b50:	5d                   	pop    ebp
c0026b51:	c3                   	ret    
c0026b52:	66 90                	xchg   ax,ax
c0026b54:	ba 20 00 00 00       	mov    edx,0x20
c0026b59:	29 ea                	sub    edx,ebp
c0026b5b:	89 e9                	mov    ecx,ebp
c0026b5d:	d3 e0                	shl    eax,cl
c0026b5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b63:	89 f8                	mov    eax,edi
c0026b65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b69:	88 d1                	mov    cl,dl
c0026b6b:	d3 e8                	shr    eax,cl
c0026b6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b71:	09 c1                	or     ecx,eax
c0026b73:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b77:	89 e9                	mov    ecx,ebp
c0026b79:	d3 e7                	shl    edi,cl
c0026b7b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b7f:	89 d8                	mov    eax,ebx
c0026b81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b85:	88 d1                	mov    cl,dl
c0026b87:	d3 e8                	shr    eax,cl
c0026b89:	89 c7                	mov    edi,eax
c0026b8b:	89 e9                	mov    ecx,ebp
c0026b8d:	d3 e3                	shl    ebx,cl
c0026b8f:	89 f0                	mov    eax,esi
c0026b91:	88 d1                	mov    cl,dl
c0026b93:	d3 e8                	shr    eax,cl
c0026b95:	09 d8                	or     eax,ebx
c0026b97:	89 e9                	mov    ecx,ebp
c0026b99:	d3 e6                	shl    esi,cl
c0026b9b:	89 f3                	mov    ebx,esi
c0026b9d:	89 fa                	mov    edx,edi
c0026b9f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ba3:	89 d1                	mov    ecx,edx
c0026ba5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ba9:	89 c6                	mov    esi,eax
c0026bab:	89 d7                	mov    edi,edx
c0026bad:	39 d1                	cmp    ecx,edx
c0026baf:	72 27                	jb     c0026bd8 <__umoddi3+0x10c>
c0026bb1:	74 21                	je     c0026bd4 <__umoddi3+0x108>
c0026bb3:	89 ca                	mov    edx,ecx
c0026bb5:	29 f3                	sub    ebx,esi
c0026bb7:	19 fa                	sbb    edx,edi
c0026bb9:	89 d0                	mov    eax,edx
c0026bbb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bbf:	d3 e0                	shl    eax,cl
c0026bc1:	89 e9                	mov    ecx,ebp
c0026bc3:	d3 eb                	shr    ebx,cl
c0026bc5:	09 d8                	or     eax,ebx
c0026bc7:	d3 ea                	shr    edx,cl
c0026bc9:	83 c4 1c             	add    esp,0x1c
c0026bcc:	5b                   	pop    ebx
c0026bcd:	5e                   	pop    esi
c0026bce:	5f                   	pop    edi
c0026bcf:	5d                   	pop    ebp
c0026bd0:	c3                   	ret    
c0026bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bd4:	39 c3                	cmp    ebx,eax
c0026bd6:	73 db                	jae    c0026bb3 <__umoddi3+0xe7>
c0026bd8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bdc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026be0:	89 d7                	mov    edi,edx
c0026be2:	89 c6                	mov    esi,eax
c0026be4:	eb cd                	jmp    c0026bb3 <__umoddi3+0xe7>

c0026be6 <__addsf3>:
c0026be6:	55                   	push   ebp
c0026be7:	89 e5                	mov    ebp,esp
c0026be9:	57                   	push   edi
c0026bea:	56                   	push   esi
c0026beb:	53                   	push   ebx
c0026bec:	83 ec 08             	sub    esp,0x8
c0026bef:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026bf2:	89 fa                	mov    edx,edi
c0026bf4:	89 f8                	mov    eax,edi
c0026bf6:	c1 f8 17             	sar    eax,0x17
c0026bf9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bfc:	c1 e2 08             	shl    edx,0x8
c0026bff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c05:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c08:	89 de                	mov    esi,ebx
c0026c0a:	c1 fe 17             	sar    esi,0x17
c0026c0d:	c1 e3 08             	shl    ebx,0x8
c0026c10:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c16:	31 f0                	xor    eax,esi
c0026c18:	0f 88 3b 01 00 00    	js     c0026d59 <__addsf3+0x173>
c0026c1e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c21:	29 f1                	sub    ecx,esi
c0026c23:	85 c9                	test   ecx,ecx
c0026c25:	7e 54                	jle    c0026c7b <__addsf3+0x95>
c0026c27:	89 f0                	mov    eax,esi
c0026c29:	84 c0                	test   al,al
c0026c2b:	75 10                	jne    c0026c3d <__addsf3+0x57>
c0026c2d:	85 db                	test   ebx,ebx
c0026c2f:	0f 84 aa 02 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026c35:	49                   	dec    ecx
c0026c36:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c39:	74 38                	je     c0026c73 <__addsf3+0x8d>
c0026c3b:	eb 13                	jmp    c0026c50 <__addsf3+0x6a>
c0026c3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c40:	f7 d0                	not    eax
c0026c42:	84 c0                	test   al,al
c0026c44:	0f 84 95 02 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026c4a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c50:	83 f9 1f             	cmp    ecx,0x1f
c0026c53:	0f 8f 86 02 00 00    	jg     c0026edf <__addsf3+0x2f9>
c0026c59:	89 de                	mov    esi,ebx
c0026c5b:	d3 ee                	shr    esi,cl
c0026c5d:	b8 20 00 00 00       	mov    eax,0x20
c0026c62:	29 c8                	sub    eax,ecx
c0026c64:	89 c1                	mov    ecx,eax
c0026c66:	d3 e3                	shl    ebx,cl
c0026c68:	31 c0                	xor    eax,eax
c0026c6a:	85 db                	test   ebx,ebx
c0026c6c:	0f 95 c0             	setne  al
c0026c6f:	09 f0                	or     eax,esi
c0026c71:	01 d0                	add    eax,edx
c0026c73:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c76:	e9 b6 00 00 00       	jmp    c0026d31 <__addsf3+0x14b>
c0026c7b:	74 5c                	je     c0026cd9 <__addsf3+0xf3>
c0026c7d:	89 f1                	mov    ecx,esi
c0026c7f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c82:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c85:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c89:	75 14                	jne    c0026c9f <__addsf3+0xb9>
c0026c8b:	85 d2                	test   edx,edx
c0026c8d:	0f 84 4c 02 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026c93:	49                   	dec    ecx
c0026c94:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c97:	0f 84 94 00 00 00    	je     c0026d31 <__addsf3+0x14b>
c0026c9d:	eb 12                	jmp    c0026cb1 <__addsf3+0xcb>
c0026c9f:	89 f0                	mov    eax,esi
c0026ca1:	f7 d0                	not    eax
c0026ca3:	84 c0                	test   al,al
c0026ca5:	0f 84 34 02 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026cab:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cb1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cb4:	83 f9 1f             	cmp    ecx,0x1f
c0026cb7:	0f 8f 22 02 00 00    	jg     c0026edf <__addsf3+0x2f9>
c0026cbd:	89 d7                	mov    edi,edx
c0026cbf:	d3 ef                	shr    edi,cl
c0026cc1:	b8 20 00 00 00       	mov    eax,0x20
c0026cc6:	29 c8                	sub    eax,ecx
c0026cc8:	89 c1                	mov    ecx,eax
c0026cca:	d3 e2                	shl    edx,cl
c0026ccc:	31 c0                	xor    eax,eax
c0026cce:	85 d2                	test   edx,edx
c0026cd0:	0f 95 c0             	setne  al
c0026cd3:	09 f8                	or     eax,edi
c0026cd5:	01 d8                	add    eax,ebx
c0026cd7:	eb 58                	jmp    c0026d31 <__addsf3+0x14b>
c0026cd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cdc:	8d 70 01             	lea    esi,[eax+0x1]
c0026cdf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026ce5:	75 32                	jne    c0026d19 <__addsf3+0x133>
c0026ce7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ceb:	75 1f                	jne    c0026d0c <__addsf3+0x126>
c0026ced:	85 d2                	test   edx,edx
c0026cef:	0f 84 e0 01 00 00    	je     c0026ed5 <__addsf3+0x2ef>
c0026cf5:	85 db                	test   ebx,ebx
c0026cf7:	0f 84 e2 01 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026cfd:	89 d0                	mov    eax,edx
c0026cff:	01 d8                	add    eax,ebx
c0026d01:	0f 89 a9 01 00 00    	jns    c0026eb0 <__addsf3+0x2ca>
c0026d07:	e9 9d 01 00 00       	jmp    c0026ea9 <__addsf3+0x2c3>
c0026d0c:	85 d2                	test   edx,edx
c0026d0e:	0f 85 cb 01 00 00    	jne    c0026edf <__addsf3+0x2f9>
c0026d14:	e9 bc 01 00 00       	jmp    c0026ed5 <__addsf3+0x2ef>
c0026d19:	31 c0                	xor    eax,eax
c0026d1b:	89 f1                	mov    ecx,esi
c0026d1d:	f7 d1                	not    ecx
c0026d1f:	84 c9                	test   cl,cl
c0026d21:	0f 84 90 01 00 00    	je     c0026eb7 <__addsf3+0x2d1>
c0026d27:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d2a:	d1 e8                	shr    eax,1
c0026d2c:	e9 86 01 00 00       	jmp    c0026eb7 <__addsf3+0x2d1>
c0026d31:	85 c0                	test   eax,eax
c0026d33:	0f 89 7e 01 00 00    	jns    c0026eb7 <__addsf3+0x2d1>
c0026d39:	46                   	inc    esi
c0026d3a:	89 f2                	mov    edx,esi
c0026d3c:	f7 d2                	not    edx
c0026d3e:	84 d2                	test   dl,dl
c0026d40:	0f 84 6f 01 00 00    	je     c0026eb5 <__addsf3+0x2cf>
c0026d46:	89 c2                	mov    edx,eax
c0026d48:	83 e2 01             	and    edx,0x1
c0026d4b:	d1 e8                	shr    eax,1
c0026d4d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d52:	09 d0                	or     eax,edx
c0026d54:	e9 5e 01 00 00       	jmp    c0026eb7 <__addsf3+0x2d1>
c0026d59:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d60:	89 f0                	mov    eax,esi
c0026d62:	0f b6 c0             	movzx  eax,al
c0026d65:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d68:	29 c1                	sub    ecx,eax
c0026d6a:	85 c9                	test   ecx,ecx
c0026d6c:	7e 55                	jle    c0026dc3 <__addsf3+0x1dd>
c0026d6e:	85 c0                	test   eax,eax
c0026d70:	75 11                	jne    c0026d83 <__addsf3+0x19d>
c0026d72:	85 db                	test   ebx,ebx
c0026d74:	0f 84 65 01 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026d7a:	49                   	dec    ecx
c0026d7b:	75 19                	jne    c0026d96 <__addsf3+0x1b0>
c0026d7d:	89 d0                	mov    eax,edx
c0026d7f:	29 d8                	sub    eax,ebx
c0026d81:	eb 38                	jmp    c0026dbb <__addsf3+0x1d5>
c0026d83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d86:	f7 d0                	not    eax
c0026d88:	84 c0                	test   al,al
c0026d8a:	0f 84 4f 01 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026d90:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d96:	83 f9 1f             	cmp    ecx,0x1f
c0026d99:	0f 8f 40 01 00 00    	jg     c0026edf <__addsf3+0x2f9>
c0026d9f:	89 de                	mov    esi,ebx
c0026da1:	d3 ee                	shr    esi,cl
c0026da3:	b8 20 00 00 00       	mov    eax,0x20
c0026da8:	29 c8                	sub    eax,ecx
c0026daa:	89 c1                	mov    ecx,eax
c0026dac:	d3 e3                	shl    ebx,cl
c0026dae:	31 c0                	xor    eax,eax
c0026db0:	85 db                	test   ebx,ebx
c0026db2:	0f 95 c0             	setne  al
c0026db5:	09 f0                	or     eax,esi
c0026db7:	29 c2                	sub    edx,eax
c0026db9:	89 d0                	mov    eax,edx
c0026dbb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dbe:	e9 af 00 00 00       	jmp    c0026e72 <__addsf3+0x28c>
c0026dc3:	74 5c                	je     c0026e21 <__addsf3+0x23b>
c0026dc5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026dc8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dcb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dcf:	75 14                	jne    c0026de5 <__addsf3+0x1ff>
c0026dd1:	85 d2                	test   edx,edx
c0026dd3:	0f 84 06 01 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026dd9:	48                   	dec    eax
c0026dda:	75 1b                	jne    c0026df7 <__addsf3+0x211>
c0026ddc:	89 d8                	mov    eax,ebx
c0026dde:	29 d0                	sub    eax,edx
c0026de0:	e9 8d 00 00 00       	jmp    c0026e72 <__addsf3+0x28c>
c0026de5:	89 f1                	mov    ecx,esi
c0026de7:	f7 d1                	not    ecx
c0026de9:	84 c9                	test   cl,cl
c0026deb:	0f 84 ee 00 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026df1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026df7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dfa:	83 f8 1f             	cmp    eax,0x1f
c0026dfd:	0f 8f dc 00 00 00    	jg     c0026edf <__addsf3+0x2f9>
c0026e03:	89 d7                	mov    edi,edx
c0026e05:	88 c1                	mov    cl,al
c0026e07:	d3 ef                	shr    edi,cl
c0026e09:	b9 20 00 00 00       	mov    ecx,0x20
c0026e0e:	29 c1                	sub    ecx,eax
c0026e10:	d3 e2                	shl    edx,cl
c0026e12:	31 c0                	xor    eax,eax
c0026e14:	85 d2                	test   edx,edx
c0026e16:	0f 95 c0             	setne  al
c0026e19:	09 f8                	or     eax,edi
c0026e1b:	29 c3                	sub    ebx,eax
c0026e1d:	89 d8                	mov    eax,ebx
c0026e1f:	eb 51                	jmp    c0026e72 <__addsf3+0x28c>
c0026e21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e24:	40                   	inc    eax
c0026e25:	a8 fe                	test   al,0xfe
c0026e27:	75 3d                	jne    c0026e66 <__addsf3+0x280>
c0026e29:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e2d:	0f 85 a7 00 00 00    	jne    c0026eda <__addsf3+0x2f4>
c0026e33:	85 d2                	test   edx,edx
c0026e35:	75 12                	jne    c0026e49 <__addsf3+0x263>
c0026e37:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e3a:	85 db                	test   ebx,ebx
c0026e3c:	0f 85 9d 00 00 00    	jne    c0026edf <__addsf3+0x2f9>
c0026e42:	31 ff                	xor    edi,edi
c0026e44:	e9 96 00 00 00       	jmp    c0026edf <__addsf3+0x2f9>
c0026e49:	85 db                	test   ebx,ebx
c0026e4b:	0f 84 8e 00 00 00    	je     c0026edf <__addsf3+0x2f9>
c0026e51:	89 d0                	mov    eax,edx
c0026e53:	29 d8                	sub    eax,ebx
c0026e55:	79 06                	jns    c0026e5d <__addsf3+0x277>
c0026e57:	89 d8                	mov    eax,ebx
c0026e59:	29 d0                	sub    eax,edx
c0026e5b:	eb 5a                	jmp    c0026eb7 <__addsf3+0x2d1>
c0026e5d:	bf 00 00 00 00       	mov    edi,0x0
c0026e62:	74 7b                	je     c0026edf <__addsf3+0x2f9>
c0026e64:	eb 4a                	jmp    c0026eb0 <__addsf3+0x2ca>
c0026e66:	89 d0                	mov    eax,edx
c0026e68:	29 d8                	sub    eax,ebx
c0026e6a:	79 12                	jns    c0026e7e <__addsf3+0x298>
c0026e6c:	89 d8                	mov    eax,ebx
c0026e6e:	29 d0                	sub    eax,edx
c0026e70:	eb 09                	jmp    c0026e7b <__addsf3+0x295>
c0026e72:	85 c0                	test   eax,eax
c0026e74:	79 41                	jns    c0026eb7 <__addsf3+0x2d1>
c0026e76:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e7b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e7e:	31 f6                	xor    esi,esi
c0026e80:	85 c0                	test   eax,eax
c0026e82:	74 33                	je     c0026eb7 <__addsf3+0x2d1>
c0026e84:	0f bd c8             	bsr    ecx,eax
c0026e87:	83 f1 1f             	xor    ecx,0x1f
c0026e8a:	d3 e0                	shl    eax,cl
c0026e8c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e90:	39 ca                	cmp    edx,ecx
c0026e92:	7f 10                	jg     c0026ea4 <__addsf3+0x2be>
c0026e94:	29 d1                	sub    ecx,edx
c0026e96:	41                   	inc    ecx
c0026e97:	d3 e8                	shr    eax,cl
c0026e99:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e9c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ea2:	eb 13                	jmp    c0026eb7 <__addsf3+0x2d1>
c0026ea4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ea7:	29 ce                	sub    esi,ecx
c0026ea9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eae:	eb 07                	jmp    c0026eb7 <__addsf3+0x2d1>
c0026eb0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eb3:	eb 02                	jmp    c0026eb7 <__addsf3+0x2d1>
c0026eb5:	31 c0                	xor    eax,eax
c0026eb7:	89 c2                	mov    edx,eax
c0026eb9:	c1 ea 08             	shr    edx,0x8
c0026ebc:	a8 7f                	test   al,0x7f
c0026ebe:	0f 95 c1             	setne  cl
c0026ec1:	09 d1                	or     ecx,edx
c0026ec3:	83 e1 01             	and    ecx,0x1
c0026ec6:	c1 e8 07             	shr    eax,0x7
c0026ec9:	21 c8                	and    eax,ecx
c0026ecb:	c1 e6 17             	shl    esi,0x17
c0026ece:	09 d6                	or     esi,edx
c0026ed0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ed3:	eb 0a                	jmp    c0026edf <__addsf3+0x2f9>
c0026ed5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ed8:	eb 05                	jmp    c0026edf <__addsf3+0x2f9>
c0026eda:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026edf:	89 f8                	mov    eax,edi
c0026ee1:	5a                   	pop    edx
c0026ee2:	59                   	pop    ecx
c0026ee3:	5b                   	pop    ebx
c0026ee4:	5e                   	pop    esi
c0026ee5:	5f                   	pop    edi
c0026ee6:	5d                   	pop    ebp
c0026ee7:	c3                   	ret    

c0026ee8 <__subsf3>:
c0026ee8:	55                   	push   ebp
c0026ee9:	89 e5                	mov    ebp,esp
c0026eeb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026eee:	05 00 00 00 80       	add    eax,0x80000000
c0026ef3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ef6:	5d                   	pop    ebp
c0026ef7:	e9 ea fc ff ff       	jmp    c0026be6 <__addsf3>

c0026efc <__negsf2>:
c0026efc:	55                   	push   ebp
c0026efd:	89 e5                	mov    ebp,esp
c0026eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f02:	05 00 00 00 80       	add    eax,0x80000000
c0026f07:	5d                   	pop    ebp
c0026f08:	c3                   	ret    

c0026f09 <__mulsf3>:
c0026f09:	55                   	push   ebp
c0026f0a:	89 e5                	mov    ebp,esp
c0026f0c:	57                   	push   edi
c0026f0d:	56                   	push   esi
c0026f0e:	53                   	push   ebx
c0026f0f:	83 ec 1c             	sub    esp,0x1c
c0026f12:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f15:	89 f0                	mov    eax,esi
c0026f17:	89 f1                	mov    ecx,esi
c0026f19:	c1 f9 17             	sar    ecx,0x17
c0026f1c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f1f:	c1 e0 08             	shl    eax,0x8
c0026f22:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f27:	89 c1                	mov    ecx,eax
c0026f29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f2c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f2f:	89 c7                	mov    edi,eax
c0026f31:	c1 ff 17             	sar    edi,0x17
c0026f34:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f38:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f3b:	89 f8                	mov    eax,edi
c0026f3d:	0f b6 c0             	movzx  eax,al
c0026f40:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f43:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f47:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f4a:	42                   	inc    edx
c0026f4b:	80 e2 fe             	and    dl,0xfe
c0026f4e:	75 7b                	jne    c0026fcb <__mulsf3+0xc2>
c0026f50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f54:	74 54                	je     c0026faa <__mulsf3+0xa1>
c0026f56:	85 c9                	test   ecx,ecx
c0026f58:	0f 85 64 01 00 00    	jne    c00270c2 <__mulsf3+0x1b9>
c0026f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f61:	80 e2 fe             	and    dl,0xfe
c0026f64:	75 1f                	jne    c0026f85 <__mulsf3+0x7c>
c0026f66:	85 c0                	test   eax,eax
c0026f68:	b8 00 00 00 00       	mov    eax,0x0
c0026f6d:	74 29                	je     c0026f98 <__mulsf3+0x8f>
c0026f6f:	53                   	push   ebx
c0026f70:	53                   	push   ebx
c0026f71:	50                   	push   eax
c0026f72:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f75:	e8 96 05 00 00       	call   c0027510 <__nesf2>
c0026f7a:	83 c4 10             	add    esp,0x10
c0026f7d:	85 c0                	test   eax,eax
c0026f7f:	0f 85 3a 01 00 00    	jne    c00270bf <__mulsf3+0x1b6>
c0026f85:	85 ff                	test   edi,edi
c0026f87:	0f 89 35 01 00 00    	jns    c00270c2 <__mulsf3+0x1b9>
c0026f8d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f93:	e9 2a 01 00 00       	jmp    c00270c2 <__mulsf3+0x1b9>
c0026f98:	51                   	push   ecx
c0026f99:	51                   	push   ecx
c0026f9a:	50                   	push   eax
c0026f9b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f9e:	e8 6d 05 00 00       	call   c0027510 <__nesf2>
c0026fa3:	83 c4 10             	add    esp,0x10
c0026fa6:	85 c0                	test   eax,eax
c0026fa8:	eb 15                	jmp    c0026fbf <__mulsf3+0xb6>
c0026faa:	85 c9                	test   ecx,ecx
c0026fac:	74 0b                	je     c0026fb9 <__mulsf3+0xb0>
c0026fae:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fb1:	01 c9                	add    ecx,ecx
c0026fb3:	78 16                	js     c0026fcb <__mulsf3+0xc2>
c0026fb5:	89 d3                	mov    ebx,edx
c0026fb7:	eb f5                	jmp    c0026fae <__mulsf3+0xa5>
c0026fb9:	89 f8                	mov    eax,edi
c0026fbb:	f7 d0                	not    eax
c0026fbd:	84 c0                	test   al,al
c0026fbf:	75 c4                	jne    c0026f85 <__mulsf3+0x7c>
c0026fc1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fc6:	e9 f7 00 00 00       	jmp    c00270c2 <__mulsf3+0x1b9>
c0026fcb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fce:	c1 e6 08             	shl    esi,0x8
c0026fd1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fd7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fda:	80 e2 fe             	and    dl,0xfe
c0026fdd:	75 63                	jne    c0027042 <__mulsf3+0x139>
c0026fdf:	85 c0                	test   eax,eax
c0026fe1:	74 2f                	je     c0027012 <__mulsf3+0x109>
c0026fe3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fe7:	0f 89 d2 00 00 00    	jns    c00270bf <__mulsf3+0x1b6>
c0026fed:	52                   	push   edx
c0026fee:	52                   	push   edx
c0026fef:	6a 00                	push   0x0
c0026ff1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ff4:	e8 dc 04 00 00       	call   c00274d5 <__eqsf2>
c0026ff9:	83 c4 10             	add    esp,0x10
c0026ffc:	85 c0                	test   eax,eax
c0026ffe:	0f 85 bb 00 00 00    	jne    c00270bf <__mulsf3+0x1b6>
c0027004:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027007:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002700d:	e9 b0 00 00 00       	jmp    c00270c2 <__mulsf3+0x1b9>
c0027012:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027015:	50                   	push   eax
c0027016:	50                   	push   eax
c0027017:	6a 00                	push   0x0
c0027019:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002701c:	e8 b4 04 00 00       	call   c00274d5 <__eqsf2>
c0027021:	83 c4 10             	add    esp,0x10
c0027024:	85 c0                	test   eax,eax
c0027026:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027029:	75 0c                	jne    c0027037 <__mulsf3+0x12e>
c002702b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002702f:	0f 89 8a 00 00 00    	jns    c00270bf <__mulsf3+0x1b6>
c0027035:	eb cd                	jmp    c0027004 <__mulsf3+0xfb>
c0027037:	8d 43 ff             	lea    eax,[ebx-0x1]
c002703a:	01 f6                	add    esi,esi
c002703c:	78 04                	js     c0027042 <__mulsf3+0x139>
c002703e:	89 c3                	mov    ebx,eax
c0027040:	eb f5                	jmp    c0027037 <__mulsf3+0x12e>
c0027042:	89 c8                	mov    eax,ecx
c0027044:	0d 00 00 00 80       	or     eax,0x80000000
c0027049:	81 ce 00 00 00 80    	or     esi,0x80000000
c002704f:	f7 e6                	mul    esi
c0027051:	85 c0                	test   eax,eax
c0027053:	0f 95 c0             	setne  al
c0027056:	0f b6 c0             	movzx  eax,al
c0027059:	09 c2                	or     edx,eax
c002705b:	78 03                	js     c0027060 <__mulsf3+0x157>
c002705d:	01 d2                	add    edx,edx
c002705f:	4b                   	dec    ebx
c0027060:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027066:	7f 22                	jg     c002708a <__mulsf3+0x181>
c0027068:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002706e:	85 db                	test   ebx,ebx
c0027070:	7f 23                	jg     c0027095 <__mulsf3+0x18c>
c0027072:	83 fb e9             	cmp    ebx,0xffffffe9
c0027075:	7c 1a                	jl     c0027091 <__mulsf3+0x188>
c0027077:	81 ca 00 00 00 80    	or     edx,0x80000000
c002707d:	b9 01 00 00 00       	mov    ecx,0x1
c0027082:	29 d9                	sub    ecx,ebx
c0027084:	d3 ea                	shr    edx,cl
c0027086:	31 db                	xor    ebx,ebx
c0027088:	eb 0b                	jmp    c0027095 <__mulsf3+0x18c>
c002708a:	bb ff 00 00 00       	mov    ebx,0xff
c002708f:	eb 02                	jmp    c0027093 <__mulsf3+0x18a>
c0027091:	31 db                	xor    ebx,ebx
c0027093:	31 d2                	xor    edx,edx
c0027095:	89 d0                	mov    eax,edx
c0027097:	c1 e8 08             	shr    eax,0x8
c002709a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002709d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270a3:	09 fb                	or     ebx,edi
c00270a5:	c1 e3 17             	shl    ebx,0x17
c00270a8:	09 c3                	or     ebx,eax
c00270aa:	f6 c2 7f             	test   dl,0x7f
c00270ad:	0f 95 c1             	setne  cl
c00270b0:	09 c8                	or     eax,ecx
c00270b2:	83 e0 01             	and    eax,0x1
c00270b5:	c1 ea 07             	shr    edx,0x7
c00270b8:	21 c2                	and    edx,eax
c00270ba:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270bd:	eb 03                	jmp    c00270c2 <__mulsf3+0x1b9>
c00270bf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270c2:	89 f0                	mov    eax,esi
c00270c4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270c7:	5b                   	pop    ebx
c00270c8:	5e                   	pop    esi
c00270c9:	5f                   	pop    edi
c00270ca:	5d                   	pop    ebp
c00270cb:	c3                   	ret    

c00270cc <__divsf3>:
c00270cc:	55                   	push   ebp
c00270cd:	89 e5                	mov    ebp,esp
c00270cf:	57                   	push   edi
c00270d0:	56                   	push   esi
c00270d1:	53                   	push   ebx
c00270d2:	83 ec 1c             	sub    esp,0x1c
c00270d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270d8:	89 d8                	mov    eax,ebx
c00270da:	89 d9                	mov    ecx,ebx
c00270dc:	c1 f9 17             	sar    ecx,0x17
c00270df:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270e2:	c1 e0 08             	shl    eax,0x8
c00270e5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270ea:	89 c1                	mov    ecx,eax
c00270ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270ef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270f2:	89 c7                	mov    edi,eax
c00270f4:	c1 ff 17             	sar    edi,0x17
c00270f7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270fb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270fe:	89 f8                	mov    eax,edi
c0027100:	0f b6 c0             	movzx  eax,al
c0027103:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027106:	29 c6                	sub    esi,eax
c0027108:	83 c6 7f             	add    esi,0x7f
c002710b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002710e:	42                   	inc    edx
c002710f:	80 e2 fe             	and    dl,0xfe
c0027112:	0f 85 9c 00 00 00    	jne    c00271b4 <__divsf3+0xe8>
c0027118:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002711c:	74 33                	je     c0027151 <__divsf3+0x85>
c002711e:	85 c9                	test   ecx,ecx
c0027120:	0f 85 c7 01 00 00    	jne    c00272ed <__divsf3+0x221>
c0027126:	8d 57 01             	lea    edx,[edi+0x1]
c0027129:	80 e2 fe             	and    dl,0xfe
c002712c:	75 2f                	jne    c002715d <__divsf3+0x91>
c002712e:	85 c0                	test   eax,eax
c0027130:	74 2b                	je     c002715d <__divsf3+0x91>
c0027132:	51                   	push   ecx
c0027133:	51                   	push   ecx
c0027134:	6a 00                	push   0x0
c0027136:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027139:	e8 d2 03 00 00       	call   c0027510 <__nesf2>
c002713e:	83 c4 10             	add    esp,0x10
c0027141:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027144:	85 c0                	test   eax,eax
c0027146:	0f 85 a1 01 00 00    	jne    c00272ed <__divsf3+0x221>
c002714c:	e9 92 01 00 00       	jmp    c00272e3 <__divsf3+0x217>
c0027151:	85 c9                	test   ecx,ecx
c0027153:	75 1b                	jne    c0027170 <__divsf3+0xa4>
c0027155:	8d 57 01             	lea    edx,[edi+0x1]
c0027158:	80 e2 fe             	and    dl,0xfe
c002715b:	74 1e                	je     c002717b <__divsf3+0xaf>
c002715d:	85 ff                	test   edi,edi
c002715f:	0f 89 88 01 00 00    	jns    c00272ed <__divsf3+0x221>
c0027165:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002716b:	e9 7d 01 00 00       	jmp    c00272ed <__divsf3+0x221>
c0027170:	8d 56 ff             	lea    edx,[esi-0x1]
c0027173:	01 c9                	add    ecx,ecx
c0027175:	78 3d                	js     c00271b4 <__divsf3+0xe8>
c0027177:	89 d6                	mov    esi,edx
c0027179:	eb f5                	jmp    c0027170 <__divsf3+0xa4>
c002717b:	85 c0                	test   eax,eax
c002717d:	b8 00 00 00 00       	mov    eax,0x0
c0027182:	74 18                	je     c002719c <__divsf3+0xd0>
c0027184:	52                   	push   edx
c0027185:	52                   	push   edx
c0027186:	50                   	push   eax
c0027187:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002718a:	e8 81 03 00 00       	call   c0027510 <__nesf2>
c002718f:	83 c4 10             	add    esp,0x10
c0027192:	85 c0                	test   eax,eax
c0027194:	0f 85 50 01 00 00    	jne    c00272ea <__divsf3+0x21e>
c002719a:	eb c1                	jmp    c002715d <__divsf3+0x91>
c002719c:	56                   	push   esi
c002719d:	56                   	push   esi
c002719e:	50                   	push   eax
c002719f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271a2:	e8 69 03 00 00       	call   c0027510 <__nesf2>
c00271a7:	83 c4 10             	add    esp,0x10
c00271aa:	85 c0                	test   eax,eax
c00271ac:	0f 84 31 01 00 00    	je     c00272e3 <__divsf3+0x217>
c00271b2:	eb a9                	jmp    c002715d <__divsf3+0x91>
c00271b4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271b7:	c1 e3 08             	shl    ebx,0x8
c00271ba:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271c0:	8d 57 01             	lea    edx,[edi+0x1]
c00271c3:	80 e2 fe             	and    dl,0xfe
c00271c6:	75 71                	jne    c0027239 <__divsf3+0x16d>
c00271c8:	85 c0                	test   eax,eax
c00271ca:	ba 00 00 00 00       	mov    edx,0x0
c00271cf:	74 2f                	je     c0027200 <__divsf3+0x134>
c00271d1:	51                   	push   ecx
c00271d2:	51                   	push   ecx
c00271d3:	52                   	push   edx
c00271d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271d7:	e8 f9 02 00 00       	call   c00274d5 <__eqsf2>
c00271dc:	83 c4 10             	add    esp,0x10
c00271df:	85 c0                	test   eax,eax
c00271e1:	0f 85 03 01 00 00    	jne    c00272ea <__divsf3+0x21e>
c00271e7:	31 d2                	xor    edx,edx
c00271e9:	89 d3                	mov    ebx,edx
c00271eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271ee:	31 f8                	xor    eax,edi
c00271f0:	0f 89 f7 00 00 00    	jns    c00272ed <__divsf3+0x221>
c00271f6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271fb:	e9 ed 00 00 00       	jmp    c00272ed <__divsf3+0x221>
c0027200:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027203:	50                   	push   eax
c0027204:	50                   	push   eax
c0027205:	52                   	push   edx
c0027206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027209:	e8 c7 02 00 00       	call   c00274d5 <__eqsf2>
c002720e:	83 c4 10             	add    esp,0x10
c0027211:	85 c0                	test   eax,eax
c0027213:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027216:	75 16                	jne    c002722e <__divsf3+0x162>
c0027218:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002721b:	31 fb                	xor    ebx,edi
c002721d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027223:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027229:	e9 bf 00 00 00       	jmp    c00272ed <__divsf3+0x221>
c002722e:	8d 46 01             	lea    eax,[esi+0x1]
c0027231:	01 db                	add    ebx,ebx
c0027233:	78 04                	js     c0027239 <__divsf3+0x16d>
c0027235:	89 c6                	mov    esi,eax
c0027237:	eb f5                	jmp    c002722e <__divsf3+0x162>
c0027239:	89 c8                	mov    eax,ecx
c002723b:	0d 00 00 00 80       	or     eax,0x80000000
c0027240:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027246:	31 d2                	xor    edx,edx
c0027248:	39 d8                	cmp    eax,ebx
c002724a:	72 07                	jb     c0027253 <__divsf3+0x187>
c002724c:	29 d8                	sub    eax,ebx
c002724e:	ba 01 00 00 00       	mov    edx,0x1
c0027253:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002725a:	01 d2                	add    edx,edx
c002725c:	89 c1                	mov    ecx,eax
c002725e:	01 c0                	add    eax,eax
c0027260:	85 c9                	test   ecx,ecx
c0027262:	78 04                	js     c0027268 <__divsf3+0x19c>
c0027264:	39 c3                	cmp    ebx,eax
c0027266:	77 05                	ja     c002726d <__divsf3+0x1a1>
c0027268:	29 d8                	sub    eax,ebx
c002726a:	83 ca 01             	or     edx,0x1
c002726d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027270:	75 e8                	jne    c002725a <__divsf3+0x18e>
c0027272:	85 c0                	test   eax,eax
c0027274:	0f 95 c0             	setne  al
c0027277:	0f b6 c0             	movzx  eax,al
c002727a:	c1 e2 06             	shl    edx,0x6
c002727d:	09 c2                	or     edx,eax
c002727f:	78 03                	js     c0027284 <__divsf3+0x1b8>
c0027281:	01 d2                	add    edx,edx
c0027283:	4e                   	dec    esi
c0027284:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002728a:	7f 22                	jg     c00272ae <__divsf3+0x1e2>
c002728c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027292:	85 f6                	test   esi,esi
c0027294:	7f 23                	jg     c00272b9 <__divsf3+0x1ed>
c0027296:	83 fe e9             	cmp    esi,0xffffffe9
c0027299:	7c 1a                	jl     c00272b5 <__divsf3+0x1e9>
c002729b:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272a1:	b9 01 00 00 00       	mov    ecx,0x1
c00272a6:	29 f1                	sub    ecx,esi
c00272a8:	d3 ea                	shr    edx,cl
c00272aa:	31 f6                	xor    esi,esi
c00272ac:	eb 0b                	jmp    c00272b9 <__divsf3+0x1ed>
c00272ae:	be ff 00 00 00       	mov    esi,0xff
c00272b3:	eb 02                	jmp    c00272b7 <__divsf3+0x1eb>
c00272b5:	31 f6                	xor    esi,esi
c00272b7:	31 d2                	xor    edx,edx
c00272b9:	89 d0                	mov    eax,edx
c00272bb:	c1 e8 08             	shr    eax,0x8
c00272be:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272c1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272c7:	09 fe                	or     esi,edi
c00272c9:	c1 e6 17             	shl    esi,0x17
c00272cc:	09 c6                	or     esi,eax
c00272ce:	f6 c2 7f             	test   dl,0x7f
c00272d1:	0f 95 c1             	setne  cl
c00272d4:	09 c8                	or     eax,ecx
c00272d6:	83 e0 01             	and    eax,0x1
c00272d9:	c1 ea 07             	shr    edx,0x7
c00272dc:	21 c2                	and    edx,eax
c00272de:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272e1:	eb 0a                	jmp    c00272ed <__divsf3+0x221>
c00272e3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272e8:	eb 03                	jmp    c00272ed <__divsf3+0x221>
c00272ea:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272ed:	89 d8                	mov    eax,ebx
c00272ef:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272f2:	5b                   	pop    ebx
c00272f3:	5e                   	pop    esi
c00272f4:	5f                   	pop    edi
c00272f5:	5d                   	pop    ebp
c00272f6:	c3                   	ret    

c00272f7 <__floatsisf>:
c00272f7:	55                   	push   ebp
c00272f8:	89 e5                	mov    ebp,esp
c00272fa:	53                   	push   ebx
c00272fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272fe:	85 d2                	test   edx,edx
c0027300:	7e 2b                	jle    c002732d <__floatsisf+0x36>
c0027302:	0f bd ca             	bsr    ecx,edx
c0027305:	83 f1 1f             	xor    ecx,0x1f
c0027308:	d3 e2                	shl    edx,cl
c002730a:	89 d0                	mov    eax,edx
c002730c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027311:	89 c3                	mov    ebx,eax
c0027313:	c1 eb 08             	shr    ebx,0x8
c0027316:	80 e2 7f             	and    dl,0x7f
c0027319:	0f 95 c2             	setne  dl
c002731c:	09 da                	or     edx,ebx
c002731e:	83 e2 01             	and    edx,0x1
c0027321:	c1 e8 07             	shr    eax,0x7
c0027324:	21 c2                	and    edx,eax
c0027326:	b8 9e 00 00 00       	mov    eax,0x9e
c002732b:	eb 32                	jmp    c002735f <__floatsisf+0x68>
c002732d:	b8 00 00 00 00       	mov    eax,0x0
c0027332:	74 34                	je     c0027368 <__floatsisf+0x71>
c0027334:	f7 da                	neg    edx
c0027336:	0f bd ca             	bsr    ecx,edx
c0027339:	83 f1 1f             	xor    ecx,0x1f
c002733c:	d3 e2                	shl    edx,cl
c002733e:	89 d0                	mov    eax,edx
c0027340:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027345:	89 c3                	mov    ebx,eax
c0027347:	c1 eb 08             	shr    ebx,0x8
c002734a:	80 e2 7f             	and    dl,0x7f
c002734d:	0f 95 c2             	setne  dl
c0027350:	09 da                	or     edx,ebx
c0027352:	83 e2 01             	and    edx,0x1
c0027355:	c1 e8 07             	shr    eax,0x7
c0027358:	21 c2                	and    edx,eax
c002735a:	b8 9e 01 00 00       	mov    eax,0x19e
c002735f:	29 c8                	sub    eax,ecx
c0027361:	c1 e0 17             	shl    eax,0x17
c0027364:	09 d8                	or     eax,ebx
c0027366:	01 d0                	add    eax,edx
c0027368:	5b                   	pop    ebx
c0027369:	5d                   	pop    ebp
c002736a:	c3                   	ret    

c002736b <__floatunsisf>:
c002736b:	55                   	push   ebp
c002736c:	89 e5                	mov    ebp,esp
c002736e:	53                   	push   ebx
c002736f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027372:	31 c0                	xor    eax,eax
c0027374:	85 d2                	test   edx,edx
c0027376:	74 32                	je     c00273aa <__floatunsisf+0x3f>
c0027378:	0f bd ca             	bsr    ecx,edx
c002737b:	83 f1 1f             	xor    ecx,0x1f
c002737e:	d3 e2                	shl    edx,cl
c0027380:	89 d0                	mov    eax,edx
c0027382:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027387:	89 c3                	mov    ebx,eax
c0027389:	c1 eb 08             	shr    ebx,0x8
c002738c:	80 e2 7f             	and    dl,0x7f
c002738f:	0f 95 c2             	setne  dl
c0027392:	09 da                	or     edx,ebx
c0027394:	83 e2 01             	and    edx,0x1
c0027397:	c1 e8 07             	shr    eax,0x7
c002739a:	21 c2                	and    edx,eax
c002739c:	b8 9e 00 00 00       	mov    eax,0x9e
c00273a1:	29 c8                	sub    eax,ecx
c00273a3:	c1 e0 17             	shl    eax,0x17
c00273a6:	09 d8                	or     eax,ebx
c00273a8:	01 d0                	add    eax,edx
c00273aa:	5b                   	pop    ebx
c00273ab:	5d                   	pop    ebp
c00273ac:	c3                   	ret    

c00273ad <__fixsfsi>:
c00273ad:	55                   	push   ebp
c00273ae:	89 e5                	mov    ebp,esp
c00273b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273b3:	89 d1                	mov    ecx,edx
c00273b5:	c1 e1 08             	shl    ecx,0x8
c00273b8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273be:	c1 fa 17             	sar    edx,0x17
c00273c1:	78 1c                	js     c00273df <__fixsfsi+0x32>
c00273c3:	83 ea 7f             	sub    edx,0x7f
c00273c6:	31 c0                	xor    eax,eax
c00273c8:	83 fa 1e             	cmp    edx,0x1e
c00273cb:	77 40                	ja     c002740d <__fixsfsi+0x60>
c00273cd:	89 c8                	mov    eax,ecx
c00273cf:	0d 00 00 00 80       	or     eax,0x80000000
c00273d4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273d9:	29 d1                	sub    ecx,edx
c00273db:	d3 e8                	shr    eax,cl
c00273dd:	eb 2e                	jmp    c002740d <__fixsfsi+0x60>
c00273df:	31 c0                	xor    eax,eax
c00273e1:	81 c2 81 00 00 00    	add    edx,0x81
c00273e7:	78 24                	js     c002740d <__fixsfsi+0x60>
c00273e9:	83 fa 1e             	cmp    edx,0x1e
c00273ec:	7e 09                	jle    c00273f7 <__fixsfsi+0x4a>
c00273ee:	83 fa 1f             	cmp    edx,0x1f
c00273f1:	75 18                	jne    c002740b <__fixsfsi+0x5e>
c00273f3:	85 c9                	test   ecx,ecx
c00273f5:	75 14                	jne    c002740b <__fixsfsi+0x5e>
c00273f7:	89 c8                	mov    eax,ecx
c00273f9:	0d 00 00 00 80       	or     eax,0x80000000
c00273fe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027403:	29 d1                	sub    ecx,edx
c0027405:	d3 e8                	shr    eax,cl
c0027407:	f7 d8                	neg    eax
c0027409:	eb 02                	jmp    c002740d <__fixsfsi+0x60>
c002740b:	31 c0                	xor    eax,eax
c002740d:	5d                   	pop    ebp
c002740e:	c3                   	ret    

c002740f <__fixunssfsi>:
c002740f:	55                   	push   ebp
c0027410:	89 e5                	mov    ebp,esp
c0027412:	53                   	push   ebx
c0027413:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027416:	89 d3                	mov    ebx,edx
c0027418:	c1 fb 17             	sar    ebx,0x17
c002741b:	83 eb 7f             	sub    ebx,0x7f
c002741e:	31 c0                	xor    eax,eax
c0027420:	83 fb 1f             	cmp    ebx,0x1f
c0027423:	77 18                	ja     c002743d <__fixunssfsi+0x2e>
c0027425:	89 d0                	mov    eax,edx
c0027427:	c1 e0 08             	shl    eax,0x8
c002742a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002742f:	0d 00 00 00 80       	or     eax,0x80000000
c0027434:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027439:	29 d9                	sub    ecx,ebx
c002743b:	d3 e8                	shr    eax,cl
c002743d:	5b                   	pop    ebx
c002743e:	5d                   	pop    ebp
c002743f:	c3                   	ret    

c0027440 <__cmpsf2>:
c0027440:	55                   	push   ebp
c0027441:	89 e5                	mov    ebp,esp
c0027443:	57                   	push   edi
c0027444:	56                   	push   esi
c0027445:	53                   	push   ebx
c0027446:	83 ec 24             	sub    esp,0x24
c0027449:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002744c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002744f:	e8 4f 10 00 00       	call   c00284a3 <__truncdfsf2>
c0027454:	5a                   	pop    edx
c0027455:	59                   	pop    ecx
c0027456:	89 c3                	mov    ebx,eax
c0027458:	c1 e8 17             	shr    eax,0x17
c002745b:	0f b6 f0             	movzx  esi,al
c002745e:	89 d8                	mov    eax,ebx
c0027460:	c1 e8 1f             	shr    eax,0x1f
c0027463:	31 c6                	xor    esi,eax
c0027465:	c1 e3 08             	shl    ebx,0x8
c0027468:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002746b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002746e:	e8 30 10 00 00       	call   c00284a3 <__truncdfsf2>
c0027473:	83 c4 10             	add    esp,0x10
c0027476:	89 c1                	mov    ecx,eax
c0027478:	c1 e9 17             	shr    ecx,0x17
c002747b:	0f b6 c9             	movzx  ecx,cl
c002747e:	89 c7                	mov    edi,eax
c0027480:	c1 ef 1f             	shr    edi,0x1f
c0027483:	89 ca                	mov    edx,ecx
c0027485:	31 fa                	xor    edx,edi
c0027487:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002748a:	c1 e0 08             	shl    eax,0x8
c002748d:	89 c2                	mov    edx,eax
c002748f:	89 d8                	mov    eax,ebx
c0027491:	09 d0                	or     eax,edx
c0027493:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027498:	09 f0                	or     eax,esi
c002749a:	75 08                	jne    c00274a4 <__cmpsf2+0x64>
c002749c:	31 c0                	xor    eax,eax
c002749e:	39 f9                	cmp    ecx,edi
c00274a0:	75 0c                	jne    c00274ae <__cmpsf2+0x6e>
c00274a2:	eb 29                	jmp    c00274cd <__cmpsf2+0x8d>
c00274a4:	b8 01 00 00 00       	mov    eax,0x1
c00274a9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274ac:	7f 1f                	jg     c00274cd <__cmpsf2+0x8d>
c00274ae:	83 c8 ff             	or     eax,0xffffffff
c00274b1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274b4:	7c 17                	jl     c00274cd <__cmpsf2+0x8d>
c00274b6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274bc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274c2:	b8 01 00 00 00       	mov    eax,0x1
c00274c7:	39 d3                	cmp    ebx,edx
c00274c9:	77 02                	ja     c00274cd <__cmpsf2+0x8d>
c00274cb:	19 c0                	sbb    eax,eax
c00274cd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274d0:	5b                   	pop    ebx
c00274d1:	5e                   	pop    esi
c00274d2:	5f                   	pop    edi
c00274d3:	5d                   	pop    ebp
c00274d4:	c3                   	ret    

c00274d5 <__eqsf2>:
c00274d5:	55                   	push   ebp
c00274d6:	89 e5                	mov    ebp,esp
c00274d8:	83 ec 24             	sub    esp,0x24
c00274db:	6a 01                	push   0x1
c00274dd:	83 ec 0c             	sub    esp,0xc
c00274e0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274e3:	e8 df 10 00 00       	call   c00285c7 <__extendsfdf2>
c00274e8:	83 c4 10             	add    esp,0x10
c00274eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274f1:	52                   	push   edx
c00274f2:	50                   	push   eax
c00274f3:	50                   	push   eax
c00274f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274f7:	e8 cb 10 00 00       	call   c00285c7 <__extendsfdf2>
c00274fc:	59                   	pop    ecx
c00274fd:	59                   	pop    ecx
c00274fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027501:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027504:	52                   	push   edx
c0027505:	50                   	push   eax
c0027506:	e8 35 ff ff ff       	call   c0027440 <__cmpsf2>
c002750b:	83 c4 20             	add    esp,0x20
c002750e:	c9                   	leave  
c002750f:	c3                   	ret    

c0027510 <__nesf2>:
c0027510:	eb c3                	jmp    c00274d5 <__eqsf2>

c0027512 <__gtsf2>:
c0027512:	55                   	push   ebp
c0027513:	89 e5                	mov    ebp,esp
c0027515:	83 ec 24             	sub    esp,0x24
c0027518:	6a ff                	push   0xffffffff
c002751a:	83 ec 0c             	sub    esp,0xc
c002751d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027520:	e8 a2 10 00 00       	call   c00285c7 <__extendsfdf2>
c0027525:	83 c4 10             	add    esp,0x10
c0027528:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002752b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002752e:	52                   	push   edx
c002752f:	50                   	push   eax
c0027530:	50                   	push   eax
c0027531:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027534:	e8 8e 10 00 00       	call   c00285c7 <__extendsfdf2>
c0027539:	59                   	pop    ecx
c002753a:	59                   	pop    ecx
c002753b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002753e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027541:	52                   	push   edx
c0027542:	50                   	push   eax
c0027543:	e8 f8 fe ff ff       	call   c0027440 <__cmpsf2>
c0027548:	83 c4 20             	add    esp,0x20
c002754b:	c9                   	leave  
c002754c:	c3                   	ret    

c002754d <__gesf2>:
c002754d:	eb c3                	jmp    c0027512 <__gtsf2>

c002754f <__ltsf2>:
c002754f:	eb 84                	jmp    c00274d5 <__eqsf2>

c0027551 <__lesf2>:
c0027551:	eb 82                	jmp    c00274d5 <__eqsf2>

c0027553 <__adddf3>:
c0027553:	55                   	push   ebp
c0027554:	89 e5                	mov    ebp,esp
c0027556:	57                   	push   edi
c0027557:	56                   	push   esi
c0027558:	53                   	push   ebx
c0027559:	83 ec 24             	sub    esp,0x24
c002755c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002755f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027562:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027565:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027568:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002756b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002756e:	89 c8                	mov    eax,ecx
c0027570:	89 ce                	mov    esi,ecx
c0027572:	c1 fe 14             	sar    esi,0x14
c0027575:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027578:	89 fb                	mov    ebx,edi
c002757a:	89 fa                	mov    edx,edi
c002757c:	c1 e2 0b             	shl    edx,0xb
c002757f:	c1 e0 0b             	shl    eax,0xb
c0027582:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027587:	c1 eb 15             	shr    ebx,0x15
c002758a:	09 d8                	or     eax,ebx
c002758c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002758f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027592:	c1 fe 14             	sar    esi,0x14
c0027595:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027598:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002759b:	89 f3                	mov    ebx,esi
c002759d:	c1 e3 0b             	shl    ebx,0xb
c00275a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275a3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275a6:	c1 e3 0b             	shl    ebx,0xb
c00275a9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275af:	c1 ee 15             	shr    esi,0x15
c00275b2:	09 f3                	or     ebx,esi
c00275b4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275b7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275ba:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275bd:	0f 88 5f 02 00 00    	js     c0027822 <__adddf3+0x2cf>
c00275c3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275c6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275c9:	85 db                	test   ebx,ebx
c00275cb:	0f 8e c7 00 00 00    	jle    c0027698 <__adddf3+0x145>
c00275d1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275d8:	75 1a                	jne    c00275f4 <__adddf3+0xa1>
c00275da:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275dd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275e0:	0f 84 b2 05 00 00    	je     c0027b98 <__adddf3+0x645>
c00275e6:	4b                   	dec    ebx
c00275e7:	75 23                	jne    c002760c <__adddf3+0xb9>
c00275e9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275ec:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275ef:	e9 99 00 00 00       	jmp    c002768d <__adddf3+0x13a>
c00275f4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275f7:	f7 d6                	not    esi
c00275f9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275ff:	0f 84 93 05 00 00    	je     c0027b98 <__adddf3+0x645>
c0027605:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002760c:	83 fb 1f             	cmp    ebx,0x1f
c002760f:	7e 42                	jle    c0027653 <__adddf3+0x100>
c0027611:	83 fb 3f             	cmp    ebx,0x3f
c0027614:	0f 8f 7e 05 00 00    	jg     c0027b98 <__adddf3+0x645>
c002761a:	83 e3 1f             	and    ebx,0x1f
c002761d:	89 d9                	mov    ecx,ebx
c002761f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027622:	d3 ef                	shr    edi,cl
c0027624:	31 db                	xor    ebx,ebx
c0027626:	85 c9                	test   ecx,ecx
c0027628:	74 15                	je     c002763f <__adddf3+0xec>
c002762a:	be 20 00 00 00       	mov    esi,0x20
c002762f:	29 ce                	sub    esi,ecx
c0027631:	89 f1                	mov    ecx,esi
c0027633:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027636:	d3 e6                	shl    esi,cl
c0027638:	31 db                	xor    ebx,ebx
c002763a:	85 f6                	test   esi,esi
c002763c:	0f 95 c3             	setne  bl
c002763f:	31 c9                	xor    ecx,ecx
c0027641:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027645:	0f 95 c1             	setne  cl
c0027648:	09 cf                	or     edi,ecx
c002764a:	09 fb                	or     ebx,edi
c002764c:	01 da                	add    edx,ebx
c002764e:	83 d0 00             	adc    eax,0x0
c0027651:	eb 3a                	jmp    c002768d <__adddf3+0x13a>
c0027653:	bf 20 00 00 00       	mov    edi,0x20
c0027658:	29 df                	sub    edi,ebx
c002765a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002765d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027660:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027663:	d3 e6                	shl    esi,cl
c0027665:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027668:	88 d9                	mov    cl,bl
c002766a:	d3 ef                	shr    edi,cl
c002766c:	09 fe                	or     esi,edi
c002766e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027671:	88 d9                	mov    cl,bl
c0027673:	d3 ef                	shr    edi,cl
c0027675:	89 fb                	mov    ebx,edi
c0027677:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002767a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002767d:	d3 e7                	shl    edi,cl
c002767f:	85 ff                	test   edi,edi
c0027681:	0f 95 c1             	setne  cl
c0027684:	0f b6 c9             	movzx  ecx,cl
c0027687:	09 ce                	or     esi,ecx
c0027689:	01 f2                	add    edx,esi
c002768b:	11 d8                	adc    eax,ebx
c002768d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027690:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027693:	e9 52 01 00 00       	jmp    c00277ea <__adddf3+0x297>
c0027698:	0f 84 d5 00 00 00    	je     c0027773 <__adddf3+0x220>
c002769e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276a1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276a4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276aa:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276b1:	75 20                	jne    c00276d3 <__adddf3+0x180>
c00276b3:	89 d6                	mov    esi,edx
c00276b5:	09 c6                	or     esi,eax
c00276b7:	0f 84 db 04 00 00    	je     c0027b98 <__adddf3+0x645>
c00276bd:	4b                   	dec    ebx
c00276be:	75 29                	jne    c00276e9 <__adddf3+0x196>
c00276c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276c6:	01 d1                	add    ecx,edx
c00276c8:	11 c6                	adc    esi,eax
c00276ca:	89 f0                	mov    eax,esi
c00276cc:	89 ca                	mov    edx,ecx
c00276ce:	e9 17 01 00 00       	jmp    c00277ea <__adddf3+0x297>
c00276d3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276d6:	f7 d6                	not    esi
c00276d8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276de:	0f 84 b4 04 00 00    	je     c0027b98 <__adddf3+0x645>
c00276e4:	0d 00 00 00 80       	or     eax,0x80000000
c00276e9:	83 fb 1f             	cmp    ebx,0x1f
c00276ec:	7e 48                	jle    c0027736 <__adddf3+0x1e3>
c00276ee:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276f1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276f4:	83 fb 3f             	cmp    ebx,0x3f
c00276f7:	0f 8f 9b 04 00 00    	jg     c0027b98 <__adddf3+0x645>
c00276fd:	83 e3 1f             	and    ebx,0x1f
c0027700:	89 d9                	mov    ecx,ebx
c0027702:	89 c7                	mov    edi,eax
c0027704:	d3 ef                	shr    edi,cl
c0027706:	31 db                	xor    ebx,ebx
c0027708:	85 c9                	test   ecx,ecx
c002770a:	74 12                	je     c002771e <__adddf3+0x1cb>
c002770c:	be 20 00 00 00       	mov    esi,0x20
c0027711:	29 ce                	sub    esi,ecx
c0027713:	89 f1                	mov    ecx,esi
c0027715:	d3 e0                	shl    eax,cl
c0027717:	31 db                	xor    ebx,ebx
c0027719:	85 c0                	test   eax,eax
c002771b:	0f 95 c3             	setne  bl
c002771e:	31 c0                	xor    eax,eax
c0027720:	85 d2                	test   edx,edx
c0027722:	0f 95 c0             	setne  al
c0027725:	09 c7                	or     edi,eax
c0027727:	09 fb                	or     ebx,edi
c0027729:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002772c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002772f:	01 da                	add    edx,ebx
c0027731:	83 d6 00             	adc    esi,0x0
c0027734:	eb 39                	jmp    c002776f <__adddf3+0x21c>
c0027736:	be 20 00 00 00       	mov    esi,0x20
c002773b:	29 de                	sub    esi,ebx
c002773d:	89 c7                	mov    edi,eax
c002773f:	89 f1                	mov    ecx,esi
c0027741:	d3 e7                	shl    edi,cl
c0027743:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027746:	89 d7                	mov    edi,edx
c0027748:	88 d9                	mov    cl,bl
c002774a:	d3 ef                	shr    edi,cl
c002774c:	89 f9                	mov    ecx,edi
c002774e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027751:	09 cf                	or     edi,ecx
c0027753:	88 d9                	mov    cl,bl
c0027755:	d3 e8                	shr    eax,cl
c0027757:	89 f1                	mov    ecx,esi
c0027759:	d3 e2                	shl    edx,cl
c002775b:	85 d2                	test   edx,edx
c002775d:	0f 95 c2             	setne  dl
c0027760:	0f b6 d2             	movzx  edx,dl
c0027763:	09 d7                	or     edi,edx
c0027765:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027768:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002776b:	01 fa                	add    edx,edi
c002776d:	11 c6                	adc    esi,eax
c002776f:	89 f0                	mov    eax,esi
c0027771:	eb 77                	jmp    c00277ea <__adddf3+0x297>
c0027773:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027776:	46                   	inc    esi
c0027777:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002777a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027780:	75 41                	jne    c00277c3 <__adddf3+0x270>
c0027782:	89 d3                	mov    ebx,edx
c0027784:	09 c3                	or     ebx,eax
c0027786:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002778d:	75 27                	jne    c00277b6 <__adddf3+0x263>
c002778f:	85 db                	test   ebx,ebx
c0027791:	0f 84 fb 03 00 00    	je     c0027b92 <__adddf3+0x63f>
c0027797:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002779a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002779d:	0f 84 f5 03 00 00    	je     c0027b98 <__adddf3+0x645>
c00277a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277a9:	85 c0                	test   eax,eax
c00277ab:	0f 89 91 03 00 00    	jns    c0027b42 <__adddf3+0x5ef>
c00277b1:	e9 85 03 00 00       	jmp    c0027b3b <__adddf3+0x5e8>
c00277b6:	85 db                	test   ebx,ebx
c00277b8:	0f 85 da 03 00 00    	jne    c0027b98 <__adddf3+0x645>
c00277be:	e9 cf 03 00 00       	jmp    c0027b92 <__adddf3+0x63f>
c00277c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277c9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277cc:	f7 d1                	not    ecx
c00277ce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277d4:	0f 84 70 03 00 00    	je     c0027b4a <__adddf3+0x5f7>
c00277da:	d1 ea                	shr    edx,1
c00277dc:	89 c1                	mov    ecx,eax
c00277de:	c1 e1 1f             	shl    ecx,0x1f
c00277e1:	09 ca                	or     edx,ecx
c00277e3:	d1 e8                	shr    eax,1
c00277e5:	e9 6f 03 00 00       	jmp    c0027b59 <__adddf3+0x606>
c00277ea:	85 c0                	test   eax,eax
c00277ec:	0f 89 67 03 00 00    	jns    c0027b59 <__adddf3+0x606>
c00277f2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277f8:	f7 d1                	not    ecx
c00277fa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027800:	0f 84 44 03 00 00    	je     c0027b4a <__adddf3+0x5f7>
c0027806:	89 d1                	mov    ecx,edx
c0027808:	d1 e9                	shr    ecx,1
c002780a:	83 e2 01             	and    edx,0x1
c002780d:	09 ca                	or     edx,ecx
c002780f:	89 c1                	mov    ecx,eax
c0027811:	c1 e1 1f             	shl    ecx,0x1f
c0027814:	09 ca                	or     edx,ecx
c0027816:	d1 e8                	shr    eax,1
c0027818:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002781d:	e9 37 03 00 00       	jmp    c0027b59 <__adddf3+0x606>
c0027822:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027825:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002782b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002782e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027831:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027837:	29 de                	sub    esi,ebx
c0027839:	85 f6                	test   esi,esi
c002783b:	0f 8e bd 00 00 00    	jle    c00278fe <__adddf3+0x3ab>
c0027841:	85 db                	test   ebx,ebx
c0027843:	75 17                	jne    c002785c <__adddf3+0x309>
c0027845:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027848:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002784b:	0f 84 47 03 00 00    	je     c0027b98 <__adddf3+0x645>
c0027851:	4e                   	dec    esi
c0027852:	75 20                	jne    c0027874 <__adddf3+0x321>
c0027854:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027857:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002785a:	eb 5b                	jmp    c00278b7 <__adddf3+0x364>
c002785c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002785f:	f7 d3                	not    ebx
c0027861:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027867:	0f 84 2b 03 00 00    	je     c0027b98 <__adddf3+0x645>
c002786d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027874:	83 fe 1f             	cmp    esi,0x1f
c0027877:	7e 49                	jle    c00278c2 <__adddf3+0x36f>
c0027879:	83 fe 3f             	cmp    esi,0x3f
c002787c:	0f 8f 16 03 00 00    	jg     c0027b98 <__adddf3+0x645>
c0027882:	83 e6 1f             	and    esi,0x1f
c0027885:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027888:	89 f1                	mov    ecx,esi
c002788a:	d3 ef                	shr    edi,cl
c002788c:	31 db                	xor    ebx,ebx
c002788e:	85 f6                	test   esi,esi
c0027890:	74 13                	je     c00278a5 <__adddf3+0x352>
c0027892:	b9 20 00 00 00       	mov    ecx,0x20
c0027897:	29 f1                	sub    ecx,esi
c0027899:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002789c:	d3 e6                	shl    esi,cl
c002789e:	31 db                	xor    ebx,ebx
c00278a0:	85 f6                	test   esi,esi
c00278a2:	0f 95 c3             	setne  bl
c00278a5:	31 c9                	xor    ecx,ecx
c00278a7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278ab:	0f 95 c1             	setne  cl
c00278ae:	09 cf                	or     edi,ecx
c00278b0:	09 fb                	or     ebx,edi
c00278b2:	29 da                	sub    edx,ebx
c00278b4:	83 d8 00             	sbb    eax,0x0
c00278b7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278bd:	e9 aa 01 00 00       	jmp    c0027a6c <__adddf3+0x519>
c00278c2:	bf 20 00 00 00       	mov    edi,0x20
c00278c7:	29 f7                	sub    edi,esi
c00278c9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278cc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278cf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278d2:	d3 e3                	shl    ebx,cl
c00278d4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278d7:	89 f1                	mov    ecx,esi
c00278d9:	d3 ef                	shr    edi,cl
c00278db:	09 fb                	or     ebx,edi
c00278dd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278e0:	89 f1                	mov    ecx,esi
c00278e2:	d3 ef                	shr    edi,cl
c00278e4:	89 fe                	mov    esi,edi
c00278e6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278e9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278ec:	d3 e7                	shl    edi,cl
c00278ee:	85 ff                	test   edi,edi
c00278f0:	0f 95 c1             	setne  cl
c00278f3:	0f b6 c9             	movzx  ecx,cl
c00278f6:	09 cb                	or     ebx,ecx
c00278f8:	29 da                	sub    edx,ebx
c00278fa:	19 f0                	sbb    eax,esi
c00278fc:	eb b9                	jmp    c00278b7 <__adddf3+0x364>
c00278fe:	0f 84 cd 00 00 00    	je     c00279d1 <__adddf3+0x47e>
c0027904:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027907:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002790a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002790d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027911:	75 1b                	jne    c002792e <__adddf3+0x3db>
c0027913:	89 d6                	mov    esi,edx
c0027915:	09 c6                	or     esi,eax
c0027917:	0f 84 7b 02 00 00    	je     c0027b98 <__adddf3+0x645>
c002791d:	4b                   	dec    ebx
c002791e:	75 24                	jne    c0027944 <__adddf3+0x3f1>
c0027920:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027923:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027926:	29 d1                	sub    ecx,edx
c0027928:	19 c6                	sbb    esi,eax
c002792a:	89 ca                	mov    edx,ecx
c002792c:	eb 61                	jmp    c002798f <__adddf3+0x43c>
c002792e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027931:	f7 d6                	not    esi
c0027933:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027939:	0f 84 59 02 00 00    	je     c0027b98 <__adddf3+0x645>
c002793f:	0d 00 00 00 80       	or     eax,0x80000000
c0027944:	83 fb 1f             	cmp    ebx,0x1f
c0027947:	7e 4d                	jle    c0027996 <__adddf3+0x443>
c0027949:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002794c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002794f:	83 fb 3f             	cmp    ebx,0x3f
c0027952:	0f 8f 40 02 00 00    	jg     c0027b98 <__adddf3+0x645>
c0027958:	83 e3 1f             	and    ebx,0x1f
c002795b:	89 d9                	mov    ecx,ebx
c002795d:	89 c7                	mov    edi,eax
c002795f:	d3 ef                	shr    edi,cl
c0027961:	31 db                	xor    ebx,ebx
c0027963:	85 c9                	test   ecx,ecx
c0027965:	74 12                	je     c0027979 <__adddf3+0x426>
c0027967:	be 20 00 00 00       	mov    esi,0x20
c002796c:	29 ce                	sub    esi,ecx
c002796e:	89 f1                	mov    ecx,esi
c0027970:	d3 e0                	shl    eax,cl
c0027972:	31 db                	xor    ebx,ebx
c0027974:	85 c0                	test   eax,eax
c0027976:	0f 95 c3             	setne  bl
c0027979:	31 c0                	xor    eax,eax
c002797b:	85 d2                	test   edx,edx
c002797d:	0f 95 c0             	setne  al
c0027980:	09 c7                	or     edi,eax
c0027982:	09 fb                	or     ebx,edi
c0027984:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027987:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002798a:	29 da                	sub    edx,ebx
c002798c:	83 de 00             	sbb    esi,0x0
c002798f:	89 f0                	mov    eax,esi
c0027991:	e9 d6 00 00 00       	jmp    c0027a6c <__adddf3+0x519>
c0027996:	be 20 00 00 00       	mov    esi,0x20
c002799b:	29 de                	sub    esi,ebx
c002799d:	89 c7                	mov    edi,eax
c002799f:	89 f1                	mov    ecx,esi
c00279a1:	d3 e7                	shl    edi,cl
c00279a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279a6:	89 d7                	mov    edi,edx
c00279a8:	88 d9                	mov    cl,bl
c00279aa:	d3 ef                	shr    edi,cl
c00279ac:	89 f9                	mov    ecx,edi
c00279ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279b1:	09 cf                	or     edi,ecx
c00279b3:	88 d9                	mov    cl,bl
c00279b5:	d3 e8                	shr    eax,cl
c00279b7:	89 f1                	mov    ecx,esi
c00279b9:	d3 e2                	shl    edx,cl
c00279bb:	85 d2                	test   edx,edx
c00279bd:	0f 95 c2             	setne  dl
c00279c0:	0f b6 d2             	movzx  edx,dl
c00279c3:	09 d7                	or     edi,edx
c00279c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279cb:	29 fa                	sub    edx,edi
c00279cd:	19 c6                	sbb    esi,eax
c00279cf:	eb be                	jmp    c002798f <__adddf3+0x43c>
c00279d1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279d7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279dd:	75 6a                	jne    c0027a49 <__adddf3+0x4f6>
c00279df:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279e3:	75 58                	jne    c0027a3d <__adddf3+0x4ea>
c00279e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279eb:	89 d6                	mov    esi,edx
c00279ed:	09 c6                	or     esi,eax
c00279ef:	75 17                	jne    c0027a08 <__adddf3+0x4b5>
c00279f1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279f7:	85 db                	test   ebx,ebx
c00279f9:	0f 85 99 01 00 00    	jne    c0027b98 <__adddf3+0x645>
c00279ff:	31 ff                	xor    edi,edi
c0027a01:	31 c9                	xor    ecx,ecx
c0027a03:	e9 90 01 00 00       	jmp    c0027b98 <__adddf3+0x645>
c0027a08:	85 db                	test   ebx,ebx
c0027a0a:	0f 84 88 01 00 00    	je     c0027b98 <__adddf3+0x645>
c0027a10:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a13:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a16:	85 c0                	test   eax,eax
c0027a18:	79 10                	jns    c0027a2a <__adddf3+0x4d7>
c0027a1a:	31 c9                	xor    ecx,ecx
c0027a1c:	f7 da                	neg    edx
c0027a1e:	0f 95 c1             	setne  cl
c0027a21:	01 c8                	add    eax,ecx
c0027a23:	f7 d8                	neg    eax
c0027a25:	e9 2f 01 00 00       	jmp    c0027b59 <__adddf3+0x606>
c0027a2a:	31 ff                	xor    edi,edi
c0027a2c:	31 c9                	xor    ecx,ecx
c0027a2e:	89 c3                	mov    ebx,eax
c0027a30:	09 d3                	or     ebx,edx
c0027a32:	0f 84 60 01 00 00    	je     c0027b98 <__adddf3+0x645>
c0027a38:	e9 05 01 00 00       	jmp    c0027b42 <__adddf3+0x5ef>
c0027a3d:	31 ff                	xor    edi,edi
c0027a3f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a44:	e9 4f 01 00 00       	jmp    c0027b98 <__adddf3+0x645>
c0027a49:	89 c1                	mov    ecx,eax
c0027a4b:	89 d0                	mov    eax,edx
c0027a4d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a50:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a53:	89 ca                	mov    edx,ecx
c0027a55:	85 c9                	test   ecx,ecx
c0027a57:	79 2c                	jns    c0027a85 <__adddf3+0x532>
c0027a59:	31 c9                	xor    ecx,ecx
c0027a5b:	f7 d8                	neg    eax
c0027a5d:	0f 95 c1             	setne  cl
c0027a60:	01 ca                	add    edx,ecx
c0027a62:	f7 da                	neg    edx
c0027a64:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a67:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a6a:	eb 19                	jmp    c0027a85 <__adddf3+0x532>
c0027a6c:	85 c0                	test   eax,eax
c0027a6e:	0f 89 e5 00 00 00    	jns    c0027b59 <__adddf3+0x606>
c0027a74:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a79:	89 c1                	mov    ecx,eax
c0027a7b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a7e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a81:	89 d0                	mov    eax,edx
c0027a83:	89 ca                	mov    edx,ecx
c0027a85:	85 d2                	test   edx,edx
c0027a87:	74 59                	je     c0027ae2 <__adddf3+0x58f>
c0027a89:	0f bd da             	bsr    ebx,edx
c0027a8c:	83 f3 1f             	xor    ebx,0x1f
c0027a8f:	88 d9                	mov    cl,bl
c0027a91:	d3 e2                	shl    edx,cl
c0027a93:	bf 20 00 00 00       	mov    edi,0x20
c0027a98:	89 f9                	mov    ecx,edi
c0027a9a:	29 d9                	sub    ecx,ebx
c0027a9c:	89 c6                	mov    esi,eax
c0027a9e:	d3 ee                	shr    esi,cl
c0027aa0:	09 d6                	or     esi,edx
c0027aa2:	88 d9                	mov    cl,bl
c0027aa4:	d3 e0                	shl    eax,cl
c0027aa6:	89 c2                	mov    edx,eax
c0027aa8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aab:	25 ff 07 00 00       	and    eax,0x7ff
c0027ab0:	39 d8                	cmp    eax,ebx
c0027ab2:	7f 22                	jg     c0027ad6 <__adddf3+0x583>
c0027ab4:	29 c3                	sub    ebx,eax
c0027ab6:	43                   	inc    ebx
c0027ab7:	88 d9                	mov    cl,bl
c0027ab9:	d3 ea                	shr    edx,cl
c0027abb:	29 df                	sub    edi,ebx
c0027abd:	89 f9                	mov    ecx,edi
c0027abf:	89 f0                	mov    eax,esi
c0027ac1:	d3 e0                	shl    eax,cl
c0027ac3:	09 c2                	or     edx,eax
c0027ac5:	89 f0                	mov    eax,esi
c0027ac7:	88 d9                	mov    cl,bl
c0027ac9:	d3 e8                	shr    eax,cl
c0027acb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ace:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ad4:	eb 6f                	jmp    c0027b45 <__adddf3+0x5f2>
c0027ad6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ad9:	29 d8                	sub    eax,ebx
c0027adb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ade:	89 f0                	mov    eax,esi
c0027ae0:	eb 59                	jmp    c0027b3b <__adddf3+0x5e8>
c0027ae2:	85 c0                	test   eax,eax
c0027ae4:	74 6a                	je     c0027b50 <__adddf3+0x5fd>
c0027ae6:	0f bd c8             	bsr    ecx,eax
c0027ae9:	83 f1 1f             	xor    ecx,0x1f
c0027aec:	d3 e0                	shl    eax,cl
c0027aee:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027af1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027af7:	83 c1 20             	add    ecx,0x20
c0027afa:	39 cb                	cmp    ebx,ecx
c0027afc:	7f 35                	jg     c0027b33 <__adddf3+0x5e0>
c0027afe:	29 d9                	sub    ecx,ebx
c0027b00:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b03:	83 fe 1f             	cmp    esi,0x1f
c0027b06:	7e 09                	jle    c0027b11 <__adddf3+0x5be>
c0027b08:	83 e9 1f             	sub    ecx,0x1f
c0027b0b:	d3 e8                	shr    eax,cl
c0027b0d:	89 c3                	mov    ebx,eax
c0027b0f:	eb 11                	jmp    c0027b22 <__adddf3+0x5cf>
c0027b11:	b9 20 00 00 00       	mov    ecx,0x20
c0027b16:	29 f1                	sub    ecx,esi
c0027b18:	89 c3                	mov    ebx,eax
c0027b1a:	d3 e3                	shl    ebx,cl
c0027b1c:	89 f1                	mov    ecx,esi
c0027b1e:	d3 e8                	shr    eax,cl
c0027b20:	89 c2                	mov    edx,eax
c0027b22:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b25:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b2a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b2d:	89 d0                	mov    eax,edx
c0027b2f:	89 da                	mov    edx,ebx
c0027b31:	eb 26                	jmp    c0027b59 <__adddf3+0x606>
c0027b33:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b36:	29 cf                	sub    edi,ecx
c0027b38:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b3b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b40:	eb 17                	jmp    c0027b59 <__adddf3+0x606>
c0027b42:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b45:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b48:	eb 0f                	jmp    c0027b59 <__adddf3+0x606>
c0027b4a:	31 d2                	xor    edx,edx
c0027b4c:	31 c0                	xor    eax,eax
c0027b4e:	eb 09                	jmp    c0027b59 <__adddf3+0x606>
c0027b50:	89 c2                	mov    edx,eax
c0027b52:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b59:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b5c:	c1 e1 14             	shl    ecx,0x14
c0027b5f:	89 c3                	mov    ebx,eax
c0027b61:	c1 eb 0b             	shr    ebx,0xb
c0027b64:	09 d9                	or     ecx,ebx
c0027b66:	89 d3                	mov    ebx,edx
c0027b68:	c1 eb 0b             	shr    ebx,0xb
c0027b6b:	c1 e0 15             	shl    eax,0x15
c0027b6e:	09 d8                	or     eax,ebx
c0027b70:	89 c7                	mov    edi,eax
c0027b72:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b78:	0f 95 c0             	setne  al
c0027b7b:	89 c6                	mov    esi,eax
c0027b7d:	09 f3                	or     ebx,esi
c0027b7f:	83 e3 01             	and    ebx,0x1
c0027b82:	c1 ea 0a             	shr    edx,0xa
c0027b85:	21 da                	and    edx,ebx
c0027b87:	89 f8                	mov    eax,edi
c0027b89:	01 d0                	add    eax,edx
c0027b8b:	83 d1 00             	adc    ecx,0x0
c0027b8e:	89 c7                	mov    edi,eax
c0027b90:	eb 06                	jmp    c0027b98 <__adddf3+0x645>
c0027b92:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b95:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b98:	89 f8                	mov    eax,edi
c0027b9a:	89 ca                	mov    edx,ecx
c0027b9c:	83 c4 24             	add    esp,0x24
c0027b9f:	5b                   	pop    ebx
c0027ba0:	5e                   	pop    esi
c0027ba1:	5f                   	pop    edi
c0027ba2:	5d                   	pop    ebp
c0027ba3:	c3                   	ret    

c0027ba4 <__subdf3>:
c0027ba4:	55                   	push   ebp
c0027ba5:	89 e5                	mov    ebp,esp
c0027ba7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027baa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bad:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bb3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bb6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bb9:	5d                   	pop    ebp
c0027bba:	e9 94 f9 ff ff       	jmp    c0027553 <__adddf3>

c0027bbf <__negdf2>:
c0027bbf:	55                   	push   ebp
c0027bc0:	89 e5                	mov    ebp,esp
c0027bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bc5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bc8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bce:	5d                   	pop    ebp
c0027bcf:	c3                   	ret    

c0027bd0 <__muldf3>:
c0027bd0:	55                   	push   ebp
c0027bd1:	89 e5                	mov    ebp,esp
c0027bd3:	57                   	push   edi
c0027bd4:	56                   	push   esi
c0027bd5:	53                   	push   ebx
c0027bd6:	83 ec 24             	sub    esp,0x24
c0027bd9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bdf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027be2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027be5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027be8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027beb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bee:	89 c8                	mov    eax,ecx
c0027bf0:	c1 f8 14             	sar    eax,0x14
c0027bf3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bf6:	89 f8                	mov    eax,edi
c0027bf8:	89 fb                	mov    ebx,edi
c0027bfa:	c1 e3 0b             	shl    ebx,0xb
c0027bfd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c00:	c1 e1 0b             	shl    ecx,0xb
c0027c03:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c09:	c1 e8 15             	shr    eax,0x15
c0027c0c:	09 c1                	or     ecx,eax
c0027c0e:	89 d6                	mov    esi,edx
c0027c10:	89 d0                	mov    eax,edx
c0027c12:	c1 f8 14             	sar    eax,0x14
c0027c15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c1b:	89 c3                	mov    ebx,eax
c0027c1d:	c1 e3 0b             	shl    ebx,0xb
c0027c20:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c23:	c1 e6 0b             	shl    esi,0xb
c0027c26:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c2c:	c1 e8 15             	shr    eax,0x15
c0027c2f:	09 c6                	or     esi,eax
c0027c31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c34:	25 ff 07 00 00       	and    eax,0x7ff
c0027c39:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c3f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c44:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c47:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c4a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c4d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c57:	40                   	inc    eax
c0027c58:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c5d:	0f 85 8d 00 00 00    	jne    c0027cf0 <__muldf3+0x120>
c0027c63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c66:	09 c8                	or     eax,ecx
c0027c68:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c6c:	74 44                	je     c0027cb2 <__muldf3+0xe2>
c0027c6e:	85 c0                	test   eax,eax
c0027c70:	0f 85 31 02 00 00    	jne    c0027ea7 <__muldf3+0x2d7>
c0027c76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c79:	40                   	inc    eax
c0027c7a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c7f:	75 13                	jne    c0027c94 <__muldf3+0xc4>
c0027c81:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c84:	09 f1                	or     ecx,esi
c0027c86:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c8a:	74 22                	je     c0027cae <__muldf3+0xde>
c0027c8c:	85 c9                	test   ecx,ecx
c0027c8e:	0f 85 0d 02 00 00    	jne    c0027ea1 <__muldf3+0x2d1>
c0027c94:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c98:	0f 89 09 02 00 00    	jns    c0027ea7 <__muldf3+0x2d7>
c0027c9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ca1:	05 00 00 00 80       	add    eax,0x80000000
c0027ca6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ca9:	e9 f9 01 00 00       	jmp    c0027ea7 <__muldf3+0x2d7>
c0027cae:	85 c9                	test   ecx,ecx
c0027cb0:	eb 2e                	jmp    c0027ce0 <__muldf3+0x110>
c0027cb2:	85 c0                	test   eax,eax
c0027cb4:	74 20                	je     c0027cd6 <__muldf3+0x106>
c0027cb6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cb9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cbc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cbf:	c1 ef 1f             	shr    edi,0x1f
c0027cc2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cc5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cc8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ccb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cce:	09 f9                	or     ecx,edi
c0027cd0:	78 1e                	js     c0027cf0 <__muldf3+0x120>
c0027cd2:	89 c3                	mov    ebx,eax
c0027cd4:	eb e0                	jmp    c0027cb6 <__muldf3+0xe6>
c0027cd6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cd9:	f7 d0                	not    eax
c0027cdb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027ce0:	75 b2                	jne    c0027c94 <__muldf3+0xc4>
c0027ce2:	31 ff                	xor    edi,edi
c0027ce4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ceb:	e9 b7 01 00 00       	jmp    c0027ea7 <__muldf3+0x2d7>
c0027cf0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cf3:	40                   	inc    eax
c0027cf4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cf9:	75 57                	jne    c0027d52 <__muldf3+0x182>
c0027cfb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cfe:	09 f0                	or     eax,esi
c0027d00:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d04:	74 23                	je     c0027d29 <__muldf3+0x159>
c0027d06:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d0a:	0f 89 91 01 00 00    	jns    c0027ea1 <__muldf3+0x2d1>
c0027d10:	85 c0                	test   eax,eax
c0027d12:	0f 85 89 01 00 00    	jne    c0027ea1 <__muldf3+0x2d1>
c0027d18:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d1b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d24:	e9 7e 01 00 00       	jmp    c0027ea7 <__muldf3+0x2d7>
c0027d29:	85 c0                	test   eax,eax
c0027d2b:	75 0c                	jne    c0027d39 <__muldf3+0x169>
c0027d2d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d31:	0f 89 6a 01 00 00    	jns    c0027ea1 <__muldf3+0x2d1>
c0027d37:	eb df                	jmp    c0027d18 <__muldf3+0x148>
c0027d39:	01 f6                	add    esi,esi
c0027d3b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d3e:	c1 ea 1f             	shr    edx,0x1f
c0027d41:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d44:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d47:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d4a:	09 d6                	or     esi,edx
c0027d4c:	78 04                	js     c0027d52 <__muldf3+0x182>
c0027d4e:	89 c3                	mov    ebx,eax
c0027d50:	eb e7                	jmp    c0027d39 <__muldf3+0x169>
c0027d52:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d58:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d5e:	89 c8                	mov    eax,ecx
c0027d60:	f7 e6                	mul    esi
c0027d62:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d65:	89 c7                	mov    edi,eax
c0027d67:	89 c8                	mov    eax,ecx
c0027d69:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d6c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d6f:	89 c1                	mov    ecx,eax
c0027d71:	89 f0                	mov    eax,esi
c0027d73:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d76:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d79:	89 c6                	mov    esi,eax
c0027d7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d7e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d81:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d84:	31 c0                	xor    eax,eax
c0027d86:	01 f1                	add    ecx,esi
c0027d88:	0f 92 c0             	setb   al
c0027d8b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d8e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d91:	83 d6 00             	adc    esi,0x0
c0027d94:	01 c7                	add    edi,eax
c0027d96:	83 d6 00             	adc    esi,0x0
c0027d99:	01 ca                	add    edx,ecx
c0027d9b:	0f 92 c1             	setb   cl
c0027d9e:	0f b6 c9             	movzx  ecx,cl
c0027da1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027da4:	83 d6 00             	adc    esi,0x0
c0027da7:	01 cf                	add    edi,ecx
c0027da9:	83 d6 00             	adc    esi,0x0
c0027dac:	31 c9                	xor    ecx,ecx
c0027dae:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027db1:	0f 95 c1             	setne  cl
c0027db4:	09 cf                	or     edi,ecx
c0027db6:	85 f6                	test   esi,esi
c0027db8:	78 0c                	js     c0027dc6 <__muldf3+0x1f6>
c0027dba:	01 f6                	add    esi,esi
c0027dbc:	89 f8                	mov    eax,edi
c0027dbe:	c1 e8 1f             	shr    eax,0x1f
c0027dc1:	09 c6                	or     esi,eax
c0027dc3:	01 ff                	add    edi,edi
c0027dc5:	4b                   	dec    ebx
c0027dc6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dcc:	0f 8f 85 00 00 00    	jg     c0027e57 <__muldf3+0x287>
c0027dd2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027dd8:	85 db                	test   ebx,ebx
c0027dda:	0f 8f 84 00 00 00    	jg     c0027e64 <__muldf3+0x294>
c0027de0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027de3:	7c 79                	jl     c0027e5e <__muldf3+0x28e>
c0027de5:	ba 01 00 00 00       	mov    edx,0x1
c0027dea:	29 da                	sub    edx,ebx
c0027dec:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027df2:	83 fa 1f             	cmp    edx,0x1f
c0027df5:	7e 30                	jle    c0027e27 <__muldf3+0x257>
c0027df7:	83 fa 20             	cmp    edx,0x20
c0027dfa:	75 0b                	jne    c0027e07 <__muldf3+0x237>
c0027dfc:	31 c0                	xor    eax,eax
c0027dfe:	85 ff                	test   edi,edi
c0027e00:	0f 95 c0             	setne  al
c0027e03:	89 c7                	mov    edi,eax
c0027e05:	eb 1a                	jmp    c0027e21 <__muldf3+0x251>
c0027e07:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e0a:	89 f0                	mov    eax,esi
c0027e0c:	d3 e0                	shl    eax,cl
c0027e0e:	09 f8                	or     eax,edi
c0027e10:	0f 95 c0             	setne  al
c0027e13:	0f b6 c0             	movzx  eax,al
c0027e16:	89 c7                	mov    edi,eax
c0027e18:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e1d:	29 d9                	sub    ecx,ebx
c0027e1f:	d3 ee                	shr    esi,cl
c0027e21:	09 f7                	or     edi,esi
c0027e23:	31 db                	xor    ebx,ebx
c0027e25:	eb 3b                	jmp    c0027e62 <__muldf3+0x292>
c0027e27:	83 c3 1f             	add    ebx,0x1f
c0027e2a:	89 f0                	mov    eax,esi
c0027e2c:	88 d9                	mov    cl,bl
c0027e2e:	d3 e0                	shl    eax,cl
c0027e30:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e33:	89 f8                	mov    eax,edi
c0027e35:	88 d1                	mov    cl,dl
c0027e37:	d3 e8                	shr    eax,cl
c0027e39:	89 c1                	mov    ecx,eax
c0027e3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e3e:	09 c8                	or     eax,ecx
c0027e40:	88 d9                	mov    cl,bl
c0027e42:	d3 e7                	shl    edi,cl
c0027e44:	31 db                	xor    ebx,ebx
c0027e46:	85 ff                	test   edi,edi
c0027e48:	0f 95 c3             	setne  bl
c0027e4b:	89 df                	mov    edi,ebx
c0027e4d:	09 c7                	or     edi,eax
c0027e4f:	88 d1                	mov    cl,dl
c0027e51:	d3 ee                	shr    esi,cl
c0027e53:	31 db                	xor    ebx,ebx
c0027e55:	eb 0d                	jmp    c0027e64 <__muldf3+0x294>
c0027e57:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e5c:	eb 02                	jmp    c0027e60 <__muldf3+0x290>
c0027e5e:	31 db                	xor    ebx,ebx
c0027e60:	31 ff                	xor    edi,edi
c0027e62:	31 f6                	xor    esi,esi
c0027e64:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e67:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e6a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e6f:	09 c3                	or     ebx,eax
c0027e71:	c1 e3 14             	shl    ebx,0x14
c0027e74:	89 f0                	mov    eax,esi
c0027e76:	c1 e8 0b             	shr    eax,0xb
c0027e79:	09 c3                	or     ebx,eax
c0027e7b:	89 f8                	mov    eax,edi
c0027e7d:	c1 e8 0b             	shr    eax,0xb
c0027e80:	c1 e6 15             	shl    esi,0x15
c0027e83:	09 c6                	or     esi,eax
c0027e85:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e8b:	0f 95 c1             	setne  cl
c0027e8e:	09 c8                	or     eax,ecx
c0027e90:	83 e0 01             	and    eax,0x1
c0027e93:	c1 ef 0a             	shr    edi,0xa
c0027e96:	21 c7                	and    edi,eax
c0027e98:	01 f7                	add    edi,esi
c0027e9a:	83 d3 00             	adc    ebx,0x0
c0027e9d:	89 da                	mov    edx,ebx
c0027e9f:	eb 03                	jmp    c0027ea4 <__muldf3+0x2d4>
c0027ea1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ea4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027ea7:	89 f8                	mov    eax,edi
c0027ea9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027eac:	83 c4 24             	add    esp,0x24
c0027eaf:	5b                   	pop    ebx
c0027eb0:	5e                   	pop    esi
c0027eb1:	5f                   	pop    edi
c0027eb2:	5d                   	pop    ebp
c0027eb3:	c3                   	ret    

c0027eb4 <__divdf3>:
c0027eb4:	55                   	push   ebp
c0027eb5:	89 e5                	mov    ebp,esp
c0027eb7:	57                   	push   edi
c0027eb8:	56                   	push   esi
c0027eb9:	53                   	push   ebx
c0027eba:	83 ec 2c             	sub    esp,0x2c
c0027ebd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ec0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ec3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ec6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ec9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ecc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ecf:	89 ce                	mov    esi,ecx
c0027ed1:	89 c8                	mov    eax,ecx
c0027ed3:	c1 f8 14             	sar    eax,0x14
c0027ed6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ed9:	89 f8                	mov    eax,edi
c0027edb:	89 fb                	mov    ebx,edi
c0027edd:	c1 e3 0b             	shl    ebx,0xb
c0027ee0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ee3:	c1 e6 0b             	shl    esi,0xb
c0027ee6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027eec:	c1 e8 15             	shr    eax,0x15
c0027eef:	09 c6                	or     esi,eax
c0027ef1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ef4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ef7:	89 c2                	mov    edx,eax
c0027ef9:	c1 fa 14             	sar    edx,0x14
c0027efc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027eff:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f02:	89 de                	mov    esi,ebx
c0027f04:	c1 e6 0b             	shl    esi,0xb
c0027f07:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f0a:	c1 e0 0b             	shl    eax,0xb
c0027f0d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f12:	c1 eb 15             	shr    ebx,0x15
c0027f15:	09 d8                	or     eax,ebx
c0027f17:	89 c2                	mov    edx,eax
c0027f19:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f1c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f21:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f24:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f27:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f2d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f30:	29 d8                	sub    eax,ebx
c0027f32:	05 ff 03 00 00       	add    eax,0x3ff
c0027f37:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f3a:	46                   	inc    esi
c0027f3b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f41:	0f 85 a5 00 00 00    	jne    c0027fec <__divdf3+0x138>
c0027f47:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f4a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f4d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f51:	74 2a                	je     c0027f7d <__divdf3+0xc9>
c0027f53:	85 f6                	test   esi,esi
c0027f55:	0f 85 cc 02 00 00    	jne    c0028227 <__divdf3+0x373>
c0027f5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f5e:	40                   	inc    eax
c0027f5f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f64:	75 26                	jne    c0027f8c <__divdf3+0xd8>
c0027f66:	85 db                	test   ebx,ebx
c0027f68:	74 22                	je     c0027f8c <__divdf3+0xd8>
c0027f6a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f6d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f73:	09 d0                	or     eax,edx
c0027f75:	0f 85 ac 02 00 00    	jne    c0028227 <__divdf3+0x373>
c0027f7b:	eb 63                	jmp    c0027fe0 <__divdf3+0x12c>
c0027f7d:	85 f6                	test   esi,esi
c0027f7f:	75 22                	jne    c0027fa3 <__divdf3+0xef>
c0027f81:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f84:	40                   	inc    eax
c0027f85:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f8a:	74 36                	je     c0027fc2 <__divdf3+0x10e>
c0027f8c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f90:	0f 89 91 02 00 00    	jns    c0028227 <__divdf3+0x373>
c0027f96:	89 f8                	mov    eax,edi
c0027f98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f9e:	e9 80 02 00 00       	jmp    c0028223 <__divdf3+0x36f>
c0027fa3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fa6:	01 f6                	add    esi,esi
c0027fa8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fab:	c1 ef 1f             	shr    edi,0x1f
c0027fae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fb1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fb4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fb7:	09 f7                	or     edi,esi
c0027fb9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fbc:	78 2e                	js     c0027fec <__divdf3+0x138>
c0027fbe:	89 c8                	mov    eax,ecx
c0027fc0:	eb e1                	jmp    c0027fa3 <__divdf3+0xef>
c0027fc2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fc5:	09 d0                	or     eax,edx
c0027fc7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fcb:	74 0f                	je     c0027fdc <__divdf3+0x128>
c0027fcd:	85 c0                	test   eax,eax
c0027fcf:	74 bb                	je     c0027f8c <__divdf3+0xd8>
c0027fd1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fd4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fd7:	e9 4b 02 00 00       	jmp    c0028227 <__divdf3+0x373>
c0027fdc:	85 c0                	test   eax,eax
c0027fde:	75 ac                	jne    c0027f8c <__divdf3+0xd8>
c0027fe0:	31 ff                	xor    edi,edi
c0027fe2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fe7:	e9 3b 02 00 00       	jmp    c0028227 <__divdf3+0x373>
c0027fec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fef:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027ff2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027ff8:	75 6b                	jne    c0028065 <__divdf3+0x1b1>
c0027ffa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ffd:	09 d6                	or     esi,edx
c0027fff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028003:	74 28                	je     c002802d <__divdf3+0x179>
c0028005:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028008:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002800b:	85 f6                	test   esi,esi
c002800d:	0f 85 14 02 00 00    	jne    c0028227 <__divdf3+0x373>
c0028013:	31 ff                	xor    edi,edi
c0028015:	31 c9                	xor    ecx,ecx
c0028017:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002801a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002801d:	0f 89 04 02 00 00    	jns    c0028227 <__divdf3+0x373>
c0028023:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028028:	e9 fa 01 00 00       	jmp    c0028227 <__divdf3+0x373>
c002802d:	85 f6                	test   esi,esi
c002802f:	75 1b                	jne    c002804c <__divdf3+0x198>
c0028031:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028034:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028037:	25 00 00 00 80       	and    eax,0x80000000
c002803c:	31 c9                	xor    ecx,ecx
c002803e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028043:	89 cf                	mov    edi,ecx
c0028045:	89 c1                	mov    ecx,eax
c0028047:	e9 db 01 00 00       	jmp    c0028227 <__divdf3+0x373>
c002804c:	01 d2                	add    edx,edx
c002804e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028051:	c1 eb 1f             	shr    ebx,0x1f
c0028054:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028057:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002805a:	8d 48 01             	lea    ecx,[eax+0x1]
c002805d:	09 da                	or     edx,ebx
c002805f:	78 04                	js     c0028065 <__divdf3+0x1b1>
c0028061:	89 c8                	mov    eax,ecx
c0028063:	eb e7                	jmp    c002804c <__divdf3+0x198>
c0028065:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028068:	81 ce 00 00 00 80    	or     esi,0x80000000
c002806e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028074:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028077:	39 d6                	cmp    esi,edx
c0028079:	77 0d                	ja     c0028088 <__divdf3+0x1d4>
c002807b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002807e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028081:	72 1b                	jb     c002809e <__divdf3+0x1ea>
c0028083:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028086:	75 16                	jne    c002809e <__divdf3+0x1ea>
c0028088:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002808b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002808e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028091:	83 de 00             	sbb    esi,0x0
c0028094:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028097:	ba 01 00 00 00       	mov    edx,0x1
c002809c:	eb 02                	jmp    c00280a0 <__divdf3+0x1ec>
c002809e:	31 d2                	xor    edx,edx
c00280a0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280a7:	31 ff                	xor    edi,edi
c00280a9:	01 ff                	add    edi,edi
c00280ab:	89 d1                	mov    ecx,edx
c00280ad:	c1 e9 1f             	shr    ecx,0x1f
c00280b0:	09 cf                	or     edi,ecx
c00280b2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280b5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280b8:	89 da                	mov    edx,ebx
c00280ba:	89 f3                	mov    ebx,esi
c00280bc:	8d 34 36             	lea    esi,[esi+esi*1]
c00280bf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280c2:	c1 e9 1f             	shr    ecx,0x1f
c00280c5:	09 ce                	or     esi,ecx
c00280c7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280ca:	01 c9                	add    ecx,ecx
c00280cc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280d2:	85 db                	test   ebx,ebx
c00280d4:	78 29                	js     c00280ff <__divdf3+0x24b>
c00280d6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280d9:	72 07                	jb     c00280e2 <__divdf3+0x22e>
c00280db:	75 3c                	jne    c0028119 <__divdf3+0x265>
c00280dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280e0:	77 37                	ja     c0028119 <__divdf3+0x265>
c00280e2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280e5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280e8:	31 d2                	xor    edx,edx
c00280ea:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280ed:	0f 97 c2             	seta   dl
c00280f0:	29 d6                	sub    esi,edx
c00280f2:	89 d9                	mov    ecx,ebx
c00280f4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280f7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280fa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280fd:	eb 17                	jmp    c0028116 <__divdf3+0x262>
c00280ff:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028102:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028105:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028108:	0f 97 c1             	seta   cl
c002810b:	0f b6 c9             	movzx  ecx,cl
c002810e:	29 ce                	sub    esi,ecx
c0028110:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028113:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028116:	83 ca 01             	or     edx,0x1
c0028119:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002811c:	75 8b                	jne    c00280a9 <__divdf3+0x1f5>
c002811e:	c1 e7 09             	shl    edi,0x9
c0028121:	89 d1                	mov    ecx,edx
c0028123:	c1 e9 17             	shr    ecx,0x17
c0028126:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028129:	09 f3                	or     ebx,esi
c002812b:	0f 95 c3             	setne  bl
c002812e:	0f b6 db             	movzx  ebx,bl
c0028131:	c1 e2 09             	shl    edx,0x9
c0028134:	09 d3                	or     ebx,edx
c0028136:	89 ca                	mov    edx,ecx
c0028138:	09 fa                	or     edx,edi
c002813a:	78 0c                	js     c0028148 <__divdf3+0x294>
c002813c:	01 d2                	add    edx,edx
c002813e:	89 d9                	mov    ecx,ebx
c0028140:	c1 e9 1f             	shr    ecx,0x1f
c0028143:	09 ca                	or     edx,ecx
c0028145:	01 db                	add    ebx,ebx
c0028147:	48                   	dec    eax
c0028148:	3d fe 07 00 00       	cmp    eax,0x7fe
c002814d:	0f 8f 83 00 00 00    	jg     c00281d6 <__divdf3+0x322>
c0028153:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028159:	85 c0                	test   eax,eax
c002815b:	0f 8f 82 00 00 00    	jg     c00281e3 <__divdf3+0x32f>
c0028161:	83 f8 cc             	cmp    eax,0xffffffcc
c0028164:	7c 77                	jl     c00281dd <__divdf3+0x329>
c0028166:	be 01 00 00 00       	mov    esi,0x1
c002816b:	29 c6                	sub    esi,eax
c002816d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028173:	83 fe 1f             	cmp    esi,0x1f
c0028176:	7e 2f                	jle    c00281a7 <__divdf3+0x2f3>
c0028178:	83 fe 20             	cmp    esi,0x20
c002817b:	75 0a                	jne    c0028187 <__divdf3+0x2d3>
c002817d:	85 db                	test   ebx,ebx
c002817f:	0f 95 c3             	setne  bl
c0028182:	0f b6 db             	movzx  ebx,bl
c0028185:	eb 1a                	jmp    c00281a1 <__divdf3+0x2ed>
c0028187:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002818a:	89 d7                	mov    edi,edx
c002818c:	d3 e7                	shl    edi,cl
c002818e:	89 f9                	mov    ecx,edi
c0028190:	09 d9                	or     ecx,ebx
c0028192:	0f 95 c3             	setne  bl
c0028195:	0f b6 db             	movzx  ebx,bl
c0028198:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002819d:	29 c1                	sub    ecx,eax
c002819f:	d3 ea                	shr    edx,cl
c00281a1:	09 d3                	or     ebx,edx
c00281a3:	31 c0                	xor    eax,eax
c00281a5:	eb 3a                	jmp    c00281e1 <__divdf3+0x32d>
c00281a7:	83 c0 1f             	add    eax,0x1f
c00281aa:	89 d7                	mov    edi,edx
c00281ac:	88 c1                	mov    cl,al
c00281ae:	d3 e7                	shl    edi,cl
c00281b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281b3:	89 df                	mov    edi,ebx
c00281b5:	89 f1                	mov    ecx,esi
c00281b7:	d3 ef                	shr    edi,cl
c00281b9:	89 f9                	mov    ecx,edi
c00281bb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281be:	09 cf                	or     edi,ecx
c00281c0:	88 c1                	mov    cl,al
c00281c2:	d3 e3                	shl    ebx,cl
c00281c4:	85 db                	test   ebx,ebx
c00281c6:	0f 95 c3             	setne  bl
c00281c9:	0f b6 db             	movzx  ebx,bl
c00281cc:	09 fb                	or     ebx,edi
c00281ce:	89 f1                	mov    ecx,esi
c00281d0:	d3 ea                	shr    edx,cl
c00281d2:	31 c0                	xor    eax,eax
c00281d4:	eb 0d                	jmp    c00281e3 <__divdf3+0x32f>
c00281d6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281db:	eb 02                	jmp    c00281df <__divdf3+0x32b>
c00281dd:	31 c0                	xor    eax,eax
c00281df:	31 db                	xor    ebx,ebx
c00281e1:	31 d2                	xor    edx,edx
c00281e3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281e6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281e9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281ef:	09 c8                	or     eax,ecx
c00281f1:	c1 e0 14             	shl    eax,0x14
c00281f4:	89 d1                	mov    ecx,edx
c00281f6:	c1 e9 0b             	shr    ecx,0xb
c00281f9:	09 c8                	or     eax,ecx
c00281fb:	89 c6                	mov    esi,eax
c00281fd:	89 d9                	mov    ecx,ebx
c00281ff:	c1 e9 0b             	shr    ecx,0xb
c0028202:	c1 e2 15             	shl    edx,0x15
c0028205:	09 ca                	or     edx,ecx
c0028207:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002820d:	0f 95 c0             	setne  al
c0028210:	09 c1                	or     ecx,eax
c0028212:	83 e1 01             	and    ecx,0x1
c0028215:	c1 eb 0a             	shr    ebx,0xa
c0028218:	21 cb                	and    ebx,ecx
c002821a:	01 d3                	add    ebx,edx
c002821c:	89 d8                	mov    eax,ebx
c002821e:	83 d6 00             	adc    esi,0x0
c0028221:	89 f2                	mov    edx,esi
c0028223:	89 c7                	mov    edi,eax
c0028225:	89 d1                	mov    ecx,edx
c0028227:	89 f8                	mov    eax,edi
c0028229:	89 ca                	mov    edx,ecx
c002822b:	83 c4 2c             	add    esp,0x2c
c002822e:	5b                   	pop    ebx
c002822f:	5e                   	pop    esi
c0028230:	5f                   	pop    edi
c0028231:	5d                   	pop    ebp
c0028232:	c3                   	ret    

c0028233 <__floatsidf>:
c0028233:	55                   	push   ebp
c0028234:	89 e5                	mov    ebp,esp
c0028236:	56                   	push   esi
c0028237:	53                   	push   ebx
c0028238:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002823b:	85 db                	test   ebx,ebx
c002823d:	7e 15                	jle    c0028254 <__floatsidf+0x21>
c002823f:	0f bd cb             	bsr    ecx,ebx
c0028242:	83 f1 1f             	xor    ecx,0x1f
c0028245:	d3 e3                	shl    ebx,cl
c0028247:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002824d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028252:	eb 21                	jmp    c0028275 <__floatsidf+0x42>
c0028254:	b8 00 00 00 00       	mov    eax,0x0
c0028259:	ba 00 00 00 00       	mov    edx,0x0
c002825e:	74 2a                	je     c002828a <__floatsidf+0x57>
c0028260:	f7 db                	neg    ebx
c0028262:	0f bd cb             	bsr    ecx,ebx
c0028265:	83 f1 1f             	xor    ecx,0x1f
c0028268:	d3 e3                	shl    ebx,cl
c002826a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028270:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028275:	29 c8                	sub    eax,ecx
c0028277:	c1 e0 14             	shl    eax,0x14
c002827a:	89 c1                	mov    ecx,eax
c002827c:	89 de                	mov    esi,ebx
c002827e:	c1 ee 0b             	shr    esi,0xb
c0028281:	09 f1                	or     ecx,esi
c0028283:	89 ca                	mov    edx,ecx
c0028285:	c1 e3 15             	shl    ebx,0x15
c0028288:	89 d8                	mov    eax,ebx
c002828a:	5b                   	pop    ebx
c002828b:	5e                   	pop    esi
c002828c:	5d                   	pop    ebp
c002828d:	c3                   	ret    

c002828e <__floatunsidf>:
c002828e:	55                   	push   ebp
c002828f:	89 e5                	mov    ebp,esp
c0028291:	56                   	push   esi
c0028292:	53                   	push   ebx
c0028293:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028296:	85 db                	test   ebx,ebx
c0028298:	74 2a                	je     c00282c4 <__floatunsidf+0x36>
c002829a:	0f bd cb             	bsr    ecx,ebx
c002829d:	83 f1 1f             	xor    ecx,0x1f
c00282a0:	d3 e3                	shl    ebx,cl
c00282a2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282a8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282ad:	29 c8                	sub    eax,ecx
c00282af:	c1 e0 14             	shl    eax,0x14
c00282b2:	89 c1                	mov    ecx,eax
c00282b4:	89 de                	mov    esi,ebx
c00282b6:	c1 ee 0b             	shr    esi,0xb
c00282b9:	09 f1                	or     ecx,esi
c00282bb:	89 ca                	mov    edx,ecx
c00282bd:	c1 e3 15             	shl    ebx,0x15
c00282c0:	89 d8                	mov    eax,ebx
c00282c2:	eb 04                	jmp    c00282c8 <__floatunsidf+0x3a>
c00282c4:	31 c0                	xor    eax,eax
c00282c6:	31 d2                	xor    edx,edx
c00282c8:	5b                   	pop    ebx
c00282c9:	5e                   	pop    esi
c00282ca:	5d                   	pop    ebp
c00282cb:	c3                   	ret    

c00282cc <__fixdfsi>:
c00282cc:	55                   	push   ebp
c00282cd:	89 e5                	mov    ebp,esp
c00282cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282d2:	89 d1                	mov    ecx,edx
c00282d4:	c1 e1 0b             	shl    ecx,0xb
c00282d7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282e0:	c1 e8 15             	shr    eax,0x15
c00282e3:	09 c1                	or     ecx,eax
c00282e5:	c1 fa 14             	sar    edx,0x14
c00282e8:	78 1f                	js     c0028309 <__fixdfsi+0x3d>
c00282ea:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282f0:	31 c0                	xor    eax,eax
c00282f2:	83 fa 1e             	cmp    edx,0x1e
c00282f5:	77 40                	ja     c0028337 <__fixdfsi+0x6b>
c00282f7:	89 c8                	mov    eax,ecx
c00282f9:	0d 00 00 00 80       	or     eax,0x80000000
c00282fe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028303:	29 d1                	sub    ecx,edx
c0028305:	d3 e8                	shr    eax,cl
c0028307:	eb 2e                	jmp    c0028337 <__fixdfsi+0x6b>
c0028309:	31 c0                	xor    eax,eax
c002830b:	81 c2 01 04 00 00    	add    edx,0x401
c0028311:	78 24                	js     c0028337 <__fixdfsi+0x6b>
c0028313:	83 fa 1e             	cmp    edx,0x1e
c0028316:	7e 09                	jle    c0028321 <__fixdfsi+0x55>
c0028318:	83 fa 1f             	cmp    edx,0x1f
c002831b:	75 18                	jne    c0028335 <__fixdfsi+0x69>
c002831d:	85 c9                	test   ecx,ecx
c002831f:	75 14                	jne    c0028335 <__fixdfsi+0x69>
c0028321:	89 c8                	mov    eax,ecx
c0028323:	0d 00 00 00 80       	or     eax,0x80000000
c0028328:	b9 1f 00 00 00       	mov    ecx,0x1f
c002832d:	29 d1                	sub    ecx,edx
c002832f:	d3 e8                	shr    eax,cl
c0028331:	f7 d8                	neg    eax
c0028333:	eb 02                	jmp    c0028337 <__fixdfsi+0x6b>
c0028335:	31 c0                	xor    eax,eax
c0028337:	5d                   	pop    ebp
c0028338:	c3                   	ret    

c0028339 <__fixunsdfsi>:
c0028339:	55                   	push   ebp
c002833a:	89 e5                	mov    ebp,esp
c002833c:	53                   	push   ebx
c002833d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028340:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028343:	89 d3                	mov    ebx,edx
c0028345:	c1 fb 14             	sar    ebx,0x14
c0028348:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002834e:	31 c0                	xor    eax,eax
c0028350:	83 fb 1f             	cmp    ebx,0x1f
c0028353:	77 1d                	ja     c0028372 <__fixunsdfsi+0x39>
c0028355:	89 d0                	mov    eax,edx
c0028357:	c1 e0 0b             	shl    eax,0xb
c002835a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002835f:	c1 e9 15             	shr    ecx,0x15
c0028362:	09 c8                	or     eax,ecx
c0028364:	0d 00 00 00 80       	or     eax,0x80000000
c0028369:	b9 1f 00 00 00       	mov    ecx,0x1f
c002836e:	29 d9                	sub    ecx,ebx
c0028370:	d3 e8                	shr    eax,cl
c0028372:	5b                   	pop    ebx
c0028373:	5d                   	pop    ebp
c0028374:	c3                   	ret    

c0028375 <__cmpdf2>:
c0028375:	55                   	push   ebp
c0028376:	89 e5                	mov    ebp,esp
c0028378:	57                   	push   edi
c0028379:	56                   	push   esi
c002837a:	53                   	push   ebx
c002837b:	83 ec 0c             	sub    esp,0xc
c002837e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028381:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028384:	89 ca                	mov    edx,ecx
c0028386:	c1 ea 14             	shr    edx,0x14
c0028389:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002838f:	89 cb                	mov    ebx,ecx
c0028391:	c1 fb 1f             	sar    ebx,0x1f
c0028394:	31 da                	xor    edx,ebx
c0028396:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028399:	89 df                	mov    edi,ebx
c002839b:	c1 e7 0b             	shl    edi,0xb
c002839e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283a1:	c1 e1 0b             	shl    ecx,0xb
c00283a4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283aa:	c1 eb 15             	shr    ebx,0x15
c00283ad:	09 d9                	or     ecx,ebx
c00283af:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283b5:	89 ce                	mov    esi,ecx
c00283b7:	c1 ee 14             	shr    esi,0x14
c00283ba:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283c0:	89 cb                	mov    ebx,ecx
c00283c2:	c1 fb 1f             	sar    ebx,0x1f
c00283c5:	31 de                	xor    esi,ebx
c00283c7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283ca:	89 df                	mov    edi,ebx
c00283cc:	c1 e7 0b             	shl    edi,0xb
c00283cf:	c1 e1 0b             	shl    ecx,0xb
c00283d2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283d8:	c1 eb 15             	shr    ebx,0x15
c00283db:	09 d9                	or     ecx,ebx
c00283dd:	89 d3                	mov    ebx,edx
c00283df:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283e5:	43                   	inc    ebx
c00283e6:	83 fb 01             	cmp    ebx,0x1
c00283e9:	77 08                	ja     c00283f3 <__cmpdf2+0x7e>
c00283eb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283ee:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283f1:	75 68                	jne    c002845b <__cmpdf2+0xe6>
c00283f3:	89 f3                	mov    ebx,esi
c00283f5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283fb:	43                   	inc    ebx
c00283fc:	83 fb 01             	cmp    ebx,0x1
c00283ff:	77 06                	ja     c0028407 <__cmpdf2+0x92>
c0028401:	89 fb                	mov    ebx,edi
c0028403:	09 cb                	or     ebx,ecx
c0028405:	75 54                	jne    c002845b <__cmpdf2+0xe6>
c0028407:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002840a:	09 f8                	or     eax,edi
c002840c:	09 c8                	or     eax,ecx
c002840e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028411:	75 12                	jne    c0028425 <__cmpdf2+0xb0>
c0028413:	8d 42 01             	lea    eax,[edx+0x1]
c0028416:	83 f8 01             	cmp    eax,0x1
c0028419:	77 0a                	ja     c0028425 <__cmpdf2+0xb0>
c002841b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002841e:	31 c0                	xor    eax,eax
c0028420:	83 fb 01             	cmp    ebx,0x1
c0028423:	76 36                	jbe    c002845b <__cmpdf2+0xe6>
c0028425:	b8 01 00 00 00       	mov    eax,0x1
c002842a:	39 f2                	cmp    edx,esi
c002842c:	7f 2d                	jg     c002845b <__cmpdf2+0xe6>
c002842e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028433:	7c 26                	jl     c002845b <__cmpdf2+0xe6>
c0028435:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028438:	77 07                	ja     c0028441 <__cmpdf2+0xcc>
c002843a:	72 16                	jb     c0028452 <__cmpdf2+0xdd>
c002843c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002843f:	76 0a                	jbe    c002844b <__cmpdf2+0xd6>
c0028441:	89 d0                	mov    eax,edx
c0028443:	c1 f8 1f             	sar    eax,0x1f
c0028446:	83 c8 01             	or     eax,0x1
c0028449:	eb 10                	jmp    c002845b <__cmpdf2+0xe6>
c002844b:	b8 00 00 00 00       	mov    eax,0x0
c0028450:	73 09                	jae    c002845b <__cmpdf2+0xe6>
c0028452:	89 d0                	mov    eax,edx
c0028454:	c1 f8 1f             	sar    eax,0x1f
c0028457:	83 e0 02             	and    eax,0x2
c002845a:	48                   	dec    eax
c002845b:	83 c4 0c             	add    esp,0xc
c002845e:	5b                   	pop    ebx
c002845f:	5e                   	pop    esi
c0028460:	5f                   	pop    edi
c0028461:	5d                   	pop    ebp
c0028462:	c3                   	ret    

c0028463 <__eqdf2>:
c0028463:	55                   	push   ebp
c0028464:	89 e5                	mov    ebp,esp
c0028466:	50                   	push   eax
c0028467:	6a 01                	push   0x1
c0028469:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002846c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002846f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028472:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028475:	e8 fb fe ff ff       	call   c0028375 <__cmpdf2>
c002847a:	83 c4 18             	add    esp,0x18
c002847d:	c9                   	leave  
c002847e:	c3                   	ret    

c002847f <__nedf2>:
c002847f:	eb e2                	jmp    c0028463 <__eqdf2>

c0028481 <__gtdf2>:
c0028481:	55                   	push   ebp
c0028482:	89 e5                	mov    ebp,esp
c0028484:	50                   	push   eax
c0028485:	6a ff                	push   0xffffffff
c0028487:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002848a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002848d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028490:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028493:	e8 dd fe ff ff       	call   c0028375 <__cmpdf2>
c0028498:	83 c4 18             	add    esp,0x18
c002849b:	c9                   	leave  
c002849c:	c3                   	ret    

c002849d <__gedf2>:
c002849d:	eb e2                	jmp    c0028481 <__gtdf2>

c002849f <__ltdf2>:
c002849f:	eb c2                	jmp    c0028463 <__eqdf2>

c00284a1 <__ledf2>:
c00284a1:	eb c0                	jmp    c0028463 <__eqdf2>

c00284a3 <__truncdfsf2>:
c00284a3:	55                   	push   ebp
c00284a4:	89 e5                	mov    ebp,esp
c00284a6:	57                   	push   edi
c00284a7:	56                   	push   esi
c00284a8:	53                   	push   ebx
c00284a9:	83 ec 0c             	sub    esp,0xc
c00284ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284af:	89 d1                	mov    ecx,edx
c00284b1:	c1 f9 14             	sar    ecx,0x14
c00284b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284b7:	89 df                	mov    edi,ebx
c00284b9:	c1 e7 0b             	shl    edi,0xb
c00284bc:	89 d0                	mov    eax,edx
c00284be:	c1 e0 0b             	shl    eax,0xb
c00284c1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284c6:	c1 eb 15             	shr    ebx,0x15
c00284c9:	09 d8                	or     eax,ebx
c00284cb:	89 cb                	mov    ebx,ecx
c00284cd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284d3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284d9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284df:	0f 86 9e 00 00 00    	jbe    c0028583 <__truncdfsf2+0xe0>
c00284e5:	85 db                	test   ebx,ebx
c00284e7:	75 0a                	jne    c00284f3 <__truncdfsf2+0x50>
c00284e9:	c1 fa 17             	sar    edx,0x17
c00284ec:	30 d2                	xor    dl,dl
c00284ee:	e9 84 00 00 00       	jmp    c0028577 <__truncdfsf2+0xd4>
c00284f3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284f9:	83 fe 83             	cmp    esi,0xffffff83
c00284fc:	7d 4b                	jge    c0028549 <__truncdfsf2+0xa6>
c00284fe:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028503:	29 f1                	sub    ecx,esi
c0028505:	83 f9 1f             	cmp    ecx,0x1f
c0028508:	7f 6b                	jg     c0028575 <__truncdfsf2+0xd2>
c002850a:	0d 00 00 00 80       	or     eax,0x80000000
c002850f:	89 c3                	mov    ebx,eax
c0028511:	d3 eb                	shr    ebx,cl
c0028513:	be 01 00 00 00       	mov    esi,0x1
c0028518:	d3 e6                	shl    esi,cl
c002851a:	4e                   	dec    esi
c002851b:	21 f0                	and    eax,esi
c002851d:	09 f8                	or     eax,edi
c002851f:	0f 95 c0             	setne  al
c0028522:	0f b6 c0             	movzx  eax,al
c0028525:	09 c3                	or     ebx,eax
c0028527:	89 d9                	mov    ecx,ebx
c0028529:	c1 e9 08             	shr    ecx,0x8
c002852c:	f6 c3 7f             	test   bl,0x7f
c002852f:	0f 95 c0             	setne  al
c0028532:	09 c8                	or     eax,ecx
c0028534:	83 e0 01             	and    eax,0x1
c0028537:	c1 eb 07             	shr    ebx,0x7
c002853a:	21 c3                	and    ebx,eax
c002853c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028542:	09 d1                	or     ecx,edx
c0028544:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028547:	eb 76                	jmp    c00285bf <__truncdfsf2+0x11c>
c0028549:	83 c6 80             	add    esi,0xffffff80
c002854c:	7e 1d                	jle    c002856b <__truncdfsf2+0xc8>
c002854e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028554:	75 0b                	jne    c0028561 <__truncdfsf2+0xbe>
c0028556:	09 f8                	or     eax,edi
c0028558:	74 09                	je     c0028563 <__truncdfsf2+0xc0>
c002855a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002855f:	eb 02                	jmp    c0028563 <__truncdfsf2+0xc0>
c0028561:	31 c0                	xor    eax,eax
c0028563:	c1 fa 17             	sar    edx,0x17
c0028566:	80 ca ff             	or     dl,0xff
c0028569:	eb 0e                	jmp    c0028579 <__truncdfsf2+0xd6>
c002856b:	c1 fa 1f             	sar    edx,0x1f
c002856e:	c1 e2 08             	shl    edx,0x8
c0028571:	09 ca                	or     edx,ecx
c0028573:	eb 04                	jmp    c0028579 <__truncdfsf2+0xd6>
c0028575:	31 d2                	xor    edx,edx
c0028577:	31 c0                	xor    eax,eax
c0028579:	c1 e2 17             	shl    edx,0x17
c002857c:	c1 e8 08             	shr    eax,0x8
c002857f:	09 d0                	or     eax,edx
c0028581:	eb 3c                	jmp    c00285bf <__truncdfsf2+0x11c>
c0028583:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028589:	89 ca                	mov    edx,ecx
c002858b:	c1 fa 0b             	sar    edx,0xb
c002858e:	c1 e2 08             	shl    edx,0x8
c0028591:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028594:	31 db                	xor    ebx,ebx
c0028596:	85 ff                	test   edi,edi
c0028598:	0f 95 c3             	setne  bl
c002859b:	09 d8                	or     eax,ebx
c002859d:	89 c3                	mov    ebx,eax
c002859f:	c1 eb 08             	shr    ebx,0x8
c00285a2:	a8 7f                	test   al,0x7f
c00285a4:	0f 95 c2             	setne  dl
c00285a7:	89 d6                	mov    esi,edx
c00285a9:	09 de                	or     esi,ebx
c00285ab:	83 e6 01             	and    esi,0x1
c00285ae:	c1 e8 07             	shr    eax,0x7
c00285b1:	21 f0                	and    eax,esi
c00285b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285b6:	09 ca                	or     edx,ecx
c00285b8:	c1 e2 17             	shl    edx,0x17
c00285bb:	09 da                	or     edx,ebx
c00285bd:	01 d0                	add    eax,edx
c00285bf:	83 c4 0c             	add    esp,0xc
c00285c2:	5b                   	pop    ebx
c00285c3:	5e                   	pop    esi
c00285c4:	5f                   	pop    edi
c00285c5:	5d                   	pop    ebp
c00285c6:	c3                   	ret    

c00285c7 <__extendsfdf2>:
c00285c7:	55                   	push   ebp
c00285c8:	89 e5                	mov    ebp,esp
c00285ca:	57                   	push   edi
c00285cb:	56                   	push   esi
c00285cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285cf:	89 d1                	mov    ecx,edx
c00285d1:	c1 f9 17             	sar    ecx,0x17
c00285d4:	c1 e2 08             	shl    edx,0x8
c00285d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285dd:	89 c8                	mov    eax,ecx
c00285df:	80 e4 f8             	and    ah,0xf8
c00285e2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285e5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285eb:	75 27                	jne    c0028614 <__extendsfdf2+0x4d>
c00285ed:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285f3:	75 18                	jne    c002860d <__extendsfdf2+0x46>
c00285f5:	85 d2                	test   edx,edx
c00285f7:	74 20                	je     c0028619 <__extendsfdf2+0x52>
c00285f9:	41                   	inc    ecx
c00285fa:	01 d2                	add    edx,edx
c00285fc:	79 fb                	jns    c00285f9 <__extendsfdf2+0x32>
c00285fe:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028604:	29 c8                	sub    eax,ecx
c0028606:	05 81 03 00 00       	add    eax,0x381
c002860b:	eb 0c                	jmp    c0028619 <__extendsfdf2+0x52>
c002860d:	05 00 07 00 00       	add    eax,0x700
c0028612:	eb 05                	jmp    c0028619 <__extendsfdf2+0x52>
c0028614:	05 80 03 00 00       	add    eax,0x380
c0028619:	c1 e0 14             	shl    eax,0x14
c002861c:	89 c1                	mov    ecx,eax
c002861e:	89 d0                	mov    eax,edx
c0028620:	c1 e8 0b             	shr    eax,0xb
c0028623:	09 c1                	or     ecx,eax
c0028625:	c1 e2 15             	shl    edx,0x15
c0028628:	89 d0                	mov    eax,edx
c002862a:	89 ca                	mov    edx,ecx
c002862c:	5e                   	pop    esi
c002862d:	5f                   	pop    edi
c002862e:	5d                   	pop    ebp
c002862f:	c3                   	ret    

c0028630 <fabs>:
c0028630:	83 ec 0c             	sub    esp,0xc
c0028633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028637:	89 04 24             	mov    DWORD PTR [esp],eax
c002863a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002863e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028643:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028647:	dd 04 24             	fld    QWORD PTR [esp]
c002864a:	83 c4 0c             	add    esp,0xc
c002864d:	c3                   	ret    
c002864e:	66 90                	xchg   ax,ax

c0028650 <lrint>:
c0028650:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028654:	83 ec 04             	sub    esp,0x4
c0028657:	db 1c 24             	fistp  DWORD PTR [esp]
c002865a:	58                   	pop    eax
c002865b:	c3                   	ret    

c002865c <lrintf>:
c002865c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028660:	83 ec 04             	sub    esp,0x4
c0028663:	db 1c 24             	fistp  DWORD PTR [esp]
c0028666:	58                   	pop    eax
c0028667:	c3                   	ret    

Disassembly of section .init:

c0028668 <_init>:
c0028668:	55                   	push   ebp
c0028669:	89 e5                	mov    ebp,esp
c002866b:	e8 a8 7a fd ff       	call   c0000118 <frame_dummy>
c0028670:	e8 63 e0 ff ff       	call   c00266d8 <__do_global_ctors_aux>
c0028675:	5d                   	pop    ebp
c0028676:	c3                   	ret    

Disassembly of section .fini:

c0028677 <_fini>:
c0028677:	55                   	push   ebp
c0028678:	89 e5                	mov    ebp,esp
c002867a:	e8 29 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002867f:	5d                   	pop    ebp
c0028680:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028682 <Computer::~Computer()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	89 10                	mov    DWORD PTR [eax],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	83 ec 0c             	sub    esp,0xc
c0028697:	50                   	push   eax
c0028698:	e8 87 bb fe ff       	call   c0014224 <Device::~Device()>
c002869d:	83 c4 10             	add    esp,0x10
c00286a0:	90                   	nop
c00286a1:	83 c4 0c             	add    esp,0xc
c00286a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286a6 <Computer::~Computer()>:
c00286a6:	83 ec 0c             	sub    esp,0xc
c00286a9:	83 ec 0c             	sub    esp,0xc
c00286ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b0:	e8 cd ff ff ff       	call   c0028682 <Computer::~Computer()>
c00286b5:	83 c4 10             	add    esp,0x10
c00286b8:	83 ec 08             	sub    esp,0x8
c00286bb:	68 ec 01 00 00       	push   0x1ec
c00286c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c4:	e8 83 a7 fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00286c9:	83 c4 10             	add    esp,0x10
c00286cc:	83 c4 0c             	add    esp,0xc
c00286cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286d0 <idleCommon()>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	e8 1a 57 ff ff       	call   c001ddf2 <lockScheduler()>
c00286d8:	e8 51 5a ff ff       	call   c001e12e <schedule()>
c00286dd:	83 c4 0c             	add    esp,0xc
c00286e0:	e9 0f 57 ff ff       	jmp    c001ddf4 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286e6 <LinkedList<UnixFile>::~LinkedList()>:
c00286e6:	90                   	nop
c00286e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286e8 <LinkedList<UnixFile>::LinkedList()>:
c00286e8:	83 ec 0c             	sub    esp,0xc
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002872b:	83 ec 0c             	sub    esp,0xc
c002872e:	68 9a a4 02 c0       	push   0xc002a49a
c0028733:	e8 f4 a7 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0028738:	83 c4 10             	add    esp,0x10
c002873b:	90                   	nop
c002873c:	83 c4 0c             	add    esp,0xc
c002873f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028740 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028740:	83 ec 0c             	sub    esp,0xc
c0028743:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028748:	75 10                	jne    c002875a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002874a:	83 ec 0c             	sub    esp,0xc
c002874d:	68 b4 a4 02 c0       	push   0xc002a4b4
c0028752:	e8 76 1e ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028757:	83 c4 10             	add    esp,0x10
c002875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028760:	85 c0                	test   eax,eax
c0028762:	74 34                	je     c0028798 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876b:	85 c0                	test   eax,eax
c002876d:	74 29                	je     c0028798 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002876f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028773:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028776:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002877a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028785:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028796:	eb 65                	jmp    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879c:	8b 00                	mov    eax,DWORD PTR [eax]
c002879e:	85 c0                	test   eax,eax
c00287a0:	75 4b                	jne    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a9:	85 c0                	test   eax,eax
c00287ab:	75 40                	jne    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b5:	89 10                	mov    DWORD PTR [eax],edx
c00287b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d7:	85 c0                	test   eax,eax
c00287d9:	74 22                	je     c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287db:	83 ec 0c             	sub    esp,0xc
c00287de:	68 d6 a4 02 c0       	push   0xc002a4d6
c00287e3:	e8 e5 1d ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c00287e8:	83 c4 10             	add    esp,0x10
c00287eb:	eb 10                	jmp    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287ed:	83 ec 0c             	sub    esp,0xc
c00287f0:	68 e0 a4 02 c0       	push   0xc002a4e0
c00287f5:	e8 d3 1d ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c00287fa:	83 c4 10             	add    esp,0x10
c00287fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028801:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028804:	8d 50 01             	lea    edx,[eax+0x1]
c0028807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002880e:	90                   	nop
c002880f:	83 c4 0c             	add    esp,0xc
c0028812:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028814 <LinkedList<UnixFile>::getFirstElement()>:
c0028814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028818:	8b 00                	mov    eax,DWORD PTR [eax]
c002881a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002881c <LinkedList<UnixFile>::removeFirst()>:
c002881c:	83 ec 0c             	sub    esp,0xc
c002881f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028823:	8b 00                	mov    eax,DWORD PTR [eax]
c0028825:	85 c0                	test   eax,eax
c0028827:	75 12                	jne    c002883b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028829:	83 ec 0c             	sub    esp,0xc
c002882c:	68 ec a4 02 c0       	push   0xc002a4ec
c0028831:	e8 97 1d ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028836:	83 c4 10             	add    esp,0x10
c0028839:	eb 7e                	jmp    c00288b9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002883b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028842:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028845:	85 c0                	test   eax,eax
c0028847:	74 10                	je     c0028859 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028849:	83 ec 0c             	sub    esp,0xc
c002884c:	68 37 a5 02 c0       	push   0xc002a537
c0028851:	e8 77 1d ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028856:	83 c4 10             	add    esp,0x10
c0028859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885d:	8b 00                	mov    eax,DWORD PTR [eax]
c002885f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028862:	85 c0                	test   eax,eax
c0028864:	75 33                	jne    c0028899 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028882:	83 f8 01             	cmp    eax,0x1
c0028885:	74 21                	je     c00288a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028887:	83 ec 0c             	sub    esp,0xc
c002888a:	68 10 a5 02 c0       	push   0xc002a510
c002888f:	e8 39 1d ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028894:	83 c4 10             	add    esp,0x10
c0028897:	eb 0f                	jmp    c00288a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	8b 00                	mov    eax,DWORD PTR [eax]
c002889f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	89 10                	mov    DWORD PTR [eax],edx
c00288a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288af:	8d 50 ff             	lea    edx,[eax-0x1]
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288b9:	83 c4 0c             	add    esp,0xc
c00288bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288be <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288c6 <DriverlessDevice::~DriverlessDevice()>:
c00288c6:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c00288cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288cf:	89 10                	mov    DWORD PTR [eax],edx
c00288d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d5:	50                   	push   eax
c00288d6:	e8 49 b9 fe ff       	call   c0014224 <Device::~Device()>
c00288db:	83 c4 04             	add    esp,0x4
c00288de:	90                   	nop
c00288df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288e0 <DriverlessDevice::~DriverlessDevice()>:
c00288e0:	83 ec 0c             	sub    esp,0xc
c00288e3:	83 ec 0c             	sub    esp,0xc
c00288e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ea:	e8 d7 ff ff ff       	call   c00288c6 <DriverlessDevice::~DriverlessDevice()>
c00288ef:	83 c4 10             	add    esp,0x10
c00288f2:	83 ec 08             	sub    esp,0x8
c00288f5:	68 58 01 00 00       	push   0x158
c00288fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288fe:	e8 49 a5 fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028903:	83 c4 10             	add    esp,0x10
c0028906:	83 c4 0c             	add    esp,0xc
c0028909:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002890a <LinkedList<Device>::addElement(Device*)>:
c002890a:	83 ec 0c             	sub    esp,0xc
c002890d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028912:	75 10                	jne    c0028924 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028914:	83 ec 0c             	sub    esp,0xc
c0028917:	68 b4 a4 02 c0       	push   0xc002a4b4
c002891c:	e8 ac 1c ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028921:	83 c4 10             	add    esp,0x10
c0028924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028928:	8b 00                	mov    eax,DWORD PTR [eax]
c002892a:	85 c0                	test   eax,eax
c002892c:	74 3a                	je     c0028968 <LinkedList<Device>::addElement(Device*)+0x5e>
c002892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028932:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028935:	85 c0                	test   eax,eax
c0028937:	74 2f                	je     c0028968 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028940:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028944:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002894a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028952:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028959:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002895c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028966:	eb 68                	jmp    c00289d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896c:	8b 00                	mov    eax,DWORD PTR [eax]
c002896e:	85 c0                	test   eax,eax
c0028970:	75 4e                	jne    c00289c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028979:	85 c0                	test   eax,eax
c002897b:	75 43                	jne    c00289c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002897d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028985:	89 10                	mov    DWORD PTR [eax],edx
c0028987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002898f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028999:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289aa:	85 c0                	test   eax,eax
c00289ac:	74 22                	je     c00289d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289ae:	83 ec 0c             	sub    esp,0xc
c00289b1:	68 d6 a4 02 c0       	push   0xc002a4d6
c00289b6:	e8 12 1c ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c00289bb:	83 c4 10             	add    esp,0x10
c00289be:	eb 10                	jmp    c00289d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289c0:	83 ec 0c             	sub    esp,0xc
c00289c3:	68 e0 a4 02 c0       	push   0xc002a4e0
c00289c8:	e8 00 1c ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c00289cd:	83 c4 10             	add    esp,0x10
c00289d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289d7:	8d 50 01             	lea    edx,[eax+0x1]
c00289da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289e1:	90                   	nop
c00289e2:	83 c4 0c             	add    esp,0xc
c00289e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289e6 <LinkedList<Device>::LinkedList()>:
c00289e6:	83 ec 0c             	sub    esp,0xc
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a29:	83 ec 0c             	sub    esp,0xc
c0028a2c:	68 9a a4 02 c0       	push   0xc002a49a
c0028a31:	e8 f6 a4 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0028a36:	83 c4 10             	add    esp,0x10
c0028a39:	90                   	nop
c0028a3a:	83 c4 0c             	add    esp,0xc
c0028a3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4c:	85 c0                	test   eax,eax
c0028a4e:	75 0e                	jne    c0028a5e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a57:	85 c0                	test   eax,eax
c0028a59:	75 03                	jne    c0028a5e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a5b:	b0 01                	mov    al,0x1
c0028a5d:	c3                   	ret    
c0028a5e:	b0 00                	mov    al,0x0
c0028a60:	90                   	nop
c0028a61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a62:	83 ec 0c             	sub    esp,0xc
c0028a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a6b:	85 c0                	test   eax,eax
c0028a6d:	75 15                	jne    c0028a84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a6f:	83 ec 0c             	sub    esp,0xc
c0028a72:	68 ec a4 02 c0       	push   0xc002a4ec
c0028a77:	e8 51 1b ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028a7c:	83 c4 10             	add    esp,0x10
c0028a7f:	e9 88 00 00 00       	jmp    c0028b0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a8e:	85 c0                	test   eax,eax
c0028a90:	0f 95 c0             	setne  al
c0028a93:	84 c0                	test   al,al
c0028a95:	74 10                	je     c0028aa7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a97:	83 ec 0c             	sub    esp,0xc
c0028a9a:	68 37 a5 02 c0       	push   0xc002a537
c0028a9f:	e8 29 1b ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028aa4:	83 c4 10             	add    esp,0x10
c0028aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ab0:	85 c0                	test   eax,eax
c0028ab2:	0f 94 c0             	sete   al
c0028ab5:	84 c0                	test   al,al
c0028ab7:	74 33                	je     c0028aec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ad5:	83 f8 01             	cmp    eax,0x1
c0028ad8:	74 21                	je     c0028afb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028ada:	83 ec 0c             	sub    esp,0xc
c0028add:	68 10 a5 02 c0       	push   0xc002a510
c0028ae2:	e8 e6 1a ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028ae7:	83 c4 10             	add    esp,0x10
c0028aea:	eb 0f                	jmp    c0028afb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028af2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af9:	89 10                	mov    DWORD PTR [eax],edx
c0028afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b02:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b09:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b0c:	83 c4 0c             	add    esp,0xc
c0028b0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b10:	83 ec 0c             	sub    esp,0xc
c0028b13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b18:	75 10                	jne    c0028b2a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b1a:	83 ec 0c             	sub    esp,0xc
c0028b1d:	68 b4 a4 02 c0       	push   0xc002a4b4
c0028b22:	e8 a6 1a ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028b27:	83 c4 10             	add    esp,0x10
c0028b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b30:	85 c0                	test   eax,eax
c0028b32:	74 34                	je     c0028b68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3b:	85 c0                	test   eax,eax
c0028b3d:	74 29                	je     c0028b68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b66:	eb 65                	jmp    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b6e:	85 c0                	test   eax,eax
c0028b70:	75 4b                	jne    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b79:	85 c0                	test   eax,eax
c0028b7b:	75 40                	jne    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b85:	89 10                	mov    DWORD PTR [eax],edx
c0028b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba7:	85 c0                	test   eax,eax
c0028ba9:	74 22                	je     c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bab:	83 ec 0c             	sub    esp,0xc
c0028bae:	68 d6 a4 02 c0       	push   0xc002a4d6
c0028bb3:	e8 15 1a ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028bb8:	83 c4 10             	add    esp,0x10
c0028bbb:	eb 10                	jmp    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bbd:	83 ec 0c             	sub    esp,0xc
c0028bc0:	68 e0 a4 02 c0       	push   0xc002a4e0
c0028bc5:	e8 03 1a ff ff       	call   c001a5cd <Krnl::panic(char const*)>
c0028bca:	83 c4 10             	add    esp,0x10
c0028bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bde:	90                   	nop
c0028bdf:	83 c4 0c             	add    esp,0xc
c0028be2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028be4 <ACPI::~ACPI()>:
c0028be4:	83 ec 0c             	sub    esp,0xc
c0028be7:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c0028bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf0:	89 10                	mov    DWORD PTR [eax],edx
c0028bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf6:	83 ec 0c             	sub    esp,0xc
c0028bf9:	50                   	push   eax
c0028bfa:	e8 25 b6 fe ff       	call   c0014224 <Device::~Device()>
c0028bff:	83 c4 10             	add    esp,0x10
c0028c02:	90                   	nop
c0028c03:	83 c4 0c             	add    esp,0xc
c0028c06:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c08 <ACPI::~ACPI()>:
c0028c08:	83 ec 0c             	sub    esp,0xc
c0028c0b:	83 ec 0c             	sub    esp,0xc
c0028c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c12:	e8 cd ff ff ff       	call   c0028be4 <ACPI::~ACPI()>
c0028c17:	83 c4 10             	add    esp,0x10
c0028c1a:	83 ec 08             	sub    esp,0x8
c0028c1d:	68 68 12 00 00       	push   0x1268
c0028c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c26:	e8 21 a2 fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028c2b:	83 c4 10             	add    esp,0x10
c0028c2e:	83 c4 0c             	add    esp,0xc
c0028c31:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c32 <CPU::~CPU()>:
c0028c32:	83 ec 0c             	sub    esp,0xc
c0028c35:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	89 10                	mov    DWORD PTR [eax],edx
c0028c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c44:	83 ec 0c             	sub    esp,0xc
c0028c47:	50                   	push   eax
c0028c48:	e8 d7 b5 fe ff       	call   c0014224 <Device::~Device()>
c0028c4d:	83 c4 10             	add    esp,0x10
c0028c50:	90                   	nop
c0028c51:	83 c4 0c             	add    esp,0xc
c0028c54:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c56 <CPU::~CPU()>:
c0028c56:	83 ec 0c             	sub    esp,0xc
c0028c59:	83 ec 0c             	sub    esp,0xc
c0028c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c60:	e8 cd ff ff ff       	call   c0028c32 <CPU::~CPU()>
c0028c65:	83 c4 10             	add    esp,0x10
c0028c68:	83 ec 08             	sub    esp,0x8
c0028c6b:	68 98 11 00 00       	push   0x1198
c0028c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c74:	e8 d3 a1 fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028c79:	83 c4 10             	add    esp,0x10
c0028c7c:	83 c4 0c             	add    esp,0xc
c0028c7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c80 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c80:	90                   	nop
c0028c81:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c82 <ThreadControlBlock::ThreadControlBlock()>:
c0028c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c86:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c91:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028ca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cba:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cbe:	90                   	nop
c0028cbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cc0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cc0:	83 ec 0c             	sub    esp,0xc
c0028cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d03:	83 ec 0c             	sub    esp,0xc
c0028d06:	68 9a a4 02 c0       	push   0xc002a49a
c0028d0b:	e8 1c a2 fe ff       	call   c0012f2c <Dbg::kprintf(char const*, ...)>
c0028d10:	83 c4 10             	add    esp,0x10
c0028d13:	90                   	nop
c0028d14:	83 c4 0c             	add    esp,0xc
c0028d17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d18 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d20 <Vm::_FPUState::_FPUState()>:
c0028d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d24:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d2b:	90                   	nop
c0028d2c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d2e <PCI::~PCI()>:
c0028d2e:	83 ec 0c             	sub    esp,0xc
c0028d31:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c0028d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3a:	89 10                	mov    DWORD PTR [eax],edx
c0028d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d40:	83 ec 0c             	sub    esp,0xc
c0028d43:	50                   	push   eax
c0028d44:	e8 b3 ae fe ff       	call   c0013bfc <Bus::~Bus()>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	90                   	nop
c0028d4d:	83 c4 0c             	add    esp,0xc
c0028d50:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d52 <PCI::~PCI()>:
c0028d52:	83 ec 0c             	sub    esp,0xc
c0028d55:	83 ec 0c             	sub    esp,0xc
c0028d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5c:	e8 cd ff ff ff       	call   c0028d2e <PCI::~PCI()>
c0028d61:	83 c4 10             	add    esp,0x10
c0028d64:	83 ec 08             	sub    esp,0x8
c0028d67:	68 58 01 00 00       	push   0x158
c0028d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d70:	e8 d7 a0 fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028d75:	83 c4 10             	add    esp,0x10
c0028d78:	83 c4 0c             	add    esp,0xc
c0028d7b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d7c <IDE::~IDE()>:
c0028d7c:	83 ec 0c             	sub    esp,0xc
c0028d7f:	ba 94 ce 02 c0       	mov    edx,0xc002ce94
c0028d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d88:	89 10                	mov    DWORD PTR [eax],edx
c0028d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8e:	83 ec 0c             	sub    esp,0xc
c0028d91:	50                   	push   eax
c0028d92:	e8 7d b9 fe ff       	call   c0014714 <HardDiskController::~HardDiskController()>
c0028d97:	83 c4 10             	add    esp,0x10
c0028d9a:	90                   	nop
c0028d9b:	83 c4 0c             	add    esp,0xc
c0028d9e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028da0 <IDE::~IDE()>:
c0028da0:	83 ec 0c             	sub    esp,0xc
c0028da3:	83 ec 0c             	sub    esp,0xc
c0028da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028daa:	e8 cd ff ff ff       	call   c0028d7c <IDE::~IDE()>
c0028daf:	83 c4 10             	add    esp,0x10
c0028db2:	83 ec 08             	sub    esp,0x8
c0028db5:	68 70 02 00 00       	push   0x270
c0028dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dbe:	e8 89 a0 fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028dc3:	83 c4 10             	add    esp,0x10
c0028dc6:	83 c4 0c             	add    esp,0xc
c0028dc9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dca <SATABus::~SATABus()>:
c0028dca:	83 ec 0c             	sub    esp,0xc
c0028dcd:	ba 74 cf 02 c0       	mov    edx,0xc002cf74
c0028dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd6:	89 10                	mov    DWORD PTR [eax],edx
c0028dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ddc:	83 ec 0c             	sub    esp,0xc
c0028ddf:	50                   	push   eax
c0028de0:	e8 2f b9 fe ff       	call   c0014714 <HardDiskController::~HardDiskController()>
c0028de5:	83 c4 10             	add    esp,0x10
c0028de8:	90                   	nop
c0028de9:	83 c4 0c             	add    esp,0xc
c0028dec:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dee <SATABus::~SATABus()>:
c0028dee:	83 ec 0c             	sub    esp,0xc
c0028df1:	83 ec 0c             	sub    esp,0xc
c0028df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df8:	e8 cd ff ff ff       	call   c0028dca <SATABus::~SATABus()>
c0028dfd:	83 c4 10             	add    esp,0x10
c0028e00:	83 ec 08             	sub    esp,0x8
c0028e03:	68 64 01 00 00       	push   0x164
c0028e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0c:	e8 3b a0 fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028e11:	83 c4 10             	add    esp,0x10
c0028e14:	83 c4 0c             	add    esp,0xc
c0028e17:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e18 <ATA::~ATA()>:
c0028e18:	83 ec 0c             	sub    esp,0xc
c0028e1b:	ba c0 cf 02 c0       	mov    edx,0xc002cfc0
c0028e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e24:	89 10                	mov    DWORD PTR [eax],edx
c0028e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2a:	83 ec 0c             	sub    esp,0xc
c0028e2d:	50                   	push   eax
c0028e2e:	e8 d3 b9 fe ff       	call   c0014806 <PhysicalDisk::~PhysicalDisk()>
c0028e33:	83 c4 10             	add    esp,0x10
c0028e36:	90                   	nop
c0028e37:	83 c4 0c             	add    esp,0xc
c0028e3a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e3c <ATA::~ATA()>:
c0028e3c:	83 ec 0c             	sub    esp,0xc
c0028e3f:	83 ec 0c             	sub    esp,0xc
c0028e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e46:	e8 cd ff ff ff       	call   c0028e18 <ATA::~ATA()>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	83 ec 08             	sub    esp,0x8
c0028e51:	68 7c 01 00 00       	push   0x17c
c0028e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5a:	e8 ed 9f fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028e5f:	83 c4 10             	add    esp,0x10
c0028e62:	83 c4 0c             	add    esp,0xc
c0028e65:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e66 <ATAPI::~ATAPI()>:
c0028e66:	83 ec 0c             	sub    esp,0xc
c0028e69:	ba f8 cf 02 c0       	mov    edx,0xc002cff8
c0028e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e72:	89 10                	mov    DWORD PTR [eax],edx
c0028e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e78:	83 ec 0c             	sub    esp,0xc
c0028e7b:	50                   	push   eax
c0028e7c:	e8 85 b9 fe ff       	call   c0014806 <PhysicalDisk::~PhysicalDisk()>
c0028e81:	83 c4 10             	add    esp,0x10
c0028e84:	90                   	nop
c0028e85:	83 c4 0c             	add    esp,0xc
c0028e88:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e8a <ATAPI::~ATAPI()>:
c0028e8a:	83 ec 0c             	sub    esp,0xc
c0028e8d:	83 ec 0c             	sub    esp,0xc
c0028e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e94:	e8 cd ff ff ff       	call   c0028e66 <ATAPI::~ATAPI()>
c0028e99:	83 c4 10             	add    esp,0x10
c0028e9c:	83 ec 08             	sub    esp,0x8
c0028e9f:	68 80 01 00 00       	push   0x180
c0028ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea8:	e8 9f 9f fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028ead:	83 c4 10             	add    esp,0x10
c0028eb0:	83 c4 0c             	add    esp,0xc
c0028eb3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028eb4 <SATA::~SATA()>:
c0028eb4:	83 ec 0c             	sub    esp,0xc
c0028eb7:	ba ac d0 02 c0       	mov    edx,0xc002d0ac
c0028ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec0:	89 10                	mov    DWORD PTR [eax],edx
c0028ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	50                   	push   eax
c0028eca:	e8 37 b9 fe ff       	call   c0014806 <PhysicalDisk::~PhysicalDisk()>
c0028ecf:	83 c4 10             	add    esp,0x10
c0028ed2:	90                   	nop
c0028ed3:	83 c4 0c             	add    esp,0xc
c0028ed6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ed8 <SATA::~SATA()>:
c0028ed8:	83 ec 0c             	sub    esp,0xc
c0028edb:	83 ec 0c             	sub    esp,0xc
c0028ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee2:	e8 cd ff ff ff       	call   c0028eb4 <SATA::~SATA()>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	83 ec 08             	sub    esp,0x8
c0028eed:	68 7c 01 00 00       	push   0x17c
c0028ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef6:	e8 51 9f fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028efb:	83 c4 10             	add    esp,0x10
c0028efe:	83 c4 0c             	add    esp,0xc
c0028f01:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f02 <SATAPI::~SATAPI()>:
c0028f02:	83 ec 0c             	sub    esp,0xc
c0028f05:	ba 88 d1 02 c0       	mov    edx,0xc002d188
c0028f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0e:	89 10                	mov    DWORD PTR [eax],edx
c0028f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f14:	83 ec 0c             	sub    esp,0xc
c0028f17:	50                   	push   eax
c0028f18:	e8 e9 b8 fe ff       	call   c0014806 <PhysicalDisk::~PhysicalDisk()>
c0028f1d:	83 c4 10             	add    esp,0x10
c0028f20:	90                   	nop
c0028f21:	83 c4 0c             	add    esp,0xc
c0028f24:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f26 <SATAPI::~SATAPI()>:
c0028f26:	83 ec 0c             	sub    esp,0xc
c0028f29:	83 ec 0c             	sub    esp,0xc
c0028f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f30:	e8 cd ff ff ff       	call   c0028f02 <SATAPI::~SATAPI()>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	83 ec 08             	sub    esp,0x8
c0028f3b:	68 80 01 00 00       	push   0x180
c0028f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f44:	e8 03 9f fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028f49:	83 c4 10             	add    esp,0x10
c0028f4c:	83 c4 0c             	add    esp,0xc
c0028f4f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f50 <AVX::~AVX()>:
c0028f50:	83 ec 0c             	sub    esp,0xc
c0028f53:	ba c8 d1 02 c0       	mov    edx,0xc002d1c8
c0028f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5c:	89 10                	mov    DWORD PTR [eax],edx
c0028f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f62:	83 ec 0c             	sub    esp,0xc
c0028f65:	50                   	push   eax
c0028f66:	e8 1f b9 fe ff       	call   c001488a <FPU::~FPU()>
c0028f6b:	83 c4 10             	add    esp,0x10
c0028f6e:	90                   	nop
c0028f6f:	83 c4 0c             	add    esp,0xc
c0028f72:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f74 <AVX::~AVX()>:
c0028f74:	83 ec 0c             	sub    esp,0xc
c0028f77:	83 ec 0c             	sub    esp,0xc
c0028f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7e:	e8 cd ff ff ff       	call   c0028f50 <AVX::~AVX()>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	83 ec 08             	sub    esp,0x8
c0028f89:	68 58 01 00 00       	push   0x158
c0028f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f92:	e8 b5 9e fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028f97:	83 c4 10             	add    esp,0x10
c0028f9a:	83 c4 0c             	add    esp,0xc
c0028f9d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f9e <MMX::~MMX()>:
c0028f9e:	83 ec 0c             	sub    esp,0xc
c0028fa1:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c0028fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028faa:	89 10                	mov    DWORD PTR [eax],edx
c0028fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb0:	83 ec 0c             	sub    esp,0xc
c0028fb3:	50                   	push   eax
c0028fb4:	e8 d1 b8 fe ff       	call   c001488a <FPU::~FPU()>
c0028fb9:	83 c4 10             	add    esp,0x10
c0028fbc:	90                   	nop
c0028fbd:	83 c4 0c             	add    esp,0xc
c0028fc0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fc2 <MMX::~MMX()>:
c0028fc2:	83 ec 0c             	sub    esp,0xc
c0028fc5:	83 ec 0c             	sub    esp,0xc
c0028fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fcc:	e8 cd ff ff ff       	call   c0028f9e <MMX::~MMX()>
c0028fd1:	83 c4 10             	add    esp,0x10
c0028fd4:	83 ec 08             	sub    esp,0x8
c0028fd7:	68 58 01 00 00       	push   0x158
c0028fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe0:	e8 67 9e fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0028fe5:	83 c4 10             	add    esp,0x10
c0028fe8:	83 c4 0c             	add    esp,0xc
c0028feb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fec <SSE::~SSE()>:
c0028fec:	83 ec 0c             	sub    esp,0xc
c0028fef:	ba 48 d2 02 c0       	mov    edx,0xc002d248
c0028ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff8:	89 10                	mov    DWORD PTR [eax],edx
c0028ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffe:	83 ec 0c             	sub    esp,0xc
c0029001:	50                   	push   eax
c0029002:	e8 83 b8 fe ff       	call   c001488a <FPU::~FPU()>
c0029007:	83 c4 10             	add    esp,0x10
c002900a:	90                   	nop
c002900b:	83 c4 0c             	add    esp,0xc
c002900e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029010 <SSE::~SSE()>:
c0029010:	83 ec 0c             	sub    esp,0xc
c0029013:	83 ec 0c             	sub    esp,0xc
c0029016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901a:	e8 cd ff ff ff       	call   c0028fec <SSE::~SSE()>
c002901f:	83 c4 10             	add    esp,0x10
c0029022:	83 ec 08             	sub    esp,0x8
c0029025:	68 58 01 00 00       	push   0x158
c002902a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902e:	e8 19 9e fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0029033:	83 c4 10             	add    esp,0x10
c0029036:	83 c4 0c             	add    esp,0xc
c0029039:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002903a <x87::~x87()>:
c002903a:	83 ec 0c             	sub    esp,0xc
c002903d:	ba 88 d2 02 c0       	mov    edx,0xc002d288
c0029042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029046:	89 10                	mov    DWORD PTR [eax],edx
c0029048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904c:	83 ec 0c             	sub    esp,0xc
c002904f:	50                   	push   eax
c0029050:	e8 35 b8 fe ff       	call   c001488a <FPU::~FPU()>
c0029055:	83 c4 10             	add    esp,0x10
c0029058:	90                   	nop
c0029059:	83 c4 0c             	add    esp,0xc
c002905c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002905e <x87::~x87()>:
c002905e:	83 ec 0c             	sub    esp,0xc
c0029061:	83 ec 0c             	sub    esp,0xc
c0029064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029068:	e8 cd ff ff ff       	call   c002903a <x87::~x87()>
c002906d:	83 c4 10             	add    esp,0x10
c0029070:	83 ec 08             	sub    esp,0x8
c0029073:	68 58 01 00 00       	push   0x158
c0029078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907c:	e8 cb 9d fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0029081:	83 c4 10             	add    esp,0x10
c0029084:	83 c4 0c             	add    esp,0xc
c0029087:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029088 <IOAPIC::~IOAPIC()>:
c0029088:	83 ec 0c             	sub    esp,0xc
c002908b:	ba e0 d3 02 c0       	mov    edx,0xc002d3e0
c0029090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029094:	89 10                	mov    DWORD PTR [eax],edx
c0029096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909a:	83 ec 0c             	sub    esp,0xc
c002909d:	50                   	push   eax
c002909e:	e8 81 b1 fe ff       	call   c0014224 <Device::~Device()>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	90                   	nop
c00290a7:	83 c4 0c             	add    esp,0xc
c00290aa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290ac <IOAPIC::~IOAPIC()>:
c00290ac:	83 ec 0c             	sub    esp,0xc
c00290af:	83 ec 0c             	sub    esp,0xc
c00290b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b6:	e8 cd ff ff ff       	call   c0029088 <IOAPIC::~IOAPIC()>
c00290bb:	83 c4 10             	add    esp,0x10
c00290be:	83 ec 08             	sub    esp,0x8
c00290c1:	68 68 01 00 00       	push   0x168
c00290c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ca:	e8 7d 9d fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00290cf:	83 c4 10             	add    esp,0x10
c00290d2:	83 c4 0c             	add    esp,0xc
c00290d5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290d6 <APIC::~APIC()>:
c00290d6:	83 ec 0c             	sub    esp,0xc
c00290d9:	ba 98 d3 02 c0       	mov    edx,0xc002d398
c00290de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e2:	89 10                	mov    DWORD PTR [eax],edx
c00290e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e8:	83 ec 0c             	sub    esp,0xc
c00290eb:	50                   	push   eax
c00290ec:	e8 63 bc fe ff       	call   c0014d54 <InterruptController::~InterruptController()>
c00290f1:	83 c4 10             	add    esp,0x10
c00290f4:	90                   	nop
c00290f5:	83 c4 0c             	add    esp,0xc
c00290f8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290fa <APIC::~APIC()>:
c00290fa:	83 ec 0c             	sub    esp,0xc
c00290fd:	83 ec 0c             	sub    esp,0xc
c0029100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029104:	e8 cd ff ff ff       	call   c00290d6 <APIC::~APIC()>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	83 ec 08             	sub    esp,0x8
c002910f:	68 58 21 00 00       	push   0x2158
c0029114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029118:	e8 2f 9d fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c002911d:	83 c4 10             	add    esp,0x10
c0029120:	83 c4 0c             	add    esp,0xc
c0029123:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029124 <PIC::~PIC()>:
c0029124:	83 ec 0c             	sub    esp,0xc
c0029127:	ba 30 d4 02 c0       	mov    edx,0xc002d430
c002912c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029130:	89 10                	mov    DWORD PTR [eax],edx
c0029132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029136:	83 ec 0c             	sub    esp,0xc
c0029139:	50                   	push   eax
c002913a:	e8 15 bc fe ff       	call   c0014d54 <InterruptController::~InterruptController()>
c002913f:	83 c4 10             	add    esp,0x10
c0029142:	90                   	nop
c0029143:	83 c4 0c             	add    esp,0xc
c0029146:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029148 <PIC::~PIC()>:
c0029148:	83 ec 0c             	sub    esp,0xc
c002914b:	83 ec 0c             	sub    esp,0xc
c002914e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029152:	e8 cd ff ff ff       	call   c0029124 <PIC::~PIC()>
c0029157:	83 c4 10             	add    esp,0x10
c002915a:	83 ec 08             	sub    esp,0x8
c002915d:	68 58 21 00 00       	push   0x2158
c0029162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029166:	e8 e1 9c fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c002916b:	83 c4 10             	add    esp,0x10
c002916e:	83 c4 0c             	add    esp,0xc
c0029171:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029172 <APICTimer::~APICTimer()>:
c0029172:	83 ec 0c             	sub    esp,0xc
c0029175:	ba 84 d4 02 c0       	mov    edx,0xc002d484
c002917a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917e:	89 10                	mov    DWORD PTR [eax],edx
c0029180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029184:	83 ec 0c             	sub    esp,0xc
c0029187:	50                   	push   eax
c0029188:	e8 13 db fe ff       	call   c0016ca0 <Timer::~Timer()>
c002918d:	83 c4 10             	add    esp,0x10
c0029190:	90                   	nop
c0029191:	83 c4 0c             	add    esp,0xc
c0029194:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029196 <APICTimer::~APICTimer()>:
c0029196:	83 ec 0c             	sub    esp,0xc
c0029199:	83 ec 0c             	sub    esp,0xc
c002919c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a0:	e8 cd ff ff ff       	call   c0029172 <APICTimer::~APICTimer()>
c00291a5:	83 c4 10             	add    esp,0x10
c00291a8:	83 ec 08             	sub    esp,0x8
c00291ab:	68 60 01 00 00       	push   0x160
c00291b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b4:	e8 93 9c fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c00291b9:	83 c4 10             	add    esp,0x10
c00291bc:	83 c4 0c             	add    esp,0xc
c00291bf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291c0 <PIT::~PIT()>:
c00291c0:	83 ec 0c             	sub    esp,0xc
c00291c3:	ba d4 d4 02 c0       	mov    edx,0xc002d4d4
c00291c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291cc:	89 10                	mov    DWORD PTR [eax],edx
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	83 ec 0c             	sub    esp,0xc
c00291d5:	50                   	push   eax
c00291d6:	e8 c5 da fe ff       	call   c0016ca0 <Timer::~Timer()>
c00291db:	83 c4 10             	add    esp,0x10
c00291de:	90                   	nop
c00291df:	83 c4 0c             	add    esp,0xc
c00291e2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291e4 <PIT::~PIT()>:
c00291e4:	83 ec 0c             	sub    esp,0xc
c00291e7:	83 ec 0c             	sub    esp,0xc
c00291ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ee:	e8 cd ff ff ff       	call   c00291c0 <PIT::~PIT()>
c00291f3:	83 c4 10             	add    esp,0x10
c00291f6:	83 ec 08             	sub    esp,0x8
c00291f9:	68 5c 01 00 00       	push   0x15c
c00291fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029202:	e8 45 9c fe ff       	call   c0012e4c <operator delete(void*, unsigned long)>
c0029207:	83 c4 10             	add    esp,0x10
c002920a:	83 c4 0c             	add    esp,0xc
c002920d:	c3                   	ret    
