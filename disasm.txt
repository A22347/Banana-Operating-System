
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 fa 01 c0       	mov    eax,0xc001faf4
c0000025:	3d f4 fa 01 c0       	cmp    eax,0xc001faf4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 fa 01 c0       	push   0xc001faf4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 fa 01 c0       	mov    eax,0xc001faf4
c0000051:	2d f4 fa 01 c0       	sub    eax,0xc001faf4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 fa 01 c0       	push   0xc001faf4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb a8 cd 01 c0       	mov    ebx,0xc001cda8
c0000097:	81 eb a4 cd 01 c0    	sub    ebx,0xc001cda4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be a4 cd 01 c0       	mov    esi,0xc001cda4
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 fa 01 c0       	push   0xc001faf4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 f4 fa 01 c0       	push   0xc001faf4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 3c 2d 01 00       	call   c0012fec <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 10 a0 00 00       	call   c000a2d8 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 1a 2d 01 00       	call   c0012fec <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 23 32 01 00       	call   c0013514 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 72 38 01 00       	call   c0013b6c <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 f8 fd 00 00       	jmp    c001017a <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 c0 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe3240],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3240],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 c0 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe3240],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 c0 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3240],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 c0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3240],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 c4 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe313c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 12 52 01 00       	jmp    c0016efc <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 40 52 01 00       	jmp    c0016f40 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 65 52 01 00       	jmp    c0016f84 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 20 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2fe0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 20 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2fe0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba f8 ef 01 c0       	mov    edx,0xc001eff8
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba dc ce 01 c0       	mov    edx,0xc001cedc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 e2 ce 01 c0       	mov    eax,0xc001cee2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad a0 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3060]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 eb ce 01 c0       	mov    eax,0xc001ceeb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 20 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2fe0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 70 cf 01 c0       	mov    eax,0xc001cf70
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 60 cf 01 c0       	mov    ebx,0xc001cf60
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 40 cf 01 c0       	mov    edx,0xc001cf40
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 50 cf 01 c0       	mov    edx,0xc001cf50
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba f2 ce 01 c0       	mov    edx,0xc001cef2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba fe ce 01 c0       	mov    edx,0xc001cefe
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 12 cf 01 c0       	mov    edx,0xc001cf12
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 40 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d340
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 40 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d340
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 40 d1 01 c0       	mov    eax,0xc001d140
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 80 d0 01 c0       	mov    eax,0xc001d080
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 40 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2fc0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 59 18 01 00       	call   c00177d8 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 40 d4 01 c0       	push   0xc001d440
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 40 d4 01 c0       	push   0xc001d440
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 43 d4 01 c0       	push   0xc001d443
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 4a d4 01 c0       	push   0xc001d44a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 92 50 00 00       	call   c000ba6a <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 51 d4 01 c0       	push   0xc001d451
c0006a09:	e8 09 91 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 6a d4 01 c0       	push   0xc001d46a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 06 c9 00 00       	call   c001333c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 19 cb 00 00       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 b8 3f 01 c0       	push   0xc0013fb8
c0006a5a:	52                   	push   edx
c0006a5b:	e8 04 cb 00 00       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 68 d5 01 c0       	push   0xc001d568
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 9e 90 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006a79:	e8 19 d9 00 00       	call   c0014397 <Vm::initialise8086()>
c0006a7e:	e8 2d 3e 00 00       	call   c000a8b0 <Fs::initVFS()>
c0006a83:	c7 04 24 77 d4 01 c0 	mov    DWORD PTR [esp],0xc001d477
c0006a8a:	e8 88 90 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 68 d5 01 c0       	push   0xc001d568
c0006aae:	e8 64 90 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006ab3:	e8 3a 95 00 00       	call   c000fff2 <Krnl::loadSystemEnv()>
c0006ab8:	e8 97 97 00 00       	call   c0010254 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 91 d4 01 c0       	push   0xc001d491
c0006ac7:	68 9a d4 01 c0       	push   0xc001d49a
c0006acc:	e8 01 ae 00 00       	call   c00118d2 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 e3 48 00 00       	call   c000b3bc <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 8c d5 01 c0 	mov    DWORD PTR [esp],0xc001d58c
c0006ae0:	e8 32 90 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 71 4f 00 00       	call   c000ba68 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 a2 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4a2
c0006afe:	e8 14 90 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 b3 d4 01 c0       	push   0xc001d4b3
c0006b12:	e8 42 c2 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 6a c4 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 53 ce 00 00       	call   c0013980 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 cf d4 01 c0       	push   0xc001d4cf
c0006b41:	50                   	push   eax
c0006b42:	e8 9d 4f 00 00       	call   c000bae4 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba d8 d5 01 c0       	mov    edx,0xc001d5d8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 75 51 01 00       	call   c001bda6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 d8 83 00 00       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 b1 83 00 00       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 8f 83 00 00       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 6d 83 00 00       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 7b 82 00 00       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 56 82 00 00       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 df 4f 01 00       	call   c001bd60 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 dc 4c 01 00       	call   c001ba80 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 72 82 00 00       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 d8 d4 01 c0       	push   0xc001d4d8
c0006e14:	e8 76 93 00 00       	call   c001018f <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 de d4 01 c0       	push   0xc001d4de
c0006e4c:	e8 3e 93 00 00       	call   c001018f <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 23 7c 00 00       	jmp    c000eabc <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 e4 d4 01 c0       	push   0xc001d4e4
c0006eed:	0f 94 05 60 f7 01 c0 	sete   BYTE PTR ds:0xc001f760
c0006ef4:	e8 1e 8c 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 45 77 00 00       	call   c000e654 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 2e 4a 00 00       	call   c000b94c <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 fc d4 01 c0 	mov    DWORD PTR [esp],0xc001d4fc
c0006f37:	e8 db 8b 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 aa 81 00 00       	call   c000f0fc <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 eb 49 00 00       	call   c000b94c <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 ac d5 01 c0       	push   0xc001d5ac
c0006f7e:	e8 94 8b 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006f83:	e8 46 e5 00 00       	call   c00154ce <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 16 d5 01 c0 	mov    DWORD PTR [esp],0xc001d516
c0006f8f:	e8 83 8b 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 dc c6 00 00       	call   c001367c <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 31 d5 01 c0       	push   0xc001d531
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 1e 35 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 42 d5 01 c0       	push   0xc001d542
c000700e:	e8 7c 91 00 00       	call   c001018f <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 4f d5 01 c0       	push   0xc001d54f
c0007023:	e8 67 91 00 00       	call   c001018f <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 59 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d559
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 50 91 00 00       	jmp    c001018f <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 83 df 00 00       	call   c00151a8 <HalSystemIdle()>
c0007225:	e8 38 51 01 00       	call   c001c362 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 10 bb 01 c0       	push   0xc001bb10
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 20 bb 01 c0       	push   0xc001bb20
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 2a bb 01 c0       	push   0xc001bb2a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 34 bb 01 c0       	push   0xc001bb34
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 3e bb 01 c0       	push   0xc001bb3e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 48 bb 01 c0       	push   0xc001bb48
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 52 bb 01 c0       	push   0xc001bb52
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 5c bb 01 c0       	push   0xc001bb5c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 66 bb 01 c0       	push   0xc001bb66
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 6e bb 01 c0       	push   0xc001bb6e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 78 bb 01 c0       	push   0xc001bb78
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 80 bb 01 c0       	push   0xc001bb80
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 88 bb 01 c0       	push   0xc001bb88
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 90 bb 01 c0       	push   0xc001bb90
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 98 bb 01 c0       	push   0xc001bb98
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 a0 bb 01 c0       	push   0xc001bba0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 aa bb 01 c0       	push   0xc001bbaa
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 b4 bb 01 c0       	push   0xc001bbb4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 be bb 01 c0       	push   0xc001bbbe
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 58 bc 01 c0       	push   0xc001bc58
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 5f bc 01 c0       	push   0xc001bc5f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 4a bc 01 c0       	push   0xc001bc4a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 51 bc 01 c0       	push   0xc001bc51
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 c8 bb 01 c0       	push   0xc001bbc8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 d2 bb 01 c0       	push   0xc001bbd2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 dc bb 01 c0       	push   0xc001bbdc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 e6 bb 01 c0       	push   0xc001bbe6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 f0 bb 01 c0       	push   0xc001bbf0
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 fa bb 01 c0       	push   0xc001bbfa
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 04 bc 01 c0       	push   0xc001bc04
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 0e bc 01 c0       	push   0xc001bc0e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 18 bc 01 c0       	push   0xc001bc18
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 22 bc 01 c0       	push   0xc001bc22
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 2c bc 01 c0       	push   0xc001bc2c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 36 bc 01 c0       	push   0xc001bc36
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 40 bc 01 c0       	push   0xc001bc40
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 f1 bc 01 c0       	push   0xc001bcf1
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 fb bc 01 c0       	push   0xc001bcfb
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 05 bd 01 c0       	push   0xc001bd05
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 0f bd 01 c0       	push   0xc001bd0f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 19 bd 01 c0       	push   0xc001bd19
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 23 bd 01 c0       	push   0xc001bd23
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 2d bd 01 c0       	push   0xc001bd2d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 37 bd 01 c0       	push   0xc001bd37
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 05 24 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 66 bb 01 c0       	push   0xc001bb66
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 48 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f748
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 48 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f748
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 40 22 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 48 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f748,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 48 f7 01 c0       	mov    eax,ds:0xc001f748
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 fc d5 01 c0       	push   0xc001d5fc
c000770e:	e8 fc 2d 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 2c d6 01 c0       	push   0xc001d62c
c000772d:	e8 5d 8a 00 00       	call   c001018f <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 31 d6 01 c0       	push   0xc001d631
c0007743:	e8 47 8a 00 00       	call   c001018f <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 98 22 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 3e 1f 00 00       	call   c00096da <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 38 d6 01 c0       	push   0xc001d638
c0007862:	e8 a8 2c 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0007867:	e8 3d 82 00 00       	call   c000faa9 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 6d 1c 00 00       	call   c0009500 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 5c 4a 01 00       	call   c001c2fa <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 e7 1e 00 00       	call   c00097b6 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 50 d6 01 c0       	push   0xc001d650
c000792c:	e8 5e 88 00 00       	call   c001018f <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 50 d6 01 c0       	push   0xc001d650
c0007993:	e8 f7 87 00 00       	call   c001018f <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 4c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f74c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 4c f7 01 c0    	add    eax,DWORD PTR ds:0xc001f74c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 4c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f74c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 f5 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6f5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 0c 87 00 00       	jmp    c001018f <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 08 27 00 00       	call   c000a1f8 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 78 d6 01 c0       	push   0xc001d678
c0007aff:	e8 8b 86 00 00       	call   c001018f <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 0b d7 01 c0       	push   0xc001d70b
c0007c18:	e8 f2 28 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 a8 d6 01 c0       	push   0xc001d6a8
c0007ca4:	e8 66 28 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 cc d6 01 c0       	push   0xc001d6cc
c0007d40:	e8 ca 27 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 31 d7 01 c0       	push   0xc001d731
c0007d76:	e8 94 27 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 23 d7 01 c0       	push   0xc001d723
c0007de5:	e8 a5 83 00 00       	call   c001018f <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 90 d7 01 c0       	mov    edx,0xc001d790
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 1f 25 00 00       	call   c000a419 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 4d d7 01 c0       	push   0xc001d74d
c0007fa7:	e8 e3 81 00 00       	call   c001018f <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 8f b7 00 00       	call   c0013784 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 53 41 01 00       	call   c001c1e0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 6a d7 01 c0       	push   0xc001d76a
c00080a2:	e8 e8 80 00 00       	call   c001018f <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 90 d7 01 c0       	mov    edx,0xc001d790
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 24 d8 01 c0       	mov    edx,0xc001d824
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 a8 22 00 00       	call   c000a419 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 e0 45 00 00       	call   c000c76c <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 ae e1 00 00       	call   c0016360 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 80 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0880]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 80 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0880]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 38 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09c8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 10 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09f0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 d1 de 00 00       	call   c00161ec <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 2c df 00 00       	jmp    c00162f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 a4 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7a4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 7b 7d 00 00       	jmp    c001018f <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 f4 2d 00 00       	jmp    c000b363 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be b2 d7 01 c0       	mov    esi,0xc001d7b2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 3e da 00 00       	call   c00162f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 24 d8 01 c0       	mov    edx,0xc001d824
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 6a 0f 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 c3 d7 01 c0       	push   0xc001d7c3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 c9 d7 01 c0       	push   0xc001d7c9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 cf d7 01 c0       	push   0xc001d7cf
c0008b78:	e8 12 76 00 00       	call   c001018f <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba ec d8 01 c0       	mov    edx,0xc001d8ec
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 c0 f7 01 c0       	mov    eax,ds:0xc001f7c0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 c0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 43 35 01 00       	call   c001c3c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 08 d9 01 c0       	mov    edx,0xc001d908
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba ec d8 01 c0       	mov    edx,0xc001d8ec
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 47 34 01 00       	call   c001c49c <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 3b 34 01 00       	call   c001c4a4 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 41 33 01 00       	call   c001c3c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 c4 d8 01 c0       	push   0xc001d8c4
c00090a9:	e8 e1 70 00 00       	call   c001018f <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 3d 13 00 00       	call   c000a419 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 08 d9 01 c0       	mov    edx,0xc001d908
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 f1 12 00 00       	call   c000a419 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 4a 33 01 00       	call   c001c49c <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 d7 33 01 00       	call   c001c546 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 95 31 01 00       	call   c001c386 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 44 f7 01 c0       	push   0xc001f744
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 84 c3 01 c0       	push   0xc001c384
c0009206:	e8 be 11 00 00       	call   c000a3c9 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 c8 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7c8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d c8 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7c8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d c4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 c4 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f7c4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 1c d9 01 c0       	push   0xc001d91c
c00092ff:	e8 8b 6e 00 00       	call   c001018f <KePanic(char const*)>
c0009304:	8b 3d c4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 c4 f7 01 c0       	mov    eax,ds:0xc001f7c4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 c4 f7 01 c0       	mov    ds:0xc001f7c4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 cc f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f7cc
c00093bf:	03 05 d4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7d4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d cc f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7cc
c00093d5:	a1 d0 f7 01 c0       	mov    eax,ds:0xc001f7d0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d d0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7d0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 a8 da 01 c0       	push   0xc001daa8
c0009419:	e8 71 6d 00 00       	call   c001018f <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 bf da 01 c0       	push   0xc001dabf
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d d0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7d0,ebx
c00094b7:	c6 05 d8 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f7d8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 d4 f7 01 c0       	mov    ds:0xc001f7d4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 cc f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f7cc,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 d0 f7 01 c0       	mov    eax,ds:0xc001f7d0
c00094e9:	f7 35 cc f7 01 c0    	div    DWORD PTR ds:0xc001f7cc
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS()>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951a:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c000951f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009523:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000952e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009532:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009539:	90                   	nop
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <VAS::VAS(VAS*)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 3c d9 01 c0       	push   0xc001d93c
c000955d:	e8 2d 6c 00 00       	call   c001018f <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	90                   	nop
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	c3                   	ret    

c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000956a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000956e:	89 c2                	mov    edx,eax
c0009570:	c1 e8 0a             	shr    eax,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000957b:	19 c9                	sbb    ecx,ecx
c000957d:	c1 e2 0c             	shl    edx,0xc
c0009580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009586:	25 fc 0f 00 00       	and    eax,0xffc
c000958b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009592:	01 d0                	add    eax,edx
c0009594:	c3                   	ret    
c0009595:	90                   	nop

c0009596 <VAS::getPageTableEntry(unsigned long)>:
c0009596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000959a:	89 ca                	mov    edx,ecx
c000959c:	c1 e9 0a             	shr    ecx,0xa
c000959f:	c1 ea 16             	shr    edx,0x16
c00095a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ae:	c1 e0 0c             	shl    eax,0xc
c00095b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095b4:	c3                   	ret    

c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095b5:	57                   	push   edi
c00095b6:	56                   	push   esi
c00095b7:	be 01 00 00 00       	mov    esi,0x1
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 10             	sub    esp,0x10
c00095c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095c4:	c1 eb 0c             	shr    ebx,0xc
c00095c7:	eb 3f                	jmp    c0009608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00095d1:	57                   	push   edi
c00095d2:	50                   	push   eax
c00095d3:	e8 be ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	8b 00                	mov    eax,DWORD PTR [eax]
c00095dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e1:	f6 c4 04             	test   ah,0x4
c00095e4:	75 60                	jne    c0009646 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095e6:	80 fa 04             	cmp    dl,0x4
c00095e9:	74 79                	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095eb:	80 fa 02             	cmp    dl,0x2
c00095ee:	0f 84 89 00 00 00    	je     c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095f4:	80 fa 03             	cmp    dl,0x3
c00095f7:	0f 84 ae 00 00 00    	je     c00096ab <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095fd:	fe ca                	dec    dl
c00095ff:	0f 84 93 00 00 00    	je     c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009605:	43                   	inc    ebx
c0009606:	31 f6                	xor    esi,esi
c0009608:	53                   	push   ebx
c0009609:	89 df                	mov    edi,ebx
c000960b:	e8 51 fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c0009610:	c1 e7 0c             	shl    edi,0xc
c0009613:	5a                   	pop    edx
c0009614:	84 c0                	test   al,al
c0009616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000961a:	75 ad                	jne    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	68 d6 da 01 c0       	push   0xc001dad6
c0009624:	e8 66 6b 00 00       	call   c001018f <KePanic(char const*)>
c0009629:	5a                   	pop    edx
c000962a:	59                   	pop    ecx
c000962b:	57                   	push   edi
c000962c:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c0009632:	57                   	push   edi
c0009633:	e8 5e ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	8b 00                	mov    eax,DWORD PTR [eax]
c000963d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009641:	f6 c4 04             	test   ah,0x4
c0009644:	74 bf                	je     c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009646:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000964a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 db e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965f:	80 fa 04             	cmp    dl,0x4
c0009662:	75 87                	jne    c00095eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009664:	89 f0                	mov    eax,esi
c0009666:	84 c0                	test   al,al
c0009668:	75 47                	jne    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000966a:	c7 44 24 20 60 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d960
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	e9 12 6b 00 00       	jmp    c001018f <KePanic(char const*)>
c000967d:	89 f0                	mov    eax,esi
c000967f:	84 c0                	test   al,al
c0009681:	75 15                	jne    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009683:	83 ec 0c             	sub    esp,0xc
c0009686:	68 f2 da 01 c0       	push   0xc001daf2
c000968b:	e8 ff 6a 00 00       	call   c001018f <KePanic(char const*)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	e9 6d ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	6a 00                	push   0x0
c000969d:	53                   	push   ebx
c000969e:	e8 89 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	e9 5a ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ab:	89 f0                	mov    eax,esi
c00096ad:	84 c0                	test   al,al
c00096af:	75 15                	jne    c00096c6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b1:	83 ec 08             	sub    esp,0x8
c00096b4:	6a 00                	push   0x0
c00096b6:	53                   	push   ebx
c00096b7:	e8 70 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bc:	83 c4 10             	add    esp,0x10
c00096bf:	83 c4 10             	add    esp,0x10
c00096c2:	5b                   	pop    ebx
c00096c3:	5e                   	pop    esi
c00096c4:	5f                   	pop    edi
c00096c5:	c3                   	ret    
c00096c6:	c7 44 24 20 0e db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db0e
c00096ce:	83 c4 10             	add    esp,0x10
c00096d1:	5b                   	pop    ebx
c00096d2:	5e                   	pop    esi
c00096d3:	5f                   	pop    edi
c00096d4:	e9 b6 6a 00 00       	jmp    c001018f <KePanic(char const*)>
c00096d9:	90                   	nop

c00096da <VAS::freeAllocatedPages(unsigned long)>:
c00096da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096e6:	74 09                	je     c00096f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096ec:	e9 c4 fe ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00096f1:	c7 44 24 04 84 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d984
c00096f9:	e9 11 0e 00 00       	jmp    c000a50f <Dbg::kprintf(char const*, ...)>

c00096fe <VAS::virtualToPhysical(unsigned long)>:
c00096fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009702:	50                   	push   eax
c0009703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009707:	52                   	push   edx
c0009708:	e8 89 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000970d:	59                   	pop    ecx
c000970e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009710:	5a                   	pop    edx
c0009711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009718:	55                   	push   ebp
c0009719:	57                   	push   edi
c000971a:	56                   	push   esi
c000971b:	53                   	push   ebx
c000971c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009720:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009724:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009728:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000972c:	85 db                	test   ebx,ebx
c000972e:	7e 22                	jle    c0009752 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009730:	c1 e3 0c             	shl    ebx,0xc
c0009733:	01 f3                	add    ebx,esi
c0009735:	56                   	push   esi
c0009736:	81 c6 00 10 00 00    	add    esi,0x1000
c000973c:	55                   	push   ebp
c000973d:	e8 54 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009742:	5a                   	pop    edx
c0009743:	59                   	pop    ecx
c0009744:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009746:	21 f9                	and    ecx,edi
c0009748:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000974c:	39 f3                	cmp    ebx,esi
c000974e:	89 08                	mov    DWORD PTR [eax],ecx
c0009750:	75 e3                	jne    c0009735 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	5d                   	pop    ebp
c0009756:	c3                   	ret    
c0009757:	90                   	nop

c0009758 <VAS::setToWriteCombining(unsigned long, int)>:
c0009758:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000975d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009763:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000976a:	75 01                	jne    c000976d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000976c:	c3                   	ret    
c000976d:	68 80 00 00 00       	push   0x80
c0009772:	6a ff                	push   0xffffffff
c0009774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009778:	50                   	push   eax
c0009779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000977d:	52                   	push   edx
c000977e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009782:	51                   	push   ecx
c0009783:	e8 90 ff ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c0009788:	83 c4 14             	add    esp,0x14
c000978b:	c3                   	ret    

c000978c <VAS::mapOtherVASIn(bool, VAS*)>:
c000978c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009795:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000979c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000979f:	19 c0                	sbb    eax,eax
c00097a1:	83 ca 03             	or     edx,0x3
c00097a4:	83 e0 fc             	and    eax,0xfffffffc
c00097a7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ae:	0f 20 d8             	mov    eax,cr3
c00097b1:	0f 22 d8             	mov    cr3,eax
c00097b4:	c3                   	ret    
c00097b5:	90                   	nop

c00097b6 <VAS::~VAS()>:
c00097b6:	83 ec 2c             	sub    esp,0x2c
c00097b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097c1:	fa                   	cli    
c00097c2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097c7:	40                   	inc    eax
c00097c8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097e1:	6a 01                	push   0x1
c00097e3:	50                   	push   eax
c00097e4:	e8 a3 ff ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c00097e9:	83 c4 0c             	add    esp,0xc
c00097ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097fc:	0f 8f d4 00 00 00    	jg     c00098d6 <VAS::~VAS()+0x120>
c0009802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009806:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	c1 e2 02             	shl    edx,0x2
c0009810:	01 d0                	add    eax,edx
c0009812:	8b 00                	mov    eax,DWORD PTR [eax]
c0009814:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000981c:	83 e0 01             	and    eax,0x1
c000981f:	0f 84 a8 00 00 00    	je     c00098cd <VAS::~VAS()+0x117>
c0009825:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000982d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009835:	7f 72                	jg     c00098a9 <VAS::~VAS()+0xf3>
c0009837:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000983b:	c1 e0 0a             	shl    eax,0xa
c000983e:	89 c2                	mov    edx,eax
c0009840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009844:	01 d0                	add    eax,edx
c0009846:	c1 e0 0c             	shl    eax,0xc
c0009849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000984d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009857:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000985d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009861:	6a 01                	push   0x1
c0009863:	50                   	push   eax
c0009864:	e8 01 fd ff ff       	call   c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009869:	83 c4 0c             	add    esp,0xc
c000986c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009874:	8b 00                	mov    eax,DWORD PTR [eax]
c0009876:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000987a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000987e:	25 01 04 00 00       	and    eax,0x401
c0009883:	3d 01 04 00 00       	cmp    eax,0x401
c0009888:	75 19                	jne    c00098a3 <VAS::~VAS()+0xed>
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009893:	83 ec 0c             	sub    esp,0xc
c0009896:	50                   	push   eax
c0009897:	e8 97 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098a3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098a7:	eb 84                	jmp    c000982d <VAS::~VAS()+0x77>
c00098a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ad:	25 00 04 00 00       	and    eax,0x400
c00098b2:	74 19                	je     c00098cd <VAS::~VAS()+0x117>
c00098b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	50                   	push   eax
c00098c1:	e8 6d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098c6:	83 c4 10             	add    esp,0x10
c00098c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098cd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098d1:	e9 1e ff ff ff       	jmp    c00097f4 <VAS::~VAS()+0x3e>
c00098d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098dd:	83 ec 0c             	sub    esp,0xc
c00098e0:	50                   	push   eax
c00098e1:	e8 cf fc ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 3a e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009900:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009905:	48                   	dec    eax
c0009906:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000990b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009910:	85 c0                	test   eax,eax
c0009912:	75 01                	jne    c0009915 <VAS::~VAS()+0x15f>
c0009914:	fb                   	sti    
c0009915:	90                   	nop
c0009916:	83 c4 2c             	add    esp,0x2c
c0009919:	c3                   	ret    

c000991a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000991a:	55                   	push   ebp
c000991b:	57                   	push   edi
c000991c:	56                   	push   esi
c000991d:	53                   	push   ebx
c000991e:	83 ec 1c             	sub    esp,0x1c
c0009921:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009925:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009929:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000992f:	77 0b                	ja     c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009931:	0f 20 d8             	mov    eax,cr3
c0009934:	0f 20 d8             	mov    eax,cr3
c0009937:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000993a:	75 47                	jne    c0009983 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000993c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009940:	09 d8                	or     eax,ebx
c0009942:	a9 ff 0f 00 00       	test   eax,0xfff
c0009947:	75 57                	jne    c00099a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009949:	89 de                	mov    esi,ebx
c000994b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000994e:	c1 ee 16             	shr    esi,0x16
c0009951:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009958:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000995c:	74 54                	je     c00099b2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000995e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009962:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009968:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000996c:	c1 e6 0c             	shl    esi,0xc
c000996f:	c1 eb 0a             	shr    ebx,0xa
c0009972:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009978:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000997b:	83 c4 1c             	add    esp,0x1c
c000997e:	5b                   	pop    ebx
c000997f:	5e                   	pop    esi
c0009980:	5f                   	pop    edi
c0009981:	5d                   	pop    ebp
c0009982:	c3                   	ret    
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	68 a8 d9 01 c0       	push   0xc001d9a8
c000998b:	e8 7f 0b 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0009990:	83 c4 10             	add    esp,0x10
c0009993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009997:	09 d8                	or     eax,ebx
c0009999:	a9 ff 0f 00 00       	test   eax,0xfff
c000999e:	74 a9                	je     c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099a0:	83 ec 0c             	sub    esp,0xc
c00099a3:	68 10 da 01 c0       	push   0xc001da10
c00099a8:	e8 e2 67 00 00       	call   c001018f <KePanic(char const*)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	eb 97                	jmp    c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099b6:	e8 da e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099bb:	83 ec 0c             	sub    esp,0xc
c00099be:	89 c5                	mov    ebp,eax
c00099c0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099ca:	6a 01                	push   0x1
c00099cc:	e8 b4 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099d8:	6a 01                	push   0x1
c00099da:	50                   	push   eax
c00099db:	55                   	push   ebp
c00099dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00099e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099e6:	51                   	push   ecx
c00099e7:	e8 28 02 00 00       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ec:	83 c4 1c             	add    esp,0x1c
c00099ef:	68 00 10 00 00       	push   0x1000
c00099f4:	6a 00                	push   0x0
c00099f6:	50                   	push   eax
c00099f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099fb:	e8 d0 6a ff ff       	call   c00004d0 <memset>
c0009a00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a07:	e8 a9 fb ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a10:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a13:	83 c4 10             	add    esp,0x10
c0009a16:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a19:	e9 40 ff ff ff       	jmp    c000995e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a1e <VAS::allocatePages(int, int)>:
c0009a1e:	55                   	push   ebp
c0009a1f:	57                   	push   edi
c0009a20:	56                   	push   esi
c0009a21:	53                   	push   ebx
c0009a22:	83 ec 1c             	sub    esp,0x1c
c0009a25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a29:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a34:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a3a:	83 e0 01             	and    eax,0x1
c0009a3d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a45:	0f 85 cc 00 00 00    	jne    c0009b17 <VAS::allocatePages(int, int)+0xf9>
c0009a4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a52:	85 c0                	test   eax,eax
c0009a54:	0f 84 a1 00 00 00    	je     c0009afb <VAS::allocatePages(int, int)+0xdd>
c0009a5a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a62:	c1 e6 0c             	shl    esi,0xc
c0009a65:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a69:	85 c0                	test   eax,eax
c0009a6b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a6e:	7e 33                	jle    c0009aa3 <VAS::allocatePages(int, int)+0x85>
c0009a70:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a78:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a7e:	e8 12 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a83:	55                   	push   ebp
c0009a84:	53                   	push   ebx
c0009a85:	50                   	push   eax
c0009a86:	57                   	push   edi
c0009a87:	e8 8e fe ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a8c:	83 c4 10             	add    esp,0x10
c0009a8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a94:	74 03                	je     c0009a99 <VAS::allocatePages(int, int)+0x7b>
c0009a96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a9f:	39 de                	cmp    esi,ebx
c0009aa1:	75 db                	jne    c0009a7e <VAS::allocatePages(int, int)+0x60>
c0009aa3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aa8:	75 12                	jne    c0009abc <VAS::allocatePages(int, int)+0x9e>
c0009aaa:	0f 20 d8             	mov    eax,cr3
c0009aad:	0f 22 d8             	mov    cr3,eax
c0009ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab4:	83 c4 1c             	add    esp,0x1c
c0009ab7:	5b                   	pop    ebx
c0009ab8:	5e                   	pop    esi
c0009ab9:	5f                   	pop    edi
c0009aba:	5d                   	pop    ebp
c0009abb:	c3                   	ret    
c0009abc:	c1 ee 0a             	shr    esi,0xa
c0009abf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ac9:	c1 eb 0a             	shr    ebx,0xa
c0009acc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ad2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ad8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ade:	39 c3                	cmp    ebx,eax
c0009ae0:	77 ce                	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009ae2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ae5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aeb:	39 d8                	cmp    eax,ebx
c0009aed:	73 f3                	jae    c0009ae2 <VAS::allocatePages(int, int)+0xc4>
c0009aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009af3:	83 c4 1c             	add    esp,0x1c
c0009af6:	5b                   	pop    ebx
c0009af7:	5e                   	pop    esi
c0009af8:	5f                   	pop    edi
c0009af9:	5d                   	pop    ebp
c0009afa:	c3                   	ret    
c0009afb:	83 ec 0c             	sub    esp,0xc
c0009afe:	68 34 da 01 c0       	push   0xc001da34
c0009b03:	e8 87 66 00 00       	call   c001018f <KePanic(char const*)>
c0009b08:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b0f:	83 c4 10             	add    esp,0x10
c0009b12:	e9 43 ff ff ff       	jmp    c0009a5a <VAS::allocatePages(int, int)+0x3c>
c0009b17:	83 ec 0c             	sub    esp,0xc
c0009b1a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b1e:	51                   	push   ecx
c0009b1f:	e8 61 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b28:	83 c4 10             	add    esp,0x10
c0009b2b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b30:	0f 87 9b 00 00 00    	ja     c0009bd1 <VAS::allocatePages(int, int)+0x1b3>
c0009b36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b3a:	85 d2                	test   edx,edx
c0009b3c:	7e 3c                	jle    c0009b7a <VAS::allocatePages(int, int)+0x15c>
c0009b3e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b42:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b4a:	c1 e5 0c             	shl    ebp,0xc
c0009b4d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b53:	01 dd                	add    ebp,ebx
c0009b55:	e8 3b df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b5a:	56                   	push   esi
c0009b5b:	53                   	push   ebx
c0009b5c:	50                   	push   eax
c0009b5d:	57                   	push   edi
c0009b5e:	e8 b7 fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b63:	83 c4 10             	add    esp,0x10
c0009b66:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b6b:	74 03                	je     c0009b70 <VAS::allocatePages(int, int)+0x152>
c0009b6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b70:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b76:	39 dd                	cmp    ebp,ebx
c0009b78:	75 db                	jne    c0009b55 <VAS::allocatePages(int, int)+0x137>
c0009b7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7f:	0f 84 25 ff ff ff    	je     c0009aaa <VAS::allocatePages(int, int)+0x8c>
c0009b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b8d:	89 d3                	mov    ebx,edx
c0009b8f:	c1 e0 0c             	shl    eax,0xc
c0009b92:	c1 eb 0a             	shr    ebx,0xa
c0009b95:	01 d0                	add    eax,edx
c0009b97:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b9d:	c1 e8 0a             	shr    eax,0xa
c0009ba0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ba6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bab:	2d 00 00 40 00       	sub    eax,0x400000
c0009bb0:	39 c3                	cmp    ebx,eax
c0009bb2:	0f 87 f8 fe ff ff    	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009bb8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc1:	39 d8                	cmp    eax,ebx
c0009bc3:	73 f3                	jae    c0009bb8 <VAS::allocatePages(int, int)+0x19a>
c0009bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bc9:	83 c4 1c             	add    esp,0x1c
c0009bcc:	5b                   	pop    ebx
c0009bcd:	5e                   	pop    esi
c0009bce:	5f                   	pop    edi
c0009bcf:	5d                   	pop    ebp
c0009bd0:	c3                   	ret    
c0009bd1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bdc:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009be3:	0f 84 4d ff ff ff    	je     c0009b36 <VAS::allocatePages(int, int)+0x118>
c0009be9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bf1:	e9 40 ff ff ff       	jmp    c0009b36 <VAS::allocatePages(int, int)+0x118>

c0009bf6 <VAS::setCPUSpecific(unsigned long)>:
c0009bf6:	83 ec 0c             	sub    esp,0xc
c0009bf9:	6a 05                	push   0x5
c0009bfb:	68 00 00 40 c2       	push   0xc2400000
c0009c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c04:	50                   	push   eax
c0009c05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c09:	52                   	push   edx
c0009c0a:	e8 0b fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c0f:	83 c4 1c             	add    esp,0x1c
c0009c12:	c3                   	ret    
c0009c13:	90                   	nop

c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c14:	55                   	push   ebp
c0009c15:	57                   	push   edi
c0009c16:	56                   	push   esi
c0009c17:	53                   	push   ebx
c0009c18:	83 ec 1c             	sub    esp,0x1c
c0009c1b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c20:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c2a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c34:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c38:	83 e0 01             	and    eax,0x1
c0009c3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c43:	85 c0                	test   eax,eax
c0009c45:	7e 39                	jle    c0009c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4b:	89 f3                	mov    ebx,esi
c0009c4d:	c1 e0 0c             	shl    eax,0xc
c0009c50:	01 f0                	add    eax,esi
c0009c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c56:	55                   	push   ebp
c0009c57:	53                   	push   ebx
c0009c58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5c:	29 f0                	sub    eax,esi
c0009c5e:	01 d8                	add    eax,ebx
c0009c60:	50                   	push   eax
c0009c61:	57                   	push   edi
c0009c62:	e8 b3 fc ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c6f:	74 03                	je     c0009c74 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c71:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c74:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c7a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c7e:	75 d6                	jne    c0009c56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c85:	75 10                	jne    c0009c97 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c87:	0f 20 d8             	mov    eax,cr3
c0009c8a:	0f 22 d8             	mov    cr3,eax
c0009c8d:	83 c4 1c             	add    esp,0x1c
c0009c90:	89 f0                	mov    eax,esi
c0009c92:	5b                   	pop    ebx
c0009c93:	5e                   	pop    esi
c0009c94:	5f                   	pop    edi
c0009c95:	5d                   	pop    ebp
c0009c96:	c3                   	ret    
c0009c97:	89 f3                	mov    ebx,esi
c0009c99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9d:	c1 eb 0a             	shr    ebx,0xa
c0009ca0:	c1 e0 0c             	shl    eax,0xc
c0009ca3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ca9:	01 f0                	add    eax,esi
c0009cab:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cb1:	c1 e8 0a             	shr    eax,0xa
c0009cb4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cbe:	39 c3                	cmp    ebx,eax
c0009cc0:	77 cb                	ja     c0009c8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ccb:	39 d8                	cmp    eax,ebx
c0009ccd:	73 f3                	jae    c0009cc2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009ccf:	83 c4 1c             	add    esp,0x1c
c0009cd2:	89 f0                	mov    eax,esi
c0009cd4:	5b                   	pop    ebx
c0009cd5:	5e                   	pop    esi
c0009cd6:	5f                   	pop    edi
c0009cd7:	5d                   	pop    ebp
c0009cd8:	c3                   	ret    
c0009cd9:	90                   	nop

c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cda:	55                   	push   ebp
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 1c             	sub    esp,0x1c
c0009ce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ce5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ce9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009ced:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cf1:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cf6:	75 4a                	jne    c0009d42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009cf8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009cff:	c1 eb 16             	shr    ebx,0x16
c0009d02:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d09:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d0d:	74 4d                	je     c0009d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d13:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d17:	c1 e8 0a             	shr    eax,0xa
c0009d1a:	80 fa 01             	cmp    dl,0x1
c0009d1d:	19 d2                	sbb    edx,edx
c0009d1f:	c1 e3 0c             	shl    ebx,0xc
c0009d22:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d26:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d2c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d31:	01 d8                	add    eax,ebx
c0009d33:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d3a:	83 c4 1c             	add    esp,0x1c
c0009d3d:	5b                   	pop    ebx
c0009d3e:	5e                   	pop    esi
c0009d3f:	5f                   	pop    edi
c0009d40:	5d                   	pop    ebp
c0009d41:	c3                   	ret    
c0009d42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d46:	83 ec 0c             	sub    esp,0xc
c0009d49:	68 60 da 01 c0       	push   0xc001da60
c0009d4e:	e8 3c 64 00 00       	call   c001018f <KePanic(char const*)>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d5a:	eb 9c                	jmp    c0009cf8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d60:	e8 30 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d65:	83 ec 0c             	sub    esp,0xc
c0009d68:	89 c5                	mov    ebp,eax
c0009d6a:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009d70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d74:	6a 01                	push   0x1
c0009d76:	e8 0a f5 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009d7b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d82:	6a 01                	push   0x1
c0009d84:	50                   	push   eax
c0009d85:	55                   	push   ebp
c0009d86:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d90:	51                   	push   ecx
c0009d91:	e8 7e fe ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d96:	83 c4 1c             	add    esp,0x1c
c0009d99:	68 00 10 00 00       	push   0x1000
c0009d9e:	6a 00                	push   0x0
c0009da0:	50                   	push   eax
c0009da1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da5:	e8 26 67 ff ff       	call   c00004d0 <memset>
c0009daa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db1:	e8 ff f7 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009db6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dc3:	e9 47 ff ff ff       	jmp    c0009d0f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dc8 <VAS::VAS(bool)>:
c0009dc8:	53                   	push   ebx
c0009dc9:	83 ec 28             	sub    esp,0x28
c0009dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009dd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dee:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009df2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009df5:	e8 9b dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dfa:	89 c2                	mov    edx,eax
c0009dfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e00:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e03:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e09:	83 ec 0c             	sub    esp,0xc
c0009e0c:	6a 01                	push   0x1
c0009e0e:	e8 72 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	89 c2                	mov    edx,eax
c0009e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e1f:	83 ec 0c             	sub    esp,0xc
c0009e22:	6a 03                	push   0x3
c0009e24:	6a 01                	push   0x1
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	53                   	push   ebx
c0009e29:	e8 e6 fd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e2e:	83 c4 20             	add    esp,0x20
c0009e31:	89 c2                	mov    edx,eax
c0009e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e3a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e42:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e4a:	7f 1c                	jg     c0009e68 <VAS::VAS(bool)+0xa0>
c0009e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e57:	c1 e2 02             	shl    edx,0x2
c0009e5a:	01 d0                	add    eax,edx
c0009e5c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e62:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e66:	eb da                	jmp    c0009e42 <VAS::VAS(bool)+0x7a>
c0009e68:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e70:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e78:	7f 7a                	jg     c0009ef4 <VAS::VAS(bool)+0x12c>
c0009e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7e:	2d 00 02 00 00       	sub    eax,0x200
c0009e83:	c1 e0 0c             	shl    eax,0xc
c0009e86:	83 c8 03             	or     eax,0x3
c0009e89:	89 c2                	mov    edx,eax
c0009e8b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009e90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e96:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e9c:	83 e0 10             	and    eax,0x10
c0009e9f:	84 c0                	test   al,al
c0009ea1:	74 07                	je     c0009eaa <VAS::VAS(bool)+0xe2>
c0009ea3:	b8 00 01 00 00       	mov    eax,0x100
c0009ea8:	eb 05                	jmp    c0009eaf <VAS::VAS(bool)+0xe7>
c0009eaa:	b8 00 00 00 00       	mov    eax,0x0
c0009eaf:	09 d0                	or     eax,edx
c0009eb1:	89 c1                	mov    ecx,eax
c0009eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ebe:	c1 e2 02             	shl    edx,0x2
c0009ec1:	01 d0                	add    eax,edx
c0009ec3:	89 ca                	mov    edx,ecx
c0009ec5:	89 10                	mov    DWORD PTR [eax],edx
c0009ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ecb:	2d 40 03 00 00       	sub    eax,0x340
c0009ed0:	83 f8 7f             	cmp    eax,0x7f
c0009ed3:	77 16                	ja     c0009eeb <VAS::VAS(bool)+0x123>
c0009ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009edc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ee0:	c1 e2 02             	shl    edx,0x2
c0009ee3:	01 d0                	add    eax,edx
c0009ee5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eeb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eef:	e9 7c ff ff ff       	jmp    c0009e70 <VAS::VAS(bool)+0xa8>
c0009ef4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ef9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eff:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f05:	83 e0 10             	and    eax,0x10
c0009f08:	84 c0                	test   al,al
c0009f0a:	74 07                	je     c0009f13 <VAS::VAS(bool)+0x14b>
c0009f0c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f11:	eb 05                	jmp    c0009f18 <VAS::VAS(bool)+0x150>
c0009f13:	b8 03 40 00 00       	mov    eax,0x4003
c0009f18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f1c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f1f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f25:	89 02                	mov    DWORD PTR [edx],eax
c0009f27:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f38:	83 ec 08             	sub    esp,0x8
c0009f3b:	50                   	push   eax
c0009f3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f40:	e8 b1 fc ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f4f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f5a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f60:	83 e0 10             	and    eax,0x10
c0009f63:	84 c0                	test   al,al
c0009f65:	74 07                	je     c0009f6e <VAS::VAS(bool)+0x1a6>
c0009f67:	b8 00 01 00 00       	mov    eax,0x100
c0009f6c:	eb 05                	jmp    c0009f73 <VAS::VAS(bool)+0x1ab>
c0009f6e:	b8 00 00 00 00       	mov    eax,0x0
c0009f73:	09 c2                	or     edx,eax
c0009f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f7c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f81:	83 ca 03             	or     edx,0x3
c0009f84:	89 10                	mov    DWORD PTR [eax],edx
c0009f86:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f91:	83 ec 0c             	sub    esp,0xc
c0009f94:	50                   	push   eax
c0009f95:	e8 46 1c 00 00       	call   c000bbe0 <Device::getName()>
c0009f9a:	83 c4 10             	add    esp,0x10
c0009f9d:	83 ec 08             	sub    esp,0x8
c0009fa0:	68 28 db 01 c0       	push   0xc001db28
c0009fa5:	50                   	push   eax
c0009fa6:	e8 35 67 ff ff       	call   c00006e0 <strcmp>
c0009fab:	83 c4 10             	add    esp,0x10
c0009fae:	85 c0                	test   eax,eax
c0009fb0:	0f 94 c0             	sete   al
c0009fb3:	84 c0                	test   al,al
c0009fb5:	0f 84 87 00 00 00    	je     c000a042 <VAS::VAS(bool)+0x27a>
c0009fbb:	fa                   	cli    
c0009fbc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009fc1:	40                   	inc    eax
c0009fc2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009fc7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fd2:	05 7c 09 00 00       	add    eax,0x97c
c0009fd7:	83 ec 0c             	sub    esp,0xc
c0009fda:	50                   	push   eax
c0009fdb:	e8 d6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fe0:	83 c4 10             	add    esp,0x10
c0009fe3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe8:	89 c3                	mov    ebx,eax
c0009fea:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff5:	05 7c 09 00 00       	add    eax,0x97c
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	50                   	push   eax
c0009ffe:	e8 b3 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a003:	83 c4 10             	add    esp,0x10
c000a006:	83 ec 08             	sub    esp,0x8
c000a009:	50                   	push   eax
c000a00a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a00e:	e8 83 f5 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	8b 00                	mov    eax,DWORD PTR [eax]
c000a018:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a01d:	6a 11                	push   0x11
c000a01f:	53                   	push   ebx
c000a020:	50                   	push   eax
c000a021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a025:	e8 f0 f8 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a02a:	83 c4 10             	add    esp,0x10
c000a02d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a032:	48                   	dec    eax
c000a033:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a038:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a03d:	85 c0                	test   eax,eax
c000a03f:	75 01                	jne    c000a042 <VAS::VAS(bool)+0x27a>
c000a041:	fb                   	sti    
c000a042:	90                   	nop
c000a043:	83 c4 28             	add    esp,0x28
c000a046:	5b                   	pop    ebx
c000a047:	c3                   	ret    

c000a048 <VAS::evict(unsigned long)>:
c000a048:	55                   	push   ebp
c000a049:	57                   	push   edi
c000a04a:	56                   	push   esi
c000a04b:	53                   	push   ebx
c000a04c:	83 ec 1c             	sub    esp,0x1c
c000a04f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a053:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a05b:	e8 66 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a060:	8b 0d cc f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7cc
c000a066:	89 c7                	mov    edi,eax
c000a068:	85 c9                	test   ecx,ecx
c000a06a:	7e 3e                	jle    c000a0aa <VAS::evict(unsigned long)+0x62>
c000a06c:	89 ee                	mov    esi,ebp
c000a06e:	31 db                	xor    ebx,ebx
c000a070:	83 ec 0c             	sub    esp,0xc
c000a073:	57                   	push   edi
c000a074:	e8 3b f3 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a079:	89 34 24             	mov    DWORD PTR [esp],esi
c000a07c:	01 d8                	add    eax,ebx
c000a07e:	6a 01                	push   0x1
c000a080:	31 d2                	xor    edx,edx
c000a082:	43                   	inc    ebx
c000a083:	52                   	push   edx
c000a084:	81 c6 00 02 00 00    	add    esi,0x200
c000a08a:	50                   	push   eax
c000a08b:	0f be 05 d8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7d8
c000a092:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a099:	52                   	push   edx
c000a09a:	e8 01 2c 00 00       	call   c000cca0 <LogicalDisk::write(unsigned long long, int, void*)>
c000a09f:	83 c4 20             	add    esp,0x20
c000a0a2:	39 1d cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,ebx
c000a0a8:	7f c6                	jg     c000a070 <VAS::evict(unsigned long)+0x28>
c000a0aa:	83 ec 08             	sub    esp,0x8
c000a0ad:	c1 e7 0b             	shl    edi,0xb
c000a0b0:	55                   	push   ebp
c000a0b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b5:	50                   	push   eax
c000a0b6:	e8 db f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a0bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0bd:	89 d1                	mov    ecx,edx
c000a0bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0c5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0cb:	09 cf                	or     edi,ecx
c000a0cd:	89 38                	mov    DWORD PTR [eax],edi
c000a0cf:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0d2:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a0d8:	e8 56 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0dd:	0f 20 d8             	mov    eax,cr3
c000a0e0:	0f 22 d8             	mov    cr3,eax
c000a0e3:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a0e8:	c7 44 24 40 36 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001db36
c000a0f0:	8d 50 01             	lea    edx,[eax+0x1]
c000a0f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0f7:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a0fd:	83 c4 2c             	add    esp,0x2c
c000a100:	5b                   	pop    ebx
c000a101:	5e                   	pop    esi
c000a102:	5f                   	pop    edi
c000a103:	5d                   	pop    ebp
c000a104:	e9 06 04 00 00       	jmp    c000a50f <Dbg::kprintf(char const*, ...)>
c000a109:	90                   	nop

c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a10a:	55                   	push   ebp
c000a10b:	57                   	push   edi
c000a10c:	56                   	push   esi
c000a10d:	53                   	push   ebx
c000a10e:	83 ec 14             	sub    esp,0x14
c000a111:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a115:	53                   	push   ebx
c000a116:	68 47 db 01 c0       	push   0xc001db47
c000a11b:	e8 ef 03 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a129:	74 21                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a12b:	83 ec 08             	sub    esp,0x8
c000a12e:	53                   	push   ebx
c000a12f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a133:	57                   	push   edi
c000a134:	e8 5d f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 c6                	mov    esi,eax
c000a13e:	85 c0                	test   eax,eax
c000a140:	74 0a                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a142:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a144:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a14a:	74 0a                	je     c000a156 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a14c:	31 c0                	xor    eax,eax
c000a14e:	83 c4 0c             	add    esp,0xc
c000a151:	5b                   	pop    ebx
c000a152:	5e                   	pop    esi
c000a153:	5f                   	pop    edi
c000a154:	5d                   	pop    ebp
c000a155:	c3                   	ret    
c000a156:	e8 3a d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a15b:	c1 ed 0b             	shr    ebp,0xb
c000a15e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a160:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a166:	09 c2                	or     edx,eax
c000a168:	81 ca 01 08 00 00    	or     edx,0x801
c000a16e:	89 16                	mov    DWORD PTR [esi],edx
c000a170:	8b 35 cc f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7cc
c000a176:	85 f6                	test   esi,esi
c000a178:	7e 3e                	jle    c000a1b8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a17a:	89 df                	mov    edi,ebx
c000a17c:	31 f6                	xor    esi,esi
c000a17e:	83 ec 0c             	sub    esp,0xc
c000a181:	55                   	push   ebp
c000a182:	e8 2d f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a187:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a18a:	01 f0                	add    eax,esi
c000a18c:	6a 01                	push   0x1
c000a18e:	31 d2                	xor    edx,edx
c000a190:	46                   	inc    esi
c000a191:	52                   	push   edx
c000a192:	81 c7 00 02 00 00    	add    edi,0x200
c000a198:	50                   	push   eax
c000a199:	0f be 05 d8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7d8
c000a1a0:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1a7:	51                   	push   ecx
c000a1a8:	e8 87 2a 00 00       	call   c000cc34 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1ad:	83 c4 20             	add    esp,0x20
c000a1b0:	39 35 cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,esi
c000a1b6:	7f c6                	jg     c000a17e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1b8:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a1bd:	48                   	dec    eax
c000a1be:	52                   	push   edx
c000a1bf:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a1c4:	50                   	push   eax
c000a1c5:	53                   	push   ebx
c000a1c6:	68 5a db 01 c0       	push   0xc001db5a
c000a1cb:	e8 3f 03 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a1d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1d3:	e8 be f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a1d8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a1dd:	83 c4 10             	add    esp,0x10
c000a1e0:	48                   	dec    eax
c000a1e1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a1e6:	85 c0                	test   eax,eax
c000a1e8:	75 01                	jne    c000a1eb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1ea:	fb                   	sti    
c000a1eb:	0f 20 d8             	mov    eax,cr3
c000a1ee:	0f 22 d8             	mov    cr3,eax
c000a1f1:	b0 01                	mov    al,0x1
c000a1f3:	e9 56 ff ff ff       	jmp    c000a14e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1f8 <VAS::scanForEviction()>:
c000a1f8:	57                   	push   edi
c000a1f9:	31 ff                	xor    edi,edi
c000a1fb:	56                   	push   esi
c000a1fc:	53                   	push   ebx
c000a1fd:	83 ec 10             	sub    esp,0x10
c000a200:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a204:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a207:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a20d:	75 0e                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a20f:	89 da                	mov    edx,ebx
c000a211:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a214:	c1 ea 16             	shr    edx,0x16
c000a217:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a21b:	74 4e                	je     c000a26b <VAS::scanForEviction()+0x73>
c000a21d:	53                   	push   ebx
c000a21e:	56                   	push   esi
c000a21f:	e8 72 f3 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a224:	5a                   	pop    edx
c000a225:	8b 10                	mov    edx,DWORD PTR [eax]
c000a227:	59                   	pop    ecx
c000a228:	89 d1                	mov    ecx,edx
c000a22a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a230:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a236:	74 3e                	je     c000a276 <VAS::scanForEviction()+0x7e>
c000a238:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a23e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a244:	76 2b                	jbe    c000a271 <VAS::scanForEviction()+0x79>
c000a246:	47                   	inc    edi
c000a247:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a24e:	83 ff 03             	cmp    edi,0x3
c000a251:	74 32                	je     c000a285 <VAS::scanForEviction()+0x8d>
c000a253:	31 db                	xor    ebx,ebx
c000a255:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a25b:	75 c0                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a25d:	89 da                	mov    edx,ebx
c000a25f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a262:	c1 ea 16             	shr    edx,0x16
c000a265:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a269:	75 b2                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a26b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a271:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a274:	eb 91                	jmp    c000a207 <VAS::scanForEviction()+0xf>
c000a276:	f6 c2 20             	test   dl,0x20
c000a279:	74 13                	je     c000a28e <VAS::scanForEviction()+0x96>
c000a27b:	83 e2 df             	and    edx,0xffffffdf
c000a27e:	89 10                	mov    DWORD PTR [eax],edx
c000a280:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a283:	eb b3                	jmp    c000a238 <VAS::scanForEviction()+0x40>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	31 c0                	xor    eax,eax
c000a28a:	5b                   	pop    ebx
c000a28b:	5e                   	pop    esi
c000a28c:	5f                   	pop    edi
c000a28d:	c3                   	ret    
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	89 d0                	mov    eax,edx
c000a293:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a298:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a29c:	53                   	push   ebx
c000a29d:	68 6f db 01 c0       	push   0xc001db6f
c000a2a2:	e8 68 02 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a2a7:	58                   	pop    eax
c000a2a8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2ab:	5a                   	pop    edx
c000a2ac:	51                   	push   ecx
c000a2ad:	56                   	push   esi
c000a2ae:	e8 95 fd ff ff       	call   c000a048 <VAS::evict(unsigned long)>
c000a2b3:	5b                   	pop    ebx
c000a2b4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2b7:	5f                   	pop    edi
c000a2b8:	50                   	push   eax
c000a2b9:	68 83 db 01 c0       	push   0xc001db83
c000a2be:	e8 4c 02 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a2c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d1:	83 c4 10             	add    esp,0x10
c000a2d4:	5b                   	pop    ebx
c000a2d5:	5e                   	pop    esi
c000a2d6:	5f                   	pop    edi
c000a2d7:	c3                   	ret    

c000a2d8 <mapVASFirstTime>:
c000a2d8:	55                   	push   ebp
c000a2d9:	57                   	push   edi
c000a2da:	56                   	push   esi
c000a2db:	53                   	push   ebx
c000a2dc:	83 ec 0c             	sub    esp,0xc
c000a2df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2e7:	4a                   	dec    edx
c000a2e8:	0f 84 c3 00 00 00    	je     c000a3b1 <mapVASFirstTime+0xd9>
c000a2ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2f9:	c1 e5 15             	shl    ebp,0x15
c000a2fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a301:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a307:	29 eb                	sub    ebx,ebp
c000a309:	29 ef                	sub    edi,ebp
c000a30b:	e8 85 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a310:	83 ec 0c             	sub    esp,0xc
c000a313:	68 03 04 00 00       	push   0x403
c000a318:	6a 01                	push   0x1
c000a31a:	53                   	push   ebx
c000a31b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a321:	50                   	push   eax
c000a322:	56                   	push   esi
c000a323:	e8 ec f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a328:	83 c4 20             	add    esp,0x20
c000a32b:	39 fb                	cmp    ebx,edi
c000a32d:	75 dc                	jne    c000a30b <mapVASFirstTime+0x33>
c000a32f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a334:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a339:	29 eb                	sub    ebx,ebp
c000a33b:	29 ef                	sub    edi,ebp
c000a33d:	e8 53 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a342:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a346:	19 d2                	sbb    edx,edx
c000a348:	83 ec 0c             	sub    esp,0xc
c000a34b:	83 e2 04             	and    edx,0x4
c000a34e:	81 c2 03 04 00 00    	add    edx,0x403
c000a354:	52                   	push   edx
c000a355:	6a 01                	push   0x1
c000a357:	53                   	push   ebx
c000a358:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a35e:	50                   	push   eax
c000a35f:	56                   	push   esi
c000a360:	e8 af f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a365:	83 c4 20             	add    esp,0x20
c000a368:	39 df                	cmp    edi,ebx
c000a36a:	75 d1                	jne    c000a33d <mapVASFirstTime+0x65>
c000a36c:	bb 7d 00 02 c0       	mov    ebx,0xc002007d
c000a371:	50                   	push   eax
c000a372:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a378:	c1 eb 0c             	shr    ebx,0xc
c000a37b:	53                   	push   ebx
c000a37c:	68 00 00 02 c0       	push   0xc0020000
c000a381:	68 84 da 01 c0       	push   0xc001da84
c000a386:	e8 84 01 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a38b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000a392:	6a fd                	push   0xfffffffd
c000a394:	53                   	push   ebx
c000a395:	68 00 00 02 c0       	push   0xc0020000
c000a39a:	56                   	push   esi
c000a39b:	e8 78 f3 ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c000a3a0:	0f 20 d8             	mov    eax,cr3
c000a3a3:	0f 22 d8             	mov    cr3,eax
c000a3a6:	83 c4 20             	add    esp,0x20
c000a3a9:	83 c4 0c             	add    esp,0xc
c000a3ac:	5b                   	pop    ebx
c000a3ad:	5e                   	pop    esi
c000a3ae:	5f                   	pop    edi
c000a3af:	5d                   	pop    ebp
c000a3b0:	c3                   	ret    
c000a3b1:	83 ec 0c             	sub    esp,0xc
c000a3b4:	68 96 db 01 c0       	push   0xc001db96
c000a3b9:	e8 51 01 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a3be:	83 c4 10             	add    esp,0x10
c000a3c1:	83 c4 0c             	add    esp,0xc
c000a3c4:	5b                   	pop    ebx
c000a3c5:	5e                   	pop    esi
c000a3c6:	5f                   	pop    edi
c000a3c7:	5d                   	pop    ebp
c000a3c8:	c3                   	ret    

c000a3c9 <__cxa_atexit>:
c000a3c9:	31 c0                	xor    eax,eax
c000a3cb:	c3                   	ret    

c000a3cc <__cxa_finalize>:
c000a3cc:	c3                   	ret    

c000a3cd <__stack_chk_fail>:
c000a3cd:	55                   	push   ebp
c000a3ce:	89 e5                	mov    ebp,esp
c000a3d0:	83 ec 10             	sub    esp,0x10
c000a3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3d6:	68 af db 01 c0       	push   0xc001dbaf
c000a3db:	e8 2f 01 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a3e0:	58                   	pop    eax
c000a3e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e4:	5a                   	pop    edx
c000a3e5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3e8:	68 af db 01 c0       	push   0xc001dbaf
c000a3ed:	e8 1d 01 00 00       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000a3f2:	c7 04 24 b7 db 01 c0 	mov    DWORD PTR [esp],0xc001dbb7
c000a3f9:	e8 91 5d 00 00       	call   c001018f <KePanic(char const*)>
c000a3fe:	83 c4 10             	add    esp,0x10
c000a401:	c9                   	leave  
c000a402:	c3                   	ret    

c000a403 <__cxa_pure_virtual>:
c000a403:	83 ec 18             	sub    esp,0x18
c000a406:	68 cf db 01 c0       	push   0xc001dbcf
c000a40b:	e8 7f 5d 00 00       	call   c001018f <KePanic(char const*)>
c000a410:	83 c4 1c             	add    esp,0x1c
c000a413:	c3                   	ret    

c000a414 <operator new[](unsigned long)>:
c000a414:	e9 a0 d3 ff ff       	jmp    c00077b9 <malloc>

c000a419 <operator delete(void*, unsigned long)>:
c000a419:	e9 bb d3 ff ff       	jmp    c00077d9 <rfree>

c000a41e <operator delete[](void*)>:
c000a41e:	e9 b6 d3 ff ff       	jmp    c00077d9 <rfree>

c000a423 <operator delete[](void*, unsigned long)>:
c000a423:	e9 b1 d3 ff ff       	jmp    c00077d9 <rfree>

c000a428 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a428:	55                   	push   ebp
c000a429:	b9 04 00 00 00       	mov    ecx,0x4
c000a42e:	57                   	push   edi
c000a42f:	56                   	push   esi
c000a430:	be b3 d7 01 c0       	mov    esi,0xc001d7b3
c000a435:	53                   	push   ebx
c000a436:	83 ec 20             	sub    esp,0x20
c000a439:	a1 b2 d7 01 c0       	mov    eax,ds:0xc001d7b2
c000a43e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a442:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a446:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a44a:	a1 bf d7 01 c0       	mov    eax,ds:0xc001d7bf
c000a44f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a457:	fc                   	cld    
c000a458:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a45a:	89 ee                	mov    esi,ebp
c000a45c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a460:	eb 02                	jmp    c000a464 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a462:	89 c6                	mov    esi,eax
c000a464:	31 d2                	xor    edx,edx
c000a466:	41                   	inc    ecx
c000a467:	89 f0                	mov    eax,esi
c000a469:	f7 f3                	div    ebx
c000a46b:	39 de                	cmp    esi,ebx
c000a46d:	73 f3                	jae    c000a462 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a46f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a472:	eb 02                	jmp    c000a476 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a474:	89 c5                	mov    ebp,eax
c000a476:	31 d2                	xor    edx,edx
c000a478:	49                   	dec    ecx
c000a479:	89 e8                	mov    eax,ebp
c000a47b:	f7 f3                	div    ebx
c000a47d:	39 dd                	cmp    ebp,ebx
c000a47f:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a483:	88 11                	mov    BYTE PTR [ecx],dl
c000a485:	73 ed                	jae    c000a474 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a48b:	83 c4 20             	add    esp,0x20
c000a48e:	5b                   	pop    ebx
c000a48f:	5e                   	pop    esi
c000a490:	5f                   	pop    edi
c000a491:	5d                   	pop    ebp
c000a492:	c3                   	ret    

c000a493 <Dbg::logc(char)>:
c000a493:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a497:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a49e:	75 12                	jne    c000a4b2 <Dbg::logc(char)+0x1f>
c000a4a0:	ba fd 03 00 00       	mov    edx,0x3fd
c000a4a5:	ec                   	in     al,dx
c000a4a6:	a8 20                	test   al,0x20
c000a4a8:	74 fb                	je     c000a4a5 <Dbg::logc(char)+0x12>
c000a4aa:	ba f8 03 00 00       	mov    edx,0x3f8
c000a4af:	88 c8                	mov    al,cl
c000a4b1:	ee                   	out    dx,al
c000a4b2:	c3                   	ret    

c000a4b3 <Dbg::logs(char*)>:
c000a4b3:	53                   	push   ebx
c000a4b4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4b8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4bb:	84 c0                	test   al,al
c000a4bd:	74 0f                	je     c000a4ce <Dbg::logs(char*)+0x1b>
c000a4bf:	50                   	push   eax
c000a4c0:	43                   	inc    ebx
c000a4c1:	e8 cd ff ff ff       	call   c000a493 <Dbg::logc(char)>
c000a4c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4c9:	5a                   	pop    edx
c000a4ca:	84 c0                	test   al,al
c000a4cc:	75 f1                	jne    c000a4bf <Dbg::logs(char*)+0xc>
c000a4ce:	5b                   	pop    ebx
c000a4cf:	c3                   	ret    

c000a4d0 <Dbg::logWriteInt(unsigned int)>:
c000a4d0:	83 ec 10             	sub    esp,0x10
c000a4d3:	6a 0a                	push   0xa
c000a4d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4d9:	50                   	push   eax
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	50                   	push   eax
c000a4df:	e8 44 ff ff ff       	call   c000a428 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4e4:	50                   	push   eax
c000a4e5:	e8 c9 ff ff ff       	call   c000a4b3 <Dbg::logs(char*)>
c000a4ea:	83 c4 20             	add    esp,0x20
c000a4ed:	c3                   	ret    

c000a4ee <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4ee:	83 ec 10             	sub    esp,0x10
c000a4f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4f5:	50                   	push   eax
c000a4f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4fa:	50                   	push   eax
c000a4fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4ff:	52                   	push   edx
c000a500:	e8 23 ff ff ff       	call   c000a428 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a505:	50                   	push   eax
c000a506:	e8 a8 ff ff ff       	call   c000a4b3 <Dbg::logs(char*)>
c000a50b:	83 c4 20             	add    esp,0x20
c000a50e:	c3                   	ret    

c000a50f <Dbg::kprintf(char const*, ...)>:
c000a50f:	55                   	push   ebp
c000a510:	57                   	push   edi
c000a511:	56                   	push   esi
c000a512:	53                   	push   ebx
c000a513:	83 ec 0c             	sub    esp,0xc
c000a516:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a51a:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a521:	74 08                	je     c000a52b <Dbg::kprintf(char const*, ...)+0x1c>
c000a523:	83 c4 0c             	add    esp,0xc
c000a526:	5b                   	pop    ebx
c000a527:	5e                   	pop    esi
c000a528:	5f                   	pop    edi
c000a529:	5d                   	pop    ebp
c000a52a:	c3                   	ret    
c000a52b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a52f:	31 ff                	xor    edi,edi
c000a531:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a535:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a538:	84 c0                	test   al,al
c000a53a:	74 e7                	je     c000a523 <Dbg::kprintf(char const*, ...)+0x14>
c000a53c:	8d 77 01             	lea    esi,[edi+0x1]
c000a53f:	3c 25                	cmp    al,0x25
c000a541:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a544:	75 47                	jne    c000a58d <Dbg::kprintf(char const*, ...)+0x7e>
c000a546:	83 c7 02             	add    edi,0x2
c000a549:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a54c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a54f:	83 e8 25             	sub    eax,0x25
c000a552:	3c 53                	cmp    al,0x53
c000a554:	0f 87 d2 00 00 00    	ja     c000a62c <Dbg::kprintf(char const*, ...)+0x11d>
c000a55a:	25 ff 00 00 00       	and    eax,0xff
c000a55f:	ff 24 85 e4 db 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe241c]
c000a566:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a56a:	89 c8                	mov    eax,ecx
c000a56c:	83 c1 04             	add    ecx,0x4
c000a56f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a573:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a575:	55                   	push   ebp
c000a576:	e8 55 ff ff ff       	call   c000a4d0 <Dbg::logWriteInt(unsigned int)>
c000a57b:	58                   	pop    eax
c000a57c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a57f:	84 c0                	test   al,al
c000a581:	74 a0                	je     c000a523 <Dbg::kprintf(char const*, ...)+0x14>
c000a583:	8d 77 01             	lea    esi,[edi+0x1]
c000a586:	3c 25                	cmp    al,0x25
c000a588:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a58b:	74 b9                	je     c000a546 <Dbg::kprintf(char const*, ...)+0x37>
c000a58d:	50                   	push   eax
c000a58e:	89 f7                	mov    edi,esi
c000a590:	e8 fe fe ff ff       	call   c000a493 <Dbg::logc(char)>
c000a595:	89 ee                	mov    esi,ebp
c000a597:	58                   	pop    eax
c000a598:	eb e2                	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>
c000a59a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a59e:	89 c8                	mov    eax,ecx
c000a5a0:	83 c1 04             	add    ecx,0x4
c000a5a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5a9:	50                   	push   eax
c000a5aa:	e8 04 ff ff ff       	call   c000a4b3 <Dbg::logs(char*)>
c000a5af:	58                   	pop    eax
c000a5b0:	eb ca                	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>
c000a5b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5b6:	89 d0                	mov    eax,edx
c000a5b8:	83 c2 04             	add    edx,0x4
c000a5bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c1:	50                   	push   eax
c000a5c2:	e8 09 ff ff ff       	call   c000a4d0 <Dbg::logWriteInt(unsigned int)>
c000a5c7:	58                   	pop    eax
c000a5c8:	eb b2                	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	83 c2 04             	add    edx,0x4
c000a5d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5da:	50                   	push   eax
c000a5db:	e8 b3 fe ff ff       	call   c000a493 <Dbg::logc(char)>
c000a5e0:	58                   	pop    eax
c000a5e1:	eb 99                	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>
c000a5e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5e7:	89 c8                	mov    eax,ecx
c000a5e9:	83 c1 04             	add    ecx,0x4
c000a5ec:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5f0:	6a 10                	push   0x10
c000a5f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5f4:	51                   	push   ecx
c000a5f5:	e8 f4 fe ff ff       	call   c000a4ee <Dbg::logWriteIntBase(unsigned int, int)>
c000a5fa:	5d                   	pop    ebp
c000a5fb:	58                   	pop    eax
c000a5fc:	e9 7b ff ff ff       	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>
c000a601:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a605:	89 d0                	mov    eax,edx
c000a607:	83 c2 08             	add    edx,0x8
c000a60a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a60e:	6a 10                	push   0x10
c000a610:	8b 00                	mov    eax,DWORD PTR [eax]
c000a612:	50                   	push   eax
c000a613:	e8 d6 fe ff ff       	call   c000a4ee <Dbg::logWriteIntBase(unsigned int, int)>
c000a618:	58                   	pop    eax
c000a619:	5a                   	pop    edx
c000a61a:	e9 5d ff ff ff       	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>
c000a61f:	6a 25                	push   0x25
c000a621:	e8 6d fe ff ff       	call   c000a493 <Dbg::logc(char)>
c000a626:	5a                   	pop    edx
c000a627:	e9 50 ff ff ff       	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>
c000a62c:	6a 25                	push   0x25
c000a62e:	e8 60 fe ff ff       	call   c000a493 <Dbg::logc(char)>
c000a633:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a637:	50                   	push   eax
c000a638:	e8 56 fe ff ff       	call   c000a493 <Dbg::logc(char)>
c000a63d:	5a                   	pop    edx
c000a63e:	59                   	pop    ecx
c000a63f:	e9 38 ff ff ff       	jmp    c000a57c <Dbg::kprintf(char const*, ...)+0x6d>

c000a644 <File::read(unsigned long long, void*, int*)>:
c000a644:	53                   	push   ebx
c000a645:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a64d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a654:	3c 19                	cmp    al,0x19
c000a656:	77 35                	ja     c000a68d <File::read(unsigned long long, void*, int*)+0x49>
c000a658:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a65f:	85 c0                	test   eax,eax
c000a661:	74 2a                	je     c000a68d <File::read(unsigned long long, void*, int*)+0x49>
c000a663:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a669:	85 c0                	test   eax,eax
c000a66b:	74 20                	je     c000a68d <File::read(unsigned long long, void*, int*)+0x49>
c000a66d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a671:	74 21                	je     c000a694 <File::read(unsigned long long, void*, int*)+0x50>
c000a673:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a675:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a679:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a67f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a683:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a687:	5b                   	pop    ebx
c000a688:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a68b:	ff e0                	jmp    eax
c000a68d:	b8 0b 00 00 00       	mov    eax,0xb
c000a692:	eb 05                	jmp    c000a699 <File::read(unsigned long long, void*, int*)+0x55>
c000a694:	b8 05 00 00 00       	mov    eax,0x5
c000a699:	5b                   	pop    ebx
c000a69a:	c3                   	ret    
c000a69b:	90                   	nop

c000a69c <File::write(unsigned long long, void*, int*)>:
c000a69c:	53                   	push   ebx
c000a69d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ac:	3c 19                	cmp    al,0x19
c000a6ae:	77 35                	ja     c000a6e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a6b0:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6b7:	85 c0                	test   eax,eax
c000a6b9:	74 2a                	je     c000a6e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a6bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6c1:	85 c0                	test   eax,eax
c000a6c3:	74 20                	je     c000a6e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a6c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6c9:	74 21                	je     c000a6ec <File::write(unsigned long long, void*, int*)+0x50>
c000a6cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6df:	5b                   	pop    ebx
c000a6e0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6e3:	ff e0                	jmp    eax
c000a6e5:	b8 0b 00 00 00       	mov    eax,0xb
c000a6ea:	eb 05                	jmp    c000a6f1 <File::write(unsigned long long, void*, int*)+0x55>
c000a6ec:	b8 05 00 00 00       	mov    eax,0x5
c000a6f1:	5b                   	pop    ebx
c000a6f2:	c3                   	ret    
c000a6f3:	90                   	nop

c000a6f4 <Directory::read(unsigned long long, void*, int*)>:
c000a6f4:	53                   	push   ebx
c000a6f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a704:	3c 19                	cmp    al,0x19
c000a706:	77 35                	ja     c000a73d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a708:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a70f:	85 c0                	test   eax,eax
c000a711:	74 2a                	je     c000a73d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a713:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a719:	85 c0                	test   eax,eax
c000a71b:	74 20                	je     c000a73d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a71d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a721:	74 21                	je     c000a744 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a723:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a725:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a729:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a72f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a733:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a737:	5b                   	pop    ebx
c000a738:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a73b:	ff e0                	jmp    eax
c000a73d:	b8 0b 00 00 00       	mov    eax,0xb
c000a742:	eb 05                	jmp    c000a749 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a744:	b8 05 00 00 00       	mov    eax,0x5
c000a749:	5b                   	pop    ebx
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Directory::write(unsigned long long, void*, int*)>:
c000a74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a750:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a757:	b8 0b 00 00 00       	mov    eax,0xb
c000a75c:	80 fa 19             	cmp    dl,0x19
c000a75f:	77 18                	ja     c000a779 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a761:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a768:	85 d2                	test   edx,edx
c000a76a:	74 0d                	je     c000a779 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a76c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a773:	19 c0                	sbb    eax,eax
c000a775:	83 e0 0a             	and    eax,0xa
c000a778:	40                   	inc    eax
c000a779:	c3                   	ret    

c000a77a <File::isAtty()>:
c000a77a:	31 c0                	xor    eax,eax
c000a77c:	c3                   	ret    
c000a77d:	90                   	nop

c000a77e <Directory::isAtty()>:
c000a77e:	31 c0                	xor    eax,eax
c000a780:	c3                   	ret    
c000a781:	90                   	nop

c000a782 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a782:	b8 0a 00 00 00       	mov    eax,0xa
c000a787:	c3                   	ret    

c000a788 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a788:	b8 0a 00 00 00       	mov    eax,0xa
c000a78d:	c3                   	ret    

c000a78e <Filesystem::allocateSwapfile(char const*, int)>:
c000a78e:	31 c0                	xor    eax,eax
c000a790:	31 d2                	xor    edx,edx
c000a792:	c3                   	ret    
c000a793:	90                   	nop

c000a794 <File::~File()>:
c000a794:	83 ec 0c             	sub    esp,0xc
c000a797:	ba a4 dd 01 c0       	mov    edx,0xc001dda4
c000a79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7a0:	89 10                	mov    DWORD PTR [eax],edx
c000a7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7a6:	83 ec 0c             	sub    esp,0xc
c000a7a9:	50                   	push   eax
c000a7aa:	e8 75 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	90                   	nop
c000a7b3:	83 c4 0c             	add    esp,0xc
c000a7b6:	c3                   	ret    
c000a7b7:	90                   	nop

c000a7b8 <File::~File()>:
c000a7b8:	83 ec 0c             	sub    esp,0xc
c000a7bb:	83 ec 0c             	sub    esp,0xc
c000a7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7c2:	e8 cd ff ff ff       	call   c000a794 <File::~File()>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	83 ec 08             	sub    esp,0x8
c000a7cd:	68 14 01 00 00       	push   0x114
c000a7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7d6:	e8 3e fc ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000a7db:	83 c4 10             	add    esp,0x10
c000a7de:	83 c4 0c             	add    esp,0xc
c000a7e1:	c3                   	ret    

c000a7e2 <Directory::~Directory()>:
c000a7e2:	83 ec 0c             	sub    esp,0xc
c000a7e5:	ba c0 dd 01 c0       	mov    edx,0xc001ddc0
c000a7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ee:	89 10                	mov    DWORD PTR [eax],edx
c000a7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7f4:	83 ec 0c             	sub    esp,0xc
c000a7f7:	50                   	push   eax
c000a7f8:	e8 27 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	90                   	nop
c000a801:	83 c4 0c             	add    esp,0xc
c000a804:	c3                   	ret    
c000a805:	90                   	nop

c000a806 <Directory::~Directory()>:
c000a806:	83 ec 0c             	sub    esp,0xc
c000a809:	83 ec 0c             	sub    esp,0xc
c000a80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a810:	e8 cd ff ff ff       	call   c000a7e2 <Directory::~Directory()>
c000a815:	83 c4 10             	add    esp,0x10
c000a818:	83 ec 08             	sub    esp,0x8
c000a81b:	68 14 01 00 00       	push   0x114
c000a820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a824:	e8 f0 fb ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	83 c4 0c             	add    esp,0xc
c000a82f:	c3                   	ret    

c000a830 <Filesystem::Filesystem()>:
c000a830:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000a835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a839:	89 10                	mov    DWORD PTR [eax],edx
c000a83b:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a845:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a84c:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a851:	90                   	nop
c000a852:	c3                   	ret    
c000a853:	90                   	nop

c000a854 <Filesystem::~Filesystem()>:
c000a854:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000a859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a85d:	89 10                	mov    DWORD PTR [eax],edx
c000a85f:	90                   	nop
c000a860:	c3                   	ret    
c000a861:	90                   	nop

c000a862 <Filesystem::~Filesystem()>:
c000a862:	83 ec 0c             	sub    esp,0xc
c000a865:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a869:	e8 e6 ff ff ff       	call   c000a854 <Filesystem::~Filesystem()>
c000a86e:	83 c4 04             	add    esp,0x4
c000a871:	83 ec 08             	sub    esp,0x8
c000a874:	6a 08                	push   0x8
c000a876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a87a:	e8 9a fb ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000a87f:	83 c4 10             	add    esp,0x10
c000a882:	83 c4 0c             	add    esp,0xc
c000a885:	c3                   	ret    

c000a886 <Fs::getcwd(Process*, char*, int)>:
c000a886:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a88a:	31 c0                	xor    eax,eax
c000a88c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a88f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a893:	7d 15                	jge    c000a8aa <Fs::getcwd(Process*, char*, int)+0x24>
c000a895:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a899:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a8a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a8a3:	84 c9                	test   cl,cl
c000a8a5:	74 06                	je     c000a8ad <Fs::getcwd(Process*, char*, int)+0x27>
c000a8a7:	40                   	inc    eax
c000a8a8:	eb e2                	jmp    c000a88c <Fs::getcwd(Process*, char*, int)+0x6>
c000a8aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8ad:	31 c0                	xor    eax,eax
c000a8af:	c3                   	ret    

c000a8b0 <Fs::initVFS()>:
c000a8b0:	83 ec 18             	sub    esp,0x18
c000a8b3:	6a 08                	push   0x8
c000a8b5:	e8 ff ce ff ff       	call   c00077b9 <malloc>
c000a8ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8bd:	e8 de c7 00 00       	call   c00170a0 <FAT::FAT()>
c000a8c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a8c9:	e8 eb ce ff ff       	call   c00077b9 <malloc>
c000a8ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d1:	e8 26 d5 00 00       	call   c0017dfc <ISO9660::ISO9660()>
c000a8d6:	83 c4 1c             	add    esp,0x1c
c000a8d9:	c3                   	ret    

c000a8da <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8da:	55                   	push   ebp
c000a8db:	57                   	push   edi
c000a8dc:	56                   	push   esi
c000a8dd:	53                   	push   ebx
c000a8de:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8e4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8eb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8f2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8f9:	68 00 04 00 00       	push   0x400
c000a8fe:	6a 00                	push   0x0
c000a900:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a904:	56                   	push   esi
c000a905:	e8 c6 5b ff ff       	call   c00004d0 <memset>
c000a90a:	83 c4 10             	add    esp,0x10
c000a90d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a911:	75 0b                	jne    c000a91e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a913:	50                   	push   eax
c000a914:	50                   	push   eax
c000a915:	57                   	push   edi
c000a916:	56                   	push   esi
c000a917:	e8 e4 5c ff ff       	call   c0000600 <strcpy>
c000a91c:	eb 41                	jmp    c000a95f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a91e:	8a 07                	mov    al,BYTE PTR [edi]
c000a920:	3c 5c                	cmp    al,0x5c
c000a922:	74 04                	je     c000a928 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a924:	3c 2f                	cmp    al,0x2f
c000a926:	75 18                	jne    c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a928:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a92b:	3c 60                	cmp    al,0x60
c000a92d:	7e 03                	jle    c000a932 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a92f:	83 e8 20             	sub    eax,0x20
c000a932:	88 04 24             	mov    BYTE PTR [esp],al
c000a935:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a93c:	50                   	push   eax
c000a93d:	50                   	push   eax
c000a93e:	eb 18                	jmp    c000a958 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a940:	50                   	push   eax
c000a941:	50                   	push   eax
c000a942:	55                   	push   ebp
c000a943:	56                   	push   esi
c000a944:	e8 b7 5c ff ff       	call   c0000600 <strcpy>
c000a949:	5a                   	pop    edx
c000a94a:	59                   	pop    ecx
c000a94b:	68 5a eb 01 c0       	push   0xc001eb5a
c000a950:	56                   	push   esi
c000a951:	e8 6a 5e ff ff       	call   c00007c0 <strcat>
c000a956:	5d                   	pop    ebp
c000a957:	58                   	pop    eax
c000a958:	57                   	push   edi
c000a959:	56                   	push   esi
c000a95a:	e8 61 5e ff ff       	call   c00007c0 <strcat>
c000a95f:	83 c4 10             	add    esp,0x10
c000a962:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a965:	3c 60                	cmp    al,0x60
c000a967:	7e 03                	jle    c000a96c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a969:	83 e8 20             	sub    eax,0x20
c000a96c:	88 04 24             	mov    BYTE PTR [esp],al
c000a96f:	88 03                	mov    BYTE PTR [ebx],al
c000a971:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a978:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a97e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a982:	bf 03 00 00 00       	mov    edi,0x3
c000a987:	b8 03 00 00 00       	mov    eax,0x3
c000a98c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a98f:	84 d2                	test   dl,dl
c000a991:	0f 84 91 00 00 00    	je     c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a997:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a99a:	80 fa 5c             	cmp    dl,0x5c
c000a99d:	74 05                	je     c000a9a4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a99f:	80 fa 2f             	cmp    dl,0x2f
c000a9a2:	75 12                	jne    c000a9b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9a4:	89 c5                	mov    ebp,eax
c000a9a6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9ab:	74 09                	je     c000a9b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9ad:	40                   	inc    eax
c000a9ae:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a9b2:	89 cf                	mov    edi,ecx
c000a9b4:	eb d6                	jmp    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9b6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9bb:	75 5b                	jne    c000aa18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9bd:	80 fa 2e             	cmp    dl,0x2e
c000a9c0:	75 56                	jne    c000aa18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9c2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a9c6:	74 19                	je     c000a9e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a9c8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9cd:	74 53                	je     c000aa22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9cf:	89 f9                	mov    ecx,edi
c000a9d1:	41                   	inc    ecx
c000a9d2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9d5:	80 fa 2f             	cmp    dl,0x2f
c000a9d8:	74 f7                	je     c000a9d1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9da:	80 fa 5c             	cmp    dl,0x5c
c000a9dd:	74 f2                	je     c000a9d1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9df:	eb d1                	jmp    c000a9b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9e6:	74 3a                	je     c000aa22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9e8:	83 f8 03             	cmp    eax,0x3
c000a9eb:	74 c5                	je     c000a9b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ed:	41                   	inc    ecx
c000a9ee:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9f1:	80 fa 2f             	cmp    dl,0x2f
c000a9f4:	74 f7                	je     c000a9ed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9f6:	80 fa 5c             	cmp    dl,0x5c
c000a9f9:	74 f2                	je     c000a9ed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9fb:	48                   	dec    eax
c000a9fc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa00:	75 06                	jne    c000aa08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa06:	eb f3                	jmp    c000a9fb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa08:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa0c:	74 07                	je     c000aa15 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa12:	48                   	dec    eax
c000aa13:	eb f3                	jmp    c000aa08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa15:	40                   	inc    eax
c000aa16:	eb 9a                	jmp    c000a9b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa18:	80 fa 2f             	cmp    dl,0x2f
c000aa1b:	74 95                	je     c000a9b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa1d:	80 fa 5c             	cmp    dl,0x5c
c000aa20:	74 90                	je     c000a9b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa22:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa25:	40                   	inc    eax
c000aa26:	eb 8a                	jmp    c000a9b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa2c:	83 ec 0c             	sub    esp,0xc
c000aa2f:	53                   	push   ebx
c000aa30:	e8 0b 5b ff ff       	call   c0000540 <strlen>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa3d:	75 26                	jne    c000aa65 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa3f:	83 ec 0c             	sub    esp,0xc
c000aa42:	53                   	push   ebx
c000aa43:	e8 f8 5a ff ff       	call   c0000540 <strlen>
c000aa48:	83 c4 10             	add    esp,0x10
c000aa4b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa50:	74 26                	je     c000aa78 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa52:	83 ec 0c             	sub    esp,0xc
c000aa55:	53                   	push   ebx
c000aa56:	e8 e5 5a ff ff       	call   c0000540 <strlen>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa63:	eb c7                	jmp    c000aa2c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa65:	83 ec 0c             	sub    esp,0xc
c000aa68:	53                   	push   ebx
c000aa69:	e8 d2 5a ff ff       	call   c0000540 <strlen>
c000aa6e:	83 c4 10             	add    esp,0x10
c000aa71:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa76:	74 c7                	je     c000aa3f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa78:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa7e:	5b                   	pop    ebx
c000aa7f:	5e                   	pop    esi
c000aa80:	5f                   	pop    edi
c000aa81:	5d                   	pop    ebp
c000aa82:	c3                   	ret    
c000aa83:	90                   	nop

c000aa84 <File::File(char const*, Process*)>:
c000aa84:	83 ec 0c             	sub    esp,0xc
c000aa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8b:	83 ec 08             	sub    esp,0x8
c000aa8e:	6a 00                	push   0x0
c000aa90:	50                   	push   eax
c000aa91:	e8 ac e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aa96:	83 c4 10             	add    esp,0x10
c000aa99:	ba a4 dd 01 c0       	mov    edx,0xc001dda4
c000aa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa2:	89 10                	mov    DWORD PTR [eax],edx
c000aaa4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aaa8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aaae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab2:	83 c0 0d             	add    eax,0xd
c000aab5:	83 ec 04             	sub    esp,0x4
c000aab8:	52                   	push   edx
c000aab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aabd:	50                   	push   eax
c000aabe:	e8 17 fe ff ff       	call   c000a8da <Fs::standardiseFiles(char*, char const*, char const*)>
c000aac3:	83 c4 10             	add    esp,0x10
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aacd:	8d 50 bf             	lea    edx,[eax-0x41]
c000aad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aade:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaec:	25 ff 00 00 00       	and    eax,0xff
c000aaf1:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000aaf8:	85 c0                	test   eax,eax
c000aafa:	74 42                	je     c000ab3e <File::File(char const*, Process*)+0xba>
c000aafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab00:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab06:	25 ff 00 00 00       	and    eax,0xff
c000ab0b:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab12:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab18:	85 c0                	test   eax,eax
c000ab1a:	75 22                	jne    c000ab3e <File::File(char const*, Process*)+0xba>
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab26:	25 ff 00 00 00       	and    eax,0xff
c000ab2b:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab32:	83 ec 0c             	sub    esp,0xc
c000ab35:	50                   	push   eax
c000ab36:	e8 37 20 00 00       	call   c000cb72 <LogicalDisk::mount()>
c000ab3b:	83 c4 10             	add    esp,0x10
c000ab3e:	90                   	nop
c000ab3f:	83 c4 0c             	add    esp,0xc
c000ab42:	c3                   	ret    
c000ab43:	90                   	nop

c000ab44 <File::open(FileOpenMode)>:
c000ab44:	53                   	push   ebx
c000ab45:	b8 0b 00 00 00       	mov    eax,0xb
c000ab4a:	83 ec 08             	sub    esp,0x8
c000ab4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab51:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab58:	80 fa 19             	cmp    dl,0x19
c000ab5b:	77 40                	ja     c000ab9d <File::open(FileOpenMode)+0x59>
c000ab5d:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ab64:	85 d2                	test   edx,edx
c000ab66:	74 35                	je     c000ab9d <File::open(FileOpenMode)+0x59>
c000ab68:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab6e:	85 d2                	test   edx,edx
c000ab70:	74 2b                	je     c000ab9d <File::open(FileOpenMode)+0x59>
c000ab72:	b8 06 00 00 00       	mov    eax,0x6
c000ab77:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab7b:	75 20                	jne    c000ab9d <File::open(FileOpenMode)+0x59>
c000ab7d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab7f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab89:	51                   	push   ecx
c000ab8a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab8d:	51                   	push   ecx
c000ab8e:	52                   	push   edx
c000ab8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab92:	83 c4 10             	add    esp,0x10
c000ab95:	85 c0                	test   eax,eax
c000ab97:	75 04                	jne    c000ab9d <File::open(FileOpenMode)+0x59>
c000ab99:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab9d:	83 c4 08             	add    esp,0x8
c000aba0:	5b                   	pop    ebx
c000aba1:	c3                   	ret    

c000aba2 <File::close()>:
c000aba2:	53                   	push   ebx
c000aba3:	b8 0b 00 00 00       	mov    eax,0xb
c000aba8:	83 ec 08             	sub    esp,0x8
c000abab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abaf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abb6:	80 fa 19             	cmp    dl,0x19
c000abb9:	77 41                	ja     c000abfc <File::close()+0x5a>
c000abbb:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abc2:	85 db                	test   ebx,ebx
c000abc4:	74 36                	je     c000abfc <File::close()+0x5a>
c000abc6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000abcd:	74 2d                	je     c000abfc <File::close()+0x5a>
c000abcf:	b8 05 00 00 00       	mov    eax,0x5
c000abd4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abd8:	74 22                	je     c000abfc <File::close()+0x5a>
c000abda:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abde:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000abe5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abeb:	53                   	push   ebx
c000abec:	53                   	push   ebx
c000abed:	8b 10                	mov    edx,DWORD PTR [eax]
c000abef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abf5:	50                   	push   eax
c000abf6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abf9:	83 c4 10             	add    esp,0x10
c000abfc:	83 c4 08             	add    esp,0x8
c000abff:	5b                   	pop    ebx
c000ac00:	c3                   	ret    
c000ac01:	90                   	nop

c000ac02 <File::seek(unsigned long long)>:
c000ac02:	56                   	push   esi
c000ac03:	53                   	push   ebx
c000ac04:	b8 0b 00 00 00       	mov    eax,0xb
c000ac09:	51                   	push   ecx
c000ac0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac1d:	80 fa 19             	cmp    dl,0x19
c000ac20:	77 31                	ja     c000ac53 <File::seek(unsigned long long)+0x51>
c000ac22:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac29:	85 d2                	test   edx,edx
c000ac2b:	74 26                	je     c000ac53 <File::seek(unsigned long long)+0x51>
c000ac2d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac33:	85 d2                	test   edx,edx
c000ac35:	74 1c                	je     c000ac53 <File::seek(unsigned long long)+0x51>
c000ac37:	b8 05 00 00 00       	mov    eax,0x5
c000ac3c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac40:	74 11                	je     c000ac53 <File::seek(unsigned long long)+0x51>
c000ac42:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac44:	53                   	push   ebx
c000ac45:	51                   	push   ecx
c000ac46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac4c:	52                   	push   edx
c000ac4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	5a                   	pop    edx
c000ac54:	5b                   	pop    ebx
c000ac55:	5e                   	pop    esi
c000ac56:	c3                   	ret    
c000ac57:	90                   	nop

c000ac58 <File::tell(unsigned long long*)>:
c000ac58:	83 ec 0c             	sub    esp,0xc
c000ac5b:	b8 0b 00 00 00       	mov    eax,0xb
c000ac60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac6b:	80 fa 19             	cmp    dl,0x19
c000ac6e:	77 34                	ja     c000aca4 <File::tell(unsigned long long*)+0x4c>
c000ac70:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac77:	85 d2                	test   edx,edx
c000ac79:	74 29                	je     c000aca4 <File::tell(unsigned long long*)+0x4c>
c000ac7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac81:	85 d2                	test   edx,edx
c000ac83:	74 1f                	je     c000aca4 <File::tell(unsigned long long*)+0x4c>
c000ac85:	b8 05 00 00 00       	mov    eax,0x5
c000ac8a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac8e:	74 14                	je     c000aca4 <File::tell(unsigned long long*)+0x4c>
c000ac90:	50                   	push   eax
c000ac91:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac9d:	52                   	push   edx
c000ac9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	83 c4 0c             	add    esp,0xc
c000aca7:	c3                   	ret    

c000aca8 <File::rewind()>:
c000aca8:	83 ec 10             	sub    esp,0x10
c000acab:	6a 00                	push   0x0
c000acad:	6a 00                	push   0x0
c000acaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acb3:	e8 4a ff ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c000acb8:	83 c4 1c             	add    esp,0x1c
c000acbb:	c3                   	ret    

c000acbc <File::unlink()>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	b8 0b 00 00 00       	mov    eax,0xb
c000acc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000accf:	80 f9 19             	cmp    cl,0x19
c000acd2:	77 2f                	ja     c000ad03 <File::unlink()+0x47>
c000acd4:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000acdb:	85 c9                	test   ecx,ecx
c000acdd:	74 24                	je     c000ad03 <File::unlink()+0x47>
c000acdf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ace5:	85 c9                	test   ecx,ecx
c000ace7:	74 1a                	je     c000ad03 <File::unlink()+0x47>
c000ace9:	b8 06 00 00 00       	mov    eax,0x6
c000acee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acf2:	75 0f                	jne    c000ad03 <File::unlink()+0x47>
c000acf4:	83 c2 0d             	add    edx,0xd
c000acf7:	50                   	push   eax
c000acf8:	50                   	push   eax
c000acf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acfb:	52                   	push   edx
c000acfc:	51                   	push   ecx
c000acfd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 c4 0c             	add    esp,0xc
c000ad06:	c3                   	ret    
c000ad07:	90                   	nop

c000ad08 <File::rename(char const*)>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad1b:	80 f9 19             	cmp    cl,0x19
c000ad1e:	77 32                	ja     c000ad52 <File::rename(char const*)+0x4a>
c000ad20:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad27:	85 c9                	test   ecx,ecx
c000ad29:	74 27                	je     c000ad52 <File::rename(char const*)+0x4a>
c000ad2b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad31:	85 c9                	test   ecx,ecx
c000ad33:	74 1d                	je     c000ad52 <File::rename(char const*)+0x4a>
c000ad35:	b8 06 00 00 00       	mov    eax,0x6
c000ad3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad3e:	75 12                	jne    c000ad52 <File::rename(char const*)+0x4a>
c000ad40:	83 c2 0d             	add    edx,0xd
c000ad43:	50                   	push   eax
c000ad44:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad4a:	52                   	push   edx
c000ad4b:	51                   	push   ecx
c000ad4c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad4f:	83 c4 10             	add    esp,0x10
c000ad52:	83 c4 0c             	add    esp,0xc
c000ad55:	c3                   	ret    

c000ad56 <File::chfatattr(unsigned char, unsigned char)>:
c000ad56:	57                   	push   edi
c000ad57:	b8 0b 00 00 00       	mov    eax,0xb
c000ad5c:	56                   	push   esi
c000ad5d:	53                   	push   ebx
c000ad5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad71:	80 f9 19             	cmp    cl,0x19
c000ad74:	77 37                	ja     c000adad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad76:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad7d:	85 c9                	test   ecx,ecx
c000ad7f:	74 2c                	je     c000adad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad87:	85 c9                	test   ecx,ecx
c000ad89:	74 22                	je     c000adad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad8b:	b8 06 00 00 00       	mov    eax,0x6
c000ad90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad94:	75 17                	jne    c000adad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad96:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad98:	89 f0                	mov    eax,esi
c000ad9a:	83 c2 0d             	add    edx,0xd
c000ad9d:	0f b6 f0             	movzx  esi,al
c000ada0:	0f b6 db             	movzx  ebx,bl
c000ada3:	56                   	push   esi
c000ada4:	53                   	push   ebx
c000ada5:	52                   	push   edx
c000ada6:	51                   	push   ecx
c000ada7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000adaa:	83 c4 10             	add    esp,0x10
c000adad:	5b                   	pop    ebx
c000adae:	5e                   	pop    esi
c000adaf:	5f                   	pop    edi
c000adb0:	c3                   	ret    
c000adb1:	90                   	nop

c000adb2 <File::exists()>:
c000adb2:	83 ec 0c             	sub    esp,0xc
c000adb5:	31 c0                	xor    eax,eax
c000adb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adbb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adc2:	80 f9 19             	cmp    cl,0x19
c000adc5:	77 24                	ja     c000adeb <File::exists()+0x39>
c000adc7:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adce:	85 c9                	test   ecx,ecx
c000add0:	74 19                	je     c000adeb <File::exists()+0x39>
c000add2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000add8:	85 c9                	test   ecx,ecx
c000adda:	74 0f                	je     c000adeb <File::exists()+0x39>
c000addc:	83 c2 0d             	add    edx,0xd
c000addf:	50                   	push   eax
c000ade0:	50                   	push   eax
c000ade1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ade3:	52                   	push   edx
c000ade4:	51                   	push   ecx
c000ade5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ade8:	83 c4 10             	add    esp,0x10
c000adeb:	83 c4 0c             	add    esp,0xc
c000adee:	c3                   	ret    
c000adef:	90                   	nop

c000adf0 <File::stat(unsigned long long*, bool*)>:
c000adf0:	56                   	push   esi
c000adf1:	53                   	push   ebx
c000adf2:	50                   	push   eax
c000adf3:	b8 0b 00 00 00       	mov    eax,0xb
c000adf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adfc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae0b:	80 f9 19             	cmp    cl,0x19
c000ae0e:	77 3d                	ja     c000ae4d <File::stat(unsigned long long*, bool*)+0x5d>
c000ae10:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae17:	85 c9                	test   ecx,ecx
c000ae19:	74 32                	je     c000ae4d <File::stat(unsigned long long*, bool*)+0x5d>
c000ae1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae21:	85 c9                	test   ecx,ecx
c000ae23:	74 28                	je     c000ae4d <File::stat(unsigned long long*, bool*)+0x5d>
c000ae25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae2b:	74 13                	je     c000ae40 <File::stat(unsigned long long*, bool*)+0x50>
c000ae2d:	83 ec 04             	sub    esp,0x4
c000ae30:	56                   	push   esi
c000ae31:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae37:	51                   	push   ecx
c000ae38:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae3e:	eb 0a                	jmp    c000ae4a <File::stat(unsigned long long*, bool*)+0x5a>
c000ae40:	53                   	push   ebx
c000ae41:	83 c2 0d             	add    edx,0xd
c000ae44:	56                   	push   esi
c000ae45:	52                   	push   edx
c000ae46:	51                   	push   ecx
c000ae47:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae4a:	83 c4 10             	add    esp,0x10
c000ae4d:	5a                   	pop    edx
c000ae4e:	5b                   	pop    ebx
c000ae4f:	5e                   	pop    esi
c000ae50:	c3                   	ret    

c000ae51 <Fs::setcwd(Process*, char*)>:
c000ae51:	55                   	push   ebp
c000ae52:	57                   	push   edi
c000ae53:	56                   	push   esi
c000ae54:	53                   	push   ebx
c000ae55:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae5b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae62:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae68:	57                   	push   edi
c000ae69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae70:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae74:	56                   	push   esi
c000ae75:	e8 60 fa ff ff       	call   c000a8da <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae7a:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae7d:	e8 be 56 ff ff       	call   c0000540 <strlen>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	83 f8 02             	cmp    eax,0x2
c000ae88:	77 15                	ja     c000ae9f <Fs::setcwd(Process*, char*)+0x4e>
c000ae8a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae8f:	83 eb 41             	sub    ebx,0x41
c000ae92:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000ae99:	85 c0                	test   eax,eax
c000ae9b:	75 1c                	jne    c000aeb9 <Fs::setcwd(Process*, char*)+0x68>
c000ae9d:	eb 2f                	jmp    c000aece <Fs::setcwd(Process*, char*)+0x7d>
c000ae9f:	83 ec 0c             	sub    esp,0xc
c000aea2:	56                   	push   esi
c000aea3:	e8 98 56 ff ff       	call   c0000540 <strlen>
c000aea8:	83 c4 10             	add    esp,0x10
c000aeab:	83 f8 03             	cmp    eax,0x3
c000aeae:	75 57                	jne    c000af07 <Fs::setcwd(Process*, char*)+0xb6>
c000aeb0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aeb5:	75 50                	jne    c000af07 <Fs::setcwd(Process*, char*)+0xb6>
c000aeb7:	eb d1                	jmp    c000ae8a <Fs::setcwd(Process*, char*)+0x39>
c000aeb9:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000aec0:	75 0c                	jne    c000aece <Fs::setcwd(Process*, char*)+0x7d>
c000aec2:	83 ec 0c             	sub    esp,0xc
c000aec5:	50                   	push   eax
c000aec6:	e8 a7 1c 00 00       	call   c000cb72 <LogicalDisk::mount()>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	b8 03 00 00 00       	mov    eax,0x3
c000aed3:	83 fb 19             	cmp    ebx,0x19
c000aed6:	0f 87 c6 00 00 00    	ja     c000afa2 <Fs::setcwd(Process*, char*)+0x151>
c000aedc:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000aee3:	b8 05 00 00 00       	mov    eax,0x5
c000aee8:	85 d2                	test   edx,edx
c000aeea:	0f 84 b2 00 00 00    	je     c000afa2 <Fs::setcwd(Process*, char*)+0x151>
c000aef0:	b8 06 00 00 00       	mov    eax,0x6
c000aef5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aefc:	0f 85 92 00 00 00    	jne    c000af94 <Fs::setcwd(Process*, char*)+0x143>
c000af02:	e9 9b 00 00 00       	jmp    c000afa2 <Fs::setcwd(Process*, char*)+0x151>
c000af07:	83 ec 0c             	sub    esp,0xc
c000af0a:	68 14 01 00 00       	push   0x114
c000af0f:	e8 a5 c8 ff ff       	call   c00077b9 <malloc>
c000af14:	83 c4 0c             	add    esp,0xc
c000af17:	89 c3                	mov    ebx,eax
c000af19:	55                   	push   ebp
c000af1a:	56                   	push   esi
c000af1b:	50                   	push   eax
c000af1c:	e8 63 fb ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c000af21:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af26:	83 c4 0c             	add    esp,0xc
c000af29:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af2d:	50                   	push   eax
c000af2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af32:	50                   	push   eax
c000af33:	53                   	push   ebx
c000af34:	e8 b7 fe ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c000af39:	83 c4 10             	add    esp,0x10
c000af3c:	83 f8 02             	cmp    eax,0x2
c000af3f:	74 04                	je     c000af45 <Fs::setcwd(Process*, char*)+0xf4>
c000af41:	85 c0                	test   eax,eax
c000af43:	74 1c                	je     c000af61 <Fs::setcwd(Process*, char*)+0x110>
c000af45:	b8 01 00 00 00       	mov    eax,0x1
c000af4a:	85 db                	test   ebx,ebx
c000af4c:	74 54                	je     c000afa2 <Fs::setcwd(Process*, char*)+0x151>
c000af4e:	83 ec 0c             	sub    esp,0xc
c000af51:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af53:	53                   	push   ebx
c000af54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af57:	83 c4 10             	add    esp,0x10
c000af5a:	b8 01 00 00 00       	mov    eax,0x1
c000af5f:	eb 41                	jmp    c000afa2 <Fs::setcwd(Process*, char*)+0x151>
c000af61:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af66:	75 1c                	jne    c000af84 <Fs::setcwd(Process*, char*)+0x133>
c000af68:	b8 02 00 00 00       	mov    eax,0x2
c000af6d:	85 db                	test   ebx,ebx
c000af6f:	74 31                	je     c000afa2 <Fs::setcwd(Process*, char*)+0x151>
c000af71:	83 ec 0c             	sub    esp,0xc
c000af74:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af76:	53                   	push   ebx
c000af77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af7a:	83 c4 10             	add    esp,0x10
c000af7d:	b8 02 00 00 00       	mov    eax,0x2
c000af82:	eb 1e                	jmp    c000afa2 <Fs::setcwd(Process*, char*)+0x151>
c000af84:	85 db                	test   ebx,ebx
c000af86:	74 0c                	je     c000af94 <Fs::setcwd(Process*, char*)+0x143>
c000af88:	83 ec 0c             	sub    esp,0xc
c000af8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af8d:	53                   	push   ebx
c000af8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	50                   	push   eax
c000af95:	50                   	push   eax
c000af96:	56                   	push   esi
c000af97:	57                   	push   edi
c000af98:	e8 63 56 ff ff       	call   c0000600 <strcpy>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	31 c0                	xor    eax,eax
c000afa2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000afa8:	5b                   	pop    ebx
c000afa9:	5e                   	pop    esi
c000afaa:	5f                   	pop    edi
c000afab:	5d                   	pop    ebp
c000afac:	c3                   	ret    
c000afad:	90                   	nop

c000afae <Directory::Directory(char const*, Process*)>:
c000afae:	83 ec 0c             	sub    esp,0xc
c000afb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb5:	83 ec 08             	sub    esp,0x8
c000afb8:	6a 00                	push   0x0
c000afba:	50                   	push   eax
c000afbb:	e8 82 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000afc0:	83 c4 10             	add    esp,0x10
c000afc3:	ba c0 dd 01 c0       	mov    edx,0xc001ddc0
c000afc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afcc:	89 10                	mov    DWORD PTR [eax],edx
c000afce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000afd2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdc:	83 c0 0d             	add    eax,0xd
c000afdf:	83 ec 04             	sub    esp,0x4
c000afe2:	52                   	push   edx
c000afe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe7:	50                   	push   eax
c000afe8:	e8 ed f8 ff ff       	call   c000a8da <Fs::standardiseFiles(char*, char const*, char const*)>
c000afed:	83 c4 10             	add    esp,0x10
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aff7:	8d 50 bf             	lea    edx,[eax-0x41]
c000affa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b008:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b010:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b016:	25 ff 00 00 00       	and    eax,0xff
c000b01b:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b022:	85 c0                	test   eax,eax
c000b024:	74 42                	je     c000b068 <Directory::Directory(char const*, Process*)+0xba>
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b030:	25 ff 00 00 00       	and    eax,0xff
c000b035:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b03c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b042:	85 c0                	test   eax,eax
c000b044:	75 22                	jne    c000b068 <Directory::Directory(char const*, Process*)+0xba>
c000b046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b050:	25 ff 00 00 00       	and    eax,0xff
c000b055:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	50                   	push   eax
c000b060:	e8 0d 1b 00 00       	call   c000cb72 <LogicalDisk::mount()>
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	90                   	nop
c000b069:	83 c4 0c             	add    esp,0xc
c000b06c:	c3                   	ret    
c000b06d:	90                   	nop

c000b06e <Directory::open()>:
c000b06e:	53                   	push   ebx
c000b06f:	b8 0b 00 00 00       	mov    eax,0xb
c000b074:	83 ec 08             	sub    esp,0x8
c000b077:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b07b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b082:	80 fa 19             	cmp    dl,0x19
c000b085:	77 3d                	ja     c000b0c4 <Directory::open()+0x56>
c000b087:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b08e:	85 d2                	test   edx,edx
c000b090:	74 32                	je     c000b0c4 <Directory::open()+0x56>
c000b092:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b098:	85 d2                	test   edx,edx
c000b09a:	74 28                	je     c000b0c4 <Directory::open()+0x56>
c000b09c:	b8 06 00 00 00       	mov    eax,0x6
c000b0a1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0a5:	75 1d                	jne    c000b0c4 <Directory::open()+0x56>
c000b0a7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0ad:	50                   	push   eax
c000b0ae:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0b0:	51                   	push   ecx
c000b0b1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0b4:	51                   	push   ecx
c000b0b5:	52                   	push   edx
c000b0b6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b0b9:	83 c4 10             	add    esp,0x10
c000b0bc:	85 c0                	test   eax,eax
c000b0be:	75 04                	jne    c000b0c4 <Directory::open()+0x56>
c000b0c0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b0c4:	83 c4 08             	add    esp,0x8
c000b0c7:	5b                   	pop    ebx
c000b0c8:	c3                   	ret    
c000b0c9:	90                   	nop

c000b0ca <Directory::close()>:
c000b0ca:	53                   	push   ebx
c000b0cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b0d0:	83 ec 08             	sub    esp,0x8
c000b0d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0d7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0de:	80 fa 19             	cmp    dl,0x19
c000b0e1:	77 41                	ja     c000b124 <Directory::close()+0x5a>
c000b0e3:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b0ea:	85 db                	test   ebx,ebx
c000b0ec:	74 36                	je     c000b124 <Directory::close()+0x5a>
c000b0ee:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0f5:	74 2d                	je     c000b124 <Directory::close()+0x5a>
c000b0f7:	b8 05 00 00 00       	mov    eax,0x5
c000b0fc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b100:	74 22                	je     c000b124 <Directory::close()+0x5a>
c000b102:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b106:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b10d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b113:	53                   	push   ebx
c000b114:	53                   	push   ebx
c000b115:	8b 10                	mov    edx,DWORD PTR [eax]
c000b117:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b11d:	50                   	push   eax
c000b11e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b121:	83 c4 10             	add    esp,0x10
c000b124:	83 c4 08             	add    esp,0x8
c000b127:	5b                   	pop    ebx
c000b128:	c3                   	ret    
c000b129:	90                   	nop

c000b12a <Directory::unlink()>:
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	b8 0b 00 00 00       	mov    eax,0xb
c000b132:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b136:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b13d:	80 f9 19             	cmp    cl,0x19
c000b140:	77 2f                	ja     c000b171 <Directory::unlink()+0x47>
c000b142:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b149:	85 c9                	test   ecx,ecx
c000b14b:	74 24                	je     c000b171 <Directory::unlink()+0x47>
c000b14d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b153:	85 c9                	test   ecx,ecx
c000b155:	74 1a                	je     c000b171 <Directory::unlink()+0x47>
c000b157:	b8 06 00 00 00       	mov    eax,0x6
c000b15c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b160:	75 0f                	jne    c000b171 <Directory::unlink()+0x47>
c000b162:	83 c2 0d             	add    edx,0xd
c000b165:	50                   	push   eax
c000b166:	50                   	push   eax
c000b167:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b169:	52                   	push   edx
c000b16a:	51                   	push   ecx
c000b16b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b16e:	83 c4 10             	add    esp,0x10
c000b171:	83 c4 0c             	add    esp,0xc
c000b174:	c3                   	ret    
c000b175:	90                   	nop

c000b176 <Directory::rename(char const*)>:
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	b8 0b 00 00 00       	mov    eax,0xb
c000b17e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b182:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b189:	80 f9 19             	cmp    cl,0x19
c000b18c:	77 32                	ja     c000b1c0 <Directory::rename(char const*)+0x4a>
c000b18e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b195:	85 c9                	test   ecx,ecx
c000b197:	74 27                	je     c000b1c0 <Directory::rename(char const*)+0x4a>
c000b199:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b19f:	85 c9                	test   ecx,ecx
c000b1a1:	74 1d                	je     c000b1c0 <Directory::rename(char const*)+0x4a>
c000b1a3:	b8 06 00 00 00       	mov    eax,0x6
c000b1a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ac:	75 12                	jne    c000b1c0 <Directory::rename(char const*)+0x4a>
c000b1ae:	83 c2 0d             	add    edx,0xd
c000b1b1:	50                   	push   eax
c000b1b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1b8:	52                   	push   edx
c000b1b9:	51                   	push   ecx
c000b1ba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	83 c4 0c             	add    esp,0xc
c000b1c3:	c3                   	ret    

c000b1c4 <Directory::exists()>:
c000b1c4:	83 ec 0c             	sub    esp,0xc
c000b1c7:	31 c0                	xor    eax,eax
c000b1c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1cd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1d4:	80 f9 19             	cmp    cl,0x19
c000b1d7:	77 24                	ja     c000b1fd <Directory::exists()+0x39>
c000b1d9:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1e0:	85 c9                	test   ecx,ecx
c000b1e2:	74 19                	je     c000b1fd <Directory::exists()+0x39>
c000b1e4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1ea:	85 c9                	test   ecx,ecx
c000b1ec:	74 0f                	je     c000b1fd <Directory::exists()+0x39>
c000b1ee:	83 c2 0d             	add    edx,0xd
c000b1f1:	50                   	push   eax
c000b1f2:	50                   	push   eax
c000b1f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1f5:	52                   	push   edx
c000b1f6:	51                   	push   ecx
c000b1f7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1fa:	83 c4 10             	add    esp,0x10
c000b1fd:	83 c4 0c             	add    esp,0xc
c000b200:	c3                   	ret    
c000b201:	90                   	nop

c000b202 <Directory::read(dirent*)>:
c000b202:	83 ec 1c             	sub    esp,0x1c
c000b205:	b8 0b 00 00 00       	mov    eax,0xb
c000b20a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b20e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b215:	80 fa 19             	cmp    dl,0x19
c000b218:	77 30                	ja     c000b24a <Directory::read(dirent*)+0x48>
c000b21a:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b221:	85 d2                	test   edx,edx
c000b223:	74 25                	je     c000b24a <Directory::read(dirent*)+0x48>
c000b225:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b22c:	74 1c                	je     c000b24a <Directory::read(dirent*)+0x48>
c000b22e:	83 ec 0c             	sub    esp,0xc
c000b231:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b233:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b237:	52                   	push   edx
c000b238:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23c:	6a 00                	push   0x0
c000b23e:	68 10 01 00 00       	push   0x110
c000b243:	51                   	push   ecx
c000b244:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b247:	83 c4 20             	add    esp,0x20
c000b24a:	83 c4 1c             	add    esp,0x1c
c000b24d:	c3                   	ret    

c000b24e <Directory::create()>:
c000b24e:	83 ec 0c             	sub    esp,0xc
c000b251:	b8 0b 00 00 00       	mov    eax,0xb
c000b256:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b25a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b261:	80 f9 19             	cmp    cl,0x19
c000b264:	77 2f                	ja     c000b295 <Directory::create()+0x47>
c000b266:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b26d:	85 c9                	test   ecx,ecx
c000b26f:	74 24                	je     c000b295 <Directory::create()+0x47>
c000b271:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b277:	85 c9                	test   ecx,ecx
c000b279:	74 1a                	je     c000b295 <Directory::create()+0x47>
c000b27b:	b8 06 00 00 00       	mov    eax,0x6
c000b280:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b284:	75 0f                	jne    c000b295 <Directory::create()+0x47>
c000b286:	83 c2 0d             	add    edx,0xd
c000b289:	50                   	push   eax
c000b28a:	50                   	push   eax
c000b28b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b28d:	52                   	push   edx
c000b28e:	51                   	push   ecx
c000b28f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	83 c4 0c             	add    esp,0xc
c000b298:	c3                   	ret    
c000b299:	90                   	nop

c000b29a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b29a:	b8 0a 00 00 00       	mov    eax,0xa
c000b29f:	c3                   	ret    

c000b2a0 <Bus::Bus(char const*)>:
c000b2a0:	83 ec 0c             	sub    esp,0xc
c000b2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a7:	83 ec 08             	sub    esp,0x8
c000b2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ae:	50                   	push   eax
c000b2af:	e8 30 08 00 00       	call   c000bae4 <Device::Device(char const*)>
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	ba dc dd 01 c0       	mov    edx,0xc001dddc
c000b2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c0:	89 10                	mov    DWORD PTR [eax],edx
c000b2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2d0:	90                   	nop
c000b2d1:	83 c4 0c             	add    esp,0xc
c000b2d4:	c3                   	ret    
c000b2d5:	90                   	nop
c000b2d6:	66 90                	xchg   ax,ax

c000b2d8 <Bus::~Bus()>:
c000b2d8:	83 ec 0c             	sub    esp,0xc
c000b2db:	ba dc dd 01 c0       	mov    edx,0xc001dddc
c000b2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e4:	89 10                	mov    DWORD PTR [eax],edx
c000b2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ea:	83 ec 0c             	sub    esp,0xc
c000b2ed:	50                   	push   eax
c000b2ee:	e8 5b 05 00 00       	call   c000b84e <Device::~Device()>
c000b2f3:	83 c4 10             	add    esp,0x10
c000b2f6:	90                   	nop
c000b2f7:	83 c4 0c             	add    esp,0xc
c000b2fa:	c3                   	ret    
c000b2fb:	90                   	nop

c000b2fc <Bus::~Bus()>:
c000b2fc:	83 ec 0c             	sub    esp,0xc
c000b2ff:	83 ec 0c             	sub    esp,0xc
c000b302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b306:	e8 cd ff ff ff       	call   c000b2d8 <Bus::~Bus()>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	83 ec 08             	sub    esp,0x8
c000b311:	68 58 01 00 00       	push   0x158
c000b316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b31a:	e8 fa f0 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000b31f:	83 c4 10             	add    esp,0x10
c000b322:	83 c4 0c             	add    esp,0xc
c000b325:	c3                   	ret    

c000b326 <beepThread(void*)>:
c000b326:	83 ec 0c             	sub    esp,0xc
c000b329:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b32e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b332:	48                   	dec    eax
c000b333:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b338:	75 01                	jne    c000b33b <beepThread(void*)+0x15>
c000b33a:	fb                   	sti    
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	6b c2 0a             	imul   eax,edx,0xa
c000b341:	50                   	push   eax
c000b342:	e8 3d 87 00 00       	call   c0013a84 <milliTenthSleep(unsigned int)>
c000b347:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b34e:	e8 e3 a4 00 00       	call   c0015836 <HalMakeBeep(int)>
c000b353:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b35b:	83 c4 1c             	add    esp,0x1c
c000b35e:	e9 1d 86 00 00       	jmp    c0013980 <blockTask(TaskState)>

c000b363 <Krnl::beep(int, int, bool)>:
c000b363:	56                   	push   esi
c000b364:	53                   	push   ebx
c000b365:	83 ec 10             	sub    esp,0x10
c000b368:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b36c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b374:	e8 bd a4 00 00       	call   c0015836 <HalMakeBeep(int)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	89 f0                	mov    eax,esi
c000b37e:	84 c0                	test   al,al
c000b380:	74 1e                	je     c000b3a0 <Krnl::beep(int, int, bool)+0x3d>
c000b382:	83 ec 0c             	sub    esp,0xc
c000b385:	6b db 0a             	imul   ebx,ebx,0xa
c000b388:	53                   	push   ebx
c000b389:	e8 f6 86 00 00       	call   c0013a84 <milliTenthSleep(unsigned int)>
c000b38e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b396:	83 c4 14             	add    esp,0x14
c000b399:	5b                   	pop    ebx
c000b39a:	5e                   	pop    esi
c000b39b:	e9 96 a4 00 00       	jmp    c0015836 <HalMakeBeep(int)>
c000b3a0:	68 e6 00 00 00       	push   0xe6
c000b3a5:	53                   	push   ebx
c000b3a6:	68 26 b3 00 c0       	push   0xc000b326
c000b3ab:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3b1:	e8 ae 81 00 00       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c000b3b6:	83 c4 14             	add    esp,0x14
c000b3b9:	5b                   	pop    ebx
c000b3ba:	5e                   	pop    esi
c000b3bb:	c3                   	ret    

c000b3bc <User::loadClockSettings(int)>:
c000b3bc:	53                   	push   ebx
c000b3bd:	83 ec 14             	sub    esp,0x14
c000b3c0:	68 14 01 00 00       	push   0x114
c000b3c5:	e8 ef c3 ff ff       	call   c00077b9 <malloc>
c000b3ca:	83 c4 0c             	add    esp,0xc
c000b3cd:	89 c3                	mov    ebx,eax
c000b3cf:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3d5:	68 00 de 01 c0       	push   0xc001de00
c000b3da:	50                   	push   eax
c000b3db:	e8 a4 f6 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c000b3e0:	58                   	pop    eax
c000b3e1:	5a                   	pop    edx
c000b3e2:	6a 01                	push   0x1
c000b3e4:	53                   	push   ebx
c000b3e5:	e8 5a f7 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c000b3ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3ed:	e8 b0 f7 ff ff       	call   c000aba2 <File::close()>
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	85 db                	test   ebx,ebx
c000b3f7:	74 0f                	je     c000b408 <User::loadClockSettings(int)+0x4c>
c000b3f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b402:	83 c4 08             	add    esp,0x8
c000b405:	5b                   	pop    ebx
c000b406:	ff e0                	jmp    eax
c000b408:	83 c4 08             	add    esp,0x8
c000b40b:	5b                   	pop    ebx
c000b40c:	c3                   	ret    
c000b40d:	90                   	nop

c000b40e <Clock::Clock(char const*)>:
c000b40e:	83 ec 0c             	sub    esp,0xc
c000b411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b415:	83 ec 08             	sub    esp,0x8
c000b418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41c:	50                   	push   eax
c000b41d:	e8 c2 06 00 00       	call   c000bae4 <Device::Device(char const*)>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	ba 28 de 01 c0       	mov    edx,0xc001de28
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	89 10                	mov    DWORD PTR [eax],edx
c000b430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b434:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b43e:	90                   	nop
c000b43f:	83 c4 0c             	add    esp,0xc
c000b442:	c3                   	ret    
c000b443:	90                   	nop

c000b444 <Clock::~Clock()>:
c000b444:	83 ec 0c             	sub    esp,0xc
c000b447:	ba 28 de 01 c0       	mov    edx,0xc001de28
c000b44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b450:	89 10                	mov    DWORD PTR [eax],edx
c000b452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b456:	83 ec 0c             	sub    esp,0xc
c000b459:	50                   	push   eax
c000b45a:	e8 ef 03 00 00       	call   c000b84e <Device::~Device()>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	90                   	nop
c000b463:	83 c4 0c             	add    esp,0xc
c000b466:	c3                   	ret    
c000b467:	90                   	nop

c000b468 <Clock::~Clock()>:
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	83 ec 0c             	sub    esp,0xc
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	e8 cd ff ff ff       	call   c000b444 <Clock::~Clock()>
c000b477:	83 c4 10             	add    esp,0x10
c000b47a:	83 ec 08             	sub    esp,0x8
c000b47d:	68 58 01 00 00       	push   0x158
c000b482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b486:	e8 8e ef ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000b48b:	83 c4 10             	add    esp,0x10
c000b48e:	83 c4 0c             	add    esp,0xc
c000b491:	c3                   	ret    

c000b492 <Clock::timeInSecondsLocal()>:
c000b492:	53                   	push   ebx
c000b493:	83 ec 14             	sub    esp,0x14
c000b496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b49c:	50                   	push   eax
c000b49d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b4a0:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b4a7:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b4ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4b3:	89 cb                	mov    ebx,ecx
c000b4b5:	c1 fb 1f             	sar    ebx,0x1f
c000b4b8:	01 c8                	add    eax,ecx
c000b4ba:	11 da                	adc    edx,ebx
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	31 c9                	xor    ecx,ecx
c000b4c1:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b4c8:	74 05                	je     c000b4cf <Clock::timeInSecondsLocal()+0x3d>
c000b4ca:	b9 08 07 00 00       	mov    ecx,0x708
c000b4cf:	31 db                	xor    ebx,ebx
c000b4d1:	01 c8                	add    eax,ecx
c000b4d3:	11 da                	adc    edx,ebx
c000b4d5:	83 c4 08             	add    esp,0x8
c000b4d8:	5b                   	pop    ebx
c000b4d9:	c3                   	ret    

c000b4da <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4da:	57                   	push   edi
c000b4db:	56                   	push   esi
c000b4dc:	53                   	push   ebx
c000b4dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4eb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ee:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b4f5:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b4fb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b501:	99                   	cdq    
c000b502:	29 c6                	sub    esi,eax
c000b504:	19 d7                	sbb    edi,edx
c000b506:	89 f0                	mov    eax,esi
c000b508:	89 fa                	mov    edx,edi
c000b50a:	31 f6                	xor    esi,esi
c000b50c:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b513:	74 05                	je     c000b51a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b515:	be 08 07 00 00       	mov    esi,0x708
c000b51a:	31 ff                	xor    edi,edi
c000b51c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b520:	29 f0                	sub    eax,esi
c000b522:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b526:	19 fa                	sbb    edx,edi
c000b528:	89 d8                	mov    eax,ebx
c000b52a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b52e:	5b                   	pop    ebx
c000b52f:	5e                   	pop    esi
c000b530:	5f                   	pop    edi
c000b531:	ff e0                	jmp    eax

c000b533 <datetimeToSeconds(datetime_t)>:
c000b533:	55                   	push   ebp
c000b534:	57                   	push   edi
c000b535:	56                   	push   esi
c000b536:	53                   	push   ebx
c000b537:	83 ec 14             	sub    esp,0x14
c000b53a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b53e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b542:	89 d3                	mov    ebx,edx
c000b544:	0f b6 c6             	movzx  eax,dh
c000b547:	c1 eb 10             	shr    ebx,0x10
c000b54a:	48                   	dec    eax
c000b54b:	66 81 eb 6c 07       	sub    bx,0x76c
c000b550:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b554:	0f b6 f5             	movzx  esi,ch
c000b557:	89 cf                	mov    edi,ecx
c000b559:	6b f6 3c             	imul   esi,esi,0x3c
c000b55c:	c1 ef 10             	shr    edi,0x10
c000b55f:	0f b6 c9             	movzx  ecx,cl
c000b562:	89 f8                	mov    eax,edi
c000b564:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b56a:	0f b6 f8             	movzx  edi,al
c000b56d:	0f b6 d2             	movzx  edx,dl
c000b570:	01 fe                	add    esi,edi
c000b572:	01 f1                	add    ecx,esi
c000b574:	0f b7 f3             	movzx  esi,bx
c000b577:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b57b:	c1 f9 1f             	sar    ecx,0x1f
c000b57e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b583:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b587:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b58c:	8b 0c 8d 60 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe21a0]
c000b593:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b597:	76 29                	jbe    c000b5c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b599:	f6 c3 03             	test   bl,0x3
c000b59c:	75 24                	jne    c000b5c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b59e:	31 d2                	xor    edx,edx
c000b5a0:	bf 64 00 00 00       	mov    edi,0x64
c000b5a5:	89 d8                	mov    eax,ebx
c000b5a7:	66 f7 f7             	div    di
c000b5aa:	66 85 d2             	test   dx,dx
c000b5ad:	75 12                	jne    c000b5c1 <datetimeToSeconds(datetime_t)+0x8e>
c000b5af:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b5b5:	bf 90 01 00 00       	mov    edi,0x190
c000b5ba:	99                   	cdq    
c000b5bb:	f7 ff                	idiv   edi
c000b5bd:	85 d2                	test   edx,edx
c000b5bf:	75 01                	jne    c000b5c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b5c1:	41                   	inc    ecx
c000b5c2:	66 83 fb 46          	cmp    bx,0x46
c000b5c6:	76 45                	jbe    c000b60d <datetimeToSeconds(datetime_t)+0xda>
c000b5c8:	bb 46 00 00 00       	mov    ebx,0x46
c000b5cd:	bf 64 00 00 00       	mov    edi,0x64
c000b5d2:	bd 90 01 00 00       	mov    ebp,0x190
c000b5d7:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5dc:	f6 c3 03             	test   bl,0x3
c000b5df:	75 23                	jne    c000b604 <datetimeToSeconds(datetime_t)+0xd1>
c000b5e1:	89 d8                	mov    eax,ebx
c000b5e3:	99                   	cdq    
c000b5e4:	f7 ff                	idiv   edi
c000b5e6:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5eb:	85 d2                	test   edx,edx
c000b5ed:	75 15                	jne    c000b604 <datetimeToSeconds(datetime_t)+0xd1>
c000b5ef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5f5:	99                   	cdq    
c000b5f6:	f7 fd                	idiv   ebp
c000b5f8:	31 c0                	xor    eax,eax
c000b5fa:	85 d2                	test   edx,edx
c000b5fc:	0f 94 c0             	sete   al
c000b5ff:	05 6d 01 00 00       	add    eax,0x16d
c000b604:	01 c1                	add    ecx,eax
c000b606:	43                   	inc    ebx
c000b607:	39 f3                	cmp    ebx,esi
c000b609:	7c cc                	jl     c000b5d7 <datetimeToSeconds(datetime_t)+0xa4>
c000b60b:	eb 3b                	jmp    c000b648 <datetimeToSeconds(datetime_t)+0x115>
c000b60d:	74 39                	je     c000b648 <datetimeToSeconds(datetime_t)+0x115>
c000b60f:	b8 45 00 00 00       	mov    eax,0x45
c000b614:	89 c2                	mov    edx,eax
c000b616:	83 e2 03             	and    edx,0x3
c000b619:	39 f0                	cmp    eax,esi
c000b61b:	7e 13                	jle    c000b630 <datetimeToSeconds(datetime_t)+0xfd>
c000b61d:	85 d2                	test   edx,edx
c000b61f:	0f 94 c2             	sete   dl
c000b622:	48                   	dec    eax
c000b623:	0f b6 d2             	movzx  edx,dl
c000b626:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b62c:	29 d1                	sub    ecx,edx
c000b62e:	eb e4                	jmp    c000b614 <datetimeToSeconds(datetime_t)+0xe1>
c000b630:	b8 6d 01 00 00       	mov    eax,0x16d
c000b635:	85 d2                	test   edx,edx
c000b637:	75 0d                	jne    c000b646 <datetimeToSeconds(datetime_t)+0x113>
c000b639:	31 c0                	xor    eax,eax
c000b63b:	66 85 db             	test   bx,bx
c000b63e:	0f 95 c0             	setne  al
c000b641:	05 6d 01 00 00       	add    eax,0x16d
c000b646:	29 c1                	sub    ecx,eax
c000b648:	b8 80 51 01 00       	mov    eax,0x15180
c000b64d:	f7 e9                	imul   ecx
c000b64f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b653:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b657:	83 c4 14             	add    esp,0x14
c000b65a:	5b                   	pop    ebx
c000b65b:	5e                   	pop    esi
c000b65c:	5f                   	pop    edi
c000b65d:	5d                   	pop    ebp
c000b65e:	c3                   	ret    
c000b65f:	90                   	nop

c000b660 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b660:	57                   	push   edi
c000b661:	56                   	push   esi
c000b662:	53                   	push   ebx
c000b663:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b667:	8b 06                	mov    eax,DWORD PTR [esi]
c000b669:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b66c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b674:	e8 ba fe ff ff       	call   c000b533 <datetimeToSeconds(datetime_t)>
c000b679:	59                   	pop    ecx
c000b67a:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b681:	5b                   	pop    ebx
c000b682:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b688:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b68e:	89 cb                	mov    ebx,ecx
c000b690:	c1 fb 1f             	sar    ebx,0x1f
c000b693:	29 c8                	sub    eax,ecx
c000b695:	19 da                	sbb    edx,ebx
c000b697:	31 c9                	xor    ecx,ecx
c000b699:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b6a0:	74 05                	je     c000b6a7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b6a2:	b9 08 07 00 00       	mov    ecx,0x708
c000b6a7:	31 db                	xor    ebx,ebx
c000b6a9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b6ad:	29 c8                	sub    eax,ecx
c000b6af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6b3:	19 da                	sbb    edx,ebx
c000b6b5:	89 f8                	mov    eax,edi
c000b6b7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6bb:	5b                   	pop    ebx
c000b6bc:	5e                   	pop    esi
c000b6bd:	5f                   	pop    edi
c000b6be:	ff e0                	jmp    eax

c000b6c0 <secondsToDatetime(unsigned long long)>:
c000b6c0:	55                   	push   ebp
c000b6c1:	57                   	push   edi
c000b6c2:	56                   	push   esi
c000b6c3:	53                   	push   ebx
c000b6c4:	83 ec 1c             	sub    esp,0x1c
c000b6c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6d3:	6a 00                	push   0x0
c000b6d5:	68 80 51 01 00       	push   0x15180
c000b6da:	55                   	push   ebp
c000b6db:	57                   	push   edi
c000b6dc:	e8 ff 09 01 00       	call   c001c0e0 <__udivdi3>
c000b6e1:	83 c4 10             	add    esp,0x10
c000b6e4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ee:	6a 00                	push   0x0
c000b6f0:	68 80 51 01 00       	push   0x15180
c000b6f5:	55                   	push   ebp
c000b6f6:	57                   	push   edi
c000b6f7:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6fc:	e8 df 0a 01 00       	call   c001c1e0 <__umoddi3>
c000b701:	83 c4 10             	add    esp,0x10
c000b704:	99                   	cdq    
c000b705:	f7 ff                	idiv   edi
c000b707:	bf 3c 00 00 00       	mov    edi,0x3c
c000b70c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b70f:	89 d0                	mov    eax,edx
c000b711:	99                   	cdq    
c000b712:	f7 ff                	idiv   edi
c000b714:	85 db                	test   ebx,ebx
c000b716:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b719:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b71c:	79 11                	jns    c000b72f <secondsToDatetime(unsigned long long)+0x6f>
c000b71e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b722:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b728:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b72d:	eb 07                	jmp    c000b736 <secondsToDatetime(unsigned long long)+0x76>
c000b72f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b734:	89 d8                	mov    eax,ebx
c000b736:	bf b4 05 00 00       	mov    edi,0x5b4
c000b73b:	99                   	cdq    
c000b73c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b741:	f7 f9                	idiv   ecx
c000b743:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b748:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b74c:	31 d2                	xor    edx,edx
c000b74e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b756:	01 c3                	add    ebx,eax
c000b758:	89 d8                	mov    eax,ebx
c000b75a:	f7 f1                	div    ecx
c000b75c:	31 d2                	xor    edx,edx
c000b75e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b761:	89 d8                	mov    eax,ebx
c000b763:	f7 f7                	div    edi
c000b765:	31 d2                	xor    edx,edx
c000b767:	29 c1                	sub    ecx,eax
c000b769:	89 d8                	mov    eax,ebx
c000b76b:	f7 f5                	div    ebp
c000b76d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b772:	29 c1                	sub    ecx,eax
c000b774:	31 d2                	xor    edx,edx
c000b776:	89 c8                	mov    eax,ecx
c000b778:	f7 f5                	div    ebp
c000b77a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b77f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b783:	31 d2                	xor    edx,edx
c000b785:	89 c8                	mov    eax,ecx
c000b787:	f7 f5                	div    ebp
c000b789:	31 d2                	xor    edx,edx
c000b78b:	01 c3                	add    ebx,eax
c000b78d:	89 c8                	mov    eax,ecx
c000b78f:	f7 f7                	div    edi
c000b791:	bf 99 00 00 00       	mov    edi,0x99
c000b796:	29 c3                	sub    ebx,eax
c000b798:	31 d2                	xor    edx,edx
c000b79a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b7a2:	29 c3                	sub    ebx,eax
c000b7a4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b7a7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b7aa:	bb 05 00 00 00       	mov    ebx,0x5
c000b7af:	83 c1 02             	add    ecx,0x2
c000b7b2:	89 c8                	mov    eax,ecx
c000b7b4:	f7 f7                	div    edi
c000b7b6:	31 d2                	xor    edx,edx
c000b7b8:	89 c7                	mov    edi,eax
c000b7ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b7c0:	83 c0 02             	add    eax,0x2
c000b7c3:	f7 f3                	div    ebx
c000b7c5:	89 eb                	mov    ebx,ebp
c000b7c7:	29 c3                	sub    ebx,eax
c000b7c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7cf:	88 1e                	mov    BYTE PTR [esi],bl
c000b7d1:	19 c0                	sbb    eax,eax
c000b7d3:	31 d2                	xor    edx,edx
c000b7d5:	83 e0 0c             	and    eax,0xc
c000b7d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7e8:	83 f9 01             	cmp    ecx,0x1
c000b7eb:	0f 96 c2             	setbe  dl
c000b7ee:	41                   	inc    ecx
c000b7ef:	01 d0                	add    eax,edx
c000b7f1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7f8:	83 c4 1c             	add    esp,0x1c
c000b7fb:	89 f0                	mov    eax,esi
c000b7fd:	5b                   	pop    ebx
c000b7fe:	5e                   	pop    esi
c000b7ff:	5f                   	pop    edi
c000b800:	5d                   	pop    ebp
c000b801:	c2 04 00             	ret    0x4

c000b804 <Clock::timeInDatetimeLocal()>:
c000b804:	53                   	push   ebx
c000b805:	83 ec 14             	sub    esp,0x14
c000b808:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b80c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b810:	e8 7d fc ff ff       	call   c000b492 <Clock::timeInSecondsLocal()>
c000b815:	83 c4 0c             	add    esp,0xc
c000b818:	52                   	push   edx
c000b819:	50                   	push   eax
c000b81a:	53                   	push   ebx
c000b81b:	e8 a0 fe ff ff       	call   c000b6c0 <secondsToDatetime(unsigned long long)>
c000b820:	89 d8                	mov    eax,ebx
c000b822:	83 c4 14             	add    esp,0x14
c000b825:	5b                   	pop    ebx
c000b826:	c2 04 00             	ret    0x4
c000b829:	90                   	nop

c000b82a <Device::hibernate()>:
c000b82a:	c3                   	ret    
c000b82b:	90                   	nop

c000b82c <Device::wake()>:
c000b82c:	c3                   	ret    
c000b82d:	90                   	nop

c000b82e <Device::detect()>:
c000b82e:	c3                   	ret    
c000b82f:	90                   	nop

c000b830 <Device::disableLegacy()>:
c000b830:	c3                   	ret    
c000b831:	90                   	nop

c000b832 <Device::powerSaving(PowerSavingLevel)>:
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <DriverlessDevice::close(int, int, void*)>:
c000b834:	31 c0                	xor    eax,eax
c000b836:	c3                   	ret    
c000b837:	90                   	nop

c000b838 <DriverlessDevice::detect()>:
c000b838:	c3                   	ret    
c000b839:	90                   	nop

c000b83a <DriverlessDevice::open(int, int, void*)>:
c000b83a:	83 ec 18             	sub    esp,0x18
c000b83d:	68 90 de 01 c0       	push   0xc001de90
c000b842:	e8 48 49 00 00       	call   c001018f <KePanic(char const*)>
c000b847:	83 c8 ff             	or     eax,0xffffffff
c000b84a:	83 c4 1c             	add    esp,0x1c
c000b84d:	c3                   	ret    

c000b84e <Device::~Device()>:
c000b84e:	ba f0 de 01 c0       	mov    edx,0xc001def0
c000b853:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b857:	89 10                	mov    DWORD PTR [eax],edx
c000b859:	90                   	nop
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <Device::~Device()>:
c000b85c:	83 ec 0c             	sub    esp,0xc
c000b85f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b863:	e8 e6 ff ff ff       	call   c000b84e <Device::~Device()>
c000b868:	83 c4 04             	add    esp,0x4
c000b86b:	83 ec 08             	sub    esp,0x8
c000b86e:	68 58 01 00 00       	push   0x158
c000b873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b877:	e8 9d eb ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	83 c4 0c             	add    esp,0xc
c000b882:	c3                   	ret    
c000b883:	90                   	nop

c000b884 <Device::findAndLoadDriver()>:
c000b884:	c7 44 24 04 ae de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001deae
c000b88c:	e9 7e ec ff ff       	jmp    c000a50f <Dbg::kprintf(char const*, ...)>
c000b891:	90                   	nop

c000b892 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b892:	57                   	push   edi
c000b893:	b9 09 00 00 00       	mov    ecx,0x9
c000b898:	56                   	push   esi
c000b899:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b89d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b8a1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b8ab:	81 c7 18 01 00 00    	add    edi,0x118
c000b8b1:	fc                   	cld    
c000b8b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b8b4:	5e                   	pop    esi
c000b8b5:	5f                   	pop    edi
c000b8b6:	c3                   	ret    
c000b8b7:	90                   	nop

c000b8b8 <Device::preOpenACPI(void*, char*, char*)>:
c000b8b8:	57                   	push   edi
c000b8b9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b8be:	56                   	push   esi
c000b8bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8c7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8d1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8d7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8e3:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8e8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8f4:	5e                   	pop    esi
c000b8f5:	5f                   	pop    edi
c000b8f6:	c3                   	ret    
c000b8f7:	90                   	nop

c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8f8:	53                   	push   ebx
c000b8f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b905:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b909:	0f b6 c0             	movzx  eax,al
c000b90c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b910:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b914:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b918:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b91c:	5b                   	pop    ebx
c000b91d:	e9 a6 05 00 00       	jmp    c000bec8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b922 <Device::getParent()>:
c000b922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b926:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b92c:	c3                   	ret    
c000b92d:	90                   	nop

c000b92e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b92e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b932:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b936:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b93b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b93f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b943:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b947:	e9 e8 06 00 00       	jmp    c000c034 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b94c <Device::addChild(Device*)>:
c000b94c:	53                   	push   ebx
c000b94d:	83 ec 08             	sub    esp,0x8
c000b950:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b958:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b95e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b964:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b966:	85 d2                	test   edx,edx
c000b968:	74 04                	je     c000b96e <Device::addChild(Device*)+0x22>
c000b96a:	89 d3                	mov    ebx,edx
c000b96c:	eb f6                	jmp    c000b964 <Device::addChild(Device*)+0x18>
c000b96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b971:	83 ec 0c             	sub    esp,0xc
c000b974:	6a 08                	push   0x8
c000b976:	e8 3e be ff ff       	call   c00077b9 <malloc>
c000b97b:	89 03                	mov    DWORD PTR [ebx],eax
c000b97d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b983:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b98a:	83 c4 18             	add    esp,0x18
c000b98d:	5b                   	pop    ebx
c000b98e:	c3                   	ret    
c000b98f:	90                   	nop

c000b990 <Device::removeAllChildren()>:
c000b990:	56                   	push   esi
c000b991:	53                   	push   ebx
c000b992:	52                   	push   edx
c000b993:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b997:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b99d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9a0:	74 17                	je     c000b9b9 <Device::removeAllChildren()+0x29>
c000b9a2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b9a5:	85 c0                	test   eax,eax
c000b9a7:	74 0c                	je     c000b9b5 <Device::removeAllChildren()+0x25>
c000b9a9:	83 ec 0c             	sub    esp,0xc
c000b9ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9ae:	50                   	push   eax
c000b9af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b9b2:	83 c4 10             	add    esp,0x10
c000b9b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9b7:	eb e4                	jmp    c000b99d <Device::removeAllChildren()+0xd>
c000b9b9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9c5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9d2:	58                   	pop    eax
c000b9d3:	5b                   	pop    ebx
c000b9d4:	5e                   	pop    esi
c000b9d5:	c3                   	ret    

c000b9d6 <Device::hibernateAll()>:
c000b9d6:	53                   	push   ebx
c000b9d7:	83 ec 14             	sub    esp,0x14
c000b9da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9e0:	53                   	push   ebx
c000b9e1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9f0:	74 0f                	je     c000ba01 <Device::hibernateAll()+0x2b>
c000b9f2:	83 ec 0c             	sub    esp,0xc
c000b9f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9f8:	e8 d9 ff ff ff       	call   c000b9d6 <Device::hibernateAll()>
c000b9fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9ff:	eb e9                	jmp    c000b9ea <Device::hibernateAll()+0x14>
c000ba01:	83 c4 08             	add    esp,0x8
c000ba04:	5b                   	pop    ebx
c000ba05:	c3                   	ret    

c000ba06 <Device::wakeAll()>:
c000ba06:	53                   	push   ebx
c000ba07:	83 ec 14             	sub    esp,0x14
c000ba0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba10:	53                   	push   ebx
c000ba11:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba1a:	83 c4 10             	add    esp,0x10
c000ba1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba20:	74 0f                	je     c000ba31 <Device::wakeAll()+0x2b>
c000ba22:	83 ec 0c             	sub    esp,0xc
c000ba25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba28:	e8 d9 ff ff ff       	call   c000ba06 <Device::wakeAll()>
c000ba2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2f:	eb e9                	jmp    c000ba1a <Device::wakeAll()+0x14>
c000ba31:	83 c4 08             	add    esp,0x8
c000ba34:	5b                   	pop    ebx
c000ba35:	c3                   	ret    

c000ba36 <Device::detectAll()>:
c000ba36:	53                   	push   ebx
c000ba37:	83 ec 14             	sub    esp,0x14
c000ba3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba40:	53                   	push   ebx
c000ba41:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba4a:	83 c4 10             	add    esp,0x10
c000ba4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba50:	74 0f                	je     c000ba61 <Device::detectAll()+0x2b>
c000ba52:	83 ec 0c             	sub    esp,0xc
c000ba55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba58:	e8 d9 ff ff ff       	call   c000ba36 <Device::detectAll()>
c000ba5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba5f:	eb e9                	jmp    c000ba4a <Device::detectAll()+0x14>
c000ba61:	83 c4 08             	add    esp,0x8
c000ba64:	5b                   	pop    ebx
c000ba65:	c3                   	ret    

c000ba66 <Device::disableLegacyAll()>:
c000ba66:	c3                   	ret    
c000ba67:	90                   	nop

c000ba68 <Device::loadDriversForAll()>:
c000ba68:	c3                   	ret    
c000ba69:	90                   	nop

c000ba6a <Device::closeAll()>:
c000ba6a:	53                   	push   ebx
c000ba6b:	83 ec 08             	sub    esp,0x8
c000ba6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba74:	6a 00                	push   0x0
c000ba76:	6a 00                	push   0x0
c000ba78:	6a 00                	push   0x0
c000ba7a:	53                   	push   ebx
c000ba7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba84:	83 c4 10             	add    esp,0x10
c000ba87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8a:	74 0f                	je     c000ba9b <Device::closeAll()+0x31>
c000ba8c:	83 ec 0c             	sub    esp,0xc
c000ba8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba92:	e8 d3 ff ff ff       	call   c000ba6a <Device::closeAll()>
c000ba97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba99:	eb e9                	jmp    c000ba84 <Device::closeAll()+0x1a>
c000ba9b:	83 c4 08             	add    esp,0x8
c000ba9e:	5b                   	pop    ebx
c000ba9f:	c3                   	ret    

c000baa0 <Device::powerSavingAll(PowerSavingLevel)>:
c000baa0:	56                   	push   esi
c000baa1:	53                   	push   ebx
c000baa2:	83 ec 0c             	sub    esp,0xc
c000baa5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000baa9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000baad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baaf:	56                   	push   esi
c000bab0:	53                   	push   ebx
c000bab1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bab4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bac0:	74 0f                	je     c000bad1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bac2:	52                   	push   edx
c000bac3:	52                   	push   edx
c000bac4:	56                   	push   esi
c000bac5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bac8:	e8 d3 ff ff ff       	call   c000baa0 <Device::powerSavingAll(PowerSavingLevel)>
c000bacd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bacf:	eb e9                	jmp    c000baba <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bad1:	58                   	pop    eax
c000bad2:	5b                   	pop    ebx
c000bad3:	5e                   	pop    esi
c000bad4:	c3                   	ret    
c000bad5:	90                   	nop

c000bad6 <Device::setName(char const*)>:
c000bad6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bade:	e9 1d 4b ff ff       	jmp    c0000600 <strcpy>
c000bae3:	90                   	nop

c000bae4 <Device::Device(char const*)>:
c000bae4:	83 ec 1c             	sub    esp,0x1c
c000bae7:	ba f0 de 01 c0       	mov    edx,0xc001def0
c000baec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf0:	89 10                	mov    DWORD PTR [eax],edx
c000baf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb04:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb12:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb20:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb2a:	83 ec 08             	sub    esp,0x8
c000bb2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb35:	e8 9c ff ff ff       	call   c000bad6 <Device::setName(char const*)>
c000bb3a:	83 c4 10             	add    esp,0x10
c000bb3d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb45:	83 ec 0c             	sub    esp,0xc
c000bb48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb4c:	e8 68 bc ff ff       	call   c00077b9 <malloc>
c000bb51:	83 c4 10             	add    esp,0x10
c000bb54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb65:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb90:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bba2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbb4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbc2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbda:	90                   	nop
c000bbdb:	83 c4 1c             	add    esp,0x1c
c000bbde:	c3                   	ret    
c000bbdf:	90                   	nop

c000bbe0 <Device::getName()>:
c000bbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbe4:	05 d0 00 00 00       	add    eax,0xd0
c000bbe9:	c3                   	ret    

c000bbea <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbea:	83 ec 0c             	sub    esp,0xc
c000bbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbf1:	83 ec 08             	sub    esp,0x8
c000bbf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf8:	50                   	push   eax
c000bbf9:	e8 e6 fe ff ff       	call   c000bae4 <Device::Device(char const*)>
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	ba 1c df 01 c0       	mov    edx,0xc001df1c
c000bc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc0a:	89 10                	mov    DWORD PTR [eax],edx
c000bc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc10:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc1a:	90                   	nop
c000bc1b:	83 c4 0c             	add    esp,0xc
c000bc1e:	c3                   	ret    
c000bc1f:	90                   	nop

c000bc20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc20:	57                   	push   edi
c000bc21:	56                   	push   esi
c000bc22:	53                   	push   ebx
c000bc23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc2f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc35:	75 0c                	jne    c000bc43 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc37:	52                   	push   edx
c000bc38:	52                   	push   edx
c000bc39:	53                   	push   ebx
c000bc3a:	56                   	push   esi
c000bc3b:	e8 52 09 01 00       	call   c001c592 <LinkedList<Device>::addElement(Device*)>
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc4c:	74 12                	je     c000bc60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc4e:	50                   	push   eax
c000bc4f:	57                   	push   edi
c000bc50:	56                   	push   esi
c000bc51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc54:	e8 c7 ff ff ff       	call   c000bc20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc5b:	83 c4 10             	add    esp,0x10
c000bc5e:	eb e9                	jmp    c000bc49 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc60:	5b                   	pop    ebx
c000bc61:	5e                   	pop    esi
c000bc62:	5f                   	pop    edi
c000bc63:	c3                   	ret    

c000bc64 <getDevicesOfType(DeviceType)>:
c000bc64:	53                   	push   ebx
c000bc65:	83 ec 14             	sub    esp,0x14
c000bc68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc6c:	53                   	push   ebx
c000bc6d:	e8 fc 09 01 00       	call   c001c66e <LinkedList<Device>::LinkedList()>
c000bc72:	83 c4 0c             	add    esp,0xc
c000bc75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc79:	53                   	push   ebx
c000bc7a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bc80:	e8 9b ff ff ff       	call   c000bc20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc85:	89 d8                	mov    eax,ebx
c000bc87:	83 c4 18             	add    esp,0x18
c000bc8a:	5b                   	pop    ebx
c000bc8b:	c2 04 00             	ret    0x4
c000bc8e:	66 90                	xchg   ax,ax

c000bc90 <HardDiskController::HardDiskController(char const*)>:
c000bc90:	83 ec 0c             	sub    esp,0xc
c000bc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc97:	83 ec 08             	sub    esp,0x8
c000bc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc9e:	50                   	push   eax
c000bc9f:	e8 40 fe ff ff       	call   c000bae4 <Device::Device(char const*)>
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000bcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bcc0:	90                   	nop
c000bcc1:	83 c4 0c             	add    esp,0xc
c000bcc4:	c3                   	ret    
c000bcc5:	90                   	nop
c000bcc6:	66 90                	xchg   ax,ax

c000bcc8 <HardDiskController::~HardDiskController()>:
c000bcc8:	83 ec 0c             	sub    esp,0xc
c000bccb:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000bcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd4:	89 10                	mov    DWORD PTR [eax],edx
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	83 ec 0c             	sub    esp,0xc
c000bcdd:	50                   	push   eax
c000bcde:	e8 6b fb ff ff       	call   c000b84e <Device::~Device()>
c000bce3:	83 c4 10             	add    esp,0x10
c000bce6:	90                   	nop
c000bce7:	83 c4 0c             	add    esp,0xc
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <HardDiskController::~HardDiskController()>:
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	83 ec 0c             	sub    esp,0xc
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	e8 cd ff ff ff       	call   c000bcc8 <HardDiskController::~HardDiskController()>
c000bcfb:	83 c4 10             	add    esp,0x10
c000bcfe:	83 ec 08             	sub    esp,0x8
c000bd01:	68 58 01 00 00       	push   0x158
c000bd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd0a:	e8 0a e7 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000bd0f:	83 c4 10             	add    esp,0x10
c000bd12:	83 c4 0c             	add    esp,0xc
c000bd15:	c3                   	ret    

c000bd16 <PhysicalDisk::eject()>:
c000bd16:	83 c8 ff             	or     eax,0xffffffff
c000bd19:	c3                   	ret    

c000bd1a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd1a:	83 ec 0c             	sub    esp,0xc
c000bd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd21:	83 ec 08             	sub    esp,0x8
c000bd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd28:	50                   	push   eax
c000bd29:	e8 b6 fd ff ff       	call   c000bae4 <Device::Device(char const*)>
c000bd2e:	83 c4 10             	add    esp,0x10
c000bd31:	ba 74 df 01 c0       	mov    edx,0xc001df74
c000bd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3a:	89 10                	mov    DWORD PTR [eax],edx
c000bd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd56:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd7c:	90                   	nop
c000bd7d:	83 c4 0c             	add    esp,0xc
c000bd80:	c3                   	ret    
c000bd81:	90                   	nop

c000bd82 <PhysicalDisk::startCache()>:
c000bd82:	56                   	push   esi
c000bd83:	53                   	push   ebx
c000bd84:	83 ec 10             	sub    esp,0x10
c000bd87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd8b:	6a 44                	push   0x44
c000bd8d:	e8 27 ba ff ff       	call   c00077b9 <malloc>
c000bd92:	89 c6                	mov    esi,eax
c000bd94:	58                   	pop    eax
c000bd95:	5a                   	pop    edx
c000bd96:	53                   	push   ebx
c000bd97:	56                   	push   esi
c000bd98:	e8 eb 15 00 00       	call   c000d388 <VCache::VCache(PhysicalDisk*)>
c000bd9d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bda3:	83 c4 14             	add    esp,0x14
c000bda6:	5b                   	pop    ebx
c000bda7:	5e                   	pop    esi
c000bda8:	c3                   	ret    
c000bda9:	90                   	nop

c000bdaa <PhysicalDisk::~PhysicalDisk()>:
c000bdaa:	83 ec 0c             	sub    esp,0xc
c000bdad:	ba 74 df 01 c0       	mov    edx,0xc001df74
c000bdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb6:	89 10                	mov    DWORD PTR [eax],edx
c000bdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbc:	83 ec 0c             	sub    esp,0xc
c000bdbf:	50                   	push   eax
c000bdc0:	e8 89 fa ff ff       	call   c000b84e <Device::~Device()>
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	90                   	nop
c000bdc9:	83 c4 0c             	add    esp,0xc
c000bdcc:	c3                   	ret    
c000bdcd:	90                   	nop

c000bdce <PhysicalDisk::~PhysicalDisk()>:
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	83 ec 0c             	sub    esp,0xc
c000bdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd8:	e8 cd ff ff ff       	call   c000bdaa <PhysicalDisk::~PhysicalDisk()>
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	83 ec 08             	sub    esp,0x8
c000bde3:	68 6c 01 00 00       	push   0x16c
c000bde8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdec:	e8 28 e6 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000bdf1:	83 c4 10             	add    esp,0x10
c000bdf4:	83 c4 0c             	add    esp,0xc
c000bdf7:	c3                   	ret    

c000bdf8 <int_handler>:
c000bdf8:	55                   	push   ebp
c000bdf9:	57                   	push   edi
c000bdfa:	56                   	push   esi
c000bdfb:	53                   	push   ebx
c000bdfc:	83 ec 0c             	sub    esp,0xc
c000bdff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be03:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be0a:	74 0b                	je     c000be17 <int_handler+0x1f>
c000be0c:	fa                   	cli    
c000be0d:	f4                   	hlt    
c000be0e:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be15:	75 f5                	jne    c000be0c <int_handler+0x14>
c000be17:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be1a:	8d 46 e0             	lea    eax,[esi-0x20]
c000be1d:	83 f8 17             	cmp    eax,0x17
c000be20:	76 3e                	jbe    c000be60 <int_handler+0x68>
c000be22:	c1 e6 04             	shl    esi,0x4
c000be25:	31 db                	xor    ebx,ebx
c000be27:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000be2d:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000be33:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be37:	85 c0                	test   eax,eax
c000be39:	74 13                	je     c000be4e <int_handler+0x56>
c000be3b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be3e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be42:	74 2a                	je     c000be6e <int_handler+0x76>
c000be44:	83 ec 08             	sub    esp,0x8
c000be47:	52                   	push   edx
c000be48:	57                   	push   edi
c000be49:	ff d0                	call   eax
c000be4b:	83 c4 10             	add    esp,0x10
c000be4e:	43                   	inc    ebx
c000be4f:	83 fb 04             	cmp    ebx,0x4
c000be52:	75 df                	jne    c000be33 <int_handler+0x3b>
c000be54:	83 c4 0c             	add    esp,0xc
c000be57:	31 c0                	xor    eax,eax
c000be59:	5b                   	pop    ebx
c000be5a:	31 d2                	xor    edx,edx
c000be5c:	5e                   	pop    esi
c000be5d:	5f                   	pop    edi
c000be5e:	5d                   	pop    ebp
c000be5f:	c3                   	ret    
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	50                   	push   eax
c000be64:	e8 0a 9a 00 00       	call   c0015873 <HalEndOfInterrupt(int)>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	eb b4                	jmp    c000be22 <int_handler+0x2a>
c000be6e:	83 ec 08             	sub    esp,0x8
c000be71:	52                   	push   edx
c000be72:	57                   	push   edi
c000be73:	ff d0                	call   eax
c000be75:	83 c4 10             	add    esp,0x10
c000be78:	83 c4 0c             	add    esp,0xc
c000be7b:	5b                   	pop    ebx
c000be7c:	5e                   	pop    esi
c000be7d:	5f                   	pop    edi
c000be7e:	5d                   	pop    ebp
c000be7f:	c3                   	ret    

c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be80:	56                   	push   esi
c000be81:	31 c0                	xor    eax,eax
c000be83:	53                   	push   ebx
c000be84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be8c:	89 ca                	mov    edx,ecx
c000be8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be92:	c1 e2 04             	shl    edx,0x4
c000be95:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000be9d:	74 15                	je     c000beb4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be9f:	40                   	inc    eax
c000bea0:	83 f8 04             	cmp    eax,0x4
c000bea3:	75 f0                	jne    c000be95 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bea5:	c7 44 24 0c a4 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dfa4
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	e9 db 42 00 00       	jmp    c001018f <KePanic(char const*)>
c000beb4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000beb7:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bebe:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bec5:	5b                   	pop    ebx
c000bec6:	5e                   	pop    esi
c000bec7:	c3                   	ret    

c000bec8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bec8:	57                   	push   edi
c000bec9:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000becf:	56                   	push   esi
c000bed0:	53                   	push   ebx
c000bed1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bed5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bed9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bee0:	74 5b                	je     c000bf3d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bee2:	89 c7                	mov    edi,eax
c000bee4:	84 c0                	test   al,al
c000bee6:	74 24                	je     c000bf0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bee8:	83 fe 0f             	cmp    esi,0xf
c000beeb:	0f 8f d9 00 00 00    	jg     c000bfca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bef1:	8a 86 e0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0820]
c000bef7:	25 ff 00 00 00       	and    eax,0xff
c000befc:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bf04:	89 c6                	mov    esi,eax
c000bf06:	66 d1 ef             	shr    di,1
c000bf09:	83 e7 01             	and    edi,0x1
c000bf0c:	83 ec 08             	sub    esp,0x8
c000bf0f:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf14:	31 db                	xor    ebx,ebx
c000bf16:	50                   	push   eax
c000bf17:	68 b1 df 01 c0       	push   0xc001dfb1
c000bf1c:	e8 ee e5 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf29:	85 c0                	test   eax,eax
c000bf2b:	7f 51                	jg     c000bf7e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf2d:	83 ec 0c             	sub    esp,0xc
c000bf30:	68 c8 df 01 c0       	push   0xc001dfc8
c000bf35:	e8 55 42 00 00       	call   c001018f <KePanic(char const*)>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf40:	31 d2                	xor    edx,edx
c000bf42:	89 c8                	mov    eax,ecx
c000bf44:	c1 e0 04             	shl    eax,0x4
c000bf47:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bf4e:	85 db                	test   ebx,ebx
c000bf50:	0f 84 8b 00 00 00    	je     c000bfe1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf56:	42                   	inc    edx
c000bf57:	83 fa 04             	cmp    edx,0x4
c000bf5a:	75 eb                	jne    c000bf47 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	68 1c e0 01 c0       	push   0xc001e01c
c000bf64:	e8 26 42 00 00       	call   c001018f <KePanic(char const*)>
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf71:	5b                   	pop    ebx
c000bf72:	5e                   	pop    esi
c000bf73:	5f                   	pop    edi
c000bf74:	c3                   	ret    
c000bf75:	43                   	inc    ebx
c000bf76:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bf7c:	7e af                	jle    c000bf2d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf7e:	83 ec 08             	sub    esp,0x8
c000bf81:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bf88:	56                   	push   esi
c000bf89:	50                   	push   eax
c000bf8a:	e8 d1 f5 00 00       	call   c001b560 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf8f:	83 c4 10             	add    esp,0x10
c000bf92:	84 c0                	test   al,al
c000bf94:	74 df                	je     c000bf75 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf96:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf9c:	50                   	push   eax
c000bf9d:	8d 46 20             	lea    eax,[esi+0x20]
c000bfa0:	57                   	push   edi
c000bfa1:	25 ff 00 00 00       	and    eax,0xff
c000bfa6:	6a 00                	push   0x0
c000bfa8:	50                   	push   eax
c000bfa9:	89 f0                	mov    eax,esi
c000bfab:	6a 00                	push   0x0
c000bfad:	25 ff 00 00 00       	and    eax,0xff
c000bfb2:	6a 00                	push   0x0
c000bfb4:	50                   	push   eax
c000bfb5:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bfbc:	50                   	push   eax
c000bfbd:	e8 18 f7 00 00       	call   c001b6da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bfc2:	83 c4 20             	add    esp,0x20
c000bfc5:	e9 73 ff ff ff       	jmp    c000bf3d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfca:	83 ec 0c             	sub    esp,0xc
c000bfcd:	31 ff                	xor    edi,edi
c000bfcf:	68 e4 df 01 c0       	push   0xc001dfe4
c000bfd4:	e8 b6 41 00 00       	call   c001018f <KePanic(char const*)>
c000bfd9:	83 c4 10             	add    esp,0x10
c000bfdc:	e9 2b ff ff ff       	jmp    c000bf0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfe4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfe8:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000bfef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bff3:	5b                   	pop    ebx
c000bff4:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000bffb:	89 f0                	mov    eax,esi
c000bffd:	5e                   	pop    esi
c000bffe:	5f                   	pop    edi
c000bfff:	c3                   	ret    

c000c000 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c004:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c008:	c1 e0 04             	shl    eax,0x4
c000c00b:	8d 50 10             	lea    edx,[eax+0x10]
c000c00e:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c014:	74 08                	je     c000c01e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c016:	83 c0 04             	add    eax,0x4
c000c019:	39 d0                	cmp    eax,edx
c000c01b:	75 f1                	jne    c000c00e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c01d:	c3                   	ret    
c000c01e:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c028:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c032:	eb e2                	jmp    c000c016 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c034 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c034:	53                   	push   ebx
c000c035:	83 ec 08             	sub    esp,0x8
c000c038:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c03c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c041:	74 0e                	je     c000c051 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c043:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c048:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c04f:	75 37                	jne    c000c088 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c055:	83 c0 20             	add    eax,0x20
c000c058:	c1 e0 04             	shl    eax,0x4
c000c05b:	8d 50 10             	lea    edx,[eax+0x10]
c000c05e:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c064:	74 0c                	je     c000c072 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c066:	83 c0 04             	add    eax,0x4
c000c069:	39 d0                	cmp    eax,edx
c000c06b:	75 f1                	jne    c000c05e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c06d:	83 c4 08             	add    esp,0x8
c000c070:	5b                   	pop    ebx
c000c071:	c3                   	ret    
c000c072:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c07c:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c086:	eb de                	jmp    c000c066 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c088:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c08d:	7f 12                	jg     c000c0a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c08f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c093:	31 c0                	xor    eax,eax
c000c095:	8a 81 e0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0820]
c000c09b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c09f:	eb b0                	jmp    c000c051 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0a1:	83 ec 0c             	sub    esp,0xc
c000c0a4:	68 d5 df 01 c0       	push   0xc001dfd5
c000c0a9:	e8 e1 40 00 00       	call   c001018f <KePanic(char const*)>
c000c0ae:	83 c4 10             	add    esp,0x10
c000c0b1:	eb 9e                	jmp    c000c051 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c0b3 <setupINTS()>:
c000c0b3:	31 c0                	xor    eax,eax
c000c0b5:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0bf:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0c9:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c0d3:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c0dd:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c0e7:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c0f1:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c0fb:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c105:	83 c0 10             	add    eax,0x10
c000c108:	3d 00 10 00 00       	cmp    eax,0x1000
c000c10d:	75 a6                	jne    c000c0b5 <setupINTS()+0x2>
c000c10f:	c3                   	ret    

c000c110 <convertLegacyIRQNumber(int)>:
c000c110:	83 ec 0c             	sub    esp,0xc
c000c113:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c124:	74 0f                	je     c000c135 <convertLegacyIRQNumber(int)+0x25>
c000c126:	83 f8 0f             	cmp    eax,0xf
c000c129:	7f 0e                	jg     c000c139 <convertLegacyIRQNumber(int)+0x29>
c000c12b:	31 c9                	xor    ecx,ecx
c000c12d:	8a 88 e0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0820]
c000c133:	89 c8                	mov    eax,ecx
c000c135:	83 c4 0c             	add    esp,0xc
c000c138:	c3                   	ret    
c000c139:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c13d:	83 ec 0c             	sub    esp,0xc
c000c140:	68 e4 df 01 c0       	push   0xc001dfe4
c000c145:	e8 45 40 00 00       	call   c001018f <KePanic(char const*)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c151:	83 c4 0c             	add    esp,0xc
c000c154:	c3                   	ret    
c000c155:	90                   	nop

c000c156 <startGUI(void*)>:
c000c156:	55                   	push   ebp
c000c157:	89 e5                	mov    ebp,esp
c000c159:	53                   	push   ebx
c000c15a:	83 ec 04             	sub    esp,0x4
c000c15d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c162:	48                   	dec    eax
c000c163:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c168:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c16d:	85 c0                	test   eax,eax
c000c16f:	75 01                	jne    c000c172 <startGUI(void*)+0x1c>
c000c171:	fb                   	sti    
c000c172:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c178:	83 ec 08             	sub    esp,0x8
c000c17b:	6a 01                	push   0x1
c000c17d:	68 41 e0 01 c0       	push   0xc001e041
c000c182:	e8 d2 6b 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	83 ec 08             	sub    esp,0x8
c000c18d:	53                   	push   ebx
c000c18e:	50                   	push   eax
c000c18f:	e8 f6 6d 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c000c194:	83 c4 10             	add    esp,0x10
c000c197:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c19d:	83 ec 08             	sub    esp,0x8
c000c1a0:	6a 01                	push   0x1
c000c1a2:	68 5b e0 01 c0       	push   0xc001e05b
c000c1a7:	e8 ad 6b 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c000c1ac:	83 c4 10             	add    esp,0x10
c000c1af:	83 ec 08             	sub    esp,0x8
c000c1b2:	53                   	push   ebx
c000c1b3:	50                   	push   eax
c000c1b4:	e8 d1 6d 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c000c1b9:	83 c4 10             	add    esp,0x10
c000c1bc:	90                   	nop
c000c1bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1c0:	c9                   	leave  
c000c1c1:	c3                   	ret    

c000c1c2 <startGUIVESA(void*)>:
c000c1c2:	55                   	push   ebp
c000c1c3:	89 e5                	mov    ebp,esp
c000c1c5:	53                   	push   ebx
c000c1c6:	83 ec 04             	sub    esp,0x4
c000c1c9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1ce:	48                   	dec    eax
c000c1cf:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1d4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1d9:	85 c0                	test   eax,eax
c000c1db:	75 01                	jne    c000c1de <startGUIVESA(void*)+0x1c>
c000c1dd:	fb                   	sti    
c000c1de:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1e4:	83 ec 08             	sub    esp,0x8
c000c1e7:	6a 01                	push   0x1
c000c1e9:	68 79 e0 01 c0       	push   0xc001e079
c000c1ee:	e8 66 6b 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c000c1f3:	83 c4 10             	add    esp,0x10
c000c1f6:	83 ec 08             	sub    esp,0x8
c000c1f9:	53                   	push   ebx
c000c1fa:	50                   	push   eax
c000c1fb:	e8 8a 6d 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c000c200:	83 c4 10             	add    esp,0x10
c000c203:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c209:	83 ec 08             	sub    esp,0x8
c000c20c:	6a 01                	push   0x1
c000c20e:	68 5b e0 01 c0       	push   0xc001e05b
c000c213:	e8 41 6b 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c000c218:	83 c4 10             	add    esp,0x10
c000c21b:	83 ec 08             	sub    esp,0x8
c000c21e:	53                   	push   ebx
c000c21f:	50                   	push   eax
c000c220:	e8 65 6d 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c000c225:	83 c4 10             	add    esp,0x10
c000c228:	90                   	nop
c000c229:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c22c:	c9                   	leave  
c000c22d:	c3                   	ret    

c000c22e <sendKeyToTerminal(unsigned char)>:
c000c22e:	55                   	push   ebp
c000c22f:	89 e5                	mov    ebp,esp
c000c231:	83 ec 28             	sub    esp,0x28
c000c234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c237:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c23a:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c240:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c243:	25 ff 00 00 00       	and    eax,0xff
c000c248:	83 ec 08             	sub    esp,0x8
c000c24b:	50                   	push   eax
c000c24c:	52                   	push   edx
c000c24d:	e8 f4 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c252:	83 c4 10             	add    esp,0x10
c000c255:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c259:	74 0a                	je     c000c265 <sendKeyToTerminal(unsigned char)+0x37>
c000c25b:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c25f:	0f 85 8f 00 00 00    	jne    c000c2f4 <sendKeyToTerminal(unsigned char)+0xc6>
c000c265:	fa                   	cli    
c000c266:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c26b:	40                   	inc    eax
c000c26c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c271:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c276:	40                   	inc    eax
c000c277:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c27c:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c281:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c284:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c28e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c292:	74 1f                	je     c000c2b3 <sendKeyToTerminal(unsigned char)+0x85>
c000c294:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c297:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c29a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c29d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c2a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2a3:	83 ec 0c             	sub    esp,0xc
c000c2a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c2a9:	e8 9a 79 00 00       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c000c2ae:	83 c4 10             	add    esp,0x10
c000c2b1:	eb db                	jmp    c000c28e <sendKeyToTerminal(unsigned char)+0x60>
c000c2b3:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2b8:	48                   	dec    eax
c000c2b9:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2be:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2c3:	85 c0                	test   eax,eax
c000c2c5:	75 18                	jne    c000c2df <sendKeyToTerminal(unsigned char)+0xb1>
c000c2c7:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c2cc:	85 c0                	test   eax,eax
c000c2ce:	74 0f                	je     c000c2df <sendKeyToTerminal(unsigned char)+0xb1>
c000c2d0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c2da:	e8 a5 74 00 00       	call   c0013784 <schedule()>
c000c2df:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2e4:	48                   	dec    eax
c000c2e5:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2ea:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2ef:	85 c0                	test   eax,eax
c000c2f1:	75 01                	jne    c000c2f4 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2f3:	fb                   	sti    
c000c2f4:	90                   	nop
c000c2f5:	c9                   	leave  
c000c2f6:	c3                   	ret    

c000c2f7 <sendKeyboardToken(KeyboardToken)>:
c000c2f7:	55                   	push   ebp
c000c2f8:	89 e5                	mov    ebp,esp
c000c2fa:	83 ec 18             	sub    esp,0x18
c000c2fd:	e8 dd 3e 00 00       	call   c00101df <Krnl::userIOReceived()>
c000c302:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c308:	25 ff ff 00 00       	and    eax,0xffff
c000c30d:	83 f2 01             	xor    edx,0x1
c000c310:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c316:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c31b:	85 c0                	test   eax,eax
c000c31d:	74 24                	je     c000c343 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c31f:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c325:	83 ec 04             	sub    esp,0x4
c000c328:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c32d:	83 ec 08             	sub    esp,0x8
c000c330:	89 e2                	mov    edx,esp
c000c332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c335:	89 02                	mov    DWORD PTR [edx],eax
c000c337:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c33a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c33e:	ff d1                	call   ecx
c000c340:	83 c4 10             	add    esp,0x10
c000c343:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c347:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c34a:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c34f:	38 c2                	cmp    dl,al
c000c351:	74 1e                	je     c000c371 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c353:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c356:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c35b:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c360:	25 ff 00 00 00       	and    eax,0xff
c000c365:	83 ec 0c             	sub    esp,0xc
c000c368:	50                   	push   eax
c000c369:	e8 2a be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c36e:	83 c4 10             	add    esp,0x10
c000c371:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c374:	84 c0                	test   al,al
c000c376:	0f 84 ae 00 00 00    	je     c000c42a <sendKeyboardToken(KeyboardToken)+0x133>
c000c37c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c37f:	66 3d 10 03          	cmp    ax,0x310
c000c383:	75 06                	jne    c000c38b <sendKeyboardToken(KeyboardToken)+0x94>
c000c385:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c38b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c38e:	66 3d 11 03          	cmp    ax,0x311
c000c392:	75 06                	jne    c000c39a <sendKeyboardToken(KeyboardToken)+0xa3>
c000c394:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c39a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c39d:	66 3d 12 03          	cmp    ax,0x312
c000c3a1:	75 06                	jne    c000c3a9 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c3a3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c3a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ac:	66 3d 13 03          	cmp    ax,0x313
c000c3b0:	75 06                	jne    c000c3b8 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c3b2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c3b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bb:	66 3d 14 03          	cmp    ax,0x314
c000c3bf:	75 06                	jne    c000c3c7 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c3c1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ca:	66 3d 15 03          	cmp    ax,0x315
c000c3ce:	75 06                	jne    c000c3d6 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3d0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d9:	66 3d 16 03          	cmp    ax,0x316
c000c3dd:	75 06                	jne    c000c3e5 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3df:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e8:	66 3d 17 03          	cmp    ax,0x317
c000c3ec:	75 06                	jne    c000c3f4 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3ee:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f7:	66 3d 18 03          	cmp    ax,0x318
c000c3fb:	75 06                	jne    c000c403 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3fd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c406:	66 3d 19 03          	cmp    ax,0x319
c000c40a:	75 06                	jne    c000c412 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c40c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c415:	66 3d 1a 03          	cmp    ax,0x31a
c000c419:	0f 85 c9 00 00 00    	jne    c000c4e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c41f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c425:	e9 be 00 00 00       	jmp    c000c4e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42d:	66 3d 10 03          	cmp    ax,0x310
c000c431:	75 0a                	jne    c000c43d <sendKeyboardToken(KeyboardToken)+0x146>
c000c433:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c439:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c43d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c440:	66 3d 11 03          	cmp    ax,0x311
c000c444:	75 0a                	jne    c000c450 <sendKeyboardToken(KeyboardToken)+0x159>
c000c446:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c44c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c453:	66 3d 12 03          	cmp    ax,0x312
c000c457:	75 0a                	jne    c000c463 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c459:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c45f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c466:	66 3d 13 03          	cmp    ax,0x313
c000c46a:	75 0a                	jne    c000c476 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c46c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c472:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c479:	66 3d 14 03          	cmp    ax,0x314
c000c47d:	75 0a                	jne    c000c489 <sendKeyboardToken(KeyboardToken)+0x192>
c000c47f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c485:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48c:	66 3d 15 03          	cmp    ax,0x315
c000c490:	75 0a                	jne    c000c49c <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c492:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c498:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c49c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49f:	66 3d 16 03          	cmp    ax,0x316
c000c4a3:	75 0a                	jne    c000c4af <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c4a5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c4ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b2:	66 3d 17 03          	cmp    ax,0x317
c000c4b6:	75 0a                	jne    c000c4c2 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c4b8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c4be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c5:	66 3d 18 03          	cmp    ax,0x318
c000c4c9:	75 0a                	jne    c000c4d5 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c4cb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d8:	66 3d 19 03          	cmp    ax,0x319
c000c4dc:	75 0a                	jne    c000c4e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4de:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4eb:	66 3d 00 02          	cmp    ax,0x200
c000c4ef:	75 2c                	jne    c000c51d <sendKeyboardToken(KeyboardToken)+0x226>
c000c4f1:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c4f6:	83 f0 01             	xor    eax,0x1
c000c4f9:	84 c0                	test   al,al
c000c4fb:	74 20                	je     c000c51d <sendKeyboardToken(KeyboardToken)+0x226>
c000c4fd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c502:	6a 01                	push   0x1
c000c504:	6a 00                	push   0x0
c000c506:	68 56 c1 00 c0       	push   0xc000c156
c000c50b:	50                   	push   eax
c000c50c:	e8 53 70 00 00       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c000c511:	83 c4 10             	add    esp,0x10
c000c514:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c51b:	eb 33                	jmp    c000c550 <sendKeyboardToken(KeyboardToken)+0x259>
c000c51d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c520:	66 3d 01 02          	cmp    ax,0x201
c000c524:	75 2a                	jne    c000c550 <sendKeyboardToken(KeyboardToken)+0x259>
c000c526:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c52b:	83 f0 01             	xor    eax,0x1
c000c52e:	84 c0                	test   al,al
c000c530:	74 1e                	je     c000c550 <sendKeyboardToken(KeyboardToken)+0x259>
c000c532:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c537:	6a 01                	push   0x1
c000c539:	6a 00                	push   0x0
c000c53b:	68 c2 c1 00 c0       	push   0xc000c1c2
c000c540:	50                   	push   eax
c000c541:	e8 1e 70 00 00       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c000c546:	83 c4 10             	add    esp,0x10
c000c549:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c553:	66 3d 1d 03          	cmp    ax,0x31d
c000c557:	75 06                	jne    c000c55f <sendKeyboardToken(KeyboardToken)+0x268>
c000c559:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c562:	66 3d 1c 03          	cmp    ax,0x31c
c000c566:	75 06                	jne    c000c56e <sendKeyboardToken(KeyboardToken)+0x277>
c000c568:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c56e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c571:	66 3d 1b 03          	cmp    ax,0x31b
c000c575:	75 06                	jne    c000c57d <sendKeyboardToken(KeyboardToken)+0x286>
c000c577:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c57d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c580:	66 3d 1e 03          	cmp    ax,0x31e
c000c584:	75 06                	jne    c000c58c <sendKeyboardToken(KeyboardToken)+0x295>
c000c586:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c58c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58f:	66 3d 1f 03          	cmp    ax,0x31f
c000c593:	75 06                	jne    c000c59b <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c595:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c59b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59e:	66 3d 1a 03          	cmp    ax,0x31a
c000c5a2:	75 06                	jne    c000c5aa <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c5a4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c5aa:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c5ae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5b1:	83 f0 01             	xor    eax,0x1
c000c5b4:	84 c0                	test   al,al
c000c5b6:	74 7b                	je     c000c633 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c5b8:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c5bd:	84 c0                	test   al,al
c000c5bf:	74 43                	je     c000c604 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c5c1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5c5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c5c9:	74 2d                	je     c000c5f8 <sendKeyboardToken(KeyboardToken)+0x301>
c000c5cb:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c5d1:	89 d0                	mov    eax,edx
c000c5d3:	c1 e0 02             	shl    eax,0x2
c000c5d6:	01 d0                	add    eax,edx
c000c5d8:	01 c0                	add    eax,eax
c000c5da:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e2:	25 ff ff 00 00       	and    eax,0xffff
c000c5e7:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5ea:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c5ef:	01 d0                	add    eax,edx
c000c5f1:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c5f6:	eb 71                	jmp    c000c669 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5f8:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c602:	eb 65                	jmp    c000c669 <sendKeyboardToken(KeyboardToken)+0x372>
c000c604:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c609:	85 c0                	test   eax,eax
c000c60b:	74 1a                	je     c000c627 <sendKeyboardToken(KeyboardToken)+0x330>
c000c60d:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c612:	25 ff 00 00 00       	and    eax,0xff
c000c617:	83 ec 0c             	sub    esp,0xc
c000c61a:	50                   	push   eax
c000c61b:	e8 0e fc ff ff       	call   c000c22e <sendKeyToTerminal(unsigned char)>
c000c620:	83 c4 10             	add    esp,0x10
c000c623:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c627:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c631:	eb 36                	jmp    c000c669 <sendKeyboardToken(KeyboardToken)+0x372>
c000c633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c636:	66 3d 01 01          	cmp    ax,0x101
c000c63a:	75 2d                	jne    c000c669 <sendKeyboardToken(KeyboardToken)+0x372>
c000c63c:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c641:	85 c0                	test   eax,eax
c000c643:	74 1a                	je     c000c65f <sendKeyboardToken(KeyboardToken)+0x368>
c000c645:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c64a:	25 ff 00 00 00       	and    eax,0xff
c000c64f:	83 ec 0c             	sub    esp,0xc
c000c652:	50                   	push   eax
c000c653:	e8 d6 fb ff ff       	call   c000c22e <sendKeyToTerminal(unsigned char)>
c000c658:	83 c4 10             	add    esp,0x10
c000c65b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c65f:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c669:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c66c:	83 f0 01             	xor    eax,0x1
c000c66f:	84 c0                	test   al,al
c000c671:	74 4e                	je     c000c6c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c673:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c676:	83 f0 01             	xor    eax,0x1
c000c679:	84 c0                	test   al,al
c000c67b:	74 44                	je     c000c6c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c67d:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c682:	83 f0 01             	xor    eax,0x1
c000c685:	84 c0                	test   al,al
c000c687:	74 38                	je     c000c6c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68c:	66 83 f8 1f          	cmp    ax,0x1f
c000c690:	76 09                	jbe    c000c69b <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c695:	66 83 f8 7e          	cmp    ax,0x7e
c000c699:	76 12                	jbe    c000c6ad <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69e:	66 83 f8 0a          	cmp    ax,0xa
c000c6a2:	74 09                	je     c000c6ad <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a7:	66 83 f8 08          	cmp    ax,0x8
c000c6ab:	75 14                	jne    c000c6c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b0:	25 ff 00 00 00       	and    eax,0xff
c000c6b5:	83 ec 0c             	sub    esp,0xc
c000c6b8:	50                   	push   eax
c000c6b9:	e8 70 fb ff ff       	call   c000c22e <sendKeyToTerminal(unsigned char)>
c000c6be:	83 c4 10             	add    esp,0x10
c000c6c1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6c4:	83 f0 01             	xor    eax,0x1
c000c6c7:	84 c0                	test   al,al
c000c6c9:	74 51                	je     c000c71c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6cb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ce:	83 f0 01             	xor    eax,0x1
c000c6d1:	84 c0                	test   al,al
c000c6d3:	74 47                	je     c000c71c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6d5:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6da:	84 c0                	test   al,al
c000c6dc:	74 3e                	je     c000c71c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e1:	66 83 f8 3f          	cmp    ax,0x3f
c000c6e5:	76 35                	jbe    c000c71c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ea:	66 83 f8 7f          	cmp    ax,0x7f
c000c6ee:	77 2c                	ja     c000c71c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6f3:	88 c2                	mov    dl,al
c000c6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6f8:	66 83 f8 5f          	cmp    ax,0x5f
c000c6fc:	76 04                	jbe    c000c702 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6fe:	b0 20                	mov    al,0x20
c000c700:	eb 02                	jmp    c000c704 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c702:	b0 00                	mov    al,0x0
c000c704:	29 c2                	sub    edx,eax
c000c706:	88 d0                	mov    al,dl
c000c708:	83 e8 40             	sub    eax,0x40
c000c70b:	25 ff 00 00 00       	and    eax,0xff
c000c710:	83 ec 0c             	sub    esp,0xc
c000c713:	50                   	push   eax
c000c714:	e8 15 fb ff ff       	call   c000c22e <sendKeyToTerminal(unsigned char)>
c000c719:	83 c4 10             	add    esp,0x10
c000c71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71f:	66 3d 00 03          	cmp    ax,0x300
c000c723:	75 0f                	jne    c000c734 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c725:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c728:	83 f0 01             	xor    eax,0x1
c000c72b:	84 c0                	test   al,al
c000c72d:	74 05                	je     c000c734 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c72f:	e8 65 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c734:	90                   	nop
c000c735:	c9                   	leave  
c000c736:	c3                   	ret    

c000c737 <clearInternalKeybuffer(VgaText*)>:
c000c737:	55                   	push   ebp
c000c738:	89 e5                	mov    ebp,esp
c000c73a:	83 ec 08             	sub    esp,0x8
c000c73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c740:	05 b2 00 00 00       	add    eax,0xb2
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 f2 3d ff ff       	call   c0000540 <strlen>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c754:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c75a:	83 ec 04             	sub    esp,0x4
c000c75d:	50                   	push   eax
c000c75e:	6a 00                	push   0x0
c000c760:	52                   	push   edx
c000c761:	e8 6a 3d ff ff       	call   c00004d0 <memset>
c000c766:	83 c4 10             	add    esp,0x10
c000c769:	90                   	nop
c000c76a:	c9                   	leave  
c000c76b:	c3                   	ret    

c000c76c <readKeyboard(VgaText*, char*, unsigned long)>:
c000c76c:	55                   	push   ebp
c000c76d:	89 e5                	mov    ebp,esp
c000c76f:	83 ec 18             	sub    esp,0x18
c000c772:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c777:	85 c0                	test   eax,eax
c000c779:	74 2a                	je     c000c7a5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c77b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c781:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c787:	83 ec 04             	sub    esp,0x4
c000c78a:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c78f:	83 ec 08             	sub    esp,0x8
c000c792:	89 e2                	mov    edx,esp
c000c794:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c797:	89 02                	mov    DWORD PTR [edx],eax
c000c799:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c79c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7a0:	ff d1                	call   ecx
c000c7a2:	83 c4 10             	add    esp,0x10
c000c7a5:	fb                   	sti    
c000c7a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c7ad:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c7b1:	0f 84 db 00 00 00    	je     c000c892 <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c7b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ba:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7c0:	84 c0                	test   al,al
c000c7c2:	75 28                	jne    c000c7ec <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7c4:	fa                   	cli    
c000c7c5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7ca:	40                   	inc    eax
c000c7cb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c7d0:	e8 af 6f 00 00       	call   c0013784 <schedule()>
c000c7d5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7da:	48                   	dec    eax
c000c7db:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c7e0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7e5:	85 c0                	test   eax,eax
c000c7e7:	75 ce                	jne    c000c7b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7e9:	fb                   	sti    
c000c7ea:	eb cb                	jmp    c000c7b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7ef:	8d 50 01             	lea    edx,[eax+0x1]
c000c7f2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7f8:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7fe:	88 10                	mov    BYTE PTR [eax],dl
c000c800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c803:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c809:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c80c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c810:	75 2e                	jne    c000c840 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c812:	83 ec 0c             	sub    esp,0xc
c000c815:	68 94 e0 01 c0       	push   0xc001e094
c000c81a:	e8 f0 dc ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000c81f:	83 c4 10             	add    esp,0x10
c000c822:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c827:	8b 00                	mov    eax,DWORD PTR [eax]
c000c829:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c82c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c832:	83 ec 08             	sub    esp,0x8
c000c835:	6a 02                	push   0x2
c000c837:	50                   	push   eax
c000c838:	e8 3e 3d 00 00       	call   c001057b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c83d:	83 c4 10             	add    esp,0x10
c000c840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c843:	05 b2 00 00 00       	add    eax,0xb2
c000c848:	83 ec 0c             	sub    esp,0xc
c000c84b:	50                   	push   eax
c000c84c:	e8 ef 3c ff ff       	call   c0000540 <strlen>
c000c851:	83 c4 10             	add    esp,0x10
c000c854:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c857:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c85d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c860:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c863:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c869:	83 ec 04             	sub    esp,0x4
c000c86c:	50                   	push   eax
c000c86d:	51                   	push   ecx
c000c86e:	52                   	push   edx
c000c86f:	e8 6c 3b ff ff       	call   c00003e0 <memmove>
c000c874:	83 c4 10             	add    esp,0x10
c000c877:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c87a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c87d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c881:	74 0a                	je     c000c88d <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c883:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c887:	0f 85 20 ff ff ff    	jne    c000c7ad <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c88d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c890:	eb 03                	jmp    c000c895 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c892:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c895:	c9                   	leave  
c000c896:	c3                   	ret    
c000c897:	90                   	nop

c000c898 <Keyboard::Keyboard(char const*)>:
c000c898:	83 ec 0c             	sub    esp,0xc
c000c89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c89f:	83 ec 08             	sub    esp,0x8
c000c8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a6:	50                   	push   eax
c000c8a7:	e8 38 f2 ff ff       	call   c000bae4 <Device::Device(char const*)>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	ba ac e0 01 c0       	mov    edx,0xc001e0ac
c000c8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b8:	89 10                	mov    DWORD PTR [eax],edx
c000c8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8be:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c8c8:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c8cf:	90                   	nop
c000c8d0:	83 c4 0c             	add    esp,0xc
c000c8d3:	c3                   	ret    

c000c8d4 <Keyboard::~Keyboard()>:
c000c8d4:	83 ec 0c             	sub    esp,0xc
c000c8d7:	ba ac e0 01 c0       	mov    edx,0xc001e0ac
c000c8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e0:	89 10                	mov    DWORD PTR [eax],edx
c000c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e6:	83 ec 0c             	sub    esp,0xc
c000c8e9:	50                   	push   eax
c000c8ea:	e8 5f ef ff ff       	call   c000b84e <Device::~Device()>
c000c8ef:	83 c4 10             	add    esp,0x10
c000c8f2:	90                   	nop
c000c8f3:	83 c4 0c             	add    esp,0xc
c000c8f6:	c3                   	ret    
c000c8f7:	90                   	nop

c000c8f8 <Keyboard::~Keyboard()>:
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	83 ec 0c             	sub    esp,0xc
c000c8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c902:	e8 cd ff ff ff       	call   c000c8d4 <Keyboard::~Keyboard()>
c000c907:	83 c4 10             	add    esp,0x10
c000c90a:	83 ec 08             	sub    esp,0x8
c000c90d:	68 5c 01 00 00       	push   0x15c
c000c912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c916:	e8 fe da ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	83 c4 0c             	add    esp,0xc
c000c921:	c3                   	ret    

c000c922 <LogicalDisk::close(int, int, void*)>:
c000c922:	83 c8 ff             	or     eax,0xffffffff
c000c925:	c3                   	ret    

c000c926 <LogicalDisk::~LogicalDisk()>:
c000c926:	83 ec 0c             	sub    esp,0xc
c000c929:	ba 24 e1 01 c0       	mov    edx,0xc001e124
c000c92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c932:	89 10                	mov    DWORD PTR [eax],edx
c000c934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c938:	83 ec 0c             	sub    esp,0xc
c000c93b:	50                   	push   eax
c000c93c:	e8 0d ef ff ff       	call   c000b84e <Device::~Device()>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	90                   	nop
c000c945:	83 c4 0c             	add    esp,0xc
c000c948:	c3                   	ret    
c000c949:	90                   	nop

c000c94a <LogicalDisk::~LogicalDisk()>:
c000c94a:	83 ec 0c             	sub    esp,0xc
c000c94d:	83 ec 0c             	sub    esp,0xc
c000c950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c954:	e8 cd ff ff ff       	call   c000c926 <LogicalDisk::~LogicalDisk()>
c000c959:	83 c4 10             	add    esp,0x10
c000c95c:	83 ec 08             	sub    esp,0x8
c000c95f:	68 74 01 00 00       	push   0x174
c000c964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c968:	e8 ac da ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000c96d:	83 c4 10             	add    esp,0x10
c000c970:	83 c4 0c             	add    esp,0xc
c000c973:	c3                   	ret    

c000c974 <LogicalDisk::open(int, int, void*)>:
c000c974:	83 ec 18             	sub    esp,0x18
c000c977:	68 d8 e0 01 c0       	push   0xc001e0d8
c000c97c:	e8 0e 38 00 00       	call   c001018f <KePanic(char const*)>
c000c981:	83 c8 ff             	or     eax,0xffffffff
c000c984:	83 c4 1c             	add    esp,0x1c
c000c987:	c3                   	ret    

c000c988 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c988:	53                   	push   ebx
c000c989:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c98d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c991:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c995:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c99b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c9a1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c9a7:	77 10                	ja     c000c9b9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c9a9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c9af:	89 d3                	mov    ebx,edx
c000c9b1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c9b7:	72 05                	jb     c000c9be <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c9b9:	83 c8 ff             	or     eax,0xffffffff
c000c9bc:	89 c2                	mov    edx,eax
c000c9be:	5b                   	pop    ebx
c000c9bf:	c3                   	ret    

c000c9c0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c9c0:	56                   	push   esi
c000c9c1:	83 c8 ff             	or     eax,0xffffffff
c000c9c4:	53                   	push   ebx
c000c9c5:	89 c2                	mov    edx,eax
c000c9c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c9cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c9cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c9d9:	77 27                	ja     c000ca02 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9db:	89 d8                	mov    eax,ebx
c000c9dd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c9e3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c9e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9ee:	89 c2                	mov    edx,eax
c000c9f0:	73 10                	jae    c000ca02 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9f2:	89 c8                	mov    eax,ecx
c000c9f4:	89 da                	mov    edx,ebx
c000c9f6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9fc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca02:	5b                   	pop    ebx
c000ca03:	5e                   	pop    esi
c000ca04:	c3                   	ret    
c000ca05:	90                   	nop

c000ca06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca06:	83 ec 1c             	sub    esp,0x1c
c000ca09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca1d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2c:	83 ec 08             	sub    esp,0x8
c000ca2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca33:	50                   	push   eax
c000ca34:	e8 ab f0 ff ff       	call   c000bae4 <Device::Device(char const*)>
c000ca39:	83 c4 10             	add    esp,0x10
c000ca3c:	ba 24 e1 01 c0       	mov    edx,0xc001e124
c000ca41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca45:	89 10                	mov    DWORD PTR [eax],edx
c000ca47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca56:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca6b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca77:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca7d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca83:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca87:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca8e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca94:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000caa2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000caa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caac:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cab6:	90                   	nop
c000cab7:	83 c4 1c             	add    esp,0x1c
c000caba:	c3                   	ret    
c000cabb:	90                   	nop

c000cabc <LogicalDisk::assignDriveLetter()>:
c000cabc:	55                   	push   ebp
c000cabd:	57                   	push   edi
c000cabe:	56                   	push   esi
c000cabf:	53                   	push   ebx
c000cac0:	83 ec 14             	sub    esp,0x14
c000cac3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cac7:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cacd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cad3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cad7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cadd:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cae3:	3c 01                	cmp    al,0x1
c000cae5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cae9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000caed:	19 c0                	sbb    eax,eax
c000caef:	83 e0 02             	and    eax,0x2
c000caf2:	83 c0 41             	add    eax,0x41
c000caf5:	0f be e8             	movsx  ebp,al
c000caf8:	3c 43                	cmp    al,0x43
c000cafa:	75 10                	jne    c000cb0c <LogicalDisk::assignDriveLetter()+0x50>
c000cafc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb03:	75 5d                	jne    c000cb62 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb05:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb0a:	75 56                	jne    c000cb62 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb0c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb0f:	ba 01 00 00 00       	mov    edx,0x1
c000cb14:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb18:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb1c:	d3 e2                	shl    edx,cl
c000cb1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb22:	89 d7                	mov    edi,edx
c000cb24:	89 d6                	mov    esi,edx
c000cb26:	c1 ff 1f             	sar    edi,0x1f
c000cb29:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb2d:	21 f9                	and    ecx,edi
c000cb2f:	09 d1                	or     ecx,edx
c000cb31:	75 2f                	jne    c000cb62 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb33:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb3b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb41:	09 f2                	or     edx,esi
c000cb43:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cb49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb4d:	09 fa                	or     edx,edi
c000cb4f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb53:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cb59:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cb60:	eb 08                	jmp    c000cb6a <LogicalDisk::assignDriveLetter()+0xae>
c000cb62:	45                   	inc    ebp
c000cb63:	40                   	inc    eax
c000cb64:	3c 5b                	cmp    al,0x5b
c000cb66:	75 90                	jne    c000caf8 <LogicalDisk::assignDriveLetter()+0x3c>
c000cb68:	31 c0                	xor    eax,eax
c000cb6a:	83 c4 14             	add    esp,0x14
c000cb6d:	5b                   	pop    ebx
c000cb6e:	5e                   	pop    esi
c000cb6f:	5f                   	pop    edi
c000cb70:	5d                   	pop    ebp
c000cb71:	c3                   	ret    

c000cb72 <LogicalDisk::mount()>:
c000cb72:	56                   	push   esi
c000cb73:	53                   	push   ebx
c000cb74:	53                   	push   ebx
c000cb75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb79:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cb7f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb89:	85 db                	test   ebx,ebx
c000cb8b:	74 27                	je     c000cbb4 <LogicalDisk::mount()+0x42>
c000cb8d:	51                   	push   ecx
c000cb8e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb95:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb97:	83 e8 41             	sub    eax,0x41
c000cb9a:	50                   	push   eax
c000cb9b:	56                   	push   esi
c000cb9c:	53                   	push   ebx
c000cb9d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cba0:	83 c4 10             	add    esp,0x10
c000cba3:	84 c0                	test   al,al
c000cba5:	74 08                	je     c000cbaf <LogicalDisk::mount()+0x3d>
c000cba7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cbad:	eb 07                	jmp    c000cbb6 <LogicalDisk::mount()+0x44>
c000cbaf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cbb2:	eb d5                	jmp    c000cb89 <LogicalDisk::mount()+0x17>
c000cbb4:	31 c0                	xor    eax,eax
c000cbb6:	5a                   	pop    edx
c000cbb7:	5b                   	pop    ebx
c000cbb8:	5e                   	pop    esi
c000cbb9:	c3                   	ret    

c000cbba <LogicalDisk::unmount()>:
c000cbba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbbe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cbc8:	c3                   	ret    
c000cbc9:	90                   	nop

c000cbca <LogicalDisk::eject()>:
c000cbca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cbd4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbda:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cbdd:	90                   	nop

c000cbde <LogicalDisk::unassignDriveLetter()>:
c000cbde:	57                   	push   edi
c000cbdf:	56                   	push   esi
c000cbe0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbe4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cbeb:	84 c9                	test   cl,cl
c000cbed:	75 0f                	jne    c000cbfe <LogicalDisk::unassignDriveLetter()+0x20>
c000cbef:	c7 44 24 0c fc e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0fc
c000cbf7:	5e                   	pop    esi
c000cbf8:	5f                   	pop    edi
c000cbf9:	e9 91 35 00 00       	jmp    c001018f <KePanic(char const*)>
c000cbfe:	83 e9 41             	sub    ecx,0x41
c000cc01:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc08:	b8 01 00 00 00       	mov    eax,0x1
c000cc0d:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cc18:	d3 e0                	shl    eax,cl
c000cc1a:	89 c7                	mov    edi,eax
c000cc1c:	f7 d0                	not    eax
c000cc1e:	c1 ff 1f             	sar    edi,0x1f
c000cc21:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cc27:	89 fe                	mov    esi,edi
c000cc29:	f7 d6                	not    esi
c000cc2b:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cc31:	5e                   	pop    esi
c000cc32:	5f                   	pop    edi
c000cc33:	c3                   	ret    

c000cc34 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc34:	57                   	push   edi
c000cc35:	56                   	push   esi
c000cc36:	53                   	push   ebx
c000cc37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc47:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc4d:	77 41                	ja     c000cc90 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc4f:	99                   	cdq    
c000cc50:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc56:	01 c8                	add    eax,ecx
c000cc58:	11 da                	adc    edx,ebx
c000cc5a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc60:	19 d7                	sbb    edi,edx
c000cc62:	72 33                	jb     c000cc97 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc64:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc6a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc74:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc78:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc7e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc88:	5b                   	pop    ebx
c000cc89:	5e                   	pop    esi
c000cc8a:	5f                   	pop    edi
c000cc8b:	e9 4e 0a 00 00       	jmp    c000d6de <VCache::read(unsigned long long, int, void*)>
c000cc90:	b8 05 00 00 00       	mov    eax,0x5
c000cc95:	eb 05                	jmp    c000cc9c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc97:	b8 07 00 00 00       	mov    eax,0x7
c000cc9c:	5b                   	pop    ebx
c000cc9d:	5e                   	pop    esi
c000cc9e:	5f                   	pop    edi
c000cc9f:	c3                   	ret    

c000cca0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cca0:	57                   	push   edi
c000cca1:	56                   	push   esi
c000cca2:	53                   	push   ebx
c000cca3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cca7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccb3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ccb9:	77 41                	ja     c000ccfc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ccbb:	99                   	cdq    
c000ccbc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccc2:	01 c8                	add    eax,ecx
c000ccc4:	11 da                	adc    edx,ebx
c000ccc6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cccc:	19 d7                	sbb    edi,edx
c000ccce:	72 33                	jb     c000cd03 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ccd0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccd6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ccdc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cce0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cce4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf4:	5b                   	pop    ebx
c000ccf5:	5e                   	pop    esi
c000ccf6:	5f                   	pop    edi
c000ccf7:	e9 cc 08 00 00       	jmp    c000d5c8 <VCache::write(unsigned long long, int, void*)>
c000ccfc:	b8 05 00 00 00       	mov    eax,0x5
c000cd01:	eb 05                	jmp    c000cd08 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd03:	b8 07 00 00 00       	mov    eax,0x7
c000cd08:	5b                   	pop    ebx
c000cd09:	5e                   	pop    esi
c000cd0a:	5f                   	pop    edi
c000cd0b:	c3                   	ret    

c000cd0c <Mouse::Mouse(char const*)>:
c000cd0c:	83 ec 0c             	sub    esp,0xc
c000cd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd13:	83 ec 08             	sub    esp,0x8
c000cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1a:	50                   	push   eax
c000cd1b:	e8 c4 ed ff ff       	call   c000bae4 <Device::Device(char const*)>
c000cd20:	83 c4 10             	add    esp,0x10
c000cd23:	ba 50 e1 01 c0       	mov    edx,0xc001e150
c000cd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2c:	89 10                	mov    DWORD PTR [eax],edx
c000cd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd32:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd3c:	90                   	nop
c000cd3d:	83 c4 0c             	add    esp,0xc
c000cd40:	c3                   	ret    
c000cd41:	90                   	nop
c000cd42:	66 90                	xchg   ax,ax

c000cd44 <Mouse::~Mouse()>:
c000cd44:	83 ec 0c             	sub    esp,0xc
c000cd47:	ba 50 e1 01 c0       	mov    edx,0xc001e150
c000cd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd50:	89 10                	mov    DWORD PTR [eax],edx
c000cd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd56:	83 ec 0c             	sub    esp,0xc
c000cd59:	50                   	push   eax
c000cd5a:	e8 ef ea ff ff       	call   c000b84e <Device::~Device()>
c000cd5f:	83 c4 10             	add    esp,0x10
c000cd62:	90                   	nop
c000cd63:	83 c4 0c             	add    esp,0xc
c000cd66:	c3                   	ret    
c000cd67:	90                   	nop

c000cd68 <Mouse::~Mouse()>:
c000cd68:	83 ec 0c             	sub    esp,0xc
c000cd6b:	83 ec 0c             	sub    esp,0xc
c000cd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd72:	e8 cd ff ff ff       	call   c000cd44 <Mouse::~Mouse()>
c000cd77:	83 c4 10             	add    esp,0x10
c000cd7a:	83 ec 08             	sub    esp,0x8
c000cd7d:	68 58 01 00 00       	push   0x158
c000cd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd86:	e8 8e d6 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000cd8b:	83 c4 10             	add    esp,0x10
c000cd8e:	83 c4 0c             	add    esp,0xc
c000cd91:	c3                   	ret    

c000cd92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd92:	55                   	push   ebp
c000cd93:	57                   	push   edi
c000cd94:	56                   	push   esi
c000cd95:	53                   	push   ebx
c000cd96:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd9c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cda3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cdaa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cdb1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cdb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cdbc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cdc0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdc7:	e8 14 ee ff ff       	call   c000bbe0 <Device::getName()>
c000cdcc:	5a                   	pop    edx
c000cdcd:	59                   	pop    ecx
c000cdce:	50                   	push   eax
c000cdcf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cdd3:	55                   	push   ebp
c000cdd4:	e8 27 38 ff ff       	call   c0000600 <strcpy>
c000cdd9:	5b                   	pop    ebx
c000cdda:	58                   	pop    eax
c000cddb:	68 74 e1 01 c0       	push   0xc001e174
c000cde0:	55                   	push   ebp
c000cde1:	e8 da 39 ff ff       	call   c00007c0 <strcat>
c000cde6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cded:	e8 c7 a9 ff ff       	call   c00077b9 <malloc>
c000cdf2:	83 c4 0c             	add    esp,0xc
c000cdf5:	89 c3                	mov    ebx,eax
c000cdf7:	57                   	push   edi
c000cdf8:	56                   	push   esi
c000cdf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce01:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce08:	55                   	push   ebp
c000ce09:	50                   	push   eax
c000ce0a:	e8 f7 fb ff ff       	call   c000ca06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce0f:	83 c4 14             	add    esp,0x14
c000ce12:	53                   	push   ebx
c000ce13:	e8 a4 fc ff ff       	call   c000cabc <LogicalDisk::assignDriveLetter()>
c000ce18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce1b:	e8 52 fd ff ff       	call   c000cb72 <LogicalDisk::mount()>
c000ce20:	58                   	pop    eax
c000ce21:	5a                   	pop    edx
c000ce22:	53                   	push   ebx
c000ce23:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce2a:	e8 1d eb ff ff       	call   c000b94c <Device::addChild(Device*)>
c000ce2f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce35:	5b                   	pop    ebx
c000ce36:	5e                   	pop    esi
c000ce37:	5f                   	pop    edi
c000ce38:	5d                   	pop    ebp
c000ce39:	c3                   	ret    

c000ce3a <createPartitionsForDisk(PhysicalDisk*)>:
c000ce3a:	55                   	push   ebp
c000ce3b:	57                   	push   edi
c000ce3c:	56                   	push   esi
c000ce3d:	53                   	push   ebx
c000ce3e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce44:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce51:	3d 00 02 00 00       	cmp    eax,0x200
c000ce56:	74 27                	je     c000ce7f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce58:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce5e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce64:	83 ec 10             	sub    esp,0x10
c000ce67:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce6b:	99                   	cdq    
c000ce6c:	c1 e6 0a             	shl    esi,0xa
c000ce6f:	52                   	push   edx
c000ce70:	89 fd                	mov    ebp,edi
c000ce72:	50                   	push   eax
c000ce73:	55                   	push   ebp
c000ce74:	56                   	push   esi
c000ce75:	e8 66 f2 00 00       	call   c001c0e0 <__udivdi3>
c000ce7a:	e9 b1 00 00 00       	jmp    c000cf30 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce7f:	83 ec 0c             	sub    esp,0xc
c000ce82:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce84:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce88:	56                   	push   esi
c000ce89:	6a 01                	push   0x1
c000ce8b:	6a 00                	push   0x0
c000ce8d:	6a 00                	push   0x0
c000ce8f:	53                   	push   ebx
c000ce90:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce93:	83 c4 20             	add    esp,0x20
c000ce96:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce9e:	75 0a                	jne    c000ceaa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cea0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cea8:	74 2c                	je     c000ced6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ceaa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ceb0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ceb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cebc:	83 ec 10             	sub    esp,0x10
c000cebf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cec3:	89 f7                	mov    edi,esi
c000cec5:	c1 e0 0a             	shl    eax,0xa
c000cec8:	c1 ff 1f             	sar    edi,0x1f
c000cecb:	57                   	push   edi
c000cecc:	56                   	push   esi
c000cecd:	52                   	push   edx
c000cece:	50                   	push   eax
c000cecf:	e8 0c f2 00 00       	call   c001c0e0 <__udivdi3>
c000ced4:	eb 5a                	jmp    c000cf30 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ced6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cedd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cee4:	83 e1 7f             	and    ecx,0x7f
c000cee7:	83 e0 7f             	and    eax,0x7f
c000ceea:	01 c1                	add    ecx,eax
c000ceec:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cef3:	83 e0 7f             	and    eax,0x7f
c000cef6:	01 c1                	add    ecx,eax
c000cef8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ceff:	83 e0 7f             	and    eax,0x7f
c000cf02:	00 c1                	add    cl,al
c000cf04:	74 41                	je     c000cf47 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf06:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf0c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf18:	83 ec 10             	sub    esp,0x10
c000cf1b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf1f:	89 f7                	mov    edi,esi
c000cf21:	c1 e0 0a             	shl    eax,0xa
c000cf24:	c1 ff 1f             	sar    edi,0x1f
c000cf27:	57                   	push   edi
c000cf28:	56                   	push   esi
c000cf29:	52                   	push   edx
c000cf2a:	50                   	push   eax
c000cf2b:	e8 b0 f1 00 00       	call   c001c0e0 <__udivdi3>
c000cf30:	83 c4 14             	add    esp,0x14
c000cf33:	52                   	push   edx
c000cf34:	50                   	push   eax
c000cf35:	6a 00                	push   0x0
c000cf37:	6a 00                	push   0x0
c000cf39:	53                   	push   ebx
c000cf3a:	e8 53 fe ff ff       	call   c000cd92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf3f:	83 c4 20             	add    esp,0x20
c000cf42:	e9 79 01 00 00       	jmp    c000d0c0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf47:	89 f0                	mov    eax,esi
c000cf49:	31 f6                	xor    esi,esi
c000cf4b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf52:	75 02                	jne    c000cf56 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf54:	89 f1                	mov    ecx,esi
c000cf56:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf5d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf64:	c1 e2 08             	shl    edx,0x8
c000cf67:	c1 e7 10             	shl    edi,0x10
c000cf6a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf72:	09 fa                	or     edx,edi
c000cf74:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf7c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf83:	83 c0 10             	add    eax,0x10
c000cf86:	09 fa                	or     edx,edi
c000cf88:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf8f:	c1 e7 18             	shl    edi,0x18
c000cf92:	09 fa                	or     edx,edi
c000cf94:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf9b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf9f:	c1 e7 10             	shl    edi,0x10
c000cfa2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cfa9:	c1 e2 08             	shl    edx,0x8
c000cfac:	09 fa                	or     edx,edi
c000cfae:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cfb5:	09 fa                	or     edx,edi
c000cfb7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cfbe:	c1 e7 18             	shl    edi,0x18
c000cfc1:	09 fa                	or     edx,edi
c000cfc3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cfc7:	46                   	inc    esi
c000cfc8:	83 fe 04             	cmp    esi,0x4
c000cfcb:	0f 85 7a ff ff ff    	jne    c000cf4b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cfd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd5:	83 f0 01             	xor    eax,0x1
c000cfd8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cfdc:	75 57                	jne    c000d035 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfe2:	83 f0 01             	xor    eax,0x1
c000cfe5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cfe9:	75 4a                	jne    c000d035 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfeb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cfef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cff7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d005:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d00b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d011:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d015:	89 f7                	mov    edi,esi
c000d017:	c1 e0 0a             	shl    eax,0xa
c000d01a:	c1 ff 1f             	sar    edi,0x1f
c000d01d:	57                   	push   edi
c000d01e:	56                   	push   esi
c000d01f:	52                   	push   edx
c000d020:	50                   	push   eax
c000d021:	e8 ba f0 00 00       	call   c001c0e0 <__udivdi3>
c000d026:	83 c4 10             	add    esp,0x10
c000d029:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d02d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d031:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d035:	84 c9                	test   cl,cl
c000d037:	74 53                	je     c000d08c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d039:	0f b6 c9             	movzx  ecx,cl
c000d03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d040:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d044:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d048:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d04c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d050:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d054:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d058:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d05c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d060:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d06c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d070:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d074:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d078:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d07c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d080:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d084:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d088:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d08c:	31 ed                	xor    ebp,ebp
c000d08e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d092:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d096:	89 f8                	mov    eax,edi
c000d098:	09 f0                	or     eax,esi
c000d09a:	74 1e                	je     c000d0ba <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d09c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d0a0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d0a4:	89 d1                	mov    ecx,edx
c000d0a6:	09 c1                	or     ecx,eax
c000d0a8:	74 10                	je     c000d0ba <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0aa:	83 ec 0c             	sub    esp,0xc
c000d0ad:	57                   	push   edi
c000d0ae:	56                   	push   esi
c000d0af:	52                   	push   edx
c000d0b0:	50                   	push   eax
c000d0b1:	53                   	push   ebx
c000d0b2:	e8 db fc ff ff       	call   c000cd92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0b7:	83 c4 20             	add    esp,0x20
c000d0ba:	45                   	inc    ebp
c000d0bb:	83 fd 04             	cmp    ebp,0x4
c000d0be:	75 ce                	jne    c000d08e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d0c0:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d0c6:	5b                   	pop    ebx
c000d0c7:	5e                   	pop    esi
c000d0c8:	5f                   	pop    edi
c000d0c9:	5d                   	pop    ebp
c000d0ca:	c3                   	ret    
c000d0cb:	90                   	nop

c000d0cc <Serial::Serial(char const*)>:
c000d0cc:	83 ec 0c             	sub    esp,0xc
c000d0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d3:	83 ec 08             	sub    esp,0x8
c000d0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0da:	50                   	push   eax
c000d0db:	e8 04 ea ff ff       	call   c000bae4 <Device::Device(char const*)>
c000d0e0:	83 c4 10             	add    esp,0x10
c000d0e3:	ba 88 e1 01 c0       	mov    edx,0xc001e188
c000d0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ec:	89 10                	mov    DWORD PTR [eax],edx
c000d0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0fc:	90                   	nop
c000d0fd:	83 c4 0c             	add    esp,0xc
c000d100:	c3                   	ret    
c000d101:	90                   	nop
c000d102:	66 90                	xchg   ax,ax

c000d104 <Serial::~Serial()>:
c000d104:	83 ec 0c             	sub    esp,0xc
c000d107:	ba 88 e1 01 c0       	mov    edx,0xc001e188
c000d10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d110:	89 10                	mov    DWORD PTR [eax],edx
c000d112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d116:	83 ec 0c             	sub    esp,0xc
c000d119:	50                   	push   eax
c000d11a:	e8 2f e7 ff ff       	call   c000b84e <Device::~Device()>
c000d11f:	83 c4 10             	add    esp,0x10
c000d122:	90                   	nop
c000d123:	83 c4 0c             	add    esp,0xc
c000d126:	c3                   	ret    
c000d127:	90                   	nop

c000d128 <Serial::~Serial()>:
c000d128:	83 ec 0c             	sub    esp,0xc
c000d12b:	83 ec 0c             	sub    esp,0xc
c000d12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d132:	e8 cd ff ff ff       	call   c000d104 <Serial::~Serial()>
c000d137:	83 c4 10             	add    esp,0x10
c000d13a:	83 ec 08             	sub    esp,0x8
c000d13d:	68 58 01 00 00       	push   0x158
c000d142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d146:	e8 ce d2 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000d14b:	83 c4 10             	add    esp,0x10
c000d14e:	83 c4 0c             	add    esp,0xc
c000d151:	c3                   	ret    
c000d152:	66 90                	xchg   ax,ax

c000d154 <Timer::Timer(char const*)>:
c000d154:	83 ec 0c             	sub    esp,0xc
c000d157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d15b:	83 ec 08             	sub    esp,0x8
c000d15e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d162:	50                   	push   eax
c000d163:	e8 7c e9 ff ff       	call   c000bae4 <Device::Device(char const*)>
c000d168:	83 c4 10             	add    esp,0x10
c000d16b:	ba cc e1 01 c0       	mov    edx,0xc001e1cc
c000d170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d174:	89 10                	mov    DWORD PTR [eax],edx
c000d176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d184:	90                   	nop
c000d185:	83 c4 0c             	add    esp,0xc
c000d188:	c3                   	ret    
c000d189:	90                   	nop
c000d18a:	66 90                	xchg   ax,ax

c000d18c <Timer::~Timer()>:
c000d18c:	83 ec 0c             	sub    esp,0xc
c000d18f:	ba cc e1 01 c0       	mov    edx,0xc001e1cc
c000d194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d198:	89 10                	mov    DWORD PTR [eax],edx
c000d19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d19e:	83 ec 0c             	sub    esp,0xc
c000d1a1:	50                   	push   eax
c000d1a2:	e8 a7 e6 ff ff       	call   c000b84e <Device::~Device()>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	90                   	nop
c000d1ab:	83 c4 0c             	add    esp,0xc
c000d1ae:	c3                   	ret    
c000d1af:	90                   	nop

c000d1b0 <Timer::~Timer()>:
c000d1b0:	83 ec 0c             	sub    esp,0xc
c000d1b3:	83 ec 0c             	sub    esp,0xc
c000d1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ba:	e8 cd ff ff ff       	call   c000d18c <Timer::~Timer()>
c000d1bf:	83 c4 10             	add    esp,0x10
c000d1c2:	83 ec 08             	sub    esp,0x8
c000d1c5:	68 5c 01 00 00       	push   0x15c
c000d1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ce:	e8 46 d2 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000d1d3:	83 c4 10             	add    esp,0x10
c000d1d6:	83 c4 0c             	add    esp,0xc
c000d1d9:	c3                   	ret    

c000d1da <Timer::read()>:
c000d1da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1e4:	c3                   	ret    

c000d1e5 <setupTimer(int)>:
c000d1e5:	53                   	push   ebx
c000d1e6:	83 ec 14             	sub    esp,0x14
c000d1e9:	68 5c 01 00 00       	push   0x15c
c000d1ee:	e8 c6 a5 ff ff       	call   c00077b9 <malloc>
c000d1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1f6:	89 c3                	mov    ebx,eax
c000d1f8:	e8 fb e7 00 00       	call   c001b9f8 <PIT::PIT()>
c000d1fd:	58                   	pop    eax
c000d1fe:	5a                   	pop    edx
c000d1ff:	53                   	push   ebx
c000d200:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d206:	e8 41 e7 ff ff       	call   c000b94c <Device::addChild(Device*)>
c000d20b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d20d:	6a 00                	push   0x0
c000d20f:	6a 00                	push   0x0
c000d211:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d215:	53                   	push   ebx
c000d216:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d219:	89 d8                	mov    eax,ebx
c000d21b:	83 c4 28             	add    esp,0x28
c000d21e:	5b                   	pop    ebx
c000d21f:	c3                   	ret    

c000d220 <timerHandler(unsigned int)>:
c000d220:	56                   	push   esi
c000d221:	53                   	push   ebx
c000d222:	51                   	push   ecx
c000d223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d227:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d22d:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d234:	0f 84 4a 01 00 00    	je     c000d384 <timerHandler(unsigned int)+0x164>
c000d23a:	fa                   	cli    
c000d23b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d241:	83 ec 0c             	sub    esp,0xc
c000d244:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d24a:	68 78 51 02 c0       	push   0xc0025178
c000d24f:	e8 5c f4 00 00       	call   c001c6b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	84 c0                	test   al,al
c000d259:	0f 85 a1 00 00 00    	jne    c000d300 <timerHandler(unsigned int)+0xe0>
c000d25f:	83 ec 0c             	sub    esp,0xc
c000d262:	68 78 51 02 c0       	push   0xc0025178
c000d267:	e8 60 f4 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d26c:	83 c4 10             	add    esp,0x10
c000d26f:	89 c6                	mov    esi,eax
c000d271:	8d 76 00             	lea    esi,[esi+0x0]
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	68 78 51 02 c0       	push   0xc0025178
c000d27c:	e8 4b f4 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d281:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d288:	89 c3                	mov    ebx,eax
c000d28a:	e8 45 f4 00 00       	call   c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d28f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d292:	83 c4 10             	add    esp,0x10
c000d295:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d29b:	77 23                	ja     c000d2c0 <timerHandler(unsigned int)+0xa0>
c000d29d:	83 ec 0c             	sub    esp,0xc
c000d2a0:	53                   	push   ebx
c000d2a1:	e8 a2 69 00 00       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	39 de                	cmp    esi,ebx
c000d2ab:	75 27                	jne    c000d2d4 <timerHandler(unsigned int)+0xb4>
c000d2ad:	83 ec 0c             	sub    esp,0xc
c000d2b0:	68 78 51 02 c0       	push   0xc0025178
c000d2b5:	e8 12 f4 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2ba:	89 c6                	mov    esi,eax
c000d2bc:	eb 12                	jmp    c000d2d0 <timerHandler(unsigned int)+0xb0>
c000d2be:	66 90                	xchg   ax,ax
c000d2c0:	52                   	push   edx
c000d2c1:	52                   	push   edx
c000d2c2:	53                   	push   ebx
c000d2c3:	68 78 51 02 c0       	push   0xc0025178
c000d2c8:	e8 bf f4 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2d0:	83 c4 10             	add    esp,0x10
c000d2d3:	90                   	nop
c000d2d4:	83 ec 0c             	sub    esp,0xc
c000d2d7:	68 78 51 02 c0       	push   0xc0025178
c000d2dc:	e8 cf f3 00 00       	call   c001c6b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	84 c0                	test   al,al
c000d2e6:	75 18                	jne    c000d300 <timerHandler(unsigned int)+0xe0>
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	68 78 51 02 c0       	push   0xc0025178
c000d2f0:	e8 d7 f3 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2f5:	83 c4 10             	add    esp,0x10
c000d2f8:	39 f0                	cmp    eax,esi
c000d2fa:	0f 85 74 ff ff ff    	jne    c000d274 <timerHandler(unsigned int)+0x54>
c000d300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d305:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d309:	74 41                	je     c000d34c <timerHandler(unsigned int)+0x12c>
c000d30b:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d312:	74 38                	je     c000d34c <timerHandler(unsigned int)+0x12c>
c000d314:	fa                   	cli    
c000d315:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d31b:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d320:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d326:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d329:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d32f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d332:	72 08                	jb     c000d33c <timerHandler(unsigned int)+0x11c>
c000d334:	e8 4b 64 00 00       	call   c0013784 <schedule()>
c000d339:	8d 76 00             	lea    esi,[esi+0x0]
c000d33c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d341:	48                   	dec    eax
c000d342:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d347:	75 03                	jne    c000d34c <timerHandler(unsigned int)+0x12c>
c000d349:	fb                   	sti    
c000d34a:	66 90                	xchg   ax,ax
c000d34c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d351:	48                   	dec    eax
c000d352:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d357:	75 1b                	jne    c000d374 <timerHandler(unsigned int)+0x154>
c000d359:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d360:	74 12                	je     c000d374 <timerHandler(unsigned int)+0x154>
c000d362:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d36c:	e8 13 64 00 00       	call   c0013784 <schedule()>
c000d371:	8d 76 00             	lea    esi,[esi+0x0]
c000d374:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d379:	48                   	dec    eax
c000d37a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d37f:	75 03                	jne    c000d384 <timerHandler(unsigned int)+0x164>
c000d381:	fb                   	sti    
c000d382:	66 90                	xchg   ax,ax
c000d384:	58                   	pop    eax
c000d385:	5b                   	pop    ebx
c000d386:	5e                   	pop    esi
c000d387:	c3                   	ret    

c000d388 <VCache::VCache(PhysicalDisk*)>:
c000d388:	53                   	push   ebx
c000d389:	83 ec 18             	sub    esp,0x18
c000d38c:	ba fc e1 01 c0       	mov    edx,0xc001e1fc
c000d391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d395:	89 10                	mov    DWORD PTR [eax],edx
c000d397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d3ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d3b8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d3bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d3ca:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d3dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d3ef:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3fa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d402:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d40e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d412:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d419:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d421:	83 ec 0c             	sub    esp,0xc
c000d424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d428:	e8 8c a3 ff ff       	call   c00077b9 <malloc>
c000d42d:	83 c4 10             	add    esp,0x10
c000d430:	89 c3                	mov    ebx,eax
c000d432:	83 ec 0c             	sub    esp,0xc
c000d435:	53                   	push   ebx
c000d436:	e8 15 61 00 00       	call   c0013550 <Mutex::Mutex()>
c000d43b:	83 c4 10             	add    esp,0x10
c000d43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d442:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d449:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d44d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d454:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d45b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d45f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d469:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d46c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d470:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d47c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d480:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d483:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d48e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d492:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d498:	05 00 01 00 00       	add    eax,0x100
c000d49d:	c1 e0 04             	shl    eax,0x4
c000d4a0:	83 ec 0c             	sub    esp,0xc
c000d4a3:	50                   	push   eax
c000d4a4:	e8 10 a3 ff ff       	call   c00077b9 <malloc>
c000d4a9:	83 c4 10             	add    esp,0x10
c000d4ac:	89 c2                	mov    edx,eax
c000d4ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d4c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4cc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4d2:	c1 e0 06             	shl    eax,0x6
c000d4d5:	83 ec 0c             	sub    esp,0xc
c000d4d8:	50                   	push   eax
c000d4d9:	e8 db a2 ff ff       	call   c00077b9 <malloc>
c000d4de:	83 c4 10             	add    esp,0x10
c000d4e1:	89 c2                	mov    edx,eax
c000d4e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4ea:	90                   	nop
c000d4eb:	83 c4 18             	add    esp,0x18
c000d4ee:	5b                   	pop    ebx
c000d4ef:	c3                   	ret    

c000d4f0 <VCache::invalidateReadBuffer()>:
c000d4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4f4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4fa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4fe:	c3                   	ret    
c000d4ff:	90                   	nop

c000d500 <VCache::writeWriteBuffer()>:
c000d500:	53                   	push   ebx
c000d501:	83 ec 08             	sub    esp,0x8
c000d504:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d508:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d50c:	74 1e                	je     c000d52c <VCache::writeWriteBuffer()+0x2c>
c000d50e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	8b 10                	mov    edx,DWORD PTR [eax]
c000d516:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d519:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d51c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d51f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d522:	50                   	push   eax
c000d523:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d526:	83 c4 20             	add    esp,0x20
c000d529:	8d 76 00             	lea    esi,[esi+0x0]
c000d52c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d533:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d53a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d53e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d545:	83 c4 08             	add    esp,0x8
c000d548:	5b                   	pop    ebx
c000d549:	c3                   	ret    
c000d54a:	66 90                	xchg   ax,ax

c000d54c <VCache::~VCache()>:
c000d54c:	83 ec 0c             	sub    esp,0xc
c000d54f:	ba fc e1 01 c0       	mov    edx,0xc001e1fc
c000d554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d558:	89 10                	mov    DWORD PTR [eax],edx
c000d55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d561:	84 c0                	test   al,al
c000d563:	74 0f                	je     c000d574 <VCache::~VCache()+0x28>
c000d565:	83 ec 0c             	sub    esp,0xc
c000d568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56c:	e8 8f ff ff ff       	call   c000d500 <VCache::writeWriteBuffer()>
c000d571:	83 c4 10             	add    esp,0x10
c000d574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d578:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	50                   	push   eax
c000d57f:	e8 45 a2 ff ff       	call   c00077c9 <free>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d58b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d58e:	83 ec 0c             	sub    esp,0xc
c000d591:	50                   	push   eax
c000d592:	e8 32 a2 ff ff       	call   c00077c9 <free>
c000d597:	83 c4 10             	add    esp,0x10
c000d59a:	90                   	nop
c000d59b:	83 c4 0c             	add    esp,0xc
c000d59e:	c3                   	ret    
c000d59f:	90                   	nop

c000d5a0 <VCache::~VCache()>:
c000d5a0:	83 ec 0c             	sub    esp,0xc
c000d5a3:	83 ec 0c             	sub    esp,0xc
c000d5a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5aa:	e8 9d ff ff ff       	call   c000d54c <VCache::~VCache()>
c000d5af:	83 c4 10             	add    esp,0x10
c000d5b2:	83 ec 08             	sub    esp,0x8
c000d5b5:	6a 44                	push   0x44
c000d5b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5bb:	e8 59 ce ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000d5c0:	83 c4 10             	add    esp,0x10
c000d5c3:	83 c4 0c             	add    esp,0xc
c000d5c6:	c3                   	ret    
c000d5c7:	90                   	nop

c000d5c8 <VCache::write(unsigned long long, int, void*)>:
c000d5c8:	55                   	push   ebp
c000d5c9:	57                   	push   edi
c000d5ca:	56                   	push   esi
c000d5cb:	53                   	push   ebx
c000d5cc:	83 ec 1c             	sub    esp,0x1c
c000d5cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d5d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5db:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d5df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5e3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d5e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5eb:	31 c0                	xor    eax,eax
c000d5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f0:	39 e8                	cmp    eax,ebp
c000d5f2:	7d 18                	jge    c000d60c <VCache::write(unsigned long long, int, void*)+0x44>
c000d5f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5f7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5fd:	0f af c8             	imul   ecx,eax
c000d600:	89 ca                	mov    edx,ecx
c000d602:	01 f2                	add    edx,esi
c000d604:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d606:	40                   	inc    eax
c000d607:	eb e7                	jmp    c000d5f0 <VCache::write(unsigned long long, int, void*)+0x28>
c000d609:	8d 76 00             	lea    esi,[esi+0x0]
c000d60c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d610:	74 0a                	je     c000d61c <VCache::write(unsigned long long, int, void*)+0x54>
c000d612:	53                   	push   ebx
c000d613:	e8 d8 fe ff ff       	call   c000d4f0 <VCache::invalidateReadBuffer()>
c000d618:	58                   	pop    eax
c000d619:	8d 76 00             	lea    esi,[esi+0x0]
c000d61c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d620:	74 5a                	je     c000d67c <VCache::write(unsigned long long, int, void*)+0xb4>
c000d622:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d625:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d629:	89 f8                	mov    eax,edi
c000d62b:	99                   	cdq    
c000d62c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d62f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d632:	31 c1                	xor    ecx,eax
c000d634:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d638:	31 d0                	xor    eax,edx
c000d63a:	09 c1                	or     ecx,eax
c000d63c:	75 32                	jne    c000d670 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d63e:	83 fd 01             	cmp    ebp,0x1
c000d641:	75 2d                	jne    c000d670 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d643:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d646:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d64c:	0f af f9             	imul   edi,ecx
c000d64f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d652:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d654:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d657:	40                   	inc    eax
c000d658:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d65b:	83 f8 40             	cmp    eax,0x40
c000d65e:	75 74                	jne    c000d6d4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d660:	83 ec 0c             	sub    esp,0xc
c000d663:	53                   	push   ebx
c000d664:	e8 97 fe ff ff       	call   c000d500 <VCache::writeWriteBuffer()>
c000d669:	83 c4 10             	add    esp,0x10
c000d66c:	eb 66                	jmp    c000d6d4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d66e:	66 90                	xchg   ax,ax
c000d670:	83 ec 0c             	sub    esp,0xc
c000d673:	53                   	push   ebx
c000d674:	e8 87 fe ff ff       	call   c000d500 <VCache::writeWriteBuffer()>
c000d679:	83 c4 10             	add    esp,0x10
c000d67c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d67f:	83 fd 3f             	cmp    ebp,0x3f
c000d682:	7f 24                	jg     c000d6a8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d688:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d68b:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d68e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d692:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d696:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d699:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d69c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6a4:	eb 2e                	jmp    c000d6d4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6a6:	66 90                	xchg   ax,ax
c000d6a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6aa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d6ae:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d6b2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d6b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6ba:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d6be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d6c2:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d6c6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d6c9:	83 c4 1c             	add    esp,0x1c
c000d6cc:	5b                   	pop    ebx
c000d6cd:	5e                   	pop    esi
c000d6ce:	5f                   	pop    edi
c000d6cf:	5d                   	pop    ebp
c000d6d0:	ff e0                	jmp    eax
c000d6d2:	66 90                	xchg   ax,ax
c000d6d4:	83 c4 1c             	add    esp,0x1c
c000d6d7:	31 c0                	xor    eax,eax
c000d6d9:	5b                   	pop    ebx
c000d6da:	5e                   	pop    esi
c000d6db:	5f                   	pop    edi
c000d6dc:	5d                   	pop    ebp
c000d6dd:	c3                   	ret    

c000d6de <VCache::read(unsigned long long, int, void*)>:
c000d6de:	55                   	push   ebp
c000d6df:	57                   	push   edi
c000d6e0:	56                   	push   esi
c000d6e1:	53                   	push   ebx
c000d6e2:	83 ec 1c             	sub    esp,0x1c
c000d6e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d6f1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d6f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6fd:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d701:	74 0d                	je     c000d710 <VCache::read(unsigned long long, int, void*)+0x32>
c000d703:	83 ec 0c             	sub    esp,0xc
c000d706:	55                   	push   ebp
c000d707:	e8 f4 fd ff ff       	call   c000d500 <VCache::writeWriteBuffer()>
c000d70c:	83 c4 10             	add    esp,0x10
c000d70f:	90                   	nop
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	55                   	push   ebp
c000d714:	e8 d7 fd ff ff       	call   c000d4f0 <VCache::invalidateReadBuffer()>
c000d719:	83 c4 0c             	add    esp,0xc
c000d71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d725:	6a 00                	push   0x0
c000d727:	53                   	push   ebx
c000d728:	e8 a3 2d ff ff       	call   c00004d0 <memset>
c000d72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d730:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d734:	8b 10                	mov    edx,DWORD PTR [eax]
c000d736:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d73a:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d73e:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d742:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d746:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d74a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d74d:	83 c4 2c             	add    esp,0x2c
c000d750:	5b                   	pop    ebx
c000d751:	5e                   	pop    esi
c000d752:	5f                   	pop    edi
c000d753:	5d                   	pop    ebp
c000d754:	ff e0                	jmp    eax

c000d756 <Video::putrect(int, int, int, int, unsigned int)>:
c000d756:	55                   	push   ebp
c000d757:	57                   	push   edi
c000d758:	56                   	push   esi
c000d759:	53                   	push   ebx
c000d75a:	83 ec 1c             	sub    esp,0x1c
c000d75d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d761:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d765:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d769:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d76d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d771:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d775:	01 df                	add    edi,ebx
c000d777:	39 fb                	cmp    ebx,edi
c000d779:	7d 1f                	jge    c000d79a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d77b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d77f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d783:	7d 12                	jge    c000d797 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d785:	8b 16                	mov    edx,DWORD PTR [esi]
c000d787:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d78b:	53                   	push   ebx
c000d78c:	55                   	push   ebp
c000d78d:	45                   	inc    ebp
c000d78e:	56                   	push   esi
c000d78f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d792:	83 c4 10             	add    esp,0x10
c000d795:	eb e8                	jmp    c000d77f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d797:	43                   	inc    ebx
c000d798:	eb dd                	jmp    c000d777 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d79a:	83 c4 1c             	add    esp,0x1c
c000d79d:	5b                   	pop    ebx
c000d79e:	5e                   	pop    esi
c000d79f:	5f                   	pop    edi
c000d7a0:	5d                   	pop    ebp
c000d7a1:	c3                   	ret    

c000d7a2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d7a2:	55                   	push   ebp
c000d7a3:	57                   	push   edi
c000d7a4:	31 ff                	xor    edi,edi
c000d7a6:	56                   	push   esi
c000d7a7:	53                   	push   ebx
c000d7a8:	83 ec 1c             	sub    esp,0x1c
c000d7ab:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d7af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7b3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d7ba:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d7bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7c3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d7c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d7cb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d7ce:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7d2:	01 f9                	add    ecx,edi
c000d7d4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7d8:	7d 2f                	jge    c000d809 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7da:	31 f6                	xor    esi,esi
c000d7dc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7e0:	01 f2                	add    edx,esi
c000d7e2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7e6:	7d 1a                	jge    c000d802 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7eb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7ee:	46                   	inc    esi
c000d7ef:	51                   	push   ecx
c000d7f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7f4:	52                   	push   edx
c000d7f5:	55                   	push   ebp
c000d7f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7f9:	83 c4 10             	add    esp,0x10
c000d7fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d800:	eb da                	jmp    c000d7dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d802:	47                   	inc    edi
c000d803:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d807:	eb c5                	jmp    c000d7ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d809:	83 c4 1c             	add    esp,0x1c
c000d80c:	5b                   	pop    ebx
c000d80d:	5e                   	pop    esi
c000d80e:	5f                   	pop    edi
c000d80f:	5d                   	pop    ebp
c000d810:	c3                   	ret    
c000d811:	90                   	nop

c000d812 <Video::blit(unsigned int*, int, int, int, int)>:
c000d812:	55                   	push   ebp
c000d813:	57                   	push   edi
c000d814:	56                   	push   esi
c000d815:	53                   	push   ebx
c000d816:	83 ec 1c             	sub    esp,0x1c
c000d819:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d81d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d821:	85 c0                	test   eax,eax
c000d823:	79 02                	jns    c000d827 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d825:	31 c0                	xor    eax,eax
c000d827:	c1 e0 02             	shl    eax,0x2
c000d82a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d82e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d832:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d836:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d83a:	39 d8                	cmp    eax,ebx
c000d83c:	7e 49                	jle    c000d887 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d83e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d844:	7c 41                	jl     c000d887 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d846:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d84a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d84e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d852:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d856:	39 f9                	cmp    ecx,edi
c000d858:	7e 22                	jle    c000d87c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d85a:	83 c5 04             	add    ebp,0x4
c000d85d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d863:	7c 14                	jl     c000d879 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d865:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d867:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d86a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d86e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d872:	56                   	push   esi
c000d873:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d876:	83 c4 10             	add    esp,0x10
c000d879:	47                   	inc    edi
c000d87a:	eb d2                	jmp    c000d84e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d87c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d880:	43                   	inc    ebx
c000d881:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d885:	eb ab                	jmp    c000d832 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d887:	83 c4 1c             	add    esp,0x1c
c000d88a:	5b                   	pop    ebx
c000d88b:	5e                   	pop    esi
c000d88c:	5f                   	pop    edi
c000d88d:	5d                   	pop    ebp
c000d88e:	c3                   	ret    
c000d88f:	90                   	nop

c000d890 <Video::clearScreen(unsigned int)>:
c000d890:	57                   	push   edi
c000d891:	56                   	push   esi
c000d892:	53                   	push   ebx
c000d893:	31 db                	xor    ebx,ebx
c000d895:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d899:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d89f:	7e 1f                	jle    c000d8c0 <Video::clearScreen(unsigned int)+0x30>
c000d8a1:	31 ff                	xor    edi,edi
c000d8a3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d8a9:	7e 12                	jle    c000d8bd <Video::clearScreen(unsigned int)+0x2d>
c000d8ab:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8b1:	53                   	push   ebx
c000d8b2:	57                   	push   edi
c000d8b3:	47                   	inc    edi
c000d8b4:	56                   	push   esi
c000d8b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	eb e6                	jmp    c000d8a3 <Video::clearScreen(unsigned int)+0x13>
c000d8bd:	43                   	inc    ebx
c000d8be:	eb d9                	jmp    c000d899 <Video::clearScreen(unsigned int)+0x9>
c000d8c0:	5b                   	pop    ebx
c000d8c1:	5e                   	pop    esi
c000d8c2:	5f                   	pop    edi
c000d8c3:	c3                   	ret    

c000d8c4 <Video::putpixel(int, int, unsigned int)>:
c000d8c4:	c7 44 24 04 04 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e204
c000d8cc:	e9 be 28 00 00       	jmp    c001018f <KePanic(char const*)>
c000d8d1:	90                   	nop

c000d8d2 <Video::Video(char const*)>:
c000d8d2:	83 ec 0c             	sub    esp,0xc
c000d8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8d9:	83 ec 08             	sub    esp,0x8
c000d8dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e0:	50                   	push   eax
c000d8e1:	e8 fe e1 ff ff       	call   c000bae4 <Device::Device(char const*)>
c000d8e6:	83 c4 10             	add    esp,0x10
c000d8e9:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000d8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f2:	89 10                	mov    DWORD PTR [eax],edx
c000d8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d902:	90                   	nop
c000d903:	83 c4 0c             	add    esp,0xc
c000d906:	c3                   	ret    
c000d907:	90                   	nop

c000d908 <Video::~Video()>:
c000d908:	83 ec 0c             	sub    esp,0xc
c000d90b:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000d910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d914:	89 10                	mov    DWORD PTR [eax],edx
c000d916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91a:	83 ec 0c             	sub    esp,0xc
c000d91d:	50                   	push   eax
c000d91e:	e8 2b df ff ff       	call   c000b84e <Device::~Device()>
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	90                   	nop
c000d927:	83 c4 0c             	add    esp,0xc
c000d92a:	c3                   	ret    
c000d92b:	90                   	nop

c000d92c <Video::~Video()>:
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	83 ec 0c             	sub    esp,0xc
c000d932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d936:	e8 cd ff ff ff       	call   c000d908 <Video::~Video()>
c000d93b:	83 c4 10             	add    esp,0x10
c000d93e:	83 ec 08             	sub    esp,0x8
c000d941:	68 64 01 00 00       	push   0x164
c000d946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d94a:	e8 ca ca ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c000d94f:	83 c4 10             	add    esp,0x10
c000d952:	83 c4 0c             	add    esp,0xc
c000d955:	c3                   	ret    

c000d956 <Video::isMonochrome()>:
c000d956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d95a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d960:	c3                   	ret    
c000d961:	90                   	nop

c000d962 <Video::getWidth()>:
c000d962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d966:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d96c:	c3                   	ret    
c000d96d:	90                   	nop

c000d96e <Video::getHeight()>:
c000d96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d972:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d978:	c3                   	ret    
c000d979:	90                   	nop

c000d97a <Video::drawCursor(int, int, unsigned char*, int)>:
c000d97a:	55                   	push   ebp
c000d97b:	57                   	push   edi
c000d97c:	56                   	push   esi
c000d97d:	53                   	push   ebx
c000d97e:	83 ec 2c             	sub    esp,0x2c
c000d981:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d985:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d989:	83 f8 01             	cmp    eax,0x1
c000d98c:	19 c9                	sbb    ecx,ecx
c000d98e:	31 db                	xor    ebx,ebx
c000d990:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d994:	89 cd                	mov    ebp,ecx
c000d996:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d99e:	f7 d5                	not    ebp
c000d9a0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d9a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d9aa:	01 d8                	add    eax,ebx
c000d9ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9b0:	56                   	push   esi
c000d9b1:	e8 b8 ff ff ff       	call   c000d96e <Video::getHeight()>
c000d9b6:	59                   	pop    ecx
c000d9b7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d9bb:	7e 70                	jle    c000da2d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d9bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9c1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d9c5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d9c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9d0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9db:	89 f8                	mov    eax,edi
c000d9dd:	83 c0 20             	add    eax,0x20
c000d9e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9e4:	56                   	push   esi
c000d9e5:	e8 78 ff ff ff       	call   c000d962 <Video::getWidth()>
c000d9ea:	5a                   	pop    edx
c000d9eb:	39 c7                	cmp    edi,eax
c000d9ed:	7d 34                	jge    c000da23 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9ef:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9f4:	74 05                	je     c000d9fb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9f6:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9f8:	55                   	push   ebp
c000d9f9:	eb 0d                	jmp    c000da08 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9fb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000da00:	74 12                	je     c000da14 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000da02:	8b 06                	mov    eax,DWORD PTR [esi]
c000da04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da0c:	57                   	push   edi
c000da0d:	56                   	push   esi
c000da0e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da11:	83 c4 10             	add    esp,0x10
c000da14:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da18:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da1c:	47                   	inc    edi
c000da1d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da21:	75 c1                	jne    c000d9e4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da23:	43                   	inc    ebx
c000da24:	83 fb 20             	cmp    ebx,0x20
c000da27:	0f 85 79 ff ff ff    	jne    c000d9a6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da2d:	83 c4 2c             	add    esp,0x2c
c000da30:	5b                   	pop    ebx
c000da31:	5e                   	pop    esi
c000da32:	5f                   	pop    edi
c000da33:	5d                   	pop    ebp
c000da34:	c3                   	ret    
c000da35:	90                   	nop

c000da36 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da36:	55                   	push   ebp
c000da37:	57                   	push   edi
c000da38:	56                   	push   esi
c000da39:	53                   	push   ebx
c000da3a:	83 ec 28             	sub    esp,0x28
c000da3d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da41:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da45:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da49:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da4d:	c1 e6 08             	shl    esi,0x8
c000da50:	01 c6                	add    esi,eax
c000da52:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da56:	c1 e0 08             	shl    eax,0x8
c000da59:	01 d0                	add    eax,edx
c000da5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da63:	0f af c6             	imul   eax,esi
c000da66:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da6d:	50                   	push   eax
c000da6e:	e8 46 9d ff ff       	call   c00077b9 <malloc>
c000da73:	83 c4 10             	add    esp,0x10
c000da76:	89 c7                	mov    edi,eax
c000da78:	85 c0                	test   eax,eax
c000da7a:	75 10                	jne    c000da8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	68 25 e2 01 c0       	push   0xc001e225
c000da84:	e8 06 27 00 00       	call   c001018f <KePanic(char const*)>
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da8f:	ba 12 00 00 00       	mov    edx,0x12
c000da94:	84 c0                	test   al,al
c000da96:	74 11                	je     c000daa9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da98:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da9c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000daa0:	c1 fa 03             	sar    edx,0x3
c000daa3:	0f af d1             	imul   edx,ecx
c000daa6:	83 c2 12             	add    edx,0x12
c000daa9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000daad:	74 04                	je     c000dab3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000daaf:	85 f6                	test   esi,esi
c000dab1:	75 12                	jne    c000dac5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dab3:	83 ec 0c             	sub    esp,0xc
c000dab6:	68 35 e2 01 c0       	push   0xc001e235
c000dabb:	e8 4f ca ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000dac0:	e9 b8 00 00 00       	jmp    c000db7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dac5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dac9:	80 f9 02             	cmp    cl,0x2
c000dacc:	0f 85 96 00 00 00    	jne    c000db68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dad2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dad7:	75 0e                	jne    c000dae7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dad9:	84 c0                	test   al,al
c000dadb:	75 0a                	jne    c000dae7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dadd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dae0:	83 e8 18             	sub    eax,0x18
c000dae3:	a8 f7                	test   al,0xf7
c000dae5:	74 0a                	je     c000daf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dae7:	83 ec 0c             	sub    esp,0xc
c000daea:	68 4a e2 01 c0       	push   0xc001e24a
c000daef:	eb 7f                	jmp    c000db70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000daf1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000daf9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000db01:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000db05:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db0d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db11:	75 0c                	jne    c000db1f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db13:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db18:	c1 e0 18             	shl    eax,0x18
c000db1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db1f:	45                   	inc    ebp
c000db20:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db25:	c1 e1 10             	shl    ecx,0x10
c000db28:	89 c8                	mov    eax,ecx
c000db2a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db2f:	c1 e1 08             	shl    ecx,0x8
c000db32:	09 c1                	or     ecx,eax
c000db34:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db38:	09 c1                	or     ecx,eax
c000db3a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db3e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db42:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db46:	c1 f8 03             	sar    eax,0x3
c000db49:	01 c2                	add    edx,eax
c000db4b:	89 e8                	mov    eax,ebp
c000db4d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db51:	39 c6                	cmp    esi,eax
c000db53:	7f b0                	jg     c000db05 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db55:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db5d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db60:	7e 22                	jle    c000db84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db62:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db66:	eb 99                	jmp    c000db01 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db68:	50                   	push   eax
c000db69:	50                   	push   eax
c000db6a:	51                   	push   ecx
c000db6b:	68 58 e2 01 c0       	push   0xc001e258
c000db70:	e8 9a c9 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000db75:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db78:	e8 4c 9c ff ff       	call   c00077c9 <free>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	31 ff                	xor    edi,edi
c000db82:	eb 0f                	jmp    c000db93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db84:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db88:	89 30                	mov    DWORD PTR [eax],esi
c000db8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db91:	89 30                	mov    DWORD PTR [eax],esi
c000db93:	83 c4 1c             	add    esp,0x1c
c000db96:	89 f8                	mov    eax,edi
c000db98:	5b                   	pop    ebx
c000db99:	5e                   	pop    esi
c000db9a:	5f                   	pop    edi
c000db9b:	5d                   	pop    ebp
c000db9c:	c3                   	ret    
c000db9d:	90                   	nop

c000db9e <Video::putTGA(int, int, unsigned char*, int)>:
c000db9e:	55                   	push   ebp
c000db9f:	57                   	push   edi
c000dba0:	56                   	push   esi
c000dba1:	53                   	push   ebx
c000dba2:	83 ec 28             	sub    esp,0x28
c000dba5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dba9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbad:	50                   	push   eax
c000dbae:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbb2:	50                   	push   eax
c000dbb3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbb7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbbb:	56                   	push   esi
c000dbbc:	e8 75 fe ff ff       	call   c000da36 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dbc1:	83 c4 20             	add    esp,0x20
c000dbc4:	85 c0                	test   eax,eax
c000dbc6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dbca:	74 35                	je     c000dc01 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbcc:	89 c7                	mov    edi,eax
c000dbce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbd2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dbd6:	39 d8                	cmp    eax,ebx
c000dbd8:	7e 27                	jle    c000dc01 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbda:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbe2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbe6:	39 e8                	cmp    eax,ebp
c000dbe8:	7e 14                	jle    c000dbfe <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbea:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbec:	83 c7 04             	add    edi,0x4
c000dbef:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbf2:	53                   	push   ebx
c000dbf3:	55                   	push   ebp
c000dbf4:	45                   	inc    ebp
c000dbf5:	56                   	push   esi
c000dbf6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbf9:	83 c4 10             	add    esp,0x10
c000dbfc:	eb e0                	jmp    c000dbde <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbfe:	43                   	inc    ebx
c000dbff:	eb cd                	jmp    c000dbce <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dc01:	83 c4 1c             	add    esp,0x1c
c000dc04:	5b                   	pop    ebx
c000dc05:	5e                   	pop    esi
c000dc06:	5f                   	pop    edi
c000dc07:	5d                   	pop    ebp
c000dc08:	c3                   	ret    
c000dc09:	66 90                	xchg   ax,ax
c000dc0b:	90                   	nop

c000dc0c <ACPI::close(int, int, void*)>:
c000dc0c:	83 ec 1c             	sub    esp,0x1c
c000dc0f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc17:	74 0b                	je     c000dc24 <ACPI::close(int, int, void*)+0x18>
c000dc19:	b8 00 00 00 00       	mov    eax,0x0
c000dc1e:	e9 9d 00 00 00       	jmp    c000dcc0 <ACPI::close(int, int, void*)+0xb4>
c000dc23:	90                   	nop
c000dc24:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc29:	75 29                	jne    c000dc54 <ACPI::close(int, int, void*)+0x48>
c000dc2b:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc30:	85 c0                	test   eax,eax
c000dc32:	74 08                	je     c000dc3c <ACPI::close(int, int, void*)+0x30>
c000dc34:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc39:	ff d0                	call   eax
c000dc3b:	90                   	nop
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	68 b4 e2 01 c0       	push   0xc001e2b4
c000dc44:	e8 46 25 00 00       	call   c001018f <KePanic(char const*)>
c000dc49:	83 c4 10             	add    esp,0x10
c000dc4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc51:	eb 6d                	jmp    c000dcc0 <ACPI::close(int, int, void*)+0xb4>
c000dc53:	90                   	nop
c000dc54:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc59:	75 5d                	jne    c000dcb8 <ACPI::close(int, int, void*)+0xac>
c000dc5b:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc60:	85 c0                	test   eax,eax
c000dc62:	74 08                	je     c000dc6c <ACPI::close(int, int, void*)+0x60>
c000dc64:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc69:	ff d0                	call   eax
c000dc6b:	90                   	nop
c000dc6c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc71:	8d 76 00             	lea    esi,[esi+0x0]
c000dc74:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc78:	25 ff 00 00 00       	and    eax,0xff
c000dc7d:	83 e0 02             	and    eax,0x2
c000dc80:	74 1e                	je     c000dca0 <ACPI::close(int, int, void*)+0x94>
c000dc82:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc8d:	89 c2                	mov    edx,eax
c000dc8f:	ec                   	in     al,dx
c000dc90:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc94:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc98:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc9c:	eb d6                	jmp    c000dc74 <ACPI::close(int, int, void*)+0x68>
c000dc9e:	66 90                	xchg   ax,ax
c000dca0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dca7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dcac:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dcb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcb4:	ee                   	out    dx,al
c000dcb5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dcbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc0:	83 c4 1c             	add    esp,0x1c
c000dcc3:	c3                   	ret    

c000dcc4 <findRSDP()>:
c000dcc4:	83 ec 1c             	sub    esp,0x1c
c000dcc7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dccc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcd2:	83 e0 04             	and    eax,0x4
c000dcd5:	84 c0                	test   al,al
c000dcd7:	75 07                	jne    c000dce0 <findRSDP()+0x1c>
c000dcd9:	b8 00 00 00 00       	mov    eax,0x0
c000dcde:	eb 70                	jmp    c000dd50 <findRSDP()+0x8c>
c000dce0:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dce5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcea:	7f 1c                	jg     c000dd08 <findRSDP()+0x44>
c000dcec:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dcf1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dcf7:	83 e2 fb             	and    edx,0xfffffffb
c000dcfa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dd00:	b8 00 00 00 00       	mov    eax,0x0
c000dd05:	eb 49                	jmp    c000dd50 <findRSDP()+0x8c>
c000dd07:	90                   	nop
c000dd08:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd10:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd18:	77 2e                	ja     c000dd48 <findRSDP()+0x84>
c000dd1a:	83 ec 04             	sub    esp,0x4
c000dd1d:	6a 08                	push   0x8
c000dd1f:	68 4f e3 01 c0       	push   0xc001e34f
c000dd24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd28:	e8 63 26 ff ff       	call   c0000390 <memcmp>
c000dd2d:	83 c4 10             	add    esp,0x10
c000dd30:	85 c0                	test   eax,eax
c000dd32:	0f 94 c0             	sete   al
c000dd35:	84 c0                	test   al,al
c000dd37:	74 07                	je     c000dd40 <findRSDP()+0x7c>
c000dd39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd3d:	eb 11                	jmp    c000dd50 <findRSDP()+0x8c>
c000dd3f:	90                   	nop
c000dd40:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd45:	eb c9                	jmp    c000dd10 <findRSDP()+0x4c>
c000dd47:	90                   	nop
c000dd48:	b8 00 00 00 00       	mov    eax,0x0
c000dd4d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd50:	83 c4 1c             	add    esp,0x1c
c000dd53:	c3                   	ret    

c000dd54 <loadACPITables(unsigned char*)>:
c000dd54:	57                   	push   edi
c000dd55:	56                   	push   esi
c000dd56:	53                   	push   ebx
c000dd57:	83 ec 60             	sub    esp,0x60
c000dd5a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd5f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd65:	83 e0 04             	and    eax,0x4
c000dd68:	84 c0                	test   al,al
c000dd6a:	0f 84 3c 02 00 00    	je     c000dfac <loadACPITables(unsigned char*)+0x258>
c000dd70:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000dd75:	84 c0                	test   al,al
c000dd77:	74 77                	je     c000ddf0 <loadACPITables(unsigned char*)+0x9c>
c000dd79:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd7d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd81:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd88:	83 e8 24             	sub    eax,0x24
c000dd8b:	c1 e8 03             	shr    eax,0x3
c000dd8e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd92:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd9a:	66 90                	xchg   ax,ax
c000dd9c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dda0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dda4:	0f 8d b6 00 00 00    	jge    c000de60 <loadACPITables(unsigned char*)+0x10c>
c000ddaa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddae:	83 c0 24             	add    eax,0x24
c000ddb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ddb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ddb9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ddbd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ddc1:	c1 e0 03             	shl    eax,0x3
c000ddc4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ddc8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ddcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ddcf:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddd1:	89 c1                	mov    ecx,eax
c000ddd3:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000ddd8:	8d 50 01             	lea    edx,[eax+0x1]
c000dddb:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000dde1:	89 ca                	mov    edx,ecx
c000dde3:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000ddea:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ddee:	eb ac                	jmp    c000dd9c <loadACPITables(unsigned char*)+0x48>
c000ddf0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddf4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddf8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddff:	83 e8 24             	sub    eax,0x24
c000de02:	c1 e8 02             	shr    eax,0x2
c000de05:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000de09:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de11:	8d 76 00             	lea    esi,[esi+0x0]
c000de14:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de18:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de1c:	7d 42                	jge    c000de60 <loadACPITables(unsigned char*)+0x10c>
c000de1e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de22:	83 c0 24             	add    eax,0x24
c000de25:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de2d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de31:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de35:	c1 e0 02             	shl    eax,0x2
c000de38:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de40:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de42:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de47:	8d 50 01             	lea    edx,[eax+0x1]
c000de4a:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de50:	89 ca                	mov    edx,ecx
c000de52:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de59:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de5d:	eb b5                	jmp    c000de14 <loadACPITables(unsigned char*)+0xc0>
c000de5f:	90                   	nop
c000de60:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de68:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de6d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de71:	0f 8d 39 01 00 00    	jge    c000dfb0 <loadACPITables(unsigned char*)+0x25c>
c000de77:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de7b:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000de82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de92:	25 ff 0f 00 00       	and    eax,0xfff
c000de97:	89 c6                	mov    esi,eax
c000de99:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000de9f:	83 ec 0c             	sub    esp,0xc
c000dea2:	6a 01                	push   0x1
c000dea4:	e8 dc b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000dea9:	83 c4 10             	add    esp,0x10
c000deac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000deb0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000deb6:	83 ec 0c             	sub    esp,0xc
c000deb9:	6a 01                	push   0x1
c000debb:	6a 01                	push   0x1
c000debd:	50                   	push   eax
c000debe:	52                   	push   edx
c000debf:	53                   	push   ebx
c000dec0:	e8 4f bd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dec5:	83 c4 20             	add    esp,0x20
c000dec8:	09 f0                	or     eax,esi
c000deca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dece:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ded2:	c1 e0 03             	shl    eax,0x3
c000ded5:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000deda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dede:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dee2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dee6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000deee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000def2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000def6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000defa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000defe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000df02:	89 c6                	mov    esi,eax
c000df04:	89 d7                	mov    edi,edx
c000df06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df08:	89 c8                	mov    eax,ecx
c000df0a:	89 fa                	mov    edx,edi
c000df0c:	89 f3                	mov    ebx,esi
c000df0e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df29:	05 00 10 00 00       	add    eax,0x1000
c000df2e:	c1 e8 0c             	shr    eax,0xc
c000df31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df41:	25 ff 0f 00 00       	and    eax,0xfff
c000df46:	89 c6                	mov    esi,eax
c000df48:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df4e:	83 ec 0c             	sub    esp,0xc
c000df51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df55:	e8 2b b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df5a:	83 c4 10             	add    esp,0x10
c000df5d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df61:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	6a 01                	push   0x1
c000df6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df70:	50                   	push   eax
c000df71:	52                   	push   edx
c000df72:	53                   	push   ebx
c000df73:	e8 9c bc ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df78:	83 c4 20             	add    esp,0x20
c000df7b:	09 f0                	or     eax,esi
c000df7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df85:	83 ec 0c             	sub    esp,0xc
c000df88:	50                   	push   eax
c000df89:	e8 27 b6 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df95:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df99:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000dfa0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000dfa4:	e9 bf fe ff ff       	jmp    c000de68 <loadACPITables(unsigned char*)+0x114>
c000dfa9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfac:	90                   	nop
c000dfad:	8d 76 00             	lea    esi,[esi+0x0]
c000dfb0:	83 c4 60             	add    esp,0x60
c000dfb3:	5b                   	pop    ebx
c000dfb4:	5e                   	pop    esi
c000dfb5:	5f                   	pop    edi
c000dfb6:	c3                   	ret    
c000dfb7:	90                   	nop

c000dfb8 <findRSDT(unsigned char*)>:
c000dfb8:	57                   	push   edi
c000dfb9:	56                   	push   esi
c000dfba:	53                   	push   ebx
c000dfbb:	83 ec 50             	sub    esp,0x50
c000dfbe:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dfc3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfc9:	83 e0 04             	and    eax,0x4
c000dfcc:	84 c0                	test   al,al
c000dfce:	75 0c                	jne    c000dfdc <findRSDT(unsigned char*)+0x24>
c000dfd0:	b8 00 00 00 00       	mov    eax,0x0
c000dfd5:	e9 26 01 00 00       	jmp    c000e100 <findRSDT(unsigned char*)+0x148>
c000dfda:	66 90                	xchg   ax,ax
c000dfdc:	89 e0                	mov    eax,esp
c000dfde:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfe2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfe6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfea:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dff2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dffa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dffe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e002:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e006:	89 c6                	mov    esi,eax
c000e008:	89 d7                	mov    edi,edx
c000e00a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e00c:	89 c8                	mov    eax,ecx
c000e00e:	89 fa                	mov    edx,edi
c000e010:	89 f3                	mov    ebx,esi
c000e012:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e016:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e01a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e01e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e022:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e026:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e02e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e032:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e036:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e042:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e046:	25 ff 0f 00 00       	and    eax,0xfff
c000e04b:	89 c6                	mov    esi,eax
c000e04d:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e053:	83 ec 0c             	sub    esp,0xc
c000e056:	6a 02                	push   0x2
c000e058:	e8 28 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e05d:	83 c4 10             	add    esp,0x10
c000e060:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e064:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e06a:	83 ec 0c             	sub    esp,0xc
c000e06d:	6a 01                	push   0x1
c000e06f:	6a 02                	push   0x2
c000e071:	50                   	push   eax
c000e072:	52                   	push   edx
c000e073:	53                   	push   ebx
c000e074:	e8 9b bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e079:	83 c4 20             	add    esp,0x20
c000e07c:	09 f0                	or     eax,esi
c000e07e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e082:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e086:	25 ff 0f 00 00       	and    eax,0xfff
c000e08b:	89 c6                	mov    esi,eax
c000e08d:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e093:	83 ec 0c             	sub    esp,0xc
c000e096:	6a 02                	push   0x2
c000e098:	e8 e8 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e09d:	83 c4 10             	add    esp,0x10
c000e0a0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e0a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0aa:	83 ec 0c             	sub    esp,0xc
c000e0ad:	6a 01                	push   0x1
c000e0af:	6a 02                	push   0x2
c000e0b1:	50                   	push   eax
c000e0b2:	52                   	push   edx
c000e0b3:	53                   	push   ebx
c000e0b4:	e8 5b bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0b9:	83 c4 20             	add    esp,0x20
c000e0bc:	09 f0                	or     eax,esi
c000e0be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0c2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e0c7:	75 13                	jne    c000e0dc <findRSDT(unsigned char*)+0x124>
c000e0c9:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e0d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0d8:	eb 22                	jmp    c000e0fc <findRSDT(unsigned char*)+0x144>
c000e0da:	66 90                	xchg   ax,ax
c000e0dc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0e1:	75 11                	jne    c000e0f4 <findRSDT(unsigned char*)+0x13c>
c000e0e3:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e0ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0f2:	eb 08                	jmp    c000e0fc <findRSDT(unsigned char*)+0x144>
c000e0f4:	b8 00 00 00 00       	mov    eax,0x0
c000e0f9:	eb 05                	jmp    c000e100 <findRSDT(unsigned char*)+0x148>
c000e0fb:	90                   	nop
c000e0fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e100:	83 c4 50             	add    esp,0x50
c000e103:	5b                   	pop    ebx
c000e104:	5e                   	pop    esi
c000e105:	5f                   	pop    edi
c000e106:	c3                   	ret    
c000e107:	90                   	nop

c000e108 <findDataTable(unsigned char*, char*)>:
c000e108:	83 ec 1c             	sub    esp,0x1c
c000e10b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e110:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e116:	83 e0 04             	and    eax,0x4
c000e119:	84 c0                	test   al,al
c000e11b:	75 07                	jne    c000e124 <findDataTable(unsigned char*, char*)+0x1c>
c000e11d:	b8 00 00 00 00       	mov    eax,0x0
c000e122:	eb 58                	jmp    c000e17c <findDataTable(unsigned char*, char*)+0x74>
c000e124:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e12c:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e131:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e135:	7d 3d                	jge    c000e174 <findDataTable(unsigned char*, char*)+0x6c>
c000e137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e13b:	c1 e0 03             	shl    eax,0x3
c000e13e:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e143:	83 ec 04             	sub    esp,0x4
c000e146:	6a 04                	push   0x4
c000e148:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e14c:	50                   	push   eax
c000e14d:	e8 3e 22 ff ff       	call   c0000390 <memcmp>
c000e152:	83 c4 10             	add    esp,0x10
c000e155:	85 c0                	test   eax,eax
c000e157:	0f 94 c0             	sete   al
c000e15a:	84 c0                	test   al,al
c000e15c:	74 0e                	je     c000e16c <findDataTable(unsigned char*, char*)+0x64>
c000e15e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e162:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e169:	eb 11                	jmp    c000e17c <findDataTable(unsigned char*, char*)+0x74>
c000e16b:	90                   	nop
c000e16c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e170:	eb ba                	jmp    c000e12c <findDataTable(unsigned char*, char*)+0x24>
c000e172:	66 90                	xchg   ax,ax
c000e174:	b8 00 00 00 00       	mov    eax,0x0
c000e179:	8d 76 00             	lea    esi,[esi+0x0]
c000e17c:	83 c4 1c             	add    esp,0x1c
c000e17f:	c3                   	ret    

c000e180 <scanMADT()>:
c000e180:	53                   	push   ebx
c000e181:	83 ec 38             	sub    esp,0x38
c000e184:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e189:	25 00 04 00 00       	and    eax,0x400
c000e18e:	74 14                	je     c000e1a4 <scanMADT()+0x24>
c000e190:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e195:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e19b:	83 e2 fb             	and    edx,0xfffffffb
c000e19e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1a4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1a9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1af:	83 e0 04             	and    eax,0x4
c000e1b2:	84 c0                	test   al,al
c000e1b4:	0f 84 8a 04 00 00    	je     c000e644 <scanMADT()+0x4c4>
c000e1ba:	e8 05 fb ff ff       	call   c000dcc4 <findRSDP()>
c000e1bf:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e1c4:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e1c9:	85 c0                	test   eax,eax
c000e1cb:	75 1b                	jne    c000e1e8 <scanMADT()+0x68>
c000e1cd:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1d2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1d8:	83 e2 fb             	and    edx,0xfffffffb
c000e1db:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1e1:	e9 66 04 00 00       	jmp    c000e64c <scanMADT()+0x4cc>
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e1ed:	83 ec 0c             	sub    esp,0xc
c000e1f0:	50                   	push   eax
c000e1f1:	e8 c2 fd ff ff       	call   c000dfb8 <findRSDT(unsigned char*)>
c000e1f6:	83 c4 10             	add    esp,0x10
c000e1f9:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e1fe:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e203:	85 c0                	test   eax,eax
c000e205:	75 19                	jne    c000e220 <scanMADT()+0xa0>
c000e207:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e20c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e212:	83 e2 fb             	and    edx,0xfffffffb
c000e215:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e21b:	e9 2c 04 00 00       	jmp    c000e64c <scanMADT()+0x4cc>
c000e220:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e225:	83 ec 0c             	sub    esp,0xc
c000e228:	50                   	push   eax
c000e229:	e8 26 fb ff ff       	call   c000dd54 <loadACPITables(unsigned char*)>
c000e22e:	83 c4 10             	add    esp,0x10
c000e231:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e236:	83 ec 08             	sub    esp,0x8
c000e239:	68 58 e3 01 c0       	push   0xc001e358
c000e23e:	50                   	push   eax
c000e23f:	e8 c4 fe ff ff       	call   c000e108 <findDataTable(unsigned char*, char*)>
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e24b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e250:	75 1a                	jne    c000e26c <scanMADT()+0xec>
c000e252:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e257:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e25d:	83 e2 fe             	and    edx,0xfffffffe
c000e260:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e266:	e9 e1 03 00 00       	jmp    c000e64c <scanMADT()+0x4cc>
c000e26b:	90                   	nop
c000e26c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e274:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e278:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e27b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e27f:	0f 87 c7 03 00 00    	ja     c000e64c <scanMADT()+0x4cc>
c000e285:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e28d:	0f 87 b9 03 00 00    	ja     c000e64c <scanMADT()+0x4cc>
c000e293:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e297:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e29b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e29f:	8d 50 01             	lea    edx,[eax+0x1]
c000e2a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2ae:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e2b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e2b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2c5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e2c9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e2ce:	0f 86 74 03 00 00    	jbe    c000e648 <scanMADT()+0x4c8>
c000e2d4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2d9:	75 5d                	jne    c000e338 <scanMADT()+0x1b8>
c000e2db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2df:	8d 50 01             	lea    edx,[eax+0x1]
c000e2e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2e6:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e2ec:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2f2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2f6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2fa:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e300:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e304:	8d 42 01             	lea    eax,[edx+0x1]
c000e307:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e30b:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e310:	8d 48 01             	lea    ecx,[eax+0x1]
c000e313:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e319:	25 ff 00 00 00       	and    eax,0xff
c000e31e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e322:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e326:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e32c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e331:	e9 f6 02 00 00       	jmp    c000e62c <scanMADT()+0x4ac>
c000e336:	66 90                	xchg   ax,ax
c000e338:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e33d:	0f 85 29 01 00 00    	jne    c000e46c <scanMADT()+0x2ec>
c000e343:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e347:	8d 50 01             	lea    edx,[eax+0x1]
c000e34a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e34e:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e354:	81 e2 ff 00 00 00    	and    edx,0xff
c000e35a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e35e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e362:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e368:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e36c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e370:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e374:	01 d0                	add    eax,edx
c000e376:	83 c0 2c             	add    eax,0x2c
c000e379:	8a 00                	mov    al,BYTE PTR [eax]
c000e37b:	31 d2                	xor    edx,edx
c000e37d:	88 c2                	mov    dl,al
c000e37f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e383:	8d 48 01             	lea    ecx,[eax+0x1]
c000e386:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e38a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e38e:	25 ff 00 00 00       	and    eax,0xff
c000e393:	c1 e0 08             	shl    eax,0x8
c000e396:	89 d1                	mov    ecx,edx
c000e398:	09 c1                	or     ecx,eax
c000e39a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e39e:	8d 50 02             	lea    edx,[eax+0x2]
c000e3a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3a9:	25 ff 00 00 00       	and    eax,0xff
c000e3ae:	c1 e0 10             	shl    eax,0x10
c000e3b1:	09 c1                	or     ecx,eax
c000e3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b7:	8d 50 03             	lea    edx,[eax+0x3]
c000e3ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3c2:	25 ff 00 00 00       	and    eax,0xff
c000e3c7:	c1 e0 18             	shl    eax,0x18
c000e3ca:	09 c1                	or     ecx,eax
c000e3cc:	89 ca                	mov    edx,ecx
c000e3ce:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e3d3:	25 ff 00 00 00       	and    eax,0xff
c000e3d8:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e3df:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ec:	01 d0                	add    eax,edx
c000e3ee:	83 c0 2c             	add    eax,0x2c
c000e3f1:	8a 00                	mov    al,BYTE PTR [eax]
c000e3f3:	31 d2                	xor    edx,edx
c000e3f5:	88 c2                	mov    dl,al
c000e3f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3fb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e402:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e406:	25 ff 00 00 00       	and    eax,0xff
c000e40b:	c1 e0 08             	shl    eax,0x8
c000e40e:	89 d1                	mov    ecx,edx
c000e410:	09 c1                	or     ecx,eax
c000e412:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e416:	8d 50 02             	lea    edx,[eax+0x2]
c000e419:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e41d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e421:	25 ff 00 00 00       	and    eax,0xff
c000e426:	c1 e0 10             	shl    eax,0x10
c000e429:	09 c1                	or     ecx,eax
c000e42b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42f:	8d 50 03             	lea    edx,[eax+0x3]
c000e432:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e436:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e43a:	25 ff 00 00 00       	and    eax,0xff
c000e43f:	c1 e0 18             	shl    eax,0x18
c000e442:	09 c1                	or     ecx,eax
c000e444:	89 ca                	mov    edx,ecx
c000e446:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e44b:	25 ff 00 00 00       	and    eax,0xff
c000e450:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e457:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e45c:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e461:	40                   	inc    eax
c000e462:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e467:	e9 c0 01 00 00       	jmp    c000e62c <scanMADT()+0x4ac>
c000e46c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e471:	0f 85 fd 00 00 00    	jne    c000e574 <scanMADT()+0x3f4>
c000e477:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e47b:	8d 50 01             	lea    edx,[eax+0x1]
c000e47e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e482:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e486:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e48a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e48e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e492:	8d 50 01             	lea    edx,[eax+0x1]
c000e495:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e499:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e49d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4a1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e4a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ad:	01 d0                	add    eax,edx
c000e4af:	83 c0 2c             	add    eax,0x2c
c000e4b2:	8a 00                	mov    al,BYTE PTR [eax]
c000e4b4:	31 d2                	xor    edx,edx
c000e4b6:	88 c2                	mov    dl,al
c000e4b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4bc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4c3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4c7:	25 ff 00 00 00       	and    eax,0xff
c000e4cc:	c1 e0 08             	shl    eax,0x8
c000e4cf:	89 d1                	mov    ecx,edx
c000e4d1:	09 c1                	or     ecx,eax
c000e4d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d7:	8d 50 02             	lea    edx,[eax+0x2]
c000e4da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4e2:	25 ff 00 00 00       	and    eax,0xff
c000e4e7:	c1 e0 10             	shl    eax,0x10
c000e4ea:	09 c1                	or     ecx,eax
c000e4ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f0:	8d 50 03             	lea    edx,[eax+0x3]
c000e4f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4fb:	25 ff 00 00 00       	and    eax,0xff
c000e500:	c1 e0 18             	shl    eax,0x18
c000e503:	09 c8                	or     eax,ecx
c000e505:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e509:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e50e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e512:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e516:	01 d0                	add    eax,edx
c000e518:	83 c0 2c             	add    eax,0x2c
c000e51b:	8a 00                	mov    al,BYTE PTR [eax]
c000e51d:	25 ff 00 00 00       	and    eax,0xff
c000e522:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e526:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e529:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e52d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e531:	81 e2 ff 00 00 00    	and    edx,0xff
c000e537:	c1 e2 08             	shl    edx,0x8
c000e53a:	09 d0                	or     eax,edx
c000e53c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e541:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e546:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e54a:	25 ff 00 00 00       	and    eax,0xff
c000e54f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e553:	88 90 e0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0820],dl
c000e559:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e55d:	31 d2                	xor    edx,edx
c000e55f:	88 c2                	mov    dl,al
c000e561:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e566:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e56e:	e9 b9 00 00 00       	jmp    c000e62c <scanMADT()+0x4ac>
c000e573:	90                   	nop
c000e574:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e579:	0f 85 a1 00 00 00    	jne    c000e620 <scanMADT()+0x4a0>
c000e57f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e583:	8d 50 01             	lea    edx,[eax+0x1]
c000e586:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e58a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e58e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e592:	25 ff 00 00 00       	and    eax,0xff
c000e597:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e59b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e59f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a3:	01 d0                	add    eax,edx
c000e5a5:	83 c0 2c             	add    eax,0x2c
c000e5a8:	8a 00                	mov    al,BYTE PTR [eax]
c000e5aa:	31 d2                	xor    edx,edx
c000e5ac:	88 c2                	mov    dl,al
c000e5ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b2:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5bd:	25 ff 00 00 00       	and    eax,0xff
c000e5c2:	c1 e0 08             	shl    eax,0x8
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5cb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d4:	8d 50 01             	lea    edx,[eax+0x1]
c000e5d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5df:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5e3:	25 ff 00 00 00       	and    eax,0xff
c000e5e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f0:	c1 e0 08             	shl    eax,0x8
c000e5f3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5f7:	89 c1                	mov    ecx,eax
c000e5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5fd:	c1 e0 18             	shl    eax,0x18
c000e600:	89 c3                	mov    ebx,eax
c000e602:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e607:	8d 50 01             	lea    edx,[eax+0x1]
c000e60a:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e610:	09 d9                	or     ecx,ebx
c000e612:	89 ca                	mov    edx,ecx
c000e614:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e61b:	eb 0f                	jmp    c000e62c <scanMADT()+0x4ac>
c000e61d:	8d 76 00             	lea    esi,[esi+0x0]
c000e620:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e625:	75 05                	jne    c000e62c <scanMADT()+0x4ac>
c000e627:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e62c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e630:	31 d2                	xor    edx,edx
c000e632:	88 c2                	mov    dl,al
c000e634:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e638:	01 d0                	add    eax,edx
c000e63a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e63e:	e9 31 fc ff ff       	jmp    c000e274 <scanMADT()+0xf4>
c000e643:	90                   	nop
c000e644:	90                   	nop
c000e645:	eb 05                	jmp    c000e64c <scanMADT()+0x4cc>
c000e647:	90                   	nop
c000e648:	90                   	nop
c000e649:	8d 76 00             	lea    esi,[esi+0x0]
c000e64c:	83 c4 38             	add    esp,0x38
c000e64f:	5b                   	pop    ebx
c000e650:	c3                   	ret    
c000e651:	90                   	nop
c000e652:	66 90                	xchg   ax,ax

c000e654 <ACPI::ACPI()>:
c000e654:	83 ec 0c             	sub    esp,0xc
c000e657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65b:	83 ec 08             	sub    esp,0x8
c000e65e:	68 5d e3 01 c0       	push   0xc001e35d
c000e663:	50                   	push   eax
c000e664:	e8 7b d4 ff ff       	call   c000bae4 <Device::Device(char const*)>
c000e669:	83 c4 10             	add    esp,0x10
c000e66c:	ba 94 e4 01 c0       	mov    edx,0xc001e494
c000e671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e675:	89 10                	mov    DWORD PTR [eax],edx
c000e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e686:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e694:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e69e:	e8 dd fa ff ff       	call   c000e180 <scanMADT()>
c000e6a3:	90                   	nop
c000e6a4:	83 c4 0c             	add    esp,0xc
c000e6a7:	c3                   	ret    

c000e6a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e6a8:	83 ec 2c             	sub    esp,0x2c
c000e6ab:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e6b7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e6bb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e6c0:	88 d0                	mov    al,dl
c000e6c2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e6c6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e6cb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6d3:	90                   	nop
c000e6d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6d8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6de:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6e2:	0f 8d 9c 00 00 00    	jge    c000e784 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f0:	83 c2 2a             	add    edx,0x2a
c000e6f3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6f7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6fc:	75 7a                	jne    c000e778 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e702:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e706:	83 c2 2a             	add    edx,0x2a
c000e709:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e70d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e711:	75 65                	jne    c000e778 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e713:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e718:	74 3a                	je     c000e754 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e71a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e71e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e722:	83 c2 2a             	add    edx,0x2a
c000e725:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e729:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e72d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e730:	39 c2                	cmp    edx,eax
c000e732:	74 10                	je     c000e744 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e734:	83 ec 0c             	sub    esp,0xc
c000e737:	68 d8 e2 01 c0       	push   0xc001e2d8
c000e73c:	e8 4e 1a 00 00       	call   c001018f <KePanic(char const*)>
c000e741:	83 c4 10             	add    esp,0x10
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	68 62 e3 01 c0       	push   0xc001e362
c000e74c:	e8 3e 1a 00 00       	call   c001018f <KePanic(char const*)>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e758:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e75c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e760:	83 c2 2a             	add    edx,0x2a
c000e763:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e767:	8b 02                	mov    eax,DWORD PTR [edx]
c000e769:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e76c:	89 01                	mov    DWORD PTR [ecx],eax
c000e76e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e771:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e776:	66 90                	xchg   ax,ax
c000e778:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e77c:	e9 53 ff ff ff       	jmp    c000e6d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e781:	8d 76 00             	lea    esi,[esi+0x0]
c000e784:	90                   	nop
c000e785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e789:	83 c4 2c             	add    esp,0x2c
c000e78c:	c2 04 00             	ret    0x4
c000e78f:	90                   	nop

c000e790 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e790:	83 ec 1c             	sub    esp,0x1c
c000e793:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e797:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e79b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e79f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e7a4:	88 c8                	mov    al,cl
c000e7a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e7aa:	88 d0                	mov    al,dl
c000e7ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7be:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7c1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e7c5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e7c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7cd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7d7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7de:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7ed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7f1:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f8:	83 c2 2a             	add    edx,0x2a
c000e7fb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e803:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e80d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e810:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e814:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e81c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e822:	8d 50 01             	lea    edx,[eax+0x1]
c000e825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e829:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e833:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e839:	3d 00 02 00 00       	cmp    eax,0x200
c000e83e:	75 10                	jne    c000e850 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e840:	83 ec 0c             	sub    esp,0xc
c000e843:	68 71 e3 01 c0       	push   0xc001e371
c000e848:	e8 42 19 00 00       	call   c001018f <KePanic(char const*)>
c000e84d:	83 c4 10             	add    esp,0x10
c000e850:	90                   	nop
c000e851:	83 c4 1c             	add    esp,0x1c
c000e854:	c3                   	ret    
c000e855:	90                   	nop
c000e856:	66 90                	xchg   ax,ax

c000e858 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e858:	b8 00 00 00 00       	mov    eax,0x0
c000e85d:	c3                   	ret    
c000e85e:	66 90                	xchg   ax,ax

c000e860 <ACPI::detectPCI()>:
c000e860:	53                   	push   ebx
c000e861:	83 ec 28             	sub    esp,0x28
c000e864:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e869:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e86e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e873:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e879:	83 e0 04             	and    eax,0x4
c000e87c:	84 c0                	test   al,al
c000e87e:	74 2c                	je     c000e8ac <ACPI::detectPCI()+0x4c>
c000e880:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e885:	83 ec 08             	sub    esp,0x8
c000e888:	68 8e e3 01 c0       	push   0xc001e38e
c000e88d:	50                   	push   eax
c000e88e:	e8 75 f8 ff ff       	call   c000e108 <findDataTable(unsigned char*, char*)>
c000e893:	83 c4 10             	add    esp,0x10
c000e896:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e89a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e89f:	74 0b                	je     c000e8ac <ACPI::detectPCI()+0x4c>
c000e8a1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8a6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8ab:	90                   	nop
c000e8ac:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e8b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8b8:	8a 00                	mov    al,BYTE PTR [eax]
c000e8ba:	3c 01                	cmp    al,0x1
c000e8bc:	75 0e                	jne    c000e8cc <ACPI::detectPCI()+0x6c>
c000e8be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8c3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8c8:	eb 2a                	jmp    c000e8f4 <ACPI::detectPCI()+0x94>
c000e8ca:	66 90                	xchg   ax,ax
c000e8cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8d0:	8a 00                	mov    al,BYTE PTR [eax]
c000e8d2:	3c 02                	cmp    al,0x2
c000e8d4:	75 1e                	jne    c000e8f4 <ACPI::detectPCI()+0x94>
c000e8d6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8db:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8e0:	74 12                	je     c000e8f4 <ACPI::detectPCI()+0x94>
c000e8e2:	83 ec 0c             	sub    esp,0xc
c000e8e5:	68 08 e3 01 c0       	push   0xc001e308
c000e8ea:	e8 a0 18 00 00       	call   c001018f <KePanic(char const*)>
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8f8:	83 f0 01             	xor    eax,0x1
c000e8fb:	84 c0                	test   al,al
c000e8fd:	74 41                	je     c000e940 <ACPI::detectPCI()+0xe0>
c000e8ff:	e8 2c 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e904:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e908:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e90d:	75 0d                	jne    c000e91c <ACPI::detectPCI()+0xbc>
c000e90f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e914:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e919:	eb 25                	jmp    c000e940 <ACPI::detectPCI()+0xe0>
c000e91b:	90                   	nop
c000e91c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e921:	75 1d                	jne    c000e940 <ACPI::detectPCI()+0xe0>
c000e923:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e928:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e92d:	74 11                	je     c000e940 <ACPI::detectPCI()+0xe0>
c000e92f:	83 ec 0c             	sub    esp,0xc
c000e932:	68 08 e3 01 c0       	push   0xc001e308
c000e937:	e8 53 18 00 00       	call   c001018f <KePanic(char const*)>
c000e93c:	83 c4 10             	add    esp,0x10
c000e93f:	90                   	nop
c000e940:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e945:	0f 84 85 00 00 00    	je     c000e9d0 <ACPI::detectPCI()+0x170>
c000e94b:	83 ec 0c             	sub    esp,0xc
c000e94e:	68 93 e3 01 c0       	push   0xc001e393
c000e953:	e8 bf 11 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000e958:	83 c4 10             	add    esp,0x10
c000e95b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e963:	83 ec 0c             	sub    esp,0xc
c000e966:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e96a:	e8 4a 8e ff ff       	call   c00077b9 <malloc>
c000e96f:	83 c4 10             	add    esp,0x10
c000e972:	89 c3                	mov    ebx,eax
c000e974:	83 ec 0c             	sub    esp,0xc
c000e977:	53                   	push   ebx
c000e978:	e8 ad 9a 00 00       	call   c001842a <PCI::PCI()>
c000e97d:	83 c4 10             	add    esp,0x10
c000e980:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e988:	83 ec 08             	sub    esp,0x8
c000e98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e98f:	50                   	push   eax
c000e990:	e8 b7 cf ff ff       	call   c000b94c <Device::addChild(Device*)>
c000e995:	83 c4 10             	add    esp,0x10
c000e998:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e99c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e99e:	83 c0 08             	add    eax,0x8
c000e9a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9a3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9a8:	74 0a                	je     c000e9b4 <ACPI::detectPCI()+0x154>
c000e9aa:	ba 01 00 00 00       	mov    edx,0x1
c000e9af:	eb 0b                	jmp    c000e9bc <ACPI::detectPCI()+0x15c>
c000e9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9b4:	ba 02 00 00 00       	mov    edx,0x2
c000e9b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e9bc:	6a 00                	push   0x0
c000e9be:	6a 00                	push   0x0
c000e9c0:	52                   	push   edx
c000e9c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9c5:	ff d0                	call   eax
c000e9c7:	83 c4 10             	add    esp,0x10
c000e9ca:	e9 91 00 00 00       	jmp    c000ea60 <ACPI::detectPCI()+0x200>
c000e9cf:	90                   	nop
c000e9d0:	83 ec 0c             	sub    esp,0xc
c000e9d3:	68 ab e3 01 c0       	push   0xc001e3ab
c000e9d8:	e8 3a 11 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000e9dd:	83 c4 10             	add    esp,0x10
c000e9e0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9e7:	83 ec 0c             	sub    esp,0xc
c000e9ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9ee:	e8 c6 8d ff ff       	call   c00077b9 <malloc>
c000e9f3:	83 c4 10             	add    esp,0x10
c000e9f6:	89 c3                	mov    ebx,eax
c000e9f8:	83 ec 0c             	sub    esp,0xc
c000e9fb:	53                   	push   ebx
c000e9fc:	e8 55 a5 00 00       	call   c0018f56 <IDE::IDE()>
c000ea01:	83 c4 10             	add    esp,0x10
c000ea04:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea0c:	83 ec 08             	sub    esp,0x8
c000ea0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea13:	50                   	push   eax
c000ea14:	e8 33 cf ff ff       	call   c000b94c <Device::addChild(Device*)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea20:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea2e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea3b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea48:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea4a:	83 c0 08             	add    eax,0x8
c000ea4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea4f:	6a 00                	push   0x0
c000ea51:	6a 00                	push   0x0
c000ea53:	6a 00                	push   0x0
c000ea55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea59:	ff d0                	call   eax
c000ea5b:	83 c4 10             	add    esp,0x10
c000ea5e:	66 90                	xchg   ax,ax
c000ea60:	90                   	nop
c000ea61:	83 c4 28             	add    esp,0x28
c000ea64:	5b                   	pop    ebx
c000ea65:	c3                   	ret    
c000ea66:	66 90                	xchg   ax,ax

c000ea68 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea68:	83 ec 1c             	sub    esp,0x1c
c000ea6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea6f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea72:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea76:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ea7c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea80:	25 ff 00 00 00       	and    eax,0xff
c000ea85:	83 ec 08             	sub    esp,0x8
c000ea88:	50                   	push   eax
c000ea89:	52                   	push   edx
c000ea8a:	e8 17 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea8f:	83 c4 10             	add    esp,0x10
c000ea92:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea96:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ea9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaa0:	25 ff 00 00 00       	and    eax,0xff
c000eaa5:	83 ec 04             	sub    esp,0x4
c000eaa8:	6a 01                	push   0x1
c000eaaa:	50                   	push   eax
c000eaab:	52                   	push   edx
c000eaac:	e8 0b 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eab1:	83 c4 10             	add    esp,0x10
c000eab4:	90                   	nop
c000eab5:	83 c4 1c             	add    esp,0x1c
c000eab8:	c3                   	ret    
c000eab9:	90                   	nop
c000eaba:	66 90                	xchg   ax,ax

c000eabc <ACPI::sleep()>:
c000eabc:	83 ec 0c             	sub    esp,0xc
c000eabf:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eac4:	85 c0                	test   eax,eax
c000eac6:	74 08                	je     c000ead0 <ACPI::sleep()+0x14>
c000eac8:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eacd:	ff d0                	call   eax
c000eacf:	90                   	nop
c000ead0:	90                   	nop
c000ead1:	83 c4 0c             	add    esp,0xc
c000ead4:	c3                   	ret    
c000ead5:	90                   	nop
c000ead6:	66 90                	xchg   ax,ax

c000ead8 <ACPI::open(int, int, void*)>:
c000ead8:	57                   	push   edi
c000ead9:	56                   	push   esi
c000eada:	53                   	push   ebx
c000eadb:	81 ec 70 01 00 00    	sub    esp,0x170
c000eae1:	83 ec 0c             	sub    esp,0xc
c000eae4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eaeb:	e8 70 fd ff ff       	call   c000e860 <ACPI::detectPCI()>
c000eaf0:	83 c4 10             	add    esp,0x10
c000eaf3:	83 ec 0c             	sub    esp,0xc
c000eaf6:	68 30 e3 01 c0       	push   0xc001e330
c000eafb:	e8 17 10 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000eb00:	83 c4 10             	add    esp,0x10
c000eb03:	83 ec 0c             	sub    esp,0xc
c000eb06:	68 c0 e3 01 c0       	push   0xc001e3c0
c000eb0b:	e8 d2 37 00 00       	call   c00122e2 <Thr::loadKernelSymbolTable(char const*)>
c000eb10:	83 c4 10             	add    esp,0x10
c000eb13:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb1b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb26:	83 ec 0c             	sub    esp,0xc
c000eb29:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb30:	e8 84 8c ff ff       	call   c00077b9 <malloc>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	89 c3                	mov    ebx,eax
c000eb3a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000eb3f:	83 ec 04             	sub    esp,0x4
c000eb42:	50                   	push   eax
c000eb43:	68 de e3 01 c0       	push   0xc001e3de
c000eb48:	53                   	push   ebx
c000eb49:	e8 36 bf ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c000eb4e:	83 c4 10             	add    esp,0x10
c000eb51:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb58:	83 ec 08             	sub    esp,0x8
c000eb5b:	6a 01                	push   0x1
c000eb5d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb64:	e8 db bf ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb73:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb7b:	75 17                	jne    c000eb94 <ACPI::open(int, int, void*)+0xbc>
c000eb7d:	83 ec 0c             	sub    esp,0xc
c000eb80:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb87:	e8 16 c0 ff ff       	call   c000aba2 <File::close()>
c000eb8c:	83 c4 10             	add    esp,0x10
c000eb8f:	eb 0b                	jmp    c000eb9c <ACPI::open(int, int, void*)+0xc4>
c000eb91:	8d 76 00             	lea    esi,[esi+0x0]
c000eb94:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb9c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eba4:	74 1e                	je     c000ebc4 <ACPI::open(int, int, void*)+0xec>
c000eba6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ebad:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebaf:	83 c0 08             	add    eax,0x8
c000ebb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebb4:	83 ec 0c             	sub    esp,0xc
c000ebb7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebbe:	ff d0                	call   eax
c000ebc0:	83 c4 10             	add    esp,0x10
c000ebc3:	90                   	nop
c000ebc4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ebcb:	83 f0 01             	xor    eax,0x1
c000ebce:	84 c0                	test   al,al
c000ebd0:	74 42                	je     c000ec14 <ACPI::open(int, int, void*)+0x13c>
c000ebd2:	83 ec 0c             	sub    esp,0xc
c000ebd5:	68 fc e3 01 c0       	push   0xc001e3fc
c000ebda:	e8 38 0f 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000ebdf:	83 c4 10             	add    esp,0x10
c000ebe2:	83 ec 04             	sub    esp,0x4
c000ebe5:	6a 0c                	push   0xc
c000ebe7:	68 17 e4 01 c0       	push   0xc001e417
c000ebec:	68 28 e4 01 c0       	push   0xc001e428
c000ebf1:	e8 dc 2c 00 00       	call   c00118d2 <Reg::readIntWithDefault(char*, char*, int)>
c000ebf6:	83 c4 10             	add    esp,0x10
c000ebf9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ec00:	83 ec 0c             	sub    esp,0xc
c000ec03:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ec0a:	e8 80 a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	66 90                	xchg   ax,ax
c000ec14:	83 ec 0c             	sub    esp,0xc
c000ec17:	68 77 d4 01 c0       	push   0xc001d477
c000ec1c:	e8 f6 0e 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000ec21:	83 c4 10             	add    esp,0x10
c000ec24:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	6a 12                	push   0x12
c000ec30:	50                   	push   eax
c000ec31:	e8 2e d0 ff ff       	call   c000bc64 <getDevicesOfType(DeviceType)>
c000ec36:	83 c4 0c             	add    esp,0xc
c000ec39:	8d 76 00             	lea    esi,[esi+0x0]
c000ec3c:	83 ec 0c             	sub    esp,0xc
c000ec3f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec46:	50                   	push   eax
c000ec47:	e8 70 dc 00 00       	call   c001c8bc <LinkedList<Device>::isEmpty()>
c000ec4c:	83 c4 10             	add    esp,0x10
c000ec4f:	83 f0 01             	xor    eax,0x1
c000ec52:	84 c0                	test   al,al
c000ec54:	0f 84 46 01 00 00    	je     c000eda0 <ACPI::open(int, int, void*)+0x2c8>
c000ec5a:	83 ec 0c             	sub    esp,0xc
c000ec5d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec64:	50                   	push   eax
c000ec65:	e8 6e dc 00 00       	call   c001c8d8 <LinkedList<Device>::getFirstElement()>
c000ec6a:	83 c4 10             	add    esp,0x10
c000ec6d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec74:	83 ec 0c             	sub    esp,0xc
c000ec77:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec7e:	50                   	push   eax
c000ec7f:	e8 5c dc 00 00       	call   c001c8e0 <LinkedList<Device>::removeFirst()>
c000ec84:	83 c4 10             	add    esp,0x10
c000ec87:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec8e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec95:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eca0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eca6:	ba 09 00 00 00       	mov    edx,0x9
c000ecab:	fc                   	cld    
c000ecac:	89 c7                	mov    edi,eax
c000ecae:	89 de                	mov    esi,ebx
c000ecb0:	89 d1                	mov    ecx,edx
c000ecb2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecb4:	83 ec 08             	sub    esp,0x8
c000ecb7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ecbb:	50                   	push   eax
c000ecbc:	83 ec 24             	sub    esp,0x24
c000ecbf:	89 e0                	mov    eax,esp
c000ecc1:	89 c3                	mov    ebx,eax
c000ecc3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ecc7:	ba 09 00 00 00       	mov    edx,0x9
c000eccc:	89 df                	mov    edi,ebx
c000ecce:	89 c6                	mov    esi,eax
c000ecd0:	89 d1                	mov    ecx,edx
c000ecd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecd4:	e8 33 9c 00 00       	call   c001890c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ecd9:	83 c4 30             	add    esp,0x30
c000ecdc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ece3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000eceb:	0f 84 4b ff ff ff    	je     c000ec3c <ACPI::open(int, int, void*)+0x164>
c000ecf1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed06:	e8 ae 8a ff ff       	call   c00077b9 <malloc>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	89 c3                	mov    ebx,eax
c000ed10:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ed15:	83 ec 04             	sub    esp,0x4
c000ed18:	50                   	push   eax
c000ed19:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed20:	53                   	push   ebx
c000ed21:	e8 5e bd ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c000ed26:	83 c4 10             	add    esp,0x10
c000ed29:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed30:	83 ec 0c             	sub    esp,0xc
c000ed33:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed3a:	e8 73 c0 ff ff       	call   c000adb2 <File::exists()>
c000ed3f:	83 c4 10             	add    esp,0x10
c000ed42:	84 c0                	test   al,al
c000ed44:	74 2a                	je     c000ed70 <ACPI::open(int, int, void*)+0x298>
c000ed46:	83 ec 08             	sub    esp,0x8
c000ed49:	6a 01                	push   0x1
c000ed4b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed52:	e8 02 40 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c000ed57:	83 c4 10             	add    esp,0x10
c000ed5a:	83 ec 08             	sub    esp,0x8
c000ed5d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed64:	50                   	push   eax
c000ed65:	e8 20 42 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c000ed6a:	83 c4 10             	add    esp,0x10
c000ed6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed70:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed78:	0f 84 be fe ff ff    	je     c000ec3c <ACPI::open(int, int, void*)+0x164>
c000ed7e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed85:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed87:	83 c0 08             	add    eax,0x8
c000ed8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed8c:	83 ec 0c             	sub    esp,0xc
c000ed8f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed96:	ff d0                	call   eax
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	e9 9c fe ff ff       	jmp    c000ec3c <ACPI::open(int, int, void*)+0x164>
c000eda0:	83 ec 0c             	sub    esp,0xc
c000eda3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edaa:	50                   	push   eax
c000edab:	e8 08 db 00 00       	call   c001c8b8 <LinkedList<Device>::~LinkedList()>
c000edb0:	83 c4 10             	add    esp,0x10
c000edb3:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000edb9:	83 ec 08             	sub    esp,0x8
c000edbc:	6a 01                	push   0x1
c000edbe:	68 2f e4 01 c0       	push   0xc001e42f
c000edc3:	e8 91 3f 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c000edc8:	83 c4 10             	add    esp,0x10
c000edcb:	83 ec 08             	sub    esp,0x8
c000edce:	53                   	push   ebx
c000edcf:	50                   	push   eax
c000edd0:	e8 b5 41 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c000edd5:	83 c4 10             	add    esp,0x10
c000edd8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000eddd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ede3:	83 e0 04             	and    eax,0x4
c000ede6:	84 c0                	test   al,al
c000ede8:	0f 84 16 01 00 00    	je     c000ef04 <ACPI::open(int, int, void*)+0x42c>
c000edee:	83 ec 0c             	sub    esp,0xc
c000edf1:	68 4c e4 01 c0       	push   0xc001e44c
c000edf6:	e8 1c 0d 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000edfb:	83 c4 10             	add    esp,0x10
c000edfe:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ee09:	83 ec 0c             	sub    esp,0xc
c000ee0c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee13:	e8 a1 89 ff ff       	call   c00077b9 <malloc>
c000ee18:	83 c4 10             	add    esp,0x10
c000ee1b:	89 c3                	mov    ebx,eax
c000ee1d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee22:	83 ec 04             	sub    esp,0x4
c000ee25:	50                   	push   eax
c000ee26:	68 69 e4 01 c0       	push   0xc001e469
c000ee2b:	53                   	push   ebx
c000ee2c:	e8 53 bc ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c000ee31:	83 c4 10             	add    esp,0x10
c000ee34:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee3b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee43:	74 1b                	je     c000ee60 <ACPI::open(int, int, void*)+0x388>
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee4f:	e8 5e bf ff ff       	call   c000adb2 <File::exists()>
c000ee54:	83 c4 10             	add    esp,0x10
c000ee57:	84 c0                	test   al,al
c000ee59:	74 05                	je     c000ee60 <ACPI::open(int, int, void*)+0x388>
c000ee5b:	b0 01                	mov    al,0x1
c000ee5d:	eb 05                	jmp    c000ee64 <ACPI::open(int, int, void*)+0x38c>
c000ee5f:	90                   	nop
c000ee60:	b0 00                	mov    al,0x0
c000ee62:	66 90                	xchg   ax,ax
c000ee64:	84 c0                	test   al,al
c000ee66:	74 28                	je     c000ee90 <ACPI::open(int, int, void*)+0x3b8>
c000ee68:	83 ec 08             	sub    esp,0x8
c000ee6b:	6a 01                	push   0x1
c000ee6d:	68 69 e4 01 c0       	push   0xc001e469
c000ee72:	e8 e2 3e 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c000ee77:	83 c4 10             	add    esp,0x10
c000ee7a:	83 ec 08             	sub    esp,0x8
c000ee7d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee84:	50                   	push   eax
c000ee85:	e8 00 41 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c000ee8a:	83 c4 10             	add    esp,0x10
c000ee8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee90:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee98:	74 2a                	je     c000eec4 <ACPI::open(int, int, void*)+0x3ec>
c000ee9a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eea2:	74 20                	je     c000eec4 <ACPI::open(int, int, void*)+0x3ec>
c000eea4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000eeab:	8b 00                	mov    eax,DWORD PTR [eax]
c000eead:	83 c0 08             	add    eax,0x8
c000eeb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeb2:	83 ec 0c             	sub    esp,0xc
c000eeb5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eebc:	ff d0                	call   eax
c000eebe:	83 c4 10             	add    esp,0x10
c000eec1:	8d 76 00             	lea    esi,[esi+0x0]
c000eec4:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000eec9:	83 ec 08             	sub    esp,0x8
c000eecc:	68 86 e4 01 c0       	push   0xc001e486
c000eed1:	50                   	push   eax
c000eed2:	e8 31 f2 ff ff       	call   c000e108 <findDataTable(unsigned char*, char*)>
c000eed7:	83 c4 10             	add    esp,0x10
c000eeda:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eee1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eee9:	74 19                	je     c000ef04 <ACPI::open(int, int, void*)+0x42c>
c000eeeb:	83 ec 08             	sub    esp,0x8
c000eeee:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eef5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eefc:	e8 67 fb ff ff       	call   c000ea68 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ef01:	83 c4 10             	add    esp,0x10
c000ef04:	b8 00 00 00 00       	mov    eax,0x0
c000ef09:	81 c4 70 01 00 00    	add    esp,0x170
c000ef0f:	5b                   	pop    ebx
c000ef10:	5e                   	pop    esi
c000ef11:	5f                   	pop    edi
c000ef12:	c3                   	ret    
c000ef13:	90                   	nop

c000ef14 <CPU::close(int, int, void*)>:
c000ef14:	31 c0                	xor    eax,eax
c000ef16:	c3                   	ret    
c000ef17:	90                   	nop

c000ef18 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef18:	60                   	pusha  
c000ef19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef25:	9c                   	pushf  
c000ef26:	fa                   	cli    
c000ef27:	0f 09                	wbinvd 
c000ef29:	0f 30                	wrmsr  
c000ef2b:	9d                   	popf   
c000ef2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef30:	89 02                	mov    DWORD PTR [edx],eax
c000ef32:	61                   	popa   
c000ef33:	c3                   	ret    

c000ef34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef34:	60                   	pusha  
c000ef35:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef39:	9c                   	pushf  
c000ef3a:	fa                   	cli    
c000ef3b:	0f 09                	wbinvd 
c000ef3d:	31 c0                	xor    eax,eax
c000ef3f:	31 d2                	xor    edx,edx
c000ef41:	0f 32                	rdmsr  
c000ef43:	9d                   	popf   
c000ef44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef48:	89 02                	mov    DWORD PTR [edx],eax
c000ef4a:	61                   	popa   
c000ef4b:	c3                   	ret    

c000ef4c <CPU::AMD_K6_writeback(int, int, int)>:
c000ef4c:	56                   	push   esi
c000ef4d:	53                   	push   ebx
c000ef4e:	83 ec 10             	sub    esp,0x10
c000ef51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef55:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef5a:	75 5d                	jne    c000efb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef5c:	83 f8 08             	cmp    eax,0x8
c000ef5f:	75 09                	jne    c000ef6a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef61:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef66:	7e 13                	jle    c000ef7b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef68:	eb 30                	jmp    c000ef9a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef6a:	83 f8 06             	cmp    eax,0x6
c000ef6d:	7c 4a                	jl     c000efb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef6f:	83 f8 07             	cmp    eax,0x7
c000ef72:	7e 07                	jle    c000ef7b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef74:	83 f8 09             	cmp    eax,0x9
c000ef77:	74 21                	je     c000ef9a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef79:	eb 3e                	jmp    c000efb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef7b:	89 e6                	mov    esi,esp
c000ef7d:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000ef83:	56                   	push   esi
c000ef84:	c1 eb 15             	shr    ebx,0x15
c000ef87:	68 82 00 00 c0       	push   0xc0000082
c000ef8c:	83 e3 7e             	and    ebx,0x7e
c000ef8f:	e8 a0 ff ff ff       	call   c000ef34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef94:	56                   	push   esi
c000ef95:	6a 00                	push   0x0
c000ef97:	53                   	push   ebx
c000ef98:	eb 12                	jmp    c000efac <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef9a:	89 e3                	mov    ebx,esp
c000ef9c:	53                   	push   ebx
c000ef9d:	68 82 00 00 c0       	push   0xc0000082
c000efa2:	e8 8d ff ff ff       	call   c000ef34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000efa7:	53                   	push   ebx
c000efa8:	6a 00                	push   0x0
c000efaa:	6a 00                	push   0x0
c000efac:	68 82 00 00 c0       	push   0xc0000082
c000efb1:	e8 62 ff ff ff       	call   c000ef18 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000efb6:	83 c4 18             	add    esp,0x18
c000efb9:	83 c4 10             	add    esp,0x10
c000efbc:	5b                   	pop    ebx
c000efbd:	5e                   	pop    esi
c000efbe:	c3                   	ret    
c000efbf:	90                   	nop

c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000efc0:	55                   	push   ebp
c000efc1:	57                   	push   edi
c000efc2:	56                   	push   esi
c000efc3:	53                   	push   ebx
c000efc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000efcc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000efd0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000efd4:	39 05 f0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7f0,eax
c000efda:	75 23                	jne    c000efff <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efdc:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000efe1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efe5:	89 06                	mov    DWORD PTR [esi],eax
c000efe7:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000efec:	89 07                	mov    DWORD PTR [edi],eax
c000efee:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000eff3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000eff6:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000effb:	89 02                	mov    DWORD PTR [edx],eax
c000effd:	eb 3f                	jmp    c000f03e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efff:	31 c9                	xor    ecx,ecx
c000f001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f005:	0f a2                	cpuid  
c000f007:	89 06                	mov    DWORD PTR [esi],eax
c000f009:	89 1f                	mov    DWORD PTR [edi],ebx
c000f00b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f00f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f012:	89 10                	mov    DWORD PTR [eax],edx
c000f014:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f018:	a3 f0 f7 01 c0       	mov    ds:0xc001f7f0,eax
c000f01d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f01f:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f024:	8b 07                	mov    eax,DWORD PTR [edi]
c000f026:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f02b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f02e:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f037:	8b 00                	mov    eax,DWORD PTR [eax]
c000f039:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f03e:	5b                   	pop    ebx
c000f03f:	5e                   	pop    esi
c000f040:	5f                   	pop    edi
c000f041:	5d                   	pop    ebp
c000f042:	c3                   	ret    
c000f043:	90                   	nop

c000f044 <CPU::cpuidCheckEDX(unsigned int)>:
c000f044:	83 ec 10             	sub    esp,0x10
c000f047:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04b:	50                   	push   eax
c000f04c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f050:	50                   	push   eax
c000f051:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f055:	50                   	push   eax
c000f056:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f05a:	50                   	push   eax
c000f05b:	6a 01                	push   0x1
c000f05d:	e8 5e ff ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f062:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f066:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f06a:	0f 95 c0             	setne  al
c000f06d:	83 c4 24             	add    esp,0x24
c000f070:	c3                   	ret    
c000f071:	90                   	nop

c000f072 <CPU::cpuidCheckECX(unsigned int)>:
c000f072:	83 ec 10             	sub    esp,0x10
c000f075:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f079:	50                   	push   eax
c000f07a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07e:	50                   	push   eax
c000f07f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f083:	50                   	push   eax
c000f084:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f088:	50                   	push   eax
c000f089:	6a 01                	push   0x1
c000f08b:	e8 30 ff ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f090:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f094:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f098:	0f 95 c0             	setne  al
c000f09b:	83 c4 24             	add    esp,0x24
c000f09e:	c3                   	ret    
c000f09f:	90                   	nop

c000f0a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f0a0:	83 ec 10             	sub    esp,0x10
c000f0a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a7:	50                   	push   eax
c000f0a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ac:	50                   	push   eax
c000f0ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b1:	50                   	push   eax
c000f0b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b6:	50                   	push   eax
c000f0b7:	6a 07                	push   0x7
c000f0b9:	e8 02 ff ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0c2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f0c6:	0f 95 c0             	setne  al
c000f0c9:	83 c4 24             	add    esp,0x24
c000f0cc:	c3                   	ret    
c000f0cd:	90                   	nop

c000f0ce <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f0ce:	83 ec 10             	sub    esp,0x10
c000f0d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d5:	50                   	push   eax
c000f0d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0da:	50                   	push   eax
c000f0db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0df:	50                   	push   eax
c000f0e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0e4:	50                   	push   eax
c000f0e5:	6a 07                	push   0x7
c000f0e7:	e8 d4 fe ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0f0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0f4:	0f 95 c0             	setne  al
c000f0f7:	83 c4 24             	add    esp,0x24
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <CPU::CPU()>:
c000f0fc:	83 ec 0c             	sub    esp,0xc
c000f0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f103:	83 ec 08             	sub    esp,0x8
c000f106:	68 a9 e5 01 c0       	push   0xc001e5a9
c000f10b:	50                   	push   eax
c000f10c:	e8 d3 c9 ff ff       	call   c000bae4 <Device::Device(char const*)>
c000f111:	83 c4 10             	add    esp,0x10
c000f114:	ba 30 e6 01 c0       	mov    edx,0xc001e630
c000f119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f11d:	89 10                	mov    DWORD PTR [eax],edx
c000f11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f123:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f131:	05 78 01 00 00       	add    eax,0x178
c000f136:	83 ec 0c             	sub    esp,0xc
c000f139:	50                   	push   eax
c000f13a:	e8 3b 7f ff ff       	call   c000707a <GDT::GDT()>
c000f13f:	83 c4 10             	add    esp,0x10
c000f142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f146:	05 7c 09 00 00       	add    eax,0x97c
c000f14b:	83 ec 0c             	sub    esp,0xc
c000f14e:	50                   	push   eax
c000f14f:	e8 60 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f154:	83 c4 10             	add    esp,0x10
c000f157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f15b:	05 7c 11 00 00       	add    eax,0x117c
c000f160:	83 ec 0c             	sub    esp,0xc
c000f163:	50                   	push   eax
c000f164:	e8 5f 9a ff ff       	call   c0008bc8 <TSS::TSS()>
c000f169:	83 c4 10             	add    esp,0x10
c000f16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f170:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f17b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f185:	90                   	nop
c000f186:	83 c4 0c             	add    esp,0xc
c000f189:	c3                   	ret    

c000f18a <CPU::displayFeatures()>:
c000f18a:	c3                   	ret    
c000f18b:	90                   	nop

c000f18c <CPU::detectFeatures()>:
c000f18c:	55                   	push   ebp
c000f18d:	57                   	push   edi
c000f18e:	56                   	push   esi
c000f18f:	53                   	push   ebx
c000f190:	83 ec 30             	sub    esp,0x30
c000f193:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f197:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f1a1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f1a8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f1ae:	6a 0d                	push   0xd
c000f1b0:	6a 00                	push   0x0
c000f1b2:	55                   	push   ebp
c000f1b3:	e8 18 13 ff ff       	call   c00004d0 <memset>
c000f1b8:	83 c4 10             	add    esp,0x10
c000f1bb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f1c0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f1c7:	0f 84 d5 05 00 00    	je     c000f7a2 <CPU::detectFeatures()+0x616>
c000f1cd:	83 ec 0c             	sub    esp,0xc
c000f1d0:	89 ef                	mov    edi,ebp
c000f1d2:	6a 10                	push   0x10
c000f1d4:	e8 6b fe ff ff       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c000f1d9:	83 e0 01             	and    eax,0x1
c000f1dc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1df:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1e5:	83 e0 fd             	and    eax,0xfffffffd
c000f1e8:	09 d0                	or     eax,edx
c000f1ea:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1f0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1f7:	e8 48 fe ff ff       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c000f1fc:	83 e0 01             	and    eax,0x1
c000f1ff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f206:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f20c:	83 e0 fb             	and    eax,0xfffffffb
c000f20f:	09 d0                	or     eax,edx
c000f211:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f217:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f21e:	e8 21 fe ff ff       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c000f223:	83 e0 01             	and    eax,0x1
c000f226:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f22d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f233:	83 e0 f7             	and    eax,0xfffffff7
c000f236:	09 d0                	or     eax,edx
c000f238:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f23e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f245:	e8 fa fd ff ff       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c000f24a:	83 e0 01             	and    eax,0x1
c000f24d:	c1 e0 04             	shl    eax,0x4
c000f250:	88 c2                	mov    dl,al
c000f252:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f258:	83 e0 ef             	and    eax,0xffffffef
c000f25b:	09 d0                	or     eax,edx
c000f25d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f263:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f26a:	e8 d5 fd ff ff       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c000f26f:	83 e0 01             	and    eax,0x1
c000f272:	c1 e0 05             	shl    eax,0x5
c000f275:	88 c2                	mov    dl,al
c000f277:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f27d:	83 e0 df             	and    eax,0xffffffdf
c000f280:	09 d0                	or     eax,edx
c000f282:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f288:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f28f:	e8 b0 fd ff ff       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c000f294:	83 e0 01             	and    eax,0x1
c000f297:	8d 14 00             	lea    edx,[eax+eax*1]
c000f29a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f2a0:	83 e0 fd             	and    eax,0xfffffffd
c000f2a3:	09 d0                	or     eax,edx
c000f2a5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f2ab:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f2b2:	e8 8d fd ff ff       	call   c000f044 <CPU::cpuidCheckEDX(unsigned int)>
c000f2b7:	83 e0 01             	and    eax,0x1
c000f2ba:	c1 e0 06             	shl    eax,0x6
c000f2bd:	88 c2                	mov    dl,al
c000f2bf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f2c5:	83 e0 bf             	and    eax,0xffffffbf
c000f2c8:	09 d0                	or     eax,edx
c000f2ca:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f2d0:	58                   	pop    eax
c000f2d1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2d5:	50                   	push   eax
c000f2d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2da:	50                   	push   eax
c000f2db:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2df:	56                   	push   esi
c000f2e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2e4:	50                   	push   eax
c000f2e5:	6a 00                	push   0x0
c000f2e7:	e8 d4 fc ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2ec:	b8 04 00 00 00       	mov    eax,0x4
c000f2f1:	89 c1                	mov    ecx,eax
c000f2f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2f5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2ff:	89 c1                	mov    ecx,eax
c000f301:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f303:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f309:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f30d:	89 c1                	mov    ecx,eax
c000f30f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f311:	83 c4 18             	add    esp,0x18
c000f314:	68 b8 e4 01 c0       	push   0xc001e4b8
c000f319:	55                   	push   ebp
c000f31a:	e8 c1 13 ff ff       	call   c00006e0 <strcmp>
c000f31f:	83 c4 10             	add    esp,0x10
c000f322:	85 c0                	test   eax,eax
c000f324:	75 0f                	jne    c000f335 <CPU::detectFeatures()+0x1a9>
c000f326:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f330:	e9 22 02 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f335:	50                   	push   eax
c000f336:	50                   	push   eax
c000f337:	68 c5 e4 01 c0       	push   0xc001e4c5
c000f33c:	55                   	push   ebp
c000f33d:	e8 9e 13 ff ff       	call   c00006e0 <strcmp>
c000f342:	83 c4 10             	add    esp,0x10
c000f345:	85 c0                	test   eax,eax
c000f347:	74 dd                	je     c000f326 <CPU::detectFeatures()+0x19a>
c000f349:	50                   	push   eax
c000f34a:	50                   	push   eax
c000f34b:	68 d2 e4 01 c0       	push   0xc001e4d2
c000f350:	55                   	push   ebp
c000f351:	e8 8a 13 ff ff       	call   c00006e0 <strcmp>
c000f356:	83 c4 10             	add    esp,0x10
c000f359:	85 c0                	test   eax,eax
c000f35b:	74 2a                	je     c000f387 <CPU::detectFeatures()+0x1fb>
c000f35d:	50                   	push   eax
c000f35e:	50                   	push   eax
c000f35f:	68 df e4 01 c0       	push   0xc001e4df
c000f364:	55                   	push   ebp
c000f365:	e8 76 13 ff ff       	call   c00006e0 <strcmp>
c000f36a:	83 c4 10             	add    esp,0x10
c000f36d:	85 c0                	test   eax,eax
c000f36f:	74 16                	je     c000f387 <CPU::detectFeatures()+0x1fb>
c000f371:	50                   	push   eax
c000f372:	50                   	push   eax
c000f373:	68 ec e4 01 c0       	push   0xc001e4ec
c000f378:	55                   	push   ebp
c000f379:	e8 62 13 ff ff       	call   c00006e0 <strcmp>
c000f37e:	83 c4 10             	add    esp,0x10
c000f381:	85 c0                	test   eax,eax
c000f383:	74 48                	je     c000f3cd <CPU::detectFeatures()+0x241>
c000f385:	eb 0f                	jmp    c000f396 <CPU::detectFeatures()+0x20a>
c000f387:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f391:	e9 c1 01 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f396:	50                   	push   eax
c000f397:	50                   	push   eax
c000f398:	68 f9 e4 01 c0       	push   0xc001e4f9
c000f39d:	55                   	push   ebp
c000f39e:	e8 3d 13 ff ff       	call   c00006e0 <strcmp>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	85 c0                	test   eax,eax
c000f3a8:	74 23                	je     c000f3cd <CPU::detectFeatures()+0x241>
c000f3aa:	57                   	push   edi
c000f3ab:	57                   	push   edi
c000f3ac:	68 06 e5 01 c0       	push   0xc001e506
c000f3b1:	55                   	push   ebp
c000f3b2:	e8 29 13 ff ff       	call   c00006e0 <strcmp>
c000f3b7:	83 c4 10             	add    esp,0x10
c000f3ba:	85 c0                	test   eax,eax
c000f3bc:	75 1e                	jne    c000f3dc <CPU::detectFeatures()+0x250>
c000f3be:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f3c8:	e9 8a 01 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f3cd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3d7:	e9 7b 01 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f3dc:	56                   	push   esi
c000f3dd:	56                   	push   esi
c000f3de:	68 13 e5 01 c0       	push   0xc001e513
c000f3e3:	55                   	push   ebp
c000f3e4:	e8 f7 12 ff ff       	call   c00006e0 <strcmp>
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	85 c0                	test   eax,eax
c000f3ee:	75 0f                	jne    c000f3ff <CPU::detectFeatures()+0x273>
c000f3f0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3fa:	e9 58 01 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f3ff:	51                   	push   ecx
c000f400:	51                   	push   ecx
c000f401:	68 d2 e4 01 c0       	push   0xc001e4d2
c000f406:	55                   	push   ebp
c000f407:	e8 d4 12 ff ff       	call   c00006e0 <strcmp>
c000f40c:	83 c4 10             	add    esp,0x10
c000f40f:	85 c0                	test   eax,eax
c000f411:	75 0f                	jne    c000f422 <CPU::detectFeatures()+0x296>
c000f413:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f41d:	e9 35 01 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f422:	52                   	push   edx
c000f423:	52                   	push   edx
c000f424:	68 20 e5 01 c0       	push   0xc001e520
c000f429:	55                   	push   ebp
c000f42a:	e8 b1 12 ff ff       	call   c00006e0 <strcmp>
c000f42f:	83 c4 10             	add    esp,0x10
c000f432:	85 c0                	test   eax,eax
c000f434:	75 0f                	jne    c000f445 <CPU::detectFeatures()+0x2b9>
c000f436:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f440:	e9 12 01 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f445:	50                   	push   eax
c000f446:	50                   	push   eax
c000f447:	68 2d e5 01 c0       	push   0xc001e52d
c000f44c:	55                   	push   ebp
c000f44d:	e8 8e 12 ff ff       	call   c00006e0 <strcmp>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	85 c0                	test   eax,eax
c000f457:	75 0f                	jne    c000f468 <CPU::detectFeatures()+0x2dc>
c000f459:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f463:	e9 ef 00 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f468:	50                   	push   eax
c000f469:	50                   	push   eax
c000f46a:	68 3a e5 01 c0       	push   0xc001e53a
c000f46f:	55                   	push   ebp
c000f470:	e8 6b 12 ff ff       	call   c00006e0 <strcmp>
c000f475:	83 c4 10             	add    esp,0x10
c000f478:	85 c0                	test   eax,eax
c000f47a:	75 0f                	jne    c000f48b <CPU::detectFeatures()+0x2ff>
c000f47c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f486:	e9 cc 00 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f48b:	50                   	push   eax
c000f48c:	50                   	push   eax
c000f48d:	68 47 e5 01 c0       	push   0xc001e547
c000f492:	55                   	push   ebp
c000f493:	e8 48 12 ff ff       	call   c00006e0 <strcmp>
c000f498:	83 c4 10             	add    esp,0x10
c000f49b:	85 c0                	test   eax,eax
c000f49d:	75 0f                	jne    c000f4ae <CPU::detectFeatures()+0x322>
c000f49f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f4a9:	e9 a9 00 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f4ae:	50                   	push   eax
c000f4af:	50                   	push   eax
c000f4b0:	68 54 e5 01 c0       	push   0xc001e554
c000f4b5:	55                   	push   ebp
c000f4b6:	e8 25 12 ff ff       	call   c00006e0 <strcmp>
c000f4bb:	83 c4 10             	add    esp,0x10
c000f4be:	85 c0                	test   eax,eax
c000f4c0:	75 0f                	jne    c000f4d1 <CPU::detectFeatures()+0x345>
c000f4c2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f4cc:	e9 86 00 00 00       	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f4d1:	50                   	push   eax
c000f4d2:	50                   	push   eax
c000f4d3:	68 61 e5 01 c0       	push   0xc001e561
c000f4d8:	55                   	push   ebp
c000f4d9:	e8 02 12 ff ff       	call   c00006e0 <strcmp>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	85 c0                	test   eax,eax
c000f4e3:	75 0c                	jne    c000f4f1 <CPU::detectFeatures()+0x365>
c000f4e5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4ef:	eb 66                	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f4f1:	50                   	push   eax
c000f4f2:	50                   	push   eax
c000f4f3:	68 6e e5 01 c0       	push   0xc001e56e
c000f4f8:	55                   	push   ebp
c000f4f9:	e8 e2 11 ff ff       	call   c00006e0 <strcmp>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	85 c0                	test   eax,eax
c000f503:	75 0c                	jne    c000f511 <CPU::detectFeatures()+0x385>
c000f505:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f50f:	eb 46                	jmp    c000f557 <CPU::detectFeatures()+0x3cb>
c000f511:	57                   	push   edi
c000f512:	57                   	push   edi
c000f513:	68 7b e5 01 c0       	push   0xc001e57b
c000f518:	55                   	push   ebp
c000f519:	e8 c2 11 ff ff       	call   c00006e0 <strcmp>
c000f51e:	83 c4 10             	add    esp,0x10
c000f521:	85 c0                	test   eax,eax
c000f523:	74 e0                	je     c000f505 <CPU::detectFeatures()+0x379>
c000f525:	56                   	push   esi
c000f526:	56                   	push   esi
c000f527:	68 88 e5 01 c0       	push   0xc001e588
c000f52c:	55                   	push   ebp
c000f52d:	e8 ae 11 ff ff       	call   c00006e0 <strcmp>
c000f532:	83 c4 10             	add    esp,0x10
c000f535:	85 c0                	test   eax,eax
c000f537:	74 cc                	je     c000f505 <CPU::detectFeatures()+0x379>
c000f539:	51                   	push   ecx
c000f53a:	51                   	push   ecx
c000f53b:	68 95 e5 01 c0       	push   0xc001e595
c000f540:	55                   	push   ebp
c000f541:	e8 9a 11 ff ff       	call   c00006e0 <strcmp>
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	85 c0                	test   eax,eax
c000f54b:	74 b8                	je     c000f505 <CPU::detectFeatures()+0x379>
c000f54d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f557:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f55c:	0f 86 be 00 00 00    	jbe    c000f620 <CPU::detectFeatures()+0x494>
c000f562:	83 ec 0c             	sub    esp,0xc
c000f565:	68 80 00 00 00       	push   0x80
c000f56a:	e8 31 fb ff ff       	call   c000f0a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f56f:	83 e0 01             	and    eax,0x1
c000f572:	c1 e0 06             	shl    eax,0x6
c000f575:	88 c2                	mov    dl,al
c000f577:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f57d:	83 e0 bf             	and    eax,0xffffffbf
c000f580:	09 d0                	or     eax,edx
c000f582:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f588:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f58f:	e8 0c fb ff ff       	call   c000f0a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f594:	83 e0 01             	and    eax,0x1
c000f597:	c1 e0 04             	shl    eax,0x4
c000f59a:	88 c2                	mov    dl,al
c000f59c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5a2:	83 e0 ef             	and    eax,0xffffffef
c000f5a5:	09 d0                	or     eax,edx
c000f5a7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5ad:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f5b4:	e8 e7 fa ff ff       	call   c000f0a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5b9:	c1 e0 07             	shl    eax,0x7
c000f5bc:	88 c2                	mov    dl,al
c000f5be:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5c4:	83 e0 7f             	and    eax,0x7f
c000f5c7:	09 d0                	or     eax,edx
c000f5c9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5cf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5d6:	e8 f3 fa ff ff       	call   c000f0ce <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5db:	83 e0 01             	and    eax,0x1
c000f5de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5e5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5eb:	83 e0 f7             	and    eax,0xfffffff7
c000f5ee:	09 d0                	or     eax,edx
c000f5f0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5f6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5fd:	e8 cc fa ff ff       	call   c000f0ce <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f602:	83 c4 10             	add    esp,0x10
c000f605:	83 e0 01             	and    eax,0x1
c000f608:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f60f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f615:	83 e0 fb             	and    eax,0xfffffffb
c000f618:	09 d0                	or     eax,edx
c000f61a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f620:	83 ec 0c             	sub    esp,0xc
c000f623:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f627:	50                   	push   eax
c000f628:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f62c:	50                   	push   eax
c000f62d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f631:	56                   	push   esi
c000f632:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f636:	50                   	push   eax
c000f637:	6a 01                	push   0x1
c000f639:	e8 82 f9 ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f63e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f642:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f648:	88 ca                	mov    dl,cl
c000f64a:	83 e0 f0             	and    eax,0xfffffff0
c000f64d:	83 e2 0f             	and    edx,0xf
c000f650:	09 d0                	or     eax,edx
c000f652:	88 ca                	mov    dl,cl
c000f654:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f65a:	c0 ea 04             	shr    dl,0x4
c000f65d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f661:	0f b6 c2             	movzx  eax,dl
c000f664:	83 c4 20             	add    esp,0x20
c000f667:	c1 e0 06             	shl    eax,0x6
c000f66a:	89 c7                	mov    edi,eax
c000f66c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f672:	66 25 3f c0          	and    ax,0xc03f
c000f676:	09 f8                	or     eax,edi
c000f678:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f67f:	89 c8                	mov    eax,ecx
c000f681:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f688:	c1 e8 08             	shr    eax,0x8
c000f68b:	83 e5 3f             	and    ebp,0x3f
c000f68e:	83 e0 0f             	and    eax,0xf
c000f691:	89 c7                	mov    edi,eax
c000f693:	c1 e7 06             	shl    edi,0x6
c000f696:	09 ef                	or     edi,ebp
c000f698:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f69f:	89 fa                	mov    edx,edi
c000f6a1:	83 e5 c0             	and    ebp,0xffffffc0
c000f6a4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f6aa:	88 c2                	mov    dl,al
c000f6ac:	c0 ea 02             	shr    dl,0x2
c000f6af:	89 d7                	mov    edi,edx
c000f6b1:	09 ef                	or     edi,ebp
c000f6b3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f6b9:	89 fa                	mov    edx,edi
c000f6bb:	83 e5 cf             	and    ebp,0xffffffcf
c000f6be:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f6c4:	89 cf                	mov    edi,ecx
c000f6c6:	c1 ef 0c             	shr    edi,0xc
c000f6c9:	83 e7 03             	and    edi,0x3
c000f6cc:	c1 e7 04             	shl    edi,0x4
c000f6cf:	09 ef                	or     edi,ebp
c000f6d1:	3c 06                	cmp    al,0x6
c000f6d3:	89 fa                	mov    edx,edi
c000f6d5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6db:	74 04                	je     c000f6e1 <CPU::detectFeatures()+0x555>
c000f6dd:	3c 0f                	cmp    al,0xf
c000f6df:	75 5c                	jne    c000f73d <CPU::detectFeatures()+0x5b1>
c000f6e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6e5:	89 cf                	mov    edi,ecx
c000f6e7:	c1 ef 10             	shr    edi,0x10
c000f6ea:	c1 e7 04             	shl    edi,0x4
c000f6ed:	09 fa                	or     edx,edi
c000f6ef:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6f5:	0f b6 d2             	movzx  edx,dl
c000f6f8:	66 81 e7 3f c0       	and    di,0xc03f
c000f6fd:	c1 e2 06             	shl    edx,0x6
c000f700:	09 fa                	or     edx,edi
c000f702:	3c 0f                	cmp    al,0xf
c000f704:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f70b:	75 30                	jne    c000f73d <CPU::detectFeatures()+0x5b1>
c000f70d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f713:	c1 e9 14             	shr    ecx,0x14
c000f716:	83 e0 3f             	and    eax,0x3f
c000f719:	83 c1 0f             	add    ecx,0xf
c000f71c:	88 ca                	mov    dl,cl
c000f71e:	c0 e9 02             	shr    cl,0x2
c000f721:	c1 e2 06             	shl    edx,0x6
c000f724:	09 d0                	or     eax,edx
c000f726:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f72c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f732:	83 e0 c0             	and    eax,0xffffffc0
c000f735:	09 c1                	or     ecx,eax
c000f737:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f73d:	83 ec 0c             	sub    esp,0xc
c000f740:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f747:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f74b:	50                   	push   eax
c000f74c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f750:	55                   	push   ebp
c000f751:	56                   	push   esi
c000f752:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f756:	57                   	push   edi
c000f757:	68 00 00 00 80       	push   0x80000000
c000f75c:	e8 5f f8 ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f761:	83 c4 20             	add    esp,0x20
c000f764:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f76c:	76 22                	jbe    c000f790 <CPU::detectFeatures()+0x604>
c000f76e:	83 ec 0c             	sub    esp,0xc
c000f771:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f775:	50                   	push   eax
c000f776:	55                   	push   ebp
c000f777:	56                   	push   esi
c000f778:	57                   	push   edi
c000f779:	68 01 00 00 80       	push   0x80000001
c000f77e:	e8 3d f8 ff ff       	call   c000efc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f783:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f78d:	83 c4 20             	add    esp,0x20
c000f790:	52                   	push   edx
c000f791:	52                   	push   edx
c000f792:	68 a1 e5 01 c0       	push   0xc001e5a1
c000f797:	53                   	push   ebx
c000f798:	e8 39 c3 ff ff       	call   c000bad6 <Device::setName(char const*)>
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	eb 67                	jmp    c000f809 <CPU::detectFeatures()+0x67d>
c000f7a2:	50                   	push   eax
c000f7a3:	50                   	push   eax
c000f7a4:	68 06 e5 01 c0       	push   0xc001e506
c000f7a9:	55                   	push   ebp
c000f7aa:	e8 51 0e ff ff       	call   c0000600 <strcpy>
c000f7af:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f7b9:	e8 05 0a ff ff       	call   c00001c3 <is486>
c000f7be:	83 c4 10             	add    esp,0x10
c000f7c1:	85 c0                	test   eax,eax
c000f7c3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7c9:	74 1d                	je     c000f7e8 <CPU::detectFeatures()+0x65c>
c000f7cb:	83 c8 07             	or     eax,0x7
c000f7ce:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7d4:	0f 20 c0             	mov    eax,cr0
c000f7d7:	83 e0 14             	and    eax,0x14
c000f7da:	83 f8 04             	cmp    eax,0x4
c000f7dd:	75 0e                	jne    c000f7ed <CPU::detectFeatures()+0x661>
c000f7df:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7e6:	eb 21                	jmp    c000f809 <CPU::detectFeatures()+0x67d>
c000f7e8:	83 e0 f8             	and    eax,0xfffffff8
c000f7eb:	eb e1                	jmp    c000f7ce <CPU::detectFeatures()+0x642>
c000f7ed:	e8 ac 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7f2:	83 e0 01             	and    eax,0x1
c000f7f5:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7f8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7fe:	83 e0 fd             	and    eax,0xfffffffd
c000f801:	09 d0                	or     eax,edx
c000f803:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f809:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f810:	74 0e                	je     c000f820 <CPU::detectFeatures()+0x694>
c000f812:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f817:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f81e:	eb 20                	jmp    c000f840 <CPU::detectFeatures()+0x6b4>
c000f820:	e8 79 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f825:	83 e0 01             	and    eax,0x1
c000f828:	8d 14 00             	lea    edx,[eax+eax*1]
c000f82b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f831:	83 e0 fd             	and    eax,0xfffffffd
c000f834:	09 d0                	or     eax,edx
c000f836:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f83c:	a8 02                	test   al,0x2
c000f83e:	75 d2                	jne    c000f812 <CPU::detectFeatures()+0x686>
c000f840:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f847:	83 c4 2c             	add    esp,0x2c
c000f84a:	5b                   	pop    ebx
c000f84b:	5e                   	pop    esi
c000f84c:	5f                   	pop    edi
c000f84d:	5d                   	pop    ebp
c000f84e:	c3                   	ret    
c000f84f:	90                   	nop

c000f850 <CPU::setupSMEP()>:
c000f850:	0f 20 e0             	mov    eax,cr4
c000f853:	0d 00 00 10 00       	or     eax,0x100000
c000f858:	0f 22 e0             	mov    cr4,eax
c000f85b:	c3                   	ret    

c000f85c <CPU::setupUMIP()>:
c000f85c:	0f 20 e0             	mov    eax,cr4
c000f85f:	80 cc 08             	or     ah,0x8
c000f862:	0f 22 e0             	mov    cr4,eax
c000f865:	c3                   	ret    

c000f866 <CPU::setupTSC()>:
c000f866:	0f 20 e0             	mov    eax,cr4
c000f869:	83 c8 04             	or     eax,0x4
c000f86c:	0f 22 e0             	mov    cr4,eax
c000f86f:	c3                   	ret    

c000f870 <CPU::setupLargePages()>:
c000f870:	0f 20 e0             	mov    eax,cr4
c000f873:	83 c8 10             	or     eax,0x10
c000f876:	0f 22 e0             	mov    cr4,eax
c000f879:	c3                   	ret    

c000f87a <CPU::setupPAT()>:
c000f87a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f87f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f886:	74 2c                	je     c000f8b4 <CPU::setupPAT()+0x3a>
c000f888:	53                   	push   ebx
c000f889:	83 ec 10             	sub    esp,0x10
c000f88c:	68 77 02 00 00       	push   0x277
c000f891:	50                   	push   eax
c000f892:	e8 5b 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f897:	83 e2 f8             	and    edx,0xfffffff8
c000f89a:	83 ca 01             	or     edx,0x1
c000f89d:	52                   	push   edx
c000f89e:	50                   	push   eax
c000f89f:	68 77 02 00 00       	push   0x277
c000f8a4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f8aa:	e8 6f 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f8af:	83 c4 28             	add    esp,0x28
c000f8b2:	5b                   	pop    ebx
c000f8b3:	c3                   	ret    
c000f8b4:	c3                   	ret    
c000f8b5:	90                   	nop

c000f8b6 <CPU::setupMTRR()>:
c000f8b6:	c3                   	ret    
c000f8b7:	90                   	nop

c000f8b8 <CPU::setupGlobalPages()>:
c000f8b8:	0f 20 e0             	mov    eax,cr4
c000f8bb:	0c 80                	or     al,0x80
c000f8bd:	0f 22 e0             	mov    cr4,eax
c000f8c0:	c3                   	ret    
c000f8c1:	90                   	nop

c000f8c2 <CPU::allowUsermodeDataAccess()>:
c000f8c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8c6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8cd:	74 03                	je     c000f8d2 <CPU::allowUsermodeDataAccess()+0x10>
c000f8cf:	0f 01 cb             	stac   
c000f8d2:	c3                   	ret    
c000f8d3:	90                   	nop

c000f8d4 <CPU::prohibitUsermodeDataAccess()>:
c000f8d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8d8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8df:	74 03                	je     c000f8e4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8e1:	0f 01 ca             	clac   
c000f8e4:	c3                   	ret    
c000f8e5:	90                   	nop

c000f8e6 <CPU::setupSMAP()>:
c000f8e6:	0f 20 e0             	mov    eax,cr4
c000f8e9:	0d 00 00 20 00       	or     eax,0x200000
c000f8ee:	0f 22 e0             	mov    cr4,eax
c000f8f1:	eb e1                	jmp    c000f8d4 <CPU::prohibitUsermodeDataAccess()>
c000f8f3:	90                   	nop

c000f8f4 <CPU::setupFeatures()>:
c000f8f4:	53                   	push   ebx
c000f8f5:	83 ec 08             	sub    esp,0x8
c000f8f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8fc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f903:	74 18                	je     c000f91d <CPU::setupFeatures()+0x29>
c000f905:	83 ec 0c             	sub    esp,0xc
c000f908:	68 ad e5 01 c0       	push   0xc001e5ad
c000f90d:	e8 fd ab ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000f912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f915:	e8 42 ff ff ff       	call   c000f85c <CPU::setupUMIP()>
c000f91a:	83 c4 10             	add    esp,0x10
c000f91d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f924:	74 18                	je     c000f93e <CPU::setupFeatures()+0x4a>
c000f926:	83 ec 0c             	sub    esp,0xc
c000f929:	68 b7 e5 01 c0       	push   0xc001e5b7
c000f92e:	e8 dc ab ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000f933:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f936:	e8 2b ff ff ff       	call   c000f866 <CPU::setupTSC()>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f945:	74 18                	je     c000f95f <CPU::setupFeatures()+0x6b>
c000f947:	83 ec 0c             	sub    esp,0xc
c000f94a:	68 c0 e5 01 c0       	push   0xc001e5c0
c000f94f:	e8 bb ab ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000f954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f957:	e8 14 ff ff ff       	call   c000f870 <CPU::setupLargePages()>
c000f95c:	83 c4 10             	add    esp,0x10
c000f95f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f966:	74 18                	je     c000f980 <CPU::setupFeatures()+0x8c>
c000f968:	83 ec 0c             	sub    esp,0xc
c000f96b:	68 c9 e5 01 c0       	push   0xc001e5c9
c000f970:	e8 9a ab ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000f975:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f978:	e8 3b ff ff ff       	call   c000f8b8 <CPU::setupGlobalPages()>
c000f97d:	83 c4 10             	add    esp,0x10
c000f980:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f987:	74 18                	je     c000f9a1 <CPU::setupFeatures()+0xad>
c000f989:	83 ec 0c             	sub    esp,0xc
c000f98c:	68 db e5 01 c0       	push   0xc001e5db
c000f991:	e8 79 ab ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c000f996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f999:	e8 dc fe ff ff       	call   c000f87a <CPU::setupPAT()>
c000f99e:	83 c4 10             	add    esp,0x10
c000f9a1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f9a8:	74 11                	je     c000f9bb <CPU::setupFeatures()+0xc7>
c000f9aa:	c7 44 24 10 e4 e5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e5e4
c000f9b2:	83 c4 08             	add    esp,0x8
c000f9b5:	5b                   	pop    ebx
c000f9b6:	e9 54 ab ff ff       	jmp    c000a50f <Dbg::kprintf(char const*, ...)>
c000f9bb:	83 c4 08             	add    esp,0x8
c000f9be:	5b                   	pop    ebx
c000f9bf:	c3                   	ret    

c000f9c0 <CPU::open(int, int, void*)>:
c000f9c0:	57                   	push   edi
c000f9c1:	56                   	push   esi
c000f9c2:	53                   	push   ebx
c000f9c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9cb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f9d1:	83 ec 0c             	sub    esp,0xc
c000f9d4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9da:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9e0:	50                   	push   eax
c000f9e1:	e8 f6 76 ff ff       	call   c00070dc <GDT::setup()>
c000f9e6:	83 c4 0c             	add    esp,0xc
c000f9e9:	6a 00                	push   0x0
c000f9eb:	68 ef be ad de       	push   0xdeadbeef
c000f9f0:	57                   	push   edi
c000f9f1:	e8 16 92 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000f9f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9f9:	e8 ee 91 ff ff       	call   c0008bec <TSS::flush()>
c000f9fe:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fa04:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa07:	e8 1e 79 ff ff       	call   c000732a <IDT::setup()>
c000fa0c:	b8 00 04 00 00       	mov    eax,0x400
c000fa11:	0f 23 f8             	mov    db7,eax
c000fa14:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa1e:	e8 72 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa29:	89 30                	mov    DWORD PTR [eax],esi
c000fa2b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa31:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa34:	58                   	pop    eax
c000fa35:	5a                   	pop    edx
c000fa36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa40:	e8 b1 a1 ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c000fa45:	c7 04 24 ee e5 01 c0 	mov    DWORD PTR [esp],0xc001e5ee
c000fa4c:	e8 c6 00 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000fa51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa54:	e8 33 f7 ff ff       	call   c000f18c <CPU::detectFeatures()>
c000fa59:	c7 04 24 11 e6 01 c0 	mov    DWORD PTR [esp],0xc001e611
c000fa60:	e8 b2 00 00 00       	call   c000fb17 <KeSetBootMessage(char const*)>
c000fa65:	e8 26 5c 00 00       	call   c0015690 <HalInitialise()>
c000fa6a:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fa6f:	83 e0 10             	and    eax,0x10
c000fa72:	83 f8 01             	cmp    eax,0x1
c000fa75:	19 c0                	sbb    eax,eax
c000fa77:	83 e0 46             	and    eax,0x46
c000fa7a:	83 c0 1e             	add    eax,0x1e
c000fa7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa80:	e8 60 d7 ff ff       	call   c000d1e5 <setupTimer(int)>
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa8e:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fa95:	74 0c                	je     c000faa3 <CPU::open(int, int, void*)+0xe3>
c000fa97:	83 ec 0c             	sub    esp,0xc
c000fa9a:	53                   	push   ebx
c000fa9b:	e8 54 fe ff ff       	call   c000f8f4 <CPU::setupFeatures()>
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	5b                   	pop    ebx
c000faa4:	31 c0                	xor    eax,eax
c000faa6:	5e                   	pop    esi
c000faa7:	5f                   	pop    edi
c000faa8:	c3                   	ret    

c000faa9 <KeDisplaySplashScreen()>:
c000faa9:	55                   	push   ebp
c000faaa:	bd 05 00 00 00       	mov    ebp,0x5
c000faaf:	57                   	push   edi
c000fab0:	bf 00 f8 01 c0       	mov    edi,0xc001f800
c000fab5:	56                   	push   esi
c000fab6:	be 0a 00 00 00       	mov    esi,0xa
c000fabb:	53                   	push   ebx
c000fabc:	31 db                	xor    ebx,ebx
c000fabe:	83 ec 0c             	sub    esp,0xc
c000fac1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fac4:	84 c0                	test   al,al
c000fac6:	74 47                	je     c000fb0f <KeDisplaySplashScreen()+0x66>
c000fac8:	80 bb 36 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe07ca],0xdb
c000facf:	75 13                	jne    c000fae4 <KeDisplaySplashScreen()+0x3b>
c000fad1:	0f b6 93 35 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe07cb]
c000fad8:	83 e2 fe             	and    edx,0xfffffffe
c000fadb:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fae1:	75 01                	jne    c000fae4 <KeDisplaySplashScreen()+0x3b>
c000fae3:	46                   	inc    esi
c000fae4:	3c 0d                	cmp    al,0xd
c000fae6:	74 24                	je     c000fb0c <KeDisplaySplashScreen()+0x63>
c000fae8:	3c 0a                	cmp    al,0xa
c000faea:	75 0a                	jne    c000faf6 <KeDisplaySplashScreen()+0x4d>
c000faec:	45                   	inc    ebp
c000faed:	be 0a 00 00 00       	mov    esi,0xa
c000faf2:	31 db                	xor    ebx,ebx
c000faf4:	eb 16                	jmp    c000fb0c <KeDisplaySplashScreen()+0x63>
c000faf6:	83 ec 0c             	sub    esp,0xc
c000faf9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fafc:	55                   	push   ebp
c000fafd:	43                   	inc    ebx
c000fafe:	52                   	push   edx
c000faff:	6a 00                	push   0x0
c000fb01:	6a 0e                	push   0xe
c000fb03:	50                   	push   eax
c000fb04:	e8 eb 67 00 00       	call   c00162f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fb09:	83 c4 20             	add    esp,0x20
c000fb0c:	47                   	inc    edi
c000fb0d:	eb b2                	jmp    c000fac1 <KeDisplaySplashScreen()+0x18>
c000fb0f:	83 c4 0c             	add    esp,0xc
c000fb12:	5b                   	pop    ebx
c000fb13:	5e                   	pop    esi
c000fb14:	5f                   	pop    edi
c000fb15:	5d                   	pop    ebp
c000fb16:	c3                   	ret    

c000fb17 <KeSetBootMessage(char const*)>:
c000fb17:	57                   	push   edi
c000fb18:	56                   	push   esi
c000fb19:	53                   	push   ebx
c000fb1a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb20:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb27:	68 9e 00 00 00       	push   0x9e
c000fb2c:	6a 00                	push   0x0
c000fb2e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb32:	56                   	push   esi
c000fb33:	e8 98 09 ff ff       	call   c00004d0 <memset>
c000fb38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb3b:	e8 00 0a ff ff       	call   c0000540 <strlen>
c000fb40:	ba 50 00 00 00       	mov    edx,0x50
c000fb45:	83 c4 10             	add    esp,0x10
c000fb48:	29 c2                	sub    edx,eax
c000fb4a:	31 c9                	xor    ecx,ecx
c000fb4c:	83 e2 fe             	and    edx,0xfffffffe
c000fb4f:	01 f2                	add    edx,esi
c000fb51:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb56:	84 c0                	test   al,al
c000fb58:	74 0a                	je     c000fb64 <KeSetBootMessage(char const*)+0x4d>
c000fb5a:	80 cc 0f             	or     ah,0xf
c000fb5d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb61:	41                   	inc    ecx
c000fb62:	eb ed                	jmp    c000fb51 <KeSetBootMessage(char const*)+0x3a>
c000fb64:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb69:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb70:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb76:	5b                   	pop    ebx
c000fb77:	5e                   	pop    esi
c000fb78:	5f                   	pop    edi
c000fb79:	c3                   	ret    

c000fb7a <EnvVarContainer::getEnv(char const*)>:
c000fb7a:	57                   	push   edi
c000fb7b:	56                   	push   esi
c000fb7c:	53                   	push   ebx
c000fb7d:	31 db                	xor    ebx,ebx
c000fb7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb83:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb85:	7e 2b                	jle    c000fbb2 <EnvVarContainer::getEnv(char const*)+0x38>
c000fb87:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb8e:	50                   	push   eax
c000fb8f:	50                   	push   eax
c000fb90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb93:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb9a:	e8 41 0b ff ff       	call   c00006e0 <strcmp>
c000fb9f:	83 c4 10             	add    esp,0x10
c000fba2:	85 c0                	test   eax,eax
c000fba4:	75 09                	jne    c000fbaf <EnvVarContainer::getEnv(char const*)+0x35>
c000fba6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fba9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fbad:	eb 05                	jmp    c000fbb4 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fbaf:	43                   	inc    ebx
c000fbb0:	eb d1                	jmp    c000fb83 <EnvVarContainer::getEnv(char const*)+0x9>
c000fbb2:	31 c0                	xor    eax,eax
c000fbb4:	5b                   	pop    ebx
c000fbb5:	5e                   	pop    esi
c000fbb6:	5f                   	pop    edi
c000fbb7:	c3                   	ret    

c000fbb8 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fbb8:	55                   	push   ebp
c000fbb9:	57                   	push   edi
c000fbba:	56                   	push   esi
c000fbbb:	53                   	push   ebx
c000fbbc:	83 ec 28             	sub    esp,0x28
c000fbbf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fbc3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fbc7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fbcb:	56                   	push   esi
c000fbcc:	e8 6f 09 ff ff       	call   c0000540 <strlen>
c000fbd1:	40                   	inc    eax
c000fbd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbd5:	e8 df 7b ff ff       	call   c00077b9 <malloc>
c000fbda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbdd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbe1:	e8 5a 09 ff ff       	call   c0000540 <strlen>
c000fbe6:	40                   	inc    eax
c000fbe7:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbea:	e8 ca 7b ff ff       	call   c00077b9 <malloc>
c000fbef:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbf6:	e8 45 09 ff ff       	call   c0000540 <strlen>
c000fbfb:	83 c4 0c             	add    esp,0xc
c000fbfe:	40                   	inc    eax
c000fbff:	50                   	push   eax
c000fc00:	6a 00                	push   0x0
c000fc02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc06:	e8 c5 08 ff ff       	call   c00004d0 <memset>
c000fc0b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc0e:	e8 2d 09 ff ff       	call   c0000540 <strlen>
c000fc13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc17:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc1f:	89 de                	mov    esi,ebx
c000fc21:	e8 1a 09 ff ff       	call   c0000540 <strlen>
c000fc26:	83 c4 0c             	add    esp,0xc
c000fc29:	40                   	inc    eax
c000fc2a:	50                   	push   eax
c000fc2b:	6a 00                	push   0x0
c000fc2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc31:	e8 9a 08 ff ff       	call   c00004d0 <memset>
c000fc36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc39:	e8 02 09 ff ff       	call   c0000540 <strlen>
c000fc3e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc42:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc4a:	40                   	inc    eax
c000fc4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc4e:	c1 e0 03             	shl    eax,0x3
c000fc51:	5a                   	pop    edx
c000fc52:	59                   	pop    ecx
c000fc53:	50                   	push   eax
c000fc54:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc57:	e8 49 7b ff ff       	call   c00077a5 <realloc>
c000fc5c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc60:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc63:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc66:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc6a:	b9 08 00 00 00       	mov    ecx,0x8
c000fc6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc71:	83 c4 2c             	add    esp,0x2c
c000fc74:	5b                   	pop    ebx
c000fc75:	5e                   	pop    esi
c000fc76:	5f                   	pop    edi
c000fc77:	5d                   	pop    ebp
c000fc78:	c3                   	ret    
c000fc79:	90                   	nop

c000fc7a <EnvVarContainer::deleteEnv(char const*)>:
c000fc7a:	c3                   	ret    
c000fc7b:	90                   	nop

c000fc7c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc7c:	55                   	push   ebp
c000fc7d:	57                   	push   edi
c000fc7e:	56                   	push   esi
c000fc7f:	53                   	push   ebx
c000fc80:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc86:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc8d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc94:	68 14 01 00 00       	push   0x114
c000fc99:	e8 1b 7b ff ff       	call   c00077b9 <malloc>
c000fc9e:	83 c4 0c             	add    esp,0xc
c000fca1:	89 c3                	mov    ebx,eax
c000fca3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fca6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fcad:	50                   	push   eax
c000fcae:	e8 d1 ad ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c000fcb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcb6:	e8 f7 b0 ff ff       	call   c000adb2 <File::exists()>
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	84 c0                	test   al,al
c000fcc0:	75 31                	jne    c000fcf3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fcc2:	50                   	push   eax
c000fcc3:	50                   	push   eax
c000fcc4:	6a 12                	push   0x12
c000fcc6:	53                   	push   ebx
c000fcc7:	e8 78 ae ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c000fccc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fcd1:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcd4:	e8 67 08 ff ff       	call   c0000540 <strlen>
c000fcd9:	5a                   	pop    edx
c000fcda:	31 d2                	xor    edx,edx
c000fcdc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fce0:	51                   	push   ecx
c000fce1:	56                   	push   esi
c000fce2:	52                   	push   edx
c000fce3:	50                   	push   eax
c000fce4:	53                   	push   ebx
c000fce5:	ff d7                	call   edi
c000fce7:	83 c4 14             	add    esp,0x14
c000fcea:	53                   	push   ebx
c000fceb:	e8 b2 ae ff ff       	call   c000aba2 <File::close()>
c000fcf0:	83 c4 10             	add    esp,0x10
c000fcf3:	56                   	push   esi
c000fcf4:	31 f6                	xor    esi,esi
c000fcf6:	68 00 01 00 00       	push   0x100
c000fcfb:	6a 00                	push   0x0
c000fcfd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd01:	50                   	push   eax
c000fd02:	e8 c9 07 ff ff       	call   c00004d0 <memset>
c000fd07:	5f                   	pop    edi
c000fd08:	58                   	pop    eax
c000fd09:	6a 01                	push   0x1
c000fd0b:	53                   	push   ebx
c000fd0c:	e8 33 ae ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c000fd11:	83 c4 10             	add    esp,0x10
c000fd14:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd21:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd25:	51                   	push   ecx
c000fd26:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd2a:	52                   	push   edx
c000fd2b:	6a 00                	push   0x0
c000fd2d:	6a 01                	push   0x1
c000fd2f:	53                   	push   ebx
c000fd30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd33:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd37:	83 c4 20             	add    esp,0x20
c000fd3a:	3c 0d                	cmp    al,0xd
c000fd3c:	0f 84 09 01 00 00    	je     c000fe4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd42:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd47:	0f 84 ef 00 00 00    	je     c000fe3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd4d:	3c 0a                	cmp    al,0xa
c000fd4f:	74 13                	je     c000fd64 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd51:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd56:	74 0c                	je     c000fd64 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd58:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd5e:	0f 8e d8 00 00 00    	jle    c000fe3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	8d 78 01             	lea    edi,[eax+0x1]
c000fd6e:	57                   	push   edi
c000fd6f:	e8 45 7a ff ff       	call   c00077b9 <malloc>
c000fd74:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd78:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd7c:	8d 56 04             	lea    edx,[esi+0x4]
c000fd7f:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd86:	e8 2e 7a ff ff       	call   c00077b9 <malloc>
c000fd8b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd8f:	83 c4 0c             	add    esp,0xc
c000fd92:	57                   	push   edi
c000fd93:	6a 00                	push   0x0
c000fd95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd99:	e8 32 07 ff ff       	call   c00004d0 <memset>
c000fd9e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fda2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fda6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fdaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdac:	83 c4 0c             	add    esp,0xc
c000fdaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdb3:	52                   	push   edx
c000fdb4:	6a 00                	push   0x0
c000fdb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fdba:	e8 11 07 ff ff       	call   c00004d0 <memset>
c000fdbf:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fdc3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fdc7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdca:	e8 71 07 ff ff       	call   c0000540 <strlen>
c000fdcf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fdd3:	89 c1                	mov    ecx,eax
c000fdd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdda:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fddd:	40                   	inc    eax
c000fdde:	83 c4 10             	add    esp,0x10
c000fde1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fde4:	85 d2                	test   edx,edx
c000fde6:	75 0c                	jne    c000fdf4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	6a 08                	push   0x8
c000fded:	e8 c7 79 ff ff       	call   c00077b9 <malloc>
c000fdf2:	eb 0c                	jmp    c000fe00 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fdf4:	c1 e0 03             	shl    eax,0x3
c000fdf7:	51                   	push   ecx
c000fdf8:	51                   	push   ecx
c000fdf9:	50                   	push   eax
c000fdfa:	52                   	push   edx
c000fdfb:	e8 a5 79 ff ff       	call   c00077a5 <realloc>
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe06:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe09:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe0c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe10:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe14:	b9 08 00 00 00       	mov    ecx,0x8
c000fe19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe1b:	31 f6                	xor    esi,esi
c000fe1d:	50                   	push   eax
c000fe1e:	68 00 01 00 00       	push   0x100
c000fe23:	6a 00                	push   0x0
c000fe25:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe29:	50                   	push   eax
c000fe2a:	e8 a1 06 ff ff       	call   c00004d0 <memset>
c000fe2f:	83 c4 10             	add    esp,0x10
c000fe32:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe3a:	eb 0f                	jmp    c000fe4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe3c:	3c 3d                	cmp    al,0x3d
c000fe3e:	74 07                	je     c000fe47 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe40:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe44:	46                   	inc    esi
c000fe45:	eb 04                	jmp    c000fe4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe47:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe50:	0f 85 c6 fe ff ff    	jne    c000fd1c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe56:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe5c:	5b                   	pop    ebx
c000fe5d:	5e                   	pop    esi
c000fe5e:	5f                   	pop    edi
c000fe5f:	5d                   	pop    ebp
c000fe60:	c3                   	ret    
c000fe61:	90                   	nop

c000fe62 <EnvVarContainer::__loadSystem()>:
c000fe62:	83 ec 10             	sub    esp,0x10
c000fe65:	68 60 f9 01 c0       	push   0xc001f960
c000fe6a:	68 54 e6 01 c0       	push   0xc001e654
c000fe6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe73:	e8 04 fe ff ff       	call   c000fc7c <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe78:	83 c4 1c             	add    esp,0x1c
c000fe7b:	c3                   	ret    

c000fe7c <EnvVarContainer::__loadUser()>:
c000fe7c:	c3                   	ret    
c000fe7d:	90                   	nop

c000fe7e <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe90:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe9e:	90                   	nop
c000fe9f:	c3                   	ret    

c000fea0 <EnvVarContainer::~EnvVarContainer()>:
c000fea0:	83 ec 0c             	sub    esp,0xc
c000fea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000feaa:	85 c0                	test   eax,eax
c000feac:	74 1d                	je     c000fecb <EnvVarContainer::~EnvVarContainer()+0x2b>
c000feae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb4:	85 c0                	test   eax,eax
c000feb6:	74 13                	je     c000fecb <EnvVarContainer::~EnvVarContainer()+0x2b>
c000feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000febf:	83 ec 0c             	sub    esp,0xc
c000fec2:	50                   	push   eax
c000fec3:	e8 01 79 ff ff       	call   c00077c9 <free>
c000fec8:	83 c4 10             	add    esp,0x10
c000fecb:	90                   	nop
c000fecc:	83 c4 0c             	add    esp,0xc
c000fecf:	c3                   	ret    

c000fed0 <Krnl::getEnv(Process*, char const*)>:
c000fed0:	53                   	push   ebx
c000fed1:	83 ec 08             	sub    esp,0x8
c000fed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fedc:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000fee2:	74 04                	je     c000fee8 <Krnl::getEnv(Process*, char const*)+0x18>
c000fee4:	85 c0                	test   eax,eax
c000fee6:	75 0b                	jne    c000fef3 <Krnl::getEnv(Process*, char const*)+0x23>
c000fee8:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000feed:	85 c0                	test   eax,eax
c000feef:	75 19                	jne    c000ff0a <Krnl::getEnv(Process*, char const*)+0x3a>
c000fef1:	eb 27                	jmp    c000ff1a <Krnl::getEnv(Process*, char const*)+0x4a>
c000fef3:	52                   	push   edx
c000fef4:	52                   	push   edx
c000fef5:	53                   	push   ebx
c000fef6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fefc:	e8 79 fc ff ff       	call   c000fb7a <EnvVarContainer::getEnv(char const*)>
c000ff01:	83 c4 10             	add    esp,0x10
c000ff04:	85 c0                	test   eax,eax
c000ff06:	75 28                	jne    c000ff30 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff08:	eb de                	jmp    c000fee8 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff0a:	52                   	push   edx
c000ff0b:	52                   	push   edx
c000ff0c:	53                   	push   ebx
c000ff0d:	50                   	push   eax
c000ff0e:	e8 67 fc ff ff       	call   c000fb7a <EnvVarContainer::getEnv(char const*)>
c000ff13:	83 c4 10             	add    esp,0x10
c000ff16:	85 c0                	test   eax,eax
c000ff18:	75 16                	jne    c000ff30 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff1a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff1e:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000ff23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff27:	83 c4 08             	add    esp,0x8
c000ff2a:	5b                   	pop    ebx
c000ff2b:	e9 4a fc ff ff       	jmp    c000fb7a <EnvVarContainer::getEnv(char const*)>
c000ff30:	83 c4 08             	add    esp,0x8
c000ff33:	5b                   	pop    ebx
c000ff34:	c3                   	ret    

c000ff35 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff35:	83 ec 10             	sub    esp,0x10
c000ff38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff40:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ff46:	e8 6d fc ff ff       	call   c000fbb8 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff4b:	83 c4 1c             	add    esp,0x1c
c000ff4e:	c3                   	ret    

c000ff4f <Krnl::setEnvUser(char const*, char const*)>:
c000ff4f:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff54:	85 c0                	test   eax,eax
c000ff56:	74 15                	je     c000ff6d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff58:	83 ec 10             	sub    esp,0x10
c000ff5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff63:	50                   	push   eax
c000ff64:	e8 4f fc ff ff       	call   c000fbb8 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff69:	83 c4 1c             	add    esp,0x1c
c000ff6c:	c3                   	ret    
c000ff6d:	c3                   	ret    

c000ff6e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff72:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff7c:	e9 37 fc ff ff       	jmp    c000fbb8 <EnvVarContainer::setEnv(char const*, char const*)>

c000ff81 <Krnl::deleteEnvSystem(char const*)>:
c000ff81:	c3                   	ret    

c000ff82 <Krnl::deleteEnvUser(char const*)>:
c000ff82:	c3                   	ret    

c000ff83 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff83:	c3                   	ret    

c000ff84 <Krnl::newProcessEnv(Process*)>:
c000ff84:	83 ec 28             	sub    esp,0x28
c000ff87:	6a 0c                	push   0xc
c000ff89:	e8 2b 78 ff ff       	call   c00077b9 <malloc>
c000ff8e:	5a                   	pop    edx
c000ff8f:	59                   	pop    ecx
c000ff90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff94:	50                   	push   eax
c000ff95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff99:	e8 e0 fe ff ff       	call   c000fe7e <EnvVarContainer::EnvVarContainer(Process*)>
c000ff9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffa2:	83 c4 2c             	add    esp,0x2c
c000ffa5:	c3                   	ret    

c000ffa6 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ffa6:	57                   	push   edi
c000ffa7:	56                   	push   esi
c000ffa8:	53                   	push   ebx
c000ffa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffad:	83 ec 0c             	sub    esp,0xc
c000ffb0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ffb6:	6a 0c                	push   0xc
c000ffb8:	e8 fc 77 ff ff       	call   c00077b9 <malloc>
c000ffbd:	89 c3                	mov    ebx,eax
c000ffbf:	58                   	pop    eax
c000ffc0:	5a                   	pop    edx
c000ffc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffc5:	53                   	push   ebx
c000ffc6:	e8 b3 fe ff ff       	call   c000fe7e <EnvVarContainer::EnvVarContainer(Process*)>
c000ffcb:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffcd:	89 03                	mov    DWORD PTR [ebx],eax
c000ffcf:	c1 e0 03             	shl    eax,0x3
c000ffd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffd5:	e8 df 77 ff ff       	call   c00077b9 <malloc>
c000ffda:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffdd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffdf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffe2:	c1 e1 03             	shl    ecx,0x3
c000ffe5:	89 c7                	mov    edi,eax
c000ffe7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffe9:	83 c4 10             	add    esp,0x10
c000ffec:	89 d8                	mov    eax,ebx
c000ffee:	5b                   	pop    ebx
c000ffef:	5e                   	pop    esi
c000fff0:	5f                   	pop    edi
c000fff1:	c3                   	ret    

c000fff2 <Krnl::loadSystemEnv()>:
c000fff2:	53                   	push   ebx
c000fff3:	83 ec 14             	sub    esp,0x14
c000fff6:	6a 0c                	push   0xc
c000fff8:	e8 bc 77 ff ff       	call   c00077b9 <malloc>
c000fffd:	89 c3                	mov    ebx,eax
c000ffff:	58                   	pop    eax
c0010000:	5a                   	pop    edx
c0010001:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010007:	53                   	push   ebx
c0010008:	e8 71 fe ff ff       	call   c000fe7e <EnvVarContainer::EnvVarContainer(Process*)>
c001000d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010010:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c0010016:	e8 47 fe ff ff       	call   c000fe62 <EnvVarContainer::__loadSystem()>
c001001b:	83 c4 18             	add    esp,0x18
c001001e:	5b                   	pop    ebx
c001001f:	c3                   	ret    

c0010020 <Krnl::loadUserEnv()>:
c0010020:	53                   	push   ebx
c0010021:	83 ec 14             	sub    esp,0x14
c0010024:	6a 0c                	push   0xc
c0010026:	e8 8e 77 ff ff       	call   c00077b9 <malloc>
c001002b:	89 c3                	mov    ebx,eax
c001002d:	58                   	pop    eax
c001002e:	5a                   	pop    edx
c001002f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010035:	53                   	push   ebx
c0010036:	e8 43 fe ff ff       	call   c000fe7e <EnvVarContainer::EnvVarContainer(Process*)>
c001003b:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c0010041:	83 c4 18             	add    esp,0x18
c0010044:	5b                   	pop    ebx
c0010045:	c3                   	ret    

c0010046 <Krnl::flushEnv()>:
c0010046:	c3                   	ret    

c0010047 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010047:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004b:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c0010051:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010057:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c001005c:	8b 00                	mov    eax,DWORD PTR [eax]
c001005e:	03 01                	add    eax,DWORD PTR [ecx]
c0010060:	85 d2                	test   edx,edx
c0010062:	74 02                	je     c0010066 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010064:	03 02                	add    eax,DWORD PTR [edx]
c0010066:	c3                   	ret    

c0010067 <Krnl::getProcessEnvPair(Process*, int)>:
c0010067:	57                   	push   edi
c0010068:	56                   	push   esi
c0010069:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c001006f:	53                   	push   ebx
c0010070:	85 f6                	test   esi,esi
c0010072:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010076:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001007a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010080:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010084:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010086:	75 16                	jne    c001009e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010088:	39 c2                	cmp    edx,eax
c001008a:	7c 16                	jl     c00100a2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001008c:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c0010092:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010094:	01 c6                	add    esi,eax
c0010096:	39 d6                	cmp    esi,edx
c0010098:	7e 3c                	jle    c00100d6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001009a:	29 c2                	sub    edx,eax
c001009c:	eb 04                	jmp    c00100a2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001009e:	39 c2                	cmp    edx,eax
c00100a0:	7d 05                	jge    c00100a7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00100a2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00100a5:	eb 20                	jmp    c00100c7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00100a7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00100a9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00100ac:	39 d1                	cmp    ecx,edx
c00100ae:	7e 04                	jle    c00100b4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00100b0:	29 c2                	sub    edx,eax
c00100b2:	eb 10                	jmp    c00100c4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00100b4:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c00100ba:	03 0e                	add    ecx,DWORD PTR [esi]
c00100bc:	39 d1                	cmp    ecx,edx
c00100be:	7e 16                	jle    c00100d6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100c0:	29 c2                	sub    edx,eax
c00100c2:	29 fa                	sub    edx,edi
c00100c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00100c7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00100ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00100cc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00100cf:	89 03                	mov    DWORD PTR [ebx],eax
c00100d1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100d4:	eb 1d                	jmp    c00100f3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100d6:	83 ec 0c             	sub    esp,0xc
c00100d9:	68 76 e6 01 c0       	push   0xc001e676
c00100de:	e8 ac 00 00 00       	call   c001018f <KePanic(char const*)>
c00100e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	89 d8                	mov    eax,ebx
c00100f5:	5b                   	pop    ebx
c00100f6:	5e                   	pop    esi
c00100f7:	5f                   	pop    edi
c00100f8:	c2 04 00             	ret    0x4

c00100fb <CPU::current()>:
c00100fb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010100:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010106:	c3                   	ret    

c0010107 <operator new(unsigned long)>:
c0010107:	e9 ad 76 ff ff       	jmp    c00077b9 <malloc>

c001010c <operator delete(void*)>:
c001010c:	e9 c8 76 ff ff       	jmp    c00077d9 <rfree>

c0010111 <disableIRQs()>:
c0010111:	fa                   	cli    
c0010112:	c3                   	ret    

c0010113 <enableIRQs()>:
c0010113:	fb                   	sti    
c0010114:	c3                   	ret    

c0010115 <lockScheduler()>:
c0010115:	fa                   	cli    
c0010116:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001011c:	c3                   	ret    

c001011d <unlockScheduler()>:
c001011d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010122:	48                   	dec    eax
c0010123:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010128:	75 01                	jne    c001012b <unlockScheduler()+0xe>
c001012a:	fb                   	sti    
c001012b:	c3                   	ret    

c001012c <lockStuff()>:
c001012c:	fa                   	cli    
c001012d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010133:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0010139:	c3                   	ret    

c001013a <unlockStuff()>:
c001013a:	83 ec 0c             	sub    esp,0xc
c001013d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0010142:	48                   	dec    eax
c0010143:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0010148:	75 18                	jne    c0010162 <unlockStuff()+0x28>
c001014a:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0010151:	74 0f                	je     c0010162 <unlockStuff()+0x28>
c0010153:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001015d:	e8 22 36 00 00       	call   c0013784 <schedule()>
c0010162:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010167:	48                   	dec    eax
c0010168:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001016d:	75 01                	jne    c0010170 <unlockStuff()+0x36>
c001016f:	fb                   	sti    
c0010170:	83 c4 0c             	add    esp,0xc
c0010173:	c3                   	ret    

c0010174 <Virt::getAKernelVAS()>:
c0010174:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0010179:	c3                   	ret    

c001017a <__not_memcpy>:
c001017a:	57                   	push   edi
c001017b:	56                   	push   esi
c001017c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010180:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010184:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010188:	89 c7                	mov    edi,eax
c001018a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001018c:	5e                   	pop    esi
c001018d:	5f                   	pop    edi
c001018e:	c3                   	ret    

c001018f <KePanic(char const*)>:
c001018f:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c0010196:	e9 e1 53 00 00       	jmp    c001557c <HalPanic(char const*)>

c001019b <Krnl::powerThread(void*)>:
c001019b:	83 ec 0c             	sub    esp,0xc
c001019e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101a3:	48                   	dec    eax
c00101a4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101a9:	75 01                	jne    c00101ac <Krnl::powerThread(void*)+0x11>
c00101ab:	fb                   	sti    
c00101ac:	83 ec 0c             	sub    esp,0xc
c00101af:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00101b6:	6a 0a                	push   0xa
c00101b8:	e8 d7 38 00 00       	call   c0013a94 <sleep(unsigned int)>
c00101bd:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	eb e3                	jmp    c00101ac <Krnl::powerThread(void*)+0x11>

c00101c9 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00101c9:	57                   	push   edi
c00101ca:	b9 09 00 00 00       	mov    ecx,0x9
c00101cf:	56                   	push   esi
c00101d0:	bf 60 49 02 c0       	mov    edi,0xc0024960
c00101d5:	fc                   	cld    
c00101d6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101dc:	5e                   	pop    esi
c00101dd:	5f                   	pop    edi
c00101de:	c3                   	ret    

c00101df <Krnl::userIOReceived()>:
c00101df:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00101e9:	c3                   	ret    

c00101ea <Krnl::handlePowerButton()>:
c00101ea:	83 ec 0c             	sub    esp,0xc
c00101ed:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c00101f2:	83 f8 02             	cmp    eax,0x2
c00101f5:	75 10                	jne    c0010207 <Krnl::handlePowerButton()+0x1d>
c00101f7:	83 ec 0c             	sub    esp,0xc
c00101fa:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010200:	e8 51 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010205:	eb 11                	jmp    c0010218 <Krnl::handlePowerButton()+0x2e>
c0010207:	48                   	dec    eax
c0010208:	75 11                	jne    c001021b <Krnl::handlePowerButton()+0x31>
c001020a:	83 ec 0c             	sub    esp,0xc
c001020d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010213:	e8 6e 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	83 c4 0c             	add    esp,0xc
c001021e:	c3                   	ret    

c001021f <Krnl::handleSleepButton()>:
c001021f:	83 ec 0c             	sub    esp,0xc
c0010222:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c0010227:	83 f8 02             	cmp    eax,0x2
c001022a:	75 10                	jne    c001023c <Krnl::handleSleepButton()+0x1d>
c001022c:	83 ec 0c             	sub    esp,0xc
c001022f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010235:	e8 1c 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c001023a:	eb 11                	jmp    c001024d <Krnl::handleSleepButton()+0x2e>
c001023c:	48                   	dec    eax
c001023d:	75 11                	jne    c0010250 <Krnl::handleSleepButton()+0x31>
c001023f:	83 ec 0c             	sub    esp,0xc
c0010242:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010248:	e8 39 6c ff ff       	call   c0006e86 <Computer::sleep()>
c001024d:	83 c4 10             	add    esp,0x10
c0010250:	83 c4 0c             	add    esp,0xc
c0010253:	c3                   	ret    

c0010254 <Krnl::setupPowerManager()>:
c0010254:	83 ec 0c             	sub    esp,0xc
c0010257:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010261:	68 f0 00 00 00       	push   0xf0
c0010266:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c001026d:	6a 00                	push   0x0
c001026f:	68 9b 01 01 c0       	push   0xc001019b
c0010274:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001027a:	e8 e5 32 00 00       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c001027f:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c0010289:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c0010293:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c001029d:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c00102a7:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c00102b1:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c00102bb:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c00102c5:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c00102cf:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c00102d9:	83 c4 1c             	add    esp,0x1c
c00102dc:	c3                   	ret    
c00102dd:	66 90                	xchg   ax,ax
c00102df:	90                   	nop

c00102e0 <KeResolveCompatibilitySymbol(char*)>:
c00102e0:	83 ec 0c             	sub    esp,0xc
c00102e3:	83 ec 08             	sub    esp,0x8
c00102e6:	68 90 e6 01 c0       	push   0xc001e690
c00102eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ef:	e8 ec 03 ff ff       	call   c00006e0 <strcmp>
c00102f4:	83 c4 10             	add    esp,0x10
c00102f7:	85 c0                	test   eax,eax
c00102f9:	0f 94 c0             	sete   al
c00102fc:	84 c0                	test   al,al
c00102fe:	74 0c                	je     c001030c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010300:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010305:	e9 62 01 00 00       	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001030a:	66 90                	xchg   ax,ax
c001030c:	83 ec 08             	sub    esp,0x8
c001030f:	68 99 e6 01 c0       	push   0xc001e699
c0010314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010318:	e8 c3 03 ff ff       	call   c00006e0 <strcmp>
c001031d:	83 c4 10             	add    esp,0x10
c0010320:	85 c0                	test   eax,eax
c0010322:	0f 94 c0             	sete   al
c0010325:	84 c0                	test   al,al
c0010327:	74 0b                	je     c0010334 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010329:	b8 e0 c0 01 c0       	mov    eax,0xc001c0e0
c001032e:	e9 39 01 00 00       	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010333:	90                   	nop
c0010334:	83 ec 08             	sub    esp,0x8
c0010337:	68 a3 e6 01 c0       	push   0xc001e6a3
c001033c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010340:	e8 9b 03 ff ff       	call   c00006e0 <strcmp>
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	85 c0                	test   eax,eax
c001034a:	0f 94 c0             	sete   al
c001034d:	84 c0                	test   al,al
c001034f:	74 0b                	je     c001035c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010351:	b8 14 be 01 c0       	mov    eax,0xc001be14
c0010356:	e9 11 01 00 00       	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001035b:	90                   	nop
c001035c:	83 ec 08             	sub    esp,0x8
c001035f:	68 ac e6 01 c0       	push   0xc001e6ac
c0010364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010368:	e8 73 03 ff ff       	call   c00006e0 <strcmp>
c001036d:	83 c4 10             	add    esp,0x10
c0010370:	85 c0                	test   eax,eax
c0010372:	0f 94 c0             	sete   al
c0010375:	84 c0                	test   al,al
c0010377:	74 0b                	je     c0010384 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010379:	b8 8f 01 01 c0       	mov    eax,0xc001018f
c001037e:	e9 e9 00 00 00       	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010383:	90                   	nop
c0010384:	83 ec 08             	sub    esp,0x8
c0010387:	68 bf e6 01 c0       	push   0xc001e6bf
c001038c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010390:	e8 4b 03 ff ff       	call   c00006e0 <strcmp>
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	85 c0                	test   eax,eax
c001039a:	0f 94 c0             	sete   al
c001039d:	84 c0                	test   al,al
c001039f:	74 0b                	je     c00103ac <KeResolveCompatibilitySymbol(char*)+0xcc>
c00103a1:	b8 17 fb 00 c0       	mov    eax,0xc000fb17
c00103a6:	e9 c1 00 00 00       	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103ab:	90                   	nop
c00103ac:	83 ec 08             	sub    esp,0x8
c00103af:	68 dc e6 01 c0       	push   0xc001e6dc
c00103b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b8:	e8 23 03 ff ff       	call   c00006e0 <strcmp>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	85 c0                	test   eax,eax
c00103c2:	0f 94 c0             	sete   al
c00103c5:	84 c0                	test   al,al
c00103c7:	74 0b                	je     c00103d4 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00103c9:	b8 e0 c1 01 c0       	mov    eax,0xc001c1e0
c00103ce:	e9 99 00 00 00       	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d3:	90                   	nop
c00103d4:	83 ec 08             	sub    esp,0x8
c00103d7:	68 e6 e6 01 c0       	push   0xc001e6e6
c00103dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e0:	e8 fb 02 ff ff       	call   c00006e0 <strcmp>
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	85 c0                	test   eax,eax
c00103ea:	0f 94 c0             	sete   al
c00103ed:	84 c0                	test   al,al
c00103ef:	74 07                	je     c00103f8 <KeResolveCompatibilitySymbol(char*)+0x118>
c00103f1:	b8 60 bf 01 c0       	mov    eax,0xc001bf60
c00103f6:	eb 74                	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f8:	83 ec 08             	sub    esp,0x8
c00103fb:	68 ef e6 01 c0       	push   0xc001e6ef
c0010400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010404:	e8 d7 02 ff ff       	call   c00006e0 <strcmp>
c0010409:	83 c4 10             	add    esp,0x10
c001040c:	85 c0                	test   eax,eax
c001040e:	0f 94 c0             	sete   al
c0010411:	84 c0                	test   al,al
c0010413:	74 07                	je     c001041c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010415:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001041a:	eb 50                	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001041c:	83 ec 08             	sub    esp,0x8
c001041f:	68 07 e7 01 c0       	push   0xc001e707
c0010424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010428:	e8 b3 02 ff ff       	call   c00006e0 <strcmp>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	85 c0                	test   eax,eax
c0010432:	0f 94 c0             	sete   al
c0010435:	84 c0                	test   al,al
c0010437:	74 07                	je     c0010440 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010439:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001043e:	eb 2c                	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010440:	83 ec 08             	sub    esp,0x8
c0010443:	68 14 e7 01 c0       	push   0xc001e714
c0010448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044c:	e8 8f 02 ff ff       	call   c00006e0 <strcmp>
c0010451:	83 c4 10             	add    esp,0x10
c0010454:	85 c0                	test   eax,eax
c0010456:	0f 94 c0             	sete   al
c0010459:	84 c0                	test   al,al
c001045b:	74 07                	je     c0010464 <KeResolveCompatibilitySymbol(char*)+0x184>
c001045d:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c0010462:	eb 08                	jmp    c001046c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010464:	b8 00 00 00 00       	mov    eax,0x0
c0010469:	8d 76 00             	lea    esi,[esi+0x0]
c001046c:	83 c4 0c             	add    esp,0xc
c001046f:	c3                   	ret    

c0010470 <KiSigKill(int)>:
c0010470:	57                   	push   edi
c0010471:	b9 0a 00 00 00       	mov    ecx,0xa
c0010476:	56                   	push   esi
c0010477:	be 5d e7 01 c0       	mov    esi,0xc001e75d
c001047c:	83 ec 14             	sub    esp,0x14
c001047f:	8d 7c 24 06          	lea    edi,[esp+0x6]
c0010483:	fc                   	cld    
c0010484:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010486:	8d 44 24 06          	lea    eax,[esp+0x6]
c001048a:	50                   	push   eax
c001048b:	6a 00                	push   0x0
c001048d:	6a 00                	push   0x0
c001048f:	6a 27                	push   0x27
c0010491:	e8 bc fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010496:	83 c4 24             	add    esp,0x24
c0010499:	5e                   	pop    esi
c001049a:	5f                   	pop    edi
c001049b:	c3                   	ret    

c001049c <KiDefaultSignalHandlerIgnore(int)>:
c001049c:	c3                   	ret    

c001049d <KiDefaultSignalHandlerPause(int)>:
c001049d:	57                   	push   edi
c001049e:	b9 07 00 00 00       	mov    ecx,0x7
c00104a3:	56                   	push   esi
c00104a4:	be 67 e7 01 c0       	mov    esi,0xc001e767
c00104a9:	83 ec 24             	sub    esp,0x24
c00104ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00104b0:	fc                   	cld    
c00104b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00104b3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00104b7:	50                   	push   eax
c00104b8:	6a 00                	push   0x0
c00104ba:	6a 00                	push   0x0
c00104bc:	6a 27                	push   0x27
c00104be:	e8 8f fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104c3:	83 c4 34             	add    esp,0x34
c00104c6:	5e                   	pop    esi
c00104c7:	5f                   	pop    edi
c00104c8:	c3                   	ret    

c00104c9 <KiDefaultSignalHandlerResume(int)>:
c00104c9:	57                   	push   edi
c00104ca:	b9 1d 00 00 00       	mov    ecx,0x1d
c00104cf:	56                   	push   esi
c00104d0:	be 83 e7 01 c0       	mov    esi,0xc001e783
c00104d5:	83 ec 24             	sub    esp,0x24
c00104d8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00104dc:	fc                   	cld    
c00104dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104df:	8d 44 24 03          	lea    eax,[esp+0x3]
c00104e3:	50                   	push   eax
c00104e4:	6a 00                	push   0x0
c00104e6:	6a 00                	push   0x0
c00104e8:	6a 27                	push   0x27
c00104ea:	e8 63 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104ef:	83 c4 34             	add    esp,0x34
c00104f2:	5e                   	pop    esi
c00104f3:	5f                   	pop    edi
c00104f4:	c3                   	ret    

c00104f5 <KeDeinitSignals(SigHandlerBlock*)>:
c00104f5:	e9 cf 72 ff ff       	jmp    c00077c9 <free>

c00104fa <KeInitSignals()>:
c00104fa:	53                   	push   ebx
c00104fb:	83 ec 14             	sub    esp,0x14
c00104fe:	68 c8 00 00 00       	push   0xc8
c0010503:	e8 b1 72 ff ff       	call   c00077b9 <malloc>
c0010508:	83 c4 0c             	add    esp,0xc
c001050b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010515:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001051f:	89 c3                	mov    ebx,eax
c0010521:	6a 20                	push   0x20
c0010523:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010529:	6a 00                	push   0x0
c001052b:	50                   	push   eax
c001052c:	e8 9f ff fe ff       	call   c00004d0 <memset>
c0010531:	83 c4 0c             	add    esp,0xc
c0010534:	6a 44                	push   0x44
c0010536:	6a 00                	push   0x0
c0010538:	53                   	push   ebx
c0010539:	e8 92 ff fe ff       	call   c00004d0 <memset>
c001053e:	89 d8                	mov    eax,ebx
c0010540:	83 c4 18             	add    esp,0x18
c0010543:	5b                   	pop    ebx
c0010544:	c3                   	ret    

c0010545 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010545:	53                   	push   ebx
c0010546:	b8 01 00 00 00       	mov    eax,0x1
c001054b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001054f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010553:	83 f9 10             	cmp    ecx,0x10
c0010556:	7f 21                	jg     c0010579 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010558:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001055b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055f:	89 03                	mov    DWORD PTR [ebx],eax
c0010561:	b8 01 00 00 00       	mov    eax,0x1
c0010566:	d3 e0                	shl    eax,cl
c0010568:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001056c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001056f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010577:	31 c0                	xor    eax,eax
c0010579:	5b                   	pop    ebx
c001057a:	c3                   	ret    

c001057b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001057b:	55                   	push   ebp
c001057c:	57                   	push   edi
c001057d:	bf 08 00 00 00       	mov    edi,0x8
c0010582:	56                   	push   esi
c0010583:	53                   	push   ebx
c0010584:	83 ec 18             	sub    esp,0x18
c0010587:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001058b:	68 a0 e7 01 c0       	push   0xc001e7a0
c0010590:	e8 7a 9f ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010595:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001059c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00105a2:	83 c4 10             	add    esp,0x10
c00105a5:	31 c9                	xor    ecx,ecx
c00105a7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00105ab:	99                   	cdq    
c00105ac:	f7 ff                	idiv   edi
c00105ae:	8d 42 24             	lea    eax,[edx+0x24]
c00105b1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00105b5:	85 f6                	test   esi,esi
c00105b7:	75 1a                	jne    c00105d3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00105b9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00105bd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00105c1:	50                   	push   eax
c00105c2:	50                   	push   eax
c00105c3:	52                   	push   edx
c00105c4:	68 b1 e7 01 c0       	push   0xc001e7b1
c00105c9:	e8 41 9f ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00105ce:	83 c4 10             	add    esp,0x10
c00105d1:	eb 1b                	jmp    c00105ee <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00105d3:	41                   	inc    ecx
c00105d4:	83 f9 08             	cmp    ecx,0x8
c00105d7:	75 ce                	jne    c00105a7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00105d9:	83 ec 0c             	sub    esp,0xc
c00105dc:	be 01 00 00 00       	mov    esi,0x1
c00105e1:	68 d2 e7 01 c0       	push   0xc001e7d2
c00105e6:	e8 24 9f ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00105eb:	83 c4 10             	add    esp,0x10
c00105ee:	83 c4 0c             	add    esp,0xc
c00105f1:	89 f0                	mov    eax,esi
c00105f3:	5b                   	pop    ebx
c00105f4:	5e                   	pop    esi
c00105f5:	5f                   	pop    edi
c00105f6:	5d                   	pop    ebp
c00105f7:	c3                   	ret    

c00105f8 <KeCheckSignal(SigHandlerBlock*)>:
c00105f8:	55                   	push   ebp
c00105f9:	57                   	push   edi
c00105fa:	56                   	push   esi
c00105fb:	53                   	push   ebx
c00105fc:	51                   	push   ecx
c00105fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010601:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010608:	75 07                	jne    c0010611 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001060a:	31 c0                	xor    eax,eax
c001060c:	e9 cc 00 00 00       	jmp    c00106dd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010611:	31 c9                	xor    ecx,ecx
c0010613:	bf 08 00 00 00       	mov    edi,0x8
c0010618:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001061e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010621:	99                   	cdq    
c0010622:	f7 ff                	idiv   edi
c0010624:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001062b:	85 d2                	test   edx,edx
c001062d:	0f 84 94 00 00 00    	je     c00106c7 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010633:	88 d1                	mov    cl,dl
c0010635:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001063b:	bf 01 00 00 00       	mov    edi,0x1
c0010640:	89 04 24             	mov    DWORD PTR [esp],eax
c0010643:	d3 e7                	shl    edi,cl
c0010645:	bd 01 00 00 00       	mov    ebp,0x1
c001064a:	31 c9                	xor    ecx,ecx
c001064c:	89 e8                	mov    eax,ebp
c001064e:	d3 e0                	shl    eax,cl
c0010650:	85 04 24             	test   DWORD PTR [esp],eax
c0010653:	74 06                	je     c001065b <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010655:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010659:	75 af                	jne    c001060a <KeCheckSignal(SigHandlerBlock*)+0x12>
c001065b:	41                   	inc    ecx
c001065c:	83 f9 11             	cmp    ecx,0x11
c001065f:	75 eb                	jne    c001064c <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010661:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010664:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010667:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c001066d:	09 f8                	or     eax,edi
c001066f:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c001067a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010680:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010687:	31 c0                	xor    eax,eax
c0010689:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010691:	74 09                	je     c001069c <KeCheckSignal(SigHandlerBlock*)+0xa4>
c0010693:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001069a:	eb 06                	jmp    c00106a2 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c001069c:	40                   	inc    eax
c001069d:	83 f8 08             	cmp    eax,0x8
c00106a0:	75 e7                	jne    c0010689 <KeCheckSignal(SigHandlerBlock*)+0x91>
c00106a2:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00106a5:	83 fa 09             	cmp    edx,0x9
c00106a8:	75 07                	jne    c00106b1 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00106aa:	b8 70 04 01 c0       	mov    eax,0xc0010470
c00106af:	eb 2c                	jmp    c00106dd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106b1:	83 f8 01             	cmp    eax,0x1
c00106b4:	0f 84 50 ff ff ff    	je     c001060a <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106ba:	85 c0                	test   eax,eax
c00106bc:	75 1f                	jne    c00106dd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106be:	8b 04 95 c0 f9 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0640]
c00106c5:	eb 16                	jmp    c00106dd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106c7:	46                   	inc    esi
c00106c8:	41                   	inc    ecx
c00106c9:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00106cf:	83 f9 08             	cmp    ecx,0x8
c00106d2:	0f 85 40 ff ff ff    	jne    c0010618 <KeCheckSignal(SigHandlerBlock*)+0x20>
c00106d8:	e9 2d ff ff ff       	jmp    c001060a <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106dd:	5a                   	pop    edx
c00106de:	5b                   	pop    ebx
c00106df:	5e                   	pop    esi
c00106e0:	5f                   	pop    edi
c00106e1:	5d                   	pop    ebp
c00106e2:	c3                   	ret    

c00106e3 <KiCheckSignalZ>:
c00106e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106eb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00106f1:	e8 02 ff ff ff       	call   c00105f8 <KeCheckSignal(SigHandlerBlock*)>
c00106f6:	5a                   	pop    edx
c00106f7:	c3                   	ret    

c00106f8 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00106f8:	56                   	push   esi
c00106f9:	53                   	push   ebx
c00106fa:	bb 01 00 00 00       	mov    ebx,0x1
c00106ff:	52                   	push   edx
c0010700:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010704:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010708:	d3 e3                	shl    ebx,cl
c001070a:	83 f9 10             	cmp    ecx,0x10
c001070d:	7f 08                	jg     c0010717 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001070f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010715:	75 10                	jne    c0010727 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	68 e3 e7 01 c0       	push   0xc001e7e3
c001071f:	e8 6b fa ff ff       	call   c001018f <KePanic(char const*)>
c0010724:	83 c4 10             	add    esp,0x10
c0010727:	f7 d3                	not    ebx
c0010729:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001072f:	58                   	pop    eax
c0010730:	5b                   	pop    ebx
c0010731:	5e                   	pop    esi
c0010732:	c3                   	ret    

c0010733 <SysSeekDir(regs*)>:
c0010733:	31 c0                	xor    eax,eax
c0010735:	31 d2                	xor    edx,edx
c0010737:	c3                   	ret    

c0010738 <SysTellDir(regs*)>:
c0010738:	31 c0                	xor    eax,eax
c001073a:	31 d2                	xor    edx,edx
c001073c:	c3                   	ret    

c001073d <SysVerify(regs*)>:
c001073d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010741:	31 d2                	xor    edx,edx
c0010743:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010746:	c3                   	ret    

c0010747 <SysGetArgc(regs*)>:
c0010747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001074c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001074f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010755:	99                   	cdq    
c0010756:	c3                   	ret    

c0010757 <SysTTYName(regs*)>:
c0010757:	b8 01 00 00 00       	mov    eax,0x1
c001075c:	31 d2                	xor    edx,edx
c001075e:	c3                   	ret    

c001075f <SysFormatDisk(regs*)>:
c001075f:	56                   	push   esi
c0010760:	53                   	push   ebx
c0010761:	50                   	push   eax
c0010762:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010766:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c001076c:	eb 28                	jmp    c0010796 <SysFormatDisk(regs*)+0x37>
c001076e:	83 ec 0c             	sub    esp,0xc
c0010771:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010774:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010777:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010779:	51                   	push   ecx
c001077a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001077d:	51                   	push   ecx
c001077e:	50                   	push   eax
c001077f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0010786:	50                   	push   eax
c0010787:	53                   	push   ebx
c0010788:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001078b:	83 c4 20             	add    esp,0x20
c001078e:	83 f8 08             	cmp    eax,0x8
c0010791:	75 12                	jne    c00107a5 <SysFormatDisk(regs*)+0x46>
c0010793:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010796:	85 db                	test   ebx,ebx
c0010798:	75 d4                	jne    c001076e <SysFormatDisk(regs*)+0xf>
c001079a:	59                   	pop    ecx
c001079b:	b8 03 00 00 00       	mov    eax,0x3
c00107a0:	31 d2                	xor    edx,edx
c00107a2:	5b                   	pop    ebx
c00107a3:	5e                   	pop    esi
c00107a4:	c3                   	ret    
c00107a5:	85 c0                	test   eax,eax
c00107a7:	74 1b                	je     c00107c4 <SysFormatDisk(regs*)+0x65>
c00107a9:	83 f8 09             	cmp    eax,0x9
c00107ac:	74 0b                	je     c00107b9 <SysFormatDisk(regs*)+0x5a>
c00107ae:	59                   	pop    ecx
c00107af:	b8 02 00 00 00       	mov    eax,0x2
c00107b4:	31 d2                	xor    edx,edx
c00107b6:	5b                   	pop    ebx
c00107b7:	5e                   	pop    esi
c00107b8:	c3                   	ret    
c00107b9:	59                   	pop    ecx
c00107ba:	b8 01 00 00 00       	mov    eax,0x1
c00107bf:	31 d2                	xor    edx,edx
c00107c1:	5b                   	pop    ebx
c00107c2:	5e                   	pop    esi
c00107c3:	c3                   	ret    
c00107c4:	59                   	pop    ecx
c00107c5:	31 c0                	xor    eax,eax
c00107c7:	31 d2                	xor    edx,edx
c00107c9:	5b                   	pop    ebx
c00107ca:	5e                   	pop    esi
c00107cb:	c3                   	ret    

c00107cc <SysSetDiskVolumeLabel(regs*)>:
c00107cc:	56                   	push   esi
c00107cd:	53                   	push   ebx
c00107ce:	53                   	push   ebx
c00107cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00107d6:	83 f8 19             	cmp    eax,0x19
c00107d9:	77 2d                	ja     c0010808 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107db:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00107e2:	85 c9                	test   ecx,ecx
c00107e4:	74 22                	je     c0010808 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107e6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00107e9:	85 db                	test   ebx,ebx
c00107eb:	74 1b                	je     c0010808 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107ed:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00107f3:	85 d2                	test   edx,edx
c00107f5:	74 11                	je     c0010808 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107f7:	8b 32                	mov    esi,DWORD PTR [edx]
c00107f9:	53                   	push   ebx
c00107fa:	50                   	push   eax
c00107fb:	51                   	push   ecx
c00107fc:	52                   	push   edx
c00107fd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	99                   	cdq    
c0010804:	59                   	pop    ecx
c0010805:	5b                   	pop    ebx
c0010806:	5e                   	pop    esi
c0010807:	c3                   	ret    
c0010808:	59                   	pop    ecx
c0010809:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001080e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010813:	5b                   	pop    ebx
c0010814:	5e                   	pop    esi
c0010815:	c3                   	ret    

c0010816 <SysGetDiskVolumeLabel(regs*)>:
c0010816:	57                   	push   edi
c0010817:	56                   	push   esi
c0010818:	53                   	push   ebx
c0010819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010820:	83 fa 19             	cmp    edx,0x19
c0010823:	77 38                	ja     c001085d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010825:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c001082c:	85 c9                	test   ecx,ecx
c001082e:	74 2d                	je     c001085d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010830:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010833:	85 db                	test   ebx,ebx
c0010835:	74 26                	je     c001085d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010837:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001083a:	85 f6                	test   esi,esi
c001083c:	74 1f                	je     c001085d <SysGetDiskVolumeLabel(regs*)+0x47>
c001083e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010844:	85 c0                	test   eax,eax
c0010846:	74 15                	je     c001085d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010848:	83 ec 0c             	sub    esp,0xc
c001084b:	8b 38                	mov    edi,DWORD PTR [eax]
c001084d:	56                   	push   esi
c001084e:	53                   	push   ebx
c001084f:	52                   	push   edx
c0010850:	51                   	push   ecx
c0010851:	50                   	push   eax
c0010852:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010855:	83 c4 20             	add    esp,0x20
c0010858:	99                   	cdq    
c0010859:	5b                   	pop    ebx
c001085a:	5e                   	pop    esi
c001085b:	5f                   	pop    edi
c001085c:	c3                   	ret    
c001085d:	5b                   	pop    ebx
c001085e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010863:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010868:	5e                   	pop    esi
c0010869:	5f                   	pop    edi
c001086a:	c3                   	ret    

c001086b <SysShutdown(regs*)>:
c001086b:	83 ec 0c             	sub    esp,0xc
c001086e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010872:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010875:	85 c0                	test   eax,eax
c0010877:	74 18                	je     c0010891 <SysShutdown(regs*)+0x26>
c0010879:	83 f8 01             	cmp    eax,0x1
c001087c:	74 38                	je     c00108b6 <SysShutdown(regs*)+0x4b>
c001087e:	83 f8 02             	cmp    eax,0x2
c0010881:	74 24                	je     c00108a7 <SysShutdown(regs*)+0x3c>
c0010883:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010888:	ba ff ff ff ff       	mov    edx,0xffffffff
c001088d:	83 c4 0c             	add    esp,0xc
c0010890:	c3                   	ret    
c0010891:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010896:	8b 10                	mov    edx,DWORD PTR [eax]
c0010898:	6a 00                	push   0x0
c001089a:	6a 00                	push   0x0
c001089c:	6a 00                	push   0x0
c001089e:	50                   	push   eax
c001089f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	eb dc                	jmp    c0010883 <SysShutdown(regs*)+0x18>
c00108a7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00108ae:	6a 00                	push   0x0
c00108b0:	6a 00                	push   0x0
c00108b2:	6a 01                	push   0x1
c00108b4:	eb e8                	jmp    c001089e <SysShutdown(regs*)+0x33>
c00108b6:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00108bb:	85 c0                	test   eax,eax
c00108bd:	74 02                	je     c00108c1 <SysShutdown(regs*)+0x56>
c00108bf:	ff d0                	call   eax
c00108c1:	31 c0                	xor    eax,eax
c00108c3:	31 d2                	xor    edx,edx
c00108c5:	83 c4 0c             	add    esp,0xc
c00108c8:	c3                   	ret    

c00108c9 <SysRealpath(regs*)>:
c00108c9:	83 ec 0c             	sub    esp,0xc
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00108d3:	85 d2                	test   edx,edx
c00108d5:	74 07                	je     c00108de <SysRealpath(regs*)+0x15>
c00108d7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108da:	85 c0                	test   eax,eax
c00108dc:	75 0b                	jne    c00108e9 <SysRealpath(regs*)+0x20>
c00108de:	b8 01 00 00 00       	mov    eax,0x1
c00108e3:	31 d2                	xor    edx,edx
c00108e5:	83 c4 0c             	add    esp,0xc
c00108e8:	c3                   	ret    
c00108e9:	51                   	push   ecx
c00108ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00108f0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00108f3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00108f9:	51                   	push   ecx
c00108fa:	52                   	push   edx
c00108fb:	50                   	push   eax
c00108fc:	e8 d9 9f ff ff       	call   c000a8da <Fs::standardiseFiles(char*, char const*, char const*)>
c0010901:	83 c4 10             	add    esp,0x10
c0010904:	31 c0                	xor    eax,eax
c0010906:	31 d2                	xor    edx,edx
c0010908:	83 c4 0c             	add    esp,0xc
c001090b:	c3                   	ret    

c001090c <SysReadDir(regs*)>:
c001090c:	53                   	push   ebx
c001090d:	83 ec 18             	sub    esp,0x18
c0010910:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010917:	83 f8 02             	cmp    eax,0x2
c001091a:	76 61                	jbe    c001097d <SysReadDir(regs*)+0x71>
c001091c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010923:	77 49                	ja     c001096e <SysReadDir(regs*)+0x62>
c0010925:	83 ec 0c             	sub    esp,0xc
c0010928:	50                   	push   eax
c0010929:	e8 01 88 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c001092e:	83 c4 10             	add    esp,0x10
c0010931:	85 c0                	test   eax,eax
c0010933:	74 39                	je     c001096e <SysReadDir(regs*)+0x62>
c0010935:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001093d:	83 ec 0c             	sub    esp,0xc
c0010940:	8b 10                	mov    edx,DWORD PTR [eax]
c0010942:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010946:	51                   	push   ecx
c0010947:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001094a:	51                   	push   ecx
c001094b:	6a 00                	push   0x0
c001094d:	68 10 01 00 00       	push   0x110
c0010952:	50                   	push   eax
c0010953:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010956:	83 c4 20             	add    esp,0x20
c0010959:	85 c0                	test   eax,eax
c001095b:	74 29                	je     c0010986 <SysReadDir(regs*)+0x7a>
c001095d:	83 f8 07             	cmp    eax,0x7
c0010960:	74 1b                	je     c001097d <SysReadDir(regs*)+0x71>
c0010962:	b8 02 00 00 00       	mov    eax,0x2
c0010967:	31 d2                	xor    edx,edx
c0010969:	83 c4 18             	add    esp,0x18
c001096c:	5b                   	pop    ebx
c001096d:	c3                   	ret    
c001096e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010973:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010978:	83 c4 18             	add    esp,0x18
c001097b:	5b                   	pop    ebx
c001097c:	c3                   	ret    
c001097d:	b8 01 00 00 00       	mov    eax,0x1
c0010982:	31 d2                	xor    edx,edx
c0010984:	eb e3                	jmp    c0010969 <SysReadDir(regs*)+0x5d>
c0010986:	31 c0                	xor    eax,eax
c0010988:	31 d2                	xor    edx,edx
c001098a:	eb dd                	jmp    c0010969 <SysReadDir(regs*)+0x5d>

c001098c <SysIsATTY(regs*)>:
c001098c:	83 ec 0c             	sub    esp,0xc
c001098f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010993:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010996:	83 f8 02             	cmp    eax,0x2
c0010999:	76 07                	jbe    c00109a2 <SysIsATTY(regs*)+0x16>
c001099b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109a0:	75 28                	jne    c00109ca <SysIsATTY(regs*)+0x3e>
c00109a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109b0:	85 c0                	test   eax,eax
c00109b2:	74 26                	je     c00109da <SysIsATTY(regs*)+0x4e>
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00109b9:	50                   	push   eax
c00109ba:	ff 12                	call   DWORD PTR [edx]
c00109bc:	31 d2                	xor    edx,edx
c00109be:	25 ff 00 00 00       	and    eax,0xff
c00109c3:	83 c4 10             	add    esp,0x10
c00109c6:	83 c4 0c             	add    esp,0xc
c00109c9:	c3                   	ret    
c00109ca:	83 ec 0c             	sub    esp,0xc
c00109cd:	50                   	push   eax
c00109ce:	e8 5c 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109d3:	83 c4 10             	add    esp,0x10
c00109d6:	85 c0                	test   eax,eax
c00109d8:	75 da                	jne    c00109b4 <SysIsATTY(regs*)+0x28>
c00109da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109e4:	83 c4 0c             	add    esp,0xc
c00109e7:	c3                   	ret    

c00109e8 <SysSeek(regs*)>:
c00109e8:	53                   	push   ebx
c00109e9:	83 ec 08             	sub    esp,0x8
c00109ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00109f3:	8d 50 fd             	lea    edx,[eax-0x3]
c00109f6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00109fc:	77 34                	ja     c0010a32 <SysSeek(regs*)+0x4a>
c00109fe:	83 ec 0c             	sub    esp,0xc
c0010a01:	50                   	push   eax
c0010a02:	e8 28 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a07:	83 c4 0c             	add    esp,0xc
c0010a0a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a0d:	31 db                	xor    ebx,ebx
c0010a0f:	53                   	push   ebx
c0010a10:	51                   	push   ecx
c0010a11:	50                   	push   eax
c0010a12:	e8 eb a1 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0010a17:	83 c4 10             	add    esp,0x10
c0010a1a:	85 c0                	test   eax,eax
c0010a1c:	0f 95 c0             	setne  al
c0010a1f:	31 d2                	xor    edx,edx
c0010a21:	25 ff 00 00 00       	and    eax,0xff
c0010a26:	f7 d8                	neg    eax
c0010a28:	83 d2 00             	adc    edx,0x0
c0010a2b:	83 c4 08             	add    esp,0x8
c0010a2e:	f7 da                	neg    edx
c0010a30:	5b                   	pop    ebx
c0010a31:	c3                   	ret    
c0010a32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a3c:	83 c4 08             	add    esp,0x8
c0010a3f:	5b                   	pop    ebx
c0010a40:	c3                   	ret    

c0010a41 <SysTell(regs*)>:
c0010a41:	53                   	push   ebx
c0010a42:	83 ec 08             	sub    esp,0x8
c0010a45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a4c:	83 f8 02             	cmp    eax,0x2
c0010a4f:	76 50                	jbe    c0010aa1 <SysTell(regs*)+0x60>
c0010a51:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a56:	76 19                	jbe    c0010a71 <SysTell(regs*)+0x30>
c0010a58:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a5b:	31 d2                	xor    edx,edx
c0010a5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a6a:	31 c0                	xor    eax,eax
c0010a6c:	83 c4 08             	add    esp,0x8
c0010a6f:	5b                   	pop    ebx
c0010a70:	c3                   	ret    
c0010a71:	83 ec 0c             	sub    esp,0xc
c0010a74:	50                   	push   eax
c0010a75:	e8 b5 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a7a:	5a                   	pop    edx
c0010a7b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010a7e:	59                   	pop    ecx
c0010a7f:	53                   	push   ebx
c0010a80:	50                   	push   eax
c0010a81:	e8 d2 a1 ff ff       	call   c000ac58 <File::tell(unsigned long long*)>
c0010a86:	83 c4 10             	add    esp,0x10
c0010a89:	85 c0                	test   eax,eax
c0010a8b:	0f 95 c0             	setne  al
c0010a8e:	31 d2                	xor    edx,edx
c0010a90:	25 ff 00 00 00       	and    eax,0xff
c0010a95:	f7 d8                	neg    eax
c0010a97:	83 d2 00             	adc    edx,0x0
c0010a9a:	83 c4 08             	add    esp,0x8
c0010a9d:	f7 da                	neg    edx
c0010a9f:	5b                   	pop    ebx
c0010aa0:	c3                   	ret    
c0010aa1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aa6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010aab:	83 c4 08             	add    esp,0x8
c0010aae:	5b                   	pop    ebx
c0010aaf:	c3                   	ret    

c0010ab0 <SysSize(regs*)>:
c0010ab0:	53                   	push   ebx
c0010ab1:	83 ec 18             	sub    esp,0x18
c0010ab4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ab8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010abb:	83 f8 02             	cmp    eax,0x2
c0010abe:	76 56                	jbe    c0010b16 <SysSize(regs*)+0x66>
c0010ac0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ac5:	76 19                	jbe    c0010ae0 <SysSize(regs*)+0x30>
c0010ac7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010aca:	31 d2                	xor    edx,edx
c0010acc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ad9:	31 c0                	xor    eax,eax
c0010adb:	83 c4 18             	add    esp,0x18
c0010ade:	5b                   	pop    ebx
c0010adf:	c3                   	ret    
c0010ae0:	83 ec 0c             	sub    esp,0xc
c0010ae3:	50                   	push   eax
c0010ae4:	e8 46 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010ae9:	83 c4 0c             	add    esp,0xc
c0010aec:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010af0:	52                   	push   edx
c0010af1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010af4:	52                   	push   edx
c0010af5:	50                   	push   eax
c0010af6:	e8 f5 a2 ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c0010afb:	83 c4 10             	add    esp,0x10
c0010afe:	85 c0                	test   eax,eax
c0010b00:	0f 95 c0             	setne  al
c0010b03:	31 d2                	xor    edx,edx
c0010b05:	25 ff 00 00 00       	and    eax,0xff
c0010b0a:	f7 d8                	neg    eax
c0010b0c:	83 d2 00             	adc    edx,0x0
c0010b0f:	83 c4 18             	add    esp,0x18
c0010b12:	f7 da                	neg    edx
c0010b14:	5b                   	pop    ebx
c0010b15:	c3                   	ret    
c0010b16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b20:	83 c4 18             	add    esp,0x18
c0010b23:	5b                   	pop    ebx
c0010b24:	c3                   	ret    

c0010b25 <SysSizeFromFilename(regs*)>:
c0010b25:	57                   	push   edi
c0010b26:	56                   	push   esi
c0010b27:	53                   	push   ebx
c0010b28:	83 ec 20             	sub    esp,0x20
c0010b2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b2f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b32:	83 fb 02             	cmp    ebx,0x2
c0010b35:	0f 86 8c 00 00 00    	jbe    c0010bc7 <SysSizeFromFilename(regs*)+0xa2>
c0010b3b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b41:	76 1b                	jbe    c0010b5e <SysSizeFromFilename(regs*)+0x39>
c0010b43:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b46:	31 d2                	xor    edx,edx
c0010b48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b55:	83 c4 20             	add    esp,0x20
c0010b58:	31 c0                	xor    eax,eax
c0010b5a:	5b                   	pop    ebx
c0010b5b:	5e                   	pop    esi
c0010b5c:	5f                   	pop    edi
c0010b5d:	c3                   	ret    
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	68 14 01 00 00       	push   0x114
c0010b66:	e8 4e 6c ff ff       	call   c00077b9 <malloc>
c0010b6b:	83 c4 0c             	add    esp,0xc
c0010b6e:	89 c7                	mov    edi,eax
c0010b70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b78:	50                   	push   eax
c0010b79:	53                   	push   ebx
c0010b7a:	57                   	push   edi
c0010b7b:	e8 04 9f ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0010b80:	83 c4 0c             	add    esp,0xc
c0010b83:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010b87:	50                   	push   eax
c0010b88:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010b8b:	52                   	push   edx
c0010b8c:	57                   	push   edi
c0010b8d:	e8 5e a2 ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c0010b92:	83 c4 10             	add    esp,0x10
c0010b95:	85 ff                	test   edi,edi
c0010b97:	74 14                	je     c0010bad <SysSizeFromFilename(regs*)+0x88>
c0010b99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b9d:	8b 17                	mov    edx,DWORD PTR [edi]
c0010b9f:	83 ec 0c             	sub    esp,0xc
c0010ba2:	57                   	push   edi
c0010ba3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ba6:	83 c4 10             	add    esp,0x10
c0010ba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bad:	85 c0                	test   eax,eax
c0010baf:	0f 95 c0             	setne  al
c0010bb2:	31 d2                	xor    edx,edx
c0010bb4:	25 ff 00 00 00       	and    eax,0xff
c0010bb9:	f7 d8                	neg    eax
c0010bbb:	83 d2 00             	adc    edx,0x0
c0010bbe:	83 c4 20             	add    esp,0x20
c0010bc1:	f7 da                	neg    edx
c0010bc3:	5b                   	pop    ebx
c0010bc4:	5e                   	pop    esi
c0010bc5:	5f                   	pop    edi
c0010bc6:	c3                   	ret    
c0010bc7:	83 c4 20             	add    esp,0x20
c0010bca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bcf:	5b                   	pop    ebx
c0010bd0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bd5:	5e                   	pop    esi
c0010bd6:	5f                   	pop    edi
c0010bd7:	c3                   	ret    

c0010bd8 <SysClose(regs*)>:
c0010bd8:	53                   	push   ebx
c0010bd9:	83 ec 08             	sub    esp,0x8
c0010bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010be3:	83 f8 02             	cmp    eax,0x2
c0010be6:	76 41                	jbe    c0010c29 <SysClose(regs*)+0x51>
c0010be8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010bee:	83 fa 01             	cmp    edx,0x1
c0010bf1:	76 2d                	jbe    c0010c20 <SysClose(regs*)+0x48>
c0010bf3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bf8:	77 2f                	ja     c0010c29 <SysClose(regs*)+0x51>
c0010bfa:	83 ec 0c             	sub    esp,0xc
c0010bfd:	50                   	push   eax
c0010bfe:	e8 2c 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c03:	89 c3                	mov    ebx,eax
c0010c05:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c08:	e8 95 9f ff ff       	call   c000aba2 <File::close()>
c0010c0d:	83 c4 10             	add    esp,0x10
c0010c10:	85 db                	test   ebx,ebx
c0010c12:	74 0c                	je     c0010c20 <SysClose(regs*)+0x48>
c0010c14:	83 ec 0c             	sub    esp,0xc
c0010c17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c19:	53                   	push   ebx
c0010c1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	31 c0                	xor    eax,eax
c0010c22:	31 d2                	xor    edx,edx
c0010c24:	83 c4 08             	add    esp,0x8
c0010c27:	5b                   	pop    ebx
c0010c28:	c3                   	ret    
c0010c29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c33:	83 c4 08             	add    esp,0x8
c0010c36:	5b                   	pop    ebx
c0010c37:	c3                   	ret    

c0010c38 <SysOpenDir(regs*)>:
c0010c38:	57                   	push   edi
c0010c39:	56                   	push   esi
c0010c3a:	53                   	push   ebx
c0010c3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c3f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c42:	85 c0                	test   eax,eax
c0010c44:	0f 84 e7 00 00 00    	je     c0010d31 <SysOpenDir(regs*)+0xf9>
c0010c4a:	83 ec 0c             	sub    esp,0xc
c0010c4d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c50:	56                   	push   esi
c0010c51:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c54:	57                   	push   edi
c0010c55:	50                   	push   eax
c0010c56:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c59:	50                   	push   eax
c0010c5a:	68 f4 e7 01 c0       	push   0xc001e7f4
c0010c5f:	e8 ab 98 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010c64:	83 c4 18             	add    esp,0x18
c0010c67:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c6a:	50                   	push   eax
c0010c6b:	68 1a e8 01 c0       	push   0xc001e81a
c0010c70:	e8 9a 98 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010c75:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010c7c:	e8 38 6b ff ff       	call   c00077b9 <malloc>
c0010c81:	83 c4 0c             	add    esp,0xc
c0010c84:	89 c6                	mov    esi,eax
c0010c86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c8e:	50                   	push   eax
c0010c8f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c92:	50                   	push   eax
c0010c93:	56                   	push   esi
c0010c94:	e8 15 a3 ff ff       	call   c000afae <Directory::Directory(char const*, Process*)>
c0010c99:	c7 04 24 0e f6 01 c0 	mov    DWORD PTR [esp],0xc001f60e
c0010ca0:	e8 6a 98 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010ca5:	83 c4 10             	add    esp,0x10
c0010ca8:	85 f6                	test   esi,esi
c0010caa:	0f 84 8f 00 00 00    	je     c0010d3f <SysOpenDir(regs*)+0x107>
c0010cb0:	83 ec 0c             	sub    esp,0xc
c0010cb3:	68 2f e8 01 c0       	push   0xc001e82f
c0010cb8:	e8 52 98 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010cbd:	58                   	pop    eax
c0010cbe:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cc1:	5a                   	pop    edx
c0010cc2:	51                   	push   ecx
c0010cc3:	68 33 e8 01 c0       	push   0xc001e833
c0010cc8:	e8 42 98 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010ccd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cd0:	e8 99 a3 ff ff       	call   c000b06e <Directory::open()>
c0010cd5:	c7 04 24 4b d6 01 c0 	mov    DWORD PTR [esp],0xc001d64b
c0010cdc:	89 c7                	mov    edi,eax
c0010cde:	e8 2c 98 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010ce3:	83 c4 10             	add    esp,0x10
c0010ce6:	85 ff                	test   edi,edi
c0010ce8:	75 37                	jne    c0010d21 <SysOpenDir(regs*)+0xe9>
c0010cea:	83 ec 0c             	sub    esp,0xc
c0010ced:	68 44 e8 01 c0       	push   0xc001e844
c0010cf2:	e8 18 98 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010cf7:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cfa:	e8 3b 81 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010cff:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d02:	89 02                	mov    DWORD PTR [edx],eax
c0010d04:	c1 f8 1f             	sar    eax,0x1f
c0010d07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d0a:	c7 04 24 48 e8 01 c0 	mov    DWORD PTR [esp],0xc001e848
c0010d11:	e8 f9 97 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	31 c0                	xor    eax,eax
c0010d1b:	5b                   	pop    ebx
c0010d1c:	31 d2                	xor    edx,edx
c0010d1e:	5e                   	pop    esi
c0010d1f:	5f                   	pop    edi
c0010d20:	c3                   	ret    
c0010d21:	83 ec 0c             	sub    esp,0xc
c0010d24:	68 40 e8 01 c0       	push   0xc001e840
c0010d29:	e8 e1 97 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0010d2e:	83 c4 10             	add    esp,0x10
c0010d31:	5b                   	pop    ebx
c0010d32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d3c:	5e                   	pop    esi
c0010d3d:	5f                   	pop    edi
c0010d3e:	c3                   	ret    
c0010d3f:	83 ec 0c             	sub    esp,0xc
c0010d42:	68 2b e8 01 c0       	push   0xc001e82b
c0010d47:	eb e0                	jmp    c0010d29 <SysOpenDir(regs*)+0xf1>

c0010d49 <SysCloseDir(regs*)>:
c0010d49:	53                   	push   ebx
c0010d4a:	83 ec 08             	sub    esp,0x8
c0010d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d54:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d57:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d5d:	77 2f                	ja     c0010d8e <SysCloseDir(regs*)+0x45>
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	50                   	push   eax
c0010d63:	e8 c7 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d68:	89 c3                	mov    ebx,eax
c0010d6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d6d:	e8 58 a3 ff ff       	call   c000b0ca <Directory::close()>
c0010d72:	83 c4 10             	add    esp,0x10
c0010d75:	85 db                	test   ebx,ebx
c0010d77:	74 0c                	je     c0010d85 <SysCloseDir(regs*)+0x3c>
c0010d79:	83 ec 0c             	sub    esp,0xc
c0010d7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d7e:	53                   	push   ebx
c0010d7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d82:	83 c4 10             	add    esp,0x10
c0010d85:	31 c0                	xor    eax,eax
c0010d87:	31 d2                	xor    edx,edx
c0010d89:	83 c4 08             	add    esp,0x8
c0010d8c:	5b                   	pop    ebx
c0010d8d:	c3                   	ret    
c0010d8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d98:	83 c4 08             	add    esp,0x8
c0010d9b:	5b                   	pop    ebx
c0010d9c:	c3                   	ret    

c0010d9d <SysMakeDir(regs*)>:
c0010d9d:	56                   	push   esi
c0010d9e:	53                   	push   ebx
c0010d9f:	83 ec 10             	sub    esp,0x10
c0010da2:	68 14 01 00 00       	push   0x114
c0010da7:	e8 0d 6a ff ff       	call   c00077b9 <malloc>
c0010dac:	83 c4 0c             	add    esp,0xc
c0010daf:	89 c3                	mov    ebx,eax
c0010db1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010db6:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010db9:	56                   	push   esi
c0010dba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010dbe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010dc1:	50                   	push   eax
c0010dc2:	53                   	push   ebx
c0010dc3:	e8 e6 a1 ff ff       	call   c000afae <Directory::Directory(char const*, Process*)>
c0010dc8:	83 c4 10             	add    esp,0x10
c0010dcb:	85 db                	test   ebx,ebx
c0010dcd:	74 32                	je     c0010e01 <SysMakeDir(regs*)+0x64>
c0010dcf:	83 ec 0c             	sub    esp,0xc
c0010dd2:	53                   	push   ebx
c0010dd3:	e8 76 a4 ff ff       	call   c000b24e <Directory::create()>
c0010dd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ddb:	89 c6                	mov    esi,eax
c0010ddd:	e8 e8 a2 ff ff       	call   c000b0ca <Directory::close()>
c0010de2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010de4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010de7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	31 c0                	xor    eax,eax
c0010def:	59                   	pop    ecx
c0010df0:	85 f6                	test   esi,esi
c0010df2:	5b                   	pop    ebx
c0010df3:	0f 95 c0             	setne  al
c0010df6:	5e                   	pop    esi
c0010df7:	31 d2                	xor    edx,edx
c0010df9:	f7 d8                	neg    eax
c0010dfb:	83 d2 00             	adc    edx,0x0
c0010dfe:	f7 da                	neg    edx
c0010e00:	c3                   	ret    
c0010e01:	59                   	pop    ecx
c0010e02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e0c:	5b                   	pop    ebx
c0010e0d:	5e                   	pop    esi
c0010e0e:	c3                   	ret    

c0010e0f <SysWait(regs*)>:
c0010e0f:	83 ec 10             	sub    esp,0x10
c0010e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e16:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e19:	52                   	push   edx
c0010e1a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e1d:	51                   	push   ecx
c0010e1e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e21:	50                   	push   eax
c0010e22:	e8 89 2b 00 00       	call   c00139b0 <waitTask(int, int*, int)>
c0010e27:	83 c4 1c             	add    esp,0x1c
c0010e2a:	99                   	cdq    
c0010e2b:	c3                   	ret    

c0010e2c <SysNotImpl(regs*)>:
c0010e2c:	83 ec 18             	sub    esp,0x18
c0010e2f:	68 4c e8 01 c0       	push   0xc001e84c
c0010e34:	e8 56 f3 ff ff       	call   c001018f <KePanic(char const*)>
c0010e39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e43:	83 c4 1c             	add    esp,0x1c
c0010e46:	c3                   	ret    

c0010e47 <SysPanic(regs*)>:
c0010e47:	83 ec 18             	sub    esp,0x18
c0010e4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e4e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e51:	50                   	push   eax
c0010e52:	e8 38 f3 ff ff       	call   c001018f <KePanic(char const*)>
c0010e57:	b8 01 00 00 00       	mov    eax,0x1
c0010e5c:	31 d2                	xor    edx,edx
c0010e5e:	83 c4 1c             	add    esp,0x1c
c0010e61:	c3                   	ret    

c0010e62 <SysRmdir(regs*)>:
c0010e62:	56                   	push   esi
c0010e63:	53                   	push   ebx
c0010e64:	83 ec 20             	sub    esp,0x20
c0010e67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e6b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010e6e:	68 14 01 00 00       	push   0x114
c0010e73:	e8 41 69 ff ff       	call   c00077b9 <malloc>
c0010e78:	83 c4 0c             	add    esp,0xc
c0010e7b:	89 c3                	mov    ebx,eax
c0010e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e85:	50                   	push   eax
c0010e86:	56                   	push   esi
c0010e87:	53                   	push   ebx
c0010e88:	e8 f7 9b ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0010e8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e90:	e8 27 9e ff ff       	call   c000acbc <File::unlink()>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	85 db                	test   ebx,ebx
c0010e9a:	74 14                	je     c0010eb0 <SysRmdir(regs*)+0x4e>
c0010e9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ea2:	83 ec 0c             	sub    esp,0xc
c0010ea5:	53                   	push   ebx
c0010ea6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ea9:	83 c4 10             	add    esp,0x10
c0010eac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010eb0:	85 c0                	test   eax,eax
c0010eb2:	0f 95 c0             	setne  al
c0010eb5:	31 d2                	xor    edx,edx
c0010eb7:	25 ff 00 00 00       	and    eax,0xff
c0010ebc:	f7 d8                	neg    eax
c0010ebe:	83 d2 00             	adc    edx,0x0
c0010ec1:	83 c4 14             	add    esp,0x14
c0010ec4:	f7 da                	neg    edx
c0010ec6:	5b                   	pop    ebx
c0010ec7:	5e                   	pop    esi
c0010ec8:	c3                   	ret    

c0010ec9 <SysUnlink(regs*)>:
c0010ec9:	56                   	push   esi
c0010eca:	53                   	push   ebx
c0010ecb:	83 ec 20             	sub    esp,0x20
c0010ece:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ed2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ed5:	68 14 01 00 00       	push   0x114
c0010eda:	e8 da 68 ff ff       	call   c00077b9 <malloc>
c0010edf:	83 c4 0c             	add    esp,0xc
c0010ee2:	89 c3                	mov    ebx,eax
c0010ee4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ee9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010eec:	50                   	push   eax
c0010eed:	56                   	push   esi
c0010eee:	53                   	push   ebx
c0010eef:	e8 90 9b ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0010ef4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ef7:	e8 c0 9d ff ff       	call   c000acbc <File::unlink()>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	85 db                	test   ebx,ebx
c0010f01:	74 14                	je     c0010f17 <SysUnlink(regs*)+0x4e>
c0010f03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f07:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f09:	83 ec 0c             	sub    esp,0xc
c0010f0c:	53                   	push   ebx
c0010f0d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f10:	83 c4 10             	add    esp,0x10
c0010f13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f17:	85 c0                	test   eax,eax
c0010f19:	0f 95 c0             	setne  al
c0010f1c:	31 d2                	xor    edx,edx
c0010f1e:	25 ff 00 00 00       	and    eax,0xff
c0010f23:	f7 d8                	neg    eax
c0010f25:	83 d2 00             	adc    edx,0x0
c0010f28:	83 c4 14             	add    esp,0x14
c0010f2b:	f7 da                	neg    edx
c0010f2d:	5b                   	pop    ebx
c0010f2e:	5e                   	pop    esi
c0010f2f:	c3                   	ret    

c0010f30 <SysGetArgv(regs*)>:
c0010f30:	83 ec 0c             	sub    esp,0xc
c0010f33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f37:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f3a:	85 c0                	test   eax,eax
c0010f3c:	78 2c                	js     c0010f6a <SysGetArgv(regs*)+0x3a>
c0010f3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f44:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f47:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f4d:	7d 1b                	jge    c0010f6a <SysGetArgv(regs*)+0x3a>
c0010f4f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f56:	85 c0                	test   eax,eax
c0010f58:	74 18                	je     c0010f72 <SysGetArgv(regs*)+0x42>
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	50                   	push   eax
c0010f5e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f61:	50                   	push   eax
c0010f62:	e8 99 f6 fe ff       	call   c0000600 <strcpy>
c0010f67:	83 c4 10             	add    esp,0x10
c0010f6a:	31 c0                	xor    eax,eax
c0010f6c:	31 d2                	xor    edx,edx
c0010f6e:	83 c4 0c             	add    esp,0xc
c0010f71:	c3                   	ret    
c0010f72:	b8 01 00 00 00       	mov    eax,0x1
c0010f77:	31 d2                	xor    edx,edx
c0010f79:	83 c4 0c             	add    esp,0xc
c0010f7c:	c3                   	ret    

c0010f7d <SysUSleep(regs*)>:
c0010f7d:	83 ec 1c             	sub    esp,0x1c
c0010f80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010f84:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010f87:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010f8a:	6a 00                	push   0x0
c0010f8c:	6a 64                	push   0x64
c0010f8e:	52                   	push   edx
c0010f8f:	50                   	push   eax
c0010f90:	e8 4b b1 00 00       	call   c001c0e0 <__udivdi3>
c0010f95:	83 c4 14             	add    esp,0x14
c0010f98:	50                   	push   eax
c0010f99:	e8 e6 2a 00 00       	call   c0013a84 <milliTenthSleep(unsigned int)>
c0010f9e:	31 c0                	xor    eax,eax
c0010fa0:	31 d2                	xor    edx,edx
c0010fa2:	83 c4 1c             	add    esp,0x1c
c0010fa5:	c3                   	ret    

c0010fa6 <SysSpawn(regs*)>:
c0010fa6:	56                   	push   esi
c0010fa7:	53                   	push   ebx
c0010fa8:	50                   	push   eax
c0010fa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fb0:	85 c0                	test   eax,eax
c0010fb2:	75 08                	jne    c0010fbc <SysSpawn(regs*)+0x16>
c0010fb4:	59                   	pop    ecx
c0010fb5:	31 c0                	xor    eax,eax
c0010fb7:	31 d2                	xor    edx,edx
c0010fb9:	5b                   	pop    ebx
c0010fba:	5e                   	pop    esi
c0010fbb:	c3                   	ret    
c0010fbc:	83 ec 0c             	sub    esp,0xc
c0010fbf:	68 24 07 00 00       	push   0x724
c0010fc4:	e8 f0 67 ff ff       	call   c00077b9 <malloc>
c0010fc9:	83 c4 10             	add    esp,0x10
c0010fcc:	89 c6                	mov    esi,eax
c0010fce:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010fd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fd4:	85 c0                	test   eax,eax
c0010fd6:	75 33                	jne    c001100b <SysSpawn(regs*)+0x65>
c0010fd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fdd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fe0:	52                   	push   edx
c0010fe1:	50                   	push   eax
c0010fe2:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010fe5:	53                   	push   ebx
c0010fe6:	56                   	push   esi
c0010fe7:	e8 44 21 00 00       	call   c0013130 <Process::Process(char const*, Process*, char**)>
c0010fec:	83 c4 10             	add    esp,0x10
c0010fef:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010ff6:	75 bc                	jne    c0010fb4 <SysSpawn(regs*)+0xe>
c0010ff8:	83 ec 0c             	sub    esp,0xc
c0010ffb:	56                   	push   esi
c0010ffc:	e8 5b 26 00 00       	call   c001365c <Process::createUserThread()>
c0011001:	8b 06                	mov    eax,DWORD PTR [esi]
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	99                   	cdq    
c0011007:	59                   	pop    ecx
c0011008:	5b                   	pop    ebx
c0011009:	5e                   	pop    esi
c001100a:	c3                   	ret    
c001100b:	31 c0                	xor    eax,eax
c001100d:	eb d1                	jmp    c0010fe0 <SysSpawn(regs*)+0x3a>

c001100f <SysGetEnv(regs*)>:
c001100f:	57                   	push   edi
c0011010:	56                   	push   esi
c0011011:	53                   	push   ebx
c0011012:	83 ec 1c             	sub    esp,0x1c
c0011015:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011019:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001101e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011021:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011024:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011027:	50                   	push   eax
c0011028:	e8 1a f0 ff ff       	call   c0010047 <Krnl::getProcessTotalEnvCount(Process*)>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	39 c7                	cmp    edi,eax
c0011032:	7c 14                	jl     c0011048 <SysGetEnv(regs*)+0x39>
c0011034:	85 f6                	test   esi,esi
c0011036:	75 0b                	jne    c0011043 <SysGetEnv(regs*)+0x34>
c0011038:	83 c4 10             	add    esp,0x10
c001103b:	31 c0                	xor    eax,eax
c001103d:	5b                   	pop    ebx
c001103e:	31 d2                	xor    edx,edx
c0011040:	5e                   	pop    esi
c0011041:	5f                   	pop    edi
c0011042:	c3                   	ret    
c0011043:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011046:	eb f0                	jmp    c0011038 <SysGetEnv(regs*)+0x29>
c0011048:	8d 44 24 08          	lea    eax,[esp+0x8]
c001104c:	52                   	push   edx
c001104d:	57                   	push   edi
c001104e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011054:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011057:	51                   	push   ecx
c0011058:	50                   	push   eax
c0011059:	e8 09 f0 ff ff       	call   c0010067 <Krnl::getProcessEnvPair(Process*, int)>
c001105e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011061:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011065:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011069:	83 c4 0c             	add    esp,0xc
c001106c:	85 db                	test   ebx,ebx
c001106e:	75 23                	jne    c0011093 <SysGetEnv(regs*)+0x84>
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	50                   	push   eax
c0011074:	e8 c7 f4 fe ff       	call   c0000540 <strlen>
c0011079:	89 3c 24             	mov    DWORD PTR [esp],edi
c001107c:	89 c3                	mov    ebx,eax
c001107e:	e8 bd f4 fe ff       	call   c0000540 <strlen>
c0011083:	31 d2                	xor    edx,edx
c0011085:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011089:	83 c4 10             	add    esp,0x10
c001108c:	83 c4 10             	add    esp,0x10
c001108f:	5b                   	pop    ebx
c0011090:	5e                   	pop    esi
c0011091:	5f                   	pop    edi
c0011092:	c3                   	ret    
c0011093:	83 ec 08             	sub    esp,0x8
c0011096:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011099:	50                   	push   eax
c001109a:	56                   	push   esi
c001109b:	e8 60 f5 fe ff       	call   c0000600 <strcpy>
c00110a0:	58                   	pop    eax
c00110a1:	5a                   	pop    edx
c00110a2:	68 66 e8 01 c0       	push   0xc001e866
c00110a7:	56                   	push   esi
c00110a8:	e8 13 f7 fe ff       	call   c00007c0 <strcat>
c00110ad:	59                   	pop    ecx
c00110ae:	5b                   	pop    ebx
c00110af:	57                   	push   edi
c00110b0:	56                   	push   esi
c00110b1:	e8 0a f7 fe ff       	call   c00007c0 <strcat>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	e9 7a ff ff ff       	jmp    c0011038 <SysGetEnv(regs*)+0x29>

c00110be <SysSetFatAttrib(regs*)>:
c00110be:	57                   	push   edi
c00110bf:	56                   	push   esi
c00110c0:	53                   	push   ebx
c00110c1:	83 ec 1c             	sub    esp,0x1c
c00110c4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00110c8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00110cb:	68 14 01 00 00       	push   0x114
c00110d0:	e8 e4 66 ff ff       	call   c00077b9 <malloc>
c00110d5:	83 c4 0c             	add    esp,0xc
c00110d8:	89 c3                	mov    ebx,eax
c00110da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110e2:	50                   	push   eax
c00110e3:	57                   	push   edi
c00110e4:	53                   	push   ebx
c00110e5:	e8 9a 99 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c00110ea:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00110ed:	83 c4 0c             	add    esp,0xc
c00110f0:	0f b6 d4             	movzx  edx,ah
c00110f3:	25 ff 00 00 00       	and    eax,0xff
c00110f8:	52                   	push   edx
c00110f9:	50                   	push   eax
c00110fa:	53                   	push   ebx
c00110fb:	e8 56 9c ff ff       	call   c000ad56 <File::chfatattr(unsigned char, unsigned char)>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	85 db                	test   ebx,ebx
c0011105:	74 14                	je     c001111b <SysSetFatAttrib(regs*)+0x5d>
c0011107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001110b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001110d:	83 ec 0c             	sub    esp,0xc
c0011110:	53                   	push   ebx
c0011111:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011114:	83 c4 10             	add    esp,0x10
c0011117:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001111b:	85 c0                	test   eax,eax
c001111d:	0f 95 c0             	setne  al
c0011120:	31 d2                	xor    edx,edx
c0011122:	25 ff 00 00 00       	and    eax,0xff
c0011127:	f7 d8                	neg    eax
c0011129:	83 d2 00             	adc    edx,0x0
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	f7 da                	neg    edx
c0011131:	5b                   	pop    ebx
c0011132:	5e                   	pop    esi
c0011133:	5f                   	pop    edi
c0011134:	c3                   	ret    

c0011135 <SysPipe(regs*)>:
c0011135:	57                   	push   edi
c0011136:	56                   	push   esi
c0011137:	53                   	push   ebx
c0011138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113c:	83 ec 0c             	sub    esp,0xc
c001113f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011142:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011145:	6a 20                	push   0x20
c0011147:	e8 6d 66 ff ff       	call   c00077b9 <malloc>
c001114c:	89 c3                	mov    ebx,eax
c001114e:	58                   	pop    eax
c001114f:	5a                   	pop    edx
c0011150:	68 00 50 00 00       	push   0x5000
c0011155:	53                   	push   ebx
c0011156:	e8 63 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c001115b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001115e:	e8 d7 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011163:	89 07                	mov    DWORD PTR [edi],eax
c0011165:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011168:	e8 cd 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	89 06                	mov    DWORD PTR [esi],eax
c0011172:	31 d2                	xor    edx,edx
c0011174:	5b                   	pop    ebx
c0011175:	31 c0                	xor    eax,eax
c0011177:	5e                   	pop    esi
c0011178:	5f                   	pop    edi
c0011179:	c3                   	ret    

c001117a <SysGetUnixTime(regs*)>:
c001117a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001117f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011189:	e9 04 a3 ff ff       	jmp    c000b492 <Clock::timeInSecondsLocal()>

c001118e <string_ends_with(char const*, char const*)>:
c001118e:	57                   	push   edi
c001118f:	56                   	push   esi
c0011190:	53                   	push   ebx
c0011191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011195:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011199:	83 ec 0c             	sub    esp,0xc
c001119c:	53                   	push   ebx
c001119d:	e8 9e f3 fe ff       	call   c0000540 <strlen>
c00111a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111a5:	89 c6                	mov    esi,eax
c00111a7:	e8 94 f3 fe ff       	call   c0000540 <strlen>
c00111ac:	83 c4 10             	add    esp,0x10
c00111af:	39 c6                	cmp    esi,eax
c00111b1:	7d 06                	jge    c00111b9 <string_ends_with(char const*, char const*)+0x2b>
c00111b3:	5b                   	pop    ebx
c00111b4:	31 c0                	xor    eax,eax
c00111b6:	5e                   	pop    esi
c00111b7:	5f                   	pop    edi
c00111b8:	c3                   	ret    
c00111b9:	83 ec 08             	sub    esp,0x8
c00111bc:	29 c6                	sub    esi,eax
c00111be:	57                   	push   edi
c00111bf:	01 f3                	add    ebx,esi
c00111c1:	53                   	push   ebx
c00111c2:	e8 19 f5 fe ff       	call   c00006e0 <strcmp>
c00111c7:	83 c4 10             	add    esp,0x10
c00111ca:	85 c0                	test   eax,eax
c00111cc:	5b                   	pop    ebx
c00111cd:	0f 94 c0             	sete   al
c00111d0:	5e                   	pop    esi
c00111d1:	25 ff 00 00 00       	and    eax,0xff
c00111d6:	5f                   	pop    edi
c00111d7:	c3                   	ret    

c00111d8 <SysOpen(regs*)>:
c00111d8:	56                   	push   esi
c00111d9:	53                   	push   ebx
c00111da:	81 ec 04 01 00 00    	sub    esp,0x104
c00111e0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00111e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00111ea:	85 d2                	test   edx,edx
c00111ec:	0f 84 cc 01 00 00    	je     c00113be <SysOpen(regs*)+0x1e6>
c00111f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00111f5:	85 c0                	test   eax,eax
c00111f7:	0f 84 c1 01 00 00    	je     c00113be <SysOpen(regs*)+0x1e6>
c00111fd:	83 ec 08             	sub    esp,0x8
c0011200:	50                   	push   eax
c0011201:	68 68 e8 01 c0       	push   0xc001e868
c0011206:	e8 04 93 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001120b:	83 c4 0c             	add    esp,0xc
c001120e:	68 75 e8 01 c0       	push   0xc001e875
c0011213:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011216:	50                   	push   eax
c0011217:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001121b:	56                   	push   esi
c001121c:	e8 b9 96 ff ff       	call   c000a8da <Fs::standardiseFiles(char*, char const*, char const*)>
c0011221:	89 34 24             	mov    DWORD PTR [esp],esi
c0011224:	e8 17 f3 fe ff       	call   c0000540 <strlen>
c0011229:	83 c4 10             	add    esp,0x10
c001122c:	48                   	dec    eax
c001122d:	74 1d                	je     c001124c <SysOpen(regs*)+0x74>
c001122f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011232:	eb 0f                	jmp    c0011243 <SysOpen(regs*)+0x6b>
c0011234:	80 fa 3a             	cmp    dl,0x3a
c0011237:	74 0f                	je     c0011248 <SysOpen(regs*)+0x70>
c0011239:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001123d:	48                   	dec    eax
c001123e:	74 0c                	je     c001124c <SysOpen(regs*)+0x74>
c0011240:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011243:	80 fa 2e             	cmp    dl,0x2e
c0011246:	75 ec                	jne    c0011234 <SysOpen(regs*)+0x5c>
c0011248:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001124c:	83 ec 08             	sub    esp,0x8
c001124f:	68 79 e8 01 c0       	push   0xc001e879
c0011254:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011257:	50                   	push   eax
c0011258:	e8 31 ff ff ff       	call   c001118e <string_ends_with(char const*, char const*)>
c001125d:	83 c4 10             	add    esp,0x10
c0011260:	85 c0                	test   eax,eax
c0011262:	74 1d                	je     c0011281 <SysOpen(regs*)+0xa9>
c0011264:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011267:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001126d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011274:	81 c4 04 01 00 00    	add    esp,0x104
c001127a:	31 c0                	xor    eax,eax
c001127c:	31 d2                	xor    edx,edx
c001127e:	5b                   	pop    ebx
c001127f:	5e                   	pop    esi
c0011280:	c3                   	ret    
c0011281:	83 ec 08             	sub    esp,0x8
c0011284:	68 7e e8 01 c0       	push   0xc001e87e
c0011289:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001128c:	50                   	push   eax
c001128d:	e8 fc fe ff ff       	call   c001118e <string_ends_with(char const*, char const*)>
c0011292:	83 c4 10             	add    esp,0x10
c0011295:	85 c0                	test   eax,eax
c0011297:	75 cb                	jne    c0011264 <SysOpen(regs*)+0x8c>
c0011299:	83 ec 08             	sub    esp,0x8
c001129c:	68 7a e8 01 c0       	push   0xc001e87a
c00112a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112a4:	50                   	push   eax
c00112a5:	e8 36 f4 fe ff       	call   c00006e0 <strcmp>
c00112aa:	83 c4 10             	add    esp,0x10
c00112ad:	85 c0                	test   eax,eax
c00112af:	74 b3                	je     c0011264 <SysOpen(regs*)+0x8c>
c00112b1:	83 ec 08             	sub    esp,0x8
c00112b4:	68 79 e8 01 c0       	push   0xc001e879
c00112b9:	56                   	push   esi
c00112ba:	e8 cf fe ff ff       	call   c001118e <string_ends_with(char const*, char const*)>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	85 c0                	test   eax,eax
c00112c4:	75 9e                	jne    c0011264 <SysOpen(regs*)+0x8c>
c00112c6:	83 ec 08             	sub    esp,0x8
c00112c9:	68 83 e8 01 c0       	push   0xc001e883
c00112ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112d1:	50                   	push   eax
c00112d2:	e8 b7 fe ff ff       	call   c001118e <string_ends_with(char const*, char const*)>
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	85 c0                	test   eax,eax
c00112dc:	0f 85 ef 00 00 00    	jne    c00113d1 <SysOpen(regs*)+0x1f9>
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	68 88 e8 01 c0       	push   0xc001e888
c00112ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112ed:	50                   	push   eax
c00112ee:	e8 9b fe ff ff       	call   c001118e <string_ends_with(char const*, char const*)>
c00112f3:	83 c4 10             	add    esp,0x10
c00112f6:	85 c0                	test   eax,eax
c00112f8:	0f 85 d3 00 00 00    	jne    c00113d1 <SysOpen(regs*)+0x1f9>
c00112fe:	83 ec 08             	sub    esp,0x8
c0011301:	68 84 e8 01 c0       	push   0xc001e884
c0011306:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011309:	51                   	push   ecx
c001130a:	e8 d1 f3 fe ff       	call   c00006e0 <strcmp>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	85 c0                	test   eax,eax
c0011314:	0f 84 b7 00 00 00    	je     c00113d1 <SysOpen(regs*)+0x1f9>
c001131a:	83 ec 08             	sub    esp,0x8
c001131d:	68 83 e8 01 c0       	push   0xc001e883
c0011322:	56                   	push   esi
c0011323:	e8 66 fe ff ff       	call   c001118e <string_ends_with(char const*, char const*)>
c0011328:	83 c4 10             	add    esp,0x10
c001132b:	85 c0                	test   eax,eax
c001132d:	0f 85 9e 00 00 00    	jne    c00113d1 <SysOpen(regs*)+0x1f9>
c0011333:	83 ec 0c             	sub    esp,0xc
c0011336:	68 14 01 00 00       	push   0x114
c001133b:	e8 79 64 ff ff       	call   c00077b9 <malloc>
c0011340:	83 c4 0c             	add    esp,0xc
c0011343:	89 c6                	mov    esi,eax
c0011345:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001134a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001134d:	50                   	push   eax
c001134e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011351:	52                   	push   edx
c0011352:	56                   	push   esi
c0011353:	e8 2c 97 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	85 f6                	test   esi,esi
c001135d:	74 5f                	je     c00113be <SysOpen(regs*)+0x1e6>
c001135f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011362:	89 d0                	mov    eax,edx
c0011364:	25 ff 00 00 00       	and    eax,0xff
c0011369:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001136c:	89 d0                	mov    eax,edx
c001136e:	83 e0 01             	and    eax,0x1
c0011371:	f6 c2 02             	test   dl,0x2
c0011374:	74 03                	je     c0011379 <SysOpen(regs*)+0x1a1>
c0011376:	83 c8 02             	or     eax,0x2
c0011379:	f6 c2 04             	test   dl,0x4
c001137c:	74 03                	je     c0011381 <SysOpen(regs*)+0x1a9>
c001137e:	83 c8 04             	or     eax,0x4
c0011381:	f6 c2 08             	test   dl,0x8
c0011384:	74 03                	je     c0011389 <SysOpen(regs*)+0x1b1>
c0011386:	83 c8 0a             	or     eax,0xa
c0011389:	83 e2 10             	and    edx,0x10
c001138c:	74 03                	je     c0011391 <SysOpen(regs*)+0x1b9>
c001138e:	83 c8 12             	or     eax,0x12
c0011391:	83 ec 08             	sub    esp,0x8
c0011394:	50                   	push   eax
c0011395:	56                   	push   esi
c0011396:	e8 a9 97 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c001139b:	83 c4 10             	add    esp,0x10
c001139e:	85 c0                	test   eax,eax
c00113a0:	75 1c                	jne    c00113be <SysOpen(regs*)+0x1e6>
c00113a2:	83 ec 0c             	sub    esp,0xc
c00113a5:	56                   	push   esi
c00113a6:	e8 8f 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00113ab:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113ae:	83 c4 10             	add    esp,0x10
c00113b1:	89 02                	mov    DWORD PTR [edx],eax
c00113b3:	c1 f8 1f             	sar    eax,0x1f
c00113b6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113b9:	e9 b6 fe ff ff       	jmp    c0011274 <SysOpen(regs*)+0x9c>
c00113be:	81 c4 04 01 00 00    	add    esp,0x104
c00113c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ce:	5b                   	pop    ebx
c00113cf:	5e                   	pop    esi
c00113d0:	c3                   	ret    
c00113d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113d4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00113da:	e9 8e fe ff ff       	jmp    c001126d <SysOpen(regs*)+0x95>

c00113df <KeSystemCall(regs*, void*)>:
c00113df:	53                   	push   ebx
c00113e0:	83 ec 10             	sub    esp,0x10
c00113e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00113e7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00113ea:	68 8d e8 01 c0       	push   0xc001e88d
c00113ef:	e8 1b 91 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00113f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	83 f8 32             	cmp    eax,0x32
c00113fd:	77 16                	ja     c0011415 <KeSystemCall(regs*, void*)+0x36>
c00113ff:	8b 14 85 20 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05e0]
c0011406:	85 d2                	test   edx,edx
c0011408:	74 0b                	je     c0011415 <KeSystemCall(regs*, void*)+0x36>
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	53                   	push   ebx
c001140e:	ff d2                	call   edx
c0011410:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011413:	eb 0d                	jmp    c0011422 <KeSystemCall(regs*, void*)+0x43>
c0011415:	52                   	push   edx
c0011416:	52                   	push   edx
c0011417:	50                   	push   eax
c0011418:	68 9d e8 01 c0       	push   0xc001e89d
c001141d:	e8 ed 90 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001142a:	31 d2                	xor    edx,edx
c001142c:	83 c4 08             	add    esp,0x8
c001142f:	5b                   	pop    ebx
c0011430:	c3                   	ret    

c0011431 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011431:	55                   	push   ebp
c0011432:	57                   	push   edi
c0011433:	56                   	push   esi
c0011434:	53                   	push   ebx
c0011435:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001143b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011442:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011444:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011447:	80 fb 40             	cmp    bl,0x40
c001144a:	75 1b                	jne    c0011467 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001144c:	8a 16                	mov    dl,BYTE PTR [esi]
c001144e:	84 d2                	test   dl,dl
c0011450:	0f 84 f1 00 00 00    	je     c0011547 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011456:	8d 46 01             	lea    eax,[esi+0x1]
c0011459:	80 fa 3a             	cmp    dl,0x3a
c001145c:	74 04                	je     c0011462 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001145e:	89 c6                	mov    esi,eax
c0011460:	eb ea                	jmp    c001144c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011462:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011465:	89 c6                	mov    esi,eax
c0011467:	50                   	push   eax
c0011468:	6a 40                	push   0x40
c001146a:	6a 00                	push   0x0
c001146c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011470:	50                   	push   eax
c0011471:	e8 5a f0 fe ff       	call   c00004d0 <memset>
c0011476:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001147d:	31 c0                	xor    eax,eax
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011484:	84 c9                	test   cl,cl
c0011486:	0f 84 bb 00 00 00    	je     c0011547 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001148c:	3d c7 00 00 00       	cmp    eax,0xc7
c0011491:	0f 8f b0 00 00 00    	jg     c0011547 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011497:	80 f9 0a             	cmp    cl,0xa
c001149a:	0f 85 98 00 00 00    	jne    c0011538 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114a0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114a5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114a9:	a8 df                	test   al,0xdf
c00114ab:	0f 94 c1             	sete   cl
c00114ae:	3c 23                	cmp    al,0x23
c00114b0:	0f 94 c2             	sete   dl
c00114b3:	08 d1                	or     cl,dl
c00114b5:	75 4a                	jne    c0011501 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114b7:	8d 50 f7             	lea    edx,[eax-0x9]
c00114ba:	80 fa 01             	cmp    dl,0x1
c00114bd:	76 42                	jbe    c0011501 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114bf:	3c 5b                	cmp    al,0x5b
c00114c1:	75 42                	jne    c0011505 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114c3:	80 fb 40             	cmp    bl,0x40
c00114c6:	75 39                	jne    c0011501 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114c8:	83 ec 0c             	sub    esp,0xc
c00114cb:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114cf:	52                   	push   edx
c00114d0:	e8 6b f0 fe ff       	call   c0000540 <strlen>
c00114d5:	83 c4 10             	add    esp,0x10
c00114d8:	83 f8 3f             	cmp    eax,0x3f
c00114db:	77 6a                	ja     c0011547 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114dd:	50                   	push   eax
c00114de:	50                   	push   eax
c00114df:	8d 54 24 61          	lea    edx,[esp+0x61]
c00114e3:	52                   	push   edx
c00114e4:	8d 54 24 24          	lea    edx,[esp+0x24]
c00114e8:	52                   	push   edx
c00114e9:	e8 12 f1 fe ff       	call   c0000600 <strcpy>
c00114ee:	58                   	pop    eax
c00114ef:	8d 54 24 24          	lea    edx,[esp+0x24]
c00114f3:	52                   	push   edx
c00114f4:	e8 47 f0 fe ff       	call   c0000540 <strlen>
c00114f9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00114fe:	83 c4 10             	add    esp,0x10
c0011501:	31 d2                	xor    edx,edx
c0011503:	eb 3a                	jmp    c001153f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011505:	80 fb 40             	cmp    bl,0x40
c0011508:	74 06                	je     c0011510 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001150a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001150e:	eb 20                	jmp    c0011530 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011510:	50                   	push   eax
c0011511:	50                   	push   eax
c0011512:	55                   	push   ebp
c0011513:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011517:	50                   	push   eax
c0011518:	e8 c3 f1 fe ff       	call   c00006e0 <strcmp>
c001151d:	83 c4 10             	add    esp,0x10
c0011520:	85 c0                	test   eax,eax
c0011522:	75 dd                	jne    c0011501 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011524:	eb e4                	jmp    c001150a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011526:	8d 50 01             	lea    edx,[eax+0x1]
c0011529:	80 f9 3d             	cmp    cl,0x3d
c001152c:	74 1d                	je     c001154b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001152e:	89 d0                	mov    eax,edx
c0011530:	8a 08                	mov    cl,BYTE PTR [eax]
c0011532:	84 c9                	test   cl,cl
c0011534:	75 f0                	jne    c0011526 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011536:	eb 0f                	jmp    c0011547 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011538:	8d 50 01             	lea    edx,[eax+0x1]
c001153b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001153f:	47                   	inc    edi
c0011540:	89 d0                	mov    eax,edx
c0011542:	e9 3b ff ff ff       	jmp    c0011482 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011547:	31 c0                	xor    eax,eax
c0011549:	eb 33                	jmp    c001157e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001154b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001154f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011552:	50                   	push   eax
c0011553:	50                   	push   eax
c0011554:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011558:	50                   	push   eax
c0011559:	56                   	push   esi
c001155a:	e8 81 f1 fe ff       	call   c00006e0 <strcmp>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	85 c0                	test   eax,eax
c0011564:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011568:	75 97                	jne    c0011501 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001156a:	51                   	push   ecx
c001156b:	51                   	push   ecx
c001156c:	52                   	push   edx
c001156d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011574:	e8 87 f0 fe ff       	call   c0000600 <strcpy>
c0011579:	83 c4 10             	add    esp,0x10
c001157c:	b0 01                	mov    al,0x1
c001157e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011584:	5b                   	pop    ebx
c0011585:	5e                   	pop    esi
c0011586:	5f                   	pop    edi
c0011587:	5d                   	pop    ebp
c0011588:	c3                   	ret    

c0011589 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011589:	57                   	push   edi
c001158a:	56                   	push   esi
c001158b:	53                   	push   ebx
c001158c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011592:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011599:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115a0:	53                   	push   ebx
c00115a1:	e8 9a ef fe ff       	call   c0000540 <strlen>
c00115a6:	89 34 24             	mov    DWORD PTR [esp],esi
c00115a9:	89 c7                	mov    edi,eax
c00115ab:	e8 90 ef fe ff       	call   c0000540 <strlen>
c00115b0:	83 c4 10             	add    esp,0x10
c00115b3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115b7:	3d ff 00 00 00       	cmp    eax,0xff
c00115bc:	0f 87 d3 00 00 00    	ja     c0011695 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115c2:	57                   	push   edi
c00115c3:	57                   	push   edi
c00115c4:	56                   	push   esi
c00115c5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115c9:	56                   	push   esi
c00115ca:	e8 31 f0 fe ff       	call   c0000600 <strcpy>
c00115cf:	58                   	pop    eax
c00115d0:	5a                   	pop    edx
c00115d1:	68 5a eb 01 c0       	push   0xc001eb5a
c00115d6:	56                   	push   esi
c00115d7:	e8 e4 f1 fe ff       	call   c00007c0 <strcat>
c00115dc:	59                   	pop    ecx
c00115dd:	5f                   	pop    edi
c00115de:	53                   	push   ebx
c00115df:	56                   	push   esi
c00115e0:	e8 db f1 fe ff       	call   c00007c0 <strcat>
c00115e5:	58                   	pop    eax
c00115e6:	5a                   	pop    edx
c00115e7:	68 b1 e8 01 c0       	push   0xc001e8b1
c00115ec:	56                   	push   esi
c00115ed:	e8 ce f1 fe ff       	call   c00007c0 <strcat>
c00115f2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00115f9:	e8 bb 61 ff ff       	call   c00077b9 <malloc>
c00115fe:	83 c4 0c             	add    esp,0xc
c0011601:	89 c3                	mov    ebx,eax
c0011603:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0011609:	56                   	push   esi
c001160a:	50                   	push   eax
c001160b:	e8 74 94 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	85 db                	test   ebx,ebx
c0011615:	74 7e                	je     c0011695 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011617:	51                   	push   ecx
c0011618:	51                   	push   ecx
c0011619:	6a 01                	push   0x1
c001161b:	53                   	push   ebx
c001161c:	e8 23 95 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c0011621:	83 c4 10             	add    esp,0x10
c0011624:	85 c0                	test   eax,eax
c0011626:	74 08                	je     c0011630 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011628:	83 ec 0c             	sub    esp,0xc
c001162b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001162d:	53                   	push   ebx
c001162e:	eb 5f                	jmp    c001168f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011630:	52                   	push   edx
c0011631:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011635:	50                   	push   eax
c0011636:	8d 44 24 20          	lea    eax,[esp+0x20]
c001163a:	50                   	push   eax
c001163b:	53                   	push   ebx
c001163c:	e8 af 97 ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c0011641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	89 c1                	mov    ecx,eax
c001164a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001164e:	74 31                	je     c0011681 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011650:	83 ec 0c             	sub    esp,0xc
c0011653:	50                   	push   eax
c0011654:	e8 60 61 ff ff       	call   c00077b9 <malloc>
c0011659:	89 c6                	mov    esi,eax
c001165b:	58                   	pop    eax
c001165c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001165e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011662:	52                   	push   edx
c0011663:	56                   	push   esi
c0011664:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011668:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001166c:	53                   	push   ebx
c001166d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011670:	83 c4 20             	add    esp,0x20
c0011673:	85 c0                	test   eax,eax
c0011675:	75 0a                	jne    c0011681 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011677:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001167b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001167f:	74 18                	je     c0011699 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011681:	83 ec 0c             	sub    esp,0xc
c0011684:	53                   	push   ebx
c0011685:	e8 18 95 ff ff       	call   c000aba2 <File::close()>
c001168a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001168c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001168f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011692:	83 c4 10             	add    esp,0x10
c0011695:	31 c0                	xor    eax,eax
c0011697:	eb 3b                	jmp    c00116d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011699:	83 ec 0c             	sub    esp,0xc
c001169c:	53                   	push   ebx
c001169d:	e8 00 95 ff ff       	call   c000aba2 <File::close()>
c00116a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116aa:	83 c4 0c             	add    esp,0xc
c00116ad:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116b4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116bb:	56                   	push   esi
c00116bc:	e8 70 fd ff ff       	call   c0011431 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00116c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116c8:	e8 fc 60 ff ff       	call   c00077c9 <free>
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116d4:	81 c4 20 01 00 00    	add    esp,0x120
c00116da:	5b                   	pop    ebx
c00116db:	5e                   	pop    esi
c00116dc:	5f                   	pop    edi
c00116dd:	c3                   	ret    

c00116de <Reg::getLine(char*, char*, char*)>:
c00116de:	57                   	push   edi
c00116df:	56                   	push   esi
c00116e0:	53                   	push   ebx
c00116e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00116e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00116ed:	57                   	push   edi
c00116ee:	56                   	push   esi
c00116ef:	53                   	push   ebx
c00116f0:	68 b6 e8 01 c0       	push   0xc001e8b6
c00116f5:	e8 8f fe ff ff       	call   c0011589 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00116fa:	83 c4 10             	add    esp,0x10
c00116fd:	84 c0                	test   al,al
c00116ff:	75 10                	jne    c0011711 <Reg::getLine(char*, char*, char*)+0x33>
c0011701:	57                   	push   edi
c0011702:	56                   	push   esi
c0011703:	53                   	push   ebx
c0011704:	68 db e8 01 c0       	push   0xc001e8db
c0011709:	e8 7b fe ff ff       	call   c0011589 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	5b                   	pop    ebx
c0011712:	5e                   	pop    esi
c0011713:	5f                   	pop    edi
c0011714:	c3                   	ret    

c0011715 <Reg::readInt(char*, char*, int*)>:
c0011715:	55                   	push   ebp
c0011716:	57                   	push   edi
c0011717:	56                   	push   esi
c0011718:	53                   	push   ebx
c0011719:	81 ec f0 00 00 00    	sub    esp,0xf0
c001171f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011723:	57                   	push   edi
c0011724:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001172b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011732:	e8 a7 ff ff ff       	call   c00116de <Reg::getLine(char*, char*, char*)>
c0011737:	83 c4 10             	add    esp,0x10
c001173a:	84 c0                	test   al,al
c001173c:	0f 84 b3 00 00 00    	je     c00117f5 <Reg::readInt(char*, char*, int*)+0xe0>
c0011742:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011746:	80 fa 2b             	cmp    dl,0x2b
c0011749:	74 0c                	je     c0011757 <Reg::readInt(char*, char*, int*)+0x42>
c001174b:	80 fa 2d             	cmp    dl,0x2d
c001174e:	75 0e                	jne    c001175e <Reg::readInt(char*, char*, int*)+0x49>
c0011750:	ba 01 00 00 00       	mov    edx,0x1
c0011755:	eb 0b                	jmp    c0011762 <Reg::readInt(char*, char*, int*)+0x4d>
c0011757:	ba 01 00 00 00       	mov    edx,0x1
c001175c:	eb 02                	jmp    c0011760 <Reg::readInt(char*, char*, int*)+0x4b>
c001175e:	31 d2                	xor    edx,edx
c0011760:	31 c0                	xor    eax,eax
c0011762:	be 0a 00 00 00       	mov    esi,0xa
c0011767:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001176c:	75 20                	jne    c001178e <Reg::readInt(char*, char*, int*)+0x79>
c001176e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011772:	80 f9 78             	cmp    cl,0x78
c0011775:	75 0a                	jne    c0011781 <Reg::readInt(char*, char*, int*)+0x6c>
c0011777:	83 c2 02             	add    edx,0x2
c001177a:	be 10 00 00 00       	mov    esi,0x10
c001177f:	eb 0d                	jmp    c001178e <Reg::readInt(char*, char*, int*)+0x79>
c0011781:	80 f9 62             	cmp    cl,0x62
c0011784:	75 08                	jne    c001178e <Reg::readInt(char*, char*, int*)+0x79>
c0011786:	83 c2 02             	add    edx,0x2
c0011789:	be 02 00 00 00       	mov    esi,0x2
c001178e:	01 d7                	add    edi,edx
c0011790:	31 d2                	xor    edx,edx
c0011792:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011794:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011798:	80 fb 0d             	cmp    bl,0xd
c001179b:	0f 94 c3             	sete   bl
c001179e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117a3:	0f 94 c1             	sete   cl
c00117a6:	08 cb                	or     bl,cl
c00117a8:	75 3a                	jne    c00117e4 <Reg::readInt(char*, char*, int*)+0xcf>
c00117aa:	0f af d6             	imul   edx,esi
c00117ad:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117b2:	83 fe 10             	cmp    esi,0x10
c00117b5:	75 26                	jne    c00117dd <Reg::readInt(char*, char*, int*)+0xc8>
c00117b7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117bb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117be:	89 e9                	mov    ecx,ebp
c00117c0:	80 f9 05             	cmp    cl,0x5
c00117c3:	77 06                	ja     c00117cb <Reg::readInt(char*, char*, int*)+0xb6>
c00117c5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117c9:	eb 16                	jmp    c00117e1 <Reg::readInt(char*, char*, int*)+0xcc>
c00117cb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117cf:	83 e9 61             	sub    ecx,0x61
c00117d2:	80 f9 05             	cmp    cl,0x5
c00117d5:	77 06                	ja     c00117dd <Reg::readInt(char*, char*, int*)+0xc8>
c00117d7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00117db:	eb 04                	jmp    c00117e1 <Reg::readInt(char*, char*, int*)+0xcc>
c00117dd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00117e1:	47                   	inc    edi
c00117e2:	eb ae                	jmp    c0011792 <Reg::readInt(char*, char*, int*)+0x7d>
c00117e4:	84 c0                	test   al,al
c00117e6:	74 02                	je     c00117ea <Reg::readInt(char*, char*, int*)+0xd5>
c00117e8:	f7 da                	neg    edx
c00117ea:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00117f1:	89 10                	mov    DWORD PTR [eax],edx
c00117f3:	88 d8                	mov    al,bl
c00117f5:	81 c4 ec 00 00 00    	add    esp,0xec
c00117fb:	5b                   	pop    ebx
c00117fc:	5e                   	pop    esi
c00117fd:	5f                   	pop    edi
c00117fe:	5d                   	pop    ebp
c00117ff:	c3                   	ret    

c0011800 <Reg::readString(char*, char*, char*, int)>:
c0011800:	57                   	push   edi
c0011801:	56                   	push   esi
c0011802:	53                   	push   ebx
c0011803:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011809:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011810:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011814:	57                   	push   edi
c0011815:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001181c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011823:	e8 b6 fe ff ff       	call   c00116de <Reg::getLine(char*, char*, char*)>
c0011828:	83 c4 10             	add    esp,0x10
c001182b:	89 c6                	mov    esi,eax
c001182d:	84 c0                	test   al,al
c001182f:	74 44                	je     c0011875 <Reg::readString(char*, char*, char*, int)+0x75>
c0011831:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011838:	31 c0                	xor    eax,eax
c001183a:	4a                   	dec    edx
c001183b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001183e:	84 c9                	test   cl,cl
c0011840:	74 0f                	je     c0011851 <Reg::readString(char*, char*, char*, int)+0x51>
c0011842:	39 c2                	cmp    edx,eax
c0011844:	7e 0b                	jle    c0011851 <Reg::readString(char*, char*, char*, int)+0x51>
c0011846:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011849:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001184e:	40                   	inc    eax
c001184f:	eb ea                	jmp    c001183b <Reg::readString(char*, char*, char*, int)+0x3b>
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	53                   	push   ebx
c0011855:	e8 e6 ec fe ff       	call   c0000540 <strlen>
c001185a:	83 c4 10             	add    esp,0x10
c001185d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011862:	75 11                	jne    c0011875 <Reg::readString(char*, char*, char*, int)+0x75>
c0011864:	83 ec 0c             	sub    esp,0xc
c0011867:	53                   	push   ebx
c0011868:	e8 d3 ec fe ff       	call   c0000540 <strlen>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011875:	81 c4 d0 00 00 00    	add    esp,0xd0
c001187b:	89 f0                	mov    eax,esi
c001187d:	5b                   	pop    ebx
c001187e:	5e                   	pop    esi
c001187f:	5f                   	pop    edi
c0011880:	c3                   	ret    

c0011881 <Reg::readBool(char*, char*, bool*)>:
c0011881:	83 ec 20             	sub    esp,0x20
c0011884:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011888:	50                   	push   eax
c0011889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001188d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011891:	e8 7f fe ff ff       	call   c0011715 <Reg::readInt(char*, char*, int*)>
c0011896:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001189b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001189f:	0f 95 02             	setne  BYTE PTR [edx]
c00118a2:	83 c4 2c             	add    esp,0x2c
c00118a5:	c3                   	ret    

c00118a6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118a6:	53                   	push   ebx
c00118a7:	83 ec 1c             	sub    esp,0x1c
c00118aa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118ae:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118b2:	50                   	push   eax
c00118b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118bb:	e8 c1 ff ff ff       	call   c0011881 <Reg::readBool(char*, char*, bool*)>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	84 c0                	test   al,al
c00118c5:	74 04                	je     c00118cb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118c7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118cb:	88 d8                	mov    al,bl
c00118cd:	83 c4 18             	add    esp,0x18
c00118d0:	5b                   	pop    ebx
c00118d1:	c3                   	ret    

c00118d2 <Reg::readIntWithDefault(char*, char*, int)>:
c00118d2:	53                   	push   ebx
c00118d3:	83 ec 1c             	sub    esp,0x1c
c00118d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00118da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118de:	50                   	push   eax
c00118df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e7:	e8 29 fe ff ff       	call   c0011715 <Reg::readInt(char*, char*, int*)>
c00118ec:	83 c4 10             	add    esp,0x10
c00118ef:	84 c0                	test   al,al
c00118f1:	74 04                	je     c00118f7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00118f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118f7:	89 d8                	mov    eax,ebx
c00118f9:	83 c4 18             	add    esp,0x18
c00118fc:	5b                   	pop    ebx
c00118fd:	c3                   	ret    

c00118fe <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00118fe:	57                   	push   edi
c00118ff:	56                   	push   esi
c0011900:	56                   	push   esi
c0011901:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011905:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011909:	56                   	push   esi
c001190a:	57                   	push   edi
c001190b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011913:	e8 e8 fe ff ff       	call   c0011800 <Reg::readString(char*, char*, char*, int)>
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	84 c0                	test   al,al
c001191d:	75 1a                	jne    c0011939 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001191f:	51                   	push   ecx
c0011920:	56                   	push   esi
c0011921:	6a 00                	push   0x0
c0011923:	57                   	push   edi
c0011924:	e8 a7 eb fe ff       	call   c00004d0 <memset>
c0011929:	8d 4e ff             	lea    ecx,[esi-0x1]
c001192c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011930:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011939:	89 f8                	mov    eax,edi
c001193b:	5a                   	pop    edx
c001193c:	5e                   	pop    esi
c001193d:	5f                   	pop    edi
c001193e:	c3                   	ret    

c001193f <SysEject(regs*)>:
c001193f:	83 ec 0c             	sub    esp,0xc
c0011942:	83 ca ff             	or     edx,0xffffffff
c0011945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011949:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001194c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011951:	83 e9 41             	sub    ecx,0x41
c0011954:	83 f9 19             	cmp    ecx,0x19
c0011957:	77 18                	ja     c0011971 <SysEject(regs*)+0x32>
c0011959:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011960:	85 c9                	test   ecx,ecx
c0011962:	74 0d                	je     c0011971 <SysEject(regs*)+0x32>
c0011964:	83 ec 0c             	sub    esp,0xc
c0011967:	51                   	push   ecx
c0011968:	e8 5d b2 ff ff       	call   c000cbca <LogicalDisk::eject()>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	99                   	cdq    
c0011971:	83 c4 0c             	add    esp,0xc
c0011974:	c3                   	ret    

c0011975 <SysExit(regs*)>:
c0011975:	83 ec 18             	sub    esp,0x18
c0011978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001197c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001197f:	e8 24 27 00 00       	call   c00140a8 <terminateTask(int)>
c0011984:	83 c8 ff             	or     eax,0xffffffff
c0011987:	83 c4 1c             	add    esp,0x1c
c001198a:	89 c2                	mov    edx,eax
c001198c:	c3                   	ret    

c001198d <SysGetCwd(regs*)>:
c001198d:	83 ec 10             	sub    esp,0x10
c0011990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011994:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011997:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001199a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001199f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119a2:	e8 df 8e ff ff       	call   c000a886 <Fs::getcwd(Process*, char*, int)>
c00119a7:	83 c4 1c             	add    esp,0x1c
c00119aa:	99                   	cdq    
c00119ab:	c3                   	ret    

c00119ac <SysGetPID(regs*)>:
c00119ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b6:	99                   	cdq    
c00119b7:	c3                   	ret    

c00119b8 <SysGetRAMData(regs*)>:
c00119b8:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c00119be:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c00119c8:	99                   	cdq    
c00119c9:	f7 f9                	idiv   ecx
c00119cb:	c1 e0 18             	shl    eax,0x18
c00119ce:	09 c8                	or     eax,ecx
c00119d0:	99                   	cdq    
c00119d1:	c3                   	ret    

c00119d2 <SysGetVGAPtr(regs*)>:
c00119d2:	55                   	push   ebp
c00119d3:	57                   	push   edi
c00119d4:	56                   	push   esi
c00119d5:	53                   	push   ebx
c00119d6:	83 ec 18             	sub    esp,0x18
c00119d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00119e0:	e8 c3 21 00 00       	call   c0013ba8 <Thr::processFromPID(int)>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	89 c1                	mov    ecx,eax
c00119ea:	b8 01 00 00 00       	mov    eax,0x1
c00119ef:	85 c9                	test   ecx,ecx
c00119f1:	74 57                	je     c0011a4a <SysGetVGAPtr(regs*)+0x78>
c00119f3:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00119f9:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00119fd:	74 0c                	je     c0011a0b <SysGetVGAPtr(regs*)+0x39>
c00119ff:	83 ec 0c             	sub    esp,0xc
c0011a02:	55                   	push   ebp
c0011a03:	e8 ef 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a0e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a11:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a18:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a1e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a27:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a2a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a30:	50                   	push   eax
c0011a31:	50                   	push   eax
c0011a32:	68 f6 e8 01 c0       	push   0xc001e8f6
c0011a37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a3a:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a3f:	50                   	push   eax
c0011a40:	e8 bb eb fe ff       	call   c0000600 <strcpy>
c0011a45:	83 c4 10             	add    esp,0x10
c0011a48:	31 c0                	xor    eax,eax
c0011a4a:	83 c4 0c             	add    esp,0xc
c0011a4d:	31 d2                	xor    edx,edx
c0011a4f:	5b                   	pop    ebx
c0011a50:	5e                   	pop    esi
c0011a51:	5f                   	pop    edi
c0011a52:	5d                   	pop    ebp
c0011a53:	c3                   	ret    

c0011a54 <SysLoadDLL(regs*)>:
c0011a54:	56                   	push   esi
c0011a55:	53                   	push   ebx
c0011a56:	31 d2                	xor    edx,edx
c0011a58:	51                   	push   ecx
c0011a59:	b8 01 00 00 00       	mov    eax,0x1
c0011a5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a62:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a66:	0f 84 8c 00 00 00    	je     c0011af8 <SysLoadDLL(regs*)+0xa4>
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	68 14 01 00 00       	push   0x114
c0011a74:	e8 40 5d ff ff       	call   c00077b9 <malloc>
c0011a79:	83 c4 0c             	add    esp,0xc
c0011a7c:	89 c3                	mov    ebx,eax
c0011a7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a83:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a86:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011a89:	53                   	push   ebx
c0011a8a:	e8 f5 8f ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0011a8f:	83 c4 10             	add    esp,0x10
c0011a92:	31 d2                	xor    edx,edx
c0011a94:	b8 02 00 00 00       	mov    eax,0x2
c0011a99:	85 db                	test   ebx,ebx
c0011a9b:	74 5b                	je     c0011af8 <SysLoadDLL(regs*)+0xa4>
c0011a9d:	83 ec 0c             	sub    esp,0xc
c0011aa0:	53                   	push   ebx
c0011aa1:	e8 0c 93 ff ff       	call   c000adb2 <File::exists()>
c0011aa6:	83 c4 10             	add    esp,0x10
c0011aa9:	84 c0                	test   al,al
c0011aab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aad:	75 11                	jne    c0011ac0 <SysLoadDLL(regs*)+0x6c>
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	53                   	push   ebx
c0011ab3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	b8 03 00 00 00       	mov    eax,0x3
c0011abe:	eb 36                	jmp    c0011af6 <SysLoadDLL(regs*)+0xa2>
c0011ac0:	83 ec 0c             	sub    esp,0xc
c0011ac3:	53                   	push   ebx
c0011ac4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ac7:	58                   	pop    eax
c0011ac8:	5a                   	pop    edx
c0011ac9:	6a 00                	push   0x0
c0011acb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ace:	e8 86 12 00 00       	call   c0012d59 <Thr::loadDLL(char const*, bool)>
c0011ad3:	83 c4 10             	add    esp,0x10
c0011ad6:	89 c1                	mov    ecx,eax
c0011ad8:	31 d2                	xor    edx,edx
c0011ada:	b8 04 00 00 00       	mov    eax,0x4
c0011adf:	85 c9                	test   ecx,ecx
c0011ae1:	74 15                	je     c0011af8 <SysLoadDLL(regs*)+0xa4>
c0011ae3:	53                   	push   ebx
c0011ae4:	53                   	push   ebx
c0011ae5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011aeb:	51                   	push   ecx
c0011aec:	e8 99 14 00 00       	call   c0012f8a <Thr::executeDLL(unsigned long, void*)>
c0011af1:	83 c4 10             	add    esp,0x10
c0011af4:	31 c0                	xor    eax,eax
c0011af6:	31 d2                	xor    edx,edx
c0011af8:	59                   	pop    ecx
c0011af9:	5b                   	pop    ebx
c0011afa:	5e                   	pop    esi
c0011afb:	c3                   	ret    

c0011afc <SysRead(regs*)>:
c0011afc:	57                   	push   edi
c0011afd:	56                   	push   esi
c0011afe:	53                   	push   ebx
c0011aff:	83 ec 10             	sub    esp,0x10
c0011b02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b09:	83 f8 02             	cmp    eax,0x2
c0011b0c:	77 10                	ja     c0011b1e <SysRead(regs*)+0x22>
c0011b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b16:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b1c:	eb 0e                	jmp    c0011b2c <SysRead(regs*)+0x30>
c0011b1e:	83 ec 0c             	sub    esp,0xc
c0011b21:	50                   	push   eax
c0011b22:	e8 08 76 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b27:	83 c4 10             	add    esp,0x10
c0011b2a:	89 c1                	mov    ecx,eax
c0011b2c:	83 c8 ff             	or     eax,0xffffffff
c0011b2f:	85 c9                	test   ecx,ecx
c0011b31:	89 c2                	mov    edx,eax
c0011b33:	74 28                	je     c0011b5d <SysRead(regs*)+0x61>
c0011b35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b3d:	31 ff                	xor    edi,edi
c0011b3f:	83 ec 0c             	sub    esp,0xc
c0011b42:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b44:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b48:	52                   	push   edx
c0011b49:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b4c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b4f:	57                   	push   edi
c0011b50:	56                   	push   esi
c0011b51:	51                   	push   ecx
c0011b52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b59:	83 c4 20             	add    esp,0x20
c0011b5c:	99                   	cdq    
c0011b5d:	83 c4 10             	add    esp,0x10
c0011b60:	5b                   	pop    ebx
c0011b61:	5e                   	pop    esi
c0011b62:	5f                   	pop    edi
c0011b63:	c3                   	ret    

c0011b64 <SysRegisterSignal(regs*)>:
c0011b64:	83 ec 18             	sub    esp,0x18
c0011b67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b6b:	6a 00                	push   0x0
c0011b6d:	6a 00                	push   0x0
c0011b6f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b72:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b7d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b83:	e8 bd e9 ff ff       	call   c0010545 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011b88:	83 c4 2c             	add    esp,0x2c
c0011b8b:	99                   	cdq    
c0011b8c:	c3                   	ret    

c0011b8d <SysSbrk(regs*)>:
c0011b8d:	56                   	push   esi
c0011b8e:	53                   	push   ebx
c0011b8f:	83 ec 0c             	sub    esp,0xc
c0011b92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b96:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011b99:	68 00 e9 01 c0       	push   0xc001e900
c0011b9e:	e8 6c 89 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0011ba3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba8:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011bab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bae:	83 c4 10             	add    esp,0x10
c0011bb1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bb7:	85 db                	test   ebx,ebx
c0011bb9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bbc:	74 02                	je     c0011bc0 <SysSbrk(regs*)+0x33>
c0011bbe:	79 06                	jns    c0011bc6 <SysSbrk(regs*)+0x39>
c0011bc0:	89 f0                	mov    eax,esi
c0011bc2:	31 d2                	xor    edx,edx
c0011bc4:	eb 2a                	jmp    c0011bf0 <SysSbrk(regs*)+0x63>
c0011bc6:	83 c8 ff             	or     eax,0xffffffff
c0011bc9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011bcf:	89 c2                	mov    edx,eax
c0011bd1:	77 1d                	ja     c0011bf0 <SysSbrk(regs*)+0x63>
c0011bd3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011bd9:	50                   	push   eax
c0011bda:	c1 ea 0c             	shr    edx,0xc
c0011bdd:	68 07 0c 00 00       	push   0xc07
c0011be2:	52                   	push   edx
c0011be3:	51                   	push   ecx
c0011be4:	e8 35 7e ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0011be9:	89 f0                	mov    eax,esi
c0011beb:	31 d2                	xor    edx,edx
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	59                   	pop    ecx
c0011bf1:	5b                   	pop    ebx
c0011bf2:	5e                   	pop    esi
c0011bf3:	c3                   	ret    

c0011bf4 <SysSetCwd(regs*)>:
c0011bf4:	83 ec 14             	sub    esp,0x14
c0011bf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bfb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c03:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c06:	e8 46 92 ff ff       	call   c000ae51 <Fs::setcwd(Process*, char*)>
c0011c0b:	83 c4 1c             	add    esp,0x1c
c0011c0e:	99                   	cdq    
c0011c0f:	c3                   	ret    

c0011c10 <SysSetTime(regs*)>:
c0011c10:	55                   	push   ebp
c0011c11:	31 c9                	xor    ecx,ecx
c0011c13:	57                   	push   edi
c0011c14:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c19:	56                   	push   esi
c0011c1a:	53                   	push   ebx
c0011c1b:	31 db                	xor    ebx,ebx
c0011c1d:	83 ec 10             	sub    esp,0x10
c0011c20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c24:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c27:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c2a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c2d:	89 c2                	mov    edx,eax
c0011c2f:	66 81 ef 6c 07       	sub    di,0x76c
c0011c34:	83 e2 1f             	and    edx,0x1f
c0011c37:	c1 e7 10             	shl    edi,0x10
c0011c3a:	42                   	inc    edx
c0011c3b:	c1 e8 05             	shr    eax,0x5
c0011c3e:	88 d1                	mov    cl,dl
c0011c40:	31 d2                	xor    edx,edx
c0011c42:	f7 f5                	div    ebp
c0011c44:	89 dd                	mov    ebp,ebx
c0011c46:	88 d5                	mov    ch,dl
c0011c48:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c4e:	0f b7 c1             	movzx  eax,cx
c0011c51:	31 d2                	xor    edx,edx
c0011c53:	09 f8                	or     eax,edi
c0011c55:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c5a:	89 c1                	mov    ecx,eax
c0011c5c:	89 f0                	mov    eax,esi
c0011c5e:	f7 f7                	div    edi
c0011c60:	c1 e2 10             	shl    edx,0x10
c0011c63:	09 d5                	or     ebp,edx
c0011c65:	31 d2                	xor    edx,edx
c0011c67:	89 eb                	mov    ebx,ebp
c0011c69:	f7 f7                	div    edi
c0011c6b:	bf 10 0e 00 00       	mov    edi,0xe10
c0011c70:	88 d7                	mov    bh,dl
c0011c72:	89 f0                	mov    eax,esi
c0011c74:	31 d2                	xor    edx,edx
c0011c76:	f7 f7                	div    edi
c0011c78:	bf 18 00 00 00       	mov    edi,0x18
c0011c7d:	31 d2                	xor    edx,edx
c0011c7f:	f7 f7                	div    edi
c0011c81:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011c86:	88 d3                	mov    bl,dl
c0011c88:	53                   	push   ebx
c0011c89:	51                   	push   ecx
c0011c8a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011c90:	e8 cb 99 ff ff       	call   c000b660 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011c95:	83 c4 1c             	add    esp,0x1c
c0011c98:	83 f0 01             	xor    eax,0x1
c0011c9b:	5b                   	pop    ebx
c0011c9c:	0f b6 c0             	movzx  eax,al
c0011c9f:	5e                   	pop    esi
c0011ca0:	31 d2                	xor    edx,edx
c0011ca2:	5f                   	pop    edi
c0011ca3:	5d                   	pop    ebp
c0011ca4:	c3                   	ret    

c0011ca5 <SysTimezone(regs*)>:
c0011ca5:	53                   	push   ebx
c0011ca6:	83 ec 08             	sub    esp,0x8
c0011ca9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cad:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cb1:	75 17                	jne    c0011cca <SysTimezone(regs*)+0x25>
c0011cb3:	83 ec 0c             	sub    esp,0xc
c0011cb6:	68 0c e9 01 c0       	push   0xc001e90c
c0011cbb:	e8 4f 88 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0011cc0:	83 c8 ff             	or     eax,0xffffffff
c0011cc3:	83 c4 10             	add    esp,0x10
c0011cc6:	89 c2                	mov    edx,eax
c0011cc8:	eb 20                	jmp    c0011cea <SysTimezone(regs*)+0x45>
c0011cca:	83 ec 0c             	sub    esp,0xc
c0011ccd:	68 21 e9 01 c0       	push   0xc001e921
c0011cd2:	e8 38 88 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0011cd7:	58                   	pop    eax
c0011cd8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011cdb:	e8 dc 96 ff ff       	call   c000b3bc <User::loadClockSettings(int)>
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	b8 01 00 00 00       	mov    eax,0x1
c0011ce8:	31 d2                	xor    edx,edx
c0011cea:	83 c4 08             	add    esp,0x8
c0011ced:	5b                   	pop    ebx
c0011cee:	c3                   	ret    

c0011cef <SysWrite(regs*)>:
c0011cef:	57                   	push   edi
c0011cf0:	56                   	push   esi
c0011cf1:	53                   	push   ebx
c0011cf2:	83 ec 10             	sub    esp,0x10
c0011cf5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cf9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cfc:	83 f8 02             	cmp    eax,0x2
c0011cff:	77 10                	ja     c0011d11 <SysWrite(regs*)+0x22>
c0011d01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d09:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d0f:	eb 0e                	jmp    c0011d1f <SysWrite(regs*)+0x30>
c0011d11:	83 ec 0c             	sub    esp,0xc
c0011d14:	50                   	push   eax
c0011d15:	e8 15 74 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d1a:	83 c4 10             	add    esp,0x10
c0011d1d:	89 c1                	mov    ecx,eax
c0011d1f:	83 c8 ff             	or     eax,0xffffffff
c0011d22:	85 c9                	test   ecx,ecx
c0011d24:	89 c2                	mov    edx,eax
c0011d26:	74 28                	je     c0011d50 <SysWrite(regs*)+0x61>
c0011d28:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d30:	31 ff                	xor    edi,edi
c0011d32:	83 ec 0c             	sub    esp,0xc
c0011d35:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d37:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d3b:	52                   	push   edx
c0011d3c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d3f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d42:	57                   	push   edi
c0011d43:	56                   	push   esi
c0011d44:	51                   	push   ecx
c0011d45:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d4c:	83 c4 20             	add    esp,0x20
c0011d4f:	99                   	cdq    
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	5b                   	pop    ebx
c0011d54:	5e                   	pop    esi
c0011d55:	5f                   	pop    edi
c0011d56:	c3                   	ret    

c0011d57 <SysWsbe(regs*)>:
c0011d57:	57                   	push   edi
c0011d58:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d5d:	56                   	push   esi
c0011d5e:	be 60 e9 01 c0       	mov    esi,0xc001e960
c0011d63:	53                   	push   ebx
c0011d64:	83 ec 30             	sub    esp,0x30
c0011d67:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d6b:	fc                   	cld    
c0011d6c:	83 ec 0c             	sub    esp,0xc
c0011d6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011d71:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011d75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d7d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011d83:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d85:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011d88:	57                   	push   edi
c0011d89:	e8 b2 e7 fe ff       	call   c0000540 <strlen>
c0011d8e:	5a                   	pop    edx
c0011d8f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011d93:	52                   	push   edx
c0011d94:	31 d2                	xor    edx,edx
c0011d96:	57                   	push   edi
c0011d97:	52                   	push   edx
c0011d98:	50                   	push   eax
c0011d99:	56                   	push   esi
c0011d9a:	ff d3                	call   ebx
c0011d9c:	83 c4 14             	add    esp,0x14
c0011d9f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011da3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011da6:	e8 fd 22 00 00       	call   c00140a8 <terminateTask(int)>
c0011dab:	83 c4 40             	add    esp,0x40
c0011dae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011db3:	5b                   	pop    ebx
c0011db4:	31 d2                	xor    edx,edx
c0011db6:	5e                   	pop    esi
c0011db7:	5f                   	pop    edi
c0011db8:	c3                   	ret    

c0011db9 <SysYield(regs*)>:
c0011db9:	83 ec 0c             	sub    esp,0xc
c0011dbc:	fa                   	cli    
c0011dbd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011dc3:	e8 bc 19 00 00       	call   c0013784 <schedule()>
c0011dc8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011dcd:	48                   	dec    eax
c0011dce:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011dd3:	75 01                	jne    c0011dd6 <SysYield(regs*)+0x1d>
c0011dd5:	fb                   	sti    
c0011dd6:	31 c0                	xor    eax,eax
c0011dd8:	31 d2                	xor    edx,edx
c0011dda:	83 c4 0c             	add    esp,0xc
c0011ddd:	c3                   	ret    

c0011dde <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011dde:	55                   	push   ebp
c0011ddf:	57                   	push   edi
c0011de0:	56                   	push   esi
c0011de1:	53                   	push   ebx
c0011de2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011de8:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011df0:	0f 95 c2             	setne  dl
c0011df3:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011dfb:	0f 94 c0             	sete   al
c0011dfe:	84 c2                	test   dl,al
c0011e00:	74 34                	je     c0011e36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e02:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e0d:	74 27                	je     c0011e36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e0f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e16:	05 00 10 00 00       	add    eax,0x1000
c0011e1b:	89 c1                	mov    ecx,eax
c0011e1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e22:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e28:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e2f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e36:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e3d:	83 ec 0c             	sub    esp,0xc
c0011e40:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e46:	6a 01                	push   0x1
c0011e48:	e8 38 74 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011e4d:	83 c4 10             	add    esp,0x10
c0011e50:	89 c3                	mov    ebx,eax
c0011e52:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e58:	0f 86 25 01 00 00    	jbe    c0011f83 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e5e:	c1 ee 0c             	shr    esi,0xc
c0011e61:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e68:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011e74:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011e7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e7f:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011e86:	29 ef                	sub    edi,ebp
c0011e88:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011e8c:	0f 83 f8 00 00 00    	jae    c0011f8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011e92:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011e98:	76 05                	jbe    c0011e9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011e9a:	bf 00 10 00 00       	mov    edi,0x1000
c0011e9f:	83 ec 0c             	sub    esp,0xc
c0011ea2:	31 d2                	xor    edx,edx
c0011ea4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011eab:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ead:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011eb1:	50                   	push   eax
c0011eb2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011eb6:	56                   	push   esi
c0011eb7:	52                   	push   edx
c0011eb8:	57                   	push   edi
c0011eb9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ec0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ec3:	83 c4 20             	add    esp,0x20
c0011ec6:	85 c0                	test   eax,eax
c0011ec8:	75 06                	jne    c0011ed0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011eca:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011ece:	74 13                	je     c0011ee3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011ed0:	83 ec 0c             	sub    esp,0xc
c0011ed3:	53                   	push   ebx
c0011ed4:	e8 dc 76 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	31 c0                	xor    eax,eax
c0011ede:	e9 7c 01 00 00       	jmp    c001205f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011ee3:	fa                   	cli    
c0011ee4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011eea:	e8 a6 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011eef:	6a 07                	push   0x7
c0011ef1:	89 c7                	mov    edi,eax
c0011ef3:	53                   	push   ebx
c0011ef4:	50                   	push   eax
c0011ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011efa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011efd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f03:	e8 12 7a ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f08:	83 c4 0c             	add    esp,0xc
c0011f0b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f12:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f18:	6a 00                	push   0x0
c0011f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f22:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f28:	e8 5f 78 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011f2d:	58                   	pop    eax
c0011f2e:	5a                   	pop    edx
c0011f2f:	68 07 0c 00 00       	push   0xc07
c0011f34:	55                   	push   ebp
c0011f35:	57                   	push   edi
c0011f36:	89 df                	mov    edi,ebx
c0011f38:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f3f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f45:	6a 00                	push   0x0
c0011f47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f4f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f55:	e8 80 7d ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f5a:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f61:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011f66:	83 c4 20             	add    esp,0x20
c0011f69:	48                   	dec    eax
c0011f6a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011f6f:	85 c0                	test   eax,eax
c0011f71:	75 01                	jne    c0011f74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011f73:	fb                   	sti    
c0011f74:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011f7a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011f7e:	e9 f1 fe ff ff       	jmp    c0011e74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011f83:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f8a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f91:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011f97:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011f9d:	0f 86 ae 00 00 00    	jbe    c0012051 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fa3:	fa                   	cli    
c0011fa4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011faa:	c1 ee 0c             	shr    esi,0xc
c0011fad:	51                   	push   ecx
c0011fae:	31 ff                	xor    edi,edi
c0011fb0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fb7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fbd:	6a 00                	push   0x0
c0011fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fc7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fcd:	e8 ba 77 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	e8 bb 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011fda:	47                   	inc    edi
c0011fdb:	6a 07                	push   0x7
c0011fdd:	53                   	push   ebx
c0011fde:	50                   	push   eax
c0011fdf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fe3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011fe9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011fec:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011ff2:	e8 23 79 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ff7:	58                   	pop    eax
c0011ff8:	5a                   	pop    edx
c0011ff9:	68 07 0c 00 00       	push   0xc07
c0011ffe:	55                   	push   ebp
c0011fff:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012009:	50                   	push   eax
c001200a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012011:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012017:	6a 00                	push   0x0
c0012019:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001201e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012021:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012027:	e8 ae 7c ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001202c:	83 c4 1c             	add    esp,0x1c
c001202f:	68 00 10 00 00       	push   0x1000
c0012034:	6a 00                	push   0x0
c0012036:	53                   	push   ebx
c0012037:	e8 94 e4 fe ff       	call   c00004d0 <memset>
c001203c:	83 c4 10             	add    esp,0x10
c001203f:	39 fe                	cmp    esi,edi
c0012041:	77 92                	ja     c0011fd5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012043:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012048:	48                   	dec    eax
c0012049:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001204e:	75 01                	jne    c0012051 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012050:	fb                   	sti    
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	53                   	push   ebx
c0012055:	e8 5b 75 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001205a:	83 c4 10             	add    esp,0x10
c001205d:	b0 01                	mov    al,0x1
c001205f:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012065:	5b                   	pop    ebx
c0012066:	5e                   	pop    esi
c0012067:	5f                   	pop    edi
c0012068:	5d                   	pop    ebp
c0012069:	c3                   	ret    

c001206a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001206a:	55                   	push   ebp
c001206b:	57                   	push   edi
c001206c:	56                   	push   esi
c001206d:	53                   	push   ebx
c001206e:	83 ec 48             	sub    esp,0x48
c0012071:	68 14 01 00 00       	push   0x114
c0012076:	e8 3e 57 ff ff       	call   c00077b9 <malloc>
c001207b:	83 c4 0c             	add    esp,0xc
c001207e:	89 c6                	mov    esi,eax
c0012080:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012084:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012088:	50                   	push   eax
c0012089:	e8 f6 89 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c001208e:	58                   	pop    eax
c001208f:	5a                   	pop    edx
c0012090:	6a 01                	push   0x1
c0012092:	56                   	push   esi
c0012093:	e8 ac 8a ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	85 c0                	test   eax,eax
c001209d:	0f 85 47 01 00 00    	jne    c00121ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	6a 34                	push   0x34
c00120b0:	e8 04 57 ff ff       	call   c00077b9 <malloc>
c00120b5:	89 c3                	mov    ebx,eax
c00120b7:	58                   	pop    eax
c00120b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00120ba:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120be:	57                   	push   edi
c00120bf:	53                   	push   ebx
c00120c0:	6a 00                	push   0x0
c00120c2:	6a 34                	push   0x34
c00120c4:	56                   	push   esi
c00120c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120c8:	83 c4 20             	add    esp,0x20
c00120cb:	85 c0                	test   eax,eax
c00120cd:	0f 85 17 01 00 00    	jne    c00121ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120d3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00120d9:	0f 85 0b 01 00 00    	jne    c00121ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120e2:	85 c0                	test   eax,eax
c00120e4:	0f 84 00 01 00 00    	je     c00121ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120ea:	31 d2                	xor    edx,edx
c00120ec:	55                   	push   ebp
c00120ed:	52                   	push   edx
c00120ee:	50                   	push   eax
c00120ef:	56                   	push   esi
c00120f0:	e8 0d 8b ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	85 c0                	test   eax,eax
c00120fa:	0f 85 ea 00 00 00    	jne    c00121ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012100:	83 ec 0c             	sub    esp,0xc
c0012103:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012106:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001210a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001210e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012112:	0f af c2             	imul   eax,edx
c0012115:	50                   	push   eax
c0012116:	e8 9e 56 ff ff       	call   c00077b9 <malloc>
c001211b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001211d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012121:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012124:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012128:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001212c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012130:	0f af c2             	imul   eax,edx
c0012133:	99                   	cdq    
c0012134:	52                   	push   edx
c0012135:	50                   	push   eax
c0012136:	56                   	push   esi
c0012137:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001213a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001213d:	83 c4 20             	add    esp,0x20
c0012140:	85 c0                	test   eax,eax
c0012142:	0f 84 a2 00 00 00    	je     c00121ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012148:	31 d2                	xor    edx,edx
c001214a:	51                   	push   ecx
c001214b:	52                   	push   edx
c001214c:	50                   	push   eax
c001214d:	56                   	push   esi
c001214e:	e8 af 8a ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012153:	83 c4 10             	add    esp,0x10
c0012156:	85 c0                	test   eax,eax
c0012158:	0f 85 8c 00 00 00    	jne    c00121ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001215e:	83 ec 0c             	sub    esp,0xc
c0012161:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012165:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012169:	31 ed                	xor    ebp,ebp
c001216b:	0f af c2             	imul   eax,edx
c001216e:	50                   	push   eax
c001216f:	e8 45 56 ff ff       	call   c00077b9 <malloc>
c0012174:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012176:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001217a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001217d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012181:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012185:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012189:	0f af c2             	imul   eax,edx
c001218c:	99                   	cdq    
c001218d:	52                   	push   edx
c001218e:	50                   	push   eax
c001218f:	56                   	push   esi
c0012190:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012193:	83 c4 20             	add    esp,0x20
c0012196:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001219e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121a2:	0f 86 80 00 00 00    	jbe    c0012228 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121a8:	0f b7 fd             	movzx  edi,bp
c00121ab:	c1 e7 05             	shl    edi,0x5
c00121ae:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121b2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121b5:	75 6b                	jne    c0012222 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121b7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121be:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121c5:	52                   	push   edx
c00121c6:	31 d2                	xor    edx,edx
c00121c8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121cb:	52                   	push   edx
c00121cc:	50                   	push   eax
c00121cd:	56                   	push   esi
c00121ce:	e8 2f 8a ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c00121d3:	83 c4 10             	add    esp,0x10
c00121d6:	85 c0                	test   eax,eax
c00121d8:	74 17                	je     c00121f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00121da:	83 ec 0c             	sub    esp,0xc
c00121dd:	68 8c e9 01 c0       	push   0xc001e98c
c00121e2:	e8 28 83 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00121e7:	83 c4 10             	add    esp,0x10
c00121ea:	31 c0                	xor    eax,eax
c00121ec:	e9 87 00 00 00       	jmp    c0012278 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00121f1:	83 ec 0c             	sub    esp,0xc
c00121f4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00121f7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00121fa:	50                   	push   eax
c00121fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00121ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012203:	56                   	push   esi
c0012204:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012208:	e8 d1 fb ff ff       	call   c0011dde <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001220d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012211:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012215:	83 c4 20             	add    esp,0x20
c0012218:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001221c:	73 04                	jae    c0012222 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001221e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012222:	45                   	inc    ebp
c0012223:	e9 76 ff ff ff       	jmp    c001219e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012228:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001222c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012230:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012234:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001223a:	83 ec 0c             	sub    esp,0xc
c001223d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012243:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012248:	05 00 10 00 00       	add    eax,0x1000
c001224d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012254:	e8 70 55 ff ff       	call   c00077c9 <free>
c0012259:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001225c:	e8 68 55 ff ff       	call   c00077c9 <free>
c0012261:	58                   	pop    eax
c0012262:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012266:	e8 5e 55 ff ff       	call   c00077c9 <free>
c001226b:	89 34 24             	mov    DWORD PTR [esp],esi
c001226e:	e8 2f 89 ff ff       	call   c000aba2 <File::close()>
c0012273:	83 c4 10             	add    esp,0x10
c0012276:	b0 01                	mov    al,0x1
c0012278:	83 c4 3c             	add    esp,0x3c
c001227b:	5b                   	pop    ebx
c001227c:	5e                   	pop    esi
c001227d:	5f                   	pop    edi
c001227e:	5d                   	pop    ebp
c001227f:	c3                   	ret    

c0012280 <Thr::runtimeReferenceHelper()>:
c0012280:	83 ec 18             	sub    esp,0x18
c0012283:	68 94 e9 01 c0       	push   0xc001e994
c0012288:	e8 82 82 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001228d:	fa                   	cli    
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	eb fe                	jmp    c0012291 <Thr::runtimeReferenceHelper()+0x11>

c0012293 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012293:	57                   	push   edi
c0012294:	56                   	push   esi
c0012295:	53                   	push   ebx
c0012296:	31 db                	xor    ebx,ebx
c0012298:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c001229e:	7e 3c                	jle    c00122dc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122a0:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c00122a7:	31 ff                	xor    edi,edi
c00122a9:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c00122b0:	7e 27                	jle    c00122d9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122b2:	50                   	push   eax
c00122b3:	50                   	push   eax
c00122b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00122ba:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00122c1:	50                   	push   eax
c00122c2:	e8 19 e4 fe ff       	call   c00006e0 <strcmp>
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	85 c0                	test   eax,eax
c00122cc:	75 05                	jne    c00122d3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00122d1:	eb 0b                	jmp    c00122de <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00122d3:	83 c6 10             	add    esi,0x10
c00122d6:	47                   	inc    edi
c00122d7:	eb d0                	jmp    c00122a9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00122d9:	43                   	inc    ebx
c00122da:	eb bc                	jmp    c0012298 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00122dc:	31 c0                	xor    eax,eax
c00122de:	5b                   	pop    ebx
c00122df:	5e                   	pop    esi
c00122e0:	5f                   	pop    edi
c00122e1:	c3                   	ret    

c00122e2 <Thr::loadKernelSymbolTable(char const*)>:
c00122e2:	55                   	push   ebp
c00122e3:	57                   	push   edi
c00122e4:	56                   	push   esi
c00122e5:	53                   	push   ebx
c00122e6:	83 ec 68             	sub    esp,0x68
c00122e9:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c00122ef:	68 14 01 00 00       	push   0x114
c00122f4:	e8 c0 54 ff ff       	call   c00077b9 <malloc>
c00122f9:	83 c4 0c             	add    esp,0xc
c00122fc:	89 c3                	mov    ebx,eax
c00122fe:	56                   	push   esi
c00122ff:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012303:	50                   	push   eax
c0012304:	e8 7b 87 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0012309:	5e                   	pop    esi
c001230a:	5f                   	pop    edi
c001230b:	6a 01                	push   0x1
c001230d:	53                   	push   ebx
c001230e:	e8 31 88 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c0012313:	83 c4 10             	add    esp,0x10
c0012316:	85 c0                	test   eax,eax
c0012318:	74 0a                	je     c0012324 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001231a:	83 ec 0c             	sub    esp,0xc
c001231d:	68 b6 e9 01 c0       	push   0xc001e9b6
c0012322:	eb 34                	jmp    c0012358 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012324:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001232c:	83 ec 0c             	sub    esp,0xc
c001232f:	6a 34                	push   0x34
c0012331:	e8 83 54 ff ff       	call   c00077b9 <malloc>
c0012336:	59                   	pop    ecx
c0012337:	89 c7                	mov    edi,eax
c0012339:	8d 74 24 34          	lea    esi,[esp+0x34]
c001233d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001233f:	56                   	push   esi
c0012340:	57                   	push   edi
c0012341:	6a 00                	push   0x0
c0012343:	6a 34                	push   0x34
c0012345:	53                   	push   ebx
c0012346:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012349:	83 c4 20             	add    esp,0x20
c001234c:	85 c0                	test   eax,eax
c001234e:	74 17                	je     c0012367 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012350:	83 ec 0c             	sub    esp,0xc
c0012353:	68 cd e9 01 c0       	push   0xc001e9cd
c0012358:	e8 32 de ff ff       	call   c001018f <KePanic(char const*)>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	31 c0                	xor    eax,eax
c0012362:	e9 31 02 00 00       	jmp    c0012598 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012367:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001236d:	75 e1                	jne    c0012350 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001236f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012372:	85 c0                	test   eax,eax
c0012374:	74 da                	je     c0012350 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012376:	52                   	push   edx
c0012377:	31 d2                	xor    edx,edx
c0012379:	52                   	push   edx
c001237a:	50                   	push   eax
c001237b:	53                   	push   ebx
c001237c:	e8 81 88 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	85 c0                	test   eax,eax
c0012386:	75 c8                	jne    c0012350 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012388:	83 ec 0c             	sub    esp,0xc
c001238b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001238f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012393:	31 ed                	xor    ebp,ebp
c0012395:	0f af c2             	imul   eax,edx
c0012398:	50                   	push   eax
c0012399:	e8 1b 54 ff ff       	call   c00077b9 <malloc>
c001239e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00123a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123ab:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123af:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123b3:	0f af c2             	imul   eax,edx
c00123b6:	99                   	cdq    
c00123b7:	52                   	push   edx
c00123b8:	50                   	push   eax
c00123b9:	53                   	push   ebx
c00123ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123bd:	83 c4 20             	add    esp,0x20
c00123c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123c8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00123d0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00123e0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00123e4:	0f 86 aa 00 00 00    	jbe    c0012494 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00123ea:	0f b7 f5             	movzx  esi,bp
c00123ed:	6b f6 28             	imul   esi,esi,0x28
c00123f0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00123f4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00123f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123fb:	50                   	push   eax
c00123fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012400:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012404:	8b 16                	mov    edx,DWORD PTR [esi]
c0012406:	6b c0 28             	imul   eax,eax,0x28
c0012409:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001240d:	89 d0                	mov    eax,edx
c001240f:	31 d2                	xor    edx,edx
c0012411:	52                   	push   edx
c0012412:	50                   	push   eax
c0012413:	53                   	push   ebx
c0012414:	e8 e9 87 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012419:	83 c4 0c             	add    esp,0xc
c001241c:	6a 20                	push   0x20
c001241e:	6a 00                	push   0x0
c0012420:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012424:	52                   	push   edx
c0012425:	e8 a6 e0 fe ff       	call   c00004d0 <memset>
c001242a:	58                   	pop    eax
c001242b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001242d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012431:	51                   	push   ecx
c0012432:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012436:	52                   	push   edx
c0012437:	6a 00                	push   0x0
c0012439:	6a 1f                	push   0x1f
c001243b:	53                   	push   ebx
c001243c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001243f:	83 c4 18             	add    esp,0x18
c0012442:	68 e4 e9 01 c0       	push   0xc001e9e4
c0012447:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001244b:	52                   	push   edx
c001244c:	e8 8f e2 fe ff       	call   c00006e0 <strcmp>
c0012451:	83 c4 10             	add    esp,0x10
c0012454:	85 c0                	test   eax,eax
c0012456:	75 0f                	jne    c0012467 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012458:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001245b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001245f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012467:	50                   	push   eax
c0012468:	50                   	push   eax
c0012469:	68 ec e9 01 c0       	push   0xc001e9ec
c001246e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012472:	50                   	push   eax
c0012473:	e8 68 e2 fe ff       	call   c00006e0 <strcmp>
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	85 c0                	test   eax,eax
c001247d:	75 0f                	jne    c001248e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001247f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012482:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001248a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001248e:	45                   	inc    ebp
c001248f:	e9 4c ff ff ff       	jmp    c00123e0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012494:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012499:	75 10                	jne    c00124ab <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001249b:	83 ec 0c             	sub    esp,0xc
c001249e:	68 f4 e9 01 c0       	push   0xc001e9f4
c00124a3:	e8 e7 dc ff ff       	call   c001018f <KePanic(char const*)>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124b0:	75 10                	jne    c00124c2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124b2:	83 ec 0c             	sub    esp,0xc
c00124b5:	68 f4 e9 01 c0       	push   0xc001e9f4
c00124ba:	e8 d0 dc ff ff       	call   c001018f <KePanic(char const*)>
c00124bf:	83 c4 10             	add    esp,0x10
c00124c2:	31 d2                	xor    edx,edx
c00124c4:	50                   	push   eax
c00124c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c9:	52                   	push   edx
c00124ca:	50                   	push   eax
c00124cb:	53                   	push   ebx
c00124cc:	e8 31 87 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c00124d1:	5a                   	pop    edx
c00124d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124d6:	e8 de 52 ff ff       	call   c00077b9 <malloc>
c00124db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124e3:	31 c9                	xor    ecx,ecx
c00124e5:	5e                   	pop    esi
c00124e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124e8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00124ec:	55                   	push   ebp
c00124ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124f1:	51                   	push   ecx
c00124f2:	52                   	push   edx
c00124f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00124f7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00124fb:	53                   	push   ebx
c00124fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124ff:	83 c4 14             	add    esp,0x14
c0012502:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012506:	e8 ae 52 ff ff       	call   c00077b9 <malloc>
c001250b:	89 c6                	mov    esi,eax
c001250d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001250f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012512:	56                   	push   esi
c0012513:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012517:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001251b:	51                   	push   ecx
c001251c:	52                   	push   edx
c001251d:	53                   	push   ebx
c001251e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012521:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012525:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001252b:	83 c4 1c             	add    esp,0x1c
c001252e:	c1 e8 04             	shr    eax,0x4
c0012531:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c0012538:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001253c:	31 d2                	xor    edx,edx
c001253e:	52                   	push   edx
c001253f:	50                   	push   eax
c0012540:	53                   	push   ebx
c0012541:	e8 bc 86 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012546:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012548:	31 d2                	xor    edx,edx
c001254a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001254d:	56                   	push   esi
c001254e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012552:	52                   	push   edx
c0012553:	50                   	push   eax
c0012554:	53                   	push   ebx
c0012555:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012558:	83 c4 14             	add    esp,0x14
c001255b:	53                   	push   ebx
c001255c:	e8 41 86 ff ff       	call   c000aba2 <File::close()>
c0012561:	5d                   	pop    ebp
c0012562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012566:	e8 5e 52 ff ff       	call   c00077c9 <free>
c001256b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001256e:	e8 56 52 ff ff       	call   c00077c9 <free>
c0012573:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c0012578:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001257c:	8d 50 01             	lea    edx,[eax+0x1]
c001257f:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c0012586:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c001258d:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	b0 01                	mov    al,0x1
c0012598:	83 c4 5c             	add    esp,0x5c
c001259b:	5b                   	pop    ebx
c001259c:	5e                   	pop    esi
c001259d:	5f                   	pop    edi
c001259e:	5d                   	pop    ebp
c001259f:	c3                   	ret    

c00125a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125a0:	55                   	push   ebp
c00125a1:	57                   	push   edi
c00125a2:	56                   	push   esi
c00125a3:	53                   	push   ebx
c00125a4:	81 ec 68 03 00 00    	sub    esp,0x368
c00125aa:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125b1:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c00125b7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125bb:	68 14 01 00 00       	push   0x114
c00125c0:	e8 f4 51 ff ff       	call   c00077b9 <malloc>
c00125c5:	83 c4 0c             	add    esp,0xc
c00125c8:	89 c5                	mov    ebp,eax
c00125ca:	53                   	push   ebx
c00125cb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00125d2:	50                   	push   eax
c00125d3:	e8 ac 84 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c00125d8:	5e                   	pop    esi
c00125d9:	5f                   	pop    edi
c00125da:	6a 01                	push   0x1
c00125dc:	55                   	push   ebp
c00125dd:	e8 62 85 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c00125e2:	83 c4 10             	add    esp,0x10
c00125e5:	85 c0                	test   eax,eax
c00125e7:	0f 85 a7 06 00 00    	jne    c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00125ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00125f5:	83 ec 0c             	sub    esp,0xc
c00125f8:	6a 34                	push   0x34
c00125fa:	e8 ba 51 ff ff       	call   c00077b9 <malloc>
c00125ff:	5b                   	pop    ebx
c0012600:	89 c7                	mov    edi,eax
c0012602:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012606:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012609:	53                   	push   ebx
c001260a:	57                   	push   edi
c001260b:	6a 00                	push   0x0
c001260d:	6a 34                	push   0x34
c001260f:	55                   	push   ebp
c0012610:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012613:	83 c4 20             	add    esp,0x20
c0012616:	85 c0                	test   eax,eax
c0012618:	0f 85 76 06 00 00    	jne    c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001261e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012624:	0f 85 6a 06 00 00    	jne    c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001262a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001262d:	85 c0                	test   eax,eax
c001262f:	0f 84 5f 06 00 00    	je     c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012635:	31 d2                	xor    edx,edx
c0012637:	51                   	push   ecx
c0012638:	52                   	push   edx
c0012639:	50                   	push   eax
c001263a:	55                   	push   ebp
c001263b:	e8 c2 85 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012640:	83 c4 10             	add    esp,0x10
c0012643:	85 c0                	test   eax,eax
c0012645:	0f 85 49 06 00 00    	jne    c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001264b:	83 ec 0c             	sub    esp,0xc
c001264e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012651:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012655:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012659:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001265d:	0f af c2             	imul   eax,edx
c0012660:	50                   	push   eax
c0012661:	e8 53 51 ff ff       	call   c00077b9 <malloc>
c0012666:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012669:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001266d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012674:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012678:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001267c:	0f af c2             	imul   eax,edx
c001267f:	99                   	cdq    
c0012680:	52                   	push   edx
c0012681:	50                   	push   eax
c0012682:	55                   	push   ebp
c0012683:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012686:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012689:	83 c4 20             	add    esp,0x20
c001268c:	85 c0                	test   eax,eax
c001268e:	0f 84 00 06 00 00    	je     c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012694:	52                   	push   edx
c0012695:	31 d2                	xor    edx,edx
c0012697:	52                   	push   edx
c0012698:	50                   	push   eax
c0012699:	55                   	push   ebp
c001269a:	e8 63 85 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c001269f:	83 c4 10             	add    esp,0x10
c00126a2:	85 c0                	test   eax,eax
c00126a4:	0f 85 ea 05 00 00    	jne    c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126aa:	83 ec 0c             	sub    esp,0xc
c00126ad:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126b1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126b5:	31 f6                	xor    esi,esi
c00126b7:	0f af c2             	imul   eax,edx
c00126ba:	50                   	push   eax
c00126bb:	e8 f9 50 ff ff       	call   c00077b9 <malloc>
c00126c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126ce:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126d2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126d6:	0f af c2             	imul   eax,edx
c00126d9:	99                   	cdq    
c00126da:	52                   	push   edx
c00126db:	50                   	push   eax
c00126dc:	55                   	push   ebp
c00126dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126e0:	83 c4 20             	add    esp,0x20
c00126e3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00126e7:	0f 86 8a 00 00 00    	jbe    c0012777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00126ed:	0f b7 de             	movzx  ebx,si
c00126f0:	c1 e3 05             	shl    ebx,0x5
c00126f3:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00126f7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00126fa:	75 75                	jne    c0012771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00126fc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00126ff:	31 d2                	xor    edx,edx
c0012701:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012705:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001270c:	50                   	push   eax
c001270d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012710:	52                   	push   edx
c0012711:	50                   	push   eax
c0012712:	55                   	push   ebp
c0012713:	e8 ea 84 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012718:	83 c4 10             	add    esp,0x10
c001271b:	85 c0                	test   eax,eax
c001271d:	0f 85 71 05 00 00    	jne    c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012723:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001272a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001272d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012731:	31 d2                	xor    edx,edx
c0012733:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012737:	83 ec 0c             	sub    esp,0xc
c001273a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001273e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012745:	50                   	push   eax
c0012746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001274a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001274e:	52                   	push   edx
c001274f:	50                   	push   eax
c0012750:	55                   	push   ebp
c0012751:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012754:	83 c4 1c             	add    esp,0x1c
c0012757:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001275a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001275d:	50                   	push   eax
c001275e:	6a 00                	push   0x0
c0012760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012764:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012768:	50                   	push   eax
c0012769:	e8 62 dd fe ff       	call   c00004d0 <memset>
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	46                   	inc    esi
c0012772:	e9 6c ff ff ff       	jmp    c00126e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012777:	53                   	push   ebx
c0012778:	31 db                	xor    ebx,ebx
c001277a:	68 00 01 00 00       	push   0x100
c001277f:	6a 00                	push   0x0
c0012781:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012785:	50                   	push   eax
c0012786:	e8 45 dd fe ff       	call   c00004d0 <memset>
c001278b:	83 c4 0c             	add    esp,0xc
c001278e:	68 00 01 00 00       	push   0x100
c0012793:	6a 00                	push   0x0
c0012795:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001279c:	50                   	push   eax
c001279d:	e8 2e dd fe ff       	call   c00004d0 <memset>
c00127a2:	83 c4 10             	add    esp,0x10
c00127a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127ad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127b5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127cd:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00127d1:	0f 86 30 01 00 00    	jbe    c0012907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00127d7:	0f b7 f3             	movzx  esi,bx
c00127da:	6b f6 28             	imul   esi,esi,0x28
c00127dd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00127e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00127e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127e8:	52                   	push   edx
c00127e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00127ed:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00127f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00127f3:	6b d2 28             	imul   edx,edx,0x28
c00127f6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00127fa:	31 d2                	xor    edx,edx
c00127fc:	52                   	push   edx
c00127fd:	50                   	push   eax
c00127fe:	55                   	push   ebp
c00127ff:	e8 fe 83 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012804:	83 c4 0c             	add    esp,0xc
c0012807:	6a 20                	push   0x20
c0012809:	6a 00                	push   0x0
c001280b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012812:	51                   	push   ecx
c0012813:	e8 b8 dc fe ff       	call   c00004d0 <memset>
c0012818:	59                   	pop    ecx
c0012819:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001281c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012820:	52                   	push   edx
c0012821:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012828:	51                   	push   ecx
c0012829:	6a 00                	push   0x0
c001282b:	6a 1f                	push   0x1f
c001282d:	55                   	push   ebp
c001282e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012831:	83 c4 1c             	add    esp,0x1c
c0012834:	6a 09                	push   0x9
c0012836:	68 0e ea 01 c0       	push   0xc001ea0e
c001283b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012842:	51                   	push   ecx
c0012843:	e8 48 db fe ff       	call   c0000390 <memcmp>
c0012848:	83 c4 10             	add    esp,0x10
c001284b:	85 c0                	test   eax,eax
c001284d:	75 21                	jne    c0012870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001284f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012853:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012857:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001285b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001285f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012862:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012869:	89 d0                	mov    eax,edx
c001286b:	40                   	inc    eax
c001286c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012870:	50                   	push   eax
c0012871:	6a 09                	push   0x9
c0012873:	68 18 ea 01 c0       	push   0xc001ea18
c0012878:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001287f:	50                   	push   eax
c0012880:	e8 0b db fe ff       	call   c0000390 <memcmp>
c0012885:	83 c4 10             	add    esp,0x10
c0012888:	85 c0                	test   eax,eax
c001288a:	75 21                	jne    c00128ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001288c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012890:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012894:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001289c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001289f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128a6:	89 d0                	mov    eax,edx
c00128a8:	40                   	inc    eax
c00128a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128ad:	50                   	push   eax
c00128ae:	50                   	push   eax
c00128af:	68 e4 e9 01 c0       	push   0xc001e9e4
c00128b4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128bb:	50                   	push   eax
c00128bc:	e8 1f de fe ff       	call   c00006e0 <strcmp>
c00128c1:	83 c4 10             	add    esp,0x10
c00128c4:	85 c0                	test   eax,eax
c00128c6:	75 0f                	jne    c00128d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128d7:	50                   	push   eax
c00128d8:	50                   	push   eax
c00128d9:	68 ec e9 01 c0       	push   0xc001e9ec
c00128de:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128e5:	50                   	push   eax
c00128e6:	e8 f5 dd fe ff       	call   c00006e0 <strcmp>
c00128eb:	83 c4 10             	add    esp,0x10
c00128ee:	85 c0                	test   eax,eax
c00128f0:	75 0f                	jne    c0012901 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00128f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00128f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128fd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012901:	43                   	inc    ebx
c0012902:	e9 c6 fe ff ff       	jmp    c00127cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012907:	31 d2                	xor    edx,edx
c0012909:	50                   	push   eax
c001290a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001290e:	52                   	push   edx
c001290f:	50                   	push   eax
c0012910:	55                   	push   ebp
c0012911:	e8 ec 82 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c0012916:	58                   	pop    eax
c0012917:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001291b:	e8 99 4e ff ff       	call   c00077b9 <malloc>
c0012920:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012923:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012927:	31 d2                	xor    edx,edx
c0012929:	58                   	pop    eax
c001292a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001292e:	53                   	push   ebx
c001292f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012937:	52                   	push   edx
c0012938:	50                   	push   eax
c0012939:	55                   	push   ebp
c001293a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001293d:	83 c4 14             	add    esp,0x14
c0012940:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012944:	e8 70 4e ff ff       	call   c00077b9 <malloc>
c0012949:	31 d2                	xor    edx,edx
c001294b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001294f:	83 c4 0c             	add    esp,0xc
c0012952:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012956:	52                   	push   edx
c0012957:	50                   	push   eax
c0012958:	55                   	push   ebp
c0012959:	e8 a4 82 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c001295e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012961:	31 d2                	xor    edx,edx
c0012963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012966:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001296a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001296e:	52                   	push   edx
c001296f:	50                   	push   eax
c0012970:	55                   	push   ebp
c0012971:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012974:	83 c4 20             	add    esp,0x20
c0012977:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001297f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012983:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012987:	0f 84 0b 03 00 00    	je     c0012c98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001298d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012994:	31 d2                	xor    edx,edx
c0012996:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001299a:	c1 e8 03             	shr    eax,0x3
c001299d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129a1:	51                   	push   ecx
c00129a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129a6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129aa:	52                   	push   edx
c00129ab:	50                   	push   eax
c00129ac:	55                   	push   ebp
c00129ad:	e8 50 82 ff ff       	call   c000ac02 <File::seek(unsigned long long)>
c00129b2:	5b                   	pop    ebx
c00129b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129b7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129be:	e8 f6 4d ff ff       	call   c00077b9 <malloc>
c00129c3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129ca:	31 d2                	xor    edx,edx
c00129cc:	5e                   	pop    esi
c00129cd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00129d1:	50                   	push   eax
c00129d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129da:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00129e1:	52                   	push   edx
c00129e2:	50                   	push   eax
c00129e3:	55                   	push   ebp
c00129e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129e7:	83 c4 20             	add    esp,0x20
c00129ea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00129f2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00129f6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00129fa:	0f 8d 7c 02 00 00    	jge    c0012c7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a08:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a0d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a10:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a18:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a1c:	89 d8                	mov    eax,ebx
c0012a1e:	c1 e8 08             	shr    eax,0x8
c0012a21:	89 c6                	mov    esi,eax
c0012a23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a27:	c1 e6 04             	shl    esi,0x4
c0012a2a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a2e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a31:	85 d2                	test   edx,edx
c0012a33:	0f 85 bf 00 00 00    	jne    c0012af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a39:	83 ec 0c             	sub    esp,0xc
c0012a3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a40:	03 06                	add    eax,DWORD PTR [esi]
c0012a42:	50                   	push   eax
c0012a43:	e8 4b f8 ff ff       	call   c0012293 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	89 c2                	mov    edx,eax
c0012a4d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a52:	85 c0                	test   eax,eax
c0012a54:	0f 85 9e 00 00 00    	jne    c0012af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a5a:	83 ec 0c             	sub    esp,0xc
c0012a5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a61:	03 06                	add    eax,DWORD PTR [esi]
c0012a63:	50                   	push   eax
c0012a64:	e8 77 d8 ff ff       	call   c00102e0 <KeResolveCompatibilitySymbol(char*)>
c0012a69:	83 c4 10             	add    esp,0x10
c0012a6c:	89 c2                	mov    edx,eax
c0012a6e:	85 c0                	test   eax,eax
c0012a70:	0f 85 82 00 00 00    	jne    c0012af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a76:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012a7a:	50                   	push   eax
c0012a7b:	50                   	push   eax
c0012a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a80:	03 06                	add    eax,DWORD PTR [esi]
c0012a82:	50                   	push   eax
c0012a83:	68 22 ea 01 c0       	push   0xc001ea22
c0012a88:	e8 82 7a ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0012a8d:	58                   	pop    eax
c0012a8e:	5a                   	pop    edx
c0012a8f:	68 3c ea 01 c0       	push   0xc001ea3c
c0012a94:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a9b:	50                   	push   eax
c0012a9c:	e8 5f db fe ff       	call   c0000600 <strcpy>
c0012aa1:	59                   	pop    ecx
c0012aa2:	58                   	pop    eax
c0012aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa7:	03 06                	add    eax,DWORD PTR [esi]
c0012aa9:	50                   	push   eax
c0012aaa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ab1:	50                   	push   eax
c0012ab2:	e8 09 dd fe ff       	call   c00007c0 <strcat>
c0012ab7:	58                   	pop    eax
c0012ab8:	5a                   	pop    edx
c0012ab9:	68 d2 ea 01 c0       	push   0xc001ead2
c0012abe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ac5:	50                   	push   eax
c0012ac6:	e8 f5 dc fe ff       	call   c00007c0 <strcat>
c0012acb:	83 c4 10             	add    esp,0x10
c0012ace:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ad3:	0f 84 5d 01 00 00    	je     c0012c36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ad9:	83 ec 0c             	sub    esp,0xc
c0012adc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ae3:	50                   	push   eax
c0012ae4:	e8 a6 d6 ff ff       	call   c001018f <KePanic(char const*)>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012af0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012af4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012af8:	80 fb 01             	cmp    bl,0x1
c0012afb:	0f 85 88 00 00 00    	jne    c0012b89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b01:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b08:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b0c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b10:	01 ce                	add    esi,ecx
c0012b12:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b18:	0f 94 c0             	sete   al
c0012b1b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b21:	0f 94 c3             	sete   bl
c0012b24:	09 c3                	or     ebx,eax
c0012b26:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b28:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b2d:	74 41                	je     c0012b70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b2f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b32:	84 db                	test   bl,bl
c0012b34:	75 15                	jne    c0012b4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b36:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b3a:	66 83 f8 0c          	cmp    ax,0xc
c0012b3e:	76 05                	jbe    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b40:	b8 0c 00 00 00       	mov    eax,0xc
c0012b45:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b49:	76 37                	jbe    c0012b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b4b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b4f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b54:	0f 84 dc 00 00 00    	je     c0012c36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b5a:	83 ec 0c             	sub    esp,0xc
c0012b5d:	68 53 ea 01 c0       	push   0xc001ea53
c0012b62:	e8 28 d6 ff ff       	call   c001018f <KePanic(char const*)>
c0012b67:	83 c4 10             	add    esp,0x10
c0012b6a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b6e:	eb 12                	jmp    c0012b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b70:	01 c1                	add    ecx,eax
c0012b72:	84 db                	test   bl,bl
c0012b74:	75 0c                	jne    c0012b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b7a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b7e:	77 02                	ja     c0012b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b80:	01 d1                	add    ecx,edx
c0012b82:	89 0e                	mov    DWORD PTR [esi],ecx
c0012b84:	e9 ea 00 00 00       	jmp    c0012c73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012b89:	80 fb 02             	cmp    bl,0x2
c0012b8c:	75 7c                	jne    c0012c0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012b8e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012b95:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012b99:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012b9d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012ba3:	74 20                	je     c0012bc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ba5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bab:	74 18                	je     c0012bc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bb1:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bb6:	66 83 f8 0e          	cmp    ax,0xe
c0012bba:	77 03                	ja     c0012bbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bbc:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bbf:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012bc3:	76 1f                	jbe    c0012be4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012bc5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012bc9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bce:	74 66                	je     c0012c36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	68 6f ea 01 c0       	push   0xc001ea6f
c0012bd8:	e8 b2 d5 ff ff       	call   c001018f <KePanic(char const*)>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012be4:	8b 06                	mov    eax,DWORD PTR [esi]
c0012be6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012beb:	74 13                	je     c0012c00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012bed:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012bf1:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012bf8:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012bfc:	01 c8                	add    eax,ecx
c0012bfe:	eb 04                	jmp    c0012c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c00:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c04:	01 c2                	add    edx,eax
c0012c06:	89 16                	mov    DWORD PTR [esi],edx
c0012c08:	eb 69                	jmp    c0012c73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c0a:	0f b6 db             	movzx  ebx,bl
c0012c0d:	50                   	push   eax
c0012c0e:	50                   	push   eax
c0012c0f:	53                   	push   ebx
c0012c10:	68 8b ea 01 c0       	push   0xc001ea8b
c0012c15:	e8 f5 78 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c22:	74 12                	je     c0012c36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c24:	83 ec 0c             	sub    esp,0xc
c0012c27:	68 96 ea 01 c0       	push   0xc001ea96
c0012c2c:	e8 5e d5 ff ff       	call   c001018f <KePanic(char const*)>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	eb 3d                	jmp    c0012c73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c36:	83 ec 0c             	sub    esp,0xc
c0012c39:	55                   	push   ebp
c0012c3a:	e8 63 7f ff ff       	call   c000aba2 <File::close()>
c0012c3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c42:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c48:	59                   	pop    ecx
c0012c49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c4d:	e8 77 4b ff ff       	call   c00077c9 <free>
c0012c52:	5b                   	pop    ebx
c0012c53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c57:	e8 6d 4b ff ff       	call   c00077c9 <free>
c0012c5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c5f:	e8 65 4b ff ff       	call   c00077c9 <free>
c0012c64:	5e                   	pop    esi
c0012c65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c69:	e8 5b 4b ff ff       	call   c00077c9 <free>
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	eb 21                	jmp    c0012c94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012c73:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012c77:	e9 76 fd ff ff       	jmp    c00129f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012c7c:	83 ec 0c             	sub    esp,0xc
c0012c7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c83:	e8 41 4b ff ff       	call   c00077c9 <free>
c0012c88:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012c8c:	83 c4 10             	add    esp,0x10
c0012c8f:	e9 eb fc ff ff       	jmp    c001297f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012c94:	31 c0                	xor    eax,eax
c0012c96:	eb 33                	jmp    c0012ccb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012c98:	83 ec 0c             	sub    esp,0xc
c0012c9b:	55                   	push   ebp
c0012c9c:	e8 01 7f ff ff       	call   c000aba2 <File::close()>
c0012ca1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ca4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ca7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012caa:	58                   	pop    eax
c0012cab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012caf:	e8 15 4b ff ff       	call   c00077c9 <free>
c0012cb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cb7:	e8 0d 4b ff ff       	call   c00077c9 <free>
c0012cbc:	5a                   	pop    edx
c0012cbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc1:	e8 03 4b ff ff       	call   c00077c9 <free>
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	b0 01                	mov    al,0x1
c0012ccb:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012cd1:	5b                   	pop    ebx
c0012cd2:	5e                   	pop    esi
c0012cd3:	5f                   	pop    edi
c0012cd4:	5d                   	pop    ebp
c0012cd5:	c3                   	ret    

c0012cd6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012cd6:	56                   	push   esi
c0012cd7:	31 d2                	xor    edx,edx
c0012cd9:	53                   	push   ebx
c0012cda:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012ce0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012ce4:	39 d3                	cmp    ebx,edx
c0012ce6:	7e 1b                	jle    c0012d03 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012ce8:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012cef:	39 c8                	cmp    eax,ecx
c0012cf1:	77 0d                	ja     c0012d00 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012cf3:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012cfa:	01 c6                	add    esi,eax
c0012cfc:	39 ce                	cmp    esi,ecx
c0012cfe:	77 05                	ja     c0012d05 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d00:	42                   	inc    edx
c0012d01:	eb e1                	jmp    c0012ce4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d03:	31 c0                	xor    eax,eax
c0012d05:	5b                   	pop    ebx
c0012d06:	5e                   	pop    esi
c0012d07:	c3                   	ret    

c0012d08 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d08:	53                   	push   ebx
c0012d09:	31 c0                	xor    eax,eax
c0012d0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d0f:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d15:	39 c3                	cmp    ebx,eax
c0012d17:	7e 22                	jle    c0012d3b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d19:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d20:	39 ca                	cmp    edx,ecx
c0012d22:	77 14                	ja     c0012d38 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d24:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012d2b:	39 ca                	cmp    edx,ecx
c0012d2d:	76 09                	jbe    c0012d38 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d2f:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012d36:	eb 05                	jmp    c0012d3d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d38:	40                   	inc    eax
c0012d39:	eb da                	jmp    c0012d15 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d3b:	31 c0                	xor    eax,eax
c0012d3d:	5b                   	pop    ebx
c0012d3e:	c3                   	ret    

c0012d3f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d3f:	53                   	push   ebx
c0012d40:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d44:	53                   	push   ebx
c0012d45:	e8 8c ff ff ff       	call   c0012cd6 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d4a:	5a                   	pop    edx
c0012d4b:	31 d2                	xor    edx,edx
c0012d4d:	85 c0                	test   eax,eax
c0012d4f:	74 04                	je     c0012d55 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d51:	89 da                	mov    edx,ebx
c0012d53:	29 c2                	sub    edx,eax
c0012d55:	89 d0                	mov    eax,edx
c0012d57:	5b                   	pop    ebx
c0012d58:	c3                   	ret    

c0012d59 <Thr::loadDLL(char const*, bool)>:
c0012d59:	55                   	push   ebp
c0012d5a:	57                   	push   edi
c0012d5b:	56                   	push   esi
c0012d5c:	53                   	push   ebx
c0012d5d:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d63:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d6a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012d71:	56                   	push   esi
c0012d72:	68 ae ea 01 c0       	push   0xc001eaae
c0012d77:	e8 93 77 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0012d7c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d83:	e8 31 4a ff ff       	call   c00077b9 <malloc>
c0012d88:	83 c4 0c             	add    esp,0xc
c0012d8b:	89 c3                	mov    ebx,eax
c0012d8d:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012d93:	56                   	push   esi
c0012d94:	50                   	push   eax
c0012d95:	e8 ea 7c ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	85 db                	test   ebx,ebx
c0012d9f:	75 3c                	jne    c0012ddd <Thr::loadDLL(char const*, bool)+0x84>
c0012da1:	89 f8                	mov    eax,edi
c0012da3:	84 c0                	test   al,al
c0012da5:	0f 84 d2 01 00 00    	je     c0012f7d <Thr::loadDLL(char const*, bool)+0x224>
c0012dab:	55                   	push   ebp
c0012dac:	55                   	push   ebp
c0012dad:	68 bf ea 01 c0       	push   0xc001eabf
c0012db2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012db6:	55                   	push   ebp
c0012db7:	e8 44 d8 fe ff       	call   c0000600 <strcpy>
c0012dbc:	58                   	pop    eax
c0012dbd:	5a                   	pop    edx
c0012dbe:	56                   	push   esi
c0012dbf:	55                   	push   ebp
c0012dc0:	e8 fb d9 fe ff       	call   c00007c0 <strcat>
c0012dc5:	59                   	pop    ecx
c0012dc6:	58                   	pop    eax
c0012dc7:	68 d2 ea 01 c0       	push   0xc001ead2
c0012dcc:	55                   	push   ebp
c0012dcd:	e8 ee d9 fe ff       	call   c00007c0 <strcat>
c0012dd2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012dd5:	e8 b5 d3 ff ff       	call   c001018f <KePanic(char const*)>
c0012dda:	83 c4 10             	add    esp,0x10
c0012ddd:	51                   	push   ecx
c0012dde:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012de2:	50                   	push   eax
c0012de3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012de7:	50                   	push   eax
c0012de8:	53                   	push   ebx
c0012de9:	e8 02 80 ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	85 db                	test   ebx,ebx
c0012df3:	74 0c                	je     c0012e01 <Thr::loadDLL(char const*, bool)+0xa8>
c0012df5:	83 ec 0c             	sub    esp,0xc
c0012df8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dfa:	53                   	push   ebx
c0012dfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e06:	75 0a                	jne    c0012e12 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e0c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e10:	75 3c                	jne    c0012e4e <Thr::loadDLL(char const*, bool)+0xf5>
c0012e12:	89 f8                	mov    eax,edi
c0012e14:	84 c0                	test   al,al
c0012e16:	0f 84 49 01 00 00    	je     c0012f65 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e1c:	51                   	push   ecx
c0012e1d:	51                   	push   ecx
c0012e1e:	68 bf ea 01 c0       	push   0xc001eabf
c0012e23:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e27:	53                   	push   ebx
c0012e28:	e8 d3 d7 fe ff       	call   c0000600 <strcpy>
c0012e2d:	5d                   	pop    ebp
c0012e2e:	58                   	pop    eax
c0012e2f:	56                   	push   esi
c0012e30:	53                   	push   ebx
c0012e31:	e8 8a d9 fe ff       	call   c00007c0 <strcat>
c0012e36:	58                   	pop    eax
c0012e37:	5a                   	pop    edx
c0012e38:	68 d2 ea 01 c0       	push   0xc001ead2
c0012e3d:	53                   	push   ebx
c0012e3e:	e8 7d d9 fe ff       	call   c00007c0 <strcat>
c0012e43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e46:	e8 44 d3 ff ff       	call   c001018f <KePanic(char const*)>
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	52                   	push   edx
c0012e4f:	6a 03                	push   0x3
c0012e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e55:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e59:	05 ff 0f 00 00       	add    eax,0xfff
c0012e5e:	83 d2 00             	adc    edx,0x0
c0012e61:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e65:	50                   	push   eax
c0012e66:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012e6c:	e8 ad 6b ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0012e71:	59                   	pop    ecx
c0012e72:	89 c3                	mov    ebx,eax
c0012e74:	5d                   	pop    ebp
c0012e75:	50                   	push   eax
c0012e76:	68 16 d7 01 c0       	push   0xc001d716
c0012e7b:	e8 8f 76 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0012e80:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e83:	e8 b8 d6 fe ff       	call   c0000540 <strlen>
c0012e88:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012e8e:	40                   	inc    eax
c0012e8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e92:	e8 22 49 ff ff       	call   c00077b9 <malloc>
c0012e97:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012e9e:	58                   	pop    eax
c0012e9f:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012ea4:	5a                   	pop    edx
c0012ea5:	56                   	push   esi
c0012ea6:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012ead:	e8 4e d7 fe ff       	call   c0000600 <strcpy>
c0012eb2:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012eb7:	8d 50 01             	lea    edx,[eax+0x1]
c0012eba:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012ec1:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012ec7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012ecb:	83 c4 0c             	add    esp,0xc
c0012ece:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012ed5:	6a 01                	push   0x1
c0012ed7:	53                   	push   ebx
c0012ed8:	56                   	push   esi
c0012ed9:	e8 c2 f6 ff ff       	call   c00125a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012ede:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ee2:	83 c4 10             	add    esp,0x10
c0012ee5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012eea:	0f 85 89 00 00 00    	jne    c0012f79 <Thr::loadDLL(char const*, bool)+0x220>
c0012ef0:	89 f8                	mov    eax,edi
c0012ef2:	84 c0                	test   al,al
c0012ef4:	74 73                	je     c0012f69 <Thr::loadDLL(char const*, bool)+0x210>
c0012ef6:	83 ec 0c             	sub    esp,0xc
c0012ef9:	68 d4 ea 01 c0       	push   0xc001ead4
c0012efe:	e8 8c d2 ff ff       	call   c001018f <KePanic(char const*)>
c0012f03:	83 c4 10             	add    esp,0x10
c0012f06:	eb 61                	jmp    c0012f69 <Thr::loadDLL(char const*, bool)+0x210>
c0012f08:	50                   	push   eax
c0012f09:	50                   	push   eax
c0012f0a:	89 e8                	mov    eax,ebp
c0012f0c:	c1 e0 0c             	shl    eax,0xc
c0012f0f:	01 d8                	add    eax,ebx
c0012f11:	50                   	push   eax
c0012f12:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f18:	e8 79 66 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f22:	a8 60                	test   al,0x60
c0012f24:	75 11                	jne    c0012f37 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f26:	83 ec 0c             	sub    esp,0xc
c0012f29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f2e:	50                   	push   eax
c0012f2f:	e8 ff 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	45                   	inc    ebp
c0012f38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f40:	05 ff 0f 00 00       	add    eax,0xfff
c0012f45:	bf 00 00 00 00       	mov    edi,0x0
c0012f4a:	83 d2 00             	adc    edx,0x0
c0012f4d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f51:	c1 ea 0c             	shr    edx,0xc
c0012f54:	39 c5                	cmp    ebp,eax
c0012f56:	89 d1                	mov    ecx,edx
c0012f58:	89 f8                	mov    eax,edi
c0012f5a:	19 c8                	sbb    eax,ecx
c0012f5c:	72 aa                	jb     c0012f08 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f5e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f63:	75 18                	jne    c0012f7d <Thr::loadDLL(char const*, bool)+0x224>
c0012f65:	31 db                	xor    ebx,ebx
c0012f67:	eb 14                	jmp    c0012f7d <Thr::loadDLL(char const*, bool)+0x224>
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	68 f3 ea 01 c0       	push   0xc001eaf3
c0012f71:	e8 19 d2 ff ff       	call   c001018f <KePanic(char const*)>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	31 ed                	xor    ebp,ebp
c0012f7b:	eb bb                	jmp    c0012f38 <Thr::loadDLL(char const*, bool)+0x1df>
c0012f7d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f83:	89 d8                	mov    eax,ebx
c0012f85:	5b                   	pop    ebx
c0012f86:	5e                   	pop    esi
c0012f87:	5f                   	pop    edi
c0012f88:	5d                   	pop    ebp
c0012f89:	c3                   	ret    

c0012f8a <Thr::executeDLL(unsigned long, void*)>:
c0012f8a:	56                   	push   esi
c0012f8b:	53                   	push   ebx
c0012f8c:	52                   	push   edx
c0012f8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f95:	85 db                	test   ebx,ebx
c0012f97:	75 10                	jne    c0012fa9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012f99:	83 ec 0c             	sub    esp,0xc
c0012f9c:	68 0f eb 01 c0       	push   0xc001eb0f
c0012fa1:	e8 e9 d1 ff ff       	call   c001018f <KePanic(char const*)>
c0012fa6:	83 c4 10             	add    esp,0x10
c0012fa9:	50                   	push   eax
c0012faa:	50                   	push   eax
c0012fab:	53                   	push   ebx
c0012fac:	68 39 eb 01 c0       	push   0xc001eb39
c0012fb1:	e8 59 75 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0012fb6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fba:	89 d8                	mov    eax,ebx
c0012fbc:	83 c4 14             	add    esp,0x14
c0012fbf:	5b                   	pop    ebx
c0012fc0:	5e                   	pop    esi
c0012fc1:	ff e0                	jmp    eax
c0012fc3:	90                   	nop

c0012fc4 <userModeEntryPoint(void*)>:
c0012fc4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012fc9:	48                   	dec    eax
c0012fca:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012fcf:	75 03                	jne    c0012fd4 <userModeEntryPoint(void*)+0x10>
c0012fd1:	fb                   	sti    
c0012fd2:	66 90                	xchg   ax,ax
c0012fd4:	fb                   	sti    
c0012fd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fdd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012fe3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fe7:	e9 53 d2 fe ff       	jmp    c000023f <goToUsermode>

c0012fec <changeTSS>:
c0012fec:	83 ec 14             	sub    esp,0x14
c0012fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ff4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012ff7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012ffc:	c1 e2 15             	shl    edx,0x15
c0012fff:	29 d0                	sub    eax,edx
c0013001:	50                   	push   eax
c0013002:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0013007:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001300d:	05 7c 11 00 00       	add    eax,0x117c
c0013012:	50                   	push   eax
c0013013:	e8 c0 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013018:	83 c4 1c             	add    esp,0x1c
c001301b:	c3                   	ret    

c001301c <switchToThread(ThreadControlBlock*)>:
c001301c:	57                   	push   edi
c001301d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013022:	56                   	push   esi
c0013023:	85 c0                	test   eax,eax
c0013025:	53                   	push   ebx
c0013026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001302a:	0f 85 90 00 00 00    	jne    c00130c0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013030:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013033:	80 fa ff             	cmp    dl,0xff
c0013036:	0f 84 80 00 00 00    	je     c00130bc <switchToThread(ThreadControlBlock*)+0xa0>
c001303c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013042:	b8 00 04 00 00       	mov    eax,0x400
c0013047:	29 d0                	sub    eax,edx
c0013049:	d1 f8                	sar    eax,1
c001304b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001304e:	66 90                	xchg   ax,ax
c0013050:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013053:	e8 1d 26 00 00       	call   c0015675 <HalQueryPerformanceCounter()>
c0013058:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001305d:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c0013063:	89 c6                	mov    esi,eax
c0013065:	89 d7                	mov    edi,edx
c0013067:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c001306d:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c0013072:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c0013078:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c001307e:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c0013084:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001308a:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c0013090:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013093:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013096:	01 c6                	add    esi,eax
c0013098:	11 d7                	adc    edi,edx
c001309a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001309d:	83 ec 0c             	sub    esp,0xc
c00130a0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130a3:	53                   	push   ebx
c00130a4:	e8 ce d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130a9:	0f 20 c0             	mov    eax,cr0
c00130ac:	83 c8 08             	or     eax,0x8
c00130af:	0f 22 c0             	mov    cr0,eax
c00130b2:	83 c4 10             	add    esp,0x10
c00130b5:	5b                   	pop    ebx
c00130b6:	5e                   	pop    esi
c00130b7:	5f                   	pop    edi
c00130b8:	c3                   	ret    
c00130b9:	8d 76 00             	lea    esi,[esi+0x0]
c00130bc:	31 c0                	xor    eax,eax
c00130be:	eb 90                	jmp    c0013050 <switchToThread(ThreadControlBlock*)+0x34>
c00130c0:	5b                   	pop    ebx
c00130c1:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00130cb:	5e                   	pop    esi
c00130cc:	5f                   	pop    edi
c00130cd:	c3                   	ret    
c00130ce:	66 90                	xchg   ax,ax

c00130d0 <Process::addArgs(char**)>:
c00130d0:	57                   	push   edi
c00130d1:	56                   	push   esi
c00130d2:	53                   	push   ebx
c00130d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130db:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00130e5:	85 ff                	test   edi,edi
c00130e7:	74 43                	je     c001312c <Process::addArgs(char**)+0x5c>
c00130e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00130eb:	85 c0                	test   eax,eax
c00130ed:	74 3d                	je     c001312c <Process::addArgs(char**)+0x5c>
c00130ef:	31 db                	xor    ebx,ebx
c00130f1:	8d 76 00             	lea    esi,[esi+0x0]
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	50                   	push   eax
c00130f8:	e8 43 d4 fe ff       	call   c0000540 <strlen>
c00130fd:	40                   	inc    eax
c00130fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0013101:	e8 b3 46 ff ff       	call   c00077b9 <malloc>
c0013106:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001310d:	5a                   	pop    edx
c001310e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013111:	59                   	pop    ecx
c0013112:	43                   	inc    ebx
c0013113:	52                   	push   edx
c0013114:	50                   	push   eax
c0013115:	e8 e6 d4 fe ff       	call   c0000600 <strcpy>
c001311a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013126:	85 c0                	test   eax,eax
c0013128:	75 ca                	jne    c00130f4 <Process::addArgs(char**)+0x24>
c001312a:	66 90                	xchg   ax,ax
c001312c:	5b                   	pop    ebx
c001312d:	5e                   	pop    esi
c001312e:	5f                   	pop    edi
c001312f:	c3                   	ret    

c0013130 <Process::Process(char const*, Process*, char**)>:
c0013130:	56                   	push   esi
c0013131:	53                   	push   ebx
c0013132:	83 ec 14             	sub    esp,0x14
c0013135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013139:	05 0c 02 00 00       	add    eax,0x20c
c001313e:	bb 07 00 00 00       	mov    ebx,0x7
c0013143:	89 c6                	mov    esi,eax
c0013145:	8d 76 00             	lea    esi,[esi+0x0]
c0013148:	85 db                	test   ebx,ebx
c001314a:	78 14                	js     c0013160 <Process::Process(char const*, Process*, char**)+0x30>
c001314c:	83 ec 0c             	sub    esp,0xc
c001314f:	56                   	push   esi
c0013150:	e8 97 98 00 00       	call   c001c9ec <ThreadControlBlock::ThreadControlBlock()>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	83 c6 5f             	add    esi,0x5f
c001315b:	4b                   	dec    ebx
c001315c:	eb ea                	jmp    c0013148 <Process::Process(char const*, Process*, char**)+0x18>
c001315e:	66 90                	xchg   ax,ax
c0013160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013164:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001316b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001316f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013176:	83 ec 0c             	sub    esp,0xc
c0013179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001317d:	e8 02 ce ff ff       	call   c000ff84 <Krnl::newProcessEnv(Process*)>
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	89 c2                	mov    edx,eax
c0013187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001318b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013195:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001319e:	a1 ec fa 01 c0       	mov    eax,ds:0xc001faec
c00131a3:	8d 50 01             	lea    edx,[eax+0x1]
c00131a6:	89 15 ec fa 01 c0    	mov    DWORD PTR ds:0xc001faec,edx
c00131ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131b0:	89 02                	mov    DWORD PTR [edx],eax
c00131b2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131ba:	83 ec 0c             	sub    esp,0xc
c00131bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131c1:	e8 f3 45 ff ff       	call   c00077b9 <malloc>
c00131c6:	83 c4 10             	add    esp,0x10
c00131c9:	89 c3                	mov    ebx,eax
c00131cb:	83 ec 08             	sub    esp,0x8
c00131ce:	6a 00                	push   0x0
c00131d0:	53                   	push   ebx
c00131d1:	e8 f2 6b ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131dd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00131e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131e7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00131f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131f9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00131ff:	e8 f6 d2 ff ff       	call   c00104fa <KeInitSignals()>
c0013204:	89 c2                	mov    edx,eax
c0013206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001320a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013214:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001321a:	85 c0                	test   eax,eax
c001321c:	74 42                	je     c0013260 <Process::Process(char const*, Process*, char**)+0x130>
c001321e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013222:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013228:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001322e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013232:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001323c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013242:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324c:	05 0c 01 00 00       	add    eax,0x10c
c0013251:	83 ec 08             	sub    esp,0x8
c0013254:	52                   	push   edx
c0013255:	50                   	push   eax
c0013256:	e8 a5 d3 fe ff       	call   c0000600 <strcpy>
c001325b:	83 c4 10             	add    esp,0x10
c001325e:	eb 64                	jmp    c00132c4 <Process::Process(char const*, Process*, char**)+0x194>
c0013260:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013268:	83 ec 0c             	sub    esp,0xc
c001326b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001326f:	e8 45 45 ff ff       	call   c00077b9 <malloc>
c0013274:	83 c4 10             	add    esp,0x10
c0013277:	89 c3                	mov    ebx,eax
c0013279:	83 ec 08             	sub    esp,0x8
c001327c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013280:	53                   	push   ebx
c0013281:	e8 74 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013286:	83 c4 10             	add    esp,0x10
c0013289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001328d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013297:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001329d:	83 ec 0c             	sub    esp,0xc
c00132a0:	50                   	push   eax
c00132a1:	e8 f4 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ad:	05 0c 01 00 00       	add    eax,0x10c
c00132b2:	83 ec 08             	sub    esp,0x8
c00132b5:	68 58 eb 01 c0       	push   0xc001eb58
c00132ba:	50                   	push   eax
c00132bb:	e8 40 d3 fe ff       	call   c0000600 <strcpy>
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	90                   	nop
c00132c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c8:	83 c0 0c             	add    eax,0xc
c00132cb:	83 ec 08             	sub    esp,0x8
c00132ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132d2:	50                   	push   eax
c00132d3:	e8 28 d3 fe ff       	call   c0000600 <strcpy>
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	83 ec 08             	sub    esp,0x8
c00132de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132e6:	e8 e5 fd ff ff       	call   c00130d0 <Process::addArgs(char**)>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	83 ec 08             	sub    esp,0x8
c00132f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f9:	e8 6c ed ff ff       	call   c001206a <Thr::loadProgramIntoMemory(Process*, char const*)>
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013305:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013309:	83 f0 01             	xor    eax,0x1
c001330c:	88 c2                	mov    dl,al
c001330e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013312:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013318:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001331c:	25 ff 00 00 00       	and    eax,0xff
c0013321:	83 ec 08             	sub    esp,0x8
c0013324:	50                   	push   eax
c0013325:	68 b0 eb 01 c0       	push   0xc001ebb0
c001332a:	e8 e0 71 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001332f:	83 c4 10             	add    esp,0x10
c0013332:	90                   	nop
c0013333:	83 c4 14             	add    esp,0x14
c0013336:	5b                   	pop    ebx
c0013337:	5e                   	pop    esi
c0013338:	c3                   	ret    
c0013339:	90                   	nop
c001333a:	66 90                	xchg   ax,ax

c001333c <Process::Process(bool, char const*, Process*, char**)>:
c001333c:	56                   	push   esi
c001333d:	53                   	push   ebx
c001333e:	83 ec 24             	sub    esp,0x24
c0013341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013345:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001334d:	05 0c 02 00 00       	add    eax,0x20c
c0013352:	bb 07 00 00 00       	mov    ebx,0x7
c0013357:	89 c6                	mov    esi,eax
c0013359:	8d 76 00             	lea    esi,[esi+0x0]
c001335c:	85 db                	test   ebx,ebx
c001335e:	78 14                	js     c0013374 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013360:	83 ec 0c             	sub    esp,0xc
c0013363:	56                   	push   esi
c0013364:	e8 83 96 00 00       	call   c001c9ec <ThreadControlBlock::ThreadControlBlock()>
c0013369:	83 c4 10             	add    esp,0x10
c001336c:	83 c6 5f             	add    esi,0x5f
c001336f:	4b                   	dec    ebx
c0013370:	eb ea                	jmp    c001335c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013372:	66 90                	xchg   ax,ax
c0013374:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013378:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001337f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013383:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001338a:	83 ec 0c             	sub    esp,0xc
c001338d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013391:	e8 ee cb ff ff       	call   c000ff84 <Krnl::newProcessEnv(Process*)>
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	89 c2                	mov    edx,eax
c001339b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001339f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133a9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133b2:	a1 ec fa 01 c0       	mov    eax,ds:0xc001faec
c00133b7:	8d 50 01             	lea    edx,[eax+0x1]
c00133ba:	89 15 ec fa 01 c0    	mov    DWORD PTR ds:0xc001faec,edx
c00133c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133c4:	89 02                	mov    DWORD PTR [edx],eax
c00133c6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00133ce:	83 ec 0c             	sub    esp,0xc
c00133d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00133d5:	e8 df 43 ff ff       	call   c00077b9 <malloc>
c00133da:	83 c4 10             	add    esp,0x10
c00133dd:	89 c3                	mov    ebx,eax
c00133df:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00133e3:	25 ff 00 00 00       	and    eax,0xff
c00133e8:	83 ec 08             	sub    esp,0x8
c00133eb:	50                   	push   eax
c00133ec:	53                   	push   ebx
c00133ed:	e8 d6 69 ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00133ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013403:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001340d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013411:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013415:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001341b:	e8 da d0 ff ff       	call   c00104fa <KeInitSignals()>
c0013420:	89 c2                	mov    edx,eax
c0013422:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013426:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001342c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013430:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013436:	85 c0                	test   eax,eax
c0013438:	74 42                	je     c001347c <Process::Process(bool, char const*, Process*, char**)+0x140>
c001343a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001343e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013444:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001344a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001344e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013458:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001345e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013468:	05 0c 01 00 00       	add    eax,0x10c
c001346d:	83 ec 08             	sub    esp,0x8
c0013470:	52                   	push   edx
c0013471:	50                   	push   eax
c0013472:	e8 89 d1 fe ff       	call   c0000600 <strcpy>
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	eb 64                	jmp    c00134e0 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001347c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001348b:	e8 29 43 ff ff       	call   c00077b9 <malloc>
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	89 c3                	mov    ebx,eax
c0013495:	83 ec 08             	sub    esp,0x8
c0013498:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001349c:	53                   	push   ebx
c001349d:	e8 58 54 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00134a2:	83 c4 10             	add    esp,0x10
c00134a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134b9:	83 ec 0c             	sub    esp,0xc
c00134bc:	50                   	push   eax
c00134bd:	e8 d8 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00134c2:	83 c4 10             	add    esp,0x10
c00134c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c9:	05 0c 01 00 00       	add    eax,0x10c
c00134ce:	83 ec 08             	sub    esp,0x8
c00134d1:	68 58 eb 01 c0       	push   0xc001eb58
c00134d6:	50                   	push   eax
c00134d7:	e8 24 d1 fe ff       	call   c0000600 <strcpy>
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	90                   	nop
c00134e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e4:	83 c0 0c             	add    eax,0xc
c00134e7:	83 ec 08             	sub    esp,0x8
c00134ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134ee:	50                   	push   eax
c00134ef:	e8 0c d1 fe ff       	call   c0000600 <strcpy>
c00134f4:	83 c4 10             	add    esp,0x10
c00134f7:	83 ec 08             	sub    esp,0x8
c00134fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00134fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013502:	e8 c9 fb ff ff       	call   c00130d0 <Process::addArgs(char**)>
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	90                   	nop
c001350b:	83 c4 24             	add    esp,0x24
c001350e:	5b                   	pop    ebx
c001350f:	5e                   	pop    esi
c0013510:	c3                   	ret    
c0013511:	8d 76 00             	lea    esi,[esi+0x0]

c0013514 <taskStartupFunction>:
c0013514:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013519:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001351c:	c3                   	ret    
c001351d:	90                   	nop
c001351e:	66 90                	xchg   ax,ax

c0013520 <Semaphore::Semaphore(int)>:
c0013520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013524:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013528:	89 10                	mov    DWORD PTR [eax],edx
c001352a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001352e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013535:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013539:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013544:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001354b:	90                   	nop
c001354c:	c3                   	ret    
c001354d:	90                   	nop
c001354e:	66 90                	xchg   ax,ax

c0013550 <Mutex::Mutex()>:
c0013550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013554:	6a 01                	push   0x1
c0013556:	50                   	push   eax
c0013557:	e8 c4 ff ff ff       	call   c0013520 <Semaphore::Semaphore(int)>
c001355c:	83 c4 08             	add    esp,0x8
c001355f:	90                   	nop
c0013560:	c3                   	ret    
c0013561:	90                   	nop
c0013562:	66 90                	xchg   ax,ax

c0013564 <Process::createThread(void (*)(void*), void*, int)>:
c0013564:	57                   	push   edi
c0013565:	31 c9                	xor    ecx,ecx
c0013567:	56                   	push   esi
c0013568:	53                   	push   ebx
c0013569:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001356d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013574:	89 f2                	mov    edx,esi
c0013576:	66 90                	xchg   ax,ax
c0013578:	31 c0                	xor    eax,eax
c001357a:	66 89 d0             	mov    ax,dx
c001357d:	83 e2 01             	and    edx,0x1
c0013580:	74 12                	je     c0013594 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013582:	d1 f8                	sar    eax,1
c0013584:	41                   	inc    ecx
c0013585:	89 c2                	mov    edx,eax
c0013587:	83 f9 10             	cmp    ecx,0x10
c001358a:	75 ec                	jne    c0013578 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001358c:	31 db                	xor    ebx,ebx
c001358e:	89 d8                	mov    eax,ebx
c0013590:	5b                   	pop    ebx
c0013591:	5e                   	pop    esi
c0013592:	5f                   	pop    edi
c0013593:	c3                   	ret    
c0013594:	b8 01 00 00 00       	mov    eax,0x1
c0013599:	d3 e0                	shl    eax,cl
c001359b:	09 c6                	or     esi,eax
c001359d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135a0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135a7:	01 c0                	add    eax,eax
c00135a9:	01 c8                	add    eax,ecx
c00135ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00135ae:	01 d8                	add    eax,ebx
c00135b0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135b7:	75 0b                	jne    c00135c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135b9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00135c3:	90                   	nop
c00135c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00135ca:	83 ec 08             	sub    esp,0x8
c00135cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135d0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135d3:	01 c0                	add    eax,eax
c00135d5:	01 c8                	add    eax,ecx
c00135d7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00135da:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00135dd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00135e3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00135e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00135ed:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00135f3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00135f9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013600:	89 ca                	mov    edx,ecx
c0013602:	f7 da                	neg    edx
c0013604:	c1 e2 15             	shl    edx,0x15
c0013607:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001360d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013613:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013617:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013621:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013627:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001362b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013631:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001363b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013645:	53                   	push   ebx
c0013646:	68 84 51 02 c0       	push   0xc0025184
c001364b:	e8 3c 91 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013650:	83 c4 10             	add    esp,0x10
c0013653:	89 d8                	mov    eax,ebx
c0013655:	5b                   	pop    ebx
c0013656:	5e                   	pop    esi
c0013657:	5f                   	pop    edi
c0013658:	c3                   	ret    
c0013659:	90                   	nop
c001365a:	66 90                	xchg   ax,ax

c001365c <Process::createUserThread()>:
c001365c:	83 ec 0c             	sub    esp,0xc
c001365f:	68 80 00 00 00       	push   0x80
c0013664:	6a 00                	push   0x0
c0013666:	68 c4 2f 01 c0       	push   0xc0012fc4
c001366b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001366f:	50                   	push   eax
c0013670:	e8 ef fe ff ff       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c0013675:	83 c4 1c             	add    esp,0x1c
c0013678:	c3                   	ret    
c0013679:	8d 76 00             	lea    esi,[esi+0x0]

c001367c <setupMultitasking(void (*)())>:
c001367c:	56                   	push   esi
c001367d:	53                   	push   ebx
c001367e:	53                   	push   ebx
c001367f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013683:	eb 13                	jmp    c0013698 <setupMultitasking(void (*)())+0x1c>
c0013685:	8d 76 00             	lea    esi,[esi+0x0]
c0013688:	83 ec 0c             	sub    esp,0xc
c001368b:	68 84 51 02 c0       	push   0xc0025184
c0013690:	e8 3f 90 00 00       	call   c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013695:	83 c4 10             	add    esp,0x10
c0013698:	83 ec 0c             	sub    esp,0xc
c001369b:	68 84 51 02 c0       	push   0xc0025184
c00136a0:	e8 0b 90 00 00       	call   c001c6b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136a5:	83 c4 10             	add    esp,0x10
c00136a8:	84 c0                	test   al,al
c00136aa:	74 dc                	je     c0013688 <setupMultitasking(void (*)())+0xc>
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	68 24 07 00 00       	push   0x724
c00136b4:	e8 00 41 ff ff       	call   c00077b9 <malloc>
c00136b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00136c0:	89 c3                	mov    ebx,eax
c00136c2:	6a 00                	push   0x0
c00136c4:	68 5c eb 01 c0       	push   0xc001eb5c
c00136c9:	6a 01                	push   0x1
c00136cb:	50                   	push   eax
c00136cc:	e8 6b fc ff ff       	call   c001333c <Process::Process(bool, char const*, Process*, char**)>
c00136d1:	83 c4 14             	add    esp,0x14
c00136d4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00136da:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c00136e0:	50                   	push   eax
c00136e1:	e8 11 4d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00136e6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00136ee:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00136f8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00136fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013701:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001370b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013711:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013717:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013721:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001372b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013735:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001373b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013741:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001374b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013751:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001375b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013761:	5a                   	pop    edx
c0013762:	59                   	pop    ecx
c0013763:	68 58 eb 01 c0       	push   0xc001eb58
c0013768:	50                   	push   eax
c0013769:	e8 92 ce fe ff       	call   c0000600 <strcpy>
c001376e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013775:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013779:	83 c4 14             	add    esp,0x14
c001377c:	5b                   	pop    ebx
c001377d:	5e                   	pop    esi
c001377e:	e9 e6 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013783:	90                   	nop

c0013784 <schedule()>:
c0013784:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c001378a:	85 d2                	test   edx,edx
c001378c:	74 0e                	je     c001379c <schedule()+0x18>
c001378e:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c0013798:	c3                   	ret    
c0013799:	8d 76 00             	lea    esi,[esi+0x0]
c001379c:	53                   	push   ebx
c001379d:	83 ec 14             	sub    esp,0x14
c00137a0:	68 84 51 02 c0       	push   0xc0025184
c00137a5:	e8 06 8f 00 00       	call   c001c6b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137aa:	83 c4 10             	add    esp,0x10
c00137ad:	84 c0                	test   al,al
c00137af:	75 3b                	jne    c00137ec <schedule()+0x68>
c00137b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137b9:	4a                   	dec    edx
c00137ba:	74 38                	je     c00137f4 <schedule()+0x70>
c00137bc:	83 ec 0c             	sub    esp,0xc
c00137bf:	68 84 51 02 c0       	push   0xc0025184
c00137c4:	e8 03 8f 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137c9:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00137d0:	89 c3                	mov    ebx,eax
c00137d2:	e8 fd 8e 00 00       	call   c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137d7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00137de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137e1:	e8 36 f8 ff ff       	call   c001301c <switchToThread(ThreadControlBlock*)>
c00137e6:	83 c4 10             	add    esp,0x10
c00137e9:	8d 76 00             	lea    esi,[esi+0x0]
c00137ec:	83 c4 08             	add    esp,0x8
c00137ef:	5b                   	pop    ebx
c00137f0:	c3                   	ret    
c00137f1:	8d 76 00             	lea    esi,[esi+0x0]
c00137f4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00137fb:	83 ec 08             	sub    esp,0x8
c00137fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013803:	50                   	push   eax
c0013804:	68 84 51 02 c0       	push   0xc0025184
c0013809:	e8 7e 8f 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	eb a9                	jmp    c00137bc <schedule()+0x38>
c0013813:	90                   	nop

c0013814 <Semaphore::tryAcquire()>:
c0013814:	53                   	push   ebx
c0013815:	83 ec 08             	sub    esp,0x8
c0013818:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001381c:	fa                   	cli    
c001381d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013822:	8d 50 01             	lea    edx,[eax+0x1]
c0013825:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001382b:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013831:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013834:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c001383a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001383d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001383f:	7c 33                	jl     c0013874 <Semaphore::tryAcquire()+0x60>
c0013841:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c0013847:	85 d2                	test   edx,edx
c0013849:	75 0d                	jne    c0013858 <Semaphore::tryAcquire()+0x44>
c001384b:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c0013851:	85 d2                	test   edx,edx
c0013853:	75 6b                	jne    c00138c0 <Semaphore::tryAcquire()+0xac>
c0013855:	8d 76 00             	lea    esi,[esi+0x0]
c0013858:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001385d:	85 c0                	test   eax,eax
c001385f:	74 0b                	je     c001386c <Semaphore::tryAcquire()+0x58>
c0013861:	8d 76 00             	lea    esi,[esi+0x0]
c0013864:	31 c0                	xor    eax,eax
c0013866:	83 c4 08             	add    esp,0x8
c0013869:	5b                   	pop    ebx
c001386a:	c3                   	ret    
c001386b:	90                   	nop
c001386c:	fb                   	sti    
c001386d:	83 c4 08             	add    esp,0x8
c0013870:	5b                   	pop    ebx
c0013871:	c3                   	ret    
c0013872:	66 90                	xchg   ax,ax
c0013874:	43                   	inc    ebx
c0013875:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001387b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001387e:	85 d2                	test   edx,edx
c0013880:	75 22                	jne    c00138a4 <Semaphore::tryAcquire()+0x90>
c0013882:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c0013888:	85 c9                	test   ecx,ecx
c001388a:	74 18                	je     c00138a4 <Semaphore::tryAcquire()+0x90>
c001388c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013896:	e8 e9 fe ff ff       	call   c0013784 <schedule()>
c001389b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138a0:	48                   	dec    eax
c00138a1:	8d 76 00             	lea    esi,[esi+0x0]
c00138a4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138a9:	85 c0                	test   eax,eax
c00138ab:	75 0b                	jne    c00138b8 <Semaphore::tryAcquire()+0xa4>
c00138ad:	fb                   	sti    
c00138ae:	b0 01                	mov    al,0x1
c00138b0:	83 c4 08             	add    esp,0x8
c00138b3:	5b                   	pop    ebx
c00138b4:	c3                   	ret    
c00138b5:	8d 76 00             	lea    esi,[esi+0x0]
c00138b8:	b0 01                	mov    al,0x1
c00138ba:	83 c4 08             	add    esp,0x8
c00138bd:	5b                   	pop    ebx
c00138be:	c3                   	ret    
c00138bf:	90                   	nop
c00138c0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138ca:	e8 b5 fe ff ff       	call   c0013784 <schedule()>
c00138cf:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138d4:	48                   	dec    eax
c00138d5:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138da:	85 c0                	test   eax,eax
c00138dc:	75 86                	jne    c0013864 <Semaphore::tryAcquire()+0x50>
c00138de:	eb 8c                	jmp    c001386c <Semaphore::tryAcquire()+0x58>

c00138e0 <Semaphore::assertLocked(char const*)>:
c00138e0:	83 ec 0c             	sub    esp,0xc
c00138e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138e7:	fa                   	cli    
c00138e8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00138ee:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00138f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00138f6:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00138fc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00138fe:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013901:	7c 29                	jl     c001392c <Semaphore::assertLocked(char const*)+0x4c>
c0013903:	90                   	nop
c0013904:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013909:	85 c0                	test   eax,eax
c001390b:	75 0b                	jne    c0013918 <Semaphore::assertLocked(char const*)+0x38>
c001390d:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013912:	85 c0                	test   eax,eax
c0013914:	75 2e                	jne    c0013944 <Semaphore::assertLocked(char const*)+0x64>
c0013916:	66 90                	xchg   ax,ax
c0013918:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001391d:	48                   	dec    eax
c001391e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013923:	75 03                	jne    c0013928 <Semaphore::assertLocked(char const*)+0x48>
c0013925:	fb                   	sti    
c0013926:	66 90                	xchg   ax,ax
c0013928:	83 c4 0c             	add    esp,0xc
c001392b:	c3                   	ret    
c001392c:	83 ec 0c             	sub    esp,0xc
c001392f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013933:	52                   	push   edx
c0013934:	e8 56 c8 ff ff       	call   c001018f <KePanic(char const*)>
c0013939:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001393e:	83 c4 10             	add    esp,0x10
c0013941:	48                   	dec    eax
c0013942:	eb c0                	jmp    c0013904 <Semaphore::assertLocked(char const*)+0x24>
c0013944:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001394e:	e8 31 fe ff ff       	call   c0013784 <schedule()>
c0013953:	eb c3                	jmp    c0013918 <Semaphore::assertLocked(char const*)+0x38>
c0013955:	8d 76 00             	lea    esi,[esi+0x0]

c0013958 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013958:	83 ec 0c             	sub    esp,0xc
c001395b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013960:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013964:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013967:	e8 18 fe ff ff       	call   c0013784 <schedule()>
c001396c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013971:	48                   	dec    eax
c0013972:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013977:	75 03                	jne    c001397c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013979:	fb                   	sti    
c001397a:	66 90                	xchg   ax,ax
c001397c:	83 c4 0c             	add    esp,0xc
c001397f:	c3                   	ret    

c0013980 <blockTask(TaskState)>:
c0013980:	83 ec 0c             	sub    esp,0xc
c0013983:	fa                   	cli    
c0013984:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001398a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001398e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013993:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013996:	e8 e9 fd ff ff       	call   c0013784 <schedule()>
c001399b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139a0:	48                   	dec    eax
c00139a1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139a6:	75 04                	jne    c00139ac <blockTask(TaskState)+0x2c>
c00139a8:	fb                   	sti    
c00139a9:	8d 76 00             	lea    esi,[esi+0x0]
c00139ac:	83 c4 0c             	add    esp,0xc
c00139af:	c3                   	ret    

c00139b0 <waitTask(int, int*, int)>:
c00139b0:	83 ec 18             	sub    esp,0x18
c00139b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139bc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139c8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00139cb:	6a 07                	push   0x7
c00139cd:	e8 ae ff ff ff       	call   c0013980 <blockTask(TaskState)>
c00139d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d7:	83 c4 10             	add    esp,0x10
c00139da:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00139dd:	85 d2                	test   edx,edx
c00139df:	74 0b                	je     c00139ec <waitTask(int, int*, int)+0x3c>
c00139e1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00139e4:	89 02                	mov    DWORD PTR [edx],eax
c00139e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139eb:	90                   	nop
c00139ec:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00139ef:	83 c4 0c             	add    esp,0xc
c00139f2:	c3                   	ret    
c00139f3:	90                   	nop

c00139f4 <milliTenthSleepUntil(unsigned int)>:
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fb:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a01:	76 05                	jbe    c0013a08 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a03:	90                   	nop
c0013a04:	83 c4 0c             	add    esp,0xc
c0013a07:	c3                   	ret    
c0013a08:	fa                   	cli    
c0013a09:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a0f:	83 ec 08             	sub    esp,0x8
c0013a12:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a1e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a21:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a27:	52                   	push   edx
c0013a28:	68 78 51 02 c0       	push   0xc0025178
c0013a2d:	e8 5a 8d 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a32:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a39:	e8 42 ff ff ff       	call   c0013980 <blockTask(TaskState)>
c0013a3e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	48                   	dec    eax
c0013a47:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013a4c:	85 c0                	test   eax,eax
c0013a4e:	75 0c                	jne    c0013a5c <milliTenthSleepUntil(unsigned int)+0x68>
c0013a50:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a55:	85 c0                	test   eax,eax
c0013a57:	75 17                	jne    c0013a70 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a59:	8d 76 00             	lea    esi,[esi+0x0]
c0013a5c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a61:	48                   	dec    eax
c0013a62:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a67:	75 9b                	jne    c0013a04 <milliTenthSleepUntil(unsigned int)+0x10>
c0013a69:	fb                   	sti    
c0013a6a:	83 c4 0c             	add    esp,0xc
c0013a6d:	c3                   	ret    
c0013a6e:	66 90                	xchg   ax,ax
c0013a70:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a7a:	e8 05 fd ff ff       	call   c0013784 <schedule()>
c0013a7f:	eb db                	jmp    c0013a5c <milliTenthSleepUntil(unsigned int)+0x68>
c0013a81:	8d 76 00             	lea    esi,[esi+0x0]

c0013a84 <milliTenthSleep(unsigned int)>:
c0013a84:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013a89:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013a8d:	e9 62 ff ff ff       	jmp    c00139f4 <milliTenthSleepUntil(unsigned int)>
c0013a92:	66 90                	xchg   ax,ax

c0013a94 <sleep(unsigned int)>:
c0013a94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a98:	8d 04 80             	lea    eax,[eax+eax*4]
c0013a9b:	8d 04 80             	lea    eax,[eax+eax*4]
c0013a9e:	8d 04 80             	lea    eax,[eax+eax*4]
c0013aa1:	8d 04 80             	lea    eax,[eax+eax*4]
c0013aa4:	c1 e0 04             	shl    eax,0x4
c0013aa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013aab:	eb d7                	jmp    c0013a84 <milliTenthSleep(unsigned int)>
c0013aad:	90                   	nop
c0013aae:	66 90                	xchg   ax,ax

c0013ab0 <Semaphore::acquire()>:
c0013ab0:	83 ec 0c             	sub    esp,0xc
c0013ab3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ab7:	fa                   	cli    
c0013ab8:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013abd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ac3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ac6:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013acc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013acf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013ad1:	7d 2d                	jge    c0013b00 <Semaphore::acquire()+0x50>
c0013ad3:	41                   	inc    ecx
c0013ad4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013ad7:	90                   	nop
c0013ad8:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013add:	85 c0                	test   eax,eax
c0013adf:	75 0b                	jne    c0013aec <Semaphore::acquire()+0x3c>
c0013ae1:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013ae6:	85 c0                	test   eax,eax
c0013ae8:	75 62                	jne    c0013b4c <Semaphore::acquire()+0x9c>
c0013aea:	66 90                	xchg   ax,ax
c0013aec:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013af1:	48                   	dec    eax
c0013af2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013af7:	75 03                	jne    c0013afc <Semaphore::acquire()+0x4c>
c0013af9:	fb                   	sti    
c0013afa:	66 90                	xchg   ax,ax
c0013afc:	83 c4 0c             	add    esp,0xc
c0013aff:	c3                   	ret    
c0013b00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b05:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b0c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b0f:	85 c9                	test   ecx,ecx
c0013b11:	74 4d                	je     c0013b60 <Semaphore::acquire()+0xb0>
c0013b13:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b16:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b1c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b1f:	90                   	nop
c0013b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b25:	83 ec 0c             	sub    esp,0xc
c0013b28:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b2b:	68 d8 eb 01 c0       	push   0xc001ebd8
c0013b30:	e8 da 69 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0013b35:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b3c:	e8 3f fe ff ff       	call   c0013980 <blockTask(TaskState)>
c0013b41:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b46:	83 c4 10             	add    esp,0x10
c0013b49:	48                   	dec    eax
c0013b4a:	eb 8c                	jmp    c0013ad8 <Semaphore::acquire()+0x28>
c0013b4c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b56:	e8 29 fc ff ff       	call   c0013784 <schedule()>
c0013b5b:	eb 8f                	jmp    c0013aec <Semaphore::acquire()+0x3c>
c0013b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b65:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b68:	eb b6                	jmp    c0013b20 <Semaphore::acquire()+0x70>
c0013b6a:	66 90                	xchg   ax,ax

c0013b6c <taskReturned>:
c0013b6c:	83 ec 18             	sub    esp,0x18
c0013b6f:	68 f8 eb 01 c0       	push   0xc001ebf8
c0013b74:	e8 16 c6 ff ff       	call   c001018f <KePanic(char const*)>
c0013b79:	83 c4 10             	add    esp,0x10
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	6a 02                	push   0x2
c0013b81:	e8 fa fd ff ff       	call   c0013980 <blockTask(TaskState)>
c0013b86:	fa                   	cli    
c0013b87:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013b8d:	e8 f2 fb ff ff       	call   c0013784 <schedule()>
c0013b92:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	48                   	dec    eax
c0013b9b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013ba0:	85 c0                	test   eax,eax
c0013ba2:	75 d8                	jne    c0013b7c <taskReturned+0x10>
c0013ba4:	fb                   	sti    
c0013ba5:	eb d5                	jmp    c0013b7c <taskReturned+0x10>
c0013ba7:	90                   	nop

c0013ba8 <Thr::processFromPID(int)>:
c0013ba8:	57                   	push   edi
c0013ba9:	56                   	push   esi
c0013baa:	53                   	push   ebx
c0013bab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013baf:	fa                   	cli    
c0013bb0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bb6:	83 ec 0c             	sub    esp,0xc
c0013bb9:	68 84 51 02 c0       	push   0xc0025184
c0013bbe:	e8 09 8b 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bc3:	83 c4 10             	add    esp,0x10
c0013bc6:	89 c7                	mov    edi,eax
c0013bc8:	eb 16                	jmp    c0013be0 <Thr::processFromPID(int)+0x38>
c0013bca:	66 90                	xchg   ax,ax
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	68 84 51 02 c0       	push   0xc0025184
c0013bd4:	e8 f3 8a 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bd9:	83 c4 10             	add    esp,0x10
c0013bdc:	39 f8                	cmp    eax,edi
c0013bde:	74 4c                	je     c0013c2c <Thr::processFromPID(int)+0x84>
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	68 84 51 02 c0       	push   0xc0025184
c0013be8:	e8 df 8a 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bed:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013bf4:	89 c3                	mov    ebx,eax
c0013bf6:	e8 d9 8a 00 00       	call   c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013bfb:	58                   	pop    eax
c0013bfc:	5a                   	pop    edx
c0013bfd:	53                   	push   ebx
c0013bfe:	68 84 51 02 c0       	push   0xc0025184
c0013c03:	e8 84 8b 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c08:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c0b:	83 c4 10             	add    esp,0x10
c0013c0e:	39 30                	cmp    DWORD PTR [eax],esi
c0013c10:	75 ba                	jne    c0013bcc <Thr::processFromPID(int)+0x24>
c0013c12:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c17:	48                   	dec    eax
c0013c18:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c1d:	74 09                	je     c0013c28 <Thr::processFromPID(int)+0x80>
c0013c1f:	90                   	nop
c0013c20:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c23:	5b                   	pop    ebx
c0013c24:	5e                   	pop    esi
c0013c25:	5f                   	pop    edi
c0013c26:	c3                   	ret    
c0013c27:	90                   	nop
c0013c28:	fb                   	sti    
c0013c29:	eb f5                	jmp    c0013c20 <Thr::processFromPID(int)+0x78>
c0013c2b:	90                   	nop
c0013c2c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c31:	48                   	dec    eax
c0013c32:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c37:	75 07                	jne    c0013c40 <Thr::processFromPID(int)+0x98>
c0013c39:	fb                   	sti    
c0013c3a:	5b                   	pop    ebx
c0013c3b:	5e                   	pop    esi
c0013c3c:	5f                   	pop    edi
c0013c3d:	c3                   	ret    
c0013c3e:	66 90                	xchg   ax,ax
c0013c40:	5b                   	pop    ebx
c0013c41:	31 c0                	xor    eax,eax
c0013c43:	5e                   	pop    esi
c0013c44:	5f                   	pop    edi
c0013c45:	c3                   	ret    
c0013c46:	66 90                	xchg   ax,ax

c0013c48 <unblockTask(ThreadControlBlock*)>:
c0013c48:	53                   	push   ebx
c0013c49:	83 ec 08             	sub    esp,0x8
c0013c4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c50:	fa                   	cli    
c0013c51:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c57:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c5a:	85 c0                	test   eax,eax
c0013c5c:	74 66                	je     c0013cc4 <unblockTask(ThreadControlBlock*)+0x7c>
c0013c5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c61:	48                   	dec    eax
c0013c62:	74 38                	je     c0013c9c <unblockTask(ThreadControlBlock*)+0x54>
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	68 84 51 02 c0       	push   0xc0025184
c0013c6c:	e8 5b 8a 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	85 c0                	test   eax,eax
c0013c76:	75 1c                	jne    c0013c94 <unblockTask(ThreadControlBlock*)+0x4c>
c0013c78:	eb 5e                	jmp    c0013cd8 <unblockTask(ThreadControlBlock*)+0x90>
c0013c7a:	66 90                	xchg   ax,ax
c0013c7c:	83 ec 08             	sub    esp,0x8
c0013c7f:	50                   	push   eax
c0013c80:	68 84 51 02 c0       	push   0xc0025184
c0013c85:	e8 f2 8d 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c8a:	83 c4 10             	add    esp,0x10
c0013c8d:	85 c0                	test   eax,eax
c0013c8f:	74 47                	je     c0013cd8 <unblockTask(ThreadControlBlock*)+0x90>
c0013c91:	8d 76 00             	lea    esi,[esi+0x0]
c0013c94:	39 c3                	cmp    ebx,eax
c0013c96:	75 e4                	jne    c0013c7c <unblockTask(ThreadControlBlock*)+0x34>
c0013c98:	eb 12                	jmp    c0013cac <unblockTask(ThreadControlBlock*)+0x64>
c0013c9a:	66 90                	xchg   ax,ax
c0013c9c:	83 ec 0c             	sub    esp,0xc
c0013c9f:	68 7a eb 01 c0       	push   0xc001eb7a
c0013ca4:	e8 66 68 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0013ca9:	83 c4 10             	add    esp,0x10
c0013cac:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013cb1:	48                   	dec    eax
c0013cb2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013cb7:	75 03                	jne    c0013cbc <unblockTask(ThreadControlBlock*)+0x74>
c0013cb9:	fb                   	sti    
c0013cba:	66 90                	xchg   ax,ax
c0013cbc:	83 c4 08             	add    esp,0x8
c0013cbf:	5b                   	pop    ebx
c0013cc0:	c3                   	ret    
c0013cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cc4:	83 ec 0c             	sub    esp,0xc
c0013cc7:	68 63 eb 01 c0       	push   0xc001eb63
c0013ccc:	e8 3e 68 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0013cd1:	83 c4 10             	add    esp,0x10
c0013cd4:	eb d6                	jmp    c0013cac <unblockTask(ThreadControlBlock*)+0x64>
c0013cd6:	66 90                	xchg   ax,ax
c0013cd8:	83 ec 08             	sub    esp,0x8
c0013cdb:	53                   	push   ebx
c0013cdc:	68 84 51 02 c0       	push   0xc0025184
c0013ce1:	e8 a6 8a 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ce6:	83 c4 10             	add    esp,0x10
c0013ce9:	eb c1                	jmp    c0013cac <unblockTask(ThreadControlBlock*)+0x64>
c0013ceb:	90                   	nop

c0013cec <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013cec:	55                   	push   ebp
c0013ced:	57                   	push   edi
c0013cee:	56                   	push   esi
c0013cef:	53                   	push   ebx
c0013cf0:	83 ec 1c             	sub    esp,0x1c
c0013cf3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013cf7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cfa:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d00:	85 ed                	test   ebp,ebp
c0013d02:	7e 24                	jle    c0013d28 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d04:	31 f6                	xor    esi,esi
c0013d06:	66 90                	xchg   ax,ax
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d12:	46                   	inc    esi
c0013d13:	57                   	push   edi
c0013d14:	e8 b0 3a ff ff       	call   c00077c9 <free>
c0013d19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d1c:	83 c4 10             	add    esp,0x10
c0013d1f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d25:	7f e1                	jg     c0013d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d27:	90                   	nop
c0013d28:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d32:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d37:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d3d:	d3 c0                	rol    eax,cl
c0013d3f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d46:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d49:	89 f7                	mov    edi,esi
c0013d4b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d53:	0f 85 77 01 00 00    	jne    c0013ed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d59:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d5f:	85 ed                	test   ebp,ebp
c0013d61:	74 1d                	je     c0013d80 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013d63:	83 ec 0c             	sub    esp,0xc
c0013d66:	55                   	push   ebp
c0013d67:	e8 34 c1 ff ff       	call   c000fea0 <EnvVarContainer::~EnvVarContainer()>
c0013d6c:	59                   	pop    ecx
c0013d6d:	5e                   	pop    esi
c0013d6e:	6a 0c                	push   0xc
c0013d70:	55                   	push   ebp
c0013d71:	e8 a3 66 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c0013d76:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	89 f7                	mov    edi,esi
c0013d7e:	66 90                	xchg   ax,ax
c0013d80:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013d86:	85 c0                	test   eax,eax
c0013d88:	0f 84 b6 00 00 00    	je     c0013e44 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013d8e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013d91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013d95:	31 c9                	xor    ecx,ecx
c0013d97:	eb 17                	jmp    c0013db0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013d99:	8d 76 00             	lea    esi,[esi+0x0]
c0013d9c:	41                   	inc    ecx
c0013d9d:	83 f9 10             	cmp    ecx,0x10
c0013da0:	0f 84 9e 00 00 00    	je     c0013e44 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013da6:	66 90                	xchg   ax,ax
c0013da8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dae:	66 90                	xchg   ax,ax
c0013db0:	31 d2                	xor    edx,edx
c0013db2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013db9:	d3 fa                	sar    edx,cl
c0013dbb:	83 e2 01             	and    edx,0x1
c0013dbe:	74 dc                	je     c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013dc0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013dc3:	01 d2                	add    edx,edx
c0013dc5:	01 ca                	add    edx,ecx
c0013dc7:	8d 14 92             	lea    edx,[edx+edx*4]
c0013dca:	01 d0                	add    eax,edx
c0013dcc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013dd2:	83 fd 07             	cmp    ebp,0x7
c0013dd5:	75 c5                	jne    c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013dd7:	05 40 02 00 00       	add    eax,0x240
c0013ddc:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013ddf:	83 fd ff             	cmp    ebp,0xffffffff
c0013de2:	0f 8c f0 00 00 00    	jl     c0013ed8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013de8:	0f 84 ae 01 00 00    	je     c0013f9c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013dee:	85 ed                	test   ebp,ebp
c0013df0:	0f 84 92 01 00 00    	je     c0013f88 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013df6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013df8:	75 a2                	jne    c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013dfa:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e04:	01 d0                	add    eax,edx
c0013e06:	66 90                	xchg   ax,ax
c0013e08:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e0c:	83 ec 0c             	sub    esp,0xc
c0013e0f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e15:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e18:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e1e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e25:	50                   	push   eax
c0013e26:	e8 1d fe ff ff       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c0013e2b:	83 c4 10             	add    esp,0x10
c0013e2e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e35:	89 f7                	mov    edi,esi
c0013e37:	41                   	inc    ecx
c0013e38:	83 f9 10             	cmp    ecx,0x10
c0013e3b:	0f 85 67 ff ff ff    	jne    c0013da8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e41:	8d 76 00             	lea    esi,[esi+0x0]
c0013e44:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e4a:	85 c0                	test   eax,eax
c0013e4c:	74 62                	je     c0013eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e4e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e54:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e5a:	74 54                	je     c0013eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	68 84 51 02 c0       	push   0xc0025184
c0013e64:	e8 63 88 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e69:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013e70:	89 c7                	mov    edi,eax
c0013e72:	e8 39 88 00 00       	call   c001c6b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013e77:	83 c4 10             	add    esp,0x10
c0013e7a:	84 c0                	test   al,al
c0013e7c:	0f 84 ce 00 00 00    	je     c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013e82:	66 90                	xchg   ax,ax
c0013e84:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e87:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013e8d:	85 d2                	test   edx,edx
c0013e8f:	74 0f                	je     c0013ea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013e91:	83 ec 0c             	sub    esp,0xc
c0013e94:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e96:	52                   	push   edx
c0013e97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e9a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e9d:	83 c4 10             	add    esp,0x10
c0013ea0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013eaa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ead:	8d 76 00             	lea    esi,[esi+0x0]
c0013eb0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013eb6:	85 db                	test   ebx,ebx
c0013eb8:	74 16                	je     c0013ed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013eba:	83 ec 0c             	sub    esp,0xc
c0013ebd:	53                   	push   ebx
c0013ebe:	e8 f3 58 ff ff       	call   c00097b6 <VAS::~VAS()>
c0013ec3:	58                   	pop    eax
c0013ec4:	5a                   	pop    edx
c0013ec5:	6a 14                	push   0x14
c0013ec7:	53                   	push   ebx
c0013ec8:	e8 4c 65 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c0013ecd:	83 c4 10             	add    esp,0x10
c0013ed0:	83 c4 1c             	add    esp,0x1c
c0013ed3:	5b                   	pop    ebx
c0013ed4:	5e                   	pop    esi
c0013ed5:	5f                   	pop    edi
c0013ed6:	5d                   	pop    ebp
c0013ed7:	c3                   	ret    
c0013ed8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	68 2c ec 01 c0       	push   0xc001ec2c
c0013ee4:	e8 a6 c2 ff ff       	call   c001018f <KePanic(char const*)>
c0013ee9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	89 f7                	mov    edi,esi
c0013ef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ef5:	e9 a2 fe ff ff       	jmp    c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013efa:	66 90                	xchg   ax,ax
c0013efc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f02:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f08:	75 1e                	jne    c0013f28 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f0a:	83 ec 0c             	sub    esp,0xc
c0013f0d:	68 94 ec 01 c0       	push   0xc001ec94
c0013f12:	e8 f8 65 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0013f17:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f1e:	e8 5d fa ff ff       	call   c0013980 <blockTask(TaskState)>
c0013f23:	83 c4 10             	add    esp,0x10
c0013f26:	66 90                	xchg   ax,ax
c0013f28:	83 ec 08             	sub    esp,0x8
c0013f2b:	56                   	push   esi
c0013f2c:	68 84 51 02 c0       	push   0xc0025184
c0013f31:	e8 56 88 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f36:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f3d:	e8 8a 87 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f42:	83 c4 10             	add    esp,0x10
c0013f45:	39 f8                	cmp    eax,edi
c0013f47:	0f 84 37 ff ff ff    	je     c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	68 84 51 02 c0       	push   0xc0025184
c0013f58:	e8 6f 87 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f5d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f64:	89 c6                	mov    esi,eax
c0013f66:	e8 69 87 00 00       	call   c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f6b:	83 c4 10             	add    esp,0x10
c0013f6e:	39 f3                	cmp    ebx,esi
c0013f70:	74 b6                	je     c0013f28 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f72:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013f75:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f78:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013f7e:	75 a8                	jne    c0013f28 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f80:	e9 77 ff ff ff       	jmp    c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013f85:	8d 76 00             	lea    esi,[esi+0x0]
c0013f88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	68 60 ec 01 c0       	push   0xc001ec60
c0013f94:	e9 4b ff ff ff       	jmp    c0013ee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013f99:	8d 76 00             	lea    esi,[esi+0x0]
c0013f9c:	8b 36                	mov    esi,DWORD PTR [esi]
c0013f9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fa2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fa5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fa8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fae:	01 d7                	add    edi,edx
c0013fb0:	89 f8                	mov    eax,edi
c0013fb2:	e9 51 fe ff ff       	jmp    c0013e08 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013fb7:	90                   	nop

c0013fb8 <cleanerTaskFunction(void*)>:
c0013fb8:	53                   	push   ebx
c0013fb9:	83 ec 08             	sub    esp,0x8
c0013fbc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fc1:	48                   	dec    eax
c0013fc2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013fc7:	75 03                	jne    c0013fcc <cleanerTaskFunction(void*)+0x14>
c0013fc9:	fb                   	sti    
c0013fca:	66 90                	xchg   ax,ax
c0013fcc:	fa                   	cli    
c0013fcd:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fd2:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0013fd9:	8d 50 01             	lea    edx,[eax+0x1]
c0013fdc:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0013fe2:	0f 84 ac 00 00 00    	je     c0014094 <cleanerTaskFunction(void*)+0xdc>
c0013fe8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013fed:	85 c0                	test   eax,eax
c0013fef:	75 03                	jne    c0013ff4 <cleanerTaskFunction(void*)+0x3c>
c0013ff1:	fb                   	sti    
c0013ff2:	66 90                	xchg   ax,ax
c0013ff4:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c0013ffb:	fa                   	cli    
c0013ffc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014002:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014008:	fa                   	cli    
c0014009:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001400f:	eb 2b                	jmp    c001403c <cleanerTaskFunction(void*)+0x84>
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	68 6c 51 02 c0       	push   0xc002516c
c001401c:	e8 ab 86 00 00       	call   c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014021:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c0014028:	89 c3                	mov    ebx,eax
c001402a:	e8 a5 86 00 00       	call   c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001402f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014032:	e8 b5 fc ff ff       	call   c0013cec <cleanupTerminatedTask(ThreadControlBlock*)>
c0014037:	83 c4 10             	add    esp,0x10
c001403a:	66 90                	xchg   ax,ax
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	68 6c 51 02 c0       	push   0xc002516c
c0014044:	e8 67 86 00 00       	call   c001c6b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	84 c0                	test   al,al
c001404e:	74 c4                	je     c0014014 <cleanerTaskFunction(void*)+0x5c>
c0014050:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014055:	48                   	dec    eax
c0014056:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001405b:	75 03                	jne    c0014060 <cleanerTaskFunction(void*)+0xa8>
c001405d:	fb                   	sti    
c001405e:	66 90                	xchg   ax,ax
c0014060:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014065:	48                   	dec    eax
c0014066:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001406b:	0f 85 4b ff ff ff    	jne    c0013fbc <cleanerTaskFunction(void*)+0x4>
c0014071:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0014076:	85 c0                	test   eax,eax
c0014078:	0f 84 3e ff ff ff    	je     c0013fbc <cleanerTaskFunction(void*)+0x4>
c001407e:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014088:	e8 f7 f6 ff ff       	call   c0013784 <schedule()>
c001408d:	e9 2a ff ff ff       	jmp    c0013fbc <cleanerTaskFunction(void*)+0x4>
c0014092:	66 90                	xchg   ax,ax
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	6a 02                	push   0x2
c0014099:	e8 ba f8 ff ff       	call   c0013958 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	e9 4e ff ff ff       	jmp    c0013ff4 <cleanerTaskFunction(void*)+0x3c>
c00140a6:	66 90                	xchg   ax,ax

c00140a8 <terminateTask(int)>:
c00140a8:	83 ec 14             	sub    esp,0x14
c00140ab:	fa                   	cli    
c00140ac:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140b2:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00140b8:	fa                   	cli    
c00140b9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140c8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00140cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00140d3:	50                   	push   eax
c00140d4:	68 6c 51 02 c0       	push   0xc002516c
c00140d9:	e8 ae 86 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00140ed:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c00140f2:	85 c0                	test   eax,eax
c00140f4:	74 5e                	je     c0014154 <terminateTask(int)+0xac>
c00140f6:	83 ec 0c             	sub    esp,0xc
c00140f9:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014100:	50                   	push   eax
c0014101:	e8 42 fb ff ff       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c0014106:	83 c4 10             	add    esp,0x10
c0014109:	8d 76 00             	lea    esi,[esi+0x0]
c001410c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014111:	48                   	dec    eax
c0014112:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014117:	75 03                	jne    c001411c <terminateTask(int)+0x74>
c0014119:	fb                   	sti    
c001411a:	66 90                	xchg   ax,ax
c001411c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014121:	48                   	dec    eax
c0014122:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014127:	75 0b                	jne    c0014134 <terminateTask(int)+0x8c>
c0014129:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0014130:	75 36                	jne    c0014168 <terminateTask(int)+0xc0>
c0014132:	66 90                	xchg   ax,ax
c0014134:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014139:	48                   	dec    eax
c001413a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001413f:	75 03                	jne    c0014144 <terminateTask(int)+0x9c>
c0014141:	fb                   	sti    
c0014142:	66 90                	xchg   ax,ax
c0014144:	fa                   	cli    
c0014145:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001414b:	90                   	nop
c001414c:	e8 33 f6 ff ff       	call   c0013784 <schedule()>
c0014151:	eb e1                	jmp    c0014134 <terminateTask(int)+0x8c>
c0014153:	90                   	nop
c0014154:	83 ec 0c             	sub    esp,0xc
c0014157:	68 91 eb 01 c0       	push   0xc001eb91
c001415c:	e8 ae 63 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014161:	83 c4 10             	add    esp,0x10
c0014164:	eb a6                	jmp    c001410c <terminateTask(int)+0x64>
c0014166:	66 90                	xchg   ax,ax
c0014168:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014172:	eb d8                	jmp    c001414c <terminateTask(int)+0xa4>

c0014174 <Thr::terminateFromIRQ(int)>:
c0014174:	83 ec 18             	sub    esp,0x18
c0014177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001417b:	50                   	push   eax
c001417c:	e8 27 ff ff ff       	call   c00140a8 <terminateTask(int)>
c0014181:	90                   	nop
c0014182:	66 90                	xchg   ax,ax

c0014184 <Semaphore::release()>:
c0014184:	83 ec 0c             	sub    esp,0xc
c0014187:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001418b:	fa                   	cli    
c001418c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014191:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014197:	8d 48 01             	lea    ecx,[eax+0x1]
c001419a:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00141a0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141a3:	85 c9                	test   ecx,ecx
c00141a5:	74 41                	je     c00141e8 <Semaphore::release()+0x64>
c00141a7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141aa:	83 ec 0c             	sub    esp,0xc
c00141ad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141b0:	51                   	push   ecx
c00141b1:	e8 92 fa ff ff       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c00141b6:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141bb:	83 c4 10             	add    esp,0x10
c00141be:	48                   	dec    eax
c00141bf:	90                   	nop
c00141c0:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00141c5:	85 c0                	test   eax,eax
c00141c7:	75 0b                	jne    c00141d4 <Semaphore::release()+0x50>
c00141c9:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00141ce:	85 c0                	test   eax,eax
c00141d0:	75 1e                	jne    c00141f0 <Semaphore::release()+0x6c>
c00141d2:	66 90                	xchg   ax,ax
c00141d4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141d9:	48                   	dec    eax
c00141da:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141df:	75 03                	jne    c00141e4 <Semaphore::release()+0x60>
c00141e1:	fb                   	sti    
c00141e2:	66 90                	xchg   ax,ax
c00141e4:	83 c4 0c             	add    esp,0xc
c00141e7:	c3                   	ret    
c00141e8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00141eb:	eb d3                	jmp    c00141c0 <Semaphore::release()+0x3c>
c00141ed:	8d 76 00             	lea    esi,[esi+0x0]
c00141f0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00141fa:	e8 85 f5 ff ff       	call   c0013784 <schedule()>
c00141ff:	eb d3                	jmp    c00141d4 <Semaphore::release()+0x50>
c0014201:	8d 76 00             	lea    esi,[esi+0x0]

c0014204 <__static_initialization_and_destruction_0(int, int)>:
c0014204:	83 ec 0c             	sub    esp,0xc
c0014207:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001420c:	0f 85 8e 00 00 00    	jne    c00142a0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014212:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001421a:	0f 85 80 00 00 00    	jne    c00142a0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014220:	83 ec 0c             	sub    esp,0xc
c0014223:	68 84 51 02 c0       	push   0xc0025184
c0014228:	e8 0b 88 00 00       	call   c001ca38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001422d:	83 c4 10             	add    esp,0x10
c0014230:	83 ec 04             	sub    esp,0x4
c0014233:	68 44 f7 01 c0       	push   0xc001f744
c0014238:	68 84 51 02 c0       	push   0xc0025184
c001423d:	68 e8 c9 01 c0       	push   0xc001c9e8
c0014242:	e8 82 61 ff ff       	call   c000a3c9 <__cxa_atexit>
c0014247:	83 c4 10             	add    esp,0x10
c001424a:	83 ec 0c             	sub    esp,0xc
c001424d:	68 78 51 02 c0       	push   0xc0025178
c0014252:	e8 e1 87 00 00       	call   c001ca38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014257:	83 c4 10             	add    esp,0x10
c001425a:	83 ec 04             	sub    esp,0x4
c001425d:	68 44 f7 01 c0       	push   0xc001f744
c0014262:	68 78 51 02 c0       	push   0xc0025178
c0014267:	68 e8 c9 01 c0       	push   0xc001c9e8
c001426c:	e8 58 61 ff ff       	call   c000a3c9 <__cxa_atexit>
c0014271:	83 c4 10             	add    esp,0x10
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	68 6c 51 02 c0       	push   0xc002516c
c001427c:	e8 b7 87 00 00       	call   c001ca38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014281:	83 c4 10             	add    esp,0x10
c0014284:	83 ec 04             	sub    esp,0x4
c0014287:	68 44 f7 01 c0       	push   0xc001f744
c001428c:	68 6c 51 02 c0       	push   0xc002516c
c0014291:	68 e8 c9 01 c0       	push   0xc001c9e8
c0014296:	e8 2e 61 ff ff       	call   c000a3c9 <__cxa_atexit>
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	66 90                	xchg   ax,ax
c00142a0:	90                   	nop
c00142a1:	83 c4 0c             	add    esp,0xc
c00142a4:	c3                   	ret    
c00142a5:	8d 76 00             	lea    esi,[esi+0x0]

c00142a8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142a8:	83 ec 0c             	sub    esp,0xc
c00142ab:	83 ec 08             	sub    esp,0x8
c00142ae:	68 ff ff 00 00       	push   0xffff
c00142b3:	6a 01                	push   0x1
c00142b5:	e8 4a ff ff ff       	call   c0014204 <__static_initialization_and_destruction_0(int, int)>
c00142ba:	83 c4 10             	add    esp,0x10
c00142bd:	83 c4 0c             	add    esp,0xc
c00142c0:	c3                   	ret    

c00142c1 <Vm::inbv(unsigned short)>:
c00142c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142c5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142ca:	75 06                	jne    c00142d2 <Vm::inbv(unsigned short)+0x11>
c00142cc:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00142d1:	c3                   	ret    
c00142d2:	ec                   	in     al,dx
c00142d3:	c3                   	ret    

c00142d4 <Vm::outbv(unsigned short, unsigned char)>:
c00142d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142dc:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142e1:	75 25                	jne    c0014308 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00142e3:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00142e9:	8d 51 01             	lea    edx,[ecx+0x1]
c00142ec:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c00142f2:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c00142f8:	83 fa 20             	cmp    edx,0x20
c00142fb:	75 0c                	jne    c0014309 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00142fd:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c0014307:	c3                   	ret    
c0014308:	ee                   	out    dx,al
c0014309:	c3                   	ret    

c001430a <Vm::realToLinear(unsigned short, unsigned short)>:
c001430a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001430f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014314:	c1 e0 04             	shl    eax,0x4
c0014317:	01 d0                	add    eax,edx
c0014319:	c3                   	ret    

c001431a <Vm::getSegment(unsigned int)>:
c001431a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001431e:	c1 e8 10             	shr    eax,0x10
c0014321:	c3                   	ret    

c0014322 <Vm::getOffset(unsigned int)>:
c0014322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014326:	c3                   	ret    

c0014327 <Vm::mainloop2()>:
c0014327:	83 ec 18             	sub    esp,0x18
c001432a:	fa                   	cli    
c001432b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014331:	6a 02                	push   0x2
c0014333:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c001433a:	e8 19 f6 ff ff       	call   c0013958 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001433f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014344:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014348:	52                   	push   edx
c0014349:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001434d:	52                   	push   edx
c001434e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014352:	52                   	push   edx
c0014353:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014357:	50                   	push   eax
c0014358:	e8 b2 be fe ff       	call   c000020f <goToVM86>
c001435d:	83 c4 2c             	add    esp,0x2c
c0014360:	c3                   	ret    

c0014361 <Vm::mainVm8086Loop(void*)>:
c0014361:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014366:	48                   	dec    eax
c0014367:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001436c:	75 01                	jne    c001436f <Vm::mainVm8086Loop(void*)+0xe>
c001436e:	fb                   	sti    
c001436f:	eb b6                	jmp    c0014327 <Vm::mainloop2()>

c0014371 <Vm::mainloop3(unsigned long)>:
c0014371:	83 ec 18             	sub    esp,0x18
c0014374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014378:	fa                   	cli    
c0014379:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001437f:	6a 02                	push   0x2
c0014381:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c0014388:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c001438d:	e8 c6 f5 ff ff       	call   c0013958 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014392:	83 c4 1c             	add    esp,0x1c
c0014395:	eb 90                	jmp    c0014327 <Vm::mainloop2()>

c0014397 <Vm::initialise8086()>:
c0014397:	83 ec 0c             	sub    esp,0xc
c001439a:	68 80 00 00 00       	push   0x80
c001439f:	6a 00                	push   0x0
c00143a1:	68 61 43 01 c0       	push   0xc0014361
c00143a6:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00143ac:	e8 b3 f1 ff ff       	call   c0013564 <Process::createThread(void (*)(void*), void*, int)>
c00143b1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143b8:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00143bd:	68 00 01 00 00       	push   0x100
c00143c2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00143c7:	6a 00                	push   0x0
c00143c9:	6a 00                	push   0x0
c00143cb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143d1:	e8 3e 58 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00143d6:	83 c4 2c             	add    esp,0x2c
c00143d9:	c3                   	ret    

c00143da <Vm::finish8086()>:
c00143da:	53                   	push   ebx
c00143db:	83 ec 08             	sub    esp,0x8
c00143de:	fa                   	cli    
c00143df:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143e5:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c00143ec:	75 15                	jne    c0014403 <Vm::finish8086()+0x29>
c00143ee:	e8 91 f3 ff ff       	call   c0013784 <schedule()>
c00143f3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00143f8:	48                   	dec    eax
c00143f9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00143fe:	75 de                	jne    c00143de <Vm::finish8086()+0x4>
c0014400:	fb                   	sti    
c0014401:	eb db                	jmp    c00143de <Vm::finish8086()+0x4>
c0014403:	83 ec 0c             	sub    esp,0xc
c0014406:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c001440c:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014412:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014419:	e8 2a f8 ff ff       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c001441e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014423:	83 c4 10             	add    esp,0x10
c0014426:	8d 50 ff             	lea    edx,[eax-0x1]
c0014429:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001442f:	85 d2                	test   edx,edx
c0014431:	75 01                	jne    c0014434 <Vm::finish8086()+0x5a>
c0014433:	fb                   	sti    
c0014434:	89 d8                	mov    eax,ebx
c0014436:	83 c4 08             	add    esp,0x8
c0014439:	5b                   	pop    ebx
c001443a:	c3                   	ret    

c001443b <Vm::getOutput8086(unsigned char*)>:
c001443b:	57                   	push   edi
c001443c:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014442:	56                   	push   esi
c0014443:	be e0 51 02 c0       	mov    esi,0xc00251e0
c0014448:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001444c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001444e:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c0014453:	5e                   	pop    esi
c0014454:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001445e:	5f                   	pop    edi
c001445f:	c3                   	ret    

c0014460 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014460:	55                   	push   ebp
c0014461:	57                   	push   edi
c0014462:	56                   	push   esi
c0014463:	53                   	push   ebx
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001446b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001446f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014473:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014477:	fa                   	cli    
c0014478:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001447e:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c0014485:	75 15                	jne    c001449c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014487:	e8 f8 f2 ff ff       	call   c0013784 <schedule()>
c001448c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014491:	48                   	dec    eax
c0014492:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014497:	75 de                	jne    c0014477 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014499:	fb                   	sti    
c001449a:	eb db                	jmp    c0014477 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001449c:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00144a1:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144ab:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144af:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144b3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144b7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144bb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144bf:	0f b7 ff             	movzx  edi,di
c00144c2:	0f b7 f6             	movzx  esi,si
c00144c5:	50                   	push   eax
c00144c6:	6a 20                	push   0x20
c00144c8:	6a 00                	push   0x0
c00144ca:	68 e0 51 02 c0       	push   0xc00251e0
c00144cf:	e8 fc bf fe ff       	call   c00004d0 <memset>
c00144d4:	5a                   	pop    edx
c00144d5:	59                   	pop    ecx
c00144d6:	57                   	push   edi
c00144d7:	56                   	push   esi
c00144d8:	e8 2d fe ff ff       	call   c001430a <Vm::realToLinear(unsigned short, unsigned short)>
c00144dd:	83 c4 10             	add    esp,0x10
c00144e0:	89 c7                	mov    edi,eax
c00144e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00144ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144ec:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144f1:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c00144f8:	48                   	dec    eax
c00144f9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144fe:	75 01                	jne    c0014501 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014500:	fb                   	sti    
c0014501:	83 ec 0c             	sub    esp,0xc
c0014504:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001450a:	e8 39 f7 ff ff       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c001450f:	83 c4 1c             	add    esp,0x1c
c0014512:	b0 01                	mov    al,0x1
c0014514:	5b                   	pop    ebx
c0014515:	5e                   	pop    esi
c0014516:	5f                   	pop    edi
c0014517:	5d                   	pop    ebp
c0014518:	c3                   	ret    

c0014519 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014519:	55                   	push   ebp
c001451a:	57                   	push   edi
c001451b:	56                   	push   esi
c001451c:	53                   	push   ebx
c001451d:	83 ec 2c             	sub    esp,0x2c
c0014520:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014524:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014528:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001452c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014530:	fa                   	cli    
c0014531:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014537:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c001453e:	89 f0                	mov    eax,esi
c0014540:	84 c0                	test   al,al
c0014542:	75 1d                	jne    c0014561 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014544:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014548:	e8 37 f2 ff ff       	call   c0013784 <schedule()>
c001454d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014552:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014556:	48                   	dec    eax
c0014557:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001455c:	75 d2                	jne    c0014530 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001455e:	fb                   	sti    
c001455f:	eb cf                	jmp    c0014530 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014561:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014566:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014570:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014574:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014578:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001457c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014580:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014584:	50                   	push   eax
c0014585:	6a 20                	push   0x20
c0014587:	6a 00                	push   0x0
c0014589:	68 e0 51 02 c0       	push   0xc00251e0
c001458e:	e8 3d bf fe ff       	call   c00004d0 <memset>
c0014593:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001459a:	e8 1a 32 ff ff       	call   c00077b9 <malloc>
c001459f:	83 c4 0c             	add    esp,0xc
c00145a2:	89 c3                	mov    ebx,eax
c00145a4:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00145aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145ae:	50                   	push   eax
c00145af:	e8 d0 64 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c00145b4:	83 c4 10             	add    esp,0x10
c00145b7:	85 db                	test   ebx,ebx
c00145b9:	75 0a                	jne    c00145c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145bb:	83 ec 0c             	sub    esp,0xc
c00145be:	68 bc ec 01 c0       	push   0xc001ecbc
c00145c3:	eb 3e                	jmp    c0014603 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145c5:	50                   	push   eax
c00145c6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00145ca:	50                   	push   eax
c00145cb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145cf:	50                   	push   eax
c00145d0:	53                   	push   ebx
c00145d1:	e8 1a 68 ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00145de:	74 0a                	je     c00145ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00145e0:	83 ec 0c             	sub    esp,0xc
c00145e3:	68 d0 ec 01 c0       	push   0xc001ecd0
c00145e8:	eb 19                	jmp    c0014603 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145ea:	51                   	push   ecx
c00145eb:	51                   	push   ecx
c00145ec:	6a 01                	push   0x1
c00145ee:	53                   	push   ebx
c00145ef:	e8 50 65 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	85 c0                	test   eax,eax
c00145f9:	74 24                	je     c001461f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00145fb:	83 ec 0c             	sub    esp,0xc
c00145fe:	68 e9 ec 01 c0       	push   0xc001ece9
c0014603:	e8 87 bb ff ff       	call   c001018f <KePanic(char const*)>
c0014608:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001460d:	83 c4 10             	add    esp,0x10
c0014610:	48                   	dec    eax
c0014611:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014616:	85 c0                	test   eax,eax
c0014618:	75 01                	jne    c001461b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001461a:	fb                   	sti    
c001461b:	31 f6                	xor    esi,esi
c001461d:	eb 58                	jmp    c0014677 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001461f:	0f b7 ed             	movzx  ebp,bp
c0014622:	50                   	push   eax
c0014623:	0f b7 ff             	movzx  edi,di
c0014626:	50                   	push   eax
c0014627:	55                   	push   ebp
c0014628:	57                   	push   edi
c0014629:	e8 dc fc ff ff       	call   c001430a <Vm::realToLinear(unsigned short, unsigned short)>
c001462e:	5a                   	pop    edx
c001462f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014631:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014635:	51                   	push   ecx
c0014636:	50                   	push   eax
c0014637:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001463b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001463f:	53                   	push   ebx
c0014640:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014643:	83 c4 14             	add    esp,0x14
c0014646:	53                   	push   ebx
c0014647:	e8 56 65 ff ff       	call   c000aba2 <File::close()>
c001464c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	48                   	dec    eax
c0014655:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c001465c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014661:	85 c0                	test   eax,eax
c0014663:	75 01                	jne    c0014666 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014665:	fb                   	sti    
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001466f:	e8 d4 f5 ff ff       	call   c0013c48 <unblockTask(ThreadControlBlock*)>
c0014674:	83 c4 10             	add    esp,0x10
c0014677:	83 c4 2c             	add    esp,0x2c
c001467a:	89 f0                	mov    eax,esi
c001467c:	5b                   	pop    ebx
c001467d:	5e                   	pop    esi
c001467e:	5f                   	pop    edi
c001467f:	5d                   	pop    ebp
c0014680:	c3                   	ret    

c0014681 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014681:	57                   	push   edi
c0014682:	56                   	push   esi
c0014683:	53                   	push   ebx
c0014684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014690:	83 e8 06             	sub    eax,0x6
c0014693:	0f b7 c0             	movzx  eax,ax
c0014696:	50                   	push   eax
c0014697:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001469c:	50                   	push   eax
c001469d:	e8 68 fc ff ff       	call   c001430a <Vm::realToLinear(unsigned short, unsigned short)>
c00146a2:	5a                   	pop    edx
c00146a3:	5e                   	pop    esi
c00146a4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146a7:	8d 56 fa             	lea    edx,[esi-0x6]
c00146aa:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146b0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146b3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146b6:	83 c2 02             	add    edx,0x2
c00146b9:	66 89 10             	mov    WORD PTR [eax],dx
c00146bc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146bf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00146c3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00146c6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00146ca:	89 d6                	mov    esi,edx
c00146cc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00146d2:	66 81 e6 ff fd       	and    si,0xfdff
c00146d7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00146db:	74 07                	je     c00146e4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00146dd:	89 d6                	mov    esi,edx
c00146df:	66 81 ce 00 02       	or     si,0x200
c00146e4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00146e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146ed:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00146f1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00146f9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00146fc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014704:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014707:	5b                   	pop    ebx
c0014708:	5e                   	pop    esi
c0014709:	5f                   	pop    edi
c001470a:	c3                   	ret    

c001470b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001470b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014710:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014715:	c1 e0 04             	shl    eax,0x4
c0014718:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001471b:	c3                   	ret    

c001471c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001471c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014721:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014726:	c1 e0 04             	shl    eax,0x4
c0014729:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001472d:	c3                   	ret    

c001472e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001472e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014733:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014738:	c1 e0 04             	shl    eax,0x4
c001473b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001473e:	c3                   	ret    

c001473f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001473f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014744:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014749:	c1 e0 04             	shl    eax,0x4
c001474c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014750:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014753:	c3                   	ret    

c0014754 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014754:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014759:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001475e:	c1 e0 04             	shl    eax,0x4
c0014761:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014765:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014769:	c3                   	ret    

c001476a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001476a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001476f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014774:	c1 e0 04             	shl    eax,0x4
c0014777:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001477b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001477e:	c3                   	ret    

c001477f <Vm::faultHandler(regs*)>:
c001477f:	55                   	push   ebp
c0014780:	57                   	push   edi
c0014781:	56                   	push   esi
c0014782:	53                   	push   ebx
c0014783:	83 ec 1c             	sub    esp,0x1c
c0014786:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001478a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001478d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014791:	0f b7 f8             	movzx  edi,ax
c0014794:	52                   	push   edx
c0014795:	0f b7 c0             	movzx  eax,ax
c0014798:	50                   	push   eax
c0014799:	e8 6c fb ff ff       	call   c001430a <Vm::realToLinear(unsigned short, unsigned short)>
c001479e:	5a                   	pop    edx
c001479f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147a2:	59                   	pop    ecx
c00147a3:	89 c1                	mov    ecx,eax
c00147a5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147b5:	0f b7 c5             	movzx  eax,bp
c00147b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147bc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00147c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147c4:	e8 41 fb ff ff       	call   c001430a <Vm::realToLinear(unsigned short, unsigned short)>
c00147c9:	5e                   	pop    esi
c00147ca:	be 06 00 00 00       	mov    esi,0x6
c00147cf:	5a                   	pop    edx
c00147d0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00147d5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00147da:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00147dd:	80 fa 9d             	cmp    dl,0x9d
c00147e0:	0f 84 2c 02 00 00    	je     c0014a12 <Vm::faultHandler(regs*)+0x293>
c00147e6:	0f 87 91 00 00 00    	ja     c001487d <Vm::faultHandler(regs*)+0xfe>
c00147ec:	80 fa 66             	cmp    dl,0x66
c00147ef:	0f 84 98 01 00 00    	je     c001498d <Vm::faultHandler(regs*)+0x20e>
c00147f5:	77 47                	ja     c001483e <Vm::faultHandler(regs*)+0xbf>
c00147f7:	80 fa 36             	cmp    dl,0x36
c00147fa:	0f 84 80 01 00 00    	je     c0014980 <Vm::faultHandler(regs*)+0x201>
c0014800:	77 1a                	ja     c001481c <Vm::faultHandler(regs*)+0x9d>
c0014802:	80 fa 26             	cmp    dl,0x26
c0014805:	0f 84 4e 01 00 00    	je     c0014959 <Vm::faultHandler(regs*)+0x1da>
c001480b:	80 fa 2e             	cmp    dl,0x2e
c001480e:	0f 85 e2 05 00 00    	jne    c0014df6 <Vm::faultHandler(regs*)+0x677>
c0014814:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014817:	31 f6                	xor    esi,esi
c0014819:	41                   	inc    ecx
c001481a:	eb be                	jmp    c00147da <Vm::faultHandler(regs*)+0x5b>
c001481c:	80 fa 64             	cmp    dl,0x64
c001481f:	0f 84 41 01 00 00    	je     c0014966 <Vm::faultHandler(regs*)+0x1e7>
c0014825:	0f 87 48 01 00 00    	ja     c0014973 <Vm::faultHandler(regs*)+0x1f4>
c001482b:	80 fa 3e             	cmp    dl,0x3e
c001482e:	0f 85 c2 05 00 00    	jne    c0014df6 <Vm::faultHandler(regs*)+0x677>
c0014834:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014837:	be 01 00 00 00       	mov    esi,0x1
c001483c:	eb db                	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c001483e:	80 fa 6d             	cmp    dl,0x6d
c0014841:	0f 84 ec 02 00 00    	je     c0014b33 <Vm::faultHandler(regs*)+0x3b4>
c0014847:	77 17                	ja     c0014860 <Vm::faultHandler(regs*)+0xe1>
c0014849:	80 fa 67             	cmp    dl,0x67
c001484c:	0f 84 48 01 00 00    	je     c001499a <Vm::faultHandler(regs*)+0x21b>
c0014852:	80 fa 6c             	cmp    dl,0x6c
c0014855:	0f 84 69 02 00 00    	je     c0014ac4 <Vm::faultHandler(regs*)+0x345>
c001485b:	e9 96 05 00 00       	jmp    c0014df6 <Vm::faultHandler(regs*)+0x677>
c0014860:	80 fa 6f             	cmp    dl,0x6f
c0014863:	0f 84 f4 03 00 00    	je     c0014c5d <Vm::faultHandler(regs*)+0x4de>
c0014869:	0f 82 59 03 00 00    	jb     c0014bc8 <Vm::faultHandler(regs*)+0x449>
c001486f:	80 fa 9c             	cmp    dl,0x9c
c0014872:	0f 84 2f 01 00 00    	je     c00149a7 <Vm::faultHandler(regs*)+0x228>
c0014878:	e9 79 05 00 00       	jmp    c0014df6 <Vm::faultHandler(regs*)+0x677>
c001487d:	80 fa ec             	cmp    dl,0xec
c0014880:	0f 84 14 05 00 00    	je     c0014d9a <Vm::faultHandler(regs*)+0x61b>
c0014886:	77 7b                	ja     c0014903 <Vm::faultHandler(regs*)+0x184>
c0014888:	80 fa e4             	cmp    dl,0xe4
c001488b:	0f 84 93 04 00 00    	je     c0014d24 <Vm::faultHandler(regs*)+0x5a5>
c0014891:	77 53                	ja     c00148e6 <Vm::faultHandler(regs*)+0x167>
c0014893:	80 fa cd             	cmp    dl,0xcd
c0014896:	0f 84 d9 01 00 00    	je     c0014a75 <Vm::faultHandler(regs*)+0x2f6>
c001489c:	80 fa cf             	cmp    dl,0xcf
c001489f:	0f 85 51 05 00 00    	jne    c0014df6 <Vm::faultHandler(regs*)+0x677>
c00148a5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148a8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148ab:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148af:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148b2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148b6:	81 ca 00 02 02 00    	or     edx,0x20200
c00148bc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148bf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148c9:	66 c1 e8 09          	shr    ax,0x9
c00148cd:	83 e0 01             	and    eax,0x1
c00148d0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148d3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148d6:	83 c0 06             	add    eax,0x6
c00148d9:	25 ff ff 00 00       	and    eax,0xffff
c00148de:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00148e1:	e9 0c 05 00 00       	jmp    c0014df2 <Vm::faultHandler(regs*)+0x673>
c00148e6:	80 fa e6             	cmp    dl,0xe6
c00148e9:	0f 84 7f 04 00 00    	je     c0014d6e <Vm::faultHandler(regs*)+0x5ef>
c00148ef:	0f 82 4b 04 00 00    	jb     c0014d40 <Vm::faultHandler(regs*)+0x5c1>
c00148f5:	80 fa e7             	cmp    dl,0xe7
c00148f8:	0f 84 87 04 00 00    	je     c0014d85 <Vm::faultHandler(regs*)+0x606>
c00148fe:	e9 f3 04 00 00       	jmp    c0014df6 <Vm::faultHandler(regs*)+0x677>
c0014903:	80 fa ef             	cmp    dl,0xef
c0014906:	0f 84 d1 04 00 00    	je     c0014ddd <Vm::faultHandler(regs*)+0x65e>
c001490c:	77 28                	ja     c0014936 <Vm::faultHandler(regs*)+0x1b7>
c001490e:	80 fa ed             	cmp    dl,0xed
c0014911:	0f 84 9f 04 00 00    	je     c0014db6 <Vm::faultHandler(regs*)+0x637>
c0014917:	80 fa ee             	cmp    dl,0xee
c001491a:	0f 85 d6 04 00 00    	jne    c0014df6 <Vm::faultHandler(regs*)+0x677>
c0014920:	50                   	push   eax
c0014921:	50                   	push   eax
c0014922:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014926:	50                   	push   eax
c0014927:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001492b:	50                   	push   eax
c001492c:	e8 a3 f9 ff ff       	call   c00142d4 <Vm::outbv(unsigned short, unsigned char)>
c0014931:	e9 9f 04 00 00       	jmp    c0014dd5 <Vm::faultHandler(regs*)+0x656>
c0014936:	80 fa fa             	cmp    dl,0xfa
c0014939:	0f 84 69 01 00 00    	je     c0014aa8 <Vm::faultHandler(regs*)+0x329>
c001493f:	80 fa fb             	cmp    dl,0xfb
c0014942:	0f 84 6e 01 00 00    	je     c0014ab6 <Vm::faultHandler(regs*)+0x337>
c0014948:	80 fa f3             	cmp    dl,0xf3
c001494b:	0f 85 a5 04 00 00    	jne    c0014df6 <Vm::faultHandler(regs*)+0x677>
c0014951:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014954:	e9 c0 fe ff ff       	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c0014959:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001495c:	be 02 00 00 00       	mov    esi,0x2
c0014961:	e9 b3 fe ff ff       	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c0014966:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014969:	be 03 00 00 00       	mov    esi,0x3
c001496e:	e9 a6 fe ff ff       	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c0014973:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014976:	be 04 00 00 00       	mov    esi,0x4
c001497b:	e9 99 fe ff ff       	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c0014980:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014983:	be 05 00 00 00       	mov    esi,0x5
c0014988:	e9 8c fe ff ff       	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c001498d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014990:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014995:	e9 7f fe ff ff       	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c001499a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001499d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149a2:	e9 72 fe ff ff       	jmp    c0014819 <Vm::faultHandler(regs*)+0x9a>
c00149a7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149ae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149b3:	74 30                	je     c00149e5 <Vm::faultHandler(regs*)+0x266>
c00149b5:	83 e9 04             	sub    ecx,0x4
c00149b8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149be:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149c4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149c7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149d0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00149d4:	0f 84 15 04 00 00    	je     c0014def <Vm::faultHandler(regs*)+0x670>
c00149da:	80 ce 02             	or     dh,0x2
c00149dd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149e0:	e9 0a 04 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c00149e5:	83 e9 02             	sub    ecx,0x2
c00149e8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149ee:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149f1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00149f5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149fb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00149ff:	74 05                	je     c0014a06 <Vm::faultHandler(regs*)+0x287>
c0014a01:	80 ce 02             	or     dh,0x2
c0014a04:	eb 03                	jmp    c0014a09 <Vm::faultHandler(regs*)+0x28a>
c0014a06:	80 e6 fd             	and    dh,0xfd
c0014a09:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a0d:	e9 dd 03 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014a12:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a17:	74 2a                	je     c0014a43 <Vm::faultHandler(regs*)+0x2c4>
c0014a19:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a1b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a21:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a27:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a2c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a32:	c1 e8 09             	shr    eax,0x9
c0014a35:	83 e0 01             	and    eax,0x1
c0014a38:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a3b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a3e:	83 c0 04             	add    eax,0x4
c0014a41:	eb 25                	jmp    c0014a68 <Vm::faultHandler(regs*)+0x2e9>
c0014a43:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a46:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a4c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a4f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a52:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a58:	66 c1 e8 09          	shr    ax,0x9
c0014a5c:	83 e0 01             	and    eax,0x1
c0014a5f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a62:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a65:	83 c0 02             	add    eax,0x2
c0014a68:	25 ff ff 00 00       	and    eax,0xffff
c0014a6d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a70:	e9 7a 03 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014a75:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a79:	3c ee                	cmp    al,0xee
c0014a7b:	75 10                	jne    c0014a8d <Vm::faultHandler(regs*)+0x30e>
c0014a7d:	83 ec 0c             	sub    esp,0xc
c0014a80:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014a83:	e8 e9 f8 ff ff       	call   c0014371 <Vm::mainloop3(unsigned long)>
c0014a88:	e9 4b 03 00 00       	jmp    c0014dd8 <Vm::faultHandler(regs*)+0x659>
c0014a8d:	83 ec 0c             	sub    esp,0xc
c0014a90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a98:	51                   	push   ecx
c0014a99:	50                   	push   eax
c0014a9a:	53                   	push   ebx
c0014a9b:	e8 e1 fb ff ff       	call   c0014681 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014aa0:	83 c4 20             	add    esp,0x20
c0014aa3:	e9 4a 03 00 00       	jmp    c0014df2 <Vm::faultHandler(regs*)+0x673>
c0014aa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aad:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014ab1:	e9 39 03 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014ab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014abb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014abf:	e9 2b 03 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014ac4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014ac7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014acc:	74 2b                	je     c0014af9 <Vm::faultHandler(regs*)+0x37a>
c0014ace:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014ad5:	76 22                	jbe    c0014af9 <Vm::faultHandler(regs*)+0x37a>
c0014ad7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014adb:	50                   	push   eax
c0014adc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ae0:	50                   	push   eax
c0014ae1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ae5:	50                   	push   eax
c0014ae6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014aea:	50                   	push   eax
c0014aeb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014aef:	50                   	push   eax
c0014af0:	6a 6c                	push   0x6c
c0014af2:	6a 6c                	push   0x6c
c0014af4:	e9 b9 01 00 00       	jmp    c0014cb2 <Vm::faultHandler(regs*)+0x533>
c0014af9:	83 ec 0c             	sub    esp,0xc
c0014afc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b00:	0f b7 f6             	movzx  esi,si
c0014b03:	50                   	push   eax
c0014b04:	e8 b8 f7 ff ff       	call   c00142c1 <Vm::inbv(unsigned short)>
c0014b09:	83 c4 0c             	add    esp,0xc
c0014b0c:	0f b6 c0             	movzx  eax,al
c0014b0f:	50                   	push   eax
c0014b10:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b14:	50                   	push   eax
c0014b15:	56                   	push   esi
c0014b16:	e8 24 fc ff ff       	call   c001473f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b1b:	83 c4 10             	add    esp,0x10
c0014b1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b25:	74 03                	je     c0014b2a <Vm::faultHandler(regs*)+0x3ab>
c0014b27:	48                   	dec    eax
c0014b28:	eb 01                	jmp    c0014b2b <Vm::faultHandler(regs*)+0x3ac>
c0014b2a:	40                   	inc    eax
c0014b2b:	0f b7 c0             	movzx  eax,ax
c0014b2e:	e9 8d 00 00 00       	jmp    c0014bc0 <Vm::faultHandler(regs*)+0x441>
c0014b33:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b39:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b3e:	74 29                	je     c0014b69 <Vm::faultHandler(regs*)+0x3ea>
c0014b40:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b45:	76 22                	jbe    c0014b69 <Vm::faultHandler(regs*)+0x3ea>
c0014b47:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b4b:	50                   	push   eax
c0014b4c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b50:	50                   	push   eax
c0014b51:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b55:	50                   	push   eax
c0014b56:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b5a:	50                   	push   eax
c0014b5b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b5f:	50                   	push   eax
c0014b60:	6a 6d                	push   0x6d
c0014b62:	6a 6d                	push   0x6d
c0014b64:	e9 49 01 00 00       	jmp    c0014cb2 <Vm::faultHandler(regs*)+0x533>
c0014b69:	0f b7 c8             	movzx  ecx,ax
c0014b6c:	0f b7 f6             	movzx  esi,si
c0014b6f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b72:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b77:	74 20                	je     c0014b99 <Vm::faultHandler(regs*)+0x41a>
c0014b79:	ed                   	in     eax,dx
c0014b7a:	55                   	push   ebp
c0014b7b:	50                   	push   eax
c0014b7c:	51                   	push   ecx
c0014b7d:	56                   	push   esi
c0014b7e:	e8 e7 fb ff ff       	call   c001476a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014b83:	83 c4 10             	add    esp,0x10
c0014b86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b89:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b8d:	74 05                	je     c0014b94 <Vm::faultHandler(regs*)+0x415>
c0014b8f:	83 e8 04             	sub    eax,0x4
c0014b92:	eb 27                	jmp    c0014bbb <Vm::faultHandler(regs*)+0x43c>
c0014b94:	83 c0 04             	add    eax,0x4
c0014b97:	eb 22                	jmp    c0014bbb <Vm::faultHandler(regs*)+0x43c>
c0014b99:	66 ed                	in     ax,dx
c0014b9b:	0f b7 c0             	movzx  eax,ax
c0014b9e:	57                   	push   edi
c0014b9f:	50                   	push   eax
c0014ba0:	51                   	push   ecx
c0014ba1:	56                   	push   esi
c0014ba2:	e8 ad fb ff ff       	call   c0014754 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014ba7:	83 c4 10             	add    esp,0x10
c0014baa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bad:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bb1:	74 05                	je     c0014bb8 <Vm::faultHandler(regs*)+0x439>
c0014bb3:	83 e8 02             	sub    eax,0x2
c0014bb6:	eb 03                	jmp    c0014bbb <Vm::faultHandler(regs*)+0x43c>
c0014bb8:	83 c0 02             	add    eax,0x2
c0014bbb:	25 ff ff 00 00       	and    eax,0xffff
c0014bc0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014bc3:	e9 27 02 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014bc8:	8d 46 ff             	lea    eax,[esi-0x1]
c0014bcb:	3c 05                	cmp    al,0x5
c0014bcd:	77 24                	ja     c0014bf3 <Vm::faultHandler(regs*)+0x474>
c0014bcf:	0f b6 c0             	movzx  eax,al
c0014bd2:	ff 24 85 5c ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe12a4]
c0014bd9:	0f b7 fd             	movzx  edi,bp
c0014bdc:	eb 15                	jmp    c0014bf3 <Vm::faultHandler(regs*)+0x474>
c0014bde:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014be2:	eb 0f                	jmp    c0014bf3 <Vm::faultHandler(regs*)+0x474>
c0014be4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014be8:	eb 09                	jmp    c0014bf3 <Vm::faultHandler(regs*)+0x474>
c0014bea:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014bee:	eb 03                	jmp    c0014bf3 <Vm::faultHandler(regs*)+0x474>
c0014bf0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014bf3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014bf6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bfb:	74 29                	je     c0014c26 <Vm::faultHandler(regs*)+0x4a7>
c0014bfd:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c02:	76 22                	jbe    c0014c26 <Vm::faultHandler(regs*)+0x4a7>
c0014c04:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c08:	50                   	push   eax
c0014c09:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c0d:	50                   	push   eax
c0014c0e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c12:	50                   	push   eax
c0014c13:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c17:	50                   	push   eax
c0014c18:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c1c:	50                   	push   eax
c0014c1d:	6a 6e                	push   0x6e
c0014c1f:	6a 6e                	push   0x6e
c0014c21:	e9 8c 00 00 00       	jmp    c0014cb2 <Vm::faultHandler(regs*)+0x533>
c0014c26:	0f b7 c0             	movzx  eax,ax
c0014c29:	52                   	push   edx
c0014c2a:	52                   	push   edx
c0014c2b:	50                   	push   eax
c0014c2c:	57                   	push   edi
c0014c2d:	e8 d9 fa ff ff       	call   c001470b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c32:	59                   	pop    ecx
c0014c33:	0f b6 c0             	movzx  eax,al
c0014c36:	5e                   	pop    esi
c0014c37:	50                   	push   eax
c0014c38:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c3c:	50                   	push   eax
c0014c3d:	e8 92 f6 ff ff       	call   c00142d4 <Vm::outbv(unsigned short, unsigned char)>
c0014c42:	83 c4 10             	add    esp,0x10
c0014c45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c48:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c4c:	74 03                	je     c0014c51 <Vm::faultHandler(regs*)+0x4d2>
c0014c4e:	48                   	dec    eax
c0014c4f:	eb 01                	jmp    c0014c52 <Vm::faultHandler(regs*)+0x4d3>
c0014c51:	40                   	inc    eax
c0014c52:	0f b7 c0             	movzx  eax,ax
c0014c55:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c58:	e9 92 01 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014c5d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c60:	3c 05                	cmp    al,0x5
c0014c62:	77 1f                	ja     c0014c83 <Vm::faultHandler(regs*)+0x504>
c0014c64:	0f b6 c0             	movzx  eax,al
c0014c67:	ff 24 85 74 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe128c]
c0014c6e:	89 ef                	mov    edi,ebp
c0014c70:	eb 11                	jmp    c0014c83 <Vm::faultHandler(regs*)+0x504>
c0014c72:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014c75:	eb 0c                	jmp    c0014c83 <Vm::faultHandler(regs*)+0x504>
c0014c77:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014c7a:	eb 07                	jmp    c0014c83 <Vm::faultHandler(regs*)+0x504>
c0014c7c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014c7f:	eb 02                	jmp    c0014c83 <Vm::faultHandler(regs*)+0x504>
c0014c81:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014c83:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014c86:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c8b:	74 37                	je     c0014cc4 <Vm::faultHandler(regs*)+0x545>
c0014c8d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014c93:	76 2f                	jbe    c0014cc4 <Vm::faultHandler(regs*)+0x545>
c0014c95:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c99:	50                   	push   eax
c0014c9a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c9e:	50                   	push   eax
c0014c9f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ca3:	50                   	push   eax
c0014ca4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ca8:	50                   	push   eax
c0014ca9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cad:	50                   	push   eax
c0014cae:	6a 6f                	push   0x6f
c0014cb0:	6a 6f                	push   0x6f
c0014cb2:	68 02 ed 01 c0       	push   0xc001ed02
c0014cb7:	e8 53 58 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014cbc:	83 c4 20             	add    esp,0x20
c0014cbf:	e9 86 01 00 00       	jmp    c0014e4a <Vm::faultHandler(regs*)+0x6cb>
c0014cc4:	0f b7 d7             	movzx  edx,di
c0014cc7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014cca:	0f b7 c6             	movzx  eax,si
c0014ccd:	81 e1 00 04 00 00    	and    ecx,0x400
c0014cd3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014cd6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cdb:	74 1d                	je     c0014cfa <Vm::faultHandler(regs*)+0x57b>
c0014cdd:	55                   	push   ebp
c0014cde:	55                   	push   ebp
c0014cdf:	50                   	push   eax
c0014ce0:	52                   	push   edx
c0014ce1:	e8 48 fa ff ff       	call   c001472e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014ce6:	83 c4 10             	add    esp,0x10
c0014ce9:	89 fa                	mov    edx,edi
c0014ceb:	ef                   	out    dx,eax
c0014cec:	85 c9                	test   ecx,ecx
c0014cee:	74 05                	je     c0014cf5 <Vm::faultHandler(regs*)+0x576>
c0014cf0:	83 ee 04             	sub    esi,0x4
c0014cf3:	eb 21                	jmp    c0014d16 <Vm::faultHandler(regs*)+0x597>
c0014cf5:	83 c6 04             	add    esi,0x4
c0014cf8:	eb 1c                	jmp    c0014d16 <Vm::faultHandler(regs*)+0x597>
c0014cfa:	55                   	push   ebp
c0014cfb:	55                   	push   ebp
c0014cfc:	50                   	push   eax
c0014cfd:	52                   	push   edx
c0014cfe:	e8 19 fa ff ff       	call   c001471c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d03:	83 c4 10             	add    esp,0x10
c0014d06:	89 fa                	mov    edx,edi
c0014d08:	66 ef                	out    dx,ax
c0014d0a:	85 c9                	test   ecx,ecx
c0014d0c:	74 05                	je     c0014d13 <Vm::faultHandler(regs*)+0x594>
c0014d0e:	83 ee 02             	sub    esi,0x2
c0014d11:	eb 03                	jmp    c0014d16 <Vm::faultHandler(regs*)+0x597>
c0014d13:	83 c6 02             	add    esi,0x2
c0014d16:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d1c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d1f:	e9 cb 00 00 00       	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014d24:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d2b:	83 ec 0c             	sub    esp,0xc
c0014d2e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d32:	50                   	push   eax
c0014d33:	e8 89 f5 ff ff       	call   c00142c1 <Vm::inbv(unsigned short)>
c0014d38:	0f b6 c0             	movzx  eax,al
c0014d3b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d3e:	eb 3f                	jmp    c0014d7f <Vm::faultHandler(regs*)+0x600>
c0014d40:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d45:	74 07                	je     c0014d4e <Vm::faultHandler(regs*)+0x5cf>
c0014d47:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d4b:	ed                   	in     eax,dx
c0014d4c:	eb 14                	jmp    c0014d62 <Vm::faultHandler(regs*)+0x5e3>
c0014d4e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d51:	66 31 f6             	xor    si,si
c0014d54:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d57:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d5b:	66 ed                	in     ax,dx
c0014d5d:	0f b7 c0             	movzx  eax,ax
c0014d60:	09 f0                	or     eax,esi
c0014d62:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014d65:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d69:	e9 84 00 00 00       	jmp    c0014df2 <Vm::faultHandler(regs*)+0x673>
c0014d6e:	52                   	push   edx
c0014d6f:	52                   	push   edx
c0014d70:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014d74:	50                   	push   eax
c0014d75:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d79:	50                   	push   eax
c0014d7a:	e8 55 f5 ff ff       	call   c00142d4 <Vm::outbv(unsigned short, unsigned char)>
c0014d7f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d83:	eb 53                	jmp    c0014dd8 <Vm::faultHandler(regs*)+0x659>
c0014d85:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014d88:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d8c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d91:	74 03                	je     c0014d96 <Vm::faultHandler(regs*)+0x617>
c0014d93:	ef                   	out    dx,eax
c0014d94:	eb cf                	jmp    c0014d65 <Vm::faultHandler(regs*)+0x5e6>
c0014d96:	66 ef                	out    dx,ax
c0014d98:	eb cb                	jmp    c0014d65 <Vm::faultHandler(regs*)+0x5e6>
c0014d9a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014da1:	83 ec 0c             	sub    esp,0xc
c0014da4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014da8:	50                   	push   eax
c0014da9:	e8 13 f5 ff ff       	call   c00142c1 <Vm::inbv(unsigned short)>
c0014dae:	0f b6 c0             	movzx  eax,al
c0014db1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014db4:	eb 1f                	jmp    c0014dd5 <Vm::faultHandler(regs*)+0x656>
c0014db6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014db9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dbe:	74 03                	je     c0014dc3 <Vm::faultHandler(regs*)+0x644>
c0014dc0:	ed                   	in     eax,dx
c0014dc1:	eb 0d                	jmp    c0014dd0 <Vm::faultHandler(regs*)+0x651>
c0014dc3:	66 ed                	in     ax,dx
c0014dc5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014dc8:	0f b7 c0             	movzx  eax,ax
c0014dcb:	66 31 d2             	xor    dx,dx
c0014dce:	09 d0                	or     eax,edx
c0014dd0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014dd3:	eb 1a                	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014dd5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014dd8:	83 c4 10             	add    esp,0x10
c0014ddb:	eb 15                	jmp    c0014df2 <Vm::faultHandler(regs*)+0x673>
c0014ddd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014de0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014de3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014de8:	74 03                	je     c0014ded <Vm::faultHandler(regs*)+0x66e>
c0014dea:	ef                   	out    dx,eax
c0014deb:	eb 02                	jmp    c0014def <Vm::faultHandler(regs*)+0x670>
c0014ded:	66 ef                	out    dx,ax
c0014def:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014df2:	b0 01                	mov    al,0x1
c0014df4:	eb 56                	jmp    c0014e4c <Vm::faultHandler(regs*)+0x6cd>
c0014df6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014dfa:	50                   	push   eax
c0014dfb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014dff:	50                   	push   eax
c0014e00:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e04:	50                   	push   eax
c0014e05:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e09:	50                   	push   eax
c0014e0a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e0e:	50                   	push   eax
c0014e0f:	52                   	push   edx
c0014e10:	52                   	push   edx
c0014e11:	68 2f ed 01 c0       	push   0xc001ed2f
c0014e16:	e8 f4 56 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014e1b:	83 c4 20             	add    esp,0x20
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	6a 60                	push   0x60
c0014e23:	e8 99 f4 ff ff       	call   c00142c1 <Vm::inbv(unsigned short)>
c0014e28:	83 c4 10             	add    esp,0x10
c0014e2b:	3c 1c                	cmp    al,0x1c
c0014e2d:	74 04                	je     c0014e33 <Vm::faultHandler(regs*)+0x6b4>
c0014e2f:	3c 5a                	cmp    al,0x5a
c0014e31:	75 eb                	jne    c0014e1e <Vm::faultHandler(regs*)+0x69f>
c0014e33:	3c 5a                	cmp    al,0x5a
c0014e35:	74 04                	je     c0014e3b <Vm::faultHandler(regs*)+0x6bc>
c0014e37:	3c 1c                	cmp    al,0x1c
c0014e39:	75 0f                	jne    c0014e4a <Vm::faultHandler(regs*)+0x6cb>
c0014e3b:	83 ec 0c             	sub    esp,0xc
c0014e3e:	6a 60                	push   0x60
c0014e40:	e8 7c f4 ff ff       	call   c00142c1 <Vm::inbv(unsigned short)>
c0014e45:	83 c4 10             	add    esp,0x10
c0014e48:	eb e9                	jmp    c0014e33 <Vm::faultHandler(regs*)+0x6b4>
c0014e4a:	31 c0                	xor    eax,eax
c0014e4c:	83 c4 1c             	add    esp,0x1c
c0014e4f:	5b                   	pop    ebx
c0014e50:	5e                   	pop    esi
c0014e51:	5f                   	pop    edi
c0014e52:	5d                   	pop    ebp
c0014e53:	c3                   	ret    

c0014e54 <noCopro(unsigned long)>:
c0014e54:	c3                   	ret    

c0014e55 <nmiHandler(regs*, void*)>:
c0014e55:	83 ec 0c             	sub    esp,0xc
c0014e58:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014e5d:	83 ec 0c             	sub    esp,0xc
c0014e60:	50                   	push   eax
c0014e61:	e8 74 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014e66:	83 c4 10             	add    esp,0x10
c0014e69:	90                   	nop
c0014e6a:	83 c4 0c             	add    esp,0xc
c0014e6d:	c3                   	ret    

c0014e6e <doubleFault(regs*, void*)>:
c0014e6e:	55                   	push   ebp
c0014e6f:	89 e5                	mov    ebp,esp
c0014e71:	83 ec 08             	sub    esp,0x8
c0014e74:	83 ec 0c             	sub    esp,0xc
c0014e77:	68 8c ed 01 c0       	push   0xc001ed8c
c0014e7c:	e8 0e b3 ff ff       	call   c001018f <KePanic(char const*)>
c0014e81:	83 c4 10             	add    esp,0x10
c0014e84:	90                   	nop
c0014e85:	c9                   	leave  
c0014e86:	c3                   	ret    

c0014e87 <displayDebugInfo(regs*)>:
c0014e87:	83 ec 1c             	sub    esp,0x1c
c0014e8a:	0f 20 c0             	mov    eax,cr0
c0014e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e91:	0f 20 d0             	mov    eax,cr2
c0014e94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e98:	0f 20 d8             	mov    eax,cr3
c0014e9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e9f:	0f 20 e0             	mov    eax,cr4
c0014ea2:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ea9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014eac:	83 ec 08             	sub    esp,0x8
c0014eaf:	50                   	push   eax
c0014eb0:	68 a8 ed 01 c0       	push   0xc001eda8
c0014eb5:	e8 55 56 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014eba:	83 c4 10             	add    esp,0x10
c0014ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ec4:	83 ec 08             	sub    esp,0x8
c0014ec7:	50                   	push   eax
c0014ec8:	68 99 ed 01 c0       	push   0xc001ed99
c0014ecd:	e8 3d 56 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014ed2:	83 c4 10             	add    esp,0x10
c0014ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014edc:	83 ec 08             	sub    esp,0x8
c0014edf:	50                   	push   eax
c0014ee0:	68 a4 ed 01 c0       	push   0xc001eda4
c0014ee5:	e8 25 56 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014eea:	83 c4 10             	add    esp,0x10
c0014eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ef4:	83 ec 08             	sub    esp,0x8
c0014ef7:	50                   	push   eax
c0014ef8:	68 b3 ed 01 c0       	push   0xc001edb3
c0014efd:	e8 0d 56 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014f02:	83 c4 10             	add    esp,0x10
c0014f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f09:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f0c:	83 ec 08             	sub    esp,0x8
c0014f0f:	50                   	push   eax
c0014f10:	68 be ed 01 c0       	push   0xc001edbe
c0014f15:	e8 f5 55 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014f1a:	83 c4 10             	add    esp,0x10
c0014f1d:	83 ec 08             	sub    esp,0x8
c0014f20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f24:	68 c9 ed 01 c0       	push   0xc001edc9
c0014f29:	e8 e1 55 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	83 ec 08             	sub    esp,0x8
c0014f34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f38:	68 d4 ed 01 c0       	push   0xc001edd4
c0014f3d:	e8 cd 55 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0014f42:	83 c4 10             	add    esp,0x10
c0014f45:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f50:	83 ec 0c             	sub    esp,0xc
c0014f53:	50                   	push   eax
c0014f54:	e8 9e 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014f59:	83 c4 10             	add    esp,0x10
c0014f5c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f67:	83 ec 08             	sub    esp,0x8
c0014f6a:	68 df ed 01 c0       	push   0xc001eddf
c0014f6f:	50                   	push   eax
c0014f70:	e8 c1 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f83:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014f88:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f8a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014f8d:	83 c2 0c             	add    edx,0xc
c0014f90:	83 ec 08             	sub    esp,0x8
c0014f93:	52                   	push   edx
c0014f94:	50                   	push   eax
c0014f95:	e8 9c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014f9a:	83 c4 10             	add    esp,0x10
c0014f9d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fa2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fa8:	83 ec 08             	sub    esp,0x8
c0014fab:	68 e8 ed 01 c0       	push   0xc001ede8
c0014fb0:	50                   	push   eax
c0014fb1:	e8 80 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014fc8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014fcb:	83 ec 08             	sub    esp,0x8
c0014fce:	52                   	push   edx
c0014fcf:	50                   	push   eax
c0014fd0:	e8 1b 37 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014fd5:	83 c4 10             	add    esp,0x10
c0014fd8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fdd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fe3:	83 ec 08             	sub    esp,0x8
c0014fe6:	68 f0 ed 01 c0       	push   0xc001edf0
c0014feb:	50                   	push   eax
c0014fec:	e8 45 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ff1:	83 c4 10             	add    esp,0x10
c0014ff4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014ff9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015003:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015006:	83 ec 08             	sub    esp,0x8
c0015009:	52                   	push   edx
c001500a:	50                   	push   eax
c001500b:	e8 e0 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015010:	83 c4 10             	add    esp,0x10
c0015013:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015018:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001501e:	83 ec 08             	sub    esp,0x8
c0015021:	68 f8 ed 01 c0       	push   0xc001edf8
c0015026:	50                   	push   eax
c0015027:	e8 0a 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001502c:	83 c4 10             	add    esp,0x10
c001502f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015034:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001503a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001503e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015041:	83 ec 08             	sub    esp,0x8
c0015044:	52                   	push   edx
c0015045:	50                   	push   eax
c0015046:	e8 a5 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015053:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015059:	83 ec 08             	sub    esp,0x8
c001505c:	68 00 ee 01 c0       	push   0xc001ee00
c0015061:	50                   	push   eax
c0015062:	e8 cf 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001506f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015075:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015079:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001507c:	83 ec 08             	sub    esp,0x8
c001507f:	52                   	push   edx
c0015080:	50                   	push   eax
c0015081:	e8 6a 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015086:	83 c4 10             	add    esp,0x10
c0015089:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001508e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015094:	83 ec 08             	sub    esp,0x8
c0015097:	68 08 ee 01 c0       	push   0xc001ee08
c001509c:	50                   	push   eax
c001509d:	e8 94 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150a2:	83 c4 10             	add    esp,0x10
c00150a5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150b7:	83 ec 08             	sub    esp,0x8
c00150ba:	52                   	push   edx
c00150bb:	50                   	push   eax
c00150bc:	e8 2f 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150c1:	83 c4 10             	add    esp,0x10
c00150c4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150cf:	83 ec 08             	sub    esp,0x8
c00150d2:	68 10 ee 01 c0       	push   0xc001ee10
c00150d7:	50                   	push   eax
c00150d8:	e8 59 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150dd:	83 c4 10             	add    esp,0x10
c00150e0:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150ef:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00150f2:	83 ec 08             	sub    esp,0x8
c00150f5:	52                   	push   edx
c00150f6:	50                   	push   eax
c00150f7:	e8 f4 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150fc:	83 c4 10             	add    esp,0x10
c00150ff:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015104:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510a:	83 ec 08             	sub    esp,0x8
c001510d:	68 18 ee 01 c0       	push   0xc001ee18
c0015112:	50                   	push   eax
c0015113:	e8 1e 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015120:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015126:	83 ec 08             	sub    esp,0x8
c0015129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001512d:	50                   	push   eax
c001512e:	e8 bd 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015133:	83 c4 10             	add    esp,0x10
c0015136:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001513b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015141:	83 ec 08             	sub    esp,0x8
c0015144:	68 21 ee 01 c0       	push   0xc001ee21
c0015149:	50                   	push   eax
c001514a:	e8 e7 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015157:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515d:	83 ec 08             	sub    esp,0x8
c0015160:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015164:	50                   	push   eax
c0015165:	e8 86 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015172:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015178:	83 ec 08             	sub    esp,0x8
c001517b:	68 29 ee 01 c0       	push   0xc001ee29
c0015180:	50                   	push   eax
c0015181:	e8 b0 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015186:	83 c4 10             	add    esp,0x10
c0015189:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001518e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015194:	83 ec 08             	sub    esp,0x8
c0015197:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001519b:	50                   	push   eax
c001519c:	e8 4f 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151a1:	83 c4 10             	add    esp,0x10
c00151a4:	fa                   	cli    
c00151a5:	f4                   	hlt    
c00151a6:	eb fe                	jmp    c00151a6 <displayDebugInfo(regs*)+0x31f>

c00151a8 <HalSystemIdle()>:
c00151a8:	56                   	push   esi
c00151a9:	53                   	push   ebx
c00151aa:	83 ec 14             	sub    esp,0x14
c00151ad:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151b8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151be:	83 e0 04             	and    eax,0x4
c00151c1:	84 c0                	test   al,al
c00151c3:	0f 95 c0             	setne  al
c00151c6:	84 c0                	test   al,al
c00151c8:	74 4c                	je     c0015216 <HalSystemIdle()+0x6e>
c00151ca:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151cf:	83 ec 08             	sub    esp,0x8
c00151d2:	68 e1 00 00 00       	push   0xe1
c00151d7:	50                   	push   eax
c00151d8:	e8 15 1c ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00151dd:	83 c4 10             	add    esp,0x10
c00151e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00151e8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00151f1:	83 e2 02             	and    edx,0x2
c00151f4:	89 d3                	mov    ebx,edx
c00151f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151fa:	83 e2 00             	and    edx,0x0
c00151fd:	89 d6                	mov    esi,edx
c00151ff:	56                   	push   esi
c0015200:	53                   	push   ebx
c0015201:	68 e1 00 00 00       	push   0xe1
c0015206:	50                   	push   eax
c0015207:	e8 12 1c ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	e8 80 af fe ff       	call   c0000194 <doTPAUSE>
c0015214:	eb 01                	jmp    c0015217 <HalSystemIdle()+0x6f>
c0015216:	f4                   	hlt    
c0015217:	90                   	nop
c0015218:	83 c4 14             	add    esp,0x14
c001521b:	5b                   	pop    ebx
c001521c:	5e                   	pop    esi
c001521d:	c3                   	ret    

c001521e <displayProgramFault(char const*)>:
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	83 ec 0c             	sub    esp,0xc
c0015224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015228:	e8 e2 52 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015235:	8b 00                	mov    eax,DWORD PTR [eax]
c0015237:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001523a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015240:	85 c0                	test   eax,eax
c0015242:	74 21                	je     c0015265 <displayProgramFault(char const*)+0x47>
c0015244:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015249:	8b 00                	mov    eax,DWORD PTR [eax]
c001524b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001524e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015254:	6a 04                	push   0x4
c0015256:	6a 0f                	push   0xf
c0015258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001525c:	50                   	push   eax
c001525d:	e8 46 35 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015262:	83 c4 10             	add    esp,0x10
c0015265:	90                   	nop
c0015266:	83 c4 0c             	add    esp,0xc
c0015269:	c3                   	ret    

c001526a <gpFault(regs*, void*)>:
c001526a:	83 ec 1c             	sub    esp,0x1c
c001526d:	c7 05 10 52 02 c0 7f 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc001477f
c0015277:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c001527c:	85 c0                	test   eax,eax
c001527e:	74 1c                	je     c001529c <gpFault(regs*, void*)+0x32>
c0015280:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015285:	83 ec 0c             	sub    esp,0xc
c0015288:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001528c:	ff d0                	call   eax
c001528e:	83 c4 10             	add    esp,0x10
c0015291:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015295:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001529a:	75 2e                	jne    c00152ca <gpFault(regs*, void*)+0x60>
c001529c:	83 ec 0c             	sub    esp,0xc
c001529f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152a3:	e8 df fb ff ff       	call   c0014e87 <displayDebugInfo(regs*)>
c00152a8:	83 c4 10             	add    esp,0x10
c00152ab:	83 ec 0c             	sub    esp,0xc
c00152ae:	68 31 ee 01 c0       	push   0xc001ee31
c00152b3:	e8 66 ff ff ff       	call   c001521e <displayProgramFault(char const*)>
c00152b8:	83 c4 10             	add    esp,0x10
c00152bb:	83 ec 0c             	sub    esp,0xc
c00152be:	6a 00                	push   0x0
c00152c0:	e8 af ee ff ff       	call   c0014174 <Thr::terminateFromIRQ(int)>
c00152c5:	83 c4 10             	add    esp,0x10
c00152c8:	eb 01                	jmp    c00152cb <gpFault(regs*, void*)+0x61>
c00152ca:	90                   	nop
c00152cb:	83 c4 1c             	add    esp,0x1c
c00152ce:	c3                   	ret    

c00152cf <pgFault(regs*, void*)>:
c00152cf:	83 ec 1c             	sub    esp,0x1c
c00152d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152d9:	0f 20 d0             	mov    eax,cr2
c00152dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152e4:	83 ec 04             	sub    esp,0x4
c00152e7:	52                   	push   edx
c00152e8:	50                   	push   eax
c00152e9:	68 10 ef 01 c0       	push   0xc001ef10
c00152ee:	e8 1c 52 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015300:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015306:	0f 20 d2             	mov    edx,cr2
c0015309:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001530d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015311:	83 ec 08             	sub    esp,0x8
c0015314:	52                   	push   edx
c0015315:	50                   	push   eax
c0015316:	e8 ef 4d ff ff       	call   c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>
c001531b:	83 c4 10             	add    esp,0x10
c001531e:	84 c0                	test   al,al
c0015320:	75 2e                	jne    c0015350 <pgFault(regs*, void*)+0x81>
c0015322:	83 ec 0c             	sub    esp,0xc
c0015325:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015329:	e8 59 fb ff ff       	call   c0014e87 <displayDebugInfo(regs*)>
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	83 ec 0c             	sub    esp,0xc
c0015334:	68 4a ee 01 c0       	push   0xc001ee4a
c0015339:	e8 e0 fe ff ff       	call   c001521e <displayProgramFault(char const*)>
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	83 ec 0c             	sub    esp,0xc
c0015344:	6a 00                	push   0x0
c0015346:	e8 29 ee ff ff       	call   c0014174 <Thr::terminateFromIRQ(int)>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	eb 01                	jmp    c0015351 <pgFault(regs*, void*)+0x82>
c0015350:	90                   	nop
c0015351:	83 c4 1c             	add    esp,0x1c
c0015354:	c3                   	ret    

c0015355 <otherISRHandler(regs*, void*)>:
c0015355:	83 ec 0c             	sub    esp,0xc
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001535f:	e8 23 fb ff ff       	call   c0014e87 <displayDebugInfo(regs*)>
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	83 ec 0c             	sub    esp,0xc
c001536a:	68 38 ef 01 c0       	push   0xc001ef38
c001536f:	e8 aa fe ff ff       	call   c001521e <displayProgramFault(char const*)>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	83 ec 0c             	sub    esp,0xc
c001537a:	6a 00                	push   0x0
c001537c:	e8 f3 ed ff ff       	call   c0014174 <Thr::terminateFromIRQ(int)>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	90                   	nop
c0015385:	83 c4 0c             	add    esp,0xc
c0015388:	c3                   	ret    

c0015389 <opcodeFault(regs*, void*)>:
c0015389:	55                   	push   ebp
c001538a:	89 e5                	mov    ebp,esp
c001538c:	83 ec 08             	sub    esp,0x8
c001538f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015392:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015395:	83 ec 08             	sub    esp,0x8
c0015398:	50                   	push   eax
c0015399:	68 55 ee 01 c0       	push   0xc001ee55
c001539e:	e8 6c 51 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00153a3:	83 c4 10             	add    esp,0x10
c00153a6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00153ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153b1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153b7:	84 c0                	test   al,al
c00153b9:	74 21                	je     c00153dc <opcodeFault(regs*, void*)+0x53>
c00153bb:	83 ec 0c             	sub    esp,0xc
c00153be:	68 60 ef 01 c0       	push   0xc001ef60
c00153c3:	e8 47 51 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d1:	8d 50 19             	lea    edx,[eax+0x19]
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153da:	eb 2b                	jmp    c0015407 <opcodeFault(regs*, void*)+0x7e>
c00153dc:	83 ec 0c             	sub    esp,0xc
c00153df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00153e2:	e8 a0 fa ff ff       	call   c0014e87 <displayDebugInfo(regs*)>
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	83 ec 0c             	sub    esp,0xc
c00153ed:	68 63 ee 01 c0       	push   0xc001ee63
c00153f2:	e8 27 fe ff ff       	call   c001521e <displayProgramFault(char const*)>
c00153f7:	83 c4 10             	add    esp,0x10
c00153fa:	83 ec 0c             	sub    esp,0xc
c00153fd:	6a 00                	push   0x0
c00153ff:	e8 70 ed ff ff       	call   c0014174 <Thr::terminateFromIRQ(int)>
c0015404:	83 c4 10             	add    esp,0x10
c0015407:	c9                   	leave  
c0015408:	c3                   	ret    

c0015409 <i386SaveCoprocessor(void*)>:
c0015409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001540d:	83 c0 3f             	add    eax,0x3f
c0015410:	83 e0 c0             	and    eax,0xffffffc0
c0015413:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015417:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c001541d <i386LoadCoprocessor(void*)>:
c001541d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015421:	83 c0 3f             	add    eax,0x3f
c0015424:	83 e0 c0             	and    eax,0xffffffc0
c0015427:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001542b:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c0015431 <x87EmulHandler(regs*, void*)>:
c0015431:	53                   	push   ebx
c0015432:	83 ec 08             	sub    esp,0x8
c0015435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001543a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001543e:	74 10                	je     c0015450 <x87EmulHandler(regs*, void*)+0x1f>
c0015440:	83 ec 0c             	sub    esp,0xc
c0015443:	68 70 ee 01 c0       	push   0xc001ee70
c0015448:	e8 42 ad ff ff       	call   c001018f <KePanic(char const*)>
c001544d:	83 c4 10             	add    esp,0x10
c0015450:	0f 20 c0             	mov    eax,cr0
c0015453:	a8 08                	test   al,0x8
c0015455:	74 59                	je     c00154b0 <x87EmulHandler(regs*, void*)+0x7f>
c0015457:	0f 06                	clts   
c0015459:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001545e:	85 c0                	test   eax,eax
c0015460:	74 0e                	je     c0015470 <x87EmulHandler(regs*, void*)+0x3f>
c0015462:	83 ec 0c             	sub    esp,0xc
c0015465:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015468:	e8 9c ff ff ff       	call   c0015409 <i386SaveCoprocessor(void*)>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015476:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001547a:	75 12                	jne    c001548e <x87EmulHandler(regs*, void*)+0x5d>
c001547c:	83 ec 0c             	sub    esp,0xc
c001547f:	68 40 02 00 00       	push   0x240
c0015484:	e8 30 23 ff ff       	call   c00077b9 <malloc>
c0015489:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001548c:	eb 10                	jmp    c001549e <x87EmulHandler(regs*, void*)+0x6d>
c001548e:	83 ec 0c             	sub    esp,0xc
c0015491:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c0015496:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015499:	e8 7f ff ff ff       	call   c001541d <i386LoadCoprocessor(void*)>
c001549e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154a3:	83 c4 10             	add    esp,0x10
c00154a6:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c00154ab:	83 c4 08             	add    esp,0x8
c00154ae:	5b                   	pop    ebx
c00154af:	c3                   	ret    
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	68 84 ee 01 c0       	push   0xc001ee84
c00154b8:	e8 52 50 ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00154bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154c5:	83 c4 18             	add    esp,0x18
c00154c8:	5b                   	pop    ebx
c00154c9:	e9 a6 ec ff ff       	jmp    c0014174 <Thr::terminateFromIRQ(int)>

c00154ce <HalInitialiseCoprocessor()>:
c00154ce:	83 ec 10             	sub    esp,0x10
c00154d1:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00154db:	6a 00                	push   0x0
c00154dd:	68 31 54 01 c0       	push   0xc0015431
c00154e2:	6a 07                	push   0x7
c00154e4:	e8 97 69 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154e9:	e8 92 65 00 00       	call   c001ba80 <avxDetect>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	85 c0                	test   eax,eax
c00154f3:	74 1c                	je     c0015511 <HalInitialiseCoprocessor()+0x43>
c00154f5:	c7 05 0c 52 02 c0 aa ba 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001baaa
c00154ff:	c7 05 08 52 02 c0 bb ba 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001babb
c0015509:	83 c4 0c             	add    esp,0xc
c001550c:	e9 bb 65 00 00       	jmp    c001bacc <avxInit>
c0015511:	e8 4a 68 00 00       	call   c001bd60 <absolutelyNoChanceInHell>
c0015516:	85 c0                	test   eax,eax
c0015518:	74 1c                	je     c0015536 <HalInitialiseCoprocessor()+0x68>
c001551a:	c7 05 0c 52 02 c0 78 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bd78
c0015524:	c7 05 08 52 02 c0 80 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bd80
c001552e:	83 c4 0c             	add    esp,0xc
c0015531:	e9 52 68 00 00       	jmp    c001bd88 <sseInit>
c0015536:	e8 6b 68 00 00       	call   c001bda6 <x87Detect>
c001553b:	85 c0                	test   eax,eax
c001553d:	74 1c                	je     c001555b <HalInitialiseCoprocessor()+0x8d>
c001553f:	c7 05 0c 52 02 c0 c1 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bdc1
c0015549:	c7 05 08 52 02 c0 c8 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bdc8
c0015553:	83 c4 0c             	add    esp,0xc
c0015556:	e9 74 68 00 00       	jmp    c001bdcf <x87Init>
c001555b:	c7 05 0c 52 02 c0 54 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014e54
c0015565:	c7 05 08 52 02 c0 54 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014e54
c001556f:	0f 20 c0             	mov    eax,cr0
c0015572:	83 c8 04             	or     eax,0x4
c0015575:	0f 22 c0             	mov    cr0,eax
c0015578:	83 c4 0c             	add    esp,0xc
c001557b:	c3                   	ret    

c001557c <HalPanic(char const*)>:
c001557c:	53                   	push   ebx
c001557d:	83 ec 10             	sub    esp,0x10
c0015580:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015584:	fa                   	cli    
c0015585:	53                   	push   ebx
c0015586:	68 9a ee 01 c0       	push   0xc001ee9a
c001558b:	e8 7f 4f ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c0015590:	83 c4 0c             	add    esp,0xc
c0015593:	6a 01                	push   0x1
c0015595:	6a 0f                	push   0xf
c0015597:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001559d:	e8 a8 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155a2:	58                   	pop    eax
c00155a3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155a9:	e8 94 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c00155ae:	5a                   	pop    edx
c00155af:	59                   	pop    ecx
c00155b0:	68 c8 d7 01 c0       	push   0xc001d7c8
c00155b5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155bb:	e8 c2 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00155c0:	83 c4 0c             	add    esp,0xc
c00155c3:	6a 01                	push   0x1
c00155c5:	6a 0f                	push   0xf
c00155c7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155cd:	e8 78 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155d2:	58                   	pop    eax
c00155d3:	5a                   	pop    edx
c00155d4:	68 b3 ee 01 c0       	push   0xc001eeb3
c00155d9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155df:	e8 52 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00155e4:	83 c4 0c             	add    esp,0xc
c00155e7:	6a 0f                	push   0xf
c00155e9:	6a 01                	push   0x1
c00155eb:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155f1:	e8 54 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155f6:	59                   	pop    ecx
c00155f7:	58                   	pop    eax
c00155f8:	68 bc ee 01 c0       	push   0xc001eebc
c00155fd:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015603:	e8 2e 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015608:	83 c4 0c             	add    esp,0xc
c001560b:	6a 01                	push   0x1
c001560d:	6a 0f                	push   0xf
c001560f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015615:	e8 30 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001561a:	58                   	pop    eax
c001561b:	5a                   	pop    edx
c001561c:	68 00 ef 01 c0       	push   0xc001ef00
c0015621:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015627:	e8 0a 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001562c:	59                   	pop    ecx
c001562d:	58                   	pop    eax
c001562e:	68 c9 ee 01 c0       	push   0xc001eec9
c0015633:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015639:	e8 f8 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001563e:	58                   	pop    eax
c001563f:	5a                   	pop    edx
c0015640:	68 03 ef 01 c0       	push   0xc001ef03
c0015645:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001564b:	e8 e6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015650:	59                   	pop    ecx
c0015651:	58                   	pop    eax
c0015652:	53                   	push   ebx
c0015653:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015659:	e8 d8 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001565e:	58                   	pop    eax
c001565f:	5a                   	pop    edx
c0015660:	68 00 ef 01 c0       	push   0xc001ef00
c0015665:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001566b:	e8 c6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015670:	83 c4 10             	add    esp,0x10
c0015673:	eb fe                	jmp    c0015673 <HalPanic(char const*)+0xf7>

c0015675 <HalQueryPerformanceCounter()>:
c0015675:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001567a:	31 d2                	xor    edx,edx
c001567c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015682:	31 c0                	xor    eax,eax
c0015684:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001568b:	74 02                	je     c001568f <HalQueryPerformanceCounter()+0x1a>
c001568d:	0f 31                	rdtsc  
c001568f:	c3                   	ret    

c0015690 <HalInitialise()>:
c0015690:	53                   	push   ebx
c0015691:	83 ec 08             	sub    esp,0x8
c0015694:	e8 1a 6a ff ff       	call   c000c0b3 <setupINTS()>
c0015699:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c00156a0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156a5:	75 07                	jne    c00156ae <HalInitialise()+0x1e>
c00156a7:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156ae:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00156b4:	83 e0 01             	and    eax,0x1
c00156b7:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00156bc:	e8 a7 02 00 00       	call   c0015968 <picOpen()>
c00156c1:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00156c8:	74 0a                	je     c00156d4 <HalInitialise()+0x44>
c00156ca:	e8 e1 01 00 00       	call   c00158b0 <picDisable()>
c00156cf:	e8 26 5d 00 00       	call   c001b3fa <apicOpen()>
c00156d4:	bb 0f 00 00 00       	mov    ebx,0xf
c00156d9:	50                   	push   eax
c00156da:	6a 00                	push   0x0
c00156dc:	68 55 53 01 c0       	push   0xc0015355
c00156e1:	6a 00                	push   0x0
c00156e3:	e8 98 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156e8:	83 c4 0c             	add    esp,0xc
c00156eb:	6a 00                	push   0x0
c00156ed:	68 55 53 01 c0       	push   0xc0015355
c00156f2:	6a 01                	push   0x1
c00156f4:	e8 87 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156f9:	83 c4 0c             	add    esp,0xc
c00156fc:	6a 00                	push   0x0
c00156fe:	68 55 4e 01 c0       	push   0xc0014e55
c0015703:	6a 02                	push   0x2
c0015705:	e8 76 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001570a:	83 c4 0c             	add    esp,0xc
c001570d:	6a 00                	push   0x0
c001570f:	68 55 53 01 c0       	push   0xc0015355
c0015714:	6a 03                	push   0x3
c0015716:	e8 65 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001571b:	83 c4 0c             	add    esp,0xc
c001571e:	6a 00                	push   0x0
c0015720:	68 55 53 01 c0       	push   0xc0015355
c0015725:	6a 04                	push   0x4
c0015727:	e8 54 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001572c:	83 c4 0c             	add    esp,0xc
c001572f:	6a 00                	push   0x0
c0015731:	68 55 53 01 c0       	push   0xc0015355
c0015736:	6a 05                	push   0x5
c0015738:	e8 43 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001573d:	83 c4 0c             	add    esp,0xc
c0015740:	6a 00                	push   0x0
c0015742:	68 89 53 01 c0       	push   0xc0015389
c0015747:	6a 06                	push   0x6
c0015749:	e8 32 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001574e:	83 c4 0c             	add    esp,0xc
c0015751:	6a 00                	push   0x0
c0015753:	68 6e 4e 01 c0       	push   0xc0014e6e
c0015758:	6a 08                	push   0x8
c001575a:	e8 21 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001575f:	83 c4 0c             	add    esp,0xc
c0015762:	6a 00                	push   0x0
c0015764:	68 55 53 01 c0       	push   0xc0015355
c0015769:	6a 09                	push   0x9
c001576b:	e8 10 67 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015770:	83 c4 0c             	add    esp,0xc
c0015773:	6a 00                	push   0x0
c0015775:	68 55 53 01 c0       	push   0xc0015355
c001577a:	6a 0a                	push   0xa
c001577c:	e8 ff 66 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015781:	83 c4 0c             	add    esp,0xc
c0015784:	6a 00                	push   0x0
c0015786:	68 55 53 01 c0       	push   0xc0015355
c001578b:	6a 0b                	push   0xb
c001578d:	e8 ee 66 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015792:	83 c4 0c             	add    esp,0xc
c0015795:	6a 00                	push   0x0
c0015797:	68 6a 52 01 c0       	push   0xc001526a
c001579c:	6a 0d                	push   0xd
c001579e:	e8 dd 66 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a3:	83 c4 0c             	add    esp,0xc
c00157a6:	6a 00                	push   0x0
c00157a8:	68 cf 52 01 c0       	push   0xc00152cf
c00157ad:	6a 0e                	push   0xe
c00157af:	e8 cc 66 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b4:	83 c4 10             	add    esp,0x10
c00157b7:	50                   	push   eax
c00157b8:	6a 00                	push   0x0
c00157ba:	68 55 53 01 c0       	push   0xc0015355
c00157bf:	53                   	push   ebx
c00157c0:	43                   	inc    ebx
c00157c1:	e8 ba 66 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	83 fb 1e             	cmp    ebx,0x1e
c00157cc:	75 e9                	jne    c00157b7 <HalInitialise()+0x127>
c00157ce:	50                   	push   eax
c00157cf:	6a 00                	push   0x0
c00157d1:	68 df 13 01 c0       	push   0xc00113df
c00157d6:	6a 60                	push   0x60
c00157d8:	e8 a3 66 ff ff       	call   c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157dd:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00157e2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00157ec:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00157f3:	e8 c1 1f ff ff       	call   c00077b9 <malloc>
c00157f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00157fb:	89 c3                	mov    ebx,eax
c00157fd:	e8 2e 09 00 00       	call   c0016130 <RTC::RTC()>
c0015802:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001580c:	5a                   	pop    edx
c001580d:	59                   	pop    ecx
c001580e:	53                   	push   ebx
c001580f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015815:	e8 32 61 ff ff       	call   c000b94c <Device::addChild(Device*)>
c001581a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001581c:	6a 00                	push   0x0
c001581e:	6a 00                	push   0x0
c0015820:	6a 00                	push   0x0
c0015822:	53                   	push   ebx
c0015823:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015826:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001582b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015831:	83 c4 28             	add    esp,0x28
c0015834:	5b                   	pop    ebx
c0015835:	c3                   	ret    

c0015836 <HalMakeBeep(int)>:
c0015836:	53                   	push   ebx
c0015837:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001583b:	85 db                	test   ebx,ebx
c001583d:	75 07                	jne    c0015846 <HalMakeBeep(int)+0x10>
c001583f:	e4 61                	in     al,0x61
c0015841:	83 e0 fc             	and    eax,0xfffffffc
c0015844:	eb 26                	jmp    c001586c <HalMakeBeep(int)+0x36>
c0015846:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001584b:	99                   	cdq    
c001584c:	f7 fb                	idiv   ebx
c001584e:	89 c1                	mov    ecx,eax
c0015850:	b0 b6                	mov    al,0xb6
c0015852:	e6 43                	out    0x43,al
c0015854:	88 c8                	mov    al,cl
c0015856:	e6 42                	out    0x42,al
c0015858:	89 c8                	mov    eax,ecx
c001585a:	c1 e8 08             	shr    eax,0x8
c001585d:	e6 42                	out    0x42,al
c001585f:	e4 61                	in     al,0x61
c0015861:	88 c2                	mov    dl,al
c0015863:	83 ca 03             	or     edx,0x3
c0015866:	38 c2                	cmp    dl,al
c0015868:	74 04                	je     c001586e <HalMakeBeep(int)+0x38>
c001586a:	88 d0                	mov    al,dl
c001586c:	e6 61                	out    0x61,al
c001586e:	5b                   	pop    ebx
c001586f:	c3                   	ret    

c0015870 <HalGetRand()>:
c0015870:	31 c0                	xor    eax,eax
c0015872:	c3                   	ret    

c0015873 <HalEndOfInterrupt(int)>:
c0015873:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c001587a:	74 23                	je     c001589f <HalEndOfInterrupt(int)+0x2c>
c001587c:	83 ec 14             	sub    esp,0x14
c001587f:	6a 1b                	push   0x1b
c0015881:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015887:	e8 66 15 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001588c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015891:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001589b:	83 c4 1c             	add    esp,0x1c
c001589e:	c3                   	ret    
c001589f:	e9 54 02 00 00       	jmp    c0015af8 <picEOI(int)>

c00158a4 <HalRestart()>:
c00158a4:	c3                   	ret    

c00158a5 <HalShutdown()>:
c00158a5:	c3                   	ret    

c00158a6 <HalSleep()>:
c00158a6:	c3                   	ret    
c00158a7:	90                   	nop

c00158a8 <picIoWait()>:
c00158a8:	eb 00                	jmp    c00158aa <picIoWait()+0x2>
c00158aa:	eb 00                	jmp    c00158ac <picIoWait()+0x4>
c00158ac:	90                   	nop
c00158ad:	c3                   	ret    
c00158ae:	66 90                	xchg   ax,ax

c00158b0 <picDisable()>:
c00158b0:	83 ec 10             	sub    esp,0x10
c00158b3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158ba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158c8:	ee                   	out    dx,al
c00158c9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00158d0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00158d5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00158d9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00158de:	ee                   	out    dx,al
c00158df:	90                   	nop
c00158e0:	83 c4 10             	add    esp,0x10
c00158e3:	c3                   	ret    

c00158e4 <picGetIRQReg(int)>:
c00158e4:	83 ec 10             	sub    esp,0x10
c00158e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158eb:	25 ff 00 00 00       	and    eax,0xff
c00158f0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00158f7:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00158fb:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00158ff:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015904:	ee                   	out    dx,al
c0015905:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015909:	25 ff 00 00 00       	and    eax,0xff
c001590e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015915:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015919:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001591d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015922:	ee                   	out    dx,al
c0015923:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001592a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001592f:	89 c2                	mov    edx,eax
c0015931:	ec                   	in     al,dx
c0015932:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015936:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001593a:	25 ff 00 00 00       	and    eax,0xff
c001593f:	c1 e0 08             	shl    eax,0x8
c0015942:	89 c1                	mov    ecx,eax
c0015944:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001594b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015950:	89 c2                	mov    edx,eax
c0015952:	ec                   	in     al,dx
c0015953:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015957:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001595b:	25 ff 00 00 00       	and    eax,0xff
c0015960:	09 c8                	or     eax,ecx
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	c3                   	ret    
c0015966:	66 90                	xchg   ax,ax

c0015968 <picOpen()>:
c0015968:	83 ec 50             	sub    esp,0x50
c001596b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015972:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015977:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001597b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001597f:	ee                   	out    dx,al
c0015980:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015987:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001598c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015990:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015994:	ee                   	out    dx,al
c0015995:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001599d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159a5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159b0:	89 c2                	mov    edx,eax
c00159b2:	ec                   	in     al,dx
c00159b3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159b7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159bb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159bf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159ca:	89 c2                	mov    edx,eax
c00159cc:	ec                   	in     al,dx
c00159cd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159d1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00159d5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00159d9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00159e0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00159e5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00159e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159ed:	ee                   	out    dx,al
c00159ee:	e8 b5 fe ff ff       	call   c00158a8 <picIoWait()>
c00159f3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00159fa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00159ff:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a07:	ee                   	out    dx,al
c0015a08:	e8 9b fe ff ff       	call   c00158a8 <picIoWait()>
c0015a0d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a11:	25 ff 00 00 00       	and    eax,0xff
c0015a16:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a1d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a21:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a29:	ee                   	out    dx,al
c0015a2a:	e8 79 fe ff ff       	call   c00158a8 <picIoWait()>
c0015a2f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a33:	25 ff 00 00 00       	and    eax,0xff
c0015a38:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a3f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a43:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a47:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a4b:	ee                   	out    dx,al
c0015a4c:	e8 57 fe ff ff       	call   c00158a8 <picIoWait()>
c0015a51:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a58:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a5d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a65:	ee                   	out    dx,al
c0015a66:	e8 3d fe ff ff       	call   c00158a8 <picIoWait()>
c0015a6b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015a72:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015a77:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015a7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a7f:	ee                   	out    dx,al
c0015a80:	e8 23 fe ff ff       	call   c00158a8 <picIoWait()>
c0015a85:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015a8c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015a91:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015a95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015a99:	ee                   	out    dx,al
c0015a9a:	e8 09 fe ff ff       	call   c00158a8 <picIoWait()>
c0015a9f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015aa6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015aab:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015aaf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ab3:	ee                   	out    dx,al
c0015ab4:	e8 ef fd ff ff       	call   c00158a8 <picIoWait()>
c0015ab9:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015abd:	25 ff 00 00 00       	and    eax,0xff
c0015ac2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015ac9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015acd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015ad1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015ad5:	ee                   	out    dx,al
c0015ad6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015ada:	25 ff 00 00 00       	and    eax,0xff
c0015adf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015ae6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015aea:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015aee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015af2:	ee                   	out    dx,al
c0015af3:	90                   	nop
c0015af4:	83 c4 50             	add    esp,0x50
c0015af7:	c3                   	ret    

c0015af8 <picEOI(int)>:
c0015af8:	83 ec 10             	sub    esp,0x10
c0015afb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b00:	75 22                	jne    c0015b24 <picEOI(int)+0x2c>
c0015b02:	6a 0b                	push   0xb
c0015b04:	e8 db fd ff ff       	call   c00158e4 <picGetIRQReg(int)>
c0015b09:	83 c4 04             	add    esp,0x4
c0015b0c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b11:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b16:	25 ff ff 00 00       	and    eax,0xffff
c0015b1b:	25 80 00 00 00       	and    eax,0x80
c0015b20:	74 72                	je     c0015b94 <picEOI(int)+0x9c>
c0015b22:	66 90                	xchg   ax,ax
c0015b24:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b29:	75 31                	jne    c0015b5c <picEOI(int)+0x64>
c0015b2b:	6a 0b                	push   0xb
c0015b2d:	e8 b2 fd ff ff       	call   c00158e4 <picGetIRQReg(int)>
c0015b32:	83 c4 04             	add    esp,0x4
c0015b35:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b3e:	66 85 c0             	test   ax,ax
c0015b41:	78 19                	js     c0015b5c <picEOI(int)+0x64>
c0015b43:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b4a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b58:	ee                   	out    dx,al
c0015b59:	eb 3d                	jmp    c0015b98 <picEOI(int)+0xa0>
c0015b5b:	90                   	nop
c0015b5c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b61:	7e 19                	jle    c0015b7c <picEOI(int)+0x84>
c0015b63:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015b6a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015b6f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015b73:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b78:	ee                   	out    dx,al
c0015b79:	8d 76 00             	lea    esi,[esi+0x0]
c0015b7c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015b83:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015b88:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015b8c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015b91:	ee                   	out    dx,al
c0015b92:	eb 04                	jmp    c0015b98 <picEOI(int)+0xa0>
c0015b94:	90                   	nop
c0015b95:	8d 76 00             	lea    esi,[esi+0x0]
c0015b98:	83 c4 10             	add    esp,0x10
c0015b9b:	c3                   	ret    

c0015b9c <RTC::open(int, int, void*)>:
c0015b9c:	31 c0                	xor    eax,eax
c0015b9e:	c3                   	ret    
c0015b9f:	90                   	nop

c0015ba0 <RTC::close(int, int, void*)>:
c0015ba0:	31 c0                	xor    eax,eax
c0015ba2:	c3                   	ret    
c0015ba3:	90                   	nop

c0015ba4 <RTC::timeInSecondsUTC()>:
c0015ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ba8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015bae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bb4:	c3                   	ret    
c0015bb5:	90                   	nop

c0015bb6 <RTC::timeInDatetimeUTC()>:
c0015bb6:	53                   	push   ebx
c0015bb7:	83 ec 14             	sub    esp,0x14
c0015bba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bc4:	50                   	push   eax
c0015bc5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015bc8:	83 c4 0c             	add    esp,0xc
c0015bcb:	52                   	push   edx
c0015bcc:	50                   	push   eax
c0015bcd:	53                   	push   ebx
c0015bce:	e8 ed 5a ff ff       	call   c000b6c0 <secondsToDatetime(unsigned long long)>
c0015bd3:	89 d8                	mov    eax,ebx
c0015bd5:	83 c4 14             	add    esp,0x14
c0015bd8:	5b                   	pop    ebx
c0015bd9:	c2 04 00             	ret    0x4

c0015bdc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015bdc:	56                   	push   esi
c0015bdd:	53                   	push   ebx
c0015bde:	83 ec 14             	sub    esp,0x14
c0015be1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015be5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015be7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015bea:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015bee:	52                   	push   edx
c0015bef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bf7:	50                   	push   eax
c0015bf8:	e8 c3 5a ff ff       	call   c000b6c0 <secondsToDatetime(unsigned long long)>
c0015bfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c09:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c0d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c11:	89 f0                	mov    eax,esi
c0015c13:	83 c4 20             	add    esp,0x20
c0015c16:	5b                   	pop    ebx
c0015c17:	5e                   	pop    esi
c0015c18:	ff e0                	jmp    eax

c0015c1a <RTC::~RTC()>:
c0015c1a:	83 ec 0c             	sub    esp,0xc
c0015c1d:	ba a0 ef 01 c0       	mov    edx,0xc001efa0
c0015c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c26:	89 10                	mov    DWORD PTR [eax],edx
c0015c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c2c:	83 ec 0c             	sub    esp,0xc
c0015c2f:	50                   	push   eax
c0015c30:	e8 0f 58 ff ff       	call   c000b444 <Clock::~Clock()>
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	90                   	nop
c0015c39:	83 c4 0c             	add    esp,0xc
c0015c3c:	c3                   	ret    
c0015c3d:	90                   	nop

c0015c3e <RTC::~RTC()>:
c0015c3e:	83 ec 0c             	sub    esp,0xc
c0015c41:	83 ec 0c             	sub    esp,0xc
c0015c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c48:	e8 cd ff ff ff       	call   c0015c1a <RTC::~RTC()>
c0015c4d:	83 c4 10             	add    esp,0x10
c0015c50:	83 ec 08             	sub    esp,0x8
c0015c53:	68 60 01 00 00       	push   0x160
c0015c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c5c:	e8 b8 47 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c0015c61:	83 c4 10             	add    esp,0x10
c0015c64:	83 c4 0c             	add    esp,0xc
c0015c67:	c3                   	ret    

c0015c68 <RTC::get_update_in_progress_flag()>:
c0015c68:	83 ec 14             	sub    esp,0x14
c0015c6b:	6a 0a                	push   0xa
c0015c6d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015c73:	e8 2e 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c78:	83 c4 1c             	add    esp,0x1c
c0015c7b:	c0 e8 07             	shr    al,0x7
c0015c7e:	c3                   	ret    
c0015c7f:	90                   	nop

c0015c80 <RTC::completeRTCRefresh()>:
c0015c80:	55                   	push   ebp
c0015c81:	57                   	push   edi
c0015c82:	56                   	push   esi
c0015c83:	53                   	push   ebx
c0015c84:	83 ec 2c             	sub    esp,0x2c
c0015c87:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015c8d:	83 ec 0c             	sub    esp,0xc
c0015c90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c94:	e8 cf ff ff ff       	call   c0015c68 <RTC::get_update_in_progress_flag()>
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	84 c0                	test   al,al
c0015c9e:	74 0e                	je     c0015cae <RTC::completeRTCRefresh()+0x2e>
c0015ca0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ca6:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015cac:	73 df                	jae    c0015c8d <RTC::completeRTCRefresh()+0xd>
c0015cae:	55                   	push   ebp
c0015caf:	55                   	push   ebp
c0015cb0:	6a 00                	push   0x0
c0015cb2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cb8:	e8 e9 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cbd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015cc1:	58                   	pop    eax
c0015cc2:	5a                   	pop    edx
c0015cc3:	6a 02                	push   0x2
c0015cc5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ccb:	e8 d6 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cd0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015cd4:	59                   	pop    ecx
c0015cd5:	5b                   	pop    ebx
c0015cd6:	6a 04                	push   0x4
c0015cd8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cde:	e8 c3 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ce3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015ce7:	5e                   	pop    esi
c0015ce8:	5f                   	pop    edi
c0015ce9:	6a 07                	push   0x7
c0015ceb:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cf1:	e8 b0 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cf6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015cfa:	5d                   	pop    ebp
c0015cfb:	58                   	pop    eax
c0015cfc:	6a 08                	push   0x8
c0015cfe:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d04:	e8 9d 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d09:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d0d:	58                   	pop    eax
c0015d0e:	5a                   	pop    edx
c0015d0f:	6a 09                	push   0x9
c0015d11:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d17:	e8 8a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	0f b6 e8             	movzx  ebp,al
c0015d22:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d28:	83 ec 0c             	sub    esp,0xc
c0015d2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d2f:	e8 34 ff ff ff       	call   c0015c68 <RTC::get_update_in_progress_flag()>
c0015d34:	83 c4 10             	add    esp,0x10
c0015d37:	84 c0                	test   al,al
c0015d39:	74 0e                	je     c0015d49 <RTC::completeRTCRefresh()+0xc9>
c0015d3b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d41:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d47:	73 df                	jae    c0015d28 <RTC::completeRTCRefresh()+0xa8>
c0015d49:	50                   	push   eax
c0015d4a:	50                   	push   eax
c0015d4b:	6a 00                	push   0x0
c0015d4d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d53:	e8 4e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d58:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d5c:	58                   	pop    eax
c0015d5d:	5a                   	pop    edx
c0015d5e:	6a 02                	push   0x2
c0015d60:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d66:	e8 3b 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d6b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015d6f:	59                   	pop    ecx
c0015d70:	5b                   	pop    ebx
c0015d71:	6a 04                	push   0x4
c0015d73:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d79:	e8 28 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d7e:	5e                   	pop    esi
c0015d7f:	88 c3                	mov    bl,al
c0015d81:	5f                   	pop    edi
c0015d82:	6a 07                	push   0x7
c0015d84:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d8a:	e8 17 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d8f:	89 c6                	mov    esi,eax
c0015d91:	58                   	pop    eax
c0015d92:	5a                   	pop    edx
c0015d93:	6a 08                	push   0x8
c0015d95:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d9b:	e8 06 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015da0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015da4:	59                   	pop    ecx
c0015da5:	5f                   	pop    edi
c0015da6:	6a 09                	push   0x9
c0015da8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dae:	e8 f3 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015db3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015db7:	0f b6 f8             	movzx  edi,al
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015dc1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015dc5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015dc9:	89 f1                	mov    ecx,esi
c0015dcb:	0f 94 c0             	sete   al
c0015dce:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015dd2:	0f 94 c2             	sete   dl
c0015dd5:	21 d0                	and    eax,edx
c0015dd7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015ddb:	0f 94 c2             	sete   dl
c0015dde:	21 c2                	and    edx,eax
c0015de0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015de4:	0f 94 c0             	sete   al
c0015de7:	21 d0                	and    eax,edx
c0015de9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ded:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015df1:	0f 94 c1             	sete   cl
c0015df4:	84 c8                	test   al,cl
c0015df6:	75 29                	jne    c0015e21 <RTC::completeRTCRefresh()+0x1a1>
c0015df8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015dfc:	89 fd                	mov    ebp,edi
c0015dfe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e02:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e06:	89 f0                	mov    eax,esi
c0015e08:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e0c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e10:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e14:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e18:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e1c:	e9 01 ff ff ff       	jmp    c0015d22 <RTC::completeRTCRefresh()+0xa2>
c0015e21:	39 fd                	cmp    ebp,edi
c0015e23:	75 d3                	jne    c0015df8 <RTC::completeRTCRefresh()+0x178>
c0015e25:	55                   	push   ebp
c0015e26:	55                   	push   ebp
c0015e27:	6a 0b                	push   0xb
c0015e29:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e2f:	e8 72 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e34:	83 c4 10             	add    esp,0x10
c0015e37:	89 c5                	mov    ebp,eax
c0015e39:	a8 04                	test   al,0x4
c0015e3b:	75 78                	jne    c0015eb5 <RTC::completeRTCRefresh()+0x235>
c0015e3d:	b1 0a                	mov    cl,0xa
c0015e3f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e43:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e47:	83 e2 0f             	and    edx,0xf
c0015e4a:	c0 e8 04             	shr    al,0x4
c0015e4d:	c1 ef 04             	shr    edi,0x4
c0015e50:	f6 e1                	mul    cl
c0015e52:	6b ff 0a             	imul   edi,edi,0xa
c0015e55:	01 d0                	add    eax,edx
c0015e57:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e5b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e5f:	83 e2 0f             	and    edx,0xf
c0015e62:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e66:	c0 e8 04             	shr    al,0x4
c0015e69:	f6 e1                	mul    cl
c0015e6b:	01 d0                	add    eax,edx
c0015e6d:	88 da                	mov    dl,bl
c0015e6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e73:	83 e2 0f             	and    edx,0xf
c0015e76:	88 d8                	mov    al,bl
c0015e78:	83 e3 80             	and    ebx,0xffffff80
c0015e7b:	c0 e8 04             	shr    al,0x4
c0015e7e:	83 e0 07             	and    eax,0x7
c0015e81:	f6 e1                	mul    cl
c0015e83:	01 d0                	add    eax,edx
c0015e85:	89 f2                	mov    edx,esi
c0015e87:	09 c3                	or     ebx,eax
c0015e89:	83 e2 0f             	and    edx,0xf
c0015e8c:	89 f0                	mov    eax,esi
c0015e8e:	c0 e8 04             	shr    al,0x4
c0015e91:	f6 e1                	mul    cl
c0015e93:	8d 34 02             	lea    esi,[edx+eax*1]
c0015e96:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e9a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e9e:	83 e2 0f             	and    edx,0xf
c0015ea1:	c0 e8 04             	shr    al,0x4
c0015ea4:	f6 e1                	mul    cl
c0015ea6:	01 d0                	add    eax,edx
c0015ea8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015eac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015eb0:	83 e0 0f             	and    eax,0xf
c0015eb3:	01 c7                	add    edi,eax
c0015eb5:	83 e5 02             	and    ebp,0x2
c0015eb8:	75 14                	jne    c0015ece <RTC::completeRTCRefresh()+0x24e>
c0015eba:	84 db                	test   bl,bl
c0015ebc:	79 10                	jns    c0015ece <RTC::completeRTCRefresh()+0x24e>
c0015ebe:	83 e3 7f             	and    ebx,0x7f
c0015ec1:	b9 18 00 00 00       	mov    ecx,0x18
c0015ec6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015ec9:	99                   	cdq    
c0015eca:	f7 f9                	idiv   ecx
c0015ecc:	88 d3                	mov    bl,dl
c0015ece:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ed4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015eda:	77 06                	ja     c0015ee2 <RTC::completeRTCRefresh()+0x262>
c0015edc:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015ee2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015ee7:	31 d2                	xor    edx,edx
c0015ee9:	c1 e1 10             	shl    ecx,0x10
c0015eec:	89 d7                	mov    edi,edx
c0015eee:	c1 e5 10             	shl    ebp,0x10
c0015ef1:	31 c0                	xor    eax,eax
c0015ef3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015ef9:	09 cf                	or     edi,ecx
c0015efb:	89 fa                	mov    edx,edi
c0015efd:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f01:	88 da                	mov    dl,bl
c0015f03:	89 f3                	mov    ebx,esi
c0015f05:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f09:	88 d8                	mov    al,bl
c0015f0b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f0f:	0f b7 c8             	movzx  ecx,ax
c0015f12:	09 e9                	or     ecx,ebp
c0015f14:	89 c8                	mov    eax,ecx
c0015f16:	51                   	push   ecx
c0015f17:	51                   	push   ecx
c0015f18:	52                   	push   edx
c0015f19:	50                   	push   eax
c0015f1a:	e8 14 56 ff ff       	call   c000b533 <datetimeToSeconds(datetime_t)>
c0015f1f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f23:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f29:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f2f:	83 c4 3c             	add    esp,0x3c
c0015f32:	5b                   	pop    ebx
c0015f33:	5e                   	pop    esi
c0015f34:	5f                   	pop    edi
c0015f35:	5d                   	pop    ebp
c0015f36:	c3                   	ret    
c0015f37:	90                   	nop

c0015f38 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f38:	55                   	push   ebp
c0015f39:	57                   	push   edi
c0015f3a:	56                   	push   esi
c0015f3b:	53                   	push   ebx
c0015f3c:	83 ec 30             	sub    esp,0x30
c0015f3f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f43:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f47:	6a 00                	push   0x0
c0015f49:	6a 00                	push   0x0
c0015f4b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f51:	e8 66 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f56:	83 c4 0c             	add    esp,0xc
c0015f59:	6a 00                	push   0x0
c0015f5b:	6a 02                	push   0x2
c0015f5d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f63:	e8 54 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f68:	31 d2                	xor    edx,edx
c0015f6a:	89 f9                	mov    ecx,edi
c0015f6c:	89 f8                	mov    eax,edi
c0015f6e:	c1 e9 10             	shr    ecx,0x10
c0015f71:	0f b6 c4             	movzx  eax,ah
c0015f74:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015f78:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015f7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f80:	b9 64 00 00 00       	mov    ecx,0x64
c0015f85:	89 f0                	mov    eax,esi
c0015f87:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015f8b:	89 f0                	mov    eax,esi
c0015f8d:	0f b6 c4             	movzx  eax,ah
c0015f90:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015f94:	89 f0                	mov    eax,esi
c0015f96:	c1 e8 10             	shr    eax,0x10
c0015f99:	66 f7 f1             	div    cx
c0015f9c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fa1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fa6:	59                   	pop    ecx
c0015fa7:	5b                   	pop    ebx
c0015fa8:	89 fb                	mov    ebx,edi
c0015faa:	6a 0b                	push   0xb
c0015fac:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fb2:	e8 ef 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fb7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015fc3:	75 74                	jne    c0016039 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015fc5:	b2 0a                	mov    dl,0xa
c0015fc7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015fcb:	0f b6 c1             	movzx  eax,cl
c0015fce:	f6 f2                	div    dl
c0015fd0:	88 c3                	mov    bl,al
c0015fd2:	88 e0                	mov    al,ah
c0015fd4:	c1 e3 04             	shl    ebx,0x4
c0015fd7:	09 c3                	or     ebx,eax
c0015fd9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015fde:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015fe2:	f6 f2                	div    dl
c0015fe4:	88 c1                	mov    cl,al
c0015fe6:	88 e0                	mov    al,ah
c0015fe8:	c1 e1 04             	shl    ecx,0x4
c0015feb:	09 c1                	or     ecx,eax
c0015fed:	89 f8                	mov    eax,edi
c0015fef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015ff3:	0f b6 c0             	movzx  eax,al
c0015ff6:	f6 f2                	div    dl
c0015ff8:	88 c3                	mov    bl,al
c0015ffa:	88 e0                	mov    al,ah
c0015ffc:	c1 e3 04             	shl    ebx,0x4
c0015fff:	09 c3                	or     ebx,eax
c0016001:	89 f0                	mov    eax,esi
c0016003:	0f b6 c0             	movzx  eax,al
c0016006:	f6 f2                	div    dl
c0016008:	88 c1                	mov    cl,al
c001600a:	88 e0                	mov    al,ah
c001600c:	c1 e1 04             	shl    ecx,0x4
c001600f:	09 c1                	or     ecx,eax
c0016011:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016016:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001601a:	f6 f2                	div    dl
c001601c:	88 c1                	mov    cl,al
c001601e:	88 e0                	mov    al,ah
c0016020:	c1 e1 04             	shl    ecx,0x4
c0016023:	09 c1                	or     ecx,eax
c0016025:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001602a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001602e:	f6 f2                	div    dl
c0016030:	89 c5                	mov    ebp,eax
c0016032:	88 e0                	mov    al,ah
c0016034:	c1 e5 04             	shl    ebp,0x4
c0016037:	09 c5                	or     ebp,eax
c0016039:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001603e:	75 17                	jne    c0016057 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016040:	80 fb 0b             	cmp    bl,0xb
c0016043:	76 0c                	jbe    c0016051 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016045:	80 eb 0c             	sub    bl,0xc
c0016048:	75 02                	jne    c001604c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001604a:	b3 0c                	mov    bl,0xc
c001604c:	83 cb 80             	or     ebx,0xffffff80
c001604f:	eb 06                	jmp    c0016057 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016051:	84 db                	test   bl,bl
c0016053:	75 02                	jne    c0016057 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016055:	b3 0c                	mov    bl,0xc
c0016057:	0f b6 db             	movzx  ebx,bl
c001605a:	50                   	push   eax
c001605b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016060:	50                   	push   eax
c0016061:	6a 00                	push   0x0
c0016063:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016069:	e8 4e 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001606e:	83 c4 0c             	add    esp,0xc
c0016071:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016076:	50                   	push   eax
c0016077:	6a 02                	push   0x2
c0016079:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001607f:	e8 38 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016084:	83 c4 0c             	add    esp,0xc
c0016087:	53                   	push   ebx
c0016088:	6a 04                	push   0x4
c001608a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016090:	e8 27 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016095:	83 c4 0c             	add    esp,0xc
c0016098:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001609d:	50                   	push   eax
c001609e:	6a 07                	push   0x7
c00160a0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160a6:	e8 11 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160ab:	83 c4 0c             	add    esp,0xc
c00160ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160b3:	50                   	push   eax
c00160b4:	6a 08                	push   0x8
c00160b6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160bc:	e8 fb 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160c1:	83 c4 0c             	add    esp,0xc
c00160c4:	89 e8                	mov    eax,ebp
c00160c6:	0f b6 e8             	movzx  ebp,al
c00160c9:	55                   	push   ebp
c00160ca:	6a 09                	push   0x9
c00160cc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160d2:	e8 e5 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160d7:	5a                   	pop    edx
c00160d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00160dc:	e8 9f fb ff ff       	call   c0015c80 <RTC::completeRTCRefresh()>
c00160e1:	83 c4 3c             	add    esp,0x3c
c00160e4:	b0 01                	mov    al,0x1
c00160e6:	5b                   	pop    ebx
c00160e7:	5e                   	pop    esi
c00160e8:	5f                   	pop    edi
c00160e9:	5d                   	pop    ebp
c00160ea:	c3                   	ret    

c00160eb <rtcIRQHandler(regs*, void*)>:
c00160eb:	53                   	push   ebx
c00160ec:	83 ec 10             	sub    esp,0x10
c00160ef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160f3:	6a 0c                	push   0xc
c00160f5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160fb:	e8 a6 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016100:	83 c4 10             	add    esp,0x10
c0016103:	84 c0                	test   al,al
c0016105:	79 24                	jns    c001612b <rtcIRQHandler(regs*, void*)+0x40>
c0016107:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001610e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016115:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c001611c:	75 0d                	jne    c001612b <rtcIRQHandler(regs*, void*)+0x40>
c001611e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016122:	83 c4 08             	add    esp,0x8
c0016125:	5b                   	pop    ebx
c0016126:	e9 55 fb ff ff       	jmp    c0015c80 <RTC::completeRTCRefresh()>
c001612b:	83 c4 08             	add    esp,0x8
c001612e:	5b                   	pop    ebx
c001612f:	c3                   	ret    

c0016130 <RTC::RTC()>:
c0016130:	83 ec 1c             	sub    esp,0x1c
c0016133:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016137:	83 ec 08             	sub    esp,0x8
c001613a:	68 83 ef 01 c0       	push   0xc001ef83
c001613f:	50                   	push   eax
c0016140:	e8 c9 52 ff ff       	call   c000b40e <Clock::Clock(char const*)>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	ba a0 ef 01 c0       	mov    edx,0xc001efa0
c001614d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016151:	89 10                	mov    DWORD PTR [eax],edx
c0016153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016157:	83 ec 0c             	sub    esp,0xc
c001615a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001615e:	6a 01                	push   0x1
c0016160:	68 eb 60 01 c0       	push   0xc00160eb
c0016165:	6a 08                	push   0x8
c0016167:	50                   	push   eax
c0016168:	e8 8b 57 ff ff       	call   c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001616d:	83 c4 20             	add    esp,0x20
c0016170:	89 c2                	mov    edx,eax
c0016172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016176:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001617c:	fa                   	cli    
c001617d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016182:	40                   	inc    eax
c0016183:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0016188:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001618d:	83 ec 08             	sub    esp,0x8
c0016190:	6a 0b                	push   0xb
c0016192:	50                   	push   eax
c0016193:	e8 0e 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001619f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161a4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161a8:	83 ca 10             	or     edx,0x10
c00161ab:	81 e2 ff 00 00 00    	and    edx,0xff
c00161b1:	83 ec 04             	sub    esp,0x4
c00161b4:	52                   	push   edx
c00161b5:	6a 0b                	push   0xb
c00161b7:	50                   	push   eax
c00161b8:	e8 ff 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161bd:	83 c4 10             	add    esp,0x10
c00161c0:	83 ec 0c             	sub    esp,0xc
c00161c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161c7:	e8 b4 fa ff ff       	call   c0015c80 <RTC::completeRTCRefresh()>
c00161cc:	83 c4 10             	add    esp,0x10
c00161cf:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161d4:	48                   	dec    eax
c00161d5:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161da:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161df:	85 c0                	test   eax,eax
c00161e1:	75 01                	jne    c00161e4 <RTC::RTC()+0xb4>
c00161e3:	fb                   	sti    
c00161e4:	90                   	nop
c00161e5:	83 c4 1c             	add    esp,0x1c
c00161e8:	c3                   	ret    
c00161e9:	66 90                	xchg   ax,ax
c00161eb:	90                   	nop

c00161ec <HalConsoleScroll(int, int)>:
c00161ec:	83 ec 10             	sub    esp,0x10
c00161ef:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00161f7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00161ff:	90                   	nop
c0016200:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016205:	0f 8f e1 00 00 00    	jg     c00162ec <HalConsoleScroll(int, int)+0x100>
c001620b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016213:	90                   	nop
c0016214:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001621c:	0f 8f be 00 00 00    	jg     c00162e0 <HalConsoleScroll(int, int)+0xf4>
c0016222:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016226:	89 d0                	mov    eax,edx
c0016228:	c1 e0 02             	shl    eax,0x2
c001622b:	01 d0                	add    eax,edx
c001622d:	c1 e0 05             	shl    eax,0x5
c0016230:	89 c2                	mov    edx,eax
c0016232:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016236:	01 d0                	add    eax,edx
c0016238:	89 c2                	mov    edx,eax
c001623a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001623e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016245:	89 d0                	mov    eax,edx
c0016247:	c1 e0 02             	shl    eax,0x2
c001624a:	01 d0                	add    eax,edx
c001624c:	c1 e0 05             	shl    eax,0x5
c001624f:	89 c2                	mov    edx,eax
c0016251:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016255:	01 d0                	add    eax,edx
c0016257:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001625d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016261:	01 c2                	add    edx,eax
c0016263:	8a 01                	mov    al,BYTE PTR [ecx]
c0016265:	88 02                	mov    BYTE PTR [edx],al
c0016267:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001626c:	75 66                	jne    c00162d4 <HalConsoleScroll(int, int)+0xe8>
c001626e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016272:	83 e0 01             	and    eax,0x1
c0016275:	74 39                	je     c00162b0 <HalConsoleScroll(int, int)+0xc4>
c0016277:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001627b:	83 e0 0f             	and    eax,0xf
c001627e:	88 c2                	mov    dl,al
c0016280:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016284:	c1 e0 04             	shl    eax,0x4
c0016287:	88 d1                	mov    cl,dl
c0016289:	09 c1                	or     ecx,eax
c001628b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001628f:	89 d0                	mov    eax,edx
c0016291:	c1 e0 02             	shl    eax,0x2
c0016294:	01 d0                	add    eax,edx
c0016296:	c1 e0 05             	shl    eax,0x5
c0016299:	89 c2                	mov    edx,eax
c001629b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001629f:	01 d0                	add    eax,edx
c00162a1:	89 c2                	mov    edx,eax
c00162a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162a7:	01 d0                	add    eax,edx
c00162a9:	88 ca                	mov    dl,cl
c00162ab:	88 10                	mov    BYTE PTR [eax],dl
c00162ad:	eb 25                	jmp    c00162d4 <HalConsoleScroll(int, int)+0xe8>
c00162af:	90                   	nop
c00162b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162b4:	89 d0                	mov    eax,edx
c00162b6:	c1 e0 02             	shl    eax,0x2
c00162b9:	01 d0                	add    eax,edx
c00162bb:	c1 e0 05             	shl    eax,0x5
c00162be:	89 c2                	mov    edx,eax
c00162c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162c4:	01 d0                	add    eax,edx
c00162c6:	89 c2                	mov    edx,eax
c00162c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162cc:	01 d0                	add    eax,edx
c00162ce:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00162d1:	8d 76 00             	lea    esi,[esi+0x0]
c00162d4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00162d8:	e9 37 ff ff ff       	jmp    c0016214 <HalConsoleScroll(int, int)+0x28>
c00162dd:	8d 76 00             	lea    esi,[esi+0x0]
c00162e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00162e4:	e9 17 ff ff ff       	jmp    c0016200 <HalConsoleScroll(int, int)+0x14>
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ec:	90                   	nop
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	c3                   	ret    
c00162f1:	8d 76 00             	lea    esi,[esi+0x0]

c00162f4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00162f4:	83 ec 14             	sub    esp,0x14
c00162f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162fb:	88 04 24             	mov    BYTE PTR [esp],al
c00162fe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016301:	25 ff 00 00 00       	and    eax,0xff
c0016306:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001630a:	89 d1                	mov    ecx,edx
c001630c:	83 e1 0f             	and    ecx,0xf
c001630f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016313:	c1 e2 04             	shl    edx,0x4
c0016316:	81 e2 ff 00 00 00    	and    edx,0xff
c001631c:	09 ca                	or     edx,ecx
c001631e:	c1 e2 08             	shl    edx,0x8
c0016321:	09 d0                	or     eax,edx
c0016323:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016328:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016330:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016334:	89 d0                	mov    eax,edx
c0016336:	c1 e0 02             	shl    eax,0x2
c0016339:	01 d0                	add    eax,edx
c001633b:	c1 e0 04             	shl    eax,0x4
c001633e:	89 c2                	mov    edx,eax
c0016340:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016344:	01 d0                	add    eax,edx
c0016346:	01 c0                	add    eax,eax
c0016348:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001634c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016350:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016355:	66 89 02             	mov    WORD PTR [edx],ax
c0016358:	90                   	nop
c0016359:	83 c4 14             	add    esp,0x14
c001635c:	c3                   	ret    
c001635d:	8d 76 00             	lea    esi,[esi+0x0]

c0016360 <HalConsoleCursorUpdate(int, int)>:
c0016360:	83 ec 20             	sub    esp,0x20
c0016363:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016367:	89 c2                	mov    edx,eax
c0016369:	89 d0                	mov    eax,edx
c001636b:	c1 e0 02             	shl    eax,0x2
c001636e:	01 d0                	add    eax,edx
c0016370:	c1 e0 04             	shl    eax,0x4
c0016373:	89 c2                	mov    edx,eax
c0016375:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016379:	01 d0                	add    eax,edx
c001637b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016380:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016387:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001638c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016394:	ee                   	out    dx,al
c0016395:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001639a:	25 ff 00 00 00       	and    eax,0xff
c001639f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163a6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163aa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163b2:	ee                   	out    dx,al
c00163b3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163ba:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163c7:	ee                   	out    dx,al
c00163c8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163cd:	66 c1 e8 08          	shr    ax,0x8
c00163d1:	25 ff 00 00 00       	and    eax,0xff
c00163d6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00163dd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00163e1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00163e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163e9:	ee                   	out    dx,al
c00163ea:	90                   	nop
c00163eb:	83 c4 20             	add    esp,0x20
c00163ee:	c3                   	ret    
c00163ef:	90                   	nop

c00163f0 <FAT::getName()>:
c00163f0:	b8 d4 ef 01 c0       	mov    eax,0xc001efd4
c00163f5:	c3                   	ret    
c00163f6:	66 90                	xchg   ax,ax

c00163f8 <FAT::tell(void*, unsigned long long*)>:
c00163f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00163fd:	75 09                	jne    c0016408 <FAT::tell(void*, unsigned long long*)+0x10>
c00163ff:	b8 04 00 00 00       	mov    eax,0x4
c0016404:	c3                   	ret    
c0016405:	8d 76 00             	lea    esi,[esi+0x0]
c0016408:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001640d:	75 09                	jne    c0016418 <FAT::tell(void*, unsigned long long*)+0x20>
c001640f:	b8 04 00 00 00       	mov    eax,0x4
c0016414:	c3                   	ret    
c0016415:	8d 76 00             	lea    esi,[esi+0x0]
c0016418:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001641c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001641f:	ba 00 00 00 00       	mov    edx,0x0
c0016424:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016428:	89 01                	mov    DWORD PTR [ecx],eax
c001642a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001642d:	b8 00 00 00 00       	mov    eax,0x0
c0016432:	c3                   	ret    
c0016433:	90                   	nop

c0016434 <FAT::stat(void*, unsigned long long*)>:
c0016434:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016439:	75 09                	jne    c0016444 <FAT::stat(void*, unsigned long long*)+0x10>
c001643b:	b8 04 00 00 00       	mov    eax,0x4
c0016440:	c3                   	ret    
c0016441:	8d 76 00             	lea    esi,[esi+0x0]
c0016444:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016449:	75 09                	jne    c0016454 <FAT::stat(void*, unsigned long long*)+0x20>
c001644b:	b8 04 00 00 00       	mov    eax,0x4
c0016450:	c3                   	ret    
c0016451:	8d 76 00             	lea    esi,[esi+0x0]
c0016454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016458:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001645b:	ba 00 00 00 00       	mov    edx,0x0
c0016460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016464:	89 01                	mov    DWORD PTR [ecx],eax
c0016466:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016469:	b8 00 00 00 00       	mov    eax,0x0
c001646e:	c3                   	ret    
c001646f:	90                   	nop

c0016470 <FAT::~FAT()>:
c0016470:	83 ec 0c             	sub    esp,0xc
c0016473:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c0016478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647c:	89 10                	mov    DWORD PTR [eax],edx
c001647e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016482:	83 ec 0c             	sub    esp,0xc
c0016485:	50                   	push   eax
c0016486:	e8 c9 43 ff ff       	call   c000a854 <Filesystem::~Filesystem()>
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	90                   	nop
c001648f:	83 c4 0c             	add    esp,0xc
c0016492:	c3                   	ret    
c0016493:	90                   	nop

c0016494 <FAT::~FAT()>:
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	83 ec 0c             	sub    esp,0xc
c001649a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649e:	e8 cd ff ff ff       	call   c0016470 <FAT::~FAT()>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	83 ec 08             	sub    esp,0x8
c00164a9:	6a 08                	push   0x8
c00164ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164af:	e8 65 3f ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c00164b4:	83 c4 10             	add    esp,0x10
c00164b7:	83 c4 0c             	add    esp,0xc
c00164ba:	c3                   	ret    
c00164bb:	90                   	nop

c00164bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164bc:	83 ec 1c             	sub    esp,0x1c
c00164bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00164cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164cf:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00164d6:	83 f8 ff             	cmp    eax,0xffffffff
c00164d9:	75 35                	jne    c0016510 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00164db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00164df:	88 c2                	mov    dl,al
c00164e1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00164e6:	01 d0                	add    eax,edx
c00164e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00164ec:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00164f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164f6:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00164fd:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016502:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016506:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001650d:	eb 19                	jmp    c0016528 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001650f:	90                   	nop
c0016510:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016514:	88 c2                	mov    dl,al
c0016516:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001651a:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016521:	01 d0                	add    eax,edx
c0016523:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016527:	90                   	nop
c0016528:	83 ec 04             	sub    esp,0x4
c001652b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001652f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016533:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016537:	50                   	push   eax
c0016538:	e8 17 e9 fe ff       	call   c0004e54 <f_getlabel>
c001653d:	83 c4 10             	add    esp,0x10
c0016540:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016544:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016549:	75 09                	jne    c0016554 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001654b:	b8 00 00 00 00       	mov    eax,0x0
c0016550:	eb 0a                	jmp    c001655c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016552:	66 90                	xchg   ax,ax
c0016554:	b8 01 00 00 00       	mov    eax,0x1
c0016559:	8d 76 00             	lea    esi,[esi+0x0]
c001655c:	83 c4 1c             	add    esp,0x1c
c001655f:	c3                   	ret    

c0016560 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016560:	57                   	push   edi
c0016561:	83 ec 58             	sub    esp,0x58
c0016564:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001656c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016570:	b8 00 00 00 00       	mov    eax,0x0
c0016575:	b9 0f 00 00 00       	mov    ecx,0xf
c001657a:	fc                   	cld    
c001657b:	89 d7                	mov    edi,edx
c001657d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001657f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016583:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001658a:	83 f8 ff             	cmp    eax,0xffffffff
c001658d:	75 35                	jne    c00165c4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001658f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016593:	88 c2                	mov    dl,al
c0016595:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001659a:	01 d0                	add    eax,edx
c001659c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165a0:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165aa:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00165b1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165b6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165ba:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00165c1:	eb 19                	jmp    c00165dc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165c3:	90                   	nop
c00165c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165c8:	88 c2                	mov    dl,al
c00165ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ce:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165d5:	01 d0                	add    eax,edx
c00165d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165db:	90                   	nop
c00165dc:	83 ec 08             	sub    esp,0x8
c00165df:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00165e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165e7:	50                   	push   eax
c00165e8:	e8 d3 a1 fe ff       	call   c00007c0 <strcat>
c00165ed:	83 c4 10             	add    esp,0x10
c00165f0:	83 ec 0c             	sub    esp,0xc
c00165f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165f7:	50                   	push   eax
c00165f8:	e8 a8 e9 fe ff       	call   c0004fa5 <f_setlabel>
c00165fd:	83 c4 10             	add    esp,0x10
c0016600:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016604:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016609:	75 09                	jne    c0016614 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001660b:	b8 00 00 00 00       	mov    eax,0x0
c0016610:	eb 0a                	jmp    c001661c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016612:	66 90                	xchg   ax,ax
c0016614:	b8 01 00 00 00       	mov    eax,0x1
c0016619:	8d 76 00             	lea    esi,[esi+0x0]
c001661c:	83 c4 58             	add    esp,0x58
c001661f:	5f                   	pop    edi
c0016620:	c3                   	ret    
c0016621:	90                   	nop
c0016622:	66 90                	xchg   ax,ax

c0016624 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016624:	83 ec 2c             	sub    esp,0x2c
c0016627:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001662f:	83 ec 08             	sub    esp,0x8
c0016632:	68 f8 ef 01 c0       	push   0xc001eff8
c0016637:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001663b:	e8 a0 a0 fe ff       	call   c00006e0 <strcmp>
c0016640:	83 c4 10             	add    esp,0x10
c0016643:	85 c0                	test   eax,eax
c0016645:	0f 94 c0             	sete   al
c0016648:	84 c0                	test   al,al
c001664a:	74 10                	je     c001665c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001664c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016654:	e9 b3 00 00 00       	jmp    c001670c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016659:	8d 76 00             	lea    esi,[esi+0x0]
c001665c:	83 ec 08             	sub    esp,0x8
c001665f:	68 ea ef 01 c0       	push   0xc001efea
c0016664:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016668:	e8 73 a0 fe ff       	call   c00006e0 <strcmp>
c001666d:	83 c4 10             	add    esp,0x10
c0016670:	85 c0                	test   eax,eax
c0016672:	0f 94 c0             	sete   al
c0016675:	84 c0                	test   al,al
c0016677:	74 0f                	je     c0016688 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016679:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016681:	e9 86 00 00 00       	jmp    c001670c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016686:	66 90                	xchg   ax,ax
c0016688:	83 ec 08             	sub    esp,0x8
c001668b:	68 f0 ef 01 c0       	push   0xc001eff0
c0016690:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016694:	e8 47 a0 fe ff       	call   c00006e0 <strcmp>
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	85 c0                	test   eax,eax
c001669e:	0f 94 c0             	sete   al
c00166a1:	84 c0                	test   al,al
c00166a3:	74 0b                	je     c00166b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166a5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166ad:	eb 5d                	jmp    c001670c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166af:	90                   	nop
c00166b0:	83 ec 08             	sub    esp,0x8
c00166b3:	68 dc ce 01 c0       	push   0xc001cedc
c00166b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166bc:	e8 1f a0 fe ff       	call   c00006e0 <strcmp>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	85 c0                	test   eax,eax
c00166c6:	0f 94 c0             	sete   al
c00166c9:	84 c0                	test   al,al
c00166cb:	74 0b                	je     c00166d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00166cd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00166d5:	eb 35                	jmp    c001670c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166d7:	90                   	nop
c00166d8:	83 ec 08             	sub    esp,0x8
c00166db:	68 f6 ef 01 c0       	push   0xc001eff6
c00166e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166e4:	e8 f7 9f fe ff       	call   c00006e0 <strcmp>
c00166e9:	83 c4 10             	add    esp,0x10
c00166ec:	85 c0                	test   eax,eax
c00166ee:	0f 94 c0             	sete   al
c00166f1:	84 c0                	test   al,al
c00166f3:	74 0b                	je     c0016700 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00166f5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00166fd:	eb 0d                	jmp    c001670c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166ff:	90                   	nop
c0016700:	b8 08 00 00 00       	mov    eax,0x8
c0016705:	e9 ea 00 00 00       	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001670a:	66 90                	xchg   ax,ax
c001670c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016713:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016718:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001671c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016723:	83 f8 ff             	cmp    eax,0xffffffff
c0016726:	75 34                	jne    c001675c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016728:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001672c:	88 c2                	mov    dl,al
c001672e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016733:	01 d0                	add    eax,edx
c0016735:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016739:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001673f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016743:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001674a:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001674f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016753:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001675a:	eb 18                	jmp    c0016774 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001675c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016760:	88 c2                	mov    dl,al
c0016762:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016766:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001676d:	01 d0                	add    eax,edx
c001676f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016773:	90                   	nop
c0016774:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016778:	88 04 24             	mov    BYTE PTR [esp],al
c001677b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001677f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016783:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001678b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016790:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016798:	83 ec 0c             	sub    esp,0xc
c001679b:	68 00 20 00 00       	push   0x2000
c00167a0:	e8 14 10 ff ff       	call   c00077b9 <malloc>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167ac:	68 00 20 00 00       	push   0x2000
c00167b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167b9:	50                   	push   eax
c00167ba:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167be:	50                   	push   eax
c00167bf:	e8 d1 ea fe ff       	call   c0005295 <f_mkfs>
c00167c4:	83 c4 10             	add    esp,0x10
c00167c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167d0:	75 0a                	jne    c00167dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00167d2:	b8 00 00 00 00       	mov    eax,0x0
c00167d7:	eb 1b                	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167d9:	8d 76 00             	lea    esi,[esi+0x0]
c00167dc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00167e1:	75 09                	jne    c00167ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00167e3:	b8 09 00 00 00       	mov    eax,0x9
c00167e8:	eb 0a                	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167ea:	66 90                	xchg   ax,ax
c00167ec:	b8 01 00 00 00       	mov    eax,0x1
c00167f1:	8d 76 00             	lea    esi,[esi+0x0]
c00167f4:	83 c4 2c             	add    esp,0x2c
c00167f7:	c3                   	ret    

c00167f8 <FAT::tryMount(LogicalDisk*, int)>:
c00167f8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00167fe:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016803:	83 f8 14             	cmp    eax,0x14
c0016806:	75 18                	jne    c0016820 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	68 fc ef 01 c0       	push   0xc001effc
c0016810:	e8 7a 99 ff ff       	call   c001018f <KePanic(char const*)>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	b0 00                	mov    al,0x0
c001681a:	e9 e9 01 00 00       	jmp    c0016a08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001681f:	90                   	nop
c0016820:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016827:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001682d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016833:	3d 00 02 00 00       	cmp    eax,0x200
c0016838:	74 0a                	je     c0016844 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001683a:	b0 00                	mov    al,0x0
c001683c:	e9 c7 01 00 00       	jmp    c0016a08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016841:	8d 76 00             	lea    esi,[esi+0x0]
c0016844:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001684c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016853:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001685a:	83 f8 ff             	cmp    eax,0xffffffff
c001685d:	74 09                	je     c0016868 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001685f:	b0 01                	mov    al,0x1
c0016861:	e9 a2 01 00 00       	jmp    c0016a08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016866:	66 90                	xchg   ax,ax
c0016868:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016872:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001687a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016881:	88 c2                	mov    dl,al
c0016883:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016888:	01 d0                	add    eax,edx
c001688a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016891:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016897:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001689e:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00168a5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168aa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168b1:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	68 34 02 00 00       	push   0x234
c00168c0:	e8 f4 0e ff ff       	call   c00077b9 <malloc>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00168cf:	83 ec 04             	sub    esp,0x4
c00168d2:	6a 00                	push   0x0
c00168d4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168db:	50                   	push   eax
c00168dc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00168e3:	e8 d3 d1 fe ff       	call   c0003abb <f_mount>
c00168e8:	83 c4 10             	add    esp,0x10
c00168eb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00168f2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00168fa:	74 1c                	je     c0016918 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016906:	e8 ce 0e ff ff       	call   c00077d9 <rfree>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	b0 00                	mov    al,0x0
c0016910:	e9 f3 00 00 00       	jmp    c0016a08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016915:	8d 76 00             	lea    esi,[esi+0x0]
c0016918:	83 ec 04             	sub    esp,0x4
c001691b:	68 00 01 00 00       	push   0x100
c0016920:	6a 00                	push   0x0
c0016922:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016929:	50                   	push   eax
c001692a:	e8 a1 9b fe ff       	call   c00004d0 <memset>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	83 ec 08             	sub    esp,0x8
c0016935:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001693c:	50                   	push   eax
c001693d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016944:	50                   	push   eax
c0016945:	e8 76 9e fe ff       	call   c00007c0 <strcat>
c001694a:	83 c4 10             	add    esp,0x10
c001694d:	83 ec 08             	sub    esp,0x8
c0016950:	68 0a f0 01 c0       	push   0xc001f00a
c0016955:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001695c:	50                   	push   eax
c001695d:	e8 5e 9e fe ff       	call   c00007c0 <strcat>
c0016962:	83 c4 10             	add    esp,0x10
c0016965:	83 ec 04             	sub    esp,0x4
c0016968:	6a 01                	push   0x1
c001696a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016971:	50                   	push   eax
c0016972:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016976:	50                   	push   eax
c0016977:	e8 a1 d1 fe ff       	call   c0003b1d <f_open>
c001697c:	83 c4 10             	add    esp,0x10
c001697f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016986:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001698d:	85 c0                	test   eax,eax
c001698f:	74 0b                	je     c001699c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016991:	78 31                	js     c00169c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016993:	83 e8 04             	sub    eax,0x4
c0016996:	83 f8 01             	cmp    eax,0x1
c0016999:	77 29                	ja     c00169c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001699b:	90                   	nop
c001699c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169a4:	83 ec 0c             	sub    esp,0xc
c00169a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169ab:	50                   	push   eax
c00169ac:	e8 1f d9 fe ff       	call   c00042d0 <f_close>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	90                   	nop
c00169b5:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169bd:	74 41                	je     c0016a00 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169bf:	eb 33                	jmp    c00169f4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169c1:	8d 76 00             	lea    esi,[esi+0x0]
c00169c4:	83 ec 0c             	sub    esp,0xc
c00169c7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169ce:	e8 06 0e ff ff       	call   c00077d9 <rfree>
c00169d3:	83 c4 10             	add    esp,0x10
c00169d6:	83 ec 04             	sub    esp,0x4
c00169d9:	6a 00                	push   0x0
c00169db:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169e2:	50                   	push   eax
c00169e3:	6a 00                	push   0x0
c00169e5:	e8 d1 d0 fe ff       	call   c0003abb <f_mount>
c00169ea:	83 c4 10             	add    esp,0x10
c00169ed:	b0 00                	mov    al,0x0
c00169ef:	eb 17                	jmp    c0016a08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169f1:	8d 76 00             	lea    esi,[esi+0x0]
c00169f4:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00169f9:	40                   	inc    eax
c00169fa:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c00169ff:	90                   	nop
c0016a00:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a07:	90                   	nop
c0016a08:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a0e:	c3                   	ret    
c0016a0f:	90                   	nop

c0016a10 <FAT::allocateSwapfile(char const*, int)>:
c0016a10:	55                   	push   ebp
c0016a11:	57                   	push   edi
c0016a12:	56                   	push   esi
c0016a13:	53                   	push   ebx
c0016a14:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a1a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a25:	83 ec 0c             	sub    esp,0xc
c0016a28:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a2f:	e8 85 0d ff ff       	call   c00077b9 <malloc>
c0016a34:	83 c4 10             	add    esp,0x10
c0016a37:	89 c7                	mov    edi,eax
c0016a39:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016a3e:	83 ec 04             	sub    esp,0x4
c0016a41:	50                   	push   eax
c0016a42:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a49:	57                   	push   edi
c0016a4a:	e8 35 40 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0016a4f:	83 c4 10             	add    esp,0x10
c0016a52:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a59:	83 ec 04             	sub    esp,0x4
c0016a5c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a60:	50                   	push   eax
c0016a61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a65:	50                   	push   eax
c0016a66:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a6d:	e8 7e 43 ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c0016a72:	83 c4 10             	add    esp,0x10
c0016a75:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016a7c:	c1 e0 14             	shl    eax,0x14
c0016a7f:	89 c7                	mov    edi,eax
c0016a81:	89 c5                	mov    ebp,eax
c0016a83:	c1 fd 1f             	sar    ebp,0x1f
c0016a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a8e:	89 f9                	mov    ecx,edi
c0016a90:	31 c1                	xor    ecx,eax
c0016a92:	89 cb                	mov    ebx,ecx
c0016a94:	89 e9                	mov    ecx,ebp
c0016a96:	31 d1                	xor    ecx,edx
c0016a98:	89 ce                	mov    esi,ecx
c0016a9a:	89 f0                	mov    eax,esi
c0016a9c:	09 d8                	or     eax,ebx
c0016a9e:	0f 84 9c 00 00 00    	je     c0016b40 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016aa4:	83 ec 0c             	sub    esp,0xc
c0016aa7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016aae:	e8 09 42 ff ff       	call   c000acbc <File::unlink()>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	83 ec 08             	sub    esp,0x8
c0016ab9:	6a 12                	push   0x12
c0016abb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ac2:	e8 7d 40 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ad1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016ad7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016ade:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016ae5:	c1 e0 14             	shl    eax,0x14
c0016ae8:	83 ec 04             	sub    esp,0x4
c0016aeb:	6a 01                	push   0x1
c0016aed:	50                   	push   eax
c0016aee:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016af5:	e8 3b e6 fe ff       	call   c0005135 <f_expand>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b06:	83 c0 10             	add    eax,0x10
c0016b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b0b:	83 ec 0c             	sub    esp,0xc
c0016b0e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b12:	52                   	push   edx
c0016b13:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b17:	52                   	push   edx
c0016b18:	6a 00                	push   0x0
c0016b1a:	68 00 04 00 00       	push   0x400
c0016b1f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b26:	ff d0                	call   eax
c0016b28:	83 c4 20             	add    esp,0x20
c0016b2b:	83 ec 0c             	sub    esp,0xc
c0016b2e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b35:	e8 68 40 ff ff       	call   c000aba2 <File::close()>
c0016b3a:	83 c4 10             	add    esp,0x10
c0016b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b40:	83 ec 08             	sub    esp,0x8
c0016b43:	6a 01                	push   0x1
c0016b45:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b4c:	e8 f3 3f ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b5d:	83 c0 0c             	add    eax,0xc
c0016b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b62:	83 ec 0c             	sub    esp,0xc
c0016b65:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b69:	52                   	push   edx
c0016b6a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016b6e:	52                   	push   edx
c0016b6f:	6a 00                	push   0x0
c0016b71:	6a 04                	push   0x4
c0016b73:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b7a:	ff d0                	call   eax
c0016b7c:	83 c4 20             	add    esp,0x20
c0016b7f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b86:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b8c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b93:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016b9a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016b9d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016ba4:	83 ec 0c             	sub    esp,0xc
c0016ba7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bae:	e8 ef 3f ff ff       	call   c000aba2 <File::close()>
c0016bb3:	83 c4 10             	add    esp,0x10
c0016bb6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016bbd:	ba 00 00 00 00       	mov    edx,0x0
c0016bc2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016bc8:	5b                   	pop    ebx
c0016bc9:	5e                   	pop    esi
c0016bca:	5f                   	pop    edi
c0016bcb:	5d                   	pop    ebp
c0016bcc:	c3                   	ret    
c0016bcd:	90                   	nop
c0016bce:	66 90                	xchg   ax,ax

c0016bd0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016bd0:	57                   	push   edi
c0016bd1:	56                   	push   esi
c0016bd2:	53                   	push   ebx
c0016bd3:	81 ec 50 02 00 00    	sub    esp,0x250
c0016bd9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016be1:	74 0d                	je     c0016bf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016be3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016beb:	75 0f                	jne    c0016bfc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016bed:	8d 76 00             	lea    esi,[esi+0x0]
c0016bf0:	b8 04 00 00 00       	mov    eax,0x4
c0016bf5:	e9 36 01 00 00       	jmp    c0016d30 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016bfa:	66 90                	xchg   ax,ax
c0016bfc:	83 ec 08             	sub    esp,0x8
c0016bff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c06:	50                   	push   eax
c0016c07:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c0e:	e8 80 d9 fe ff       	call   c0004593 <f_readdir>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c1d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c2e:	83 c0 16             	add    eax,0x16
c0016c31:	50                   	push   eax
c0016c32:	e8 09 99 fe ff       	call   c0000540 <strlen>
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	ba 00 00 00 00       	mov    edx,0x0
c0016c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c43:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c47:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c4e:	25 ff 00 00 00       	and    eax,0xff
c0016c53:	83 e0 10             	and    eax,0x10
c0016c56:	74 08                	je     c0016c60 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c58:	b8 02 00 00 00       	mov    eax,0x2
c0016c5d:	eb 09                	jmp    c0016c68 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c5f:	90                   	nop
c0016c60:	b8 01 00 00 00       	mov    eax,0x1
c0016c65:	8d 76 00             	lea    esi,[esi+0x0]
c0016c68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c6c:	83 ec 08             	sub    esp,0x8
c0016c6f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c76:	83 c0 16             	add    eax,0x16
c0016c79:	50                   	push   eax
c0016c7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016c7e:	83 c0 10             	add    eax,0x10
c0016c81:	50                   	push   eax
c0016c82:	e8 79 99 fe ff       	call   c0000600 <strcpy>
c0016c87:	83 c4 10             	add    esp,0x10
c0016c8a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016c91:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016c98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c9c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016ca3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016caa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016cb1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016cb8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016cbf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016cc6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016ccd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016cd4:	89 c6                	mov    esi,eax
c0016cd6:	89 d7                	mov    edi,edx
c0016cd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cda:	89 c8                	mov    eax,ecx
c0016cdc:	89 fa                	mov    edx,edi
c0016cde:	89 f3                	mov    ebx,esi
c0016ce0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016ce7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016cee:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016cf5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016cfc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d02:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d09:	84 c0                	test   al,al
c0016d0b:	75 07                	jne    c0016d14 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d0d:	b8 07 00 00 00       	mov    eax,0x7
c0016d12:	eb 1c                	jmp    c0016d30 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d14:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d1b:	85 c0                	test   eax,eax
c0016d1d:	75 09                	jne    c0016d28 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d1f:	b8 00 00 00 00       	mov    eax,0x0
c0016d24:	eb 0a                	jmp    c0016d30 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d26:	66 90                	xchg   ax,ax
c0016d28:	b8 01 00 00 00       	mov    eax,0x1
c0016d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d30:	81 c4 50 02 00 00    	add    esp,0x250
c0016d36:	5b                   	pop    ebx
c0016d37:	5e                   	pop    esi
c0016d38:	5f                   	pop    edi
c0016d39:	c3                   	ret    
c0016d3a:	66 90                	xchg   ax,ax

c0016d3c <FAT::read(void*, unsigned long, void*, int*)>:
c0016d3c:	83 ec 1c             	sub    esp,0x1c
c0016d3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d44:	74 0a                	je     c0016d50 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d4b:	75 0b                	jne    c0016d58 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d50:	b8 04 00 00 00       	mov    eax,0x4
c0016d55:	eb 41                	jmp    c0016d98 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d57:	90                   	nop
c0016d58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d5c:	50                   	push   eax
c0016d5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d69:	e8 7a d0 fe ff       	call   c0003de8 <f_read>
c0016d6e:	83 c4 10             	add    esp,0x10
c0016d71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d79:	89 c2                	mov    edx,eax
c0016d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d7f:	89 10                	mov    DWORD PTR [eax],edx
c0016d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d85:	85 c0                	test   eax,eax
c0016d87:	75 07                	jne    c0016d90 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016d89:	b8 00 00 00 00       	mov    eax,0x0
c0016d8e:	eb 08                	jmp    c0016d98 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d90:	b8 01 00 00 00       	mov    eax,0x1
c0016d95:	8d 76 00             	lea    esi,[esi+0x0]
c0016d98:	83 c4 1c             	add    esp,0x1c
c0016d9b:	c3                   	ret    

c0016d9c <FAT::write(void*, unsigned long, void*, int*)>:
c0016d9c:	83 ec 1c             	sub    esp,0x1c
c0016d9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016da4:	74 0a                	je     c0016db0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016da6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dab:	75 0b                	jne    c0016db8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016dad:	8d 76 00             	lea    esi,[esi+0x0]
c0016db0:	b8 04 00 00 00       	mov    eax,0x4
c0016db5:	eb 41                	jmp    c0016df8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016db7:	90                   	nop
c0016db8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dbc:	50                   	push   eax
c0016dbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016dc5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016dc9:	e8 19 d2 fe ff       	call   c0003fe7 <f_write>
c0016dce:	83 c4 10             	add    esp,0x10
c0016dd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dd9:	89 c2                	mov    edx,eax
c0016ddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ddf:	89 10                	mov    DWORD PTR [eax],edx
c0016de1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016de5:	85 c0                	test   eax,eax
c0016de7:	75 07                	jne    c0016df0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016de9:	b8 00 00 00 00       	mov    eax,0x0
c0016dee:	eb 08                	jmp    c0016df8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016df0:	b8 01 00 00 00       	mov    eax,0x1
c0016df5:	8d 76 00             	lea    esi,[esi+0x0]
c0016df8:	83 c4 1c             	add    esp,0x1c
c0016dfb:	c3                   	ret    

c0016dfc <FAT::close(void*)>:
c0016dfc:	83 ec 1c             	sub    esp,0x1c
c0016dff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e04:	75 0a                	jne    c0016e10 <FAT::close(void*)+0x14>
c0016e06:	b8 04 00 00 00       	mov    eax,0x4
c0016e0b:	eb 3f                	jmp    c0016e4c <FAT::close(void*)+0x50>
c0016e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e17:	e8 b4 d4 fe ff       	call   c00042d0 <f_close>
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e23:	83 ec 0c             	sub    esp,0xc
c0016e26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e2a:	e8 9a 09 ff ff       	call   c00077c9 <free>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e36:	85 c0                	test   eax,eax
c0016e38:	75 0a                	jne    c0016e44 <FAT::close(void*)+0x48>
c0016e3a:	b8 00 00 00 00       	mov    eax,0x0
c0016e3f:	eb 0b                	jmp    c0016e4c <FAT::close(void*)+0x50>
c0016e41:	8d 76 00             	lea    esi,[esi+0x0]
c0016e44:	b8 01 00 00 00       	mov    eax,0x1
c0016e49:	8d 76 00             	lea    esi,[esi+0x0]
c0016e4c:	83 c4 1c             	add    esp,0x1c
c0016e4f:	c3                   	ret    

c0016e50 <FAT::closeDir(void*)>:
c0016e50:	83 ec 1c             	sub    esp,0x1c
c0016e53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e58:	75 0a                	jne    c0016e64 <FAT::closeDir(void*)+0x14>
c0016e5a:	b8 04 00 00 00       	mov    eax,0x4
c0016e5f:	eb 3f                	jmp    c0016ea0 <FAT::closeDir(void*)+0x50>
c0016e61:	8d 76 00             	lea    esi,[esi+0x0]
c0016e64:	83 ec 0c             	sub    esp,0xc
c0016e67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e6b:	e8 01 d7 fe ff       	call   c0004571 <f_closedir>
c0016e70:	83 c4 10             	add    esp,0x10
c0016e73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e77:	83 ec 0c             	sub    esp,0xc
c0016e7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e7e:	e8 46 09 ff ff       	call   c00077c9 <free>
c0016e83:	83 c4 10             	add    esp,0x10
c0016e86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e8a:	85 c0                	test   eax,eax
c0016e8c:	75 0a                	jne    c0016e98 <FAT::closeDir(void*)+0x48>
c0016e8e:	b8 00 00 00 00       	mov    eax,0x0
c0016e93:	eb 0b                	jmp    c0016ea0 <FAT::closeDir(void*)+0x50>
c0016e95:	8d 76 00             	lea    esi,[esi+0x0]
c0016e98:	b8 01 00 00 00       	mov    eax,0x1
c0016e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea0:	83 c4 1c             	add    esp,0x1c
c0016ea3:	c3                   	ret    

c0016ea4 <FAT::seek(void*, unsigned long long)>:
c0016ea4:	83 ec 2c             	sub    esp,0x2c
c0016ea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016eab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016eaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016eb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eb7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ebc:	75 0a                	jne    c0016ec8 <FAT::seek(void*, unsigned long long)+0x24>
c0016ebe:	b8 04 00 00 00       	mov    eax,0x4
c0016ec3:	eb 33                	jmp    c0016ef8 <FAT::seek(void*, unsigned long long)+0x54>
c0016ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ecc:	83 ec 08             	sub    esp,0x8
c0016ecf:	50                   	push   eax
c0016ed0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ed4:	e8 26 d4 fe ff       	call   c00042ff <f_lseek>
c0016ed9:	83 c4 10             	add    esp,0x10
c0016edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ee0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ee4:	85 c0                	test   eax,eax
c0016ee6:	75 08                	jne    c0016ef0 <FAT::seek(void*, unsigned long long)+0x4c>
c0016ee8:	b8 00 00 00 00       	mov    eax,0x0
c0016eed:	eb 09                	jmp    c0016ef8 <FAT::seek(void*, unsigned long long)+0x54>
c0016eef:	90                   	nop
c0016ef0:	b8 01 00 00 00       	mov    eax,0x1
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	83 c4 2c             	add    esp,0x2c
c0016efb:	c3                   	ret    

c0016efc <fatWrapperReadDisk>:
c0016efc:	53                   	push   ebx
c0016efd:	83 ec 18             	sub    esp,0x18
c0016f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f08:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f0c:	25 ff 00 00 00       	and    eax,0xff
c0016f11:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f18:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f20:	ba 00 00 00 00       	mov    edx,0x0
c0016f25:	83 ec 0c             	sub    esp,0xc
c0016f28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f2c:	53                   	push   ebx
c0016f2d:	52                   	push   edx
c0016f2e:	50                   	push   eax
c0016f2f:	51                   	push   ecx
c0016f30:	e8 ff 5c ff ff       	call   c000cc34 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f35:	83 c4 20             	add    esp,0x20
c0016f38:	83 c4 18             	add    esp,0x18
c0016f3b:	5b                   	pop    ebx
c0016f3c:	c3                   	ret    
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f40 <fatWrapperWriteDisk>:
c0016f40:	53                   	push   ebx
c0016f41:	83 ec 18             	sub    esp,0x18
c0016f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f4c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f50:	25 ff 00 00 00       	and    eax,0xff
c0016f55:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f64:	ba 00 00 00 00       	mov    edx,0x0
c0016f69:	83 ec 0c             	sub    esp,0xc
c0016f6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f70:	53                   	push   ebx
c0016f71:	52                   	push   edx
c0016f72:	50                   	push   eax
c0016f73:	51                   	push   ecx
c0016f74:	e8 27 5d ff ff       	call   c000cca0 <LogicalDisk::write(unsigned long long, int, void*)>
c0016f79:	83 c4 20             	add    esp,0x20
c0016f7c:	83 c4 18             	add    esp,0x18
c0016f7f:	5b                   	pop    ebx
c0016f80:	c3                   	ret    
c0016f81:	8d 76 00             	lea    esi,[esi+0x0]

c0016f84 <fatWrapperIoctl>:
c0016f84:	53                   	push   ebx
c0016f85:	83 ec 28             	sub    esp,0x28
c0016f88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f90:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016f94:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f98:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016f9d:	75 35                	jne    c0016fd4 <fatWrapperIoctl+0x50>
c0016f9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fa3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fa7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fab:	25 ff 00 00 00       	and    eax,0xff
c0016fb0:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016fbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fc7:	66 89 02             	mov    WORD PTR [edx],ax
c0016fca:	b8 00 00 00 00       	mov    eax,0x0
c0016fcf:	e9 c4 00 00 00       	jmp    c0017098 <fatWrapperIoctl+0x114>
c0016fd4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016fd9:	75 75                	jne    c0017050 <fatWrapperIoctl+0xcc>
c0016fdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fe3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fe7:	25 ff 00 00 00       	and    eax,0xff
c0016fec:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0016ff3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016ff9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016fff:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017005:	89 c8                	mov    eax,ecx
c0017007:	89 da                	mov    edx,ebx
c0017009:	0f a4 c2 0a          	shld   edx,eax,0xa
c001700d:	c1 e0 0a             	shl    eax,0xa
c0017010:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017014:	81 e1 ff 00 00 00    	and    ecx,0xff
c001701a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017021:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017027:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001702d:	89 cb                	mov    ebx,ecx
c001702f:	c1 fb 1f             	sar    ebx,0x1f
c0017032:	53                   	push   ebx
c0017033:	51                   	push   ecx
c0017034:	52                   	push   edx
c0017035:	50                   	push   eax
c0017036:	e8 a5 50 00 00       	call   c001c0e0 <__udivdi3>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	89 c2                	mov    edx,eax
c0017040:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017044:	89 10                	mov    DWORD PTR [eax],edx
c0017046:	b8 00 00 00 00       	mov    eax,0x0
c001704b:	eb 4b                	jmp    c0017098 <fatWrapperIoctl+0x114>
c001704d:	8d 76 00             	lea    esi,[esi+0x0]
c0017050:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017055:	75 09                	jne    c0017060 <fatWrapperIoctl+0xdc>
c0017057:	b8 00 00 00 00       	mov    eax,0x0
c001705c:	eb 3a                	jmp    c0017098 <fatWrapperIoctl+0x114>
c001705e:	66 90                	xchg   ax,ax
c0017060:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017065:	75 19                	jne    c0017080 <fatWrapperIoctl+0xfc>
c0017067:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001706b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001706f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017073:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017079:	b8 00 00 00 00       	mov    eax,0x0
c001707e:	eb 18                	jmp    c0017098 <fatWrapperIoctl+0x114>
c0017080:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017085:	75 09                	jne    c0017090 <fatWrapperIoctl+0x10c>
c0017087:	b8 00 00 00 00       	mov    eax,0x0
c001708c:	eb 0a                	jmp    c0017098 <fatWrapperIoctl+0x114>
c001708e:	66 90                	xchg   ax,ax
c0017090:	b8 04 00 00 00       	mov    eax,0x4
c0017095:	8d 76 00             	lea    esi,[esi+0x0]
c0017098:	83 c4 28             	add    esp,0x28
c001709b:	5b                   	pop    ebx
c001709c:	c3                   	ret    
c001709d:	90                   	nop
c001709e:	66 90                	xchg   ax,ax

c00170a0 <FAT::FAT()>:
c00170a0:	83 ec 1c             	sub    esp,0x1c
c00170a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a7:	83 ec 0c             	sub    esp,0xc
c00170aa:	50                   	push   eax
c00170ab:	e8 80 37 ff ff       	call   c000a830 <Filesystem::Filesystem()>
c00170b0:	83 c4 10             	add    esp,0x10
c00170b3:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c00170b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bc:	89 10                	mov    DWORD PTR [eax],edx
c00170be:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00170c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170d0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00170d5:	7f 15                	jg     c00170ec <FAT::FAT()+0x4c>
c00170d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170db:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c00170e6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00170ea:	eb e4                	jmp    c00170d0 <FAT::FAT()+0x30>
c00170ec:	90                   	nop
c00170ed:	83 c4 1c             	add    esp,0x1c
c00170f0:	c3                   	ret    
c00170f1:	90                   	nop
c00170f2:	66 90                	xchg   ax,ax

c00170f4 <FAT::fixFilepath(char*)>:
c00170f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170f8:	8a 00                	mov    al,BYTE PTR [eax]
c00170fa:	3c 40                	cmp    al,0x40
c00170fc:	7e 2e                	jle    c001712c <FAT::fixFilepath(char*)+0x38>
c00170fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017102:	8a 00                	mov    al,BYTE PTR [eax]
c0017104:	83 e8 41             	sub    eax,0x41
c0017107:	88 c2                	mov    dl,al
c0017109:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001710d:	88 10                	mov    BYTE PTR [eax],dl
c001710f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017113:	8a 00                	mov    al,BYTE PTR [eax]
c0017115:	0f be c0             	movsx  eax,al
c0017118:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001711f:	83 c0 30             	add    eax,0x30
c0017122:	88 c2                	mov    dl,al
c0017124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017128:	88 10                	mov    BYTE PTR [eax],dl
c001712a:	66 90                	xchg   ax,ax
c001712c:	90                   	nop
c001712d:	c3                   	ret    
c001712e:	66 90                	xchg   ax,ax

c0017130 <FAT::open(char const*, void**, FileOpenMode)>:
c0017130:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017136:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001713e:	74 0c                	je     c001714c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017140:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017148:	75 0e                	jne    c0017158 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001714a:	66 90                	xchg   ax,ax
c001714c:	b8 04 00 00 00       	mov    eax,0x4
c0017151:	e9 0a 01 00 00       	jmp    c0017260 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017156:	66 90                	xchg   ax,ax
c0017158:	83 ec 08             	sub    esp,0x8
c001715b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017162:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017166:	50                   	push   eax
c0017167:	e8 94 94 fe ff       	call   c0000600 <strcpy>
c001716c:	83 c4 10             	add    esp,0x10
c001716f:	83 ec 08             	sub    esp,0x8
c0017172:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017176:	50                   	push   eax
c0017177:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001717e:	e8 71 ff ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c0017183:	83 c4 10             	add    esp,0x10
c0017186:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001718e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017195:	83 e0 01             	and    eax,0x1
c0017198:	74 0a                	je     c00171a4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001719a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171a2:	66 90                	xchg   ax,ax
c00171a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171ab:	83 e0 04             	and    eax,0x4
c00171ae:	74 10                	je     c00171c0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171b0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171b8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171c7:	83 e0 02             	and    eax,0x2
c00171ca:	74 08                	je     c00171d4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00171cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171db:	83 e0 08             	and    eax,0x8
c00171de:	74 08                	je     c00171e8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00171e0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00171e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171ef:	83 e0 10             	and    eax,0x10
c00171f2:	74 08                	je     c00171fc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00171f4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	68 28 02 00 00       	push   0x228
c0017204:	e8 b0 05 ff ff       	call   c00077b9 <malloc>
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	89 c2                	mov    edx,eax
c001720e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017215:	89 10                	mov    DWORD PTR [eax],edx
c0017217:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001721e:	31 d2                	xor    edx,edx
c0017220:	88 c2                	mov    dl,al
c0017222:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017229:	8b 00                	mov    eax,DWORD PTR [eax]
c001722b:	83 ec 04             	sub    esp,0x4
c001722e:	52                   	push   edx
c001722f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017233:	52                   	push   edx
c0017234:	50                   	push   eax
c0017235:	e8 e3 c8 fe ff       	call   c0003b1d <f_open>
c001723a:	83 c4 10             	add    esp,0x10
c001723d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017244:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001724c:	74 0a                	je     c0017258 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001724e:	b8 01 00 00 00       	mov    eax,0x1
c0017253:	eb 0b                	jmp    c0017260 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017255:	8d 76 00             	lea    esi,[esi+0x0]
c0017258:	b8 00 00 00 00       	mov    eax,0x0
c001725d:	8d 76 00             	lea    esi,[esi+0x0]
c0017260:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017266:	c3                   	ret    
c0017267:	90                   	nop

c0017268 <FAT::openDir(char const*, void**)>:
c0017268:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001726e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017276:	74 0c                	je     c0017284 <FAT::openDir(char const*, void**)+0x1c>
c0017278:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017280:	75 0e                	jne    c0017290 <FAT::openDir(char const*, void**)+0x28>
c0017282:	66 90                	xchg   ax,ax
c0017284:	b8 04 00 00 00       	mov    eax,0x4
c0017289:	e9 82 00 00 00       	jmp    c0017310 <FAT::openDir(char const*, void**)+0xa8>
c001728e:	66 90                	xchg   ax,ax
c0017290:	83 ec 08             	sub    esp,0x8
c0017293:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001729a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001729e:	50                   	push   eax
c001729f:	e8 5c 93 fe ff       	call   c0000600 <strcpy>
c00172a4:	83 c4 10             	add    esp,0x10
c00172a7:	83 ec 08             	sub    esp,0x8
c00172aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172ae:	50                   	push   eax
c00172af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172b6:	e8 39 fe ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c00172bb:	83 c4 10             	add    esp,0x10
c00172be:	83 ec 0c             	sub    esp,0xc
c00172c1:	6a 30                	push   0x30
c00172c3:	e8 f1 04 ff ff       	call   c00077b9 <malloc>
c00172c8:	83 c4 10             	add    esp,0x10
c00172cb:	89 c2                	mov    edx,eax
c00172cd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172d4:	89 10                	mov    DWORD PTR [eax],edx
c00172d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00172df:	83 ec 08             	sub    esp,0x8
c00172e2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00172e6:	52                   	push   edx
c00172e7:	50                   	push   eax
c00172e8:	e8 b9 d1 fe ff       	call   c00044a6 <f_opendir>
c00172ed:	83 c4 10             	add    esp,0x10
c00172f0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00172f7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00172ff:	74 07                	je     c0017308 <FAT::openDir(char const*, void**)+0xa0>
c0017301:	b8 01 00 00 00       	mov    eax,0x1
c0017306:	eb 08                	jmp    c0017310 <FAT::openDir(char const*, void**)+0xa8>
c0017308:	b8 00 00 00 00       	mov    eax,0x0
c001730d:	8d 76 00             	lea    esi,[esi+0x0]
c0017310:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017316:	c3                   	ret    
c0017317:	90                   	nop

c0017318 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017318:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001731e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017326:	75 0c                	jne    c0017334 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017328:	b8 04 00 00 00       	mov    eax,0x4
c001732d:	e9 d6 00 00 00       	jmp    c0017408 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017332:	66 90                	xchg   ax,ax
c0017334:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001733c:	75 0a                	jne    c0017348 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001733e:	b8 04 00 00 00       	mov    eax,0x4
c0017343:	e9 c0 00 00 00       	jmp    c0017408 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017348:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017350:	75 0a                	jne    c001735c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017352:	b8 04 00 00 00       	mov    eax,0x4
c0017357:	e9 ac 00 00 00       	jmp    c0017408 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001735c:	83 ec 08             	sub    esp,0x8
c001735f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017366:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001736d:	50                   	push   eax
c001736e:	e8 8d 92 fe ff       	call   c0000600 <strcpy>
c0017373:	83 c4 10             	add    esp,0x10
c0017376:	83 ec 08             	sub    esp,0x8
c0017379:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017380:	50                   	push   eax
c0017381:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017388:	e8 67 fd ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	83 ec 08             	sub    esp,0x8
c0017393:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017397:	50                   	push   eax
c0017398:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001739f:	50                   	push   eax
c00173a0:	e8 80 d2 fe ff       	call   c0004625 <f_stat>
c00173a5:	83 c4 10             	add    esp,0x10
c00173a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173b6:	85 c0                	test   eax,eax
c00173b8:	74 0a                	je     c00173c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173ba:	83 f8 04             	cmp    eax,0x4
c00173bd:	74 39                	je     c00173f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173bf:	eb 3f                	jmp    c0017400 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00173c1:	8d 76 00             	lea    esi,[esi+0x0]
c00173c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00173c8:	25 ff 00 00 00       	and    eax,0xff
c00173cd:	83 e0 10             	and    eax,0x10
c00173d0:	0f 95 c2             	setne  dl
c00173d3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00173da:	88 10                	mov    BYTE PTR [eax],dl
c00173dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173e0:	ba 00 00 00 00       	mov    edx,0x0
c00173e5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00173ec:	89 01                	mov    DWORD PTR [ecx],eax
c00173ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00173f1:	b8 00 00 00 00       	mov    eax,0x0
c00173f6:	eb 10                	jmp    c0017408 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173f8:	b8 02 00 00 00       	mov    eax,0x2
c00173fd:	eb 09                	jmp    c0017408 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173ff:	90                   	nop
c0017400:	b8 01 00 00 00       	mov    eax,0x1
c0017405:	8d 76 00             	lea    esi,[esi+0x0]
c0017408:	81 c4 2c 02 00 00    	add    esp,0x22c
c001740e:	c3                   	ret    
c001740f:	90                   	nop

c0017410 <FAT::unlink(char const*)>:
c0017410:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017416:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001741e:	75 08                	jne    c0017428 <FAT::unlink(char const*)+0x18>
c0017420:	b8 04 00 00 00       	mov    eax,0x4
c0017425:	eb 61                	jmp    c0017488 <FAT::unlink(char const*)+0x78>
c0017427:	90                   	nop
c0017428:	83 ec 08             	sub    esp,0x8
c001742b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017432:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017436:	50                   	push   eax
c0017437:	e8 c4 91 fe ff       	call   c0000600 <strcpy>
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017446:	50                   	push   eax
c0017447:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001744e:	e8 a1 fc ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	83 ec 0c             	sub    esp,0xc
c0017459:	8d 44 24 18          	lea    eax,[esp+0x18]
c001745d:	50                   	push   eax
c001745e:	e8 27 d4 fe ff       	call   c000488a <f_unlink>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001746d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017474:	85 c0                	test   eax,eax
c0017476:	75 08                	jne    c0017480 <FAT::unlink(char const*)+0x70>
c0017478:	b8 00 00 00 00       	mov    eax,0x0
c001747d:	eb 09                	jmp    c0017488 <FAT::unlink(char const*)+0x78>
c001747f:	90                   	nop
c0017480:	b8 01 00 00 00       	mov    eax,0x1
c0017485:	8d 76 00             	lea    esi,[esi+0x0]
c0017488:	81 c4 1c 01 00 00    	add    esp,0x11c
c001748e:	c3                   	ret    
c001748f:	90                   	nop

c0017490 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017490:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017496:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001749d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174a4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174ac:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174b4:	75 0a                	jne    c00174c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174b6:	b8 04 00 00 00       	mov    eax,0x4
c00174bb:	e9 54 01 00 00       	jmp    c0017614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00174c0:	83 ec 08             	sub    esp,0x8
c00174c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174ca:	8d 44 24 24          	lea    eax,[esp+0x24]
c00174ce:	50                   	push   eax
c00174cf:	e8 2c 91 fe ff       	call   c0000600 <strcpy>
c00174d4:	83 c4 10             	add    esp,0x10
c00174d7:	83 ec 08             	sub    esp,0x8
c00174da:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174de:	50                   	push   eax
c00174df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174e6:	e8 09 fc ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c00174eb:	83 c4 10             	add    esp,0x10
c00174ee:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00174f6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00174fe:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017502:	25 ff 00 00 00       	and    eax,0xff
c0017507:	83 e0 01             	and    eax,0x1
c001750a:	74 08                	je     c0017514 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001750c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017514:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017518:	25 ff 00 00 00       	and    eax,0xff
c001751d:	83 e0 02             	and    eax,0x2
c0017520:	74 0a                	je     c001752c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017522:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001752a:	66 90                	xchg   ax,ax
c001752c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017530:	25 ff 00 00 00       	and    eax,0xff
c0017535:	83 e0 04             	and    eax,0x4
c0017538:	74 0a                	je     c0017544 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001753a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017542:	66 90                	xchg   ax,ax
c0017544:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017548:	25 ff 00 00 00       	and    eax,0xff
c001754d:	83 e0 08             	and    eax,0x8
c0017550:	74 0a                	je     c001755c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017552:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001755a:	66 90                	xchg   ax,ax
c001755c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017560:	25 ff 00 00 00       	and    eax,0xff
c0017565:	83 e0 01             	and    eax,0x1
c0017568:	74 0a                	je     c0017574 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001756a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017572:	66 90                	xchg   ax,ax
c0017574:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017578:	25 ff 00 00 00       	and    eax,0xff
c001757d:	83 e0 02             	and    eax,0x2
c0017580:	74 0a                	je     c001758c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017582:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001758a:	66 90                	xchg   ax,ax
c001758c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017590:	25 ff 00 00 00       	and    eax,0xff
c0017595:	83 e0 04             	and    eax,0x4
c0017598:	74 0a                	je     c00175a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001759a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175a2:	66 90                	xchg   ax,ax
c00175a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175a8:	25 ff 00 00 00       	and    eax,0xff
c00175ad:	83 e0 08             	and    eax,0x8
c00175b0:	74 0a                	je     c00175bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175b2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175ba:	66 90                	xchg   ax,ax
c00175bc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175c3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00175ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00175d1:	31 d2                	xor    edx,edx
c00175d3:	88 c2                	mov    dl,al
c00175d5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175dc:	25 ff 00 00 00       	and    eax,0xff
c00175e1:	83 ec 04             	sub    esp,0x4
c00175e4:	52                   	push   edx
c00175e5:	50                   	push   eax
c00175e6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00175ea:	50                   	push   eax
c00175eb:	e8 0d d7 fe ff       	call   c0004cfd <f_chmod>
c00175f0:	83 c4 10             	add    esp,0x10
c00175f3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00175fa:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017601:	85 c0                	test   eax,eax
c0017603:	75 07                	jne    c001760c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017605:	b8 00 00 00 00       	mov    eax,0x0
c001760a:	eb 08                	jmp    c0017614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001760c:	b8 01 00 00 00       	mov    eax,0x1
c0017611:	8d 76 00             	lea    esi,[esi+0x0]
c0017614:	81 c4 2c 01 00 00    	add    esp,0x12c
c001761a:	c3                   	ret    
c001761b:	90                   	nop

c001761c <FAT::rename(char const*, char const*)>:
c001761c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017622:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001762a:	74 0c                	je     c0017638 <FAT::rename(char const*, char const*)+0x1c>
c001762c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017634:	75 0e                	jne    c0017644 <FAT::rename(char const*, char const*)+0x28>
c0017636:	66 90                	xchg   ax,ax
c0017638:	b8 04 00 00 00       	mov    eax,0x4
c001763d:	e9 9e 00 00 00       	jmp    c00176e0 <FAT::rename(char const*, char const*)+0xc4>
c0017642:	66 90                	xchg   ax,ax
c0017644:	83 ec 08             	sub    esp,0x8
c0017647:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001764e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017655:	50                   	push   eax
c0017656:	e8 a5 8f fe ff       	call   c0000600 <strcpy>
c001765b:	83 c4 10             	add    esp,0x10
c001765e:	83 ec 08             	sub    esp,0x8
c0017661:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017668:	50                   	push   eax
c0017669:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017670:	e8 7f fa ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	83 ec 08             	sub    esp,0x8
c001767b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017682:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017686:	50                   	push   eax
c0017687:	e8 74 8f fe ff       	call   c0000600 <strcpy>
c001768c:	83 c4 10             	add    esp,0x10
c001768f:	83 ec 08             	sub    esp,0x8
c0017692:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017696:	50                   	push   eax
c0017697:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001769e:	e8 51 fa ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	83 ec 08             	sub    esp,0x8
c00176a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176ad:	50                   	push   eax
c00176ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176b5:	50                   	push   eax
c00176b6:	e8 8c d4 fe ff       	call   c0004b47 <f_rename>
c00176bb:	83 c4 10             	add    esp,0x10
c00176be:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00176c5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00176cc:	85 c0                	test   eax,eax
c00176ce:	75 08                	jne    c00176d8 <FAT::rename(char const*, char const*)+0xbc>
c00176d0:	b8 00 00 00 00       	mov    eax,0x0
c00176d5:	eb 09                	jmp    c00176e0 <FAT::rename(char const*, char const*)+0xc4>
c00176d7:	90                   	nop
c00176d8:	b8 01 00 00 00       	mov    eax,0x1
c00176dd:	8d 76 00             	lea    esi,[esi+0x0]
c00176e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00176e6:	c3                   	ret    
c00176e7:	90                   	nop

c00176e8 <FAT::mkdir(char const*)>:
c00176e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00176ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00176f6:	75 08                	jne    c0017700 <FAT::mkdir(char const*)+0x18>
c00176f8:	b8 04 00 00 00       	mov    eax,0x4
c00176fd:	eb 61                	jmp    c0017760 <FAT::mkdir(char const*)+0x78>
c00176ff:	90                   	nop
c0017700:	83 ec 08             	sub    esp,0x8
c0017703:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001770a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001770e:	50                   	push   eax
c001770f:	e8 ec 8e fe ff       	call   c0000600 <strcpy>
c0017714:	83 c4 10             	add    esp,0x10
c0017717:	83 ec 08             	sub    esp,0x8
c001771a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001771e:	50                   	push   eax
c001771f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017726:	e8 c9 f9 ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	83 ec 0c             	sub    esp,0xc
c0017731:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017735:	50                   	push   eax
c0017736:	e8 71 d2 fe ff       	call   c00049ac <f_mkdir>
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017745:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001774c:	85 c0                	test   eax,eax
c001774e:	75 08                	jne    c0017758 <FAT::mkdir(char const*)+0x70>
c0017750:	b8 00 00 00 00       	mov    eax,0x0
c0017755:	eb 09                	jmp    c0017760 <FAT::mkdir(char const*)+0x78>
c0017757:	90                   	nop
c0017758:	b8 01 00 00 00       	mov    eax,0x1
c001775d:	8d 76 00             	lea    esi,[esi+0x0]
c0017760:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017766:	c3                   	ret    
c0017767:	90                   	nop

c0017768 <FAT::exists(char const*)>:
c0017768:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001776e:	83 ec 08             	sub    esp,0x8
c0017771:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017778:	8d 44 24 10          	lea    eax,[esp+0x10]
c001777c:	50                   	push   eax
c001777d:	e8 7e 8e fe ff       	call   c0000600 <strcpy>
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	83 ec 08             	sub    esp,0x8
c0017788:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001778c:	50                   	push   eax
c001778d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017794:	e8 5b f9 ff ff       	call   c00170f4 <FAT::fixFilepath(char*)>
c0017799:	83 c4 10             	add    esp,0x10
c001779c:	83 ec 08             	sub    esp,0x8
c001779f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177a6:	50                   	push   eax
c00177a7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177ab:	50                   	push   eax
c00177ac:	e8 74 ce fe ff       	call   c0004625 <f_stat>
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00177c2:	85 c0                	test   eax,eax
c00177c4:	75 06                	jne    c00177cc <FAT::exists(char const*)+0x64>
c00177c6:	b0 01                	mov    al,0x1
c00177c8:	eb 06                	jmp    c00177d0 <FAT::exists(char const*)+0x68>
c00177ca:	66 90                	xchg   ax,ax
c00177cc:	b0 00                	mov    al,0x0
c00177ce:	66 90                	xchg   ax,ax
c00177d0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00177d6:	c3                   	ret    
c00177d7:	90                   	nop

c00177d8 <isoReadDiscSectorHelper>:
c00177d8:	83 ec 2c             	sub    esp,0x2c
c00177db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00177e3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00177e8:	83 e8 41             	sub    eax,0x41
c00177eb:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00177f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177f6:	ba 00 00 00 00       	mov    edx,0x0
c00177fb:	83 ec 0c             	sub    esp,0xc
c00177fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017802:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017806:	52                   	push   edx
c0017807:	50                   	push   eax
c0017808:	51                   	push   ecx
c0017809:	e8 26 54 ff ff       	call   c000cc34 <LogicalDisk::read(unsigned long long, int, void*)>
c001780e:	83 c4 20             	add    esp,0x20
c0017811:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017815:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001781a:	74 0c                	je     c0017828 <isoReadDiscSectorHelper+0x50>
c001781c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017820:	c1 e0 0b             	shl    eax,0xb
c0017823:	eb 0b                	jmp    c0017830 <isoReadDiscSectorHelper+0x58>
c0017825:	8d 76 00             	lea    esi,[esi+0x0]
c0017828:	b8 00 00 00 00       	mov    eax,0x0
c001782d:	8d 76 00             	lea    esi,[esi+0x0]
c0017830:	83 c4 2c             	add    esp,0x2c
c0017833:	c3                   	ret    

c0017834 <iso_kprintf>:
c0017834:	83 ec 0c             	sub    esp,0xc
c0017837:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001783c:	83 ec 08             	sub    esp,0x8
c001783f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017843:	50                   	push   eax
c0017844:	e8 ed 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017849:	83 c4 10             	add    esp,0x10
c001784c:	90                   	nop
c001784d:	83 c4 0c             	add    esp,0xc
c0017850:	c3                   	ret    
c0017851:	8d 76 00             	lea    esi,[esi+0x0]

c0017854 <iso_kprintfd>:
c0017854:	83 ec 0c             	sub    esp,0xc
c0017857:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001785c:	83 ec 08             	sub    esp,0x8
c001785f:	68 80 f0 01 c0       	push   0xc001f080
c0017864:	50                   	push   eax
c0017865:	e8 cc 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001786a:	83 c4 10             	add    esp,0x10
c001786d:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017872:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017876:	83 ec 08             	sub    esp,0x8
c0017879:	52                   	push   edx
c001787a:	50                   	push   eax
c001787b:	e8 70 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017880:	83 c4 10             	add    esp,0x10
c0017883:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017888:	83 ec 08             	sub    esp,0x8
c001788b:	68 01 ef 01 c0       	push   0xc001ef01
c0017890:	50                   	push   eax
c0017891:	e8 a0 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017896:	83 c4 10             	add    esp,0x10
c0017899:	90                   	nop
c001789a:	83 c4 0c             	add    esp,0xc
c001789d:	c3                   	ret    

c001789e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001789e:	b8 08 00 00 00       	mov    eax,0x8
c00178a3:	c3                   	ret    

c00178a4 <ISO9660::getName()>:
c00178a4:	b8 83 f0 01 c0       	mov    eax,0xc001f083
c00178a9:	c3                   	ret    

c00178aa <ISO9660::closeDir(void*)>:
c00178aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00178b0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178b3:	90                   	nop

c00178b4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178b4:	b8 01 00 00 00       	mov    eax,0x1
c00178b9:	c3                   	ret    

c00178ba <ISO9660::unlink(char const*)>:
c00178ba:	b8 01 00 00 00       	mov    eax,0x1
c00178bf:	c3                   	ret    

c00178c0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00178c0:	b8 03 00 00 00       	mov    eax,0x3
c00178c5:	c3                   	ret    

c00178c6 <ISO9660::rename(char const*, char const*)>:
c00178c6:	b8 01 00 00 00       	mov    eax,0x1
c00178cb:	c3                   	ret    

c00178cc <ISO9660::mkdir(char const*)>:
c00178cc:	b8 01 00 00 00       	mov    eax,0x1
c00178d1:	c3                   	ret    

c00178d2 <ISO9660::~ISO9660()>:
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	ba d4 f0 01 c0       	mov    edx,0xc001f0d4
c00178da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178de:	89 10                	mov    DWORD PTR [eax],edx
c00178e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	50                   	push   eax
c00178e8:	e8 67 2f ff ff       	call   c000a854 <Filesystem::~Filesystem()>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	90                   	nop
c00178f1:	83 c4 0c             	add    esp,0xc
c00178f4:	c3                   	ret    
c00178f5:	90                   	nop

c00178f6 <ISO9660::~ISO9660()>:
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	83 ec 0c             	sub    esp,0xc
c00178fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017900:	e8 cd ff ff ff       	call   c00178d2 <ISO9660::~ISO9660()>
c0017905:	83 c4 10             	add    esp,0x10
c0017908:	83 ec 08             	sub    esp,0x8
c001790b:	6a 08                	push   0x8
c001790d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017911:	e8 03 2b ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c0017916:	83 c4 10             	add    esp,0x10
c0017919:	83 c4 0c             	add    esp,0xc
c001791c:	c3                   	ret    
c001791d:	90                   	nop

c001791e <ISO9660::exists(char const*)>:
c001791e:	83 ec 18             	sub    esp,0x18
c0017921:	68 9e f0 01 c0       	push   0xc001f09e
c0017926:	e8 64 88 ff ff       	call   c001018f <KePanic(char const*)>
c001792b:	31 c0                	xor    eax,eax
c001792d:	83 c4 1c             	add    esp,0x1c
c0017930:	c3                   	ret    
c0017931:	90                   	nop

c0017932 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017932:	56                   	push   esi
c0017933:	53                   	push   ebx
c0017934:	50                   	push   eax
c0017935:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017939:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001793d:	85 db                	test   ebx,ebx
c001793f:	0f 84 82 00 00 00    	je     c00179c7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017945:	85 f6                	test   esi,esi
c0017947:	74 7e                	je     c00179c7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017949:	ba 03 00 00 00       	mov    edx,0x3
c001794e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017953:	75 77                	jne    c00179cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017955:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017958:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c001795e:	74 34                	je     c0017994 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017960:	83 ec 0c             	sub    esp,0xc
c0017963:	50                   	push   eax
c0017964:	e8 56 ee fe ff       	call   c00067bf <init_percd>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	ba 0b 00 00 00       	mov    edx,0xb
c0017971:	40                   	inc    eax
c0017972:	74 58                	je     c00179cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017974:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c001797b:	74 10                	je     c001798d <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c001797d:	83 ec 0c             	sub    esp,0xc
c0017980:	68 bc f0 01 c0       	push   0xc001f0bc
c0017985:	e8 05 88 ff ff       	call   c001018f <KePanic(char const*)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	8a 03                	mov    al,BYTE PTR [ebx]
c001798f:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017994:	83 ec 0c             	sub    esp,0xc
c0017997:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c001799e:	83 c3 03             	add    ebx,0x3
c00179a1:	50                   	push   eax
c00179a2:	e8 18 ee fe ff       	call   c00067bf <init_percd>
c00179a7:	59                   	pop    ecx
c00179a8:	58                   	pop    eax
c00179a9:	6a 00                	push   0x0
c00179ab:	53                   	push   ebx
c00179ac:	e8 4c e9 fe ff       	call   c00062fd <iso_open>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	ba 01 00 00 00       	mov    edx,0x1
c00179b9:	83 f8 ff             	cmp    eax,0xffffffff
c00179bc:	74 0e                	je     c00179cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179be:	83 c0 64             	add    eax,0x64
c00179c1:	31 d2                	xor    edx,edx
c00179c3:	89 06                	mov    DWORD PTR [esi],eax
c00179c5:	eb 05                	jmp    c00179cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179c7:	ba 04 00 00 00       	mov    edx,0x4
c00179cc:	89 d0                	mov    eax,edx
c00179ce:	5a                   	pop    edx
c00179cf:	5b                   	pop    ebx
c00179d0:	5e                   	pop    esi
c00179d1:	c3                   	ret    

c00179d2 <ISO9660::openDir(char const*, void**)>:
c00179d2:	56                   	push   esi
c00179d3:	53                   	push   ebx
c00179d4:	50                   	push   eax
c00179d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179dd:	85 db                	test   ebx,ebx
c00179df:	74 76                	je     c0017a57 <ISO9660::openDir(char const*, void**)+0x85>
c00179e1:	85 f6                	test   esi,esi
c00179e3:	74 72                	je     c0017a57 <ISO9660::openDir(char const*, void**)+0x85>
c00179e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00179e8:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c00179ee:	74 34                	je     c0017a24 <ISO9660::openDir(char const*, void**)+0x52>
c00179f0:	83 ec 0c             	sub    esp,0xc
c00179f3:	50                   	push   eax
c00179f4:	e8 c6 ed fe ff       	call   c00067bf <init_percd>
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	ba 0b 00 00 00       	mov    edx,0xb
c0017a01:	40                   	inc    eax
c0017a02:	74 58                	je     c0017a5c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a04:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a0b:	74 10                	je     c0017a1d <ISO9660::openDir(char const*, void**)+0x4b>
c0017a0d:	83 ec 0c             	sub    esp,0xc
c0017a10:	68 bc f0 01 c0       	push   0xc001f0bc
c0017a15:	e8 75 87 ff ff       	call   c001018f <KePanic(char const*)>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a1f:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a2e:	83 c3 03             	add    ebx,0x3
c0017a31:	50                   	push   eax
c0017a32:	e8 88 ed fe ff       	call   c00067bf <init_percd>
c0017a37:	59                   	pop    ecx
c0017a38:	58                   	pop    eax
c0017a39:	6a 01                	push   0x1
c0017a3b:	53                   	push   ebx
c0017a3c:	e8 bc e8 fe ff       	call   c00062fd <iso_open>
c0017a41:	83 c4 10             	add    esp,0x10
c0017a44:	ba 01 00 00 00       	mov    edx,0x1
c0017a49:	83 f8 ff             	cmp    eax,0xffffffff
c0017a4c:	74 0e                	je     c0017a5c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a4e:	83 c0 64             	add    eax,0x64
c0017a51:	31 d2                	xor    edx,edx
c0017a53:	89 06                	mov    DWORD PTR [esi],eax
c0017a55:	eb 05                	jmp    c0017a5c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a57:	ba 04 00 00 00       	mov    edx,0x4
c0017a5c:	89 d0                	mov    eax,edx
c0017a5e:	5a                   	pop    edx
c0017a5f:	5b                   	pop    ebx
c0017a60:	5e                   	pop    esi
c0017a61:	c3                   	ret    

c0017a62 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a62:	53                   	push   ebx
c0017a63:	83 ec 08             	sub    esp,0x8
c0017a66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a6e:	85 c0                	test   eax,eax
c0017a70:	74 25                	je     c0017a97 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a72:	85 db                	test   ebx,ebx
c0017a74:	74 21                	je     c0017a97 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a76:	83 e8 64             	sub    eax,0x64
c0017a79:	52                   	push   edx
c0017a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a82:	50                   	push   eax
c0017a83:	e8 1d e9 fe ff       	call   c00063a5 <iso_read>
c0017a88:	83 c4 10             	add    esp,0x10
c0017a8b:	89 03                	mov    DWORD PTR [ebx],eax
c0017a8d:	09 d0                	or     eax,edx
c0017a8f:	0f 94 c0             	sete   al
c0017a92:	0f b6 c0             	movzx  eax,al
c0017a95:	eb 05                	jmp    c0017a9c <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017a97:	b8 04 00 00 00       	mov    eax,0x4
c0017a9c:	83 c4 08             	add    esp,0x8
c0017a9f:	5b                   	pop    ebx
c0017aa0:	c3                   	ret    
c0017aa1:	90                   	nop

c0017aa2 <ISO9660::seek(void*, unsigned long long)>:
c0017aa2:	57                   	push   edi
c0017aa3:	56                   	push   esi
c0017aa4:	b8 04 00 00 00       	mov    eax,0x4
c0017aa9:	51                   	push   ecx
c0017aaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017aae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ab2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017ab6:	85 d2                	test   edx,edx
c0017ab8:	74 1c                	je     c0017ad6 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017aba:	6a 00                	push   0x0
c0017abc:	83 ea 64             	sub    edx,0x64
c0017abf:	57                   	push   edi
c0017ac0:	56                   	push   esi
c0017ac1:	52                   	push   edx
c0017ac2:	e8 f4 e9 fe ff       	call   c00064bb <iso_seek>
c0017ac7:	83 c4 10             	add    esp,0x10
c0017aca:	31 f0                	xor    eax,esi
c0017acc:	31 fa                	xor    edx,edi
c0017ace:	09 d0                	or     eax,edx
c0017ad0:	0f 95 c0             	setne  al
c0017ad3:	0f b6 c0             	movzx  eax,al
c0017ad6:	5a                   	pop    edx
c0017ad7:	5e                   	pop    esi
c0017ad8:	5f                   	pop    edi
c0017ad9:	c3                   	ret    

c0017ada <ISO9660::tell(void*, unsigned long long*)>:
c0017ada:	53                   	push   ebx
c0017adb:	83 ec 08             	sub    esp,0x8
c0017ade:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ae2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ae6:	85 c0                	test   eax,eax
c0017ae8:	74 1c                	je     c0017b06 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017aea:	85 db                	test   ebx,ebx
c0017aec:	74 18                	je     c0017b06 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017aee:	83 ec 0c             	sub    esp,0xc
c0017af1:	83 e8 64             	sub    eax,0x64
c0017af4:	50                   	push   eax
c0017af5:	e8 45 ea fe ff       	call   c000653f <iso_tell>
c0017afa:	83 c4 10             	add    esp,0x10
c0017afd:	89 03                	mov    DWORD PTR [ebx],eax
c0017aff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b02:	31 c0                	xor    eax,eax
c0017b04:	eb 05                	jmp    c0017b0b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b06:	b8 04 00 00 00       	mov    eax,0x4
c0017b0b:	83 c4 08             	add    esp,0x8
c0017b0e:	5b                   	pop    ebx
c0017b0f:	c3                   	ret    

c0017b10 <ISO9660::stat(void*, unsigned long long*)>:
c0017b10:	53                   	push   ebx
c0017b11:	83 ec 08             	sub    esp,0x8
c0017b14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b18:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b1c:	85 c0                	test   eax,eax
c0017b1e:	74 20                	je     c0017b40 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b20:	85 db                	test   ebx,ebx
c0017b22:	74 1c                	je     c0017b40 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b24:	83 ec 0c             	sub    esp,0xc
c0017b27:	83 e8 64             	sub    eax,0x64
c0017b2a:	50                   	push   eax
c0017b2b:	e8 40 ea fe ff       	call   c0006570 <iso_total>
c0017b30:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017b37:	89 03                	mov    DWORD PTR [ebx],eax
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	31 c0                	xor    eax,eax
c0017b3e:	eb 05                	jmp    c0017b45 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017b40:	b8 04 00 00 00       	mov    eax,0x4
c0017b45:	83 c4 08             	add    esp,0x8
c0017b48:	5b                   	pop    ebx
c0017b49:	c3                   	ret    

c0017b4a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017b4a:	55                   	push   ebp
c0017b4b:	57                   	push   edi
c0017b4c:	56                   	push   esi
c0017b4d:	53                   	push   ebx
c0017b4e:	83 ec 0c             	sub    esp,0xc
c0017b51:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b55:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017b59:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b5d:	85 ff                	test   edi,edi
c0017b5f:	0f 94 c2             	sete   dl
c0017b62:	85 f6                	test   esi,esi
c0017b64:	0f 94 c0             	sete   al
c0017b67:	08 c2                	or     dl,al
c0017b69:	0f 85 9e 00 00 00    	jne    c0017c0d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b6f:	85 db                	test   ebx,ebx
c0017b71:	0f 84 96 00 00 00    	je     c0017c0d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b77:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017b7a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017b80:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017b87:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b8a:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017b90:	74 34                	je     c0017bc6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017b92:	83 ec 0c             	sub    esp,0xc
c0017b95:	50                   	push   eax
c0017b96:	e8 24 ec fe ff       	call   c00067bf <init_percd>
c0017b9b:	83 c4 10             	add    esp,0x10
c0017b9e:	ba 0b 00 00 00       	mov    edx,0xb
c0017ba3:	40                   	inc    eax
c0017ba4:	74 6c                	je     c0017c12 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017ba6:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017bad:	74 10                	je     c0017bbf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017baf:	83 ec 0c             	sub    esp,0xc
c0017bb2:	68 bc f0 01 c0       	push   0xc001f0bc
c0017bb7:	e8 d3 85 ff ff       	call   c001018f <KePanic(char const*)>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	8a 03                	mov    al,BYTE PTR [ebx]
c0017bc1:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017bc6:	83 c3 03             	add    ebx,0x3
c0017bc9:	52                   	push   edx
c0017bca:	52                   	push   edx
c0017bcb:	6a 00                	push   0x0
c0017bcd:	53                   	push   ebx
c0017bce:	e8 2a e7 fe ff       	call   c00062fd <iso_open>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	89 c5                	mov    ebp,eax
c0017bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0017bdb:	75 0f                	jne    c0017bec <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017bdd:	50                   	push   eax
c0017bde:	50                   	push   eax
c0017bdf:	6a 01                	push   0x1
c0017be1:	53                   	push   ebx
c0017be2:	e8 16 e7 fe ff       	call   c00062fd <iso_open>
c0017be7:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017bea:	eb 1a                	jmp    c0017c06 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017bec:	83 ec 0c             	sub    esp,0xc
c0017bef:	50                   	push   eax
c0017bf0:	e8 7b e9 fe ff       	call   c0006570 <iso_total>
c0017bf5:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017bfc:	89 06                	mov    DWORD PTR [esi],eax
c0017bfe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c01:	e8 81 e7 fe ff       	call   c0006387 <iso_close>
c0017c06:	83 c4 10             	add    esp,0x10
c0017c09:	31 d2                	xor    edx,edx
c0017c0b:	eb 05                	jmp    c0017c12 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c0d:	ba 04 00 00 00       	mov    edx,0x4
c0017c12:	83 c4 0c             	add    esp,0xc
c0017c15:	89 d0                	mov    eax,edx
c0017c17:	5b                   	pop    ebx
c0017c18:	5e                   	pop    esi
c0017c19:	5f                   	pop    edi
c0017c1a:	5d                   	pop    ebp
c0017c1b:	c3                   	ret    

c0017c1c <ISO9660::close(void*)>:
c0017c1c:	83 ec 0c             	sub    esp,0xc
c0017c1f:	b8 04 00 00 00       	mov    eax,0x4
c0017c24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c28:	85 d2                	test   edx,edx
c0017c2a:	74 11                	je     c0017c3d <ISO9660::close(void*)+0x21>
c0017c2c:	83 ec 0c             	sub    esp,0xc
c0017c2f:	83 ea 64             	sub    edx,0x64
c0017c32:	52                   	push   edx
c0017c33:	e8 4f e7 fe ff       	call   c0006387 <iso_close>
c0017c38:	83 c4 10             	add    esp,0x10
c0017c3b:	31 c0                	xor    eax,eax
c0017c3d:	83 c4 0c             	add    esp,0xc
c0017c40:	c3                   	ret    
c0017c41:	90                   	nop

c0017c42 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017c42:	55                   	push   ebp
c0017c43:	57                   	push   edi
c0017c44:	56                   	push   esi
c0017c45:	53                   	push   ebx
c0017c46:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c4c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017c53:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017c5a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017c61:	85 c0                	test   eax,eax
c0017c63:	0f 84 96 00 00 00    	je     c0017cff <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c69:	85 db                	test   ebx,ebx
c0017c6b:	0f 84 8e 00 00 00    	je     c0017cff <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c71:	83 ec 0c             	sub    esp,0xc
c0017c74:	83 e8 64             	sub    eax,0x64
c0017c77:	50                   	push   eax
c0017c78:	e8 44 e9 fe ff       	call   c00065c1 <iso_readdir>
c0017c7d:	83 c4 10             	add    esp,0x10
c0017c80:	89 c6                	mov    esi,eax
c0017c82:	85 c0                	test   eax,eax
c0017c84:	75 18                	jne    c0017c9e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017c86:	52                   	push   edx
c0017c87:	68 10 01 00 00       	push   0x110
c0017c8c:	6a 00                	push   0x0
c0017c8e:	57                   	push   edi
c0017c8f:	e8 3c 88 fe ff       	call   c00004d0 <memset>
c0017c94:	83 c4 10             	add    esp,0x10
c0017c97:	b8 01 00 00 00       	mov    eax,0x1
c0017c9c:	eb 66                	jmp    c0017d04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017c9e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017ca4:	8d 68 08             	lea    ebp,[eax+0x8]
c0017ca7:	83 ec 0c             	sub    esp,0xc
c0017caa:	55                   	push   ebp
c0017cab:	e8 90 88 fe ff       	call   c0000540 <strlen>
c0017cb0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cbc:	83 c4 10             	add    esp,0x10
c0017cbf:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017cc3:	75 0a                	jne    c0017ccf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017cc5:	b8 02 00 00 00       	mov    eax,0x2
c0017cca:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017ccd:	74 05                	je     c0017cd4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017ccf:	b8 01 00 00 00       	mov    eax,0x1
c0017cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cd8:	50                   	push   eax
c0017cd9:	50                   	push   eax
c0017cda:	55                   	push   ebp
c0017cdb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cdf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017ce3:	50                   	push   eax
c0017ce4:	e8 17 89 fe ff       	call   c0000600 <strcpy>
c0017ce9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017cf0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cf2:	31 c0                	xor    eax,eax
c0017cf4:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017cfa:	83 c4 10             	add    esp,0x10
c0017cfd:	eb 05                	jmp    c0017d04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017cff:	b8 04 00 00 00       	mov    eax,0x4
c0017d04:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d0a:	5b                   	pop    ebx
c0017d0b:	5e                   	pop    esi
c0017d0c:	5f                   	pop    edi
c0017d0d:	5d                   	pop    ebp
c0017d0e:	c3                   	ret    

c0017d0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d0f:	57                   	push   edi
c0017d10:	56                   	push   esi
c0017d11:	53                   	push   ebx
c0017d12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d1e:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d24:	75 08                	jne    c0017d2e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d26:	38 1d f0 fa 01 c0    	cmp    BYTE PTR ds:0xc001faf0,bl
c0017d2c:	74 4a                	je     c0017d78 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d2e:	83 ec 0c             	sub    esp,0xc
c0017d31:	31 d2                	xor    edx,edx
c0017d33:	68 40 53 02 c0       	push   0xc0025340
c0017d38:	0f be c3             	movsx  eax,bl
c0017d3b:	6a 01                	push   0x1
c0017d3d:	52                   	push   edx
c0017d3e:	56                   	push   esi
c0017d3f:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017d46:	e8 e9 4e ff ff       	call   c000cc34 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d4b:	83 c4 20             	add    esp,0x20
c0017d4e:	85 c0                	test   eax,eax
c0017d50:	75 0e                	jne    c0017d60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d52:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017d58:	88 1d f0 fa 01 c0    	mov    BYTE PTR ds:0xc001faf0,bl
c0017d5e:	eb 18                	jmp    c0017d78 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d60:	50                   	push   eax
c0017d61:	68 00 08 00 00       	push   0x800
c0017d66:	6a 00                	push   0x0
c0017d68:	57                   	push   edi
c0017d69:	e8 62 87 fe ff       	call   c00004d0 <memset>
c0017d6e:	83 c4 10             	add    esp,0x10
c0017d71:	b8 01 00 00 00       	mov    eax,0x1
c0017d76:	eb 0e                	jmp    c0017d86 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017d78:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017d7d:	b9 00 08 00 00       	mov    ecx,0x800
c0017d82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d84:	31 c0                	xor    eax,eax
c0017d86:	5b                   	pop    ebx
c0017d87:	5e                   	pop    esi
c0017d88:	5f                   	pop    edi
c0017d89:	c3                   	ret    

c0017d8a <ISO9660::tryMount(LogicalDisk*, int)>:
c0017d8a:	53                   	push   ebx
c0017d8b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017d91:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017d9b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017da2:	8d 58 41             	lea    ebx,[eax+0x41]
c0017da5:	0f be db             	movsx  ebx,bl
c0017da8:	53                   	push   ebx
c0017da9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dad:	50                   	push   eax
c0017dae:	6a 10                	push   0x10
c0017db0:	e8 5a ff ff ff       	call   c0017d0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	31 d2                	xor    edx,edx
c0017dba:	85 c0                	test   eax,eax
c0017dbc:	75 33                	jne    c0017df1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dbe:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017dc3:	75 2c                	jne    c0017df1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dc5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017dca:	75 25                	jne    c0017df1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dcc:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017dd1:	75 1e                	jne    c0017df1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dd3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017dd8:	75 17                	jne    c0017df1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dda:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017ddf:	75 10                	jne    c0017df1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de1:	83 ec 0c             	sub    esp,0xc
c0017de4:	53                   	push   ebx
c0017de5:	e8 d5 e9 fe ff       	call   c00067bf <init_percd>
c0017dea:	83 c4 10             	add    esp,0x10
c0017ded:	40                   	inc    eax
c0017dee:	0f 95 c2             	setne  dl
c0017df1:	88 d0                	mov    al,dl
c0017df3:	81 c4 08 08 00 00    	add    esp,0x808
c0017df9:	5b                   	pop    ebx
c0017dfa:	c3                   	ret    
c0017dfb:	90                   	nop

c0017dfc <ISO9660::ISO9660()>:
c0017dfc:	83 ec 0c             	sub    esp,0xc
c0017dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e03:	83 ec 0c             	sub    esp,0xc
c0017e06:	50                   	push   eax
c0017e07:	e8 24 2a ff ff       	call   c000a830 <Filesystem::Filesystem()>
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	ba d4 f0 01 c0       	mov    edx,0xc001f0d4
c0017e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e18:	89 10                	mov    DWORD PTR [eax],edx
c0017e1a:	e8 a2 ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e1f:	90                   	nop
c0017e20:	83 c4 0c             	add    esp,0xc
c0017e23:	c3                   	ret    

c0017e24 <SoundCard::beginPlayback()>:
c0017e24:	c7 44 24 04 34 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f134
c0017e2c:	e9 5e 83 ff ff       	jmp    c001018f <KePanic(char const*)>
c0017e31:	90                   	nop

c0017e32 <SoundCard::stopPlayback()>:
c0017e32:	c7 44 24 04 34 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f134
c0017e3a:	e9 50 83 ff ff       	jmp    c001018f <KePanic(char const*)>
c0017e3f:	90                   	nop

c0017e40 <SoundCard::SoundCard(char const*)>:
c0017e40:	83 ec 1c             	sub    esp,0x1c
c0017e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e47:	83 ec 08             	sub    esp,0x8
c0017e4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e4e:	50                   	push   eax
c0017e4f:	e8 90 3c ff ff       	call   c000bae4 <Device::Device(char const*)>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	ba 80 f1 01 c0       	mov    edx,0xc001f180
c0017e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e60:	89 10                	mov    DWORD PTR [eax],edx
c0017e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e66:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e71:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e7f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e8d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ead:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017eb2:	7f 19                	jg     c0017ecd <SoundCard::SoundCard(char const*)+0x8d>
c0017eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ebc:	83 c2 54             	add    edx,0x54
c0017ebf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ec7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ecb:	eb e0                	jmp    c0017ead <SoundCard::SoundCard(char const*)+0x6d>
c0017ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ed8:	90                   	nop
c0017ed9:	83 c4 1c             	add    esp,0x1c
c0017edc:	c3                   	ret    
c0017edd:	90                   	nop

c0017ede <SoundCard::~SoundCard()>:
c0017ede:	83 ec 0c             	sub    esp,0xc
c0017ee1:	ba 80 f1 01 c0       	mov    edx,0xc001f180
c0017ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eea:	89 10                	mov    DWORD PTR [eax],edx
c0017eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ef0:	83 ec 0c             	sub    esp,0xc
c0017ef3:	50                   	push   eax
c0017ef4:	e8 55 39 ff ff       	call   c000b84e <Device::~Device()>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	90                   	nop
c0017efd:	83 c4 0c             	add    esp,0xc
c0017f00:	c3                   	ret    
c0017f01:	90                   	nop

c0017f02 <SoundCard::~SoundCard()>:
c0017f02:	83 ec 0c             	sub    esp,0xc
c0017f05:	83 ec 0c             	sub    esp,0xc
c0017f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f0c:	e8 cd ff ff ff       	call   c0017ede <SoundCard::~SoundCard()>
c0017f11:	83 c4 10             	add    esp,0x10
c0017f14:	83 ec 08             	sub    esp,0x8
c0017f17:	68 e8 01 00 00       	push   0x1e8
c0017f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f20:	e8 f4 24 ff ff       	call   c000a419 <operator delete(void*, unsigned long)>
c0017f25:	83 c4 10             	add    esp,0x10
c0017f28:	83 c4 0c             	add    esp,0xc
c0017f2b:	c3                   	ret    

c0017f2c <SoundCard::configureRates(int, int, int)>:
c0017f2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f30:	31 c0                	xor    eax,eax
c0017f32:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f39:	75 20                	jne    c0017f5b <SoundCard::configureRates(int, int, int)+0x2f>
c0017f3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f3f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f49:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f53:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f59:	b0 01                	mov    al,0x1
c0017f5b:	c3                   	ret    

c0017f5c <SoundCard::getSamples16(int, short*)>:
c0017f5c:	55                   	push   ebp
c0017f5d:	57                   	push   edi
c0017f5e:	31 ff                	xor    edi,edi
c0017f60:	56                   	push   esi
c0017f61:	53                   	push   ebx
c0017f62:	31 db                	xor    ebx,ebx
c0017f64:	83 ec 10             	sub    esp,0x10
c0017f67:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f6b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f6f:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f72:	50                   	push   eax
c0017f73:	6a 00                	push   0x0
c0017f75:	55                   	push   ebp
c0017f76:	e8 55 85 fe ff       	call   c00004d0 <memset>
c0017f7b:	83 c4 10             	add    esp,0x10
c0017f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f82:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017f89:	85 c0                	test   eax,eax
c0017f8b:	74 1b                	je     c0017fa8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017f8d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017f91:	75 15                	jne    c0017fa8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017f93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f97:	55                   	push   ebp
c0017f98:	56                   	push   esi
c0017f99:	50                   	push   eax
c0017f9a:	e8 ed 02 00 00       	call   c001828c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017f9f:	83 c4 10             	add    esp,0x10
c0017fa2:	39 c7                	cmp    edi,eax
c0017fa4:	7d 02                	jge    c0017fa8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fa6:	89 c7                	mov    edi,eax
c0017fa8:	43                   	inc    ebx
c0017fa9:	83 fb 20             	cmp    ebx,0x20
c0017fac:	75 d0                	jne    c0017f7e <SoundCard::getSamples16(int, short*)+0x22>
c0017fae:	83 c4 0c             	add    esp,0xc
c0017fb1:	89 f8                	mov    eax,edi
c0017fb3:	5b                   	pop    ebx
c0017fb4:	5e                   	pop    esi
c0017fb5:	5f                   	pop    edi
c0017fb6:	5d                   	pop    ebp
c0017fb7:	c3                   	ret    

c0017fb8 <SoundCard::getSamples32(int, int*)>:
c0017fb8:	55                   	push   ebp
c0017fb9:	57                   	push   edi
c0017fba:	31 ff                	xor    edi,edi
c0017fbc:	56                   	push   esi
c0017fbd:	31 f6                	xor    esi,esi
c0017fbf:	53                   	push   ebx
c0017fc0:	83 ec 10             	sub    esp,0x10
c0017fc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017fcb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fcf:	c1 e0 02             	shl    eax,0x2
c0017fd2:	50                   	push   eax
c0017fd3:	6a 00                	push   0x0
c0017fd5:	55                   	push   ebp
c0017fd6:	e8 f5 84 fe ff       	call   c00004d0 <memset>
c0017fdb:	83 c4 10             	add    esp,0x10
c0017fde:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017fe5:	85 c0                	test   eax,eax
c0017fe7:	74 1b                	je     c0018004 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fe9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fed:	75 15                	jne    c0018004 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fef:	53                   	push   ebx
c0017ff0:	55                   	push   ebp
c0017ff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ff5:	50                   	push   eax
c0017ff6:	e8 55 03 00 00       	call   c0018350 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017ffb:	83 c4 10             	add    esp,0x10
c0017ffe:	39 c6                	cmp    esi,eax
c0018000:	7d 02                	jge    c0018004 <SoundCard::getSamples32(int, int*)+0x4c>
c0018002:	89 c6                	mov    esi,eax
c0018004:	47                   	inc    edi
c0018005:	83 ff 20             	cmp    edi,0x20
c0018008:	75 d4                	jne    c0017fde <SoundCard::getSamples32(int, int*)+0x26>
c001800a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018010:	85 f6                	test   esi,esi
c0018012:	75 0f                	jne    c0018023 <SoundCard::getSamples32(int, int*)+0x6b>
c0018014:	84 c0                	test   al,al
c0018016:	74 1b                	je     c0018033 <SoundCard::getSamples32(int, int*)+0x7b>
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001801d:	53                   	push   ebx
c001801e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018021:	eb 0d                	jmp    c0018030 <SoundCard::getSamples32(int, int*)+0x78>
c0018023:	84 c0                	test   al,al
c0018025:	75 0c                	jne    c0018033 <SoundCard::getSamples32(int, int*)+0x7b>
c0018027:	83 ec 0c             	sub    esp,0xc
c001802a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001802c:	53                   	push   ebx
c001802d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018030:	83 c4 10             	add    esp,0x10
c0018033:	83 c4 0c             	add    esp,0xc
c0018036:	89 f0                	mov    eax,esi
c0018038:	5b                   	pop    ebx
c0018039:	5e                   	pop    esi
c001803a:	5f                   	pop    edi
c001803b:	5d                   	pop    ebp
c001803c:	c3                   	ret    
c001803d:	90                   	nop

c001803e <SoundCard::addChannel(SoundPort*)>:
c001803e:	83 ec 0c             	sub    esp,0xc
c0018041:	31 c0                	xor    eax,eax
c0018043:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018047:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001804f:	74 1b                	je     c001806c <SoundCard::addChannel(SoundPort*)+0x2e>
c0018051:	40                   	inc    eax
c0018052:	83 f8 20             	cmp    eax,0x20
c0018055:	75 f0                	jne    c0018047 <SoundCard::addChannel(SoundPort*)+0x9>
c0018057:	83 ec 0c             	sub    esp,0xc
c001805a:	68 59 f1 01 c0       	push   0xc001f159
c001805f:	e8 2b 81 ff ff       	call   c001018f <KePanic(char const*)>
c0018064:	83 c4 10             	add    esp,0x10
c0018067:	83 c8 ff             	or     eax,0xffffffff
c001806a:	eb 0b                	jmp    c0018077 <SoundCard::addChannel(SoundPort*)+0x39>
c001806c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018070:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018077:	83 c4 0c             	add    esp,0xc
c001807a:	c3                   	ret    
c001807b:	90                   	nop

c001807c <SoundCard::removeChannel(int)>:
c001807c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018084:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001808f:	c3                   	ret    

c0018090 <SoundPort::SoundPort(int, int, int, int)>:
c0018090:	83 ec 0c             	sub    esp,0xc
c0018093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018097:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001809e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00180a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180ae:	89 10                	mov    DWORD PTR [eax],edx
c00180b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00180bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00180c6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00180cb:	75 13                	jne    c00180e0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00180cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00180d3:	05 a0 0f 00 00       	add    eax,0xfa0
c00180d8:	01 c0                	add    eax,eax
c00180da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180de:	66 90                	xchg   ax,ax
c00180e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180e8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00180eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ef:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00180f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00180fd:	c1 e0 02             	shl    eax,0x2
c0018100:	83 ec 0c             	sub    esp,0xc
c0018103:	50                   	push   eax
c0018104:	e8 b0 f6 fe ff       	call   c00077b9 <malloc>
c0018109:	83 c4 10             	add    esp,0x10
c001810c:	89 c2                	mov    edx,eax
c001810e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018112:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018115:	90                   	nop
c0018116:	83 c4 0c             	add    esp,0xc
c0018119:	c3                   	ret    
c001811a:	66 90                	xchg   ax,ax

c001811c <SoundPort::~SoundPort()>:
c001811c:	83 ec 0c             	sub    esp,0xc
c001811f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018123:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018126:	85 c0                	test   eax,eax
c0018128:	74 1e                	je     c0018148 <SoundPort::~SoundPort()+0x2c>
c001812a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018131:	83 ec 0c             	sub    esp,0xc
c0018134:	50                   	push   eax
c0018135:	e8 8f f6 fe ff       	call   c00077c9 <free>
c001813a:	83 c4 10             	add    esp,0x10
c001813d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018141:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018148:	90                   	nop
c0018149:	83 c4 0c             	add    esp,0xc
c001814c:	c3                   	ret    
c001814d:	90                   	nop
c001814e:	66 90                	xchg   ax,ax

c0018150 <SoundPort::unpause()>:
c0018150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018154:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018158:	c3                   	ret    
c0018159:	90                   	nop
c001815a:	66 90                	xchg   ax,ax

c001815c <SoundPort::pause()>:
c001815c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018160:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018164:	c3                   	ret    
c0018165:	90                   	nop
c0018166:	66 90                	xchg   ax,ax

c0018168 <SoundPort::getBufferUsed()>:
c0018168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001816c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001816f:	c3                   	ret    

c0018170 <SoundPort::getBufferSize()>:
c0018170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018174:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018177:	c3                   	ret    

c0018178 <SoundPort::buffer16(short*, int)>:
c0018178:	55                   	push   ebp
c0018179:	57                   	push   edi
c001817a:	56                   	push   esi
c001817b:	53                   	push   ebx
c001817c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018180:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018184:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018187:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001818a:	74 68                	je     c00181f4 <SoundPort::buffer16(short*, int)+0x7c>
c001818c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018190:	85 c9                	test   ecx,ecx
c0018192:	7e 60                	jle    c00181f4 <SoundPort::buffer16(short*, int)+0x7c>
c0018194:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018198:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001819b:	c1 e1 0f             	shl    ecx,0xf
c001819e:	8d 70 01             	lea    esi,[eax+0x1]
c00181a1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181a4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00181a7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181aa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181ad:	74 4d                	je     c00181fc <SoundPort::buffer16(short*, int)+0x84>
c00181af:	31 f6                	xor    esi,esi
c00181b1:	eb 21                	jmp    c00181d4 <SoundPort::buffer16(short*, int)+0x5c>
c00181b3:	90                   	nop
c00181b4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00181b9:	8d 79 01             	lea    edi,[ecx+0x1]
c00181bc:	c1 e3 0f             	shl    ebx,0xf
c00181bf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00181c2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00181c5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00181c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181ce:	74 1c                	je     c00181ec <SoundPort::buffer16(short*, int)+0x74>
c00181d0:	89 c6                	mov    esi,eax
c00181d2:	66 90                	xchg   ax,ax
c00181d4:	8d 46 01             	lea    eax,[esi+0x1]
c00181d7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00181db:	75 d7                	jne    c00181b4 <SoundPort::buffer16(short*, int)+0x3c>
c00181dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181e1:	8d 76 00             	lea    esi,[esi+0x0]
c00181e4:	5b                   	pop    ebx
c00181e5:	5e                   	pop    esi
c00181e6:	5f                   	pop    edi
c00181e7:	5d                   	pop    ebp
c00181e8:	c3                   	ret    
c00181e9:	8d 76 00             	lea    esi,[esi+0x0]
c00181ec:	5b                   	pop    ebx
c00181ed:	8d 46 02             	lea    eax,[esi+0x2]
c00181f0:	5e                   	pop    esi
c00181f1:	5f                   	pop    edi
c00181f2:	5d                   	pop    ebp
c00181f3:	c3                   	ret    
c00181f4:	5b                   	pop    ebx
c00181f5:	31 c0                	xor    eax,eax
c00181f7:	5e                   	pop    esi
c00181f8:	5f                   	pop    edi
c00181f9:	5d                   	pop    ebp
c00181fa:	c3                   	ret    
c00181fb:	90                   	nop
c00181fc:	b8 01 00 00 00       	mov    eax,0x1
c0018201:	eb e1                	jmp    c00181e4 <SoundPort::buffer16(short*, int)+0x6c>
c0018203:	90                   	nop

c0018204 <SoundPort::buffer32(int*, int)>:
c0018204:	55                   	push   ebp
c0018205:	57                   	push   edi
c0018206:	56                   	push   esi
c0018207:	53                   	push   ebx
c0018208:	51                   	push   ecx
c0018209:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001820d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018211:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018214:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018218:	89 04 24             	mov    DWORD PTR [esp],eax
c001821b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001821e:	74 5c                	je     c001827c <SoundPort::buffer32(int*, int)+0x78>
c0018220:	85 c0                	test   eax,eax
c0018222:	7e 58                	jle    c001827c <SoundPort::buffer32(int*, int)+0x78>
c0018224:	8d 71 01             	lea    esi,[ecx+0x1]
c0018227:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001822a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001822d:	8b 37                	mov    esi,DWORD PTR [edi]
c001822f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018232:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018235:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018238:	74 4a                	je     c0018284 <SoundPort::buffer32(int*, int)+0x80>
c001823a:	31 f6                	xor    esi,esi
c001823c:	eb 1e                	jmp    c001825c <SoundPort::buffer32(int*, int)+0x58>
c001823e:	66 90                	xchg   ax,ax
c0018240:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018243:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018246:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018249:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001824c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018250:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018253:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018256:	74 18                	je     c0018270 <SoundPort::buffer32(int*, int)+0x6c>
c0018258:	89 de                	mov    esi,ebx
c001825a:	66 90                	xchg   ax,ax
c001825c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001825f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018262:	75 dc                	jne    c0018240 <SoundPort::buffer32(int*, int)+0x3c>
c0018264:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018267:	90                   	nop
c0018268:	5a                   	pop    edx
c0018269:	5b                   	pop    ebx
c001826a:	5e                   	pop    esi
c001826b:	5f                   	pop    edi
c001826c:	5d                   	pop    ebp
c001826d:	c3                   	ret    
c001826e:	66 90                	xchg   ax,ax
c0018270:	5a                   	pop    edx
c0018271:	8d 46 02             	lea    eax,[esi+0x2]
c0018274:	5b                   	pop    ebx
c0018275:	5e                   	pop    esi
c0018276:	5f                   	pop    edi
c0018277:	5d                   	pop    ebp
c0018278:	c3                   	ret    
c0018279:	8d 76 00             	lea    esi,[esi+0x0]
c001827c:	5a                   	pop    edx
c001827d:	31 c0                	xor    eax,eax
c001827f:	5b                   	pop    ebx
c0018280:	5e                   	pop    esi
c0018281:	5f                   	pop    edi
c0018282:	5d                   	pop    ebp
c0018283:	c3                   	ret    
c0018284:	b8 01 00 00 00       	mov    eax,0x1
c0018289:	eb dd                	jmp    c0018268 <SoundPort::buffer32(int*, int)+0x64>
c001828b:	90                   	nop

c001828c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001828c:	57                   	push   edi
c001828d:	56                   	push   esi
c001828e:	53                   	push   ebx
c001828f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018293:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018297:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001829d:	39 03                	cmp    DWORD PTR [ebx],eax
c001829f:	74 13                	je     c00182b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00182a1:	83 ec 0c             	sub    esp,0xc
c00182a4:	68 ac f1 01 c0       	push   0xc001f1ac
c00182a9:	e8 e1 7e ff ff       	call   c001018f <KePanic(char const*)>
c00182ae:	83 c4 10             	add    esp,0x10
c00182b1:	8d 76 00             	lea    esi,[esi+0x0]
c00182b4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00182ba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00182bd:	74 11                	je     c00182d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00182bf:	83 ec 0c             	sub    esp,0xc
c00182c2:	68 eb f1 01 c0       	push   0xc001f1eb
c00182c7:	e8 c3 7e ff ff       	call   c001018f <KePanic(char const*)>
c00182cc:	83 c4 10             	add    esp,0x10
c00182cf:	90                   	nop
c00182d0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00182d6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00182d9:	74 11                	je     c00182ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	68 eb f1 01 c0       	push   0xc001f1eb
c00182e3:	e8 a7 7e ff ff       	call   c001018f <KePanic(char const*)>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	90                   	nop
c00182ec:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00182ef:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00182f3:	7e 07                	jle    c00182fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00182f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00182f9:	8d 76 00             	lea    esi,[esi+0x0]
c00182fc:	85 f6                	test   esi,esi
c00182fe:	7e 2c                	jle    c001832c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018300:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018304:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018307:	31 c9                	xor    ecx,ecx
c0018309:	01 d7                	add    edi,edx
c001830b:	90                   	nop
c001830c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001830f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018312:	85 c0                	test   eax,eax
c0018314:	79 06                	jns    c001831c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018316:	05 ff 7f 00 00       	add    eax,0x7fff
c001831b:	90                   	nop
c001831c:	c1 f8 0f             	sar    eax,0xf
c001831f:	83 c1 04             	add    ecx,0x4
c0018322:	66 01 02             	add    WORD PTR [edx],ax
c0018325:	83 c2 02             	add    edx,0x2
c0018328:	39 d7                	cmp    edi,edx
c001832a:	75 e0                	jne    c001830c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001832c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001832f:	50                   	push   eax
c0018330:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018333:	29 f0                	sub    eax,esi
c0018335:	c1 e0 02             	shl    eax,0x2
c0018338:	50                   	push   eax
c0018339:	8d 04 b2             	lea    eax,[edx+esi*4]
c001833c:	50                   	push   eax
c001833d:	52                   	push   edx
c001833e:	e8 9d 80 fe ff       	call   c00003e0 <memmove>
c0018343:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018346:	83 c4 10             	add    esp,0x10
c0018349:	89 f0                	mov    eax,esi
c001834b:	5b                   	pop    ebx
c001834c:	5e                   	pop    esi
c001834d:	5f                   	pop    edi
c001834e:	c3                   	ret    
c001834f:	90                   	nop

c0018350 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018350:	57                   	push   edi
c0018351:	56                   	push   esi
c0018352:	53                   	push   ebx
c0018353:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018357:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001835b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001835f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018365:	39 06                	cmp    DWORD PTR [esi],eax
c0018367:	74 13                	je     c001837c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018369:	83 ec 0c             	sub    esp,0xc
c001836c:	68 cc f1 01 c0       	push   0xc001f1cc
c0018371:	e8 19 7e ff ff       	call   c001018f <KePanic(char const*)>
c0018376:	83 c4 10             	add    esp,0x10
c0018379:	8d 76 00             	lea    esi,[esi+0x0]
c001837c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018382:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018385:	74 11                	je     c0018398 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018387:	83 ec 0c             	sub    esp,0xc
c001838a:	68 07 f2 01 c0       	push   0xc001f207
c001838f:	e8 fb 7d ff ff       	call   c001018f <KePanic(char const*)>
c0018394:	83 c4 10             	add    esp,0x10
c0018397:	90                   	nop
c0018398:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001839e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00183a1:	74 11                	je     c00183b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00183a3:	83 ec 0c             	sub    esp,0xc
c00183a6:	68 07 f2 01 c0       	push   0xc001f207
c00183ab:	e8 df 7d ff ff       	call   c001018f <KePanic(char const*)>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	90                   	nop
c00183b4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00183b7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00183bb:	7e 07                	jle    c00183c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00183bd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00183c1:	8d 76 00             	lea    esi,[esi+0x0]
c00183c4:	85 ff                	test   edi,edi
c00183c6:	7e 1c                	jle    c00183e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00183c8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00183cf:	31 c0                	xor    eax,eax
c00183d1:	8d 76 00             	lea    esi,[esi+0x0]
c00183d4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183d7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00183da:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00183dd:	83 c0 04             	add    eax,0x4
c00183e0:	39 c1                	cmp    ecx,eax
c00183e2:	75 f0                	jne    c00183d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00183e4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183e7:	50                   	push   eax
c00183e8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00183eb:	29 f8                	sub    eax,edi
c00183ed:	c1 e0 02             	shl    eax,0x2
c00183f0:	50                   	push   eax
c00183f1:	8d 04 ba             	lea    eax,[edx+edi*4]
c00183f4:	50                   	push   eax
c00183f5:	52                   	push   edx
c00183f6:	e8 e5 7f fe ff       	call   c00003e0 <memmove>
c00183fb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	89 f8                	mov    eax,edi
c0018403:	5b                   	pop    ebx
c0018404:	5e                   	pop    esi
c0018405:	5f                   	pop    edi
c0018406:	c3                   	ret    
c0018407:	90                   	nop

c0018408 <PCI::open(int, int, void*)>:
c0018408:	83 ec 18             	sub    esp,0x18
c001840b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001840f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018413:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018419:	8b 10                	mov    edx,DWORD PTR [eax]
c001841b:	50                   	push   eax
c001841c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001841f:	31 c0                	xor    eax,eax
c0018421:	83 c4 1c             	add    esp,0x1c
c0018424:	c3                   	ret    
c0018425:	90                   	nop

c0018426 <PCI::close(int, int, void*)>:
c0018426:	31 c0                	xor    eax,eax
c0018428:	c3                   	ret    
c0018429:	90                   	nop

c001842a <PCI::PCI()>:
c001842a:	83 ec 0c             	sub    esp,0xc
c001842d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018431:	83 ec 08             	sub    esp,0x8
c0018434:	68 23 f2 01 c0       	push   0xc001f223
c0018439:	50                   	push   eax
c001843a:	e8 61 2e ff ff       	call   c000b2a0 <Bus::Bus(char const*)>
c001843f:	83 c4 10             	add    esp,0x10
c0018442:	ba cc f2 01 c0       	mov    edx,0xc001f2cc
c0018447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844b:	89 10                	mov    DWORD PTR [eax],edx
c001844d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018451:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001845f:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0018464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018468:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001846e:	31 d2                	xor    edx,edx
c0018470:	88 c2                	mov    dl,al
c0018472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018476:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001847d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018481:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018487:	31 d2                	xor    edx,edx
c0018489:	88 c2                	mov    dl,al
c001848b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001848f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018498:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001849e:	8d 50 01             	lea    edx,[eax+0x1]
c00184a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184a5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00184ab:	31 d2                	xor    edx,edx
c00184ad:	88 c2                	mov    dl,al
c00184af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00184b7:	83 c9 c0             	or     ecx,0xffffffc0
c00184ba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00184be:	90                   	nop
c00184bf:	83 c4 0c             	add    esp,0xc
c00184c2:	c3                   	ret    
c00184c3:	90                   	nop

c00184c4 <PCI::readBAR8(unsigned int, int)>:
c00184c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184cc:	f6 c2 01             	test   dl,0x1
c00184cf:	74 07                	je     c00184d8 <PCI::readBAR8(unsigned int, int)+0x14>
c00184d1:	83 e2 fc             	and    edx,0xfffffffc
c00184d4:	01 c2                	add    edx,eax
c00184d6:	ec                   	in     al,dx
c00184d7:	c3                   	ret    
c00184d8:	83 e2 f0             	and    edx,0xfffffff0
c00184db:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00184de:	c3                   	ret    
c00184df:	90                   	nop

c00184e0 <PCI::readBAR16(unsigned int, int)>:
c00184e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184e8:	f6 c2 01             	test   dl,0x1
c00184eb:	74 08                	je     c00184f5 <PCI::readBAR16(unsigned int, int)+0x15>
c00184ed:	83 e2 fc             	and    edx,0xfffffffc
c00184f0:	01 c2                	add    edx,eax
c00184f2:	66 ed                	in     ax,dx
c00184f4:	c3                   	ret    
c00184f5:	83 e2 f0             	and    edx,0xfffffff0
c00184f8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00184fc:	c3                   	ret    
c00184fd:	90                   	nop

c00184fe <PCI::readBAR32(unsigned int, int)>:
c00184fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018502:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018506:	f6 c2 01             	test   dl,0x1
c0018509:	74 07                	je     c0018512 <PCI::readBAR32(unsigned int, int)+0x14>
c001850b:	83 e2 fc             	and    edx,0xfffffffc
c001850e:	01 c2                	add    edx,eax
c0018510:	ed                   	in     eax,dx
c0018511:	c3                   	ret    
c0018512:	83 e2 f0             	and    edx,0xfffffff0
c0018515:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018518:	c3                   	ret    
c0018519:	90                   	nop

c001851a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001851a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001851e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018522:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018526:	f6 c2 01             	test   dl,0x1
c0018529:	74 07                	je     c0018532 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001852b:	83 e2 fc             	and    edx,0xfffffffc
c001852e:	01 ca                	add    edx,ecx
c0018530:	ee                   	out    dx,al
c0018531:	c3                   	ret    
c0018532:	83 e2 f0             	and    edx,0xfffffff0
c0018535:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018538:	c3                   	ret    
c0018539:	90                   	nop

c001853a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001853a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001853e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018542:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018546:	f6 c2 01             	test   dl,0x1
c0018549:	74 08                	je     c0018553 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001854b:	83 e2 fc             	and    edx,0xfffffffc
c001854e:	01 ca                	add    edx,ecx
c0018550:	66 ef                	out    dx,ax
c0018552:	c3                   	ret    
c0018553:	83 e2 f0             	and    edx,0xfffffff0
c0018556:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001855a:	c3                   	ret    
c001855b:	90                   	nop

c001855c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001855c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018564:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018568:	f6 c2 01             	test   dl,0x1
c001856b:	74 07                	je     c0018574 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001856d:	83 e2 fc             	and    edx,0xfffffffc
c0018570:	01 ca                	add    edx,ecx
c0018572:	ef                   	out    dx,eax
c0018573:	c3                   	ret    
c0018574:	83 e2 f0             	and    edx,0xfffffff0
c0018577:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001857a:	c3                   	ret    
c001857b:	90                   	nop

c001857c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001857c:	55                   	push   ebp
c001857d:	57                   	push   edi
c001857e:	56                   	push   esi
c001857f:	53                   	push   ebx
c0018580:	83 ec 0c             	sub    esp,0xc
c0018583:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018587:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001858b:	89 f0                	mov    eax,esi
c001858d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018591:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018595:	3c 07                	cmp    al,0x7
c0018597:	76 10                	jbe    c00185a9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018599:	83 ec 0c             	sub    esp,0xc
c001859c:	68 2b f2 01 c0       	push   0xc001f22b
c00185a1:	e8 e9 7b ff ff       	call   c001018f <KePanic(char const*)>
c00185a6:	83 c4 10             	add    esp,0x10
c00185a9:	80 fb 0f             	cmp    bl,0xf
c00185ac:	76 10                	jbe    c00185be <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00185ae:	83 ec 0c             	sub    esp,0xc
c00185b1:	68 5b f2 01 c0       	push   0xc001f25b
c00185b6:	e8 d4 7b ff ff       	call   c001018f <KePanic(char const*)>
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	8d 04 36             	lea    eax,[esi+esi*1]
c00185c1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185c6:	83 c8 f0             	or     eax,0xfffffff0
c00185c9:	ee                   	out    dx,al
c00185ca:	ba fa 0c 00 00       	mov    edx,0xcfa
c00185cf:	89 e8                	mov    eax,ebp
c00185d1:	ee                   	out    dx,al
c00185d2:	83 c4 0c             	add    esp,0xc
c00185d5:	89 d8                	mov    eax,ebx
c00185d7:	66 81 e7 fc 00       	and    di,0xfc
c00185dc:	5b                   	pop    ebx
c00185dd:	c1 e0 08             	shl    eax,0x8
c00185e0:	5e                   	pop    esi
c00185e1:	09 f8                	or     eax,edi
c00185e3:	5f                   	pop    edi
c00185e4:	66 0d 00 c0          	or     ax,0xc000
c00185e8:	5d                   	pop    ebp
c00185e9:	c3                   	ret    

c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185ea:	57                   	push   edi
c00185eb:	56                   	push   esi
c00185ec:	53                   	push   ebx
c00185ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185f5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00185fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018603:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018607:	83 ff 01             	cmp    edi,0x1
c001860a:	75 3e                	jne    c001864a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001860c:	89 de                	mov    esi,ebx
c001860e:	0f b6 c0             	movzx  eax,al
c0018611:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018617:	c1 e0 10             	shl    eax,0x10
c001861a:	0f b6 c9             	movzx  ecx,cl
c001861d:	09 f0                	or     eax,esi
c001861f:	c1 e1 08             	shl    ecx,0x8
c0018622:	0f b6 d2             	movzx  edx,dl
c0018625:	09 c8                	or     eax,ecx
c0018627:	c1 e2 0b             	shl    edx,0xb
c001862a:	09 d0                	or     eax,edx
c001862c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018631:	0d 00 00 00 80       	or     eax,0x80000000
c0018636:	ef                   	out    dx,eax
c0018637:	ba fc 0c 00 00       	mov    edx,0xcfc
c001863c:	ed                   	in     eax,dx
c001863d:	83 e3 02             	and    ebx,0x2
c0018640:	0f b6 cb             	movzx  ecx,bl
c0018643:	c1 e1 03             	shl    ecx,0x3
c0018646:	d3 e8                	shr    eax,cl
c0018648:	eb 43                	jmp    c001868d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001864a:	83 ff 02             	cmp    edi,0x2
c001864d:	75 2c                	jne    c001867b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001864f:	83 ec 0c             	sub    esp,0xc
c0018652:	0f b6 c9             	movzx  ecx,cl
c0018655:	0f b6 d2             	movzx  edx,dl
c0018658:	0f b6 fb             	movzx  edi,bl
c001865b:	0f b6 c0             	movzx  eax,al
c001865e:	57                   	push   edi
c001865f:	51                   	push   ecx
c0018660:	52                   	push   edx
c0018661:	50                   	push   eax
c0018662:	56                   	push   esi
c0018663:	e8 14 ff ff ff       	call   c001857c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018668:	89 c2                	mov    edx,eax
c001866a:	ed                   	in     eax,dx
c001866b:	83 e3 02             	and    ebx,0x2
c001866e:	83 c4 20             	add    esp,0x20
c0018671:	0f b6 cb             	movzx  ecx,bl
c0018674:	c1 e1 03             	shl    ecx,0x3
c0018677:	d3 e8                	shr    eax,cl
c0018679:	eb 12                	jmp    c001868d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001867b:	83 ec 0c             	sub    esp,0xc
c001867e:	68 8b f2 01 c0       	push   0xc001f28b
c0018683:	e8 07 7b ff ff       	call   c001018f <KePanic(char const*)>
c0018688:	83 c4 10             	add    esp,0x10
c001868b:	31 c0                	xor    eax,eax
c001868d:	5b                   	pop    ebx
c001868e:	5e                   	pop    esi
c001868f:	5f                   	pop    edi
c0018690:	c3                   	ret    
c0018691:	90                   	nop

c0018692 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018692:	83 ec 18             	sub    esp,0x18
c0018695:	6a 00                	push   0x0
c0018697:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001869c:	50                   	push   eax
c001869d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186a2:	50                   	push   eax
c00186a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186a8:	50                   	push   eax
c00186a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186ad:	e8 38 ff ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186b2:	83 c4 2c             	add    esp,0x2c
c00186b5:	c3                   	ret    

c00186b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00186b6:	83 ec 18             	sub    esp,0x18
c00186b9:	6a 0e                	push   0xe
c00186bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186c0:	50                   	push   eax
c00186c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186c6:	50                   	push   eax
c00186c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186cc:	50                   	push   eax
c00186cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186d1:	e8 14 ff ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186d6:	83 c4 2c             	add    esp,0x2c
c00186d9:	0f b6 c0             	movzx  eax,al
c00186dc:	c3                   	ret    
c00186dd:	90                   	nop

c00186de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00186de:	55                   	push   ebp
c00186df:	57                   	push   edi
c00186e0:	56                   	push   esi
c00186e1:	53                   	push   ebx
c00186e2:	83 ec 18             	sub    esp,0x18
c00186e5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00186ea:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00186ef:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00186f4:	6a 0a                	push   0xa
c00186f6:	56                   	push   esi
c00186f7:	55                   	push   ebp
c00186f8:	57                   	push   edi
c00186f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186fd:	e8 e8 fe ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018702:	83 c4 14             	add    esp,0x14
c0018705:	89 c3                	mov    ebx,eax
c0018707:	6a 0a                	push   0xa
c0018709:	0f b6 db             	movzx  ebx,bl
c001870c:	56                   	push   esi
c001870d:	55                   	push   ebp
c001870e:	57                   	push   edi
c001870f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018713:	e8 d2 fe ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018718:	83 c4 2c             	add    esp,0x2c
c001871b:	25 00 ff 00 00       	and    eax,0xff00
c0018720:	09 d8                	or     eax,ebx
c0018722:	5b                   	pop    ebx
c0018723:	5e                   	pop    esi
c0018724:	5f                   	pop    edi
c0018725:	5d                   	pop    ebp
c0018726:	c3                   	ret    
c0018727:	90                   	nop

c0018728 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018728:	83 ec 18             	sub    esp,0x18
c001872b:	6a 08                	push   0x8
c001872d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018732:	50                   	push   eax
c0018733:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018738:	50                   	push   eax
c0018739:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001873e:	50                   	push   eax
c001873f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018743:	e8 a2 fe ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018748:	83 c4 2c             	add    esp,0x2c
c001874b:	0f b6 c4             	movzx  eax,ah
c001874e:	c3                   	ret    
c001874f:	90                   	nop

c0018750 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018750:	83 ec 18             	sub    esp,0x18
c0018753:	6a 08                	push   0x8
c0018755:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001875a:	50                   	push   eax
c001875b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018760:	50                   	push   eax
c0018761:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018766:	50                   	push   eax
c0018767:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001876b:	e8 7a fe ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018770:	83 c4 2c             	add    esp,0x2c
c0018773:	c3                   	ret    

c0018774 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018774:	83 ec 18             	sub    esp,0x18
c0018777:	6a 3c                	push   0x3c
c0018779:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877e:	50                   	push   eax
c001877f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018784:	50                   	push   eax
c0018785:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001878a:	50                   	push   eax
c001878b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878f:	e8 56 fe ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018794:	83 c4 2c             	add    esp,0x2c
c0018797:	c3                   	ret    

c0018798 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018798:	83 ec 18             	sub    esp,0x18
c001879b:	6a 18                	push   0x18
c001879d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a2:	50                   	push   eax
c00187a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a8:	50                   	push   eax
c00187a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ae:	50                   	push   eax
c00187af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b3:	e8 32 fe ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b8:	83 c4 2c             	add    esp,0x2c
c00187bb:	0f b6 c4             	movzx  eax,ah
c00187be:	c3                   	ret    
c00187bf:	90                   	nop

c00187c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00187c0:	55                   	push   ebp
c00187c1:	57                   	push   edi
c00187c2:	56                   	push   esi
c00187c3:	53                   	push   ebx
c00187c4:	83 ec 28             	sub    esp,0x28
c00187c7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00187cb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00187d0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00187d5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00187da:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00187e1:	8d 43 12             	lea    eax,[ebx+0x12]
c00187e4:	83 c3 10             	add    ebx,0x10
c00187e7:	0f b6 c0             	movzx  eax,al
c00187ea:	0f b6 db             	movzx  ebx,bl
c00187ed:	50                   	push   eax
c00187ee:	51                   	push   ecx
c00187ef:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00187f3:	57                   	push   edi
c00187f4:	55                   	push   ebp
c00187f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187f9:	e8 ec fd ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187fe:	83 c4 14             	add    esp,0x14
c0018801:	89 c6                	mov    esi,eax
c0018803:	53                   	push   ebx
c0018804:	c1 e6 10             	shl    esi,0x10
c0018807:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001880b:	51                   	push   ecx
c001880c:	57                   	push   edi
c001880d:	55                   	push   ebp
c001880e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018812:	e8 d3 fd ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018817:	83 c4 3c             	add    esp,0x3c
c001881a:	0f b7 c0             	movzx  eax,ax
c001881d:	5b                   	pop    ebx
c001881e:	09 f0                	or     eax,esi
c0018820:	5e                   	pop    esi
c0018821:	5f                   	pop    edi
c0018822:	5d                   	pop    ebp
c0018823:	c3                   	ret    

c0018824 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018824:	55                   	push   ebp
c0018825:	57                   	push   edi
c0018826:	56                   	push   esi
c0018827:	53                   	push   ebx
c0018828:	83 ec 0c             	sub    esp,0xc
c001882b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001882f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018833:	89 f5                	mov    ebp,esi
c0018835:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001883b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001883f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018843:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018847:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001884b:	83 f9 01             	cmp    ecx,0x1
c001884e:	75 5d                	jne    c00188ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018850:	0f b6 c8             	movzx  ecx,al
c0018853:	0f b6 d2             	movzx  edx,dl
c0018856:	c1 e1 10             	shl    ecx,0x10
c0018859:	c1 e2 0b             	shl    edx,0xb
c001885c:	89 f0                	mov    eax,esi
c001885e:	25 fc 00 00 00       	and    eax,0xfc
c0018863:	09 c1                	or     ecx,eax
c0018865:	89 e8                	mov    eax,ebp
c0018867:	0f b6 c0             	movzx  eax,al
c001886a:	c1 e0 08             	shl    eax,0x8
c001886d:	09 c1                	or     ecx,eax
c001886f:	09 d1                	or     ecx,edx
c0018871:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018876:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001887c:	89 c8                	mov    eax,ecx
c001887e:	ef                   	out    dx,eax
c001887f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018884:	ed                   	in     eax,dx
c0018885:	0f b7 db             	movzx  ebx,bx
c0018888:	83 e6 02             	and    esi,0x2
c001888b:	74 0a                	je     c0018897 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001888d:	0f b7 d0             	movzx  edx,ax
c0018890:	c1 e3 10             	shl    ebx,0x10
c0018893:	09 d3                	or     ebx,edx
c0018895:	eb 05                	jmp    c001889c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018897:	66 31 c0             	xor    ax,ax
c001889a:	09 c3                	or     ebx,eax
c001889c:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188a1:	89 c8                	mov    eax,ecx
c00188a3:	ef                   	out    dx,eax
c00188a4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188a9:	89 d8                	mov    eax,ebx
c00188ab:	eb 41                	jmp    c00188ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188ad:	83 f9 02             	cmp    ecx,0x2
c00188b0:	75 45                	jne    c00188f7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00188b2:	83 ec 0c             	sub    esp,0xc
c00188b5:	0f b6 d2             	movzx  edx,dl
c00188b8:	89 f1                	mov    ecx,esi
c00188ba:	0f b6 c0             	movzx  eax,al
c00188bd:	0f b6 f1             	movzx  esi,cl
c00188c0:	89 e9                	mov    ecx,ebp
c00188c2:	56                   	push   esi
c00188c3:	0f b6 c9             	movzx  ecx,cl
c00188c6:	51                   	push   ecx
c00188c7:	52                   	push   edx
c00188c8:	50                   	push   eax
c00188c9:	57                   	push   edi
c00188ca:	e8 ad fc ff ff       	call   c001857c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188cf:	89 c2                	mov    edx,eax
c00188d1:	ed                   	in     eax,dx
c00188d2:	83 c4 20             	add    esp,0x20
c00188d5:	0f b7 db             	movzx  ebx,bx
c00188d8:	f6 c2 02             	test   dl,0x2
c00188db:	74 0c                	je     c00188e9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00188dd:	0f b7 c8             	movzx  ecx,ax
c00188e0:	89 d8                	mov    eax,ebx
c00188e2:	c1 e0 10             	shl    eax,0x10
c00188e5:	09 c8                	or     eax,ecx
c00188e7:	eb 05                	jmp    c00188ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188e9:	66 31 c0             	xor    ax,ax
c00188ec:	09 d8                	or     eax,ebx
c00188ee:	ef                   	out    dx,eax
c00188ef:	83 c4 0c             	add    esp,0xc
c00188f2:	5b                   	pop    ebx
c00188f3:	5e                   	pop    esi
c00188f4:	5f                   	pop    edi
c00188f5:	5d                   	pop    ebp
c00188f6:	c3                   	ret    
c00188f7:	c7 44 24 20 8b f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f28b
c00188ff:	83 c4 0c             	add    esp,0xc
c0018902:	5b                   	pop    ebx
c0018903:	5e                   	pop    esi
c0018904:	5f                   	pop    edi
c0018905:	5d                   	pop    ebp
c0018906:	e9 84 78 ff ff       	jmp    c001018f <KePanic(char const*)>
c001890b:	90                   	nop

c001890c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001890c:	55                   	push   ebp
c001890d:	57                   	push   edi
c001890e:	56                   	push   esi
c001890f:	53                   	push   ebx
c0018910:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018916:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c001891d:	0f 85 84 00 00 00    	jne    c00189a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018923:	83 ec 0c             	sub    esp,0xc
c0018926:	68 14 01 00 00       	push   0x114
c001892b:	e8 89 ee fe ff       	call   c00077b9 <malloc>
c0018930:	83 c4 0c             	add    esp,0xc
c0018933:	89 c3                	mov    ebx,eax
c0018935:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001893b:	68 91 f2 01 c0       	push   0xc001f291
c0018940:	50                   	push   eax
c0018941:	e8 3e 21 ff ff       	call   c000aa84 <File::File(char const*, Process*)>
c0018946:	5a                   	pop    edx
c0018947:	59                   	pop    ecx
c0018948:	6a 01                	push   0x1
c001894a:	53                   	push   ebx
c001894b:	e8 f4 21 ff ff       	call   c000ab44 <File::open(FileOpenMode)>
c0018950:	83 c4 0c             	add    esp,0xc
c0018953:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018957:	50                   	push   eax
c0018958:	8d 44 24 28          	lea    eax,[esp+0x28]
c001895c:	50                   	push   eax
c001895d:	53                   	push   ebx
c001895e:	e8 8d 24 ff ff       	call   c000adf0 <File::stat(unsigned long long*, bool*)>
c0018963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018967:	40                   	inc    eax
c0018968:	89 04 24             	mov    DWORD PTR [esp],eax
c001896b:	e8 49 ee fe ff       	call   c00077b9 <malloc>
c0018970:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018974:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c0018979:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001897d:	5e                   	pop    esi
c001897e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018980:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018984:	51                   	push   ecx
c0018985:	50                   	push   eax
c0018986:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001898a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001898e:	53                   	push   ebx
c001898f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018992:	83 c4 14             	add    esp,0x14
c0018995:	53                   	push   ebx
c0018996:	e8 07 22 ff ff       	call   c000aba2 <File::close()>
c001899b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c00189a7:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c00189ac:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c00189b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00189b5:	31 ff                	xor    edi,edi
c00189b7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00189bf:	31 f6                	xor    esi,esi
c00189c1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00189c6:	31 db                	xor    ebx,ebx
c00189c8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00189d0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00189d5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00189dc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00189e0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00189e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00189eb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00189ee:	0f 8e 6b 01 00 00    	jle    c0018b5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00189f4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00189f7:	d4 40                	aam    0x40
c00189f9:	d5 39                	aad    0x39
c00189fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189ff:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a03:	d4 40                	aam    0x40
c0018a05:	d5 39                	aad    0x39
c0018a07:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a0b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a0f:	d4 40                	aam    0x40
c0018a11:	d5 39                	aad    0x39
c0018a13:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a17:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a1b:	d4 40                	aam    0x40
c0018a1d:	d5 39                	aad    0x39
c0018a1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a23:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a27:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a2b:	3c 56                	cmp    al,0x56
c0018a2d:	74 45                	je     c0018a74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a2f:	d4 40                	aam    0x40
c0018a31:	d5 39                	aad    0x39
c0018a33:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a36:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a3a:	0f b6 c9             	movzx  ecx,cl
c0018a3d:	c1 e1 04             	shl    ecx,0x4
c0018a40:	d4 40                	aam    0x40
c0018a42:	d5 39                	aad    0x39
c0018a44:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a47:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a4b:	0f b6 db             	movzx  ebx,bl
c0018a4e:	09 cb                	or     ebx,ecx
c0018a50:	c1 e3 04             	shl    ebx,0x4
c0018a53:	d4 40                	aam    0x40
c0018a55:	d5 39                	aad    0x39
c0018a57:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a5a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a5e:	0f b6 c9             	movzx  ecx,cl
c0018a61:	09 cb                	or     ebx,ecx
c0018a63:	c1 e3 04             	shl    ebx,0x4
c0018a66:	89 d9                	mov    ecx,ebx
c0018a68:	d4 40                	aam    0x40
c0018a6a:	d5 39                	aad    0x39
c0018a6c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a6f:	0f b6 db             	movzx  ebx,bl
c0018a72:	09 cb                	or     ebx,ecx
c0018a74:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a78:	80 f9 44             	cmp    cl,0x44
c0018a7b:	74 47                	je     c0018ac4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018a7d:	88 c8                	mov    al,cl
c0018a7f:	d4 40                	aam    0x40
c0018a81:	d5 39                	aad    0x39
c0018a83:	83 e8 30             	sub    eax,0x30
c0018a86:	0f b6 e8             	movzx  ebp,al
c0018a89:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018a8d:	c1 e5 04             	shl    ebp,0x4
c0018a90:	d4 40                	aam    0x40
c0018a92:	d5 39                	aad    0x39
c0018a94:	83 e8 30             	sub    eax,0x30
c0018a97:	0f b6 f0             	movzx  esi,al
c0018a9a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018a9e:	09 ee                	or     esi,ebp
c0018aa0:	c1 e6 04             	shl    esi,0x4
c0018aa3:	d4 40                	aam    0x40
c0018aa5:	d5 39                	aad    0x39
c0018aa7:	83 e8 30             	sub    eax,0x30
c0018aaa:	0f b6 e8             	movzx  ebp,al
c0018aad:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ab1:	09 ee                	or     esi,ebp
c0018ab3:	c1 e6 04             	shl    esi,0x4
c0018ab6:	89 f5                	mov    ebp,esi
c0018ab8:	d4 40                	aam    0x40
c0018aba:	d5 39                	aad    0x39
c0018abc:	83 e8 30             	sub    eax,0x30
c0018abf:	0f b6 f0             	movzx  esi,al
c0018ac2:	09 ee                	or     esi,ebp
c0018ac4:	83 c7 10             	add    edi,0x10
c0018ac7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018acb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018ace:	3c 0a                	cmp    al,0xa
c0018ad0:	74 09                	je     c0018adb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018ad2:	45                   	inc    ebp
c0018ad3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ad6:	75 16                	jne    c0018aee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018ad8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018adb:	3c 0a                	cmp    al,0xa
c0018add:	0f 94 c0             	sete   al
c0018ae0:	0f b6 c0             	movzx  eax,al
c0018ae3:	01 c7                	add    edi,eax
c0018ae5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018aea:	75 0c                	jne    c0018af8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018aec:	eb 15                	jmp    c0018b03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018aee:	47                   	inc    edi
c0018aef:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018af2:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018af6:	eb d3                	jmp    c0018acb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018af8:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018afd:	0f 85 e8 fe ff ff    	jne    c00189eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b03:	80 f9 44             	cmp    cl,0x44
c0018b06:	74 0b                	je     c0018b13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b08:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b0d:	0f 85 d8 fe ff ff    	jne    c00189eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b13:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b17:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b1b:	c1 e1 04             	shl    ecx,0x4
c0018b1e:	83 e8 30             	sub    eax,0x30
c0018b21:	09 c8                	or     eax,ecx
c0018b23:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b27:	0f 85 be fe ff ff    	jne    c00189eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b2d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b35:	c1 e1 04             	shl    ecx,0x4
c0018b38:	83 e8 30             	sub    eax,0x30
c0018b3b:	09 c8                	or     eax,ecx
c0018b3d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b41:	0f 85 a4 fe ff ff    	jne    c00189eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b47:	50                   	push   eax
c0018b48:	50                   	push   eax
c0018b49:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b4d:	50                   	push   eax
c0018b4e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b55:	e8 a6 7a fe ff       	call   c0000600 <strcpy>
c0018b5a:	83 c4 10             	add    esp,0x10
c0018b5d:	eb 15                	jmp    c0018b74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b5f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b66:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b74:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b81:	5b                   	pop    ebx
c0018b82:	5e                   	pop    esi
c0018b83:	5f                   	pop    edi
c0018b84:	5d                   	pop    ebp
c0018b85:	c3                   	ret    

c0018b86 <PCI::checkBus(unsigned char)>:
c0018b86:	56                   	push   esi
c0018b87:	53                   	push   ebx
c0018b88:	31 f6                	xor    esi,esi
c0018b8a:	51                   	push   ecx
c0018b8b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018b8f:	0f b6 c3             	movzx  eax,bl
c0018b92:	52                   	push   edx
c0018b93:	56                   	push   esi
c0018b94:	46                   	inc    esi
c0018b95:	50                   	push   eax
c0018b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b9a:	e8 f3 02 00 00       	call   c0018e92 <PCI::checkDevice(unsigned char, unsigned char)>
c0018b9f:	83 c4 10             	add    esp,0x10
c0018ba2:	83 fe 20             	cmp    esi,0x20
c0018ba5:	75 e8                	jne    c0018b8f <PCI::checkBus(unsigned char)+0x9>
c0018ba7:	58                   	pop    eax
c0018ba8:	5b                   	pop    ebx
c0018ba9:	5e                   	pop    esi
c0018baa:	c3                   	ret    
c0018bab:	90                   	nop

c0018bac <PCI::foundDevice(PCIDeviceInfo)>:
c0018bac:	55                   	push   ebp
c0018bad:	57                   	push   edi
c0018bae:	56                   	push   esi
c0018baf:	53                   	push   ebx
c0018bb0:	83 ec 1c             	sub    esp,0x1c
c0018bb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018bb7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018bbd:	0f 84 52 01 00 00    	je     c0018d15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018bc3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018bc7:	66 81 f9 06 04       	cmp    cx,0x406
c0018bcc:	75 2c                	jne    c0018bfa <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018bce:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018bd3:	50                   	push   eax
c0018bd4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018bd9:	50                   	push   eax
c0018bda:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018bdf:	50                   	push   eax
c0018be0:	56                   	push   esi
c0018be1:	e8 b2 fb ff ff       	call   c0018798 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018be6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018bea:	0f b6 c0             	movzx  eax,al
c0018bed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018bf1:	83 c4 2c             	add    esp,0x2c
c0018bf4:	5b                   	pop    ebx
c0018bf5:	5e                   	pop    esi
c0018bf6:	5f                   	pop    edi
c0018bf7:	5d                   	pop    ebp
c0018bf8:	eb 8c                	jmp    c0018b86 <PCI::checkBus(unsigned char)>
c0018bfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018bfe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c0c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c10:	88 d3                	mov    bl,dl
c0018c12:	85 c0                	test   eax,eax
c0018c14:	74 33                	je     c0018c49 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c19:	85 d2                	test   edx,edx
c0018c1b:	74 28                	je     c0018c45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c1d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c23:	31 ef                	xor    edi,ebp
c0018c25:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c2b:	75 18                	jne    c0018c45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c31:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c37:	75 0c                	jne    c0018c45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c39:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c3f:	0f 84 d0 00 00 00    	je     c0018d15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c47:	eb c9                	jmp    c0018c12 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c49:	66 81 f9 01 06       	cmp    cx,0x601
c0018c4e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c52:	75 19                	jne    c0018c6d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c54:	83 ec 0c             	sub    esp,0xc
c0018c57:	68 64 01 00 00       	push   0x164
c0018c5c:	e8 58 eb fe ff       	call   c00077b9 <malloc>
c0018c61:	89 c5                	mov    ebp,eax
c0018c63:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c66:	e8 47 0e 00 00       	call   c0019ab2 <SATABus::SATABus()>
c0018c6b:	eb 1e                	jmp    c0018c8b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c6d:	66 81 f9 01 01       	cmp    cx,0x101
c0018c72:	75 60                	jne    c0018cd4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c74:	83 ec 0c             	sub    esp,0xc
c0018c77:	68 70 02 00 00       	push   0x270
c0018c7c:	e8 38 eb fe ff       	call   c00077b9 <malloc>
c0018c81:	89 c5                	mov    ebp,eax
c0018c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c86:	e8 cb 02 00 00       	call   c0018f56 <IDE::IDE()>
c0018c8b:	58                   	pop    eax
c0018c8c:	5a                   	pop    edx
c0018c8d:	55                   	push   ebp
c0018c8e:	56                   	push   esi
c0018c8f:	e8 b8 2c ff ff       	call   c000b94c <Device::addChild(Device*)>
c0018c94:	83 ec 1c             	sub    esp,0x1c
c0018c97:	b9 09 00 00 00       	mov    ecx,0x9
c0018c9c:	fc                   	cld    
c0018c9d:	89 e7                	mov    edi,esp
c0018c9f:	89 de                	mov    esi,ebx
c0018ca1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ca3:	55                   	push   ebp
c0018ca4:	e8 e9 2b ff ff       	call   c000b892 <Device::preOpenPCI(PCIDeviceInfo)>
c0018ca9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cac:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018cb0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018cb8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018cc0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018cc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018ccb:	83 c4 4c             	add    esp,0x4c
c0018cce:	5b                   	pop    ebx
c0018ccf:	5e                   	pop    esi
c0018cd0:	5f                   	pop    edi
c0018cd1:	5d                   	pop    ebp
c0018cd2:	ff e0                	jmp    eax
c0018cd4:	83 ec 0c             	sub    esp,0xc
c0018cd7:	68 58 01 00 00       	push   0x158
c0018cdc:	e8 d8 ea fe ff       	call   c00077b9 <malloc>
c0018ce1:	89 c5                	mov    ebp,eax
c0018ce3:	58                   	pop    eax
c0018ce4:	5a                   	pop    edx
c0018ce5:	68 aa f2 01 c0       	push   0xc001f2aa
c0018cea:	55                   	push   ebp
c0018ceb:	e8 fa 2e ff ff       	call   c000bbea <DriverlessDevice::DriverlessDevice(char const*)>
c0018cf0:	59                   	pop    ecx
c0018cf1:	5f                   	pop    edi
c0018cf2:	55                   	push   ebp
c0018cf3:	56                   	push   esi
c0018cf4:	e8 53 2c ff ff       	call   c000b94c <Device::addChild(Device*)>
c0018cf9:	b9 09 00 00 00       	mov    ecx,0x9
c0018cfe:	fc                   	cld    
c0018cff:	89 df                	mov    edi,ebx
c0018d01:	89 de                	mov    esi,ebx
c0018d03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d05:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d09:	83 c4 2c             	add    esp,0x2c
c0018d0c:	5b                   	pop    ebx
c0018d0d:	5e                   	pop    esi
c0018d0e:	5f                   	pop    edi
c0018d0f:	5d                   	pop    ebp
c0018d10:	e9 7d 2b ff ff       	jmp    c000b892 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d15:	83 c4 1c             	add    esp,0x1c
c0018d18:	5b                   	pop    ebx
c0018d19:	5e                   	pop    esi
c0018d1a:	5f                   	pop    edi
c0018d1b:	5d                   	pop    ebp
c0018d1c:	c3                   	ret    
c0018d1d:	90                   	nop

c0018d1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d1e:	55                   	push   ebp
c0018d1f:	57                   	push   edi
c0018d20:	56                   	push   esi
c0018d21:	53                   	push   ebx
c0018d22:	83 ec 68             	sub    esp,0x68
c0018d25:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d29:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d34:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d3b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d44:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d4b:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d54:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d59:	6a 0c                	push   0xc
c0018d5b:	57                   	push   edi
c0018d5c:	53                   	push   ebx
c0018d5d:	56                   	push   esi
c0018d5e:	55                   	push   ebp
c0018d5f:	e8 86 f8 ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d64:	83 c4 20             	add    esp,0x20
c0018d67:	57                   	push   edi
c0018d68:	53                   	push   ebx
c0018d69:	56                   	push   esi
c0018d6a:	55                   	push   ebp
c0018d6b:	e8 6e f9 ff ff       	call   c00186de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d70:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d75:	57                   	push   edi
c0018d76:	53                   	push   ebx
c0018d77:	56                   	push   esi
c0018d78:	55                   	push   ebp
c0018d79:	e8 f6 f9 ff ff       	call   c0018774 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018d7e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018d82:	83 c4 14             	add    esp,0x14
c0018d85:	6a 3c                	push   0x3c
c0018d87:	57                   	push   edi
c0018d88:	53                   	push   ebx
c0018d89:	56                   	push   esi
c0018d8a:	55                   	push   ebp
c0018d8b:	e8 5a f8 ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d90:	0f b6 c4             	movzx  eax,ah
c0018d93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018d97:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018d9b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018d9f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018da4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018daa:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018db0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018db4:	83 c4 20             	add    esp,0x20
c0018db7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018dbc:	74 30                	je     c0018dee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dbe:	31 c0                	xor    eax,eax
c0018dc0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018dc4:	7e 28                	jle    c0018dee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dc6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018dce:	39 cb                	cmp    ebx,ecx
c0018dd0:	75 19                	jne    c0018deb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018dd2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018dda:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018dde:	75 0b                	jne    c0018deb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018de0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018de7:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018deb:	40                   	inc    eax
c0018dec:	eb d2                	jmp    c0018dc0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018dee:	31 d2                	xor    edx,edx
c0018df0:	83 ec 0c             	sub    esp,0xc
c0018df3:	57                   	push   edi
c0018df4:	53                   	push   ebx
c0018df5:	56                   	push   esi
c0018df6:	52                   	push   edx
c0018df7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018dfb:	55                   	push   ebp
c0018dfc:	e8 bf f9 ff ff       	call   c00187c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e05:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e09:	42                   	inc    edx
c0018e0a:	83 c4 20             	add    esp,0x20
c0018e0d:	83 fa 06             	cmp    edx,0x6
c0018e10:	75 de                	jne    c0018df0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e12:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e17:	83 ec 0c             	sub    esp,0xc
c0018e1a:	86 e0                	xchg   al,ah
c0018e1c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e21:	6a 02                	push   0x2
c0018e23:	57                   	push   edi
c0018e24:	53                   	push   ebx
c0018e25:	56                   	push   esi
c0018e26:	55                   	push   ebp
c0018e27:	e8 be f7 ff ff       	call   c00185ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e2c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e31:	83 c4 20             	add    esp,0x20
c0018e34:	57                   	push   edi
c0018e35:	53                   	push   ebx
c0018e36:	56                   	push   esi
c0018e37:	55                   	push   ebp
c0018e38:	e8 eb f8 ff ff       	call   c0018728 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e3d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e41:	57                   	push   edi
c0018e42:	53                   	push   ebx
c0018e43:	56                   	push   esi
c0018e44:	55                   	push   ebp
c0018e45:	e8 48 f8 ff ff       	call   c0018692 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e4a:	b9 09 00 00 00       	mov    ecx,0x9
c0018e4f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e54:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e58:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e5c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e60:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e64:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e68:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e6c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e70:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	fc                   	cld    
c0018e78:	89 e7                	mov    edi,esp
c0018e7a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018e7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e80:	55                   	push   ebp
c0018e81:	e8 26 fd ff ff       	call   c0018bac <PCI::foundDevice(PCIDeviceInfo)>
c0018e86:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018e8c:	5b                   	pop    ebx
c0018e8d:	5e                   	pop    esi
c0018e8e:	5f                   	pop    edi
c0018e8f:	5d                   	pop    ebp
c0018e90:	c3                   	ret    
c0018e91:	90                   	nop

c0018e92 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018e92:	55                   	push   ebp
c0018e93:	57                   	push   edi
c0018e94:	56                   	push   esi
c0018e95:	53                   	push   ebx
c0018e96:	83 ec 0c             	sub    esp,0xc
c0018e99:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018e9d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018ea2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ea7:	6a 00                	push   0x0
c0018ea9:	56                   	push   esi
c0018eaa:	57                   	push   edi
c0018eab:	55                   	push   ebp
c0018eac:	e8 e1 f7 ff ff       	call   c0018692 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018eb1:	6a 00                	push   0x0
c0018eb3:	56                   	push   esi
c0018eb4:	57                   	push   edi
c0018eb5:	55                   	push   ebp
c0018eb6:	e8 63 fe ff ff       	call   c0018d1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ebb:	83 c4 20             	add    esp,0x20
c0018ebe:	6a 00                	push   0x0
c0018ec0:	56                   	push   esi
c0018ec1:	57                   	push   edi
c0018ec2:	55                   	push   ebp
c0018ec3:	e8 ee f7 ff ff       	call   c00186b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ec8:	83 c4 10             	add    esp,0x10
c0018ecb:	84 c0                	test   al,al
c0018ecd:	79 27                	jns    c0018ef6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018ecf:	bb 01 00 00 00       	mov    ebx,0x1
c0018ed4:	53                   	push   ebx
c0018ed5:	56                   	push   esi
c0018ed6:	57                   	push   edi
c0018ed7:	55                   	push   ebp
c0018ed8:	e8 b5 f7 ff ff       	call   c0018692 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	66 40                	inc    ax
c0018ee2:	74 0c                	je     c0018ef0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018ee4:	53                   	push   ebx
c0018ee5:	56                   	push   esi
c0018ee6:	57                   	push   edi
c0018ee7:	55                   	push   ebp
c0018ee8:	e8 31 fe ff ff       	call   c0018d1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	43                   	inc    ebx
c0018ef1:	83 fb 08             	cmp    ebx,0x8
c0018ef4:	75 de                	jne    c0018ed4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018ef6:	83 c4 0c             	add    esp,0xc
c0018ef9:	5b                   	pop    ebx
c0018efa:	5e                   	pop    esi
c0018efb:	5f                   	pop    edi
c0018efc:	5d                   	pop    ebp
c0018efd:	c3                   	ret    

c0018efe <PCI::detect()>:
c0018efe:	56                   	push   esi
c0018eff:	53                   	push   ebx
c0018f00:	53                   	push   ebx
c0018f01:	31 db                	xor    ebx,ebx
c0018f03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f07:	6a 00                	push   0x0
c0018f09:	6a 00                	push   0x0
c0018f0b:	6a 00                	push   0x0
c0018f0d:	56                   	push   esi
c0018f0e:	e8 a3 f7 ff ff       	call   c00186b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f13:	83 c4 10             	add    esp,0x10
c0018f16:	a8 80                	test   al,0x80
c0018f18:	75 21                	jne    c0018f3b <PCI::detect()+0x3d>
c0018f1a:	51                   	push   ecx
c0018f1b:	51                   	push   ecx
c0018f1c:	6a 00                	push   0x0
c0018f1e:	56                   	push   esi
c0018f1f:	e8 62 fc ff ff       	call   c0018b86 <PCI::checkBus(unsigned char)>
c0018f24:	83 c4 10             	add    esp,0x10
c0018f27:	eb 24                	jmp    c0018f4d <PCI::detect()+0x4f>
c0018f29:	52                   	push   edx
c0018f2a:	52                   	push   edx
c0018f2b:	53                   	push   ebx
c0018f2c:	43                   	inc    ebx
c0018f2d:	56                   	push   esi
c0018f2e:	e8 53 fc ff ff       	call   c0018b86 <PCI::checkBus(unsigned char)>
c0018f33:	83 c4 10             	add    esp,0x10
c0018f36:	83 fb 08             	cmp    ebx,0x8
c0018f39:	74 12                	je     c0018f4d <PCI::detect()+0x4f>
c0018f3b:	53                   	push   ebx
c0018f3c:	6a 00                	push   0x0
c0018f3e:	6a 00                	push   0x0
c0018f40:	56                   	push   esi
c0018f41:	e8 4c f7 ff ff       	call   c0018692 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f46:	83 c4 10             	add    esp,0x10
c0018f49:	66 40                	inc    ax
c0018f4b:	74 dc                	je     c0018f29 <PCI::detect()+0x2b>
c0018f4d:	58                   	pop    eax
c0018f4e:	5b                   	pop    ebx
c0018f4f:	5e                   	pop    esi
c0018f50:	c3                   	ret    
c0018f51:	90                   	nop

c0018f52 <IDE::close(int, int, void*)>:
c0018f52:	83 c8 ff             	or     eax,0xffffffff
c0018f55:	c3                   	ret    

c0018f56 <IDE::IDE()>:
c0018f56:	83 ec 0c             	sub    esp,0xc
c0018f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f5d:	83 ec 08             	sub    esp,0x8
c0018f60:	68 f0 f2 01 c0       	push   0xc001f2f0
c0018f65:	50                   	push   eax
c0018f66:	e8 25 2d ff ff       	call   c000bc90 <HardDiskController::HardDiskController(char const*)>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	ba 80 f3 01 c0       	mov    edx,0xc001f380
c0018f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f77:	89 10                	mov    DWORD PTR [eax],edx
c0018f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f7d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018f84:	90                   	nop
c0018f85:	83 c4 0c             	add    esp,0xc
c0018f88:	c3                   	ret    
c0018f89:	90                   	nop

c0018f8a <IDE::prepareInterrupt(unsigned char)>:
c0018f8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f8f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f93:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018f9b:	c3                   	ret    

c0018f9c <selectDrive(unsigned char, unsigned char)>:
c0018f9c:	c3                   	ret    
c0018f9d:	90                   	nop

c0018f9e <IDE::getBase(unsigned char)>:
c0018f9e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018fa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fa7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018faf:	c3                   	ret    

c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018fb0:	55                   	push   ebp
c0018fb1:	57                   	push   edi
c0018fb2:	56                   	push   esi
c0018fb3:	53                   	push   ebx
c0018fb4:	83 ec 1c             	sub    esp,0x1c
c0018fb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018fbb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018fbf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018fc2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018fc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018fca:	80 f9 03             	cmp    cl,0x3
c0018fcd:	77 51                	ja     c0019020 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fd3:	0f b6 f2             	movzx  esi,dl
c0018fd6:	0f b6 db             	movzx  ebx,bl
c0018fd9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018fdc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018fe0:	83 ca 80             	or     edx,0xffffff80
c0018fe3:	0f b6 d2             	movzx  edx,dl
c0018fe6:	52                   	push   edx
c0018fe7:	6a 0c                	push   0xc
c0018fe9:	56                   	push   esi
c0018fea:	57                   	push   edi
c0018feb:	e8 c0 ff ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ff0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018ff5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ff9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018ffd:	ee                   	out    dx,al
c0018ffe:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019003:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019007:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001900b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001900f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019017:	83 c4 2c             	add    esp,0x2c
c001901a:	5b                   	pop    ebx
c001901b:	5e                   	pop    esi
c001901c:	5f                   	pop    edi
c001901d:	5d                   	pop    ebp
c001901e:	eb 90                	jmp    c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019020:	80 fb 07             	cmp    bl,0x7
c0019023:	77 12                	ja     c0019037 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019025:	0f b6 d2             	movzx  edx,dl
c0019028:	0f b6 db             	movzx  ebx,bl
c001902b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019033:	89 da                	mov    edx,ebx
c0019035:	eb 2f                	jmp    c0019066 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019037:	80 fb 0d             	cmp    bl,0xd
c001903a:	77 13                	ja     c001904f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001903c:	0f b6 d2             	movzx  edx,dl
c001903f:	0f b6 db             	movzx  ebx,bl
c0019042:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019049:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001904d:	eb 17                	jmp    c0019066 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001904f:	80 fb 15             	cmp    bl,0x15
c0019052:	77 13                	ja     c0019067 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019054:	0f b6 d2             	movzx  edx,dl
c0019057:	0f b6 db             	movzx  ebx,bl
c001905a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019062:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019066:	ee                   	out    dx,al
c0019067:	83 c4 1c             	add    esp,0x1c
c001906a:	5b                   	pop    ebx
c001906b:	5e                   	pop    esi
c001906c:	5f                   	pop    edi
c001906d:	5d                   	pop    ebp
c001906e:	c3                   	ret    
c001906f:	90                   	nop

c0019070 <IDE::read(unsigned char, unsigned char)>:
c0019070:	55                   	push   ebp
c0019071:	57                   	push   edi
c0019072:	56                   	push   esi
c0019073:	53                   	push   ebx
c0019074:	83 ec 1c             	sub    esp,0x1c
c0019077:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001907b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001907f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019082:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019086:	3c 03                	cmp    al,0x3
c0019088:	77 43                	ja     c00190cd <IDE::read(unsigned char, unsigned char)+0x5d>
c001908a:	0f b6 f2             	movzx  esi,dl
c001908d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019090:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019094:	83 c8 80             	or     eax,0xffffff80
c0019097:	0f b6 c0             	movzx  eax,al
c001909a:	50                   	push   eax
c001909b:	6a 0c                	push   0xc
c001909d:	56                   	push   esi
c001909e:	57                   	push   edi
c001909f:	e8 0c ff ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190a4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00190a9:	0f b6 c3             	movzx  eax,bl
c00190ac:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00190b0:	ec                   	in     al,dx
c00190b1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00190b5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00190ba:	52                   	push   edx
c00190bb:	6a 0c                	push   0xc
c00190bd:	56                   	push   esi
c00190be:	57                   	push   edi
c00190bf:	e8 ec fe ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190c4:	83 c4 20             	add    esp,0x20
c00190c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00190cb:	eb 49                	jmp    c0019116 <IDE::read(unsigned char, unsigned char)+0xa6>
c00190cd:	80 fb 07             	cmp    bl,0x7
c00190d0:	77 12                	ja     c00190e4 <IDE::read(unsigned char, unsigned char)+0x74>
c00190d2:	0f b6 d2             	movzx  edx,dl
c00190d5:	0f b6 c3             	movzx  eax,bl
c00190d8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00190e0:	89 c2                	mov    edx,eax
c00190e2:	eb 31                	jmp    c0019115 <IDE::read(unsigned char, unsigned char)+0xa5>
c00190e4:	80 fb 0d             	cmp    bl,0xd
c00190e7:	77 13                	ja     c00190fc <IDE::read(unsigned char, unsigned char)+0x8c>
c00190e9:	0f b6 d2             	movzx  edx,dl
c00190ec:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00190f3:	0f b6 d3             	movzx  edx,bl
c00190f6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00190fa:	eb 19                	jmp    c0019115 <IDE::read(unsigned char, unsigned char)+0xa5>
c00190fc:	31 c0                	xor    eax,eax
c00190fe:	80 fb 15             	cmp    bl,0x15
c0019101:	77 13                	ja     c0019116 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019103:	0f b6 d2             	movzx  edx,dl
c0019106:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001910e:	0f b6 d3             	movzx  edx,bl
c0019111:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019115:	ec                   	in     al,dx
c0019116:	83 c4 1c             	add    esp,0x1c
c0019119:	5b                   	pop    ebx
c001911a:	5e                   	pop    esi
c001911b:	5f                   	pop    edi
c001911c:	5d                   	pop    ebp
c001911d:	c3                   	ret    

c001911e <IDE::waitInterrupt(unsigned char)>:
c001911e:	57                   	push   edi
c001911f:	56                   	push   esi
c0019120:	31 f6                	xor    esi,esi
c0019122:	53                   	push   ebx
c0019123:	83 ec 10             	sub    esp,0x10
c0019126:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001912a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001912e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019132:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019137:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001913e:	84 db                	test   bl,bl
c0019140:	75 33                	jne    c0019175 <IDE::waitInterrupt(unsigned char)+0x57>
c0019142:	52                   	push   edx
c0019143:	6a 0c                	push   0xc
c0019145:	50                   	push   eax
c0019146:	57                   	push   edi
c0019147:	e8 24 ff ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001914c:	83 c4 10             	add    esp,0x10
c001914f:	a8 01                	test   al,0x1
c0019151:	75 2a                	jne    c001917d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019153:	f7 c6 04 00 00 00    	test   esi,0x4
c0019159:	75 12                	jne    c001916d <IDE::waitInterrupt(unsigned char)+0x4f>
c001915b:	83 fe 32             	cmp    esi,0x32
c001915e:	7e 0d                	jle    c001916d <IDE::waitInterrupt(unsigned char)+0x4f>
c0019160:	83 ec 0c             	sub    esp,0xc
c0019163:	6a 64                	push   0x64
c0019165:	e8 1a a9 ff ff       	call   c0013a84 <milliTenthSleep(unsigned int)>
c001916a:	83 c4 10             	add    esp,0x10
c001916d:	83 fe 3c             	cmp    esi,0x3c
c0019170:	74 0b                	je     c001917d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019172:	46                   	inc    esi
c0019173:	eb bd                	jmp    c0019132 <IDE::waitInterrupt(unsigned char)+0x14>
c0019175:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	88 d8                	mov    al,bl
c0019182:	5b                   	pop    ebx
c0019183:	5e                   	pop    esi
c0019184:	5f                   	pop    edi
c0019185:	c3                   	ret    

c0019186 <ideChannel0IRQHandler(regs*, void*)>:
c0019186:	83 ec 10             	sub    esp,0x10
c0019189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001918d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019194:	6a 07                	push   0x7
c0019196:	6a 00                	push   0x0
c0019198:	50                   	push   eax
c0019199:	e8 d2 fe ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001919e:	83 c4 1c             	add    esp,0x1c
c00191a1:	c3                   	ret    

c00191a2 <ideChannel1IRQHandler(regs*, void*)>:
c00191a2:	83 ec 10             	sub    esp,0x10
c00191a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191a9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00191b0:	6a 07                	push   0x7
c00191b2:	6a 01                	push   0x1
c00191b4:	50                   	push   eax
c00191b5:	e8 b6 fe ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00191ba:	83 c4 1c             	add    esp,0x1c
c00191bd:	c3                   	ret    

c00191be <IDE::enableIRQs(unsigned char, bool)>:
c00191be:	57                   	push   edi
c00191bf:	56                   	push   esi
c00191c0:	be 04 00 00 00       	mov    esi,0x4
c00191c5:	53                   	push   ebx
c00191c6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00191cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191cf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00191d4:	0f 94 c0             	sete   al
c00191d7:	01 c0                	add    eax,eax
c00191d9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00191e0:	0f b6 c0             	movzx  eax,al
c00191e3:	50                   	push   eax
c00191e4:	6a 0c                	push   0xc
c00191e6:	57                   	push   edi
c00191e7:	53                   	push   ebx
c00191e8:	e8 c3 fd ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	50                   	push   eax
c00191f1:	6a 0c                	push   0xc
c00191f3:	57                   	push   edi
c00191f4:	53                   	push   ebx
c00191f5:	e8 76 fe ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00191fa:	83 c4 10             	add    esp,0x10
c00191fd:	4e                   	dec    esi
c00191fe:	75 f0                	jne    c00191f0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019200:	5b                   	pop    ebx
c0019201:	5e                   	pop    esi
c0019202:	5f                   	pop    edi
c0019203:	c3                   	ret    

c0019204 <IDE::open(int, int, void*)>:
c0019204:	55                   	push   ebp
c0019205:	57                   	push   edi
c0019206:	56                   	push   esi
c0019207:	53                   	push   ebx
c0019208:	83 ec 1c             	sub    esp,0x1c
c001920b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001920f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019218:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019221:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019228:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001922f:	0f 85 b0 02 00 00    	jne    c00194e5 <IDE::open(int, int, void*)+0x2e1>
c0019235:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001923b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001923f:	83 e0 7f             	and    eax,0x7f
c0019242:	3c 05                	cmp    al,0x5
c0019244:	74 04                	je     c001924a <IDE::open(int, int, void*)+0x46>
c0019246:	3c 0f                	cmp    al,0xf
c0019248:	75 32                	jne    c001927c <IDE::open(int, int, void*)+0x78>
c001924a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019250:	83 e0 fc             	and    eax,0xfffffffc
c0019253:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001925a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019260:	83 e0 fc             	and    eax,0xfffffffc
c0019263:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001926a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019270:	83 e0 fc             	and    eax,0xfffffffc
c0019273:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001927a:	eb 14                	jmp    c0019290 <IDE::open(int, int, void*)+0x8c>
c001927c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019286:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019290:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019297:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001929e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192a2:	89 c6                	mov    esi,eax
c00192a4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00192a9:	c1 e6 10             	shl    esi,0x10
c00192ac:	89 e8                	mov    eax,ebp
c00192ae:	89 fa                	mov    edx,edi
c00192b0:	c1 e0 0b             	shl    eax,0xb
c00192b3:	09 f0                	or     eax,esi
c00192b5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00192bc:	c1 e6 08             	shl    esi,0x8
c00192bf:	09 c6                	or     esi,eax
c00192c1:	89 f0                	mov    eax,esi
c00192c3:	0d 08 00 00 80       	or     eax,0x80000008
c00192c8:	ef                   	out    dx,eax
c00192c9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00192ce:	89 ca                	mov    edx,ecx
c00192d0:	ed                   	in     eax,dx
c00192d1:	c1 e8 10             	shr    eax,0x10
c00192d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00192d9:	0f 84 f5 00 00 00    	je     c00193d4 <IDE::open(int, int, void*)+0x1d0>
c00192df:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00192e5:	89 fa                	mov    edx,edi
c00192e7:	89 f0                	mov    eax,esi
c00192e9:	ef                   	out    dx,eax
c00192ea:	b0 fe                	mov    al,0xfe
c00192ec:	89 ca                	mov    edx,ecx
c00192ee:	ee                   	out    dx,al
c00192ef:	89 f0                	mov    eax,esi
c00192f1:	89 fa                	mov    edx,edi
c00192f3:	ef                   	out    dx,eax
c00192f4:	89 ca                	mov    edx,ecx
c00192f6:	ed                   	in     eax,dx
c00192f7:	3c fe                	cmp    al,0xfe
c00192f9:	0f 85 a9 00 00 00    	jne    c00193a8 <IDE::open(int, int, void*)+0x1a4>
c00192ff:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019305:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001930c:	74 33                	je     c0019341 <IDE::open(int, int, void*)+0x13d>
c001930e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019314:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019318:	40                   	inc    eax
c0019319:	83 ec 0c             	sub    esp,0xc
c001931c:	0f b6 c0             	movzx  eax,al
c001931f:	50                   	push   eax
c0019320:	55                   	push   ebp
c0019321:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019325:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001932b:	51                   	push   ecx
c001932c:	e8 77 53 ff ff       	call   c000e6a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019331:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019336:	83 c4 1c             	add    esp,0x1c
c0019339:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001933f:	eb 0a                	jmp    c001934b <IDE::open(int, int, void*)+0x147>
c0019341:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001934b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019352:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019359:	c1 e1 10             	shl    ecx,0x10
c001935c:	c1 e0 08             	shl    eax,0x8
c001935f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019364:	09 c1                	or     ecx,eax
c0019366:	89 fa                	mov    edx,edi
c0019368:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001936f:	c1 e0 0b             	shl    eax,0xb
c0019372:	09 c1                	or     ecx,eax
c0019374:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001937a:	89 c8                	mov    eax,ecx
c001937c:	ef                   	out    dx,eax
c001937d:	be fc 0c 00 00       	mov    esi,0xcfc
c0019382:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019388:	89 f2                	mov    edx,esi
c001938a:	ee                   	out    dx,al
c001938b:	89 c8                	mov    eax,ecx
c001938d:	89 fa                	mov    edx,edi
c001938f:	ef                   	out    dx,eax
c0019390:	89 f2                	mov    edx,esi
c0019392:	ed                   	in     eax,dx
c0019393:	0f b6 c0             	movzx  eax,al
c0019396:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001939c:	74 46                	je     c00193e4 <IDE::open(int, int, void*)+0x1e0>
c001939e:	83 ec 0c             	sub    esp,0xc
c00193a1:	68 08 f3 01 c0       	push   0xc001f308
c00193a6:	eb 34                	jmp    c00193dc <IDE::open(int, int, void*)+0x1d8>
c00193a8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00193b1:	75 17                	jne    c00193ca <IDE::open(int, int, void*)+0x1c6>
c00193b3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00193b8:	74 07                	je     c00193c1 <IDE::open(int, int, void*)+0x1bd>
c00193ba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00193bf:	75 09                	jne    c00193ca <IDE::open(int, int, void*)+0x1c6>
c00193c1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00193c8:	eb 1a                	jmp    c00193e4 <IDE::open(int, int, void*)+0x1e0>
c00193ca:	83 ec 0c             	sub    esp,0xc
c00193cd:	68 10 f3 01 c0       	push   0xc001f310
c00193d2:	eb 08                	jmp    c00193dc <IDE::open(int, int, void*)+0x1d8>
c00193d4:	83 ec 0c             	sub    esp,0xc
c00193d7:	68 41 f3 01 c0       	push   0xc001f341
c00193dc:	e8 ae 6d ff ff       	call   c001018f <KePanic(char const*)>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00193eb:	79 1a                	jns    c0019407 <IDE::open(int, int, void*)+0x203>
c00193ed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00193f3:	83 e0 fc             	and    eax,0xfffffffc
c00193f6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00193fd:	83 c0 08             	add    eax,0x8
c0019400:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019407:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001940d:	89 c2                	mov    edx,eax
c001940f:	83 e2 0f             	and    edx,0xf
c0019412:	66 83 fa 08          	cmp    dx,0x8
c0019416:	75 0a                	jne    c0019422 <IDE::open(int, int, void*)+0x21e>
c0019418:	83 e8 02             	sub    eax,0x2
c001941b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019422:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019428:	89 c2                	mov    edx,eax
c001942a:	83 e2 0f             	and    edx,0xf
c001942d:	66 83 fa 08          	cmp    dx,0x8
c0019431:	75 0a                	jne    c001943d <IDE::open(int, int, void*)+0x239>
c0019433:	83 e8 02             	sub    eax,0x2
c0019436:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001943d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019444:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001944b:	89 d0                	mov    eax,edx
c001944d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019450:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019454:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019458:	8d 4a 01             	lea    ecx,[edx+0x1]
c001945b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019460:	0f b6 c9             	movzx  ecx,cl
c0019463:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001946a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001946d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019471:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019475:	8d 50 02             	lea    edx,[eax+0x2]
c0019478:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001947d:	0f b6 d2             	movzx  edx,dl
c0019480:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019486:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019489:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001948d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019491:	8d 48 03             	lea    ecx,[eax+0x3]
c0019494:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019499:	0f b6 c9             	movzx  ecx,cl
c001949c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00194a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194a9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00194ad:	8d 50 04             	lea    edx,[eax+0x4]
c00194b0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00194b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194bb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00194c2:	66 85 f6             	test   si,si
c00194c5:	74 5b                	je     c0019522 <IDE::open(int, int, void*)+0x31e>
c00194c7:	0f b6 d2             	movzx  edx,dl
c00194ca:	83 c0 05             	add    eax,0x5
c00194cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194d4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00194d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194e3:	eb 3d                	jmp    c0019522 <IDE::open(int, int, void*)+0x31e>
c00194e5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00194eb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194f2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00194f9:	66 05 06 02          	add    ax,0x206
c00194fd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019504:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001950b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019512:	66 05 06 02          	add    ax,0x206
c0019516:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001951d:	e9 e5 fe ff ff       	jmp    c0019407 <IDE::open(int, int, void*)+0x203>
c0019522:	50                   	push   eax
c0019523:	50                   	push   eax
c0019524:	6a 00                	push   0x0
c0019526:	53                   	push   ebx
c0019527:	e8 5e fa ff ff       	call   c0018f8a <IDE::prepareInterrupt(unsigned char)>
c001952c:	5a                   	pop    edx
c001952d:	59                   	pop    ecx
c001952e:	6a 01                	push   0x1
c0019530:	53                   	push   ebx
c0019531:	e8 54 fa ff ff       	call   c0018f8a <IDE::prepareInterrupt(unsigned char)>
c0019536:	83 c4 0c             	add    esp,0xc
c0019539:	6a 00                	push   0x0
c001953b:	6a 00                	push   0x0
c001953d:	53                   	push   ebx
c001953e:	e8 7b fc ff ff       	call   c00191be <IDE::enableIRQs(unsigned char, bool)>
c0019543:	83 c4 0c             	add    esp,0xc
c0019546:	6a 00                	push   0x0
c0019548:	6a 01                	push   0x1
c001954a:	53                   	push   ebx
c001954b:	e8 6e fc ff ff       	call   c00191be <IDE::enableIRQs(unsigned char, bool)>
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001955a:	74 34                	je     c0019590 <IDE::open(int, int, void*)+0x38c>
c001955c:	83 ec 0c             	sub    esp,0xc
c001955f:	53                   	push   ebx
c0019560:	6a 01                	push   0x1
c0019562:	68 86 91 01 c0       	push   0xc0019186
c0019567:	6a 0e                	push   0xe
c0019569:	53                   	push   ebx
c001956a:	e8 89 23 ff ff       	call   c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001956f:	83 c4 14             	add    esp,0x14
c0019572:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019578:	53                   	push   ebx
c0019579:	6a 01                	push   0x1
c001957b:	68 a2 91 01 c0       	push   0xc00191a2
c0019580:	6a 0f                	push   0xf
c0019582:	53                   	push   ebx
c0019583:	e8 70 23 ff ff       	call   c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019588:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001958e:	eb 38                	jmp    c00195c8 <IDE::open(int, int, void*)+0x3c4>
c0019590:	83 ec 0c             	sub    esp,0xc
c0019593:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001959d:	53                   	push   ebx
c001959e:	6a 00                	push   0x0
c00195a0:	68 86 91 01 c0       	push   0xc0019186
c00195a5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00195ab:	53                   	push   ebx
c00195ac:	e8 47 23 ff ff       	call   c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195b1:	83 c4 14             	add    esp,0x14
c00195b4:	53                   	push   ebx
c00195b5:	6a 00                	push   0x0
c00195b7:	68 a2 91 01 c0       	push   0xc00191a2
c00195bc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00195c2:	53                   	push   ebx
c00195c3:	e8 30 23 ff ff       	call   c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195ca:	83 c4 20             	add    esp,0x20
c00195cd:	83 ec 0c             	sub    esp,0xc
c00195d0:	53                   	push   ebx
c00195d1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00195d4:	83 c4 0c             	add    esp,0xc
c00195d7:	6a 07                	push   0x7
c00195d9:	6a 00                	push   0x0
c00195db:	53                   	push   ebx
c00195dc:	e8 8f fa ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00195e1:	83 c4 0c             	add    esp,0xc
c00195e4:	6a 07                	push   0x7
c00195e6:	6a 01                	push   0x1
c00195e8:	53                   	push   ebx
c00195e9:	e8 82 fa ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00195ee:	83 c4 0c             	add    esp,0xc
c00195f1:	6a 01                	push   0x1
c00195f3:	6a 00                	push   0x0
c00195f5:	53                   	push   ebx
c00195f6:	e8 c3 fb ff ff       	call   c00191be <IDE::enableIRQs(unsigned char, bool)>
c00195fb:	83 c4 0c             	add    esp,0xc
c00195fe:	6a 01                	push   0x1
c0019600:	6a 01                	push   0x1
c0019602:	53                   	push   ebx
c0019603:	e8 b6 fb ff ff       	call   c00191be <IDE::enableIRQs(unsigned char, bool)>
c0019608:	83 c4 2c             	add    esp,0x2c
c001960b:	31 c0                	xor    eax,eax
c001960d:	5b                   	pop    ebx
c001960e:	5e                   	pop    esi
c001960f:	5f                   	pop    edi
c0019610:	5d                   	pop    ebp
c0019611:	c3                   	ret    

c0019612 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019612:	55                   	push   ebp
c0019613:	57                   	push   edi
c0019614:	56                   	push   esi
c0019615:	53                   	push   ebx
c0019616:	83 ec 1c             	sub    esp,0x1c
c0019619:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001961d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019621:	8d 50 f8             	lea    edx,[eax-0x8]
c0019624:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019628:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001962c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019630:	80 fa 03             	cmp    dl,0x3
c0019633:	77 5d                	ja     c0019692 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019635:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019639:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001963d:	0f b6 db             	movzx  ebx,bl
c0019640:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019643:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019647:	83 ca 80             	or     edx,0xffffff80
c001964a:	0f b6 d2             	movzx  edx,dl
c001964d:	52                   	push   edx
c001964e:	6a 0c                	push   0xc
c0019650:	53                   	push   ebx
c0019651:	56                   	push   esi
c0019652:	e8 59 f9 ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019657:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001965c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019660:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019664:	0f b6 c0             	movzx  eax,al
c0019667:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001966b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001966d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019672:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019676:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001967a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001967e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019686:	83 c4 2c             	add    esp,0x2c
c0019689:	5b                   	pop    ebx
c001968a:	5e                   	pop    esi
c001968b:	5f                   	pop    edi
c001968c:	5d                   	pop    ebp
c001968d:	e9 1e f9 ff ff       	jmp    c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019692:	3c 07                	cmp    al,0x7
c0019694:	77 10                	ja     c00196a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019696:	0f b6 db             	movzx  ebx,bl
c0019699:	0f b6 d0             	movzx  edx,al
c001969c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00196a4:	eb 2d                	jmp    c00196d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196a6:	3c 0d                	cmp    al,0xd
c00196a8:	77 13                	ja     c00196bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00196aa:	0f b6 db             	movzx  ebx,bl
c00196ad:	0f b6 c0             	movzx  eax,al
c00196b0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00196b7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00196bb:	eb 16                	jmp    c00196d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196bd:	3c 15                	cmp    al,0x15
c00196bf:	77 14                	ja     c00196d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00196c1:	0f b6 db             	movzx  ebx,bl
c00196c4:	0f b6 c0             	movzx  eax,al
c00196c7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00196cf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00196d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196d5:	83 c4 1c             	add    esp,0x1c
c00196d8:	5b                   	pop    ebx
c00196d9:	5e                   	pop    esi
c00196da:	5f                   	pop    edi
c00196db:	5d                   	pop    ebp
c00196dc:	c3                   	ret    
c00196dd:	90                   	nop

c00196de <IDE::detect()>:
c00196de:	55                   	push   ebp
c00196df:	57                   	push   edi
c00196e0:	56                   	push   esi
c00196e1:	53                   	push   ebx
c00196e2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00196e8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00196ef:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00196f6:	0f 85 97 02 00 00    	jne    c0019993 <IDE::detect()+0x2b5>
c00196fc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019703:	31 f6                	xor    esi,esi
c0019705:	31 ed                	xor    ebp,ebp
c0019707:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001970f:	89 e8                	mov    eax,ebp
c0019711:	c1 e0 06             	shl    eax,0x6
c0019714:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001971c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019720:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019724:	c1 e0 04             	shl    eax,0x4
c0019727:	83 c8 a0             	or     eax,0xffffffa0
c001972a:	0f b6 c0             	movzx  eax,al
c001972d:	50                   	push   eax
c001972e:	6a 06                	push   0x6
c0019730:	56                   	push   esi
c0019731:	53                   	push   ebx
c0019732:	e8 79 f8 ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019737:	83 c4 0c             	add    esp,0xc
c001973a:	6a 0c                	push   0xc
c001973c:	56                   	push   esi
c001973d:	53                   	push   ebx
c001973e:	e8 2d f9 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019743:	83 c4 0c             	add    esp,0xc
c0019746:	6a 0c                	push   0xc
c0019748:	56                   	push   esi
c0019749:	53                   	push   ebx
c001974a:	e8 21 f9 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001974f:	83 c4 0c             	add    esp,0xc
c0019752:	6a 0c                	push   0xc
c0019754:	56                   	push   esi
c0019755:	53                   	push   ebx
c0019756:	e8 15 f9 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001975b:	83 c4 0c             	add    esp,0xc
c001975e:	6a 0c                	push   0xc
c0019760:	56                   	push   esi
c0019761:	53                   	push   ebx
c0019762:	e8 09 f9 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019767:	68 ec 00 00 00       	push   0xec
c001976c:	6a 07                	push   0x7
c001976e:	56                   	push   esi
c001976f:	53                   	push   ebx
c0019770:	e8 3b f8 ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019775:	83 c4 1c             	add    esp,0x1c
c0019778:	6a 0c                	push   0xc
c001977a:	56                   	push   esi
c001977b:	53                   	push   ebx
c001977c:	e8 ef f8 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019781:	83 c4 0c             	add    esp,0xc
c0019784:	6a 0c                	push   0xc
c0019786:	56                   	push   esi
c0019787:	53                   	push   ebx
c0019788:	e8 e3 f8 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001978d:	83 c4 0c             	add    esp,0xc
c0019790:	6a 0c                	push   0xc
c0019792:	56                   	push   esi
c0019793:	53                   	push   ebx
c0019794:	e8 d7 f8 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019799:	83 c4 0c             	add    esp,0xc
c001979c:	6a 0c                	push   0xc
c001979e:	56                   	push   esi
c001979f:	53                   	push   ebx
c00197a0:	e8 cb f8 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00197a5:	83 c4 0c             	add    esp,0xc
c00197a8:	6a 0c                	push   0xc
c00197aa:	56                   	push   esi
c00197ab:	53                   	push   ebx
c00197ac:	e8 bf f8 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00197b1:	83 c4 10             	add    esp,0x10
c00197b4:	84 c0                	test   al,al
c00197b6:	0f 84 5f 01 00 00    	je     c001991b <IDE::detect()+0x23d>
c00197bc:	31 ff                	xor    edi,edi
c00197be:	50                   	push   eax
c00197bf:	6a 0c                	push   0xc
c00197c1:	56                   	push   esi
c00197c2:	53                   	push   ebx
c00197c3:	e8 a8 f8 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	a8 01                	test   al,0x1
c00197cd:	0f 85 69 01 00 00    	jne    c001993c <IDE::detect()+0x25e>
c00197d3:	84 c0                	test   al,al
c00197d5:	78 04                	js     c00197db <IDE::detect()+0xfd>
c00197d7:	a8 08                	test   al,0x8
c00197d9:	75 23                	jne    c00197fe <IDE::detect()+0x120>
c00197db:	47                   	inc    edi
c00197dc:	81 ff 17 01 00 00    	cmp    edi,0x117
c00197e2:	7e da                	jle    c00197be <IDE::detect()+0xe0>
c00197e4:	83 ec 0c             	sub    esp,0xc
c00197e7:	6a 32                	push   0x32
c00197e9:	e8 96 a2 ff ff       	call   c0013a84 <milliTenthSleep(unsigned int)>
c00197ee:	83 c4 10             	add    esp,0x10
c00197f1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00197f7:	75 c5                	jne    c00197be <IDE::detect()+0xe0>
c00197f9:	e9 3e 01 00 00       	jmp    c001993c <IDE::detect()+0x25e>
c00197fe:	31 c9                	xor    ecx,ecx
c0019800:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019804:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019808:	83 ec 0c             	sub    esp,0xc
c001980b:	68 80 00 00 00       	push   0x80
c0019810:	57                   	push   edi
c0019811:	6a 00                	push   0x0
c0019813:	56                   	push   esi
c0019814:	53                   	push   ebx
c0019815:	e8 f8 fd ff ff       	call   c0019612 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001981a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001981f:	89 e8                	mov    eax,ebp
c0019821:	89 d1                	mov    ecx,edx
c0019823:	c1 e0 06             	shl    eax,0x6
c0019826:	01 d8                	add    eax,ebx
c0019828:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001982f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019836:	89 f2                	mov    edx,esi
c0019838:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001983e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019842:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019848:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001984c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019853:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001985b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019862:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001986a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019870:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019877:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001987d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019881:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019885:	83 c4 20             	add    esp,0x20
c0019888:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001988b:	83 c0 02             	add    eax,0x2
c001988e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019894:	83 c7 02             	add    edi,0x2
c0019897:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001989a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00198a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00198a4:	75 e2                	jne    c0019888 <IDE::detect()+0x1aa>
c00198a6:	89 e8                	mov    eax,ebp
c00198a8:	c1 e0 06             	shl    eax,0x6
c00198ab:	01 d8                	add    eax,ebx
c00198ad:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00198b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00198ba:	66 c1 ea 09          	shr    dx,0x9
c00198be:	83 e2 01             	and    edx,0x1
c00198c1:	84 c9                	test   cl,cl
c00198c3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00198c9:	75 22                	jne    c00198ed <IDE::detect()+0x20f>
c00198cb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00198d2:	74 46                	je     c001991a <IDE::detect()+0x23c>
c00198d4:	83 ec 0c             	sub    esp,0xc
c00198d7:	68 7c 01 00 00       	push   0x17c
c00198dc:	e8 d8 de fe ff       	call   c00077b9 <malloc>
c00198e1:	89 c7                	mov    edi,eax
c00198e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00198e6:	e8 11 05 00 00       	call   c0019dfc <ATA::ATA()>
c00198eb:	eb 17                	jmp    c0019904 <IDE::detect()+0x226>
c00198ed:	83 ec 0c             	sub    esp,0xc
c00198f0:	68 84 01 00 00       	push   0x184
c00198f5:	e8 bf de fe ff       	call   c00077b9 <malloc>
c00198fa:	89 c7                	mov    edi,eax
c00198fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00198ff:	e8 f0 0a 00 00       	call   c001a3f4 <ATAPI::ATAPI()>
c0019904:	5a                   	pop    edx
c0019905:	59                   	pop    ecx
c0019906:	57                   	push   edi
c0019907:	53                   	push   ebx
c0019908:	e8 3f 20 ff ff       	call   c000b94c <Device::addChild(Device*)>
c001990d:	8b 07                	mov    eax,DWORD PTR [edi]
c001990f:	53                   	push   ebx
c0019910:	55                   	push   ebp
c0019911:	6a 00                	push   0x0
c0019913:	57                   	push   edi
c0019914:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019917:	83 c4 20             	add    esp,0x20
c001991a:	45                   	inc    ebp
c001991b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019920:	74 0d                	je     c001992f <IDE::detect()+0x251>
c0019922:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001992a:	e9 e0 fd ff ff       	jmp    c001970f <IDE::detect()+0x31>
c001992f:	4e                   	dec    esi
c0019930:	74 61                	je     c0019993 <IDE::detect()+0x2b5>
c0019932:	be 01 00 00 00       	mov    esi,0x1
c0019937:	e9 cb fd ff ff       	jmp    c0019707 <IDE::detect()+0x29>
c001993c:	50                   	push   eax
c001993d:	6a 04                	push   0x4
c001993f:	56                   	push   esi
c0019940:	53                   	push   ebx
c0019941:	e8 2a f7 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019946:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001994a:	83 c4 0c             	add    esp,0xc
c001994d:	6a 05                	push   0x5
c001994f:	56                   	push   esi
c0019950:	53                   	push   ebx
c0019951:	e8 1a f7 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019956:	83 c4 10             	add    esp,0x10
c0019959:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001995d:	80 fa 14             	cmp    dl,0x14
c0019960:	75 04                	jne    c0019966 <IDE::detect()+0x288>
c0019962:	3c eb                	cmp    al,0xeb
c0019964:	eb 07                	jmp    c001996d <IDE::detect()+0x28f>
c0019966:	3c 96                	cmp    al,0x96
c0019968:	75 b1                	jne    c001991b <IDE::detect()+0x23d>
c001996a:	80 fa 69             	cmp    dl,0x69
c001996d:	75 ac                	jne    c001991b <IDE::detect()+0x23d>
c001996f:	68 a1 00 00 00       	push   0xa1
c0019974:	6a 07                	push   0x7
c0019976:	56                   	push   esi
c0019977:	53                   	push   ebx
c0019978:	e8 33 f6 ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001997d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019984:	e8 fb a0 ff ff       	call   c0013a84 <milliTenthSleep(unsigned int)>
c0019989:	83 c4 10             	add    esp,0x10
c001998c:	b1 01                	mov    cl,0x1
c001998e:	e9 6d fe ff ff       	jmp    c0019800 <IDE::detect()+0x122>
c0019993:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019999:	5b                   	pop    ebx
c001999a:	5e                   	pop    esi
c001999b:	5f                   	pop    edi
c001999c:	5d                   	pop    ebp
c001999d:	c3                   	ret    

c001999e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001999e:	55                   	push   ebp
c001999f:	57                   	push   edi
c00199a0:	56                   	push   esi
c00199a1:	53                   	push   ebx
c00199a2:	83 ec 1c             	sub    esp,0x1c
c00199a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00199b1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00199b5:	88 c3                	mov    bl,al
c00199b7:	84 c0                	test   al,al
c00199b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199bd:	0f 84 81 00 00 00    	je     c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199c3:	83 ec 0c             	sub    esp,0xc
c00199c6:	68 6b f3 01 c0       	push   0xc001f36b
c00199cb:	e8 3f 0b ff ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c00199d0:	83 c4 10             	add    esp,0x10
c00199d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199d7:	3c 01                	cmp    al,0x1
c00199d9:	74 63                	je     c0019a3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00199db:	3c 02                	cmp    al,0x2
c00199dd:	75 53                	jne    c0019a32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00199df:	01 f6                	add    esi,esi
c00199e1:	09 ee                	or     esi,ebp
c00199e3:	50                   	push   eax
c00199e4:	89 f0                	mov    eax,esi
c00199e6:	6a 01                	push   0x1
c00199e8:	0f b6 f0             	movzx  esi,al
c00199eb:	c1 e6 06             	shl    esi,0x6
c00199ee:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00199f6:	50                   	push   eax
c00199f7:	57                   	push   edi
c00199f8:	e8 73 f6 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	a8 01                	test   al,0x1
c0019a02:	74 02                	je     c0019a06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a04:	b3 07                	mov    bl,0x7
c0019a06:	a8 02                	test   al,0x2
c0019a08:	74 02                	je     c0019a0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a0a:	b3 03                	mov    bl,0x3
c0019a0c:	a8 04                	test   al,0x4
c0019a0e:	74 02                	je     c0019a12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a10:	b3 14                	mov    bl,0x14
c0019a12:	a8 08                	test   al,0x8
c0019a14:	74 02                	je     c0019a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a16:	b3 03                	mov    bl,0x3
c0019a18:	a8 10                	test   al,0x10
c0019a1a:	74 02                	je     c0019a1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a1c:	b3 15                	mov    bl,0x15
c0019a1e:	a8 20                	test   al,0x20
c0019a20:	74 02                	je     c0019a24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a22:	b3 03                	mov    bl,0x3
c0019a24:	a8 40                	test   al,0x40
c0019a26:	74 02                	je     c0019a2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a28:	b3 16                	mov    bl,0x16
c0019a2a:	84 c0                	test   al,al
c0019a2c:	79 16                	jns    c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a2e:	b3 0d                	mov    bl,0xd
c0019a30:	eb 12                	jmp    c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a32:	3c 03                	cmp    al,0x3
c0019a34:	74 0c                	je     c0019a42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a36:	3c 04                	cmp    al,0x4
c0019a38:	75 0a                	jne    c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a3a:	b3 08                	mov    bl,0x8
c0019a3c:	eb 06                	jmp    c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a3e:	b3 13                	mov    bl,0x13
c0019a40:	eb 02                	jmp    c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a42:	b3 17                	mov    bl,0x17
c0019a44:	83 c4 1c             	add    esp,0x1c
c0019a47:	88 d8                	mov    al,bl
c0019a49:	5b                   	pop    ebx
c0019a4a:	5e                   	pop    esi
c0019a4b:	5f                   	pop    edi
c0019a4c:	5d                   	pop    ebp
c0019a4d:	c3                   	ret    

c0019a4e <IDE::polling(unsigned char, unsigned int)>:
c0019a4e:	55                   	push   ebp
c0019a4f:	bd 04 00 00 00       	mov    ebp,0x4
c0019a54:	57                   	push   edi
c0019a55:	56                   	push   esi
c0019a56:	53                   	push   ebx
c0019a57:	83 ec 0c             	sub    esp,0xc
c0019a5a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a5e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a62:	0f b6 f3             	movzx  esi,bl
c0019a65:	52                   	push   edx
c0019a66:	6a 0c                	push   0xc
c0019a68:	56                   	push   esi
c0019a69:	57                   	push   edi
c0019a6a:	e8 01 f6 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019a6f:	83 c4 10             	add    esp,0x10
c0019a72:	4d                   	dec    ebp
c0019a73:	75 ed                	jne    c0019a62 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a75:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a7a:	50                   	push   eax
c0019a7b:	6a 0c                	push   0xc
c0019a7d:	56                   	push   esi
c0019a7e:	57                   	push   edi
c0019a7f:	e8 ec f5 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	a8 01                	test   al,0x1
c0019a89:	75 17                	jne    c0019aa2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a8b:	a8 20                	test   al,0x20
c0019a8d:	75 0f                	jne    c0019a9e <IDE::polling(unsigned char, unsigned int)+0x50>
c0019a8f:	4b                   	dec    ebx
c0019a90:	74 10                	je     c0019aa2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a92:	84 c0                	test   al,al
c0019a94:	78 e4                	js     c0019a7a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019a96:	a8 08                	test   al,0x8
c0019a98:	74 e0                	je     c0019a7a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019a9a:	31 c0                	xor    eax,eax
c0019a9c:	eb 06                	jmp    c0019aa4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019a9e:	b0 01                	mov    al,0x1
c0019aa0:	eb 02                	jmp    c0019aa4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019aa2:	b0 02                	mov    al,0x2
c0019aa4:	83 c4 0c             	add    esp,0xc
c0019aa7:	5b                   	pop    ebx
c0019aa8:	5e                   	pop    esi
c0019aa9:	5f                   	pop    edi
c0019aaa:	5d                   	pop    ebp
c0019aab:	c3                   	ret    

c0019aac <SATABus::close(int, int, void*)>:
c0019aac:	31 c0                	xor    eax,eax
c0019aae:	c3                   	ret    
c0019aaf:	90                   	nop

c0019ab0 <SATABus::detect()>:
c0019ab0:	c3                   	ret    
c0019ab1:	90                   	nop

c0019ab2 <SATABus::SATABus()>:
c0019ab2:	83 ec 0c             	sub    esp,0xc
c0019ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab9:	83 ec 08             	sub    esp,0x8
c0019abc:	68 a4 f3 01 c0       	push   0xc001f3a4
c0019ac1:	50                   	push   eax
c0019ac2:	e8 c9 21 ff ff       	call   c000bc90 <HardDiskController::HardDiskController(char const*)>
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	ba d0 f3 01 c0       	mov    edx,0xc001f3d0
c0019acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ad3:	89 10                	mov    DWORD PTR [eax],edx
c0019ad5:	83 ec 0c             	sub    esp,0xc
c0019ad8:	6a 50                	push   0x50
c0019ada:	e8 74 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019adf:	83 c4 10             	add    esp,0x10
c0019ae2:	89 c2                	mov    edx,eax
c0019ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ae8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019aee:	83 ec 0c             	sub    esp,0xc
c0019af1:	6a 50                	push   0x50
c0019af3:	e8 8d f7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019af8:	83 c4 10             	add    esp,0x10
c0019afb:	89 c2                	mov    edx,eax
c0019afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b01:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b07:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b10:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b1a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b20:	83 ec 0c             	sub    esp,0xc
c0019b23:	6a 03                	push   0x3
c0019b25:	6a 50                	push   0x50
c0019b27:	51                   	push   ecx
c0019b28:	52                   	push   edx
c0019b29:	50                   	push   eax
c0019b2a:	e8 e5 00 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b2f:	83 c4 20             	add    esp,0x20
c0019b32:	90                   	nop
c0019b33:	83 c4 0c             	add    esp,0xc
c0019b36:	c3                   	ret    
c0019b37:	90                   	nop

c0019b38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b3c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b3f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b42:	09 c2                	or     edx,eax
c0019b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b50:	31 c0                	xor    eax,eax
c0019b52:	c1 e9 08             	shr    ecx,0x8
c0019b55:	83 e1 0f             	and    ecx,0xf
c0019b58:	39 c8                	cmp    eax,ecx
c0019b5a:	74 0a                	je     c0019b66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b5c:	f6 c2 01             	test   dl,0x1
c0019b5f:	74 08                	je     c0019b69 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b61:	d1 ea                	shr    edx,1
c0019b63:	40                   	inc    eax
c0019b64:	eb f2                	jmp    c0019b58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b66:	83 c8 ff             	or     eax,0xffffffff
c0019b69:	c3                   	ret    

c0019b6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b6e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b71:	89 c2                	mov    edx,eax
c0019b73:	c1 ea 08             	shr    edx,0x8
c0019b76:	83 e2 0f             	and    edx,0xf
c0019b79:	fe ca                	dec    dl
c0019b7b:	75 31                	jne    c0019bae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b7d:	83 e0 0f             	and    eax,0xf
c0019b80:	3c 03                	cmp    al,0x3
c0019b82:	75 2a                	jne    c0019bae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b84:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019b87:	b8 02 00 00 00       	mov    eax,0x2
c0019b8c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019b92:	74 1c                	je     c0019bb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019b94:	b8 04 00 00 00       	mov    eax,0x4
c0019b99:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019b9f:	74 0f                	je     c0019bb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ba1:	31 c0                	xor    eax,eax
c0019ba3:	83 fa 03             	cmp    edx,0x3
c0019ba6:	0f 94 c0             	sete   al
c0019ba9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019bad:	c3                   	ret    
c0019bae:	31 c0                	xor    eax,eax
c0019bb0:	c3                   	ret    
c0019bb1:	90                   	nop

c0019bb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bb6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bb9:	0f ba e2 0f          	bt     edx,0xf
c0019bbd:	72 f7                	jb     c0019bb6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019bbf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bc2:	83 ca 10             	or     edx,0x10
c0019bc5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bcb:	83 ca 01             	or     edx,0x1
c0019bce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bd1:	c3                   	ret    

c0019bd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bd9:	83 e2 fe             	and    edx,0xfffffffe
c0019bdc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bdf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019be2:	83 e2 ef             	and    edx,0xffffffef
c0019be5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019be8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019beb:	0f ba e2 0e          	bt     edx,0xe
c0019bef:	72 f7                	jb     c0019be8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019bf1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bf4:	0f ba e2 0f          	bt     edx,0xf
c0019bf8:	72 ee                	jb     c0019be8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019bfa:	c3                   	ret    
c0019bfb:	90                   	nop

c0019bfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019bfc:	55                   	push   ebp
c0019bfd:	57                   	push   edi
c0019bfe:	56                   	push   esi
c0019bff:	53                   	push   ebx
c0019c00:	83 ec 1c             	sub    esp,0x1c
c0019c03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c0b:	53                   	push   ebx
c0019c0c:	56                   	push   esi
c0019c0d:	e8 c0 ff ff ff       	call   c0019bd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c16:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c1c:	83 ec 0c             	sub    esp,0xc
c0019c1f:	c1 e5 0a             	shl    ebp,0xa
c0019c22:	01 e8                	add    eax,ebp
c0019c24:	89 03                	mov    DWORD PTR [ebx],eax
c0019c26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c28:	68 00 04 00 00       	push   0x400
c0019c2d:	6a 00                	push   0x0
c0019c2f:	50                   	push   eax
c0019c30:	e8 9b 68 fe ff       	call   c00004d0 <memset>
c0019c35:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c3b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c3f:	01 e8                	add    eax,ebp
c0019c41:	83 c4 1c             	add    esp,0x1c
c0019c44:	89 03                	mov    DWORD PTR [ebx],eax
c0019c46:	c1 e2 08             	shl    edx,0x8
c0019c49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c50:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c56:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c5c:	01 f8                	add    eax,edi
c0019c5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c61:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c64:	68 00 01 00 00       	push   0x100
c0019c69:	6a 00                	push   0x0
c0019c6b:	50                   	push   eax
c0019c6c:	e8 5f 68 fe ff       	call   c00004d0 <memset>
c0019c71:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c77:	01 fa                	add    edx,edi
c0019c79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c7d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019c80:	c1 e7 0d             	shl    edi,0xd
c0019c83:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019c8a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019c90:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019c96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c9a:	31 ff                	xor    edi,edi
c0019c9c:	83 c4 10             	add    esp,0x10
c0019c9f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019ca5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ca9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019caf:	83 c5 20             	add    ebp,0x20
c0019cb2:	01 f8                	add    eax,edi
c0019cb4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cb7:	52                   	push   edx
c0019cb8:	68 00 01 00 00       	push   0x100
c0019cbd:	6a 00                	push   0x0
c0019cbf:	50                   	push   eax
c0019cc0:	e8 0b 68 fe ff       	call   c00004d0 <memset>
c0019cc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cc9:	83 c4 10             	add    esp,0x10
c0019ccc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019cd2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019cd9:	01 f8                	add    eax,edi
c0019cdb:	81 c7 00 01 00 00    	add    edi,0x100
c0019ce1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019ce4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019cea:	75 b3                	jne    c0019c9f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019cec:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019cf3:	50                   	push   eax
c0019cf4:	50                   	push   eax
c0019cf5:	53                   	push   ebx
c0019cf6:	56                   	push   esi
c0019cf7:	e8 b6 fe ff ff       	call   c0019bb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019cfc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d03:	83 c4 2c             	add    esp,0x2c
c0019d06:	5b                   	pop    ebx
c0019d07:	5e                   	pop    esi
c0019d08:	5f                   	pop    edi
c0019d09:	5d                   	pop    ebp
c0019d0a:	c3                   	ret    
c0019d0b:	90                   	nop

c0019d0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d0c:	55                   	push   ebp
c0019d0d:	57                   	push   edi
c0019d0e:	56                   	push   esi
c0019d0f:	53                   	push   ebx
c0019d10:	31 db                	xor    ebx,ebx
c0019d12:	83 ec 0c             	sub    esp,0xc
c0019d15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d19:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d1d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d20:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d26:	74 7a                	je     c0019da2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d28:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d2c:	89 d8                	mov    eax,ebx
c0019d2e:	c1 e0 07             	shl    eax,0x7
c0019d31:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d38:	55                   	push   ebp
c0019d39:	56                   	push   esi
c0019d3a:	e8 2b fe ff ff       	call   c0019b6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d3f:	5a                   	pop    edx
c0019d40:	83 f8 01             	cmp    eax,0x1
c0019d43:	59                   	pop    ecx
c0019d44:	75 21                	jne    c0019d67 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d46:	50                   	push   eax
c0019d47:	53                   	push   ebx
c0019d48:	55                   	push   ebp
c0019d49:	56                   	push   esi
c0019d4a:	e8 ad fe ff ff       	call   c0019bfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d4f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d56:	e8 5e da fe ff       	call   c00077b9 <malloc>
c0019d5b:	89 c5                	mov    ebp,eax
c0019d5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d60:	e8 43 0d 00 00       	call   c001aaa8 <SATA::SATA()>
c0019d65:	eb 24                	jmp    c0019d8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d67:	83 f8 04             	cmp    eax,0x4
c0019d6a:	75 36                	jne    c0019da2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d6c:	51                   	push   ecx
c0019d6d:	53                   	push   ebx
c0019d6e:	55                   	push   ebp
c0019d6f:	56                   	push   esi
c0019d70:	e8 87 fe ff ff       	call   c0019bfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d75:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019d7c:	e8 38 da fe ff       	call   c00077b9 <malloc>
c0019d81:	89 c5                	mov    ebp,eax
c0019d83:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d86:	e8 79 10 00 00       	call   c001ae04 <SATAPI::SATAPI()>
c0019d8b:	58                   	pop    eax
c0019d8c:	5a                   	pop    edx
c0019d8d:	55                   	push   ebp
c0019d8e:	56                   	push   esi
c0019d8f:	e8 b8 1b ff ff       	call   c000b94c <Device::addChild(Device*)>
c0019d94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d97:	56                   	push   esi
c0019d98:	6a 00                	push   0x0
c0019d9a:	53                   	push   ebx
c0019d9b:	55                   	push   ebp
c0019d9c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019d9f:	83 c4 20             	add    esp,0x20
c0019da2:	d1 ef                	shr    edi,1
c0019da4:	43                   	inc    ebx
c0019da5:	83 fb 20             	cmp    ebx,0x20
c0019da8:	0f 85 72 ff ff ff    	jne    c0019d20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019dae:	83 c4 0c             	add    esp,0xc
c0019db1:	5b                   	pop    ebx
c0019db2:	5e                   	pop    esi
c0019db3:	5f                   	pop    edi
c0019db4:	5d                   	pop    ebp
c0019db5:	c3                   	ret    

c0019db6 <SATABus::open(int, int, void*)>:
c0019db6:	83 ec 14             	sub    esp,0x14
c0019db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019dbd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019dc3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019dc9:	52                   	push   edx
c0019dca:	50                   	push   eax
c0019dcb:	e8 3c ff ff ff       	call   c0019d0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019dd0:	31 c0                	xor    eax,eax
c0019dd2:	83 c4 1c             	add    esp,0x1c
c0019dd5:	c3                   	ret    

c0019dd6 <ATA::close(int, int, void*)>:
c0019dd6:	83 ec 0c             	sub    esp,0xc
c0019dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ddd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019de3:	85 c0                	test   eax,eax
c0019de5:	74 0c                	je     c0019df3 <ATA::close(int, int, void*)+0x1d>
c0019de7:	83 ec 0c             	sub    esp,0xc
c0019dea:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dec:	50                   	push   eax
c0019ded:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019df0:	83 c4 10             	add    esp,0x10
c0019df3:	31 c0                	xor    eax,eax
c0019df5:	83 c4 0c             	add    esp,0xc
c0019df8:	c3                   	ret    
c0019df9:	90                   	nop

c0019dfa <ATA::powerSaving(PowerSavingLevel)>:
c0019dfa:	c3                   	ret    
c0019dfb:	90                   	nop

c0019dfc <ATA::ATA()>:
c0019dfc:	83 ec 0c             	sub    esp,0xc
c0019dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e03:	83 ec 04             	sub    esp,0x4
c0019e06:	68 00 02 00 00       	push   0x200
c0019e0b:	68 9d f4 01 c0       	push   0xc001f49d
c0019e10:	50                   	push   eax
c0019e11:	e8 04 1f ff ff       	call   c000bd1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e16:	83 c4 10             	add    esp,0x10
c0019e19:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c0019e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e22:	89 10                	mov    DWORD PTR [eax],edx
c0019e24:	90                   	nop
c0019e25:	83 c4 0c             	add    esp,0xc
c0019e28:	c3                   	ret    
c0019e29:	90                   	nop

c0019e2a <ATA::flush(bool)>:
c0019e2a:	53                   	push   ebx
c0019e2b:	83 ec 08             	sub    esp,0x8
c0019e2e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e37:	19 c0                	sbb    eax,eax
c0019e39:	83 e0 fd             	and    eax,0xfffffffd
c0019e3c:	05 ea 00 00 00       	add    eax,0xea
c0019e41:	50                   	push   eax
c0019e42:	6a 07                	push   0x7
c0019e44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e4b:	50                   	push   eax
c0019e4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e52:	e8 59 f1 ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e57:	83 c4 0c             	add    esp,0xc
c0019e5a:	6a 00                	push   0x0
c0019e5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e63:	50                   	push   eax
c0019e64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e6a:	e8 df fb ff ff       	call   c0019a4e <IDE::polling(unsigned char, unsigned int)>
c0019e6f:	83 c4 18             	add    esp,0x18
c0019e72:	5b                   	pop    ebx
c0019e73:	c3                   	ret    

c0019e74 <ATA::readyForCommand()>:
c0019e74:	56                   	push   esi
c0019e75:	53                   	push   ebx
c0019e76:	53                   	push   ebx
c0019e77:	31 db                	xor    ebx,ebx
c0019e79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e7d:	51                   	push   ecx
c0019e7e:	6a 0c                	push   0xc
c0019e80:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019e87:	50                   	push   eax
c0019e88:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019e8e:	e8 dd f1 ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c0019e93:	83 c4 10             	add    esp,0x10
c0019e96:	a8 88                	test   al,0x88
c0019e98:	74 1f                	je     c0019eb9 <ATA::readyForCommand()+0x45>
c0019e9a:	43                   	inc    ebx
c0019e9b:	83 fb 63             	cmp    ebx,0x63
c0019e9e:	7e dd                	jle    c0019e7d <ATA::readyForCommand()+0x9>
c0019ea0:	83 ec 0c             	sub    esp,0xc
c0019ea3:	6a 0a                	push   0xa
c0019ea5:	e8 da 9b ff ff       	call   c0013a84 <milliTenthSleep(unsigned int)>
c0019eaa:	83 c4 10             	add    esp,0x10
c0019ead:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019eb3:	75 c8                	jne    c0019e7d <ATA::readyForCommand()+0x9>
c0019eb5:	31 c0                	xor    eax,eax
c0019eb7:	eb 02                	jmp    c0019ebb <ATA::readyForCommand()+0x47>
c0019eb9:	b0 01                	mov    al,0x1
c0019ebb:	5a                   	pop    edx
c0019ebc:	5b                   	pop    ebx
c0019ebd:	5e                   	pop    esi
c0019ebe:	c3                   	ret    
c0019ebf:	90                   	nop

c0019ec0 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ec0:	55                   	push   ebp
c0019ec1:	57                   	push   edi
c0019ec2:	56                   	push   esi
c0019ec3:	53                   	push   ebx
c0019ec4:	83 ec 2c             	sub    esp,0x2c
c0019ec7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019ecb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019ecf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ed7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019edb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019edf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ee3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ee9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019eed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019ef3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019ef7:	c1 e0 06             	shl    eax,0x6
c0019efa:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f02:	74 5d                	je     c0019f61 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f04:	89 fa                	mov    edx,edi
c0019f06:	89 f0                	mov    eax,esi
c0019f08:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f0c:	c1 ea 1c             	shr    edx,0x1c
c0019f0f:	89 d1                	mov    ecx,edx
c0019f11:	09 c1                	or     ecx,eax
c0019f13:	74 25                	je     c0019f3a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f15:	31 ed                	xor    ebp,ebp
c0019f17:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f1e:	89 fa                	mov    edx,edi
c0019f20:	89 f0                	mov    eax,esi
c0019f22:	0f ad d0             	shrd   eax,edx,cl
c0019f25:	d3 ea                	shr    edx,cl
c0019f27:	f6 c1 20             	test   cl,0x20
c0019f2a:	74 02                	je     c0019f2e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f2c:	89 d0                	mov    eax,edx
c0019f2e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f32:	45                   	inc    ebp
c0019f33:	83 fd 06             	cmp    ebp,0x6
c0019f36:	75 df                	jne    c0019f17 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f38:	eb 76                	jmp    c0019fb0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f3a:	89 f0                	mov    eax,esi
c0019f3c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f41:	89 fa                	mov    edx,edi
c0019f43:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f4a:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f4e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f53:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f57:	c1 ee 18             	shr    esi,0x18
c0019f5a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f5f:	eb 56                	jmp    c0019fb7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f61:	6a 00                	push   0x0
c0019f63:	6a 3f                	push   0x3f
c0019f65:	57                   	push   edi
c0019f66:	56                   	push   esi
c0019f67:	e8 74 22 00 00       	call   c001c1e0 <__umoddi3>
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	40                   	inc    eax
c0019f70:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f74:	6a 00                	push   0x0
c0019f76:	68 f0 03 00 00       	push   0x3f0
c0019f7b:	57                   	push   edi
c0019f7c:	56                   	push   esi
c0019f7d:	e8 5e 21 00 00       	call   c001c0e0 <__udivdi3>
c0019f82:	83 c4 10             	add    esp,0x10
c0019f85:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019f8a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f91:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f96:	6a 00                	push   0x0
c0019f98:	6a 3f                	push   0x3f
c0019f9a:	57                   	push   edi
c0019f9b:	56                   	push   esi
c0019f9c:	e8 3f 21 00 00       	call   c001c0e0 <__udivdi3>
c0019fa1:	83 c4 10             	add    esp,0x10
c0019fa4:	89 c6                	mov    esi,eax
c0019fa6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019fab:	83 e6 0f             	and    esi,0xf
c0019fae:	eb 07                	jmp    c0019fb7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fb0:	31 f6                	xor    esi,esi
c0019fb2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019fb7:	bf 01 00 00 00       	mov    edi,0x1
c0019fbc:	50                   	push   eax
c0019fbd:	6a 00                	push   0x0
c0019fbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fc6:	50                   	push   eax
c0019fc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fcb:	e8 ee f1 ff ff       	call   c00191be <IDE::enableIRQs(unsigned char, bool)>
c0019fd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fd3:	e8 9c fe ff ff       	call   c0019e74 <ATA::readyForCommand()>
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	84 c0                	test   al,al
c0019fdd:	0f 84 4e 02 00 00    	je     c001a231 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019fe3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019fe9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019fef:	c1 e0 04             	shl    eax,0x4
c0019ff2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019ff9:	09 c6                	or     esi,eax
c0019ffb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a000:	75 05                	jne    c001a007 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a002:	83 ce a0             	or     esi,0xffffffa0
c001a005:	eb 03                	jmp    c001a00a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a007:	83 ce e0             	or     esi,0xffffffe0
c001a00a:	89 f0                	mov    eax,esi
c001a00c:	0f b6 f0             	movzx  esi,al
c001a00f:	56                   	push   esi
c001a010:	6a 06                	push   0x6
c001a012:	51                   	push   ecx
c001a013:	52                   	push   edx
c001a014:	e8 97 ef ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a019:	83 c4 10             	add    esp,0x10
c001a01c:	6a 00                	push   0x0
c001a01e:	6a 01                	push   0x1
c001a020:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a027:	50                   	push   eax
c001a028:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a02e:	e8 7d ef ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a033:	83 c4 10             	add    esp,0x10
c001a036:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a03b:	75 6e                	jne    c001a0ab <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a03d:	6a 00                	push   0x0
c001a03f:	6a 08                	push   0x8
c001a041:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a048:	50                   	push   eax
c001a049:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a04f:	e8 5c ef ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a054:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a059:	50                   	push   eax
c001a05a:	6a 09                	push   0x9
c001a05c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a063:	50                   	push   eax
c001a064:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a06a:	e8 41 ef ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a06f:	83 c4 20             	add    esp,0x20
c001a072:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a077:	50                   	push   eax
c001a078:	6a 0a                	push   0xa
c001a07a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a081:	50                   	push   eax
c001a082:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a088:	e8 23 ef ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a08d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a092:	50                   	push   eax
c001a093:	6a 0b                	push   0xb
c001a095:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a09c:	50                   	push   eax
c001a09d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0a3:	e8 08 ef ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0a8:	83 c4 20             	add    esp,0x20
c001a0ab:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a0b0:	50                   	push   eax
c001a0b1:	6a 02                	push   0x2
c001a0b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0ba:	50                   	push   eax
c001a0bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0c1:	e8 ea ee ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0c6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a0cb:	50                   	push   eax
c001a0cc:	6a 03                	push   0x3
c001a0ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0d5:	50                   	push   eax
c001a0d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0dc:	e8 cf ee ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e1:	83 c4 20             	add    esp,0x20
c001a0e4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a0e9:	50                   	push   eax
c001a0ea:	6a 04                	push   0x4
c001a0ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f3:	50                   	push   eax
c001a0f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0fa:	e8 b1 ee ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a104:	50                   	push   eax
c001a105:	6a 05                	push   0x5
c001a107:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a10e:	50                   	push   eax
c001a10f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a115:	e8 96 ee ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11a:	83 c4 20             	add    esp,0x20
c001a11d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a122:	0f 94 c0             	sete   al
c001a125:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a12a:	74 09                	je     c001a135 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a12c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a133:	eb 07                	jmp    c001a13c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a135:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a13c:	0f b6 c0             	movzx  eax,al
c001a13f:	50                   	push   eax
c001a140:	6a 07                	push   0x7
c001a142:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a149:	50                   	push   eax
c001a14a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a150:	e8 5b ee ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a155:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a159:	83 c4 10             	add    esp,0x10
c001a15c:	85 f6                	test   esi,esi
c001a15e:	0f 84 ae 00 00 00    	je     c001a212 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a164:	50                   	push   eax
c001a165:	6a 01                	push   0x1
c001a167:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a16e:	50                   	push   eax
c001a16f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a175:	e8 d4 f8 ff ff       	call   c0019a4e <IDE::polling(unsigned char, unsigned int)>
c001a17a:	83 c4 10             	add    esp,0x10
c001a17d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a183:	84 c0                	test   al,al
c001a185:	74 20                	je     c001a1a7 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a187:	0f b6 f8             	movzx  edi,al
c001a18a:	0f b6 d2             	movzx  edx,dl
c001a18d:	57                   	push   edi
c001a18e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a195:	50                   	push   eax
c001a196:	52                   	push   edx
c001a197:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a19d:	e8 fc f7 ff ff       	call   c001999e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1a2:	e9 87 00 00 00       	jmp    c001a22e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a1a7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1ac:	74 33                	je     c001a1e1 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a1ae:	31 ed                	xor    ebp,ebp
c001a1b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a1b4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a1b8:	50                   	push   eax
c001a1b9:	50                   	push   eax
c001a1ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c1:	50                   	push   eax
c001a1c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c8:	e8 d1 ed ff ff       	call   c0018f9e <IDE::getBase(unsigned char)>
c001a1cd:	89 c2                	mov    edx,eax
c001a1cf:	89 f8                	mov    eax,edi
c001a1d1:	66 ef                	out    dx,ax
c001a1d3:	45                   	inc    ebp
c001a1d4:	83 c4 10             	add    esp,0x10
c001a1d7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a1dd:	75 d1                	jne    c001a1b0 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a1df:	eb 23                	jmp    c001a204 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a1e1:	0f b6 d2             	movzx  edx,dl
c001a1e4:	51                   	push   ecx
c001a1e5:	51                   	push   ecx
c001a1e6:	52                   	push   edx
c001a1e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ed:	e8 ac ed ff ff       	call   c0018f9e <IDE::getBase(unsigned char)>
c001a1f2:	b9 00 01 00 00       	mov    ecx,0x100
c001a1f7:	89 c2                	mov    edx,eax
c001a1f9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a1fd:	fc                   	cld    
c001a1fe:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a201:	83 c4 10             	add    esp,0x10
c001a204:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a20c:	4e                   	dec    esi
c001a20d:	e9 4a ff ff ff       	jmp    c001a15c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a212:	31 ff                	xor    edi,edi
c001a214:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a219:	74 16                	je     c001a231 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a21b:	50                   	push   eax
c001a21c:	50                   	push   eax
c001a21d:	31 c0                	xor    eax,eax
c001a21f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a224:	0f 94 c0             	sete   al
c001a227:	50                   	push   eax
c001a228:	53                   	push   ebx
c001a229:	e8 fc fb ff ff       	call   c0019e2a <ATA::flush(bool)>
c001a22e:	83 c4 10             	add    esp,0x10
c001a231:	83 c4 2c             	add    esp,0x2c
c001a234:	89 f8                	mov    eax,edi
c001a236:	5b                   	pop    ebx
c001a237:	5e                   	pop    esi
c001a238:	5f                   	pop    edi
c001a239:	5d                   	pop    ebp
c001a23a:	c3                   	ret    
c001a23b:	90                   	nop

c001a23c <ATA::read(unsigned long long, int, void*)>:
c001a23c:	57                   	push   edi
c001a23d:	b8 04 00 00 00       	mov    eax,0x4
c001a242:	56                   	push   esi
c001a243:	53                   	push   ebx
c001a244:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a248:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a24c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a24f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a253:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a257:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a25d:	77 25                	ja     c001a284 <ATA::read(unsigned long long, int, void*)+0x48>
c001a25f:	b8 06 00 00 00       	mov    eax,0x6
c001a264:	85 f6                	test   esi,esi
c001a266:	74 1c                	je     c001a284 <ATA::read(unsigned long long, int, void*)+0x48>
c001a268:	50                   	push   eax
c001a269:	50                   	push   eax
c001a26a:	6a 00                	push   0x0
c001a26c:	56                   	push   esi
c001a26d:	52                   	push   edx
c001a26e:	53                   	push   ebx
c001a26f:	51                   	push   ecx
c001a270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a274:	e8 47 fc ff ff       	call   c0019ec0 <ATA::access(unsigned long long, int, void*, bool)>
c001a279:	83 c4 20             	add    esp,0x20
c001a27c:	85 c0                	test   eax,eax
c001a27e:	0f 95 c0             	setne  al
c001a281:	0f b6 c0             	movzx  eax,al
c001a284:	5b                   	pop    ebx
c001a285:	5e                   	pop    esi
c001a286:	5f                   	pop    edi
c001a287:	c3                   	ret    

c001a288 <ATA::write(unsigned long long, int, void*)>:
c001a288:	57                   	push   edi
c001a289:	b8 04 00 00 00       	mov    eax,0x4
c001a28e:	56                   	push   esi
c001a28f:	53                   	push   ebx
c001a290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a294:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a298:	8d 7a ff             	lea    edi,[edx-0x1]
c001a29b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a29f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2a3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2a9:	77 25                	ja     c001a2d0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2ab:	b8 06 00 00 00       	mov    eax,0x6
c001a2b0:	85 f6                	test   esi,esi
c001a2b2:	74 1c                	je     c001a2d0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2b4:	50                   	push   eax
c001a2b5:	50                   	push   eax
c001a2b6:	6a 01                	push   0x1
c001a2b8:	56                   	push   esi
c001a2b9:	52                   	push   edx
c001a2ba:	53                   	push   ebx
c001a2bb:	51                   	push   ecx
c001a2bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2c0:	e8 fb fb ff ff       	call   c0019ec0 <ATA::access(unsigned long long, int, void*, bool)>
c001a2c5:	83 c4 20             	add    esp,0x20
c001a2c8:	85 c0                	test   eax,eax
c001a2ca:	0f 95 c0             	setne  al
c001a2cd:	0f b6 c0             	movzx  eax,al
c001a2d0:	5b                   	pop    ebx
c001a2d1:	5e                   	pop    esi
c001a2d2:	5f                   	pop    edi
c001a2d3:	c3                   	ret    

c001a2d4 <ATA::detectCHS()>:
c001a2d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2d8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a2de:	c1 e0 06             	shl    eax,0x6
c001a2e1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a2e7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a2f1:	c7 44 24 04 f4 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f3f4
c001a2f9:	e9 91 5e ff ff       	jmp    c001018f <KePanic(char const*)>

c001a2fe <ATA::open(int, int, void*)>:
c001a2fe:	53                   	push   ebx
c001a2ff:	83 ec 08             	sub    esp,0x8
c001a302:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a306:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a30e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a314:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a31a:	c1 e0 06             	shl    eax,0x6
c001a31d:	01 d0                	add    eax,edx
c001a31f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a326:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a32c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a333:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a33d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a343:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a34a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a351:	75 0c                	jne    c001a35f <ATA::open(int, int, void*)+0x61>
c001a353:	83 ec 0c             	sub    esp,0xc
c001a356:	53                   	push   ebx
c001a357:	e8 78 ff ff ff       	call   c001a2d4 <ATA::detectCHS()>
c001a35c:	83 c4 10             	add    esp,0x10
c001a35f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a365:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a36b:	c1 e0 06             	shl    eax,0x6
c001a36e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a375:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a37f:	d1 e8                	shr    eax,1
c001a381:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a387:	6a 04                	push   0x4
c001a389:	6a 0c                	push   0xc
c001a38b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a392:	50                   	push   eax
c001a393:	52                   	push   edx
c001a394:	e8 17 ec ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a399:	90                   	nop
c001a39a:	90                   	nop
c001a39b:	6a 00                	push   0x0
c001a39d:	6a 0c                	push   0xc
c001a39f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3a6:	50                   	push   eax
c001a3a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3ad:	e8 fe eb ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3b2:	83 c4 14             	add    esp,0x14
c001a3b5:	53                   	push   ebx
c001a3b6:	e8 c7 19 ff ff       	call   c000bd82 <PhysicalDisk::startCache()>
c001a3bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3be:	e8 77 2a ff ff       	call   c000ce3a <createPartitionsForDisk(PhysicalDisk*)>
c001a3c3:	31 c0                	xor    eax,eax
c001a3c5:	83 c4 18             	add    esp,0x18
c001a3c8:	5b                   	pop    ebx
c001a3c9:	c3                   	ret    

c001a3ca <ATAPI::write(unsigned long long, int, void*)>:
c001a3ca:	b8 03 00 00 00       	mov    eax,0x3
c001a3cf:	c3                   	ret    

c001a3d0 <ATAPI::close(int, int, void*)>:
c001a3d0:	83 ec 0c             	sub    esp,0xc
c001a3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a3dd:	85 c0                	test   eax,eax
c001a3df:	74 0c                	je     c001a3ed <ATAPI::close(int, int, void*)+0x1d>
c001a3e1:	83 ec 0c             	sub    esp,0xc
c001a3e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001a3e6:	50                   	push   eax
c001a3e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	31 c0                	xor    eax,eax
c001a3ef:	83 c4 0c             	add    esp,0xc
c001a3f2:	c3                   	ret    
c001a3f3:	90                   	nop

c001a3f4 <ATAPI::ATAPI()>:
c001a3f4:	83 ec 0c             	sub    esp,0xc
c001a3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3fb:	83 ec 04             	sub    esp,0x4
c001a3fe:	68 00 08 00 00       	push   0x800
c001a403:	68 3d f5 01 c0       	push   0xc001f53d
c001a408:	50                   	push   eax
c001a409:	e8 0c 19 ff ff       	call   c000bd1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a40e:	83 c4 10             	add    esp,0x10
c001a411:	ba 58 f4 01 c0       	mov    edx,0xc001f458
c001a416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41a:	89 10                	mov    DWORD PTR [eax],edx
c001a41c:	90                   	nop
c001a41d:	83 c4 0c             	add    esp,0xc
c001a420:	c3                   	ret    
c001a421:	90                   	nop

c001a422 <ATAPI::readyForCommand()>:
c001a422:	56                   	push   esi
c001a423:	53                   	push   ebx
c001a424:	53                   	push   ebx
c001a425:	31 db                	xor    ebx,ebx
c001a427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a42b:	51                   	push   ecx
c001a42c:	6a 0c                	push   0xc
c001a42e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a435:	50                   	push   eax
c001a436:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a43c:	e8 2f ec ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001a441:	83 c4 10             	add    esp,0x10
c001a444:	a8 88                	test   al,0x88
c001a446:	74 25                	je     c001a46d <ATAPI::readyForCommand()+0x4b>
c001a448:	43                   	inc    ebx
c001a449:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a44f:	7e da                	jle    c001a42b <ATAPI::readyForCommand()+0x9>
c001a451:	83 ec 0c             	sub    esp,0xc
c001a454:	68 5e 01 00 00       	push   0x15e
c001a459:	e8 26 96 ff ff       	call   c0013a84 <milliTenthSleep(unsigned int)>
c001a45e:	83 c4 10             	add    esp,0x10
c001a461:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a467:	75 c2                	jne    c001a42b <ATAPI::readyForCommand()+0x9>
c001a469:	31 c0                	xor    eax,eax
c001a46b:	eb 02                	jmp    c001a46f <ATAPI::readyForCommand()+0x4d>
c001a46d:	b0 01                	mov    al,0x1
c001a46f:	5a                   	pop    edx
c001a470:	5b                   	pop    ebx
c001a471:	5e                   	pop    esi
c001a472:	c3                   	ret    
c001a473:	90                   	nop

c001a474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a474:	55                   	push   ebp
c001a475:	57                   	push   edi
c001a476:	56                   	push   esi
c001a477:	53                   	push   ebx
c001a478:	83 ec 20             	sub    esp,0x20
c001a47b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a47f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a483:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a487:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a48b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a48f:	6a 01                	push   0x1
c001a491:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a498:	50                   	push   eax
c001a499:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a49f:	e8 1a ed ff ff       	call   c00191be <IDE::enableIRQs(unsigned char, bool)>
c001a4a4:	5e                   	pop    esi
c001a4a5:	58                   	pop    eax
c001a4a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4ad:	50                   	push   eax
c001a4ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4b4:	e8 d1 ea ff ff       	call   c0018f8a <IDE::prepareInterrupt(unsigned char)>
c001a4b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a4bc:	e8 61 ff ff ff       	call   c001a422 <ATAPI::readyForCommand()>
c001a4c1:	83 c4 10             	add    esp,0x10
c001a4c4:	84 c0                	test   al,al
c001a4c6:	75 0a                	jne    c001a4d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a4c8:	bb 01 00 00 00       	mov    ebx,0x1
c001a4cd:	e9 57 02 00 00       	jmp    c001a729 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a4d2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a4d8:	c1 e0 04             	shl    eax,0x4
c001a4db:	0f b6 c0             	movzx  eax,al
c001a4de:	50                   	push   eax
c001a4df:	6a 06                	push   0x6
c001a4e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4e8:	50                   	push   eax
c001a4e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4ef:	e8 bc ea ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4f4:	6a 00                	push   0x0
c001a4f6:	6a 01                	push   0x1
c001a4f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4ff:	50                   	push   eax
c001a500:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a506:	e8 a5 ea ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a50b:	83 c4 20             	add    esp,0x20
c001a50e:	0f b6 c3             	movzx  eax,bl
c001a511:	0f b6 df             	movzx  ebx,bh
c001a514:	50                   	push   eax
c001a515:	6a 04                	push   0x4
c001a517:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a51e:	50                   	push   eax
c001a51f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a525:	e8 86 ea ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a52a:	53                   	push   ebx
c001a52b:	6a 05                	push   0x5
c001a52d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a534:	50                   	push   eax
c001a535:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a53b:	e8 70 ea ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a540:	83 c4 20             	add    esp,0x20
c001a543:	68 a0 00 00 00       	push   0xa0
c001a548:	6a 07                	push   0x7
c001a54a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a551:	50                   	push   eax
c001a552:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a558:	e8 53 ea ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a55d:	83 c4 0c             	add    esp,0xc
c001a560:	6a 01                	push   0x1
c001a562:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a569:	50                   	push   eax
c001a56a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a570:	e8 d9 f4 ff ff       	call   c0019a4e <IDE::polling(unsigned char, unsigned int)>
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a57e:	84 c0                	test   al,al
c001a580:	74 23                	je     c001a5a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a582:	0f b6 d8             	movzx  ebx,al
c001a585:	0f b6 d2             	movzx  edx,dl
c001a588:	53                   	push   ebx
c001a589:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a590:	50                   	push   eax
c001a591:	52                   	push   edx
c001a592:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a598:	e8 01 f4 ff ff       	call   c001999e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a59d:	83 c4 10             	add    esp,0x10
c001a5a0:	e9 84 01 00 00       	jmp    c001a729 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5a5:	0f b6 d2             	movzx  edx,dl
c001a5a8:	53                   	push   ebx
c001a5a9:	53                   	push   ebx
c001a5aa:	52                   	push   edx
c001a5ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5b1:	e8 e8 e9 ff ff       	call   c0018f9e <IDE::getBase(unsigned char)>
c001a5b6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a5ba:	b9 06 00 00 00       	mov    ecx,0x6
c001a5bf:	89 c2                	mov    edx,eax
c001a5c1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a5c4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a5d1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a5d8:	85 db                	test   ebx,ebx
c001a5da:	0f 84 ec 00 00 00    	je     c001a6cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a5e0:	51                   	push   ecx
c001a5e1:	51                   	push   ecx
c001a5e2:	52                   	push   edx
c001a5e3:	50                   	push   eax
c001a5e4:	e8 35 eb ff ff       	call   c001911e <IDE::waitInterrupt(unsigned char)>
c001a5e9:	83 c4 10             	add    esp,0x10
c001a5ec:	84 c0                	test   al,al
c001a5ee:	0f 84 d4 fe ff ff    	je     c001a4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a5f4:	56                   	push   esi
c001a5f5:	56                   	push   esi
c001a5f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5fd:	50                   	push   eax
c001a5fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a604:	e8 81 e9 ff ff       	call   c0018f8a <IDE::prepareInterrupt(unsigned char)>
c001a609:	83 c4 0c             	add    esp,0xc
c001a60c:	6a 04                	push   0x4
c001a60e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a615:	50                   	push   eax
c001a616:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a61c:	e8 4f ea ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001a621:	83 c4 0c             	add    esp,0xc
c001a624:	89 c6                	mov    esi,eax
c001a626:	6a 05                	push   0x5
c001a628:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a62f:	50                   	push   eax
c001a630:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a636:	e8 35 ea ff ff       	call   c0019070 <IDE::read(unsigned char, unsigned char)>
c001a63b:	89 f1                	mov    ecx,esi
c001a63d:	0f b6 c0             	movzx  eax,al
c001a640:	0f b6 f1             	movzx  esi,cl
c001a643:	c1 e0 08             	shl    eax,0x8
c001a646:	09 c6                	or     esi,eax
c001a648:	d1 fe                	sar    esi,1
c001a64a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a64e:	83 c4 10             	add    esp,0x10
c001a651:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a656:	74 41                	je     c001a699 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a658:	31 c9                	xor    ecx,ecx
c001a65a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a660:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a667:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a66b:	75 0a                	jne    c001a677 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a66d:	01 c9                	add    ecx,ecx
c001a66f:	01 cd                	add    ebp,ecx
c001a671:	4b                   	dec    ebx
c001a672:	e9 54 ff ff ff       	jmp    c001a5cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a677:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a67c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a680:	51                   	push   ecx
c001a681:	51                   	push   ecx
c001a682:	52                   	push   edx
c001a683:	50                   	push   eax
c001a684:	e8 15 e9 ff ff       	call   c0018f9e <IDE::getBase(unsigned char)>
c001a689:	89 c2                	mov    edx,eax
c001a68b:	89 f0                	mov    eax,esi
c001a68d:	66 ef                	out    dx,ax
c001a68f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a693:	83 c4 10             	add    esp,0x10
c001a696:	41                   	inc    ecx
c001a697:	eb c1                	jmp    c001a65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a699:	31 f6                	xor    esi,esi
c001a69b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6a1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6a8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a6ac:	75 06                	jne    c001a6b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a6ae:	01 f6                	add    esi,esi
c001a6b0:	01 f5                	add    ebp,esi
c001a6b2:	eb bd                	jmp    c001a671 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a6b4:	51                   	push   ecx
c001a6b5:	51                   	push   ecx
c001a6b6:	52                   	push   edx
c001a6b7:	50                   	push   eax
c001a6b8:	e8 e1 e8 ff ff       	call   c0018f9e <IDE::getBase(unsigned char)>
c001a6bd:	89 c2                	mov    edx,eax
c001a6bf:	66 ed                	in     ax,dx
c001a6c1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a6c6:	83 c4 10             	add    esp,0x10
c001a6c9:	46                   	inc    esi
c001a6ca:	eb cf                	jmp    c001a69b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a6cc:	51                   	push   ecx
c001a6cd:	51                   	push   ecx
c001a6ce:	52                   	push   edx
c001a6cf:	50                   	push   eax
c001a6d0:	e8 49 ea ff ff       	call   c001911e <IDE::waitInterrupt(unsigned char)>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	84 c0                	test   al,al
c001a6da:	0f 84 e8 fd ff ff    	je     c001a4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6e0:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a6e5:	52                   	push   edx
c001a6e6:	52                   	push   edx
c001a6e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6ee:	50                   	push   eax
c001a6ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f5:	e8 90 e8 ff ff       	call   c0018f8a <IDE::prepareInterrupt(unsigned char)>
c001a6fa:	83 c4 10             	add    esp,0x10
c001a6fd:	50                   	push   eax
c001a6fe:	50                   	push   eax
c001a6ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a706:	50                   	push   eax
c001a707:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a70d:	e8 8c e8 ff ff       	call   c0018f9e <IDE::getBase(unsigned char)>
c001a712:	8d 50 07             	lea    edx,[eax+0x7]
c001a715:	ec                   	in     al,dx
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	a8 88                	test   al,0x88
c001a71b:	74 0a                	je     c001a727 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a71d:	4b                   	dec    ebx
c001a71e:	75 dd                	jne    c001a6fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a720:	bb 02 00 00 00       	mov    ebx,0x2
c001a725:	eb 02                	jmp    c001a729 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a727:	31 db                	xor    ebx,ebx
c001a729:	83 c4 1c             	add    esp,0x1c
c001a72c:	89 d8                	mov    eax,ebx
c001a72e:	5b                   	pop    ebx
c001a72f:	5e                   	pop    esi
c001a730:	5f                   	pop    edi
c001a731:	5d                   	pop    ebp
c001a732:	c3                   	ret    
c001a733:	90                   	nop

c001a734 <ATAPI::diskRemoved()>:
c001a734:	53                   	push   ebx
c001a735:	83 ec 14             	sub    esp,0x14
c001a738:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a73c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a743:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a749:	e8 6c 24 ff ff       	call   c000cbba <LogicalDisk::unmount()>
c001a74e:	58                   	pop    eax
c001a74f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a755:	e8 a6 2d ff ff       	call   c000d500 <VCache::writeWriteBuffer()>
c001a75a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a760:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a764:	83 c4 18             	add    esp,0x18
c001a767:	5b                   	pop    ebx
c001a768:	e9 83 2d ff ff       	jmp    c000d4f0 <VCache::invalidateReadBuffer()>
c001a76d:	90                   	nop

c001a76e <ATAPI::eject()>:
c001a76e:	57                   	push   edi
c001a76f:	b9 03 00 00 00       	mov    ecx,0x3
c001a774:	53                   	push   ebx
c001a775:	83 ec 14             	sub    esp,0x14
c001a778:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a77c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a780:	fc                   	cld    
c001a781:	31 c0                	xor    eax,eax
c001a783:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a785:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a78a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a78f:	50                   	push   eax
c001a790:	50                   	push   eax
c001a791:	6a 00                	push   0x0
c001a793:	6a 00                	push   0x0
c001a795:	6a 00                	push   0x0
c001a797:	6a 02                	push   0x2
c001a799:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a79d:	50                   	push   eax
c001a79e:	53                   	push   ebx
c001a79f:	e8 d0 fc ff ff       	call   c001a474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7a4:	83 c4 14             	add    esp,0x14
c001a7a7:	53                   	push   ebx
c001a7a8:	e8 87 ff ff ff       	call   c001a734 <ATAPI::diskRemoved()>
c001a7ad:	83 c4 24             	add    esp,0x24
c001a7b0:	31 c0                	xor    eax,eax
c001a7b2:	5b                   	pop    ebx
c001a7b3:	5f                   	pop    edi
c001a7b4:	c3                   	ret    
c001a7b5:	90                   	nop

c001a7b6 <ATAPI::diskInserted()>:
c001a7b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ba:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a7c1:	c3                   	ret    

c001a7c2 <ATAPI::detectMedia()>:
c001a7c2:	56                   	push   esi
c001a7c3:	53                   	push   ebx
c001a7c4:	83 ec 28             	sub    esp,0x28
c001a7c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a7cb:	6a 0c                	push   0xc
c001a7cd:	6a 00                	push   0x0
c001a7cf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a7d3:	56                   	push   esi
c001a7d4:	e8 f7 5c fe ff       	call   c00004d0 <memset>
c001a7d9:	58                   	pop    eax
c001a7da:	5a                   	pop    edx
c001a7db:	6a 00                	push   0x0
c001a7dd:	6a 00                	push   0x0
c001a7df:	6a 00                	push   0x0
c001a7e1:	6a 00                	push   0x0
c001a7e3:	56                   	push   esi
c001a7e4:	53                   	push   ebx
c001a7e5:	e8 8a fc ff ff       	call   c001a474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7ea:	83 c4 1c             	add    esp,0x1c
c001a7ed:	6a 0c                	push   0xc
c001a7ef:	6a 00                	push   0x0
c001a7f1:	56                   	push   esi
c001a7f2:	e8 d9 5c fe ff       	call   c00004d0 <memset>
c001a7f7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a7fc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a801:	59                   	pop    ecx
c001a802:	58                   	pop    eax
c001a803:	6a 01                	push   0x1
c001a805:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a809:	50                   	push   eax
c001a80a:	6a 00                	push   0x0
c001a80c:	6a 12                	push   0x12
c001a80e:	56                   	push   esi
c001a80f:	53                   	push   ebx
c001a810:	e8 5f fc ff ff       	call   c001a474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a815:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a819:	83 c4 20             	add    esp,0x20
c001a81c:	83 e0 7f             	and    eax,0x7f
c001a81f:	3c 70                	cmp    al,0x70
c001a821:	74 15                	je     c001a838 <ATAPI::detectMedia()+0x76>
c001a823:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a82a:	75 0c                	jne    c001a838 <ATAPI::detectMedia()+0x76>
c001a82c:	83 ec 0c             	sub    esp,0xc
c001a82f:	53                   	push   ebx
c001a830:	e8 81 ff ff ff       	call   c001a7b6 <ATAPI::diskInserted()>
c001a835:	83 c4 10             	add    esp,0x10
c001a838:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a83c:	83 e0 0f             	and    eax,0xf
c001a83f:	3c 02                	cmp    al,0x2
c001a841:	75 1b                	jne    c001a85e <ATAPI::detectMedia()+0x9c>
c001a843:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a848:	75 2d                	jne    c001a877 <ATAPI::detectMedia()+0xb5>
c001a84a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a851:	74 24                	je     c001a877 <ATAPI::detectMedia()+0xb5>
c001a853:	83 ec 0c             	sub    esp,0xc
c001a856:	53                   	push   ebx
c001a857:	e8 d8 fe ff ff       	call   c001a734 <ATAPI::diskRemoved()>
c001a85c:	eb 16                	jmp    c001a874 <ATAPI::detectMedia()+0xb2>
c001a85e:	84 c0                	test   al,al
c001a860:	75 15                	jne    c001a877 <ATAPI::detectMedia()+0xb5>
c001a862:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a869:	75 0c                	jne    c001a877 <ATAPI::detectMedia()+0xb5>
c001a86b:	83 ec 0c             	sub    esp,0xc
c001a86e:	53                   	push   ebx
c001a86f:	e8 42 ff ff ff       	call   c001a7b6 <ATAPI::diskInserted()>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	83 c4 24             	add    esp,0x24
c001a87a:	5b                   	pop    ebx
c001a87b:	5e                   	pop    esi
c001a87c:	c3                   	ret    
c001a87d:	90                   	nop

c001a87e <ATAPI::open(int, int, void*)>:
c001a87e:	56                   	push   esi
c001a87f:	53                   	push   ebx
c001a880:	50                   	push   eax
c001a881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a885:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a889:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a88d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a893:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a899:	c1 e0 06             	shl    eax,0x6
c001a89c:	01 d0                	add    eax,edx
c001a89e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a8a5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a8ab:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a8b2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a8bc:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a8c2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a8c9:	6a 04                	push   0x4
c001a8cb:	6a 0c                	push   0xc
c001a8cd:	51                   	push   ecx
c001a8ce:	52                   	push   edx
c001a8cf:	e8 dc e6 ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8d4:	90                   	nop
c001a8d5:	90                   	nop
c001a8d6:	6a 00                	push   0x0
c001a8d8:	6a 0c                	push   0xc
c001a8da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8e1:	50                   	push   eax
c001a8e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a8e8:	e8 c3 e6 ff ff       	call   c0018fb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8ed:	83 c4 14             	add    esp,0x14
c001a8f0:	68 74 01 00 00       	push   0x174
c001a8f5:	e8 bf ce fe ff       	call   c00077b9 <malloc>
c001a8fa:	83 c4 0c             	add    esp,0xc
c001a8fd:	89 c6                	mov    esi,eax
c001a8ff:	6a 00                	push   0x0
c001a901:	68 ff ff ff 7f       	push   0x7fffffff
c001a906:	6a 00                	push   0x0
c001a908:	6a 00                	push   0x0
c001a90a:	53                   	push   ebx
c001a90b:	68 f4 f5 01 c0       	push   0xc001f5f4
c001a910:	50                   	push   eax
c001a911:	e8 f0 20 ff ff       	call   c000ca06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a916:	83 c4 14             	add    esp,0x14
c001a919:	56                   	push   esi
c001a91a:	e8 9d 21 ff ff       	call   c000cabc <LogicalDisk::assignDriveLetter()>
c001a91f:	5a                   	pop    edx
c001a920:	0f be c0             	movsx  eax,al
c001a923:	59                   	pop    ecx
c001a924:	50                   	push   eax
c001a925:	68 40 f4 01 c0       	push   0xc001f440
c001a92a:	e8 e0 fb fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001a92f:	58                   	pop    eax
c001a930:	5a                   	pop    edx
c001a931:	56                   	push   esi
c001a932:	53                   	push   ebx
c001a933:	e8 14 10 ff ff       	call   c000b94c <Device::addChild(Device*)>
c001a938:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a93e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a941:	e8 3c 14 ff ff       	call   c000bd82 <PhysicalDisk::startCache()>
c001a946:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a94d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a950:	e8 6d fe ff ff       	call   c001a7c2 <ATAPI::detectMedia()>
c001a955:	83 c4 14             	add    esp,0x14
c001a958:	31 c0                	xor    eax,eax
c001a95a:	5b                   	pop    ebx
c001a95b:	5e                   	pop    esi
c001a95c:	c3                   	ret    
c001a95d:	90                   	nop

c001a95e <ATAPI::read(unsigned long long, int, void*)>:
c001a95e:	55                   	push   ebp
c001a95f:	57                   	push   edi
c001a960:	56                   	push   esi
c001a961:	53                   	push   ebx
c001a962:	83 ec 1c             	sub    esp,0x1c
c001a965:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a969:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a96d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a971:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a978:	74 3c                	je     c001a9b6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a97a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a97e:	b9 03 00 00 00       	mov    ecx,0x3
c001a983:	fc                   	cld    
c001a984:	31 c0                	xor    eax,eax
c001a986:	0f ce                	bswap  esi
c001a988:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a98a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a98f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a993:	89 e8                	mov    eax,ebp
c001a995:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a999:	50                   	push   eax
c001a99a:	50                   	push   eax
c001a99b:	55                   	push   ebp
c001a99c:	c1 e5 0b             	shl    ebp,0xb
c001a99f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a9a3:	6a 00                	push   0x0
c001a9a5:	55                   	push   ebp
c001a9a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9aa:	50                   	push   eax
c001a9ab:	53                   	push   ebx
c001a9ac:	e8 c3 fa ff ff       	call   c001a474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a9b1:	83 c4 20             	add    esp,0x20
c001a9b4:	eb 1a                	jmp    c001a9d0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a9b6:	83 ec 0c             	sub    esp,0xc
c001a9b9:	53                   	push   ebx
c001a9ba:	e8 03 fe ff ff       	call   c001a7c2 <ATAPI::detectMedia()>
c001a9bf:	83 c4 10             	add    esp,0x10
c001a9c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9c9:	75 af                	jne    c001a97a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a9cb:	b8 02 00 00 00       	mov    eax,0x2
c001a9d0:	83 c4 1c             	add    esp,0x1c
c001a9d3:	5b                   	pop    ebx
c001a9d4:	5e                   	pop    esi
c001a9d5:	5f                   	pop    edi
c001a9d6:	5d                   	pop    ebp
c001a9d7:	c3                   	ret    

c001a9d8 <SATA::close(int, int, void*)>:
c001a9d8:	83 ec 0c             	sub    esp,0xc
c001a9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a9e5:	85 c0                	test   eax,eax
c001a9e7:	74 0c                	je     c001a9f5 <SATA::close(int, int, void*)+0x1d>
c001a9e9:	83 ec 0c             	sub    esp,0xc
c001a9ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9ee:	50                   	push   eax
c001a9ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a9f2:	83 c4 10             	add    esp,0x10
c001a9f5:	31 c0                	xor    eax,eax
c001a9f7:	83 c4 0c             	add    esp,0xc
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <SATA::powerSaving(PowerSavingLevel)>:
c001a9fc:	c3                   	ret    
c001a9fd:	90                   	nop

c001a9fe <SATA::open(int, int, void*)>:
c001a9fe:	56                   	push   esi
c001a9ff:	53                   	push   ebx
c001aa00:	50                   	push   eax
c001aa01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa09:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa13:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa19:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa27:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aa31:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aa37:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aa3e:	e8 52 d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa43:	89 c6                	mov    esi,eax
c001aa45:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa4b:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa51:	e8 3f d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa56:	39 c6                	cmp    esi,eax
c001aa58:	74 10                	je     c001aa6a <SATA::open(int, int, void*)+0x6c>
c001aa5a:	83 ec 0c             	sub    esp,0xc
c001aa5d:	68 88 f4 01 c0       	push   0xc001f488
c001aa62:	e8 28 57 ff ff       	call   c001018f <KePanic(char const*)>
c001aa67:	83 c4 10             	add    esp,0x10
c001aa6a:	83 ec 0c             	sub    esp,0xc
c001aa6d:	6a 02                	push   0x2
c001aa6f:	e8 11 e8 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001aa74:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa7a:	6a 03                	push   0x3
c001aa7c:	50                   	push   eax
c001aa7d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aa83:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001aa89:	e8 8c ee fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001aa8e:	83 c4 14             	add    esp,0x14
c001aa91:	53                   	push   ebx
c001aa92:	e8 eb 12 ff ff       	call   c000bd82 <PhysicalDisk::startCache()>
c001aa97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa9a:	e8 9b 23 ff ff       	call   c000ce3a <createPartitionsForDisk(PhysicalDisk*)>
c001aa9f:	83 c4 14             	add    esp,0x14
c001aaa2:	31 c0                	xor    eax,eax
c001aaa4:	5b                   	pop    ebx
c001aaa5:	5e                   	pop    esi
c001aaa6:	c3                   	ret    
c001aaa7:	90                   	nop

c001aaa8 <SATA::SATA()>:
c001aaa8:	83 ec 0c             	sub    esp,0xc
c001aaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaaf:	83 ec 04             	sub    esp,0x4
c001aab2:	68 00 02 00 00       	push   0x200
c001aab7:	68 9c f4 01 c0       	push   0xc001f49c
c001aabc:	50                   	push   eax
c001aabd:	e8 58 12 ff ff       	call   c000bd1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aac2:	83 c4 10             	add    esp,0x10
c001aac5:	ba 0c f5 01 c0       	mov    edx,0xc001f50c
c001aaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aace:	89 10                	mov    DWORD PTR [eax],edx
c001aad0:	90                   	nop
c001aad1:	83 c4 0c             	add    esp,0xc
c001aad4:	c3                   	ret    
c001aad5:	90                   	nop

c001aad6 <SATA::access(unsigned long long, int, void*, bool)>:
c001aad6:	55                   	push   ebp
c001aad7:	57                   	push   edi
c001aad8:	56                   	push   esi
c001aad9:	53                   	push   ebx
c001aada:	83 ec 2c             	sub    esp,0x2c
c001aadd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aae1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aae9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001aaed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aaf1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001aaf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aafa:	7e 10                	jle    c001ab0c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001aafc:	83 ec 0c             	sub    esp,0xc
c001aaff:	68 ac f4 01 c0       	push   0xc001f4ac
c001ab04:	e8 86 56 ff ff       	call   c001018f <KePanic(char const*)>
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab12:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab22:	89 d0                	mov    eax,edx
c001ab24:	c1 e0 07             	shl    eax,0x7
c001ab27:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab2b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ab35:	51                   	push   ecx
c001ab36:	8d 42 02             	lea    eax,[edx+0x2]
c001ab39:	51                   	push   ecx
c001ab3a:	c1 e0 07             	shl    eax,0x7
c001ab3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab41:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ab45:	50                   	push   eax
c001ab46:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab4c:	e8 e7 ef ff ff       	call   c0019b38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab51:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab55:	83 c4 10             	add    esp,0x10
c001ab58:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab61:	0f 84 4f 01 00 00    	je     c001acb6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab67:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab6b:	c1 e0 09             	shl    eax,0x9
c001ab6e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ab73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab77:	74 0e                	je     c001ab87 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ab79:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ab7f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ab83:	89 c1                	mov    ecx,eax
c001ab85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab8b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ab91:	8d 42 02             	lea    eax,[edx+0x2]
c001ab94:	c1 e0 07             	shl    eax,0x7
c001ab97:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab9d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aba3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aba9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abad:	c1 e1 05             	shl    ecx,0x5
c001abb0:	01 c8                	add    eax,ecx
c001abb2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001abb6:	83 e1 01             	and    ecx,0x1
c001abb9:	89 ce                	mov    esi,ecx
c001abbb:	8a 08                	mov    cl,BYTE PTR [eax]
c001abbd:	c1 e6 06             	shl    esi,0x6
c001abc0:	83 e1 bf             	and    ecx,0xffffffbf
c001abc3:	09 f1                	or     ecx,esi
c001abc5:	88 08                	mov    BYTE PTR [eax],cl
c001abc7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001abc9:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001abcf:	81 c9 05 00 01 00    	or     ecx,0x10005
c001abd5:	89 08                	mov    DWORD PTR [eax],ecx
c001abd7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abdd:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001abe3:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001abe9:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001abec:	50                   	push   eax
c001abed:	68 90 00 00 00       	push   0x90
c001abf2:	6a 00                	push   0x0
c001abf4:	56                   	push   esi
c001abf5:	e8 d6 58 fe ff       	call   c00004d0 <memset>
c001abfa:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac00:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac04:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac0a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac12:	83 c4 10             	add    esp,0x10
c001ac15:	48                   	dec    eax
c001ac16:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac1b:	89 c1                	mov    ecx,eax
c001ac1d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac23:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac28:	09 c8                	or     eax,ecx
c001ac2a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ac30:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac33:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ac3a:	66 25 00 7f          	and    ax,0x7f00
c001ac3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac42:	66 0d 27 80          	or     ax,0x8027
c001ac46:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ac4b:	66 89 06             	mov    WORD PTR [esi],ax
c001ac4e:	19 c0                	sbb    eax,eax
c001ac50:	83 e0 f0             	and    eax,0xfffffff0
c001ac53:	83 c0 35             	add    eax,0x35
c001ac56:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac59:	89 e8                	mov    eax,ebp
c001ac5b:	c1 e8 10             	shr    eax,0x10
c001ac5e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac61:	89 e8                	mov    eax,ebp
c001ac63:	c1 e8 18             	shr    eax,0x18
c001ac66:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ac69:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ac6d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ac70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac74:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ac77:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac7b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ac7f:	89 d6                	mov    esi,edx
c001ac81:	31 c0                	xor    eax,eax
c001ac83:	c1 e6 07             	shl    esi,0x7
c001ac86:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ac8a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ac90:	80 e1 88             	and    cl,0x88
c001ac93:	74 0a                	je     c001ac9f <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ac95:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ac9a:	74 0a                	je     c001aca6 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ac9c:	40                   	inc    eax
c001ac9d:	eb eb                	jmp    c001ac8a <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ac9f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001aca4:	75 17                	jne    c001acbd <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001aca6:	83 ec 0c             	sub    esp,0xc
c001aca9:	68 e5 f4 01 c0       	push   0xc001f4e5
c001acae:	e8 5c f8 fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001acb3:	83 c4 10             	add    esp,0x10
c001acb6:	b8 01 00 00 00       	mov    eax,0x1
c001acbb:	eb 5d                	jmp    c001ad1a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001acbd:	b8 01 00 00 00       	mov    eax,0x1
c001acc2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001acc6:	c1 e2 07             	shl    edx,0x7
c001acc9:	d3 e0                	shl    eax,cl
c001accb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001accf:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001acd5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001acdb:	85 c8                	test   eax,ecx
c001acdd:	74 16                	je     c001acf5 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001acdf:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ace5:	0f ba e1 1e          	bt     ecx,0x1e
c001ace9:	73 ea                	jae    c001acd5 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001aceb:	83 ec 0c             	sub    esp,0xc
c001acee:	68 f3 f4 01 c0       	push   0xc001f4f3
c001acf3:	eb b9                	jmp    c001acae <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001acf5:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001acfb:	0f ba e0 1e          	bt     eax,0x1e
c001acff:	72 b5                	jb     c001acb6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad01:	31 c0                	xor    eax,eax
c001ad03:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad08:	75 10                	jne    c001ad1a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad0a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad10:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad1a:	83 c4 2c             	add    esp,0x2c
c001ad1d:	5b                   	pop    ebx
c001ad1e:	5e                   	pop    esi
c001ad1f:	5f                   	pop    edi
c001ad20:	5d                   	pop    ebp
c001ad21:	c3                   	ret    

c001ad22 <SATA::read(unsigned long long, int, void*)>:
c001ad22:	57                   	push   edi
c001ad23:	b8 04 00 00 00       	mov    eax,0x4
c001ad28:	56                   	push   esi
c001ad29:	53                   	push   ebx
c001ad2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad32:	8d 7a ff             	lea    edi,[edx-0x1]
c001ad35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad3d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ad43:	77 25                	ja     c001ad6a <SATA::read(unsigned long long, int, void*)+0x48>
c001ad45:	b8 06 00 00 00       	mov    eax,0x6
c001ad4a:	85 f6                	test   esi,esi
c001ad4c:	74 1c                	je     c001ad6a <SATA::read(unsigned long long, int, void*)+0x48>
c001ad4e:	50                   	push   eax
c001ad4f:	50                   	push   eax
c001ad50:	6a 00                	push   0x0
c001ad52:	56                   	push   esi
c001ad53:	52                   	push   edx
c001ad54:	53                   	push   ebx
c001ad55:	51                   	push   ecx
c001ad56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad5a:	e8 77 fd ff ff       	call   c001aad6 <SATA::access(unsigned long long, int, void*, bool)>
c001ad5f:	83 c4 20             	add    esp,0x20
c001ad62:	85 c0                	test   eax,eax
c001ad64:	0f 95 c0             	setne  al
c001ad67:	0f b6 c0             	movzx  eax,al
c001ad6a:	5b                   	pop    ebx
c001ad6b:	5e                   	pop    esi
c001ad6c:	5f                   	pop    edi
c001ad6d:	c3                   	ret    

c001ad6e <SATA::write(unsigned long long, int, void*)>:
c001ad6e:	55                   	push   ebp
c001ad6f:	b8 04 00 00 00       	mov    eax,0x4
c001ad74:	57                   	push   edi
c001ad75:	56                   	push   esi
c001ad76:	53                   	push   ebx
c001ad77:	83 ec 0c             	sub    esp,0xc
c001ad7a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad82:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ad85:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ad89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ad8d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ad93:	77 3d                	ja     c001add2 <SATA::write(unsigned long long, int, void*)+0x64>
c001ad95:	b8 06 00 00 00       	mov    eax,0x6
c001ad9a:	85 ed                	test   ebp,ebp
c001ad9c:	74 34                	je     c001add2 <SATA::write(unsigned long long, int, void*)+0x64>
c001ad9e:	c1 e3 09             	shl    ebx,0x9
c001ada1:	01 eb                	add    ebx,ebp
c001ada3:	89 d6                	mov    esi,edx
c001ada5:	89 cf                	mov    edi,ecx
c001ada7:	83 c6 01             	add    esi,0x1
c001adaa:	83 d7 00             	adc    edi,0x0
c001adad:	50                   	push   eax
c001adae:	50                   	push   eax
c001adaf:	6a 01                	push   0x1
c001adb1:	55                   	push   ebp
c001adb2:	81 c5 00 02 00 00    	add    ebp,0x200
c001adb8:	6a 01                	push   0x1
c001adba:	51                   	push   ecx
c001adbb:	52                   	push   edx
c001adbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001adc0:	e8 11 fd ff ff       	call   c001aad6 <SATA::access(unsigned long long, int, void*, bool)>
c001adc5:	83 c4 20             	add    esp,0x20
c001adc8:	89 f2                	mov    edx,esi
c001adca:	89 f9                	mov    ecx,edi
c001adcc:	39 dd                	cmp    ebp,ebx
c001adce:	75 d3                	jne    c001ada3 <SATA::write(unsigned long long, int, void*)+0x35>
c001add0:	31 c0                	xor    eax,eax
c001add2:	83 c4 0c             	add    esp,0xc
c001add5:	5b                   	pop    ebx
c001add6:	5e                   	pop    esi
c001add7:	5f                   	pop    edi
c001add8:	5d                   	pop    ebp
c001add9:	c3                   	ret    

c001adda <SATAPI::write(unsigned long long, int, void*)>:
c001adda:	b8 03 00 00 00       	mov    eax,0x3
c001addf:	c3                   	ret    

c001ade0 <SATAPI::close(int, int, void*)>:
c001ade0:	83 ec 0c             	sub    esp,0xc
c001ade3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aded:	85 c0                	test   eax,eax
c001adef:	74 0c                	je     c001adfd <SATAPI::close(int, int, void*)+0x1d>
c001adf1:	83 ec 0c             	sub    esp,0xc
c001adf4:	8b 10                	mov    edx,DWORD PTR [eax]
c001adf6:	50                   	push   eax
c001adf7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001adfa:	83 c4 10             	add    esp,0x10
c001adfd:	31 c0                	xor    eax,eax
c001adff:	83 c4 0c             	add    esp,0xc
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <SATAPI::SATAPI()>:
c001ae04:	83 ec 0c             	sub    esp,0xc
c001ae07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0b:	83 ec 04             	sub    esp,0x4
c001ae0e:	68 00 08 00 00       	push   0x800
c001ae13:	68 3c f5 01 c0       	push   0xc001f53c
c001ae18:	50                   	push   eax
c001ae19:	e8 fc 0e ff ff       	call   c000bd1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae1e:	83 c4 10             	add    esp,0x10
c001ae21:	ba 44 f6 01 c0       	mov    edx,0xc001f644
c001ae26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2a:	89 10                	mov    DWORD PTR [eax],edx
c001ae2c:	90                   	nop
c001ae2d:	83 c4 0c             	add    esp,0xc
c001ae30:	c3                   	ret    
c001ae31:	90                   	nop

c001ae32 <SATAPI::diskRemoved()>:
c001ae32:	c3                   	ret    
c001ae33:	90                   	nop

c001ae34 <SATAPI::diskInserted()>:
c001ae34:	83 ec 18             	sub    esp,0x18
c001ae37:	68 48 f5 01 c0       	push   0xc001f548
c001ae3c:	e8 ce f6 fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001ae41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae45:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ae4c:	83 c4 1c             	add    esp,0x1c
c001ae4f:	c3                   	ret    

c001ae50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ae50:	55                   	push   ebp
c001ae51:	57                   	push   edi
c001ae52:	56                   	push   esi
c001ae53:	53                   	push   ebx
c001ae54:	83 ec 38             	sub    esp,0x38
c001ae57:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ae5b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ae5f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae63:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae67:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae6b:	68 60 f5 01 c0       	push   0xc001f560
c001ae70:	e8 9a f6 fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001ae75:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ae7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ae81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae85:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ae8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae8f:	83 c0 02             	add    eax,0x2
c001ae92:	c1 e0 07             	shl    eax,0x7
c001ae95:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ae99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aea1:	c1 e0 07             	shl    eax,0x7
c001aea4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aea8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aeac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aeb6:	58                   	pop    eax
c001aeb7:	5a                   	pop    edx
c001aeb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aebc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aec2:	e8 71 ec ff ff       	call   c0019b38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aec7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aecb:	83 c4 10             	add    esp,0x10
c001aece:	b8 01 00 00 00       	mov    eax,0x1
c001aed3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aed8:	0f 84 49 02 00 00    	je     c001b127 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aede:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aee8:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeea:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aef0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aef6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aefa:	c1 e1 05             	shl    ecx,0x5
c001aefd:	01 c8                	add    eax,ecx
c001aeff:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af01:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af07:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af0d:	89 08                	mov    DWORD PTR [eax],ecx
c001af0f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af15:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af1b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af21:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af24:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af27:	50                   	push   eax
c001af28:	68 90 00 00 00       	push   0x90
c001af2d:	6a 00                	push   0x0
c001af2f:	53                   	push   ebx
c001af30:	e8 9b 55 fe ff       	call   c00004d0 <memset>
c001af35:	b9 0c 00 00 00       	mov    ecx,0xc
c001af3a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001af3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af40:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001af46:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001af4a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001af50:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001af54:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af58:	48                   	dec    eax
c001af59:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af5e:	89 c1                	mov    ecx,eax
c001af60:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001af66:	25 00 00 c0 ff       	and    eax,0xffc00000
c001af6b:	09 c8                	or     eax,ecx
c001af6d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001af73:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001af76:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001af7d:	66 25 00 7f          	and    ax,0x7f00
c001af81:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af85:	66 0d 27 80          	or     ax,0x8027
c001af89:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001af8d:	66 89 03             	mov    WORD PTR [ebx],ax
c001af90:	89 d0                	mov    eax,edx
c001af92:	c1 ea 18             	shr    edx,0x18
c001af95:	c1 e8 10             	shr    eax,0x10
c001af98:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001af9b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001af9e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001afa2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001afa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afa9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001afac:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afb0:	83 c4 10             	add    esp,0x10
c001afb3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001afb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afbb:	31 c0                	xor    eax,eax
c001afbd:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001afc3:	80 e1 88             	and    cl,0x88
c001afc6:	74 0a                	je     c001afd2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001afc8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afcd:	74 0a                	je     c001afd9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001afcf:	40                   	inc    eax
c001afd0:	eb eb                	jmp    c001afbd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001afd2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afd7:	75 43                	jne    c001b01c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001afd9:	83 ec 0c             	sub    esp,0xc
c001afdc:	68 7a f5 01 c0       	push   0xc001f57a
c001afe1:	e8 29 f5 fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001afe6:	58                   	pop    eax
c001afe7:	5a                   	pop    edx
c001afe8:	68 8f f5 01 c0       	push   0xc001f58f
c001afed:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001aff3:	e8 3e d7 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001aff8:	59                   	pop    ecx
c001aff9:	5b                   	pop    ebx
c001affa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001affe:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b004:	e8 c9 eb ff ff       	call   c0019bd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b009:	5e                   	pop    esi
c001b00a:	5f                   	pop    edi
c001b00b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b00f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b015:	e8 98 eb ff ff       	call   c0019bb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b01a:	eb 48                	jmp    c001b064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b01c:	be 01 00 00 00       	mov    esi,0x1
c001b021:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b025:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b029:	d3 e6                	shl    esi,cl
c001b02b:	c1 e7 07             	shl    edi,0x7
c001b02e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b034:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b039:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b03d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b043:	85 c6                	test   esi,eax
c001b045:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b04b:	0f 84 a3 00 00 00    	je     c001b0f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b051:	0f ba e0 1e          	bt     eax,0x1e
c001b055:	73 1a                	jae    c001b071 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b057:	83 ec 0c             	sub    esp,0xc
c001b05a:	68 a1 f5 01 c0       	push   0xc001f5a1
c001b05f:	e8 ab f4 fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001b064:	83 c4 10             	add    esp,0x10
c001b067:	b8 01 00 00 00       	mov    eax,0x1
c001b06c:	e9 b6 00 00 00       	jmp    c001b127 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b071:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b077:	83 f8 0d             	cmp    eax,0xd
c001b07a:	77 0a                	ja     c001b086 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	68 c8 00 00 00       	push   0xc8
c001b084:	eb 28                	jmp    c001b0ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b086:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b08c:	83 f8 0d             	cmp    eax,0xd
c001b08f:	77 0a                	ja     c001b09b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b091:	83 ec 0c             	sub    esp,0xc
c001b094:	68 58 02 00 00       	push   0x258
c001b099:	eb 13                	jmp    c001b0ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b09b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b0a1:	83 f8 06             	cmp    eax,0x6
c001b0a4:	77 10                	ja     c001b0b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b0a6:	83 ec 0c             	sub    esp,0xc
c001b0a9:	68 dc 05 00 00       	push   0x5dc
c001b0ae:	e8 d1 89 ff ff       	call   c0013a84 <milliTenthSleep(unsigned int)>
c001b0b3:	83 c4 10             	add    esp,0x10
c001b0b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b0ba:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b0bd:	75 06                	jne    c001b0c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b0bf:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b0c3:	74 15                	je     c001b0da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0c5:	83 fb 06             	cmp    ebx,0x6
c001b0c8:	77 10                	ja     c001b0da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0ca:	83 ec 0c             	sub    esp,0xc
c001b0cd:	68 c4 09 00 00       	push   0x9c4
c001b0d2:	e8 ad 89 ff ff       	call   c0013a84 <milliTenthSleep(unsigned int)>
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	43                   	inc    ebx
c001b0db:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b0e1:	0f 85 56 ff ff ff    	jne    c001b03d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b0e7:	83 ec 0c             	sub    esp,0xc
c001b0ea:	68 b4 f5 01 c0       	push   0xc001f5b4
c001b0ef:	e9 6b ff ff ff       	jmp    c001b05f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b0f4:	0f ba e0 1e          	bt     eax,0x1e
c001b0f8:	73 0d                	jae    c001b107 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b0fa:	83 ec 0c             	sub    esp,0xc
c001b0fd:	68 c8 f5 01 c0       	push   0xc001f5c8
c001b102:	e9 58 ff ff ff       	jmp    c001b05f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b107:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b10c:	74 17                	je     c001b125 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b10e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b113:	74 10                	je     c001b125 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b115:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b11b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b11f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b123:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b125:	31 c0                	xor    eax,eax
c001b127:	83 c4 2c             	add    esp,0x2c
c001b12a:	5b                   	pop    ebx
c001b12b:	5e                   	pop    esi
c001b12c:	5f                   	pop    edi
c001b12d:	5d                   	pop    ebp
c001b12e:	c3                   	ret    
c001b12f:	90                   	nop

c001b130 <SATAPI::eject()>:
c001b130:	57                   	push   edi
c001b131:	b9 03 00 00 00       	mov    ecx,0x3
c001b136:	83 ec 18             	sub    esp,0x18
c001b139:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b13d:	fc                   	cld    
c001b13e:	31 c0                	xor    eax,eax
c001b140:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b142:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b147:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b14c:	50                   	push   eax
c001b14d:	6a 00                	push   0x0
c001b14f:	6a 00                	push   0x0
c001b151:	6a 00                	push   0x0
c001b153:	6a 00                	push   0x0
c001b155:	6a 02                	push   0x2
c001b157:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b15b:	50                   	push   eax
c001b15c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b160:	e8 eb fc ff ff       	call   c001ae50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b165:	31 c0                	xor    eax,eax
c001b167:	83 c4 38             	add    esp,0x38
c001b16a:	5f                   	pop    edi
c001b16b:	c3                   	ret    

c001b16c <SATAPI::detectMedia()>:
c001b16c:	53                   	push   ebx
c001b16d:	83 ec 14             	sub    esp,0x14
c001b170:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b174:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b17a:	e8 81 23 ff ff       	call   c000d500 <VCache::writeWriteBuffer()>
c001b17f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b185:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b189:	83 c4 18             	add    esp,0x18
c001b18c:	5b                   	pop    ebx
c001b18d:	e9 5e 23 ff ff       	jmp    c000d4f0 <VCache::invalidateReadBuffer()>

c001b192 <SATAPI::open(int, int, void*)>:
c001b192:	56                   	push   esi
c001b193:	53                   	push   ebx
c001b194:	51                   	push   ecx
c001b195:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b19d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b1a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b1ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b1b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1bb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b1c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b1cb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b1d2:	e8 be c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b1d7:	89 c6                	mov    esi,eax
c001b1d9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b1df:	81 c6 00 10 00 00    	add    esi,0x1000
c001b1e5:	e8 ab c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b1ea:	39 c6                	cmp    esi,eax
c001b1ec:	74 10                	je     c001b1fe <SATAPI::open(int, int, void*)+0x6c>
c001b1ee:	83 ec 0c             	sub    esp,0xc
c001b1f1:	68 dd f5 01 c0       	push   0xc001f5dd
c001b1f6:	e8 94 4f ff ff       	call   c001018f <KePanic(char const*)>
c001b1fb:	83 c4 10             	add    esp,0x10
c001b1fe:	83 ec 0c             	sub    esp,0xc
c001b201:	6a 02                	push   0x2
c001b203:	e8 7d e0 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b208:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b20e:	6a 03                	push   0x3
c001b210:	50                   	push   eax
c001b211:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b217:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b21d:	e8 f8 e6 fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b222:	83 c4 14             	add    esp,0x14
c001b225:	68 74 01 00 00       	push   0x174
c001b22a:	e8 8a c5 fe ff       	call   c00077b9 <malloc>
c001b22f:	83 c4 0c             	add    esp,0xc
c001b232:	89 c6                	mov    esi,eax
c001b234:	6a 00                	push   0x0
c001b236:	68 ff ff ff 7f       	push   0x7fffffff
c001b23b:	6a 00                	push   0x0
c001b23d:	6a 00                	push   0x0
c001b23f:	53                   	push   ebx
c001b240:	68 f3 f5 01 c0       	push   0xc001f5f3
c001b245:	50                   	push   eax
c001b246:	e8 bb 17 ff ff       	call   c000ca06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b24b:	83 c4 14             	add    esp,0x14
c001b24e:	56                   	push   esi
c001b24f:	e8 68 18 ff ff       	call   c000cabc <LogicalDisk::assignDriveLetter()>
c001b254:	5a                   	pop    edx
c001b255:	0f be c0             	movsx  eax,al
c001b258:	59                   	pop    ecx
c001b259:	50                   	push   eax
c001b25a:	68 40 f4 01 c0       	push   0xc001f440
c001b25f:	e8 ab f2 fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001b264:	58                   	pop    eax
c001b265:	5a                   	pop    edx
c001b266:	56                   	push   esi
c001b267:	53                   	push   ebx
c001b268:	e8 df 06 ff ff       	call   c000b94c <Device::addChild(Device*)>
c001b26d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b273:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b276:	e8 07 0b ff ff       	call   c000bd82 <PhysicalDisk::startCache()>
c001b27b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b282:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b285:	e8 e2 fe ff ff       	call   c001b16c <SATAPI::detectMedia()>
c001b28a:	83 c4 14             	add    esp,0x14
c001b28d:	31 c0                	xor    eax,eax
c001b28f:	5b                   	pop    ebx
c001b290:	5e                   	pop    esi
c001b291:	c3                   	ret    

c001b292 <SATAPI::read(unsigned long long, int, void*)>:
c001b292:	57                   	push   edi
c001b293:	56                   	push   esi
c001b294:	53                   	push   ebx
c001b295:	83 ec 3c             	sub    esp,0x3c
c001b298:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b29c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b2a0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b2a4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b2a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b2b0:	68 01 f6 01 c0       	push   0xc001f601
c001b2b5:	e8 55 f2 fe ff       	call   c000a50f <Dbg::kprintf(char const*, ...)>
c001b2ba:	83 c4 10             	add    esp,0x10
c001b2bd:	83 fe 04             	cmp    esi,0x4
c001b2c0:	7e 10                	jle    c001b2d2 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b2c2:	83 ec 0c             	sub    esp,0xc
c001b2c5:	68 12 f6 01 c0       	push   0xc001f612
c001b2ca:	e8 c0 4e ff ff       	call   c001018f <KePanic(char const*)>
c001b2cf:	83 c4 10             	add    esp,0x10
c001b2d2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b2d8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b2de:	51                   	push   ecx
c001b2df:	50                   	push   eax
c001b2e0:	83 c0 02             	add    eax,0x2
c001b2e3:	c1 e0 07             	shl    eax,0x7
c001b2e6:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b2ec:	50                   	push   eax
c001b2ed:	52                   	push   edx
c001b2ee:	e8 09 e9 ff ff       	call   c0019bfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b2f3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b2f7:	b9 03 00 00 00       	mov    ecx,0x3
c001b2fc:	fc                   	cld    
c001b2fd:	31 c0                	xor    eax,eax
c001b2ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b301:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b306:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b30b:	83 c4 0c             	add    esp,0xc
c001b30e:	6a 00                	push   0x0
c001b310:	6a 00                	push   0x0
c001b312:	6a 00                	push   0x0
c001b314:	6a 00                	push   0x0
c001b316:	6a 02                	push   0x2
c001b318:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b31c:	50                   	push   eax
c001b31d:	53                   	push   ebx
c001b31e:	e8 2d fb ff ff       	call   c001ae50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b323:	83 c4 20             	add    esp,0x20
c001b326:	85 c0                	test   eax,eax
c001b328:	75 44                	jne    c001b36e <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b32a:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b32e:	b9 03 00 00 00       	mov    ecx,0x3
c001b333:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b339:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b33e:	0f c8                	bswap  eax
c001b340:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b344:	89 f0                	mov    eax,esi
c001b346:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b34a:	50                   	push   eax
c001b34b:	56                   	push   esi
c001b34c:	c1 e6 0b             	shl    esi,0xb
c001b34f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b353:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b35b:	56                   	push   esi
c001b35c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b360:	50                   	push   eax
c001b361:	53                   	push   ebx
c001b362:	e8 e9 fa ff ff       	call   c001ae50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b367:	83 c4 20             	add    esp,0x20
c001b36a:	85 c0                	test   eax,eax
c001b36c:	74 14                	je     c001b382 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b36e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b372:	83 ec 0c             	sub    esp,0xc
c001b375:	53                   	push   ebx
c001b376:	e8 f1 fd ff ff       	call   c001b16c <SATAPI::detectMedia()>
c001b37b:	83 c4 10             	add    esp,0x10
c001b37e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b382:	83 c4 30             	add    esp,0x30
c001b385:	5b                   	pop    ebx
c001b386:	5e                   	pop    esi
c001b387:	5f                   	pop    edi
c001b388:	c3                   	ret    
c001b389:	90                   	nop

c001b38a <IOAPIC::close(int, int, void*)>:
c001b38a:	b8 00 00 00 00       	mov    eax,0x0
c001b38f:	c3                   	ret    

c001b390 <apicGetBase()>:
c001b390:	55                   	push   ebp
c001b391:	89 e5                	mov    ebp,esp
c001b393:	83 ec 18             	sub    esp,0x18
c001b396:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b39b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b3a1:	83 e0 08             	and    eax,0x8
c001b3a4:	84 c0                	test   al,al
c001b3a6:	75 07                	jne    c001b3af <apicGetBase()+0x1f>
c001b3a8:	b8 00 00 00 00       	mov    eax,0x0
c001b3ad:	eb 21                	jmp    c001b3d0 <apicGetBase()+0x40>
c001b3af:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3b4:	83 ec 08             	sub    esp,0x8
c001b3b7:	6a 1b                	push   0x1b
c001b3b9:	50                   	push   eax
c001b3ba:	e8 33 ba fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b3bf:	83 c4 10             	add    esp,0x10
c001b3c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b3c5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b3c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3cb:	25 00 00 ff ff       	and    eax,0xffff0000
c001b3d0:	c9                   	leave  
c001b3d1:	c3                   	ret    

c001b3d2 <IOAPIC::IOAPIC()>:
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3d9:	83 ec 08             	sub    esp,0x8
c001b3dc:	68 74 f6 01 c0       	push   0xc001f674
c001b3e1:	50                   	push   eax
c001b3e2:	e8 fd 06 ff ff       	call   c000bae4 <Device::Device(char const*)>
c001b3e7:	83 c4 10             	add    esp,0x10
c001b3ea:	ba 84 f6 01 c0       	mov    edx,0xc001f684
c001b3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f3:	89 10                	mov    DWORD PTR [eax],edx
c001b3f5:	90                   	nop
c001b3f6:	83 c4 0c             	add    esp,0xc
c001b3f9:	c3                   	ret    

c001b3fa <apicOpen()>:
c001b3fa:	55                   	push   ebp
c001b3fb:	89 e5                	mov    ebp,esp
c001b3fd:	53                   	push   ebx
c001b3fe:	83 ec 34             	sub    esp,0x34
c001b401:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b406:	83 f0 01             	xor    eax,0x1
c001b409:	84 c0                	test   al,al
c001b40b:	0f 84 9d 00 00 00    	je     c001b4ae <apicOpen()+0xb4>
c001b411:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b415:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b41a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b41d:	0f 83 84 00 00 00    	jae    c001b4a7 <apicOpen()+0xad>
c001b423:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b42a:	83 ec 0c             	sub    esp,0xc
c001b42d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b430:	e8 84 c3 fe ff       	call   c00077b9 <malloc>
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	89 c3                	mov    ebx,eax
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	53                   	push   ebx
c001b43e:	e8 8f ff ff ff       	call   c001b3d2 <IOAPIC::IOAPIC()>
c001b443:	83 c4 10             	add    esp,0x10
c001b446:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b449:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b44c:	25 ff 00 00 00       	and    eax,0xff
c001b451:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b454:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b45b:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b460:	40                   	inc    eax
c001b461:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b466:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b46b:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b471:	83 ec 08             	sub    esp,0x8
c001b474:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b477:	50                   	push   eax
c001b478:	e8 cf 04 ff ff       	call   c000b94c <Device::addChild(Device*)>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b483:	8b 00                	mov    eax,DWORD PTR [eax]
c001b485:	83 c0 08             	add    eax,0x8
c001b488:	8b 10                	mov    edx,DWORD PTR [eax]
c001b48a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b48d:	25 ff 00 00 00       	and    eax,0xff
c001b492:	6a 00                	push   0x0
c001b494:	6a 00                	push   0x0
c001b496:	50                   	push   eax
c001b497:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b49a:	ff d2                	call   edx
c001b49c:	83 c4 10             	add    esp,0x10
c001b49f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b4a2:	e9 6e ff ff ff       	jmp    c001b415 <apicOpen()+0x1b>
c001b4a7:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b4ae:	e8 dd fe ff ff       	call   c001b390 <apicGetBase()>
c001b4b3:	05 f0 00 00 00       	add    eax,0xf0
c001b4b8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b4bb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4be:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4c0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b4c3:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b4ca:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b4d1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4d4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b4d7:	89 10                	mov    DWORD PTR [eax],edx
c001b4d9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b4e0:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b4e5:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b4e8:	7d 70                	jge    c001b55a <apicOpen()+0x160>
c001b4ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4ed:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b4f4:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b4f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4fa:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b501:	c1 e8 08             	shr    eax,0x8
c001b504:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b508:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b50b:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b512:	c1 e8 18             	shr    eax,0x18
c001b515:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b518:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b51c:	75 37                	jne    c001b555 <apicOpen()+0x15b>
c001b51e:	e8 6d fe ff ff       	call   c001b390 <apicGetBase()>
c001b523:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b527:	75 07                	jne    c001b530 <apicOpen()+0x136>
c001b529:	ba 60 03 00 00       	mov    edx,0x360
c001b52e:	eb 05                	jmp    c001b535 <apicOpen()+0x13b>
c001b530:	ba 50 03 00 00       	mov    edx,0x350
c001b535:	01 d0                	add    eax,edx
c001b537:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b53a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b53d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b53f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b542:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b549:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b54d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b550:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b553:	89 10                	mov    DWORD PTR [eax],edx
c001b555:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b558:	eb 86                	jmp    c001b4e0 <apicOpen()+0xe6>
c001b55a:	90                   	nop
c001b55b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b55e:	c9                   	leave  
c001b55f:	c3                   	ret    

c001b560 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b560:	55                   	push   ebp
c001b561:	89 e5                	mov    ebp,esp
c001b563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b566:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b56c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b56f:	72 1d                	jb     c001b58e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b574:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b57a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b57d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b583:	01 d0                	add    eax,edx
c001b585:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b588:	73 04                	jae    c001b58e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b58a:	b0 01                	mov    al,0x1
c001b58c:	eb 02                	jmp    c001b590 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b58e:	b0 00                	mov    al,0x0
c001b590:	5d                   	pop    ebp
c001b591:	c3                   	ret    

c001b592 <IOAPIC::read(int)>:
c001b592:	55                   	push   ebp
c001b593:	89 e5                	mov    ebp,esp
c001b595:	83 ec 10             	sub    esp,0x10
c001b598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b59b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b5a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b5a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b5a7:	31 d2                	xor    edx,edx
c001b5a9:	88 c2                	mov    dl,al
c001b5ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5ae:	89 10                	mov    DWORD PTR [eax],edx
c001b5b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5b3:	83 c0 10             	add    eax,0x10
c001b5b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5b8:	c9                   	leave  
c001b5b9:	c3                   	ret    

c001b5ba <IOAPIC::open(int, int, void*)>:
c001b5ba:	55                   	push   ebp
c001b5bb:	89 e5                	mov    ebp,esp
c001b5bd:	57                   	push   edi
c001b5be:	56                   	push   esi
c001b5bf:	53                   	push   ebx
c001b5c0:	83 ec 04             	sub    esp,0x4
c001b5c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b5c9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5d8:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5f1:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b5f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5fb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b604:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b60a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b613:	89 c6                	mov    esi,eax
c001b615:	81 e6 ff 00 00 00    	and    esi,0xff
c001b61b:	89 d0                	mov    eax,edx
c001b61d:	ba 00 00 00 00       	mov    edx,0x0
c001b622:	89 c7                	mov    edi,eax
c001b624:	83 e7 ff             	and    edi,0xffffffff
c001b627:	89 f9                	mov    ecx,edi
c001b629:	89 d0                	mov    eax,edx
c001b62b:	25 ff 00 00 00       	and    eax,0xff
c001b630:	89 c3                	mov    ebx,eax
c001b632:	89 c8                	mov    eax,ecx
c001b634:	89 da                	mov    edx,ebx
c001b636:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b639:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b63c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b640:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b644:	83 e0 00             	and    eax,0x0
c001b647:	09 d0                	or     eax,edx
c001b649:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b650:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b656:	8d 50 01             	lea    edx,[eax+0x1]
c001b659:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b65c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b662:	31 d2                	xor    edx,edx
c001b664:	88 c2                	mov    dl,al
c001b666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b669:	83 c2 08             	add    edx,0x8
c001b66c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b670:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b676:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b67c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b680:	6a 01                	push   0x1
c001b682:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b685:	e8 08 ff ff ff       	call   c001b592 <IOAPIC::read(int)>
c001b68a:	83 c4 08             	add    esp,0x8
c001b68d:	c1 f8 10             	sar    eax,0x10
c001b690:	25 ff 00 00 00       	and    eax,0xff
c001b695:	8d 50 01             	lea    edx,[eax+0x1]
c001b698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b69b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b6a1:	b8 00 00 00 00       	mov    eax,0x0
c001b6a6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b6a9:	5b                   	pop    ebx
c001b6aa:	5e                   	pop    esi
c001b6ab:	5f                   	pop    edi
c001b6ac:	5d                   	pop    ebp
c001b6ad:	c3                   	ret    

c001b6ae <IOAPIC::write(int, int)>:
c001b6ae:	55                   	push   ebp
c001b6af:	89 e5                	mov    ebp,esp
c001b6b1:	83 ec 10             	sub    esp,0x10
c001b6b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6c3:	31 d2                	xor    edx,edx
c001b6c5:	88 c2                	mov    dl,al
c001b6c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6ca:	89 10                	mov    DWORD PTR [eax],edx
c001b6cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6cf:	8d 50 10             	lea    edx,[eax+0x10]
c001b6d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6d5:	89 02                	mov    DWORD PTR [edx],eax
c001b6d7:	90                   	nop
c001b6d8:	c9                   	leave  
c001b6d9:	c3                   	ret    

c001b6da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b6da:	55                   	push   ebp
c001b6db:	89 e5                	mov    ebp,esp
c001b6dd:	53                   	push   ebx
c001b6de:	83 ec 2c             	sub    esp,0x2c
c001b6e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6e4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b6e7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b6ea:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b6ed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b6f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6f3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6f6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b6f9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b6fc:	88 d8                	mov    al,bl
c001b6fe:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b701:	88 c8                	mov    al,cl
c001b703:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b706:	88 d0                	mov    al,dl
c001b708:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b70b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b70e:	25 ff 00 00 00       	and    eax,0xff
c001b713:	83 c0 08             	add    eax,0x8
c001b716:	01 c0                	add    eax,eax
c001b718:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b71b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b71e:	25 ff 00 00 00       	and    eax,0xff
c001b723:	83 c0 08             	add    eax,0x8
c001b726:	01 c0                	add    eax,eax
c001b728:	40                   	inc    eax
c001b729:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b72c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b72f:	50                   	push   eax
c001b730:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b733:	e8 5a fe ff ff       	call   c001b592 <IOAPIC::read(int)>
c001b738:	83 c4 08             	add    esp,0x8
c001b73b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b73e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b745:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b748:	c1 e0 18             	shl    eax,0x18
c001b74b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b74e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b751:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b754:	52                   	push   edx
c001b755:	50                   	push   eax
c001b756:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b759:	e8 50 ff ff ff       	call   c001b6ae <IOAPIC::write(int, int)>
c001b75e:	83 c4 0c             	add    esp,0xc
c001b761:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b764:	50                   	push   eax
c001b765:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b768:	e8 25 fe ff ff       	call   c001b592 <IOAPIC::read(int)>
c001b76d:	83 c4 08             	add    esp,0x8
c001b770:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b773:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b77a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b781:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b788:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b78c:	74 09                	je     c001b797 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b78e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b795:	eb 07                	jmp    c001b79e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b797:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b79e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b7a2:	74 09                	je     c001b7ad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b7a4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b7ab:	eb 07                	jmp    c001b7b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b7ad:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b7b4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b7bb:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b7be:	25 ff 00 00 00       	and    eax,0xff
c001b7c3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b7c6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b7c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7cc:	52                   	push   edx
c001b7cd:	50                   	push   eax
c001b7ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7d1:	e8 d8 fe ff ff       	call   c001b6ae <IOAPIC::write(int, int)>
c001b7d6:	83 c4 0c             	add    esp,0xc
c001b7d9:	90                   	nop
c001b7da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b7dd:	c9                   	leave  
c001b7de:	c3                   	ret    
c001b7df:	90                   	nop

c001b7e0 <APICTimer::close(int, int, void*)>:
c001b7e0:	b8 00 00 00 00       	mov    eax,0x0
c001b7e5:	c3                   	ret    
c001b7e6:	66 90                	xchg   ax,ax

c001b7e8 <apicTimerHandler(regs*, void*)>:
c001b7e8:	83 ec 0c             	sub    esp,0xc
c001b7eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7f1:	b8 10 27 00 00       	mov    eax,0x2710
c001b7f6:	ba 00 00 00 00       	mov    edx,0x0
c001b7fb:	f7 f1                	div    ecx
c001b7fd:	83 ec 0c             	sub    esp,0xc
c001b800:	50                   	push   eax
c001b801:	e8 1a 1a ff ff       	call   c000d220 <timerHandler(unsigned int)>
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	90                   	nop
c001b80a:	83 c4 0c             	add    esp,0xc
c001b80d:	c3                   	ret    
c001b80e:	66 90                	xchg   ax,ax

c001b810 <APICTimer::open(int, int, void*)>:
c001b810:	83 ec 0c             	sub    esp,0xc
c001b813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b817:	8b 00                	mov    eax,DWORD PTR [eax]
c001b819:	83 c0 24             	add    eax,0x24
c001b81c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b81e:	83 ec 08             	sub    esp,0x8
c001b821:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b825:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b829:	ff d0                	call   eax
c001b82b:	83 c4 10             	add    esp,0x10
c001b82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b836:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b844:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b84a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b84e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	51                   	push   ecx
c001b858:	6a 01                	push   0x1
c001b85a:	68 e8 b7 01 c0       	push   0xc001b7e8
c001b85f:	52                   	push   edx
c001b860:	50                   	push   eax
c001b861:	e8 92 00 ff ff       	call   c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b866:	83 c4 20             	add    esp,0x20
c001b869:	89 c2                	mov    edx,eax
c001b86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b86f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b875:	b8 00 00 00 00       	mov    eax,0x0
c001b87a:	83 c4 0c             	add    esp,0xc
c001b87d:	c3                   	ret    
c001b87e:	66 90                	xchg   ax,ax

c001b880 <APICTimer::write(int)>:
c001b880:	83 ec 0c             	sub    esp,0xc
c001b883:	83 ec 0c             	sub    esp,0xc
c001b886:	68 a8 f6 01 c0       	push   0xc001f6a8
c001b88b:	e8 ff 48 ff ff       	call   c001018f <KePanic(char const*)>
c001b890:	83 c4 10             	add    esp,0x10
c001b893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b897:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b89b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8a1:	90                   	nop
c001b8a2:	83 c4 0c             	add    esp,0xc
c001b8a5:	c3                   	ret    
c001b8a6:	66 90                	xchg   ax,ax

c001b8a8 <APICTimer::APICTimer()>:
c001b8a8:	83 ec 0c             	sub    esp,0xc
c001b8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8af:	83 ec 08             	sub    esp,0x8
c001b8b2:	68 b8 f6 01 c0       	push   0xc001f6b8
c001b8b7:	50                   	push   eax
c001b8b8:	e8 97 18 ff ff       	call   c000d154 <Timer::Timer(char const*)>
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	ba cc f6 01 c0       	mov    edx,0xc001f6cc
c001b8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c9:	89 10                	mov    DWORD PTR [eax],edx
c001b8cb:	90                   	nop
c001b8cc:	83 c4 0c             	add    esp,0xc
c001b8cf:	c3                   	ret    

c001b8d0 <PIT::write(int)>:
c001b8d0:	83 ec 10             	sub    esp,0x10
c001b8d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8e5:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b8ea:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b8ef:	99                   	cdq    
c001b8f0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b8f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8f8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b8ff:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b904:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b908:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b90d:	ee                   	out    dx,al
c001b90e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b912:	25 ff 00 00 00       	and    eax,0xff
c001b917:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b91e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b922:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b926:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b92b:	ee                   	out    dx,al
c001b92c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b930:	c1 f8 08             	sar    eax,0x8
c001b933:	25 ff 00 00 00       	and    eax,0xff
c001b938:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b93f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b943:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b947:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b94c:	ee                   	out    dx,al
c001b94d:	90                   	nop
c001b94e:	83 c4 10             	add    esp,0x10
c001b951:	c3                   	ret    
c001b952:	66 90                	xchg   ax,ax

c001b954 <pitHandler(regs*, void*)>:
c001b954:	83 ec 0c             	sub    esp,0xc
c001b957:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b95d:	b8 10 27 00 00       	mov    eax,0x2710
c001b962:	99                   	cdq    
c001b963:	f7 f9                	idiv   ecx
c001b965:	83 ec 0c             	sub    esp,0xc
c001b968:	50                   	push   eax
c001b969:	e8 b2 18 ff ff       	call   c000d220 <timerHandler(unsigned int)>
c001b96e:	83 c4 10             	add    esp,0x10
c001b971:	90                   	nop
c001b972:	83 c4 0c             	add    esp,0xc
c001b975:	c3                   	ret    
c001b976:	66 90                	xchg   ax,ax

c001b978 <PIT::open(int, int, void*)>:
c001b978:	83 ec 0c             	sub    esp,0xc
c001b97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b981:	83 c0 24             	add    eax,0x24
c001b984:	8b 00                	mov    eax,DWORD PTR [eax]
c001b986:	83 ec 08             	sub    esp,0x8
c001b989:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b991:	ff d0                	call   eax
c001b993:	83 c4 10             	add    esp,0x10
c001b996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	6a 00                	push   0x0
c001b99f:	6a 01                	push   0x1
c001b9a1:	68 54 b9 01 c0       	push   0xc001b954
c001b9a6:	6a 00                	push   0x0
c001b9a8:	50                   	push   eax
c001b9a9:	e8 4a ff fe ff       	call   c000b8f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9ae:	83 c4 20             	add    esp,0x20
c001b9b1:	89 c2                	mov    edx,eax
c001b9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9bd:	b8 00 00 00 00       	mov    eax,0x0
c001b9c2:	83 c4 0c             	add    esp,0xc
c001b9c5:	c3                   	ret    
c001b9c6:	66 90                	xchg   ax,ax

c001b9c8 <PIT::close(int, int, void*)>:
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9dd:	6a 01                	push   0x1
c001b9df:	68 54 b9 01 c0       	push   0xc001b954
c001b9e4:	6a 00                	push   0x0
c001b9e6:	50                   	push   eax
c001b9e7:	e8 42 ff fe ff       	call   c000b92e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	b8 00 00 00 00       	mov    eax,0x0
c001b9f4:	83 c4 0c             	add    esp,0xc
c001b9f7:	c3                   	ret    

c001b9f8 <PIT::PIT()>:
c001b9f8:	83 ec 0c             	sub    esp,0xc
c001b9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ff:	83 ec 08             	sub    esp,0x8
c001ba02:	68 f4 f6 01 c0       	push   0xc001f6f4
c001ba07:	50                   	push   eax
c001ba08:	e8 47 17 ff ff       	call   c000d154 <Timer::Timer(char const*)>
c001ba0d:	83 c4 10             	add    esp,0x10
c001ba10:	ba 1c f7 01 c0       	mov    edx,0xc001f71c
c001ba15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba19:	89 10                	mov    DWORD PTR [eax],edx
c001ba1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba25:	31 d2                	xor    edx,edx
c001ba27:	88 c2                	mov    dl,al
c001ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba3e:	31 d2                	xor    edx,edx
c001ba40:	88 c2                	mov    dl,al
c001ba42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba46:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba55:	8d 50 01             	lea    edx,[eax+0x1]
c001ba58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba5c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba62:	31 d2                	xor    edx,edx
c001ba64:	88 c2                	mov    dl,al
c001ba66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba6e:	83 e1 3f             	and    ecx,0x3f
c001ba71:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba75:	90                   	nop
c001ba76:	83 c4 0c             	add    esp,0xc
c001ba79:	c3                   	ret    
c001ba7a:	66 90                	xchg   ax,ax
c001ba7c:	66 90                	xchg   ax,ax
c001ba7e:	66 90                	xchg   ax,ax

c001ba80 <avxDetect>:
c001ba80:	b8 01 00 00 00       	mov    eax,0x1
c001ba85:	0f a2                	cpuid  
c001ba87:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ba8d:	74 15                	je     c001baa4 <avxDetect.noAVX>
c001ba8f:	b8 01 00 00 00       	mov    eax,0x1
c001ba94:	0f a2                	cpuid  
c001ba96:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ba9c:	74 06                	je     c001baa4 <avxDetect.noAVX>
c001ba9e:	b8 01 00 00 00       	mov    eax,0x1
c001baa3:	c3                   	ret    

c001baa4 <avxDetect.noAVX>:
c001baa4:	b8 00 00 00 00       	mov    eax,0x0
c001baa9:	c3                   	ret    

c001baaa <avxSave>:
c001baaa:	53                   	push   ebx
c001baab:	52                   	push   edx
c001baac:	31 c0                	xor    eax,eax
c001baae:	48                   	dec    eax
c001baaf:	89 c2                	mov    edx,eax
c001bab1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bab5:	0f ae 23             	xsave  [ebx]
c001bab8:	5a                   	pop    edx
c001bab9:	5b                   	pop    ebx
c001baba:	c3                   	ret    

c001babb <avxLoad>:
c001babb:	53                   	push   ebx
c001babc:	52                   	push   edx
c001babd:	31 c0                	xor    eax,eax
c001babf:	48                   	dec    eax
c001bac0:	89 c2                	mov    edx,eax
c001bac2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bac6:	0f ae 2b             	xrstor [ebx]
c001bac9:	5a                   	pop    edx
c001baca:	5b                   	pop    ebx
c001bacb:	c3                   	ret    

c001bacc <avxInit>:
c001bacc:	e8 b7 02 00 00       	call   c001bd88 <sseInit>
c001bad1:	50                   	push   eax
c001bad2:	51                   	push   ecx
c001bad3:	0f 20 e0             	mov    eax,cr4
c001bad6:	0d 00 00 04 00       	or     eax,0x40000
c001badb:	0f 22 e0             	mov    cr4,eax
c001bade:	31 c9                	xor    ecx,ecx
c001bae0:	0f 01 d0             	xgetbv 
c001bae3:	0d 07 00 00 00       	or     eax,0x7
c001bae8:	0f 01 d1             	xsetbv 
c001baeb:	59                   	pop    ecx
c001baec:	58                   	pop    eax
c001baed:	c3                   	ret    

c001baee <avxClose>:
c001baee:	c3                   	ret    

c001baef <wouldSheSayYes>:
c001baef:	c3                   	ret    
c001baf0:	49                   	dec    ecx
c001baf1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001baf5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001baf9:	75 20                	jne    c001bb1b <isr0+0xb>
c001bafb:	4e                   	dec    esi
c001bafc:	79 61                	jns    c001bb5f <isr7+0x3>
c001bafe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb03:	66 90                	xchg   ax,ax
c001bb05:	66 90                	xchg   ax,ax
c001bb07:	66 90                	xchg   ax,ax
c001bb09:	66 90                	xchg   ax,ax
c001bb0b:	66 90                	xchg   ax,ax
c001bb0d:	66 90                	xchg   ax,ax
c001bb0f:	90                   	nop

c001bb10 <isr0>:
c001bb10:	fa                   	cli    
c001bb11:	68 00 00 00 00       	push   0x0
c001bb16:	68 00 00 00 00       	push   0x0
c001bb1b:	e9 44 01 00 00       	jmp    c001bc64 <int_common_stub>

c001bb20 <isr1>:
c001bb20:	fa                   	cli    
c001bb21:	6a 00                	push   0x0
c001bb23:	6a 01                	push   0x1
c001bb25:	e9 3a 01 00 00       	jmp    c001bc64 <int_common_stub>

c001bb2a <isr2>:
c001bb2a:	fa                   	cli    
c001bb2b:	6a 00                	push   0x0
c001bb2d:	6a 02                	push   0x2
c001bb2f:	e9 30 01 00 00       	jmp    c001bc64 <int_common_stub>

c001bb34 <isr3>:
c001bb34:	fa                   	cli    
c001bb35:	6a 00                	push   0x0
c001bb37:	6a 03                	push   0x3
c001bb39:	e9 26 01 00 00       	jmp    c001bc64 <int_common_stub>

c001bb3e <isr4>:
c001bb3e:	fa                   	cli    
c001bb3f:	6a 00                	push   0x0
c001bb41:	6a 04                	push   0x4
c001bb43:	e9 1c 01 00 00       	jmp    c001bc64 <int_common_stub>

c001bb48 <isr5>:
c001bb48:	fa                   	cli    
c001bb49:	6a 00                	push   0x0
c001bb4b:	6a 05                	push   0x5
c001bb4d:	e9 12 01 00 00       	jmp    c001bc64 <int_common_stub>

c001bb52 <isr6>:
c001bb52:	fa                   	cli    
c001bb53:	6a 00                	push   0x0
c001bb55:	6a 06                	push   0x6
c001bb57:	e9 08 01 00 00       	jmp    c001bc64 <int_common_stub>

c001bb5c <isr7>:
c001bb5c:	fa                   	cli    
c001bb5d:	6a 00                	push   0x0
c001bb5f:	6a 07                	push   0x7
c001bb61:	e9 fe 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bb66 <isr8>:
c001bb66:	fa                   	cli    
c001bb67:	6a 08                	push   0x8
c001bb69:	e9 f6 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bb6e <isr9>:
c001bb6e:	fa                   	cli    
c001bb6f:	6a 00                	push   0x0
c001bb71:	6a 09                	push   0x9
c001bb73:	e9 ec 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bb78 <isr10>:
c001bb78:	fa                   	cli    
c001bb79:	6a 0a                	push   0xa
c001bb7b:	e9 e4 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bb80 <isr11>:
c001bb80:	fa                   	cli    
c001bb81:	6a 0b                	push   0xb
c001bb83:	e9 dc 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bb88 <isr12>:
c001bb88:	fa                   	cli    
c001bb89:	6a 0c                	push   0xc
c001bb8b:	e9 d4 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bb90 <isr13>:
c001bb90:	fa                   	cli    
c001bb91:	6a 0d                	push   0xd
c001bb93:	e9 cc 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bb98 <isr14>:
c001bb98:	fa                   	cli    
c001bb99:	6a 0e                	push   0xe
c001bb9b:	e9 c4 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bba0 <isr15>:
c001bba0:	fa                   	cli    
c001bba1:	6a 00                	push   0x0
c001bba3:	6a 0f                	push   0xf
c001bba5:	e9 ba 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbaa <isr16>:
c001bbaa:	fa                   	cli    
c001bbab:	6a 00                	push   0x0
c001bbad:	6a 10                	push   0x10
c001bbaf:	e9 b0 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbb4 <isr17>:
c001bbb4:	fa                   	cli    
c001bbb5:	6a 00                	push   0x0
c001bbb7:	6a 11                	push   0x11
c001bbb9:	e9 a6 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbbe <isr18>:
c001bbbe:	fa                   	cli    
c001bbbf:	6a 00                	push   0x0
c001bbc1:	6a 12                	push   0x12
c001bbc3:	e9 9c 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbc8 <irq3>:
c001bbc8:	fa                   	cli    
c001bbc9:	6a 00                	push   0x0
c001bbcb:	6a 23                	push   0x23
c001bbcd:	e9 92 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbd2 <irq4>:
c001bbd2:	fa                   	cli    
c001bbd3:	6a 00                	push   0x0
c001bbd5:	6a 24                	push   0x24
c001bbd7:	e9 88 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbdc <irq5>:
c001bbdc:	fa                   	cli    
c001bbdd:	6a 00                	push   0x0
c001bbdf:	6a 25                	push   0x25
c001bbe1:	e9 7e 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbe6 <irq6>:
c001bbe6:	fa                   	cli    
c001bbe7:	6a 00                	push   0x0
c001bbe9:	6a 26                	push   0x26
c001bbeb:	e9 74 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbf0 <irq7>:
c001bbf0:	fa                   	cli    
c001bbf1:	6a 00                	push   0x0
c001bbf3:	6a 27                	push   0x27
c001bbf5:	e9 6a 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bbfa <irq8>:
c001bbfa:	fa                   	cli    
c001bbfb:	6a 00                	push   0x0
c001bbfd:	6a 28                	push   0x28
c001bbff:	e9 60 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc04 <irq9>:
c001bc04:	fa                   	cli    
c001bc05:	6a 00                	push   0x0
c001bc07:	6a 29                	push   0x29
c001bc09:	e9 56 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc0e <irq10>:
c001bc0e:	fa                   	cli    
c001bc0f:	6a 00                	push   0x0
c001bc11:	6a 2a                	push   0x2a
c001bc13:	e9 4c 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc18 <irq11>:
c001bc18:	fa                   	cli    
c001bc19:	6a 00                	push   0x0
c001bc1b:	6a 2b                	push   0x2b
c001bc1d:	e9 42 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc22 <irq12>:
c001bc22:	fa                   	cli    
c001bc23:	6a 00                	push   0x0
c001bc25:	6a 2c                	push   0x2c
c001bc27:	e9 38 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc2c <irq13>:
c001bc2c:	fa                   	cli    
c001bc2d:	6a 00                	push   0x0
c001bc2f:	6a 2d                	push   0x2d
c001bc31:	e9 2e 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc36 <irq14>:
c001bc36:	fa                   	cli    
c001bc37:	6a 00                	push   0x0
c001bc39:	6a 2e                	push   0x2e
c001bc3b:	e9 24 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc40 <irq15>:
c001bc40:	fa                   	cli    
c001bc41:	6a 00                	push   0x0
c001bc43:	6a 2f                	push   0x2f
c001bc45:	e9 1a 00 00 00       	jmp    c001bc64 <int_common_stub>

c001bc4a <irq1>:
c001bc4a:	fa                   	cli    
c001bc4b:	6a 00                	push   0x0
c001bc4d:	6a 21                	push   0x21
c001bc4f:	eb 13                	jmp    c001bc64 <int_common_stub>

c001bc51 <irq2>:
c001bc51:	fa                   	cli    
c001bc52:	6a 00                	push   0x0
c001bc54:	6a 22                	push   0x22
c001bc56:	eb 0c                	jmp    c001bc64 <int_common_stub>

c001bc58 <isr96>:
c001bc58:	6a 00                	push   0x0
c001bc5a:	6a 60                	push   0x60
c001bc5c:	fb                   	sti    
c001bc5d:	eb 37                	jmp    c001bc96 <syscall_common_stub>

c001bc5f <irq0>:
c001bc5f:	fa                   	cli    
c001bc60:	6a 00                	push   0x0
c001bc62:	6a 20                	push   0x20

c001bc64 <int_common_stub>:
c001bc64:	60                   	pusha  
c001bc65:	1e                   	push   ds
c001bc66:	06                   	push   es
c001bc67:	0f a0                	push   fs
c001bc69:	0f a8                	push   gs
c001bc6b:	66 b8 10 00          	mov    ax,0x10
c001bc6f:	66 8e d8             	mov    ds,ax
c001bc72:	66 8e c0             	mov    es,ax
c001bc75:	66 8e e0             	mov    fs,ax
c001bc78:	66 8e e8             	mov    gs,ax
c001bc7b:	54                   	push   esp
c001bc7c:	fc                   	cld    
c001bc7d:	e8 76 01 ff ff       	call   c000bdf8 <int_handler>
c001bc82:	81 c4 04 00 00 00    	add    esp,0x4
c001bc88:	0f a9                	pop    gs
c001bc8a:	0f a1                	pop    fs
c001bc8c:	07                   	pop    es
c001bc8d:	1f                   	pop    ds
c001bc8e:	61                   	popa   
c001bc8f:	81 c4 08 00 00 00    	add    esp,0x8
c001bc95:	cf                   	iret   

c001bc96 <syscall_common_stub>:
c001bc96:	60                   	pusha  
c001bc97:	1e                   	push   ds
c001bc98:	06                   	push   es
c001bc99:	0f a0                	push   fs
c001bc9b:	0f a8                	push   gs
c001bc9d:	66 b8 10 00          	mov    ax,0x10
c001bca1:	66 8e d8             	mov    ds,ax
c001bca4:	66 8e c0             	mov    es,ax
c001bca7:	66 8e e0             	mov    fs,ax
c001bcaa:	66 8e e8             	mov    gs,ax
c001bcad:	54                   	push   esp
c001bcae:	fc                   	cld    
c001bcaf:	e8 44 01 ff ff       	call   c000bdf8 <int_handler>
c001bcb4:	81 c4 04 00 00 00    	add    esp,0x4
c001bcba:	0f a9                	pop    gs
c001bcbc:	0f a1                	pop    fs
c001bcbe:	07                   	pop    es
c001bcbf:	1f                   	pop    ds
c001bcc0:	e8 1e 4a ff ff       	call   c00106e3 <KiCheckSignalZ>
c001bcc5:	3d 00 00 00 00       	cmp    eax,0x0
c001bcca:	74 1d                	je     c001bce9 <syscall_common_stub.skipSignals>
c001bccc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bcd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bcd4:	89 e3                	mov    ebx,esp
c001bcd6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bcd9:	51                   	push   ecx
c001bcda:	68 f1 bc 01 c0       	push   0xc001bcf1
c001bcdf:	89 dc                	mov    esp,ebx
c001bce1:	61                   	popa   
c001bce2:	81 c4 08 00 00 00    	add    esp,0x8
c001bce8:	cf                   	iret   

c001bce9 <syscall_common_stub.skipSignals>:
c001bce9:	61                   	popa   
c001bcea:	81 c4 08 00 00 00    	add    esp,0x8
c001bcf0:	cf                   	iret   

c001bcf1 <irq16>:
c001bcf1:	fa                   	cli    
c001bcf2:	6a 00                	push   0x0
c001bcf4:	6a 30                	push   0x30
c001bcf6:	e9 69 ff ff ff       	jmp    c001bc64 <int_common_stub>

c001bcfb <irq17>:
c001bcfb:	fa                   	cli    
c001bcfc:	6a 00                	push   0x0
c001bcfe:	6a 31                	push   0x31
c001bd00:	e9 5f ff ff ff       	jmp    c001bc64 <int_common_stub>

c001bd05 <irq18>:
c001bd05:	fa                   	cli    
c001bd06:	6a 00                	push   0x0
c001bd08:	6a 32                	push   0x32
c001bd0a:	e9 55 ff ff ff       	jmp    c001bc64 <int_common_stub>

c001bd0f <irq19>:
c001bd0f:	fa                   	cli    
c001bd10:	6a 00                	push   0x0
c001bd12:	6a 33                	push   0x33
c001bd14:	e9 4b ff ff ff       	jmp    c001bc64 <int_common_stub>

c001bd19 <irq20>:
c001bd19:	fa                   	cli    
c001bd1a:	6a 00                	push   0x0
c001bd1c:	6a 34                	push   0x34
c001bd1e:	e9 41 ff ff ff       	jmp    c001bc64 <int_common_stub>

c001bd23 <irq21>:
c001bd23:	fa                   	cli    
c001bd24:	6a 00                	push   0x0
c001bd26:	6a 35                	push   0x35
c001bd28:	e9 37 ff ff ff       	jmp    c001bc64 <int_common_stub>

c001bd2d <irq22>:
c001bd2d:	fa                   	cli    
c001bd2e:	6a 00                	push   0x0
c001bd30:	6a 36                	push   0x36
c001bd32:	e9 2d ff ff ff       	jmp    c001bc64 <int_common_stub>

c001bd37 <irq23>:
c001bd37:	fa                   	cli    
c001bd38:	6a 00                	push   0x0
c001bd3a:	6a 37                	push   0x37
c001bd3c:	e9 23 ff ff ff       	jmp    c001bc64 <int_common_stub>
c001bd41:	66 90                	xchg   ax,ax
c001bd43:	66 90                	xchg   ax,ax
c001bd45:	66 90                	xchg   ax,ax
c001bd47:	66 90                	xchg   ax,ax
c001bd49:	66 90                	xchg   ax,ax
c001bd4b:	66 90                	xchg   ax,ax
c001bd4d:	66 90                	xchg   ax,ax
c001bd4f:	90                   	nop

c001bd50 <i386GetRDRAND>:
c001bd50:	b9 64 00 00 00       	mov    ecx,0x64

c001bd55 <retry>:
c001bd55:	0f c7 f0             	rdrand eax
c001bd58:	72 05                	jb     c001bd5f <retry.done>
c001bd5a:	e2 f9                	loop   c001bd55 <retry>

c001bd5c <retry.fail>:
c001bd5c:	31 c0                	xor    eax,eax
c001bd5e:	c3                   	ret    

c001bd5f <retry.done>:
c001bd5f:	c3                   	ret    

c001bd60 <absolutelyNoChanceInHell>:
c001bd60:	b8 01 00 00 00       	mov    eax,0x1
c001bd65:	0f a2                	cpuid  
c001bd67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bd6d:	74 06                	je     c001bd75 <sseDetect.noSSE>
c001bd6f:	b8 01 00 00 00       	mov    eax,0x1
c001bd74:	c3                   	ret    

c001bd75 <sseDetect.noSSE>:
c001bd75:	31 c0                	xor    eax,eax
c001bd77:	c3                   	ret    

c001bd78 <sseSave>:
c001bd78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7c:	0f ae 00             	fxsave [eax]
c001bd7f:	c3                   	ret    

c001bd80 <sseLoad>:
c001bd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd84:	0f ae 08             	fxrstor [eax]
c001bd87:	c3                   	ret    

c001bd88 <sseInit>:
c001bd88:	e8 42 00 00 00       	call   c001bdcf <x87Init>
c001bd8d:	0f 20 e0             	mov    eax,cr4
c001bd90:	66 0d 00 06          	or     ax,0x600
c001bd94:	0f 22 e0             	mov    cr4,eax
c001bd97:	c3                   	ret    

c001bd98 <sseClose>:
c001bd98:	c3                   	ret    
c001bd99:	66 90                	xchg   ax,ax
c001bd9b:	66 90                	xchg   ax,ax
c001bd9d:	66 90                	xchg   ax,ax
c001bd9f:	90                   	nop

c001bda0 <value_37F>:
c001bda0:	7f 03                	jg     c001bda5 <value_37A+0x1>

c001bda2 <value_37E>:
c001bda2:	7e 03                	jle    c001bda7 <x87Detect+0x1>

c001bda4 <value_37A>:
c001bda4:	7a 03                	jp     c001bda9 <x87Detect+0x3>

c001bda6 <x87Detect>:
c001bda6:	b8 01 00 00 00       	mov    eax,0x1
c001bdab:	0f a2                	cpuid  
c001bdad:	f7 c2 01 00 00 00    	test   edx,0x1
c001bdb3:	74 06                	je     c001bdbb <x87Detect.nox87>
c001bdb5:	b8 01 00 00 00       	mov    eax,0x1
c001bdba:	c3                   	ret    

c001bdbb <x87Detect.nox87>:
c001bdbb:	b8 00 00 00 00       	mov    eax,0x0
c001bdc0:	c3                   	ret    

c001bdc1 <x87Save>:
c001bdc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdc5:	dd 30                	fnsave [eax]
c001bdc7:	c3                   	ret    

c001bdc8 <x87Load>:
c001bdc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdcc:	dd 20                	frstor [eax]
c001bdce:	c3                   	ret    

c001bdcf <x87Init>:
c001bdcf:	0f 20 c0             	mov    eax,cr0
c001bdd2:	66 25 fb ff          	and    ax,0xfffb
c001bdd6:	66 0d 22 00          	or     ax,0x22
c001bdda:	0f 22 c0             	mov    cr0,eax
c001bddd:	db e3                	fninit 
c001bddf:	0f 06                	clts   
c001bde1:	d9 2d a4 bd 01 c0    	fldcw  WORD PTR ds:0xc001bda4
c001bde7:	c3                   	ret    

c001bde8 <x87Close>:
c001bde8:	c3                   	ret    
c001bde9:	66 90                	xchg   ax,ax
c001bdeb:	90                   	nop

c001bdec <__do_global_ctors_aux>:
c001bdec:	a1 9c cd 01 c0       	mov    eax,ds:0xc001cd9c
c001bdf1:	83 f8 ff             	cmp    eax,0xffffffff
c001bdf4:	74 1a                	je     c001be10 <__do_global_ctors_aux+0x24>
c001bdf6:	55                   	push   ebp
c001bdf7:	89 e5                	mov    ebp,esp
c001bdf9:	53                   	push   ebx
c001bdfa:	52                   	push   edx
c001bdfb:	bb 9c cd 01 c0       	mov    ebx,0xc001cd9c
c001be00:	ff d0                	call   eax
c001be02:	83 eb 04             	sub    ebx,0x4
c001be05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be07:	83 f8 ff             	cmp    eax,0xffffffff
c001be0a:	75 f4                	jne    c001be00 <__do_global_ctors_aux+0x14>
c001be0c:	58                   	pop    eax
c001be0d:	5b                   	pop    ebx
c001be0e:	5d                   	pop    ebp
c001be0f:	c3                   	ret    
c001be10:	c3                   	ret    
c001be11:	66 90                	xchg   ax,ax
c001be13:	90                   	nop

c001be14 <__divdi3>:
c001be14:	55                   	push   ebp
c001be15:	57                   	push   edi
c001be16:	56                   	push   esi
c001be17:	53                   	push   ebx
c001be18:	83 ec 1c             	sub    esp,0x1c
c001be1b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be32:	85 db                	test   ebx,ebx
c001be34:	0f 88 8e 00 00 00    	js     c001bec8 <__divdi3+0xb4>
c001be3a:	89 dd                	mov    ebp,ebx
c001be3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be44:	89 d3                	mov    ebx,edx
c001be46:	85 d2                	test   edx,edx
c001be48:	79 0d                	jns    c001be57 <__divdi3+0x43>
c001be4a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001be4e:	f7 d8                	neg    eax
c001be50:	83 d2 00             	adc    edx,0x0
c001be53:	f7 da                	neg    edx
c001be55:	89 d3                	mov    ebx,edx
c001be57:	89 c7                	mov    edi,eax
c001be59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be5c:	85 db                	test   ebx,ebx
c001be5e:	75 48                	jne    c001bea8 <__divdi3+0x94>
c001be60:	39 ef                	cmp    edi,ebp
c001be62:	76 24                	jbe    c001be88 <__divdi3+0x74>
c001be64:	89 ea                	mov    edx,ebp
c001be66:	f7 f7                	div    edi
c001be68:	89 c1                	mov    ecx,eax
c001be6a:	31 f6                	xor    esi,esi
c001be6c:	89 c8                	mov    eax,ecx
c001be6e:	89 f2                	mov    edx,esi
c001be70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be74:	85 c9                	test   ecx,ecx
c001be76:	74 07                	je     c001be7f <__divdi3+0x6b>
c001be78:	f7 d8                	neg    eax
c001be7a:	83 d2 00             	adc    edx,0x0
c001be7d:	f7 da                	neg    edx
c001be7f:	83 c4 1c             	add    esp,0x1c
c001be82:	5b                   	pop    ebx
c001be83:	5e                   	pop    esi
c001be84:	5f                   	pop    edi
c001be85:	5d                   	pop    ebp
c001be86:	c3                   	ret    
c001be87:	90                   	nop
c001be88:	85 ff                	test   edi,edi
c001be8a:	75 0b                	jne    c001be97 <__divdi3+0x83>
c001be8c:	b8 01 00 00 00       	mov    eax,0x1
c001be91:	31 d2                	xor    edx,edx
c001be93:	f7 f3                	div    ebx
c001be95:	89 c7                	mov    edi,eax
c001be97:	31 d2                	xor    edx,edx
c001be99:	89 e8                	mov    eax,ebp
c001be9b:	f7 f7                	div    edi
c001be9d:	89 c6                	mov    esi,eax
c001be9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bea2:	f7 f7                	div    edi
c001bea4:	89 c1                	mov    ecx,eax
c001bea6:	eb c4                	jmp    c001be6c <__divdi3+0x58>
c001bea8:	39 eb                	cmp    ebx,ebp
c001beaa:	77 3c                	ja     c001bee8 <__divdi3+0xd4>
c001beac:	0f bd f3             	bsr    esi,ebx
c001beaf:	83 f6 1f             	xor    esi,0x1f
c001beb2:	75 40                	jne    c001bef4 <__divdi3+0xe0>
c001beb4:	39 eb                	cmp    ebx,ebp
c001beb6:	72 09                	jb     c001bec1 <__divdi3+0xad>
c001beb8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bebb:	0f 87 97 00 00 00    	ja     c001bf58 <__divdi3+0x144>
c001bec1:	b9 01 00 00 00       	mov    ecx,0x1
c001bec6:	eb a4                	jmp    c001be6c <__divdi3+0x58>
c001bec8:	f7 d9                	neg    ecx
c001beca:	83 d3 00             	adc    ebx,0x0
c001becd:	f7 db                	neg    ebx
c001becf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bed2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bed6:	89 dd                	mov    ebp,ebx
c001bed8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bee0:	e9 5f ff ff ff       	jmp    c001be44 <__divdi3+0x30>
c001bee5:	8d 76 00             	lea    esi,[esi+0x0]
c001bee8:	31 f6                	xor    esi,esi
c001beea:	31 c9                	xor    ecx,ecx
c001beec:	e9 7b ff ff ff       	jmp    c001be6c <__divdi3+0x58>
c001bef1:	8d 76 00             	lea    esi,[esi+0x0]
c001bef4:	b8 20 00 00 00       	mov    eax,0x20
c001bef9:	29 f0                	sub    eax,esi
c001befb:	89 f1                	mov    ecx,esi
c001befd:	d3 e3                	shl    ebx,cl
c001beff:	89 fa                	mov    edx,edi
c001bf01:	88 c1                	mov    cl,al
c001bf03:	d3 ea                	shr    edx,cl
c001bf05:	09 da                	or     edx,ebx
c001bf07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf0b:	89 f1                	mov    ecx,esi
c001bf0d:	d3 e7                	shl    edi,cl
c001bf0f:	89 eb                	mov    ebx,ebp
c001bf11:	88 c1                	mov    cl,al
c001bf13:	d3 eb                	shr    ebx,cl
c001bf15:	89 f1                	mov    ecx,esi
c001bf17:	d3 e5                	shl    ebp,cl
c001bf19:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf1c:	88 c1                	mov    cl,al
c001bf1e:	d3 ea                	shr    edx,cl
c001bf20:	09 d5                	or     ebp,edx
c001bf22:	89 e8                	mov    eax,ebp
c001bf24:	89 da                	mov    edx,ebx
c001bf26:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf2a:	89 d3                	mov    ebx,edx
c001bf2c:	89 c5                	mov    ebp,eax
c001bf2e:	f7 e7                	mul    edi
c001bf30:	39 d3                	cmp    ebx,edx
c001bf32:	72 18                	jb     c001bf4c <__divdi3+0x138>
c001bf34:	74 0a                	je     c001bf40 <__divdi3+0x12c>
c001bf36:	89 e9                	mov    ecx,ebp
c001bf38:	31 f6                	xor    esi,esi
c001bf3a:	e9 2d ff ff ff       	jmp    c001be6c <__divdi3+0x58>
c001bf3f:	90                   	nop
c001bf40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bf43:	89 f1                	mov    ecx,esi
c001bf45:	d3 e7                	shl    edi,cl
c001bf47:	39 c7                	cmp    edi,eax
c001bf49:	73 eb                	jae    c001bf36 <__divdi3+0x122>
c001bf4b:	90                   	nop
c001bf4c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bf4f:	31 f6                	xor    esi,esi
c001bf51:	e9 16 ff ff ff       	jmp    c001be6c <__divdi3+0x58>
c001bf56:	66 90                	xchg   ax,ax
c001bf58:	31 c9                	xor    ecx,ecx
c001bf5a:	e9 0d ff ff ff       	jmp    c001be6c <__divdi3+0x58>
c001bf5f:	90                   	nop

c001bf60 <__moddi3>:
c001bf60:	55                   	push   ebp
c001bf61:	57                   	push   edi
c001bf62:	56                   	push   esi
c001bf63:	53                   	push   ebx
c001bf64:	83 ec 2c             	sub    esp,0x2c
c001bf67:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf6b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bf6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bf73:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bf77:	85 db                	test   ebx,ebx
c001bf79:	0f 88 85 00 00 00    	js     c001c004 <__moddi3+0xa4>
c001bf7f:	89 de                	mov    esi,ebx
c001bf81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bf89:	89 d7                	mov    edi,edx
c001bf8b:	85 d2                	test   edx,edx
c001bf8d:	79 09                	jns    c001bf98 <__moddi3+0x38>
c001bf8f:	f7 d8                	neg    eax
c001bf91:	83 d2 00             	adc    edx,0x0
c001bf94:	f7 da                	neg    edx
c001bf96:	89 d7                	mov    edi,edx
c001bf98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf9c:	89 cd                	mov    ebp,ecx
c001bf9e:	85 ff                	test   edi,edi
c001bfa0:	75 52                	jne    c001bff4 <__moddi3+0x94>
c001bfa2:	89 c3                	mov    ebx,eax
c001bfa4:	39 f0                	cmp    eax,esi
c001bfa6:	76 24                	jbe    c001bfcc <__moddi3+0x6c>
c001bfa8:	89 c8                	mov    eax,ecx
c001bfaa:	89 f2                	mov    edx,esi
c001bfac:	f7 f3                	div    ebx
c001bfae:	89 d6                	mov    esi,edx
c001bfb0:	89 f0                	mov    eax,esi
c001bfb2:	31 d2                	xor    edx,edx
c001bfb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bfb8:	85 c9                	test   ecx,ecx
c001bfba:	74 07                	je     c001bfc3 <__moddi3+0x63>
c001bfbc:	f7 d8                	neg    eax
c001bfbe:	83 d2 00             	adc    edx,0x0
c001bfc1:	f7 da                	neg    edx
c001bfc3:	83 c4 2c             	add    esp,0x2c
c001bfc6:	5b                   	pop    ebx
c001bfc7:	5e                   	pop    esi
c001bfc8:	5f                   	pop    edi
c001bfc9:	5d                   	pop    ebp
c001bfca:	c3                   	ret    
c001bfcb:	90                   	nop
c001bfcc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bfd0:	85 db                	test   ebx,ebx
c001bfd2:	75 0d                	jne    c001bfe1 <__moddi3+0x81>
c001bfd4:	b8 01 00 00 00       	mov    eax,0x1
c001bfd9:	31 d2                	xor    edx,edx
c001bfdb:	f7 f7                	div    edi
c001bfdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfe1:	89 f0                	mov    eax,esi
c001bfe3:	31 d2                	xor    edx,edx
c001bfe5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bfe9:	f7 f7                	div    edi
c001bfeb:	89 e8                	mov    eax,ebp
c001bfed:	f7 f7                	div    edi
c001bfef:	89 d6                	mov    esi,edx
c001bff1:	eb bd                	jmp    c001bfb0 <__moddi3+0x50>
c001bff3:	90                   	nop
c001bff4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bff8:	39 f7                	cmp    edi,esi
c001bffa:	76 20                	jbe    c001c01c <__moddi3+0xbc>
c001bffc:	89 c8                	mov    eax,ecx
c001bffe:	89 f2                	mov    edx,esi
c001c000:	eb b2                	jmp    c001bfb4 <__moddi3+0x54>
c001c002:	66 90                	xchg   ax,ax
c001c004:	f7 d9                	neg    ecx
c001c006:	83 d3 00             	adc    ebx,0x0
c001c009:	f7 db                	neg    ebx
c001c00b:	89 de                	mov    esi,ebx
c001c00d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c015:	e9 6f ff ff ff       	jmp    c001bf89 <__moddi3+0x29>
c001c01a:	66 90                	xchg   ax,ax
c001c01c:	0f bd c7             	bsr    eax,edi
c001c01f:	83 f0 1f             	xor    eax,0x1f
c001c022:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c026:	75 24                	jne    c001c04c <__moddi3+0xec>
c001c028:	39 f7                	cmp    edi,esi
c001c02a:	72 06                	jb     c001c032 <__moddi3+0xd2>
c001c02c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c030:	77 0c                	ja     c001c03e <__moddi3+0xde>
c001c032:	89 e9                	mov    ecx,ebp
c001c034:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c038:	19 fe                	sbb    esi,edi
c001c03a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c03e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c042:	89 f2                	mov    edx,esi
c001c044:	e9 6b ff ff ff       	jmp    c001bfb4 <__moddi3+0x54>
c001c049:	8d 76 00             	lea    esi,[esi+0x0]
c001c04c:	b8 20 00 00 00       	mov    eax,0x20
c001c051:	89 c2                	mov    edx,eax
c001c053:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c057:	29 da                	sub    edx,ebx
c001c059:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c05d:	88 d9                	mov    cl,bl
c001c05f:	d3 e7                	shl    edi,cl
c001c061:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c065:	88 d1                	mov    cl,dl
c001c067:	d3 e8                	shr    eax,cl
c001c069:	09 c7                	or     edi,eax
c001c06b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c06f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c073:	89 d8                	mov    eax,ebx
c001c075:	88 d9                	mov    cl,bl
c001c077:	d3 e7                	shl    edi,cl
c001c079:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c07d:	89 f3                	mov    ebx,esi
c001c07f:	88 d1                	mov    cl,dl
c001c081:	d3 eb                	shr    ebx,cl
c001c083:	89 c7                	mov    edi,eax
c001c085:	88 c1                	mov    cl,al
c001c087:	d3 e6                	shl    esi,cl
c001c089:	89 e8                	mov    eax,ebp
c001c08b:	88 d1                	mov    cl,dl
c001c08d:	d3 e8                	shr    eax,cl
c001c08f:	09 f0                	or     eax,esi
c001c091:	89 f9                	mov    ecx,edi
c001c093:	d3 e5                	shl    ebp,cl
c001c095:	89 da                	mov    edx,ebx
c001c097:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c09b:	89 d3                	mov    ebx,edx
c001c09d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c0a1:	89 c6                	mov    esi,eax
c001c0a3:	89 d1                	mov    ecx,edx
c001c0a5:	39 d3                	cmp    ebx,edx
c001c0a7:	72 27                	jb     c001c0d0 <__moddi3+0x170>
c001c0a9:	74 21                	je     c001c0cc <__moddi3+0x16c>
c001c0ab:	29 f5                	sub    ebp,esi
c001c0ad:	19 cb                	sbb    ebx,ecx
c001c0af:	89 de                	mov    esi,ebx
c001c0b1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c0b5:	d3 e6                	shl    esi,cl
c001c0b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0bb:	89 f9                	mov    ecx,edi
c001c0bd:	d3 ed                	shr    ebp,cl
c001c0bf:	09 ee                	or     esi,ebp
c001c0c1:	89 f0                	mov    eax,esi
c001c0c3:	d3 eb                	shr    ebx,cl
c001c0c5:	89 da                	mov    edx,ebx
c001c0c7:	e9 e8 fe ff ff       	jmp    c001bfb4 <__moddi3+0x54>
c001c0cc:	39 c5                	cmp    ebp,eax
c001c0ce:	73 db                	jae    c001c0ab <__moddi3+0x14b>
c001c0d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c0d4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c0d8:	89 d1                	mov    ecx,edx
c001c0da:	89 c6                	mov    esi,eax
c001c0dc:	eb cd                	jmp    c001c0ab <__moddi3+0x14b>
c001c0de:	66 90                	xchg   ax,ax

c001c0e0 <__udivdi3>:
c001c0e0:	55                   	push   ebp
c001c0e1:	57                   	push   edi
c001c0e2:	56                   	push   esi
c001c0e3:	53                   	push   ebx
c001c0e4:	83 ec 1c             	sub    esp,0x1c
c001c0e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c0eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c0f3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c0f7:	85 d2                	test   edx,edx
c001c0f9:	75 41                	jne    c001c13c <__udivdi3+0x5c>
c001c0fb:	39 f7                	cmp    edi,esi
c001c0fd:	76 15                	jbe    c001c114 <__udivdi3+0x34>
c001c0ff:	89 e8                	mov    eax,ebp
c001c101:	89 f2                	mov    edx,esi
c001c103:	f7 f7                	div    edi
c001c105:	31 db                	xor    ebx,ebx
c001c107:	89 da                	mov    edx,ebx
c001c109:	83 c4 1c             	add    esp,0x1c
c001c10c:	5b                   	pop    ebx
c001c10d:	5e                   	pop    esi
c001c10e:	5f                   	pop    edi
c001c10f:	5d                   	pop    ebp
c001c110:	c3                   	ret    
c001c111:	8d 76 00             	lea    esi,[esi+0x0]
c001c114:	89 f9                	mov    ecx,edi
c001c116:	85 ff                	test   edi,edi
c001c118:	75 0b                	jne    c001c125 <__udivdi3+0x45>
c001c11a:	b8 01 00 00 00       	mov    eax,0x1
c001c11f:	31 d2                	xor    edx,edx
c001c121:	f7 f7                	div    edi
c001c123:	89 c1                	mov    ecx,eax
c001c125:	31 d2                	xor    edx,edx
c001c127:	89 f0                	mov    eax,esi
c001c129:	f7 f1                	div    ecx
c001c12b:	89 c3                	mov    ebx,eax
c001c12d:	89 e8                	mov    eax,ebp
c001c12f:	f7 f1                	div    ecx
c001c131:	89 da                	mov    edx,ebx
c001c133:	83 c4 1c             	add    esp,0x1c
c001c136:	5b                   	pop    ebx
c001c137:	5e                   	pop    esi
c001c138:	5f                   	pop    edi
c001c139:	5d                   	pop    ebp
c001c13a:	c3                   	ret    
c001c13b:	90                   	nop
c001c13c:	39 f2                	cmp    edx,esi
c001c13e:	77 1c                	ja     c001c15c <__udivdi3+0x7c>
c001c140:	0f bd da             	bsr    ebx,edx
c001c143:	83 f3 1f             	xor    ebx,0x1f
c001c146:	75 24                	jne    c001c16c <__udivdi3+0x8c>
c001c148:	39 f2                	cmp    edx,esi
c001c14a:	72 08                	jb     c001c154 <__udivdi3+0x74>
c001c14c:	39 ef                	cmp    edi,ebp
c001c14e:	0f 87 84 00 00 00    	ja     c001c1d8 <__udivdi3+0xf8>
c001c154:	b8 01 00 00 00       	mov    eax,0x1
c001c159:	eb ac                	jmp    c001c107 <__udivdi3+0x27>
c001c15b:	90                   	nop
c001c15c:	31 db                	xor    ebx,ebx
c001c15e:	31 c0                	xor    eax,eax
c001c160:	89 da                	mov    edx,ebx
c001c162:	83 c4 1c             	add    esp,0x1c
c001c165:	5b                   	pop    ebx
c001c166:	5e                   	pop    esi
c001c167:	5f                   	pop    edi
c001c168:	5d                   	pop    ebp
c001c169:	c3                   	ret    
c001c16a:	66 90                	xchg   ax,ax
c001c16c:	b8 20 00 00 00       	mov    eax,0x20
c001c171:	29 d8                	sub    eax,ebx
c001c173:	88 d9                	mov    cl,bl
c001c175:	d3 e2                	shl    edx,cl
c001c177:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c17b:	89 fa                	mov    edx,edi
c001c17d:	88 c1                	mov    cl,al
c001c17f:	d3 ea                	shr    edx,cl
c001c181:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c185:	09 d1                	or     ecx,edx
c001c187:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c18b:	88 d9                	mov    cl,bl
c001c18d:	d3 e7                	shl    edi,cl
c001c18f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c193:	89 f7                	mov    edi,esi
c001c195:	88 c1                	mov    cl,al
c001c197:	d3 ef                	shr    edi,cl
c001c199:	88 d9                	mov    cl,bl
c001c19b:	d3 e6                	shl    esi,cl
c001c19d:	89 ea                	mov    edx,ebp
c001c19f:	88 c1                	mov    cl,al
c001c1a1:	d3 ea                	shr    edx,cl
c001c1a3:	09 d6                	or     esi,edx
c001c1a5:	89 f0                	mov    eax,esi
c001c1a7:	89 fa                	mov    edx,edi
c001c1a9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c1ad:	89 d7                	mov    edi,edx
c001c1af:	89 c6                	mov    esi,eax
c001c1b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1b5:	39 d7                	cmp    edi,edx
c001c1b7:	72 13                	jb     c001c1cc <__udivdi3+0xec>
c001c1b9:	74 09                	je     c001c1c4 <__udivdi3+0xe4>
c001c1bb:	89 f0                	mov    eax,esi
c001c1bd:	31 db                	xor    ebx,ebx
c001c1bf:	e9 43 ff ff ff       	jmp    c001c107 <__udivdi3+0x27>
c001c1c4:	88 d9                	mov    cl,bl
c001c1c6:	d3 e5                	shl    ebp,cl
c001c1c8:	39 c5                	cmp    ebp,eax
c001c1ca:	73 ef                	jae    c001c1bb <__udivdi3+0xdb>
c001c1cc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c1cf:	31 db                	xor    ebx,ebx
c001c1d1:	e9 31 ff ff ff       	jmp    c001c107 <__udivdi3+0x27>
c001c1d6:	66 90                	xchg   ax,ax
c001c1d8:	31 c0                	xor    eax,eax
c001c1da:	e9 28 ff ff ff       	jmp    c001c107 <__udivdi3+0x27>
c001c1df:	90                   	nop

c001c1e0 <__umoddi3>:
c001c1e0:	55                   	push   ebp
c001c1e1:	57                   	push   edi
c001c1e2:	56                   	push   esi
c001c1e3:	53                   	push   ebx
c001c1e4:	83 ec 1c             	sub    esp,0x1c
c001c1e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c1ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c1f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1f7:	89 da                	mov    edx,ebx
c001c1f9:	85 c0                	test   eax,eax
c001c1fb:	75 37                	jne    c001c234 <__umoddi3+0x54>
c001c1fd:	39 df                	cmp    edi,ebx
c001c1ff:	76 13                	jbe    c001c214 <__umoddi3+0x34>
c001c201:	89 f0                	mov    eax,esi
c001c203:	f7 f7                	div    edi
c001c205:	89 d0                	mov    eax,edx
c001c207:	31 d2                	xor    edx,edx
c001c209:	83 c4 1c             	add    esp,0x1c
c001c20c:	5b                   	pop    ebx
c001c20d:	5e                   	pop    esi
c001c20e:	5f                   	pop    edi
c001c20f:	5d                   	pop    ebp
c001c210:	c3                   	ret    
c001c211:	8d 76 00             	lea    esi,[esi+0x0]
c001c214:	89 fd                	mov    ebp,edi
c001c216:	85 ff                	test   edi,edi
c001c218:	75 0b                	jne    c001c225 <__umoddi3+0x45>
c001c21a:	b8 01 00 00 00       	mov    eax,0x1
c001c21f:	31 d2                	xor    edx,edx
c001c221:	f7 f7                	div    edi
c001c223:	89 c5                	mov    ebp,eax
c001c225:	89 d8                	mov    eax,ebx
c001c227:	31 d2                	xor    edx,edx
c001c229:	f7 f5                	div    ebp
c001c22b:	89 f0                	mov    eax,esi
c001c22d:	f7 f5                	div    ebp
c001c22f:	89 d0                	mov    eax,edx
c001c231:	eb d4                	jmp    c001c207 <__umoddi3+0x27>
c001c233:	90                   	nop
c001c234:	89 f1                	mov    ecx,esi
c001c236:	39 d8                	cmp    eax,ebx
c001c238:	76 0a                	jbe    c001c244 <__umoddi3+0x64>
c001c23a:	89 f0                	mov    eax,esi
c001c23c:	83 c4 1c             	add    esp,0x1c
c001c23f:	5b                   	pop    ebx
c001c240:	5e                   	pop    esi
c001c241:	5f                   	pop    edi
c001c242:	5d                   	pop    ebp
c001c243:	c3                   	ret    
c001c244:	0f bd e8             	bsr    ebp,eax
c001c247:	83 f5 1f             	xor    ebp,0x1f
c001c24a:	75 1c                	jne    c001c268 <__umoddi3+0x88>
c001c24c:	39 d8                	cmp    eax,ebx
c001c24e:	72 04                	jb     c001c254 <__umoddi3+0x74>
c001c250:	39 f7                	cmp    edi,esi
c001c252:	77 08                	ja     c001c25c <__umoddi3+0x7c>
c001c254:	89 da                	mov    edx,ebx
c001c256:	29 fe                	sub    esi,edi
c001c258:	19 c2                	sbb    edx,eax
c001c25a:	89 f1                	mov    ecx,esi
c001c25c:	89 c8                	mov    eax,ecx
c001c25e:	83 c4 1c             	add    esp,0x1c
c001c261:	5b                   	pop    ebx
c001c262:	5e                   	pop    esi
c001c263:	5f                   	pop    edi
c001c264:	5d                   	pop    ebp
c001c265:	c3                   	ret    
c001c266:	66 90                	xchg   ax,ax
c001c268:	ba 20 00 00 00       	mov    edx,0x20
c001c26d:	29 ea                	sub    edx,ebp
c001c26f:	89 e9                	mov    ecx,ebp
c001c271:	d3 e0                	shl    eax,cl
c001c273:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c277:	89 f8                	mov    eax,edi
c001c279:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c27d:	88 d1                	mov    cl,dl
c001c27f:	d3 e8                	shr    eax,cl
c001c281:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c285:	09 c1                	or     ecx,eax
c001c287:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c28b:	89 e9                	mov    ecx,ebp
c001c28d:	d3 e7                	shl    edi,cl
c001c28f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c293:	89 d8                	mov    eax,ebx
c001c295:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c299:	88 d1                	mov    cl,dl
c001c29b:	d3 e8                	shr    eax,cl
c001c29d:	89 c7                	mov    edi,eax
c001c29f:	89 e9                	mov    ecx,ebp
c001c2a1:	d3 e3                	shl    ebx,cl
c001c2a3:	89 f0                	mov    eax,esi
c001c2a5:	88 d1                	mov    cl,dl
c001c2a7:	d3 e8                	shr    eax,cl
c001c2a9:	09 d8                	or     eax,ebx
c001c2ab:	89 e9                	mov    ecx,ebp
c001c2ad:	d3 e6                	shl    esi,cl
c001c2af:	89 f3                	mov    ebx,esi
c001c2b1:	89 fa                	mov    edx,edi
c001c2b3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2b7:	89 d1                	mov    ecx,edx
c001c2b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2bd:	89 c6                	mov    esi,eax
c001c2bf:	89 d7                	mov    edi,edx
c001c2c1:	39 d1                	cmp    ecx,edx
c001c2c3:	72 27                	jb     c001c2ec <__umoddi3+0x10c>
c001c2c5:	74 21                	je     c001c2e8 <__umoddi3+0x108>
c001c2c7:	89 ca                	mov    edx,ecx
c001c2c9:	29 f3                	sub    ebx,esi
c001c2cb:	19 fa                	sbb    edx,edi
c001c2cd:	89 d0                	mov    eax,edx
c001c2cf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c2d3:	d3 e0                	shl    eax,cl
c001c2d5:	89 e9                	mov    ecx,ebp
c001c2d7:	d3 eb                	shr    ebx,cl
c001c2d9:	09 d8                	or     eax,ebx
c001c2db:	d3 ea                	shr    edx,cl
c001c2dd:	83 c4 1c             	add    esp,0x1c
c001c2e0:	5b                   	pop    ebx
c001c2e1:	5e                   	pop    esi
c001c2e2:	5f                   	pop    edi
c001c2e3:	5d                   	pop    ebp
c001c2e4:	c3                   	ret    
c001c2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e8:	39 c3                	cmp    ebx,eax
c001c2ea:	73 db                	jae    c001c2c7 <__umoddi3+0xe7>
c001c2ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c2f0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c2f4:	89 d7                	mov    edi,edx
c001c2f6:	89 c6                	mov    esi,eax
c001c2f8:	eb cd                	jmp    c001c2c7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c2fa <_init>:
c001c2fa:	55                   	push   ebp
c001c2fb:	89 e5                	mov    ebp,esp
c001c2fd:	e8 f2 3d fe ff       	call   c00000f4 <frame_dummy>
c001c302:	e8 e5 fa ff ff       	call   c001bdec <__do_global_ctors_aux>
c001c307:	5d                   	pop    ebp
c001c308:	c3                   	ret    

Disassembly of section .fini:

c001c309 <_fini>:
c001c309:	55                   	push   ebp
c001c30a:	89 e5                	mov    ebp,esp
c001c30c:	e8 73 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c311:	5d                   	pop    ebp
c001c312:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c314 <Computer::~Computer()>:
c001c314:	83 ec 0c             	sub    esp,0xc
c001c317:	ba d8 d5 01 c0       	mov    edx,0xc001d5d8
c001c31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c320:	89 10                	mov    DWORD PTR [eax],edx
c001c322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c326:	83 ec 0c             	sub    esp,0xc
c001c329:	50                   	push   eax
c001c32a:	e8 1f f5 fe ff       	call   c000b84e <Device::~Device()>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	90                   	nop
c001c333:	83 c4 0c             	add    esp,0xc
c001c336:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c338 <Computer::~Computer()>:
c001c338:	83 ec 0c             	sub    esp,0xc
c001c33b:	83 ec 0c             	sub    esp,0xc
c001c33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c342:	e8 cd ff ff ff       	call   c001c314 <Computer::~Computer()>
c001c347:	83 c4 10             	add    esp,0x10
c001c34a:	83 ec 08             	sub    esp,0x8
c001c34d:	68 70 01 00 00       	push   0x170
c001c352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c356:	e8 be e0 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	83 c4 0c             	add    esp,0xc
c001c361:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c362 <idleCommon()>:
c001c362:	83 ec 0c             	sub    esp,0xc
c001c365:	fa                   	cli    
c001c366:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c36c:	e8 13 74 ff ff       	call   c0013784 <schedule()>
c001c371:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c376:	48                   	dec    eax
c001c377:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c37c:	75 01                	jne    c001c37f <idleCommon()+0x1d>
c001c37e:	fb                   	sti    
c001c37f:	83 c4 0c             	add    esp,0xc
c001c382:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c384 <LinkedList<UnixFile>::~LinkedList()>:
c001c384:	90                   	nop
c001c385:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c386 <LinkedList<UnixFile>::LinkedList()>:
c001c386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c38a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c394:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c39b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c39f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3c6:	90                   	nop
c001c3c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c3c8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c3c8:	83 ec 0c             	sub    esp,0xc
c001c3cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c3d0:	75 10                	jne    c001c3e2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c3d2:	83 ec 0c             	sub    esp,0xc
c001c3d5:	68 38 d8 01 c0       	push   0xc001d838
c001c3da:	e8 b0 3d ff ff       	call   c001018f <KePanic(char const*)>
c001c3df:	83 c4 10             	add    esp,0x10
c001c3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3e8:	85 c0                	test   eax,eax
c001c3ea:	74 34                	je     c001c420 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3f3:	85 c0                	test   eax,eax
c001c3f5:	74 29                	je     c001c420 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c402:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c409:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c40d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c417:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c41e:	eb 65                	jmp    c001c485 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c424:	8b 00                	mov    eax,DWORD PTR [eax]
c001c426:	85 c0                	test   eax,eax
c001c428:	75 4b                	jne    c001c475 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c431:	85 c0                	test   eax,eax
c001c433:	75 40                	jne    c001c475 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c439:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c43d:	89 10                	mov    DWORD PTR [eax],edx
c001c43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c443:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c447:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c451:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c45f:	85 c0                	test   eax,eax
c001c461:	74 22                	je     c001c485 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c463:	83 ec 0c             	sub    esp,0xc
c001c466:	68 5a d8 01 c0       	push   0xc001d85a
c001c46b:	e8 1f 3d ff ff       	call   c001018f <KePanic(char const*)>
c001c470:	83 c4 10             	add    esp,0x10
c001c473:	eb 10                	jmp    c001c485 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c475:	83 ec 0c             	sub    esp,0xc
c001c478:	68 64 d8 01 c0       	push   0xc001d864
c001c47d:	e8 0d 3d ff ff       	call   c001018f <KePanic(char const*)>
c001c482:	83 c4 10             	add    esp,0x10
c001c485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c489:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c48c:	8d 50 01             	lea    edx,[eax+0x1]
c001c48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c493:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c496:	90                   	nop
c001c497:	83 c4 0c             	add    esp,0xc
c001c49a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c49c <LinkedList<UnixFile>::getFirstElement()>:
c001c49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c4a4 <LinkedList<UnixFile>::removeFirst()>:
c001c4a4:	83 ec 0c             	sub    esp,0xc
c001c4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ad:	85 c0                	test   eax,eax
c001c4af:	75 12                	jne    c001c4c3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c4b1:	83 ec 0c             	sub    esp,0xc
c001c4b4:	68 70 d8 01 c0       	push   0xc001d870
c001c4b9:	e8 d1 3c ff ff       	call   c001018f <KePanic(char const*)>
c001c4be:	83 c4 10             	add    esp,0x10
c001c4c1:	eb 7e                	jmp    c001c541 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4cd:	85 c0                	test   eax,eax
c001c4cf:	74 10                	je     c001c4e1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c4d1:	83 ec 0c             	sub    esp,0xc
c001c4d4:	68 bb d8 01 c0       	push   0xc001d8bb
c001c4d9:	e8 b1 3c ff ff       	call   c001018f <KePanic(char const*)>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ea:	85 c0                	test   eax,eax
c001c4ec:	75 33                	jne    c001c521 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c507:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c50a:	83 f8 01             	cmp    eax,0x1
c001c50d:	74 21                	je     c001c530 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c50f:	83 ec 0c             	sub    esp,0xc
c001c512:	68 94 d8 01 c0       	push   0xc001d894
c001c517:	e8 73 3c ff ff       	call   c001018f <KePanic(char const*)>
c001c51c:	83 c4 10             	add    esp,0x10
c001c51f:	eb 0f                	jmp    c001c530 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c525:	8b 00                	mov    eax,DWORD PTR [eax]
c001c527:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52e:	89 10                	mov    DWORD PTR [eax],edx
c001c530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c534:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c537:	8d 50 ff             	lea    edx,[eax-0x1]
c001c53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c541:	83 c4 0c             	add    esp,0xc
c001c544:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c546 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c54a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c54d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c54e <DriverlessDevice::~DriverlessDevice()>:
c001c54e:	ba 1c df 01 c0       	mov    edx,0xc001df1c
c001c553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c557:	89 10                	mov    DWORD PTR [eax],edx
c001c559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c55d:	50                   	push   eax
c001c55e:	e8 eb f2 fe ff       	call   c000b84e <Device::~Device()>
c001c563:	83 c4 04             	add    esp,0x4
c001c566:	90                   	nop
c001c567:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c568 <DriverlessDevice::~DriverlessDevice()>:
c001c568:	83 ec 0c             	sub    esp,0xc
c001c56b:	83 ec 0c             	sub    esp,0xc
c001c56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c572:	e8 d7 ff ff ff       	call   c001c54e <DriverlessDevice::~DriverlessDevice()>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	83 ec 08             	sub    esp,0x8
c001c57d:	68 58 01 00 00       	push   0x158
c001c582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c586:	e8 8e de fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001c58b:	83 c4 10             	add    esp,0x10
c001c58e:	83 c4 0c             	add    esp,0xc
c001c591:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c592 <LinkedList<Device>::addElement(Device*)>:
c001c592:	83 ec 0c             	sub    esp,0xc
c001c595:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c59a:	75 10                	jne    c001c5ac <LinkedList<Device>::addElement(Device*)+0x1a>
c001c59c:	83 ec 0c             	sub    esp,0xc
c001c59f:	68 38 d8 01 c0       	push   0xc001d838
c001c5a4:	e8 e6 3b ff ff       	call   c001018f <KePanic(char const*)>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b2:	85 c0                	test   eax,eax
c001c5b4:	74 3a                	je     c001c5f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5bd:	85 c0                	test   eax,eax
c001c5bf:	74 2f                	je     c001c5f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5cc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5e4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c5ee:	eb 68                	jmp    c001c658 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5f6:	85 c0                	test   eax,eax
c001c5f8:	75 4e                	jne    c001c648 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c601:	85 c0                	test   eax,eax
c001c603:	75 43                	jne    c001c648 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c609:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c60d:	89 10                	mov    DWORD PTR [eax],edx
c001c60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c613:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c617:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c621:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c632:	85 c0                	test   eax,eax
c001c634:	74 22                	je     c001c658 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c636:	83 ec 0c             	sub    esp,0xc
c001c639:	68 5a d8 01 c0       	push   0xc001d85a
c001c63e:	e8 4c 3b ff ff       	call   c001018f <KePanic(char const*)>
c001c643:	83 c4 10             	add    esp,0x10
c001c646:	eb 10                	jmp    c001c658 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c648:	83 ec 0c             	sub    esp,0xc
c001c64b:	68 64 d8 01 c0       	push   0xc001d864
c001c650:	e8 3a 3b ff ff       	call   c001018f <KePanic(char const*)>
c001c655:	83 c4 10             	add    esp,0x10
c001c658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c65f:	8d 50 01             	lea    edx,[eax+0x1]
c001c662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c666:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c669:	90                   	nop
c001c66a:	83 c4 0c             	add    esp,0xc
c001c66d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c66e <LinkedList<Device>::LinkedList()>:
c001c66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c672:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c67c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c687:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c68e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c692:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ae:	90                   	nop
c001c6af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c6b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c6b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6b6:	85 c0                	test   eax,eax
c001c6b8:	75 0e                	jne    c001c6c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6c1:	85 c0                	test   eax,eax
c001c6c3:	75 03                	jne    c001c6c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6c5:	b0 01                	mov    al,0x1
c001c6c7:	c3                   	ret    
c001c6c8:	b0 00                	mov    al,0x0
c001c6ca:	90                   	nop
c001c6cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c6cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c6cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c6d4:	83 ec 0c             	sub    esp,0xc
c001c6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6db:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6dd:	85 c0                	test   eax,eax
c001c6df:	75 17                	jne    c001c6f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c6e1:	83 ec 0c             	sub    esp,0xc
c001c6e4:	68 70 d8 01 c0       	push   0xc001d870
c001c6e9:	e8 a1 3a ff ff       	call   c001018f <KePanic(char const*)>
c001c6ee:	83 c4 10             	add    esp,0x10
c001c6f1:	e9 92 00 00 00       	jmp    c001c788 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c6f6:	66 90                	xchg   ax,ax
c001c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c702:	85 c0                	test   eax,eax
c001c704:	0f 95 c0             	setne  al
c001c707:	84 c0                	test   al,al
c001c709:	74 11                	je     c001c71c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c70b:	83 ec 0c             	sub    esp,0xc
c001c70e:	68 bb d8 01 c0       	push   0xc001d8bb
c001c713:	e8 77 3a ff ff       	call   c001018f <KePanic(char const*)>
c001c718:	83 c4 10             	add    esp,0x10
c001c71b:	90                   	nop
c001c71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c720:	8b 00                	mov    eax,DWORD PTR [eax]
c001c722:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c725:	85 c0                	test   eax,eax
c001c727:	0f 94 c0             	sete   al
c001c72a:	84 c0                	test   al,al
c001c72c:	74 36                	je     c001c764 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c732:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c747:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c74a:	83 f8 01             	cmp    eax,0x1
c001c74d:	74 25                	je     c001c774 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c74f:	83 ec 0c             	sub    esp,0xc
c001c752:	68 94 d8 01 c0       	push   0xc001d894
c001c757:	e8 33 3a ff ff       	call   c001018f <KePanic(char const*)>
c001c75c:	83 c4 10             	add    esp,0x10
c001c75f:	eb 13                	jmp    c001c774 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c761:	8d 76 00             	lea    esi,[esi+0x0]
c001c764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c768:	8b 00                	mov    eax,DWORD PTR [eax]
c001c76a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c771:	89 10                	mov    DWORD PTR [eax],edx
c001c773:	90                   	nop
c001c774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c778:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c77b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c782:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c785:	8d 76 00             	lea    esi,[esi+0x0]
c001c788:	83 c4 0c             	add    esp,0xc
c001c78b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c78c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c794:	75 12                	jne    c001c7a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c796:	83 ec 0c             	sub    esp,0xc
c001c799:	68 38 d8 01 c0       	push   0xc001d838
c001c79e:	e8 ec 39 ff ff       	call   c001018f <KePanic(char const*)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	66 90                	xchg   ax,ax
c001c7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ae:	85 c0                	test   eax,eax
c001c7b0:	74 36                	je     c001c7e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7b9:	85 c0                	test   eax,eax
c001c7bb:	74 2b                	je     c001c7e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c7e4:	eb 6a                	jmp    c001c850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c7e6:	66 90                	xchg   ax,ax
c001c7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ee:	85 c0                	test   eax,eax
c001c7f0:	75 4e                	jne    c001c840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7f9:	85 c0                	test   eax,eax
c001c7fb:	75 43                	jne    c001c840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c801:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c805:	89 10                	mov    DWORD PTR [eax],edx
c001c807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c80f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c819:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c824:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c827:	85 c0                	test   eax,eax
c001c829:	74 25                	je     c001c850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c82b:	83 ec 0c             	sub    esp,0xc
c001c82e:	68 5a d8 01 c0       	push   0xc001d85a
c001c833:	e8 57 39 ff ff       	call   c001018f <KePanic(char const*)>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	eb 13                	jmp    c001c850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c83d:	8d 76 00             	lea    esi,[esi+0x0]
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	68 64 d8 01 c0       	push   0xc001d864
c001c848:	e8 42 39 ff ff       	call   c001018f <KePanic(char const*)>
c001c84d:	83 c4 10             	add    esp,0x10
c001c850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c854:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c857:	8d 50 01             	lea    edx,[eax+0x1]
c001c85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c861:	90                   	nop
c001c862:	83 c4 0c             	add    esp,0xc
c001c865:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c868 <ACPI::~ACPI()>:
c001c868:	83 ec 0c             	sub    esp,0xc
c001c86b:	ba 94 e4 01 c0       	mov    edx,0xc001e494
c001c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c874:	89 10                	mov    DWORD PTR [eax],edx
c001c876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87a:	83 ec 0c             	sub    esp,0xc
c001c87d:	50                   	push   eax
c001c87e:	e8 cb ef fe ff       	call   c000b84e <Device::~Device()>
c001c883:	83 c4 10             	add    esp,0x10
c001c886:	90                   	nop
c001c887:	83 c4 0c             	add    esp,0xc
c001c88a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c88c <ACPI::~ACPI()>:
c001c88c:	83 ec 0c             	sub    esp,0xc
c001c88f:	83 ec 0c             	sub    esp,0xc
c001c892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c896:	e8 cd ff ff ff       	call   c001c868 <ACPI::~ACPI()>
c001c89b:	83 c4 10             	add    esp,0x10
c001c89e:	83 ec 08             	sub    esp,0x8
c001c8a1:	68 64 12 00 00       	push   0x1264
c001c8a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8aa:	e8 6a db fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001c8af:	83 c4 10             	add    esp,0x10
c001c8b2:	83 c4 0c             	add    esp,0xc
c001c8b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c8b8 <LinkedList<Device>::~LinkedList()>:
c001c8b8:	90                   	nop
c001c8b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c8bc <LinkedList<Device>::isEmpty()>:
c001c8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8c2:	85 c0                	test   eax,eax
c001c8c4:	75 0e                	jne    c001c8d4 <LinkedList<Device>::isEmpty()+0x18>
c001c8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8cd:	85 c0                	test   eax,eax
c001c8cf:	75 03                	jne    c001c8d4 <LinkedList<Device>::isEmpty()+0x18>
c001c8d1:	b0 01                	mov    al,0x1
c001c8d3:	c3                   	ret    
c001c8d4:	b0 00                	mov    al,0x0
c001c8d6:	90                   	nop
c001c8d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c8d8 <LinkedList<Device>::getFirstElement()>:
c001c8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c8e0 <LinkedList<Device>::removeFirst()>:
c001c8e0:	83 ec 0c             	sub    esp,0xc
c001c8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	75 17                	jne    c001c904 <LinkedList<Device>::removeFirst()+0x24>
c001c8ed:	83 ec 0c             	sub    esp,0xc
c001c8f0:	68 70 d8 01 c0       	push   0xc001d870
c001c8f5:	e8 95 38 ff ff       	call   c001018f <KePanic(char const*)>
c001c8fa:	83 c4 10             	add    esp,0x10
c001c8fd:	e9 92 00 00 00       	jmp    c001c994 <LinkedList<Device>::removeFirst()+0xb4>
c001c902:	66 90                	xchg   ax,ax
c001c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c90b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c911:	85 c0                	test   eax,eax
c001c913:	74 13                	je     c001c928 <LinkedList<Device>::removeFirst()+0x48>
c001c915:	83 ec 0c             	sub    esp,0xc
c001c918:	68 bb d8 01 c0       	push   0xc001d8bb
c001c91d:	e8 6d 38 ff ff       	call   c001018f <KePanic(char const*)>
c001c922:	83 c4 10             	add    esp,0x10
c001c925:	8d 76 00             	lea    esi,[esi+0x0]
c001c928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c92e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c934:	85 c0                	test   eax,eax
c001c936:	75 34                	jne    c001c96c <LinkedList<Device>::removeFirst()+0x8c>
c001c938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c946:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c951:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c954:	83 f8 01             	cmp    eax,0x1
c001c957:	74 27                	je     c001c980 <LinkedList<Device>::removeFirst()+0xa0>
c001c959:	83 ec 0c             	sub    esp,0xc
c001c95c:	68 94 d8 01 c0       	push   0xc001d894
c001c961:	e8 29 38 ff ff       	call   c001018f <KePanic(char const*)>
c001c966:	83 c4 10             	add    esp,0x10
c001c969:	eb 15                	jmp    c001c980 <LinkedList<Device>::removeFirst()+0xa0>
c001c96b:	90                   	nop
c001c96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c970:	8b 00                	mov    eax,DWORD PTR [eax]
c001c972:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97c:	89 10                	mov    DWORD PTR [eax],edx
c001c97e:	66 90                	xchg   ax,ax
c001c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c987:	8d 50 ff             	lea    edx,[eax-0x1]
c001c98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c991:	8d 76 00             	lea    esi,[esi+0x0]
c001c994:	83 c4 0c             	add    esp,0xc
c001c997:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c998 <CPU::~CPU()>:
c001c998:	83 ec 0c             	sub    esp,0xc
c001c99b:	ba 30 e6 01 c0       	mov    edx,0xc001e630
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	89 10                	mov    DWORD PTR [eax],edx
c001c9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9aa:	83 ec 0c             	sub    esp,0xc
c001c9ad:	50                   	push   eax
c001c9ae:	e8 9b ee fe ff       	call   c000b84e <Device::~Device()>
c001c9b3:	83 c4 10             	add    esp,0x10
c001c9b6:	90                   	nop
c001c9b7:	83 c4 0c             	add    esp,0xc
c001c9ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c9bc <CPU::~CPU()>:
c001c9bc:	83 ec 0c             	sub    esp,0xc
c001c9bf:	83 ec 0c             	sub    esp,0xc
c001c9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9c6:	e8 cd ff ff ff       	call   c001c998 <CPU::~CPU()>
c001c9cb:	83 c4 10             	add    esp,0x10
c001c9ce:	83 ec 08             	sub    esp,0x8
c001c9d1:	68 94 11 00 00       	push   0x1194
c001c9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9da:	e8 3a da fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	83 c4 0c             	add    esp,0xc
c001c9e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c9e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c9e8:	90                   	nop
c001c9e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c9ec <ThreadControlBlock::ThreadControlBlock()>:
c001c9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c9f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9fb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca06:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca11:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca27:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca2f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca33:	90                   	nop
c001ca34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca78:	90                   	nop
c001ca79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ca7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ca7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ca83:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ca84 <PCI::~PCI()>:
c001ca84:	83 ec 0c             	sub    esp,0xc
c001ca87:	ba cc f2 01 c0       	mov    edx,0xc001f2cc
c001ca8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca90:	89 10                	mov    DWORD PTR [eax],edx
c001ca92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca96:	83 ec 0c             	sub    esp,0xc
c001ca99:	50                   	push   eax
c001ca9a:	e8 39 e8 fe ff       	call   c000b2d8 <Bus::~Bus()>
c001ca9f:	83 c4 10             	add    esp,0x10
c001caa2:	90                   	nop
c001caa3:	83 c4 0c             	add    esp,0xc
c001caa6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001caa8 <PCI::~PCI()>:
c001caa8:	83 ec 0c             	sub    esp,0xc
c001caab:	83 ec 0c             	sub    esp,0xc
c001caae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cab2:	e8 cd ff ff ff       	call   c001ca84 <PCI::~PCI()>
c001cab7:	83 c4 10             	add    esp,0x10
c001caba:	83 ec 08             	sub    esp,0x8
c001cabd:	68 5c 01 00 00       	push   0x15c
c001cac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cac6:	e8 4e d9 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cacb:	83 c4 10             	add    esp,0x10
c001cace:	83 c4 0c             	add    esp,0xc
c001cad1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cad2 <IDE::~IDE()>:
c001cad2:	83 ec 0c             	sub    esp,0xc
c001cad5:	ba 80 f3 01 c0       	mov    edx,0xc001f380
c001cada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cade:	89 10                	mov    DWORD PTR [eax],edx
c001cae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	50                   	push   eax
c001cae8:	e8 db f1 fe ff       	call   c000bcc8 <HardDiskController::~HardDiskController()>
c001caed:	83 c4 10             	add    esp,0x10
c001caf0:	90                   	nop
c001caf1:	83 c4 0c             	add    esp,0xc
c001caf4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001caf6 <IDE::~IDE()>:
c001caf6:	83 ec 0c             	sub    esp,0xc
c001caf9:	83 ec 0c             	sub    esp,0xc
c001cafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb00:	e8 cd ff ff ff       	call   c001cad2 <IDE::~IDE()>
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	83 ec 08             	sub    esp,0x8
c001cb0b:	68 70 02 00 00       	push   0x270
c001cb10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb14:	e8 00 d9 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cb19:	83 c4 10             	add    esp,0x10
c001cb1c:	83 c4 0c             	add    esp,0xc
c001cb1f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb20 <SATABus::~SATABus()>:
c001cb20:	83 ec 0c             	sub    esp,0xc
c001cb23:	ba d0 f3 01 c0       	mov    edx,0xc001f3d0
c001cb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb2c:	89 10                	mov    DWORD PTR [eax],edx
c001cb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb32:	83 ec 0c             	sub    esp,0xc
c001cb35:	50                   	push   eax
c001cb36:	e8 8d f1 fe ff       	call   c000bcc8 <HardDiskController::~HardDiskController()>
c001cb3b:	83 c4 10             	add    esp,0x10
c001cb3e:	90                   	nop
c001cb3f:	83 c4 0c             	add    esp,0xc
c001cb42:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cb44 <SATABus::~SATABus()>:
c001cb44:	83 ec 0c             	sub    esp,0xc
c001cb47:	83 ec 0c             	sub    esp,0xc
c001cb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb4e:	e8 cd ff ff ff       	call   c001cb20 <SATABus::~SATABus()>
c001cb53:	83 c4 10             	add    esp,0x10
c001cb56:	83 ec 08             	sub    esp,0x8
c001cb59:	68 64 01 00 00       	push   0x164
c001cb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb62:	e8 b2 d8 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cb67:	83 c4 10             	add    esp,0x10
c001cb6a:	83 c4 0c             	add    esp,0xc
c001cb6d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cb6e <ATA::~ATA()>:
c001cb6e:	83 ec 0c             	sub    esp,0xc
c001cb71:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c001cb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7a:	89 10                	mov    DWORD PTR [eax],edx
c001cb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb80:	83 ec 0c             	sub    esp,0xc
c001cb83:	50                   	push   eax
c001cb84:	e8 21 f2 fe ff       	call   c000bdaa <PhysicalDisk::~PhysicalDisk()>
c001cb89:	83 c4 10             	add    esp,0x10
c001cb8c:	90                   	nop
c001cb8d:	83 c4 0c             	add    esp,0xc
c001cb90:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cb92 <ATA::~ATA()>:
c001cb92:	83 ec 0c             	sub    esp,0xc
c001cb95:	83 ec 0c             	sub    esp,0xc
c001cb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb9c:	e8 cd ff ff ff       	call   c001cb6e <ATA::~ATA()>
c001cba1:	83 c4 10             	add    esp,0x10
c001cba4:	83 ec 08             	sub    esp,0x8
c001cba7:	68 7c 01 00 00       	push   0x17c
c001cbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb0:	e8 64 d8 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cbb5:	83 c4 10             	add    esp,0x10
c001cbb8:	83 c4 0c             	add    esp,0xc
c001cbbb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cbbc <ATAPI::~ATAPI()>:
c001cbbc:	83 ec 0c             	sub    esp,0xc
c001cbbf:	ba 58 f4 01 c0       	mov    edx,0xc001f458
c001cbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc8:	89 10                	mov    DWORD PTR [eax],edx
c001cbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbce:	83 ec 0c             	sub    esp,0xc
c001cbd1:	50                   	push   eax
c001cbd2:	e8 d3 f1 fe ff       	call   c000bdaa <PhysicalDisk::~PhysicalDisk()>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	90                   	nop
c001cbdb:	83 c4 0c             	add    esp,0xc
c001cbde:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cbe0 <ATAPI::~ATAPI()>:
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	83 ec 0c             	sub    esp,0xc
c001cbe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbea:	e8 cd ff ff ff       	call   c001cbbc <ATAPI::~ATAPI()>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	83 ec 08             	sub    esp,0x8
c001cbf5:	68 84 01 00 00       	push   0x184
c001cbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbfe:	e8 16 d8 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	83 c4 0c             	add    esp,0xc
c001cc09:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc0a <SATA::~SATA()>:
c001cc0a:	83 ec 0c             	sub    esp,0xc
c001cc0d:	ba 0c f5 01 c0       	mov    edx,0xc001f50c
c001cc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc16:	89 10                	mov    DWORD PTR [eax],edx
c001cc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1c:	83 ec 0c             	sub    esp,0xc
c001cc1f:	50                   	push   eax
c001cc20:	e8 85 f1 fe ff       	call   c000bdaa <PhysicalDisk::~PhysicalDisk()>
c001cc25:	83 c4 10             	add    esp,0x10
c001cc28:	90                   	nop
c001cc29:	83 c4 0c             	add    esp,0xc
c001cc2c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc2e <SATA::~SATA()>:
c001cc2e:	83 ec 0c             	sub    esp,0xc
c001cc31:	83 ec 0c             	sub    esp,0xc
c001cc34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc38:	e8 cd ff ff ff       	call   c001cc0a <SATA::~SATA()>
c001cc3d:	83 c4 10             	add    esp,0x10
c001cc40:	83 ec 08             	sub    esp,0x8
c001cc43:	68 7c 01 00 00       	push   0x17c
c001cc48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc4c:	e8 c8 d7 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cc51:	83 c4 10             	add    esp,0x10
c001cc54:	83 c4 0c             	add    esp,0xc
c001cc57:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cc58 <SATAPI::~SATAPI()>:
c001cc58:	83 ec 0c             	sub    esp,0xc
c001cc5b:	ba 44 f6 01 c0       	mov    edx,0xc001f644
c001cc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc64:	89 10                	mov    DWORD PTR [eax],edx
c001cc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6a:	83 ec 0c             	sub    esp,0xc
c001cc6d:	50                   	push   eax
c001cc6e:	e8 37 f1 fe ff       	call   c000bdaa <PhysicalDisk::~PhysicalDisk()>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	90                   	nop
c001cc77:	83 c4 0c             	add    esp,0xc
c001cc7a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cc7c <SATAPI::~SATAPI()>:
c001cc7c:	83 ec 0c             	sub    esp,0xc
c001cc7f:	83 ec 0c             	sub    esp,0xc
c001cc82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc86:	e8 cd ff ff ff       	call   c001cc58 <SATAPI::~SATAPI()>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	83 ec 08             	sub    esp,0x8
c001cc91:	68 84 01 00 00       	push   0x184
c001cc96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc9a:	e8 7a d7 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cc9f:	83 c4 10             	add    esp,0x10
c001cca2:	83 c4 0c             	add    esp,0xc
c001cca5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cca6 <IOAPIC::~IOAPIC()>:
c001cca6:	83 ec 0c             	sub    esp,0xc
c001cca9:	ba 84 f6 01 c0       	mov    edx,0xc001f684
c001ccae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb2:	89 10                	mov    DWORD PTR [eax],edx
c001ccb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	50                   	push   eax
c001ccbc:	e8 8d eb fe ff       	call   c000b84e <Device::~Device()>
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	90                   	nop
c001ccc5:	83 c4 0c             	add    esp,0xc
c001ccc8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ccca <IOAPIC::~IOAPIC()>:
c001ccca:	83 ec 0c             	sub    esp,0xc
c001cccd:	83 ec 0c             	sub    esp,0xc
c001ccd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd4:	e8 cd ff ff ff       	call   c001cca6 <IOAPIC::~IOAPIC()>
c001ccd9:	83 c4 10             	add    esp,0x10
c001ccdc:	83 ec 08             	sub    esp,0x8
c001ccdf:	68 68 01 00 00       	push   0x168
c001cce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce8:	e8 2c d7 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cced:	83 c4 10             	add    esp,0x10
c001ccf0:	83 c4 0c             	add    esp,0xc
c001ccf3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ccf4 <APICTimer::~APICTimer()>:
c001ccf4:	83 ec 0c             	sub    esp,0xc
c001ccf7:	ba cc f6 01 c0       	mov    edx,0xc001f6cc
c001ccfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd00:	89 10                	mov    DWORD PTR [eax],edx
c001cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	50                   	push   eax
c001cd0a:	e8 7d 04 ff ff       	call   c000d18c <Timer::~Timer()>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	90                   	nop
c001cd13:	83 c4 0c             	add    esp,0xc
c001cd16:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd18 <APICTimer::~APICTimer()>:
c001cd18:	83 ec 0c             	sub    esp,0xc
c001cd1b:	83 ec 0c             	sub    esp,0xc
c001cd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd22:	e8 cd ff ff ff       	call   c001ccf4 <APICTimer::~APICTimer()>
c001cd27:	83 c4 10             	add    esp,0x10
c001cd2a:	83 ec 08             	sub    esp,0x8
c001cd2d:	68 60 01 00 00       	push   0x160
c001cd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd36:	e8 de d6 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cd3b:	83 c4 10             	add    esp,0x10
c001cd3e:	83 c4 0c             	add    esp,0xc
c001cd41:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cd44 <PIT::~PIT()>:
c001cd44:	83 ec 0c             	sub    esp,0xc
c001cd47:	ba 1c f7 01 c0       	mov    edx,0xc001f71c
c001cd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd50:	89 10                	mov    DWORD PTR [eax],edx
c001cd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd56:	83 ec 0c             	sub    esp,0xc
c001cd59:	50                   	push   eax
c001cd5a:	e8 2d 04 ff ff       	call   c000d18c <Timer::~Timer()>
c001cd5f:	83 c4 10             	add    esp,0x10
c001cd62:	90                   	nop
c001cd63:	83 c4 0c             	add    esp,0xc
c001cd66:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cd68 <PIT::~PIT()>:
c001cd68:	83 ec 0c             	sub    esp,0xc
c001cd6b:	83 ec 0c             	sub    esp,0xc
c001cd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd72:	e8 cd ff ff ff       	call   c001cd44 <PIT::~PIT()>
c001cd77:	83 c4 10             	add    esp,0x10
c001cd7a:	83 ec 08             	sub    esp,0x8
c001cd7d:	68 5c 01 00 00       	push   0x15c
c001cd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd86:	e8 8e d6 fe ff       	call   c000a419 <operator delete(void*, unsigned long)>
c001cd8b:	83 c4 10             	add    esp,0x10
c001cd8e:	83 c4 0c             	add    esp,0xc
c001cd91:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 21 e7 01 c0       	mov    esi,0xc001e721
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 3d e7 01 c0       	mov    esi,0xc001e73d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
